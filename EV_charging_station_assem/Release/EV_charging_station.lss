
EV_charging_station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00005300  00005394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006b5  00800108  00800108  0000543c  2**0
                  ALLOC
  3 .stab         0000d950  00000000  00000000  0000543c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007b49  00000000  00000000  00012d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0001a8d5  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0001a908  2**2
                  CONTENTS, READONLY
  7 .avr.prop     0000002c  00000000  00000000  0001a944  2**0
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0001a970  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  0001ae56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0001b2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0001b313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_1>
       8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_2>
       c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      10:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      14:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      18:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      1c:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_7>
      20:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      24:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      28:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      34:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      3c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      44:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      4c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__stack+0x49>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
	...

000000ae <__trampolines_end>:
      ae:	00 40       	sbci	r16, 0x00	; 0
      b0:	7a 10       	cpse	r7, r10
      b2:	f3 5a       	subi	r31, 0xA3	; 163
      b4:	00 a0       	ldd	r0, Z+32	; 0x20
      b6:	72 4e       	sbci	r23, 0xE2	; 226
      b8:	18 09       	sbc	r17, r8
      ba:	00 10       	cpse	r0, r0
      bc:	a5 d4       	rcall	.+2378   	; 0xa08 <calculateTimeRemaining+0x10>
      be:	e8 00       	.word	0x00e8	; ????
      c0:	00 e8       	ldi	r16, 0x80	; 128
      c2:	76 48       	sbci	r23, 0x86	; 134
      c4:	17 00       	.word	0x0017	; ????
      c6:	00 e4       	ldi	r16, 0x40	; 64
      c8:	0b 54       	subi	r16, 0x4B	; 75
      ca:	02 00       	.word	0x0002	; ????
      cc:	00 ca       	rjmp	.-3072   	; 0xfffff4ce <__eeprom_end+0xff7ef4ce>
      ce:	9a 3b       	cpi	r25, 0xBA	; 186
      d0:	00 00       	nop
      d2:	00 e1       	ldi	r16, 0x10	; 16
      d4:	f5 05       	cpc	r31, r5
      d6:	00 00       	nop
      d8:	80 96       	adiw	r24, 0x20	; 32
      da:	98 00       	.word	0x0098	; ????
      dc:	00 00       	nop
      de:	40 42       	sbci	r20, 0x20	; 32
      e0:	0f 00       	.word	0x000f	; ????
      e2:	00 00       	nop
      e4:	a0 86       	std	Z+8, r10	; 0x08
      e6:	01 00       	.word	0x0001	; ????
      e8:	00 00       	nop
      ea:	10 27       	eor	r17, r16
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	e8 03       	fmulsu	r22, r16
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	64 00       	.word	0x0064	; ????
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	0a 00       	.word	0x000a	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	2c 76       	andi	r18, 0x6C	; 108
     10a:	d8 88       	ldd	r13, Y+16	; 0x10
     10c:	dc 67       	ori	r29, 0x7C	; 124
     10e:	4f 08       	sbc	r4, r15
     110:	23 df       	rcall	.-442    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     112:	c1 df       	rcall	.-126    	; 0x96 <__SREG__+0x57>
     114:	ae 59       	subi	r26, 0x9E	; 158
     116:	e1 b1       	in	r30, 0x01	; 1
     118:	b7 96       	adiw	r30, 0x27	; 39
     11a:	e5 e3       	ldi	r30, 0x35	; 53
     11c:	e4 53       	subi	r30, 0x34	; 52
     11e:	c6 3a       	cpi	r28, 0xA6	; 166
     120:	e6 51       	subi	r30, 0x16	; 22
     122:	99 76       	andi	r25, 0x69	; 105
     124:	96 e8       	ldi	r25, 0x86	; 134
     126:	e6 c2       	rjmp	.+1484   	; 0x6f4 <ADC_INIT+0x4>
     128:	84 26       	eor	r8, r20
     12a:	eb 89       	ldd	r30, Y+19	; 0x13
     12c:	8c 9b       	sbis	0x11, 4	; 17
     12e:	62 ed       	ldi	r22, 0xD2	; 210
     130:	40 7c       	andi	r20, 0xC0	; 192
     132:	6f fc       	.word	0xfc6f	; ????
     134:	ef bc       	out	0x2f, r14	; 47
     136:	9c 9f       	mul	r25, r28
     138:	40 f2       	brcs	.-112    	; 0xca <__trampolines_end+0x1c>
     13a:	ba a5       	ldd	r27, Y+42	; 0x2a
     13c:	6f a5       	ldd	r22, Y+47	; 0x2f
     13e:	f4 90       	lpm	r15, Z
     140:	05 5a       	subi	r16, 0xA5	; 165
     142:	2a f7       	brpl	.-54     	; 0x10e <__trampolines_end+0x60>
     144:	5c 93       	st	X, r21
     146:	6b 6c       	ori	r22, 0xCB	; 203
     148:	f9 67       	ori	r31, 0x79	; 121
     14a:	6d c1       	rjmp	.+730    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     14c:	1b fc       	.word	0xfc1b	; ????
     14e:	e0 e4       	ldi	r30, 0x40	; 64
     150:	0d 47       	sbci	r16, 0x7D	; 125
     152:	fe f5       	brtc	.+126    	; 0x1d2 <.do_clear_bss_loop>
     154:	20 e6       	ldi	r18, 0x60	; 96
     156:	b5 00       	.word	0x00b5	; ????
     158:	d0 ed       	ldi	r29, 0xD0	; 208
     15a:	90 2e       	mov	r9, r16
     15c:	03 00       	.word	0x0003	; ????
     15e:	94 35       	cpi	r25, 0x54	; 84
     160:	77 05       	cpc	r23, r7
     162:	00 80       	ld	r0, Z
     164:	84 1e       	adc	r8, r20
     166:	08 00       	.word	0x0008	; ????
     168:	00 20       	and	r0, r0
     16a:	4e 0a       	sbc	r4, r30
     16c:	00 00       	nop
     16e:	00 c8       	rjmp	.-4096   	; 0xfffff170 <__eeprom_end+0xff7ef170>
     170:	0c 33       	cpi	r16, 0x3C	; 60
     172:	33 33       	cpi	r19, 0x33	; 51
     174:	33 0f       	add	r19, r19
     176:	98 6e       	ori	r25, 0xE8	; 232
     178:	12 83       	std	Z+2, r17	; 0x02
     17a:	11 41       	sbci	r17, 0x11	; 17
     17c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     17e:	21 14       	cp	r2, r1
     180:	89 3b       	cpi	r24, 0xB9	; 185
     182:	e6 55       	subi	r30, 0x56	; 86
     184:	16 cf       	rjmp	.-468    	; 0xffffffb2 <__eeprom_end+0xff7effb2>
     186:	fe e6       	ldi	r31, 0x6E	; 110
     188:	db 18       	sub	r13, r11
     18a:	d1 84       	ldd	r13, Z+9	; 0x09
     18c:	4b 38       	cpi	r20, 0x8B	; 139
     18e:	1b f7       	brvc	.-58     	; 0x156 <__trampolines_end+0xa8>
     190:	7c 1d       	adc	r23, r12
     192:	90 1d       	adc	r25, r0
     194:	a4 bb       	out	0x14, r26	; 20
     196:	e4 24       	eor	r14, r4
     198:	20 32       	cpi	r18, 0x20	; 32
     19a:	84 72       	andi	r24, 0x24	; 36
     19c:	5e 22       	and	r5, r30
     19e:	81 00       	.word	0x0081	; ????
     1a0:	c9 f1       	breq	.+114    	; 0x214 <TaskDisplayRefresh+0x2e>
     1a2:	24 ec       	ldi	r18, 0xC4	; 196
     1a4:	a1 e5       	ldi	r26, 0x51	; 81
     1a6:	3d 27       	eor	r19, r29

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf e5       	ldi	r28, 0x5F	; 95
     1ae:	d8 e0       	ldi	r29, 0x08	; 8
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e6       	ldi	r26, 0x60	; 96
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e0 e0       	ldi	r30, 0x00	; 0
     1bc:	f3 e5       	ldi	r31, 0x53	; 83
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
     1c0:	05 90       	lpm	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	a8 30       	cpi	r26, 0x08	; 8
     1c6:	b1 07       	cpc	r27, r17
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
     1ca:	27 e0       	ldi	r18, 0x07	; 7
     1cc:	a8 e0       	ldi	r26, 0x08	; 8
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
     1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
     1d4:	ad 3b       	cpi	r26, 0xBD	; 189
     1d6:	b2 07       	cpc	r27, r18
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
     1da:	0e 94 0c 24 	call	0x4818	; 0x4818 <main>
     1de:	0c 94 7e 29 	jmp	0x52fc	; 0x52fc <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e6 <TaskDisplayRefresh>:
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	2a 97       	sbiw	r28, 0x0a	; 10
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	0e 94 72 18 	call	0x30e4	; 0x30e4 <xTaskGetTickCount>
     1fe:	9a 87       	std	Y+10, r25	; 0x0a
     200:	89 87       	std	Y+9, r24	; 0x09
     202:	8e 9a       	sbi	0x11, 6	; 17
     204:	86 9a       	sbi	0x10, 6	; 16
     206:	0e 94 88 06 	call	0xd10	; 0xd10 <LCD_Clear>
     20a:	8b e8       	ldi	r24, 0x8B	; 139
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 65 06 	call	0xcca	; 0xcca <LCD_String>
     212:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	89 f0       	breq	.+34     	; 0x23c <TaskDisplayRefresh+0x56>
     21a:	58 f0       	brcs	.+22     	; 0x232 <TaskDisplayRefresh+0x4c>
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	41 f1       	breq	.+80     	; 0x270 <TaskDisplayRefresh+0x8a>
     220:	83 30       	cpi	r24, 0x03	; 3
     222:	f1 f1       	breq	.+124    	; 0x2a0 <TaskDisplayRefresh+0xba>
     224:	64 e6       	ldi	r22, 0x64	; 100
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	ce 01       	movw	r24, r28
     22a:	09 96       	adiw	r24, 0x09	; 9
     22c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <xTaskDelayUntil>
     230:	e8 cf       	rjmp	.-48     	; 0x202 <TaskDisplayRefresh+0x1c>
     232:	82 e9       	ldi	r24, 0x92	; 146
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 65 06 	call	0xcca	; 0xcca <LCD_String>
     23a:	f4 cf       	rjmp	.-24     	; 0x224 <TaskDisplayRefresh+0x3e>
     23c:	87 e9       	ldi	r24, 0x97	; 151
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 65 06 	call	0xcca	; 0xcca <LCD_String>
     244:	80 ec       	ldi	r24, 0xC0	; 192
     246:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCD_Command>
     24a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cap_percentage>
     24e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cap_percentage+0x1>
     252:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <cap_percentage+0x2>
     256:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <cap_percentage+0x3>
     25a:	8d 83       	std	Y+5, r24	; 0x05
     25c:	9e 83       	std	Y+6, r25	; 0x06
     25e:	af 83       	std	Y+7, r26	; 0x07
     260:	b8 87       	std	Y+8, r27	; 0x08
     262:	6d 81       	ldd	r22, Y+5	; 0x05
     264:	7e 81       	ldd	r23, Y+6	; 0x06
     266:	8f 81       	ldd	r24, Y+7	; 0x07
     268:	98 85       	ldd	r25, Y+8	; 0x08
     26a:	0e 94 94 06 	call	0xd28	; 0xd28 <LCD_Float>
     26e:	da cf       	rjmp	.-76     	; 0x224 <TaskDisplayRefresh+0x3e>
     270:	80 ea       	ldi	r24, 0xA0	; 160
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 65 06 	call	0xcca	; 0xcca <LCD_String>
     278:	80 ec       	ldi	r24, 0xC0	; 192
     27a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCD_Command>
     27e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cap_percentage>
     282:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cap_percentage+0x1>
     286:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <cap_percentage+0x2>
     28a:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <cap_percentage+0x3>
     28e:	89 83       	std	Y+1, r24	; 0x01
     290:	9a 83       	std	Y+2, r25	; 0x02
     292:	ab 83       	std	Y+3, r26	; 0x03
     294:	bc 83       	std	Y+4, r27	; 0x04
     296:	69 81       	ldd	r22, Y+1	; 0x01
     298:	7a 81       	ldd	r23, Y+2	; 0x02
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	9c 81       	ldd	r25, Y+4	; 0x04
     29e:	e5 cf       	rjmp	.-54     	; 0x26a <TaskDisplayRefresh+0x84>
     2a0:	8c ea       	ldi	r24, 0xAC	; 172
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	c8 cf       	rjmp	.-112    	; 0x236 <TaskDisplayRefresh+0x50>

000002a6 <TaskChargingStart>:




// Task to Handle Charging Start
void TaskChargingStart(void *pvParameters) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	1f 92       	push	r1
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
    uint8_t event;
    for (;;) {
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
     2b0:	4f ef       	ldi	r20, 0xFF	; 255
     2b2:	5f ef       	ldi	r21, 0xFF	; 255
     2b4:	be 01       	movw	r22, r28
     2b6:	6f 5f       	subi	r22, 0xFF	; 255
     2b8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ba:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <buttonQueue>
     2be:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <buttonQueue+0x1>
     2c2:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <xQueueReceive>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f3       	breq	.-26     	; 0x2b0 <TaskChargingStart+0xa>
            if (event == START_BUTTON_EVENT) {
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	81 f7       	brne	.-32     	; 0x2b0 <TaskChargingStart+0xa>
                Charge_Logic();
     2d0:	0e 94 76 04 	call	0x8ec	; 0x8ec <Charge_Logic>

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     2d4:	6f ef       	ldi	r22, 0xFF	; 255
     2d6:	7f ef       	ldi	r23, 0xFF	; 255
     2d8:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <stateSemaphore>
     2dc:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <stateSemaphore+0x1>
     2e0:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xQueueSemaphoreTake>
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	21 f7       	brne	.-56     	; 0x2b0 <TaskChargingStart+0xa>
                    globalState = CHARGING;
     2e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
                    xSemaphoreGive(stateSemaphore);
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <stateSemaphore>
     2fa:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <stateSemaphore+0x1>
     2fe:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <xQueueGenericSend>
     302:	d6 cf       	rjmp	.-84     	; 0x2b0 <TaskChargingStart+0xa>

00000304 <TaskStopSession>:
        }
    }
}

// Task to Handle Stop Session
void TaskStopSession(void *pvParameters) {
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
    uint8_t event;
    for (;;) {
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
     30e:	4f ef       	ldi	r20, 0xFF	; 255
     310:	5f ef       	ldi	r21, 0xFF	; 255
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <buttonQueue>
     31c:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <buttonQueue+0x1>
     320:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <xQueueReceive>
     324:	88 23       	and	r24, r24
     326:	99 f3       	breq	.-26     	; 0x30e <TaskStopSession+0xa>
            if (event == STOP_BUTTON_EVENT) {
     328:	19 81       	ldd	r17, Y+1	; 0x01
     32a:	12 30       	cpi	r17, 0x02	; 2
     32c:	81 f7       	brne	.-32     	; 0x30e <TaskStopSession+0xa>
                Stop_Charge_Logic();
     32e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <Stop_Charge_Logic>

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     332:	6f ef       	ldi	r22, 0xFF	; 255
     334:	7f ef       	ldi	r23, 0xFF	; 255
     336:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <stateSemaphore>
     33a:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <stateSemaphore+0x1>
     33e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xQueueSemaphoreTake>
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	21 f7       	brne	.-56     	; 0x30e <TaskStopSession+0xa>
                    globalState = DISCHARGING;
     346:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <__data_end>
                    xSemaphoreGive(stateSemaphore);
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <stateSemaphore>
     358:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <stateSemaphore+0x1>
     35c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <xQueueGenericSend>
     360:	d6 cf       	rjmp	.-84     	; 0x30e <TaskStopSession+0xa>

00000362 <__vector_1>:
// Global variable for system state
volatile SystemState globalState = NONE; // Default state


//// Interrupt Service Routine for START Button (INT0)
ISR(INT0_vect) {
     362:	1f 92       	push	r1
     364:	0f 92       	push	r0
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	0f 92       	push	r0
     36a:	11 24       	eor	r1, r1
     36c:	2f 93       	push	r18
     36e:	3f 93       	push	r19
     370:	4f 93       	push	r20
     372:	5f 93       	push	r21
     374:	6f 93       	push	r22
     376:	7f 93       	push	r23
     378:	8f 93       	push	r24
     37a:	9f 93       	push	r25
     37c:	af 93       	push	r26
     37e:	bf 93       	push	r27
     380:	ef 93       	push	r30
     382:	ff 93       	push	r31
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <__vector_1+0x28>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     38e:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t event = START_BUTTON_EVENT;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendFromISR(buttonQueue, &event, &xHigherPriorityTaskWoken);
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	ae 01       	movw	r20, r28
     398:	4e 5f       	subi	r20, 0xFE	; 254
     39a:	5f 4f       	sbci	r21, 0xFF	; 255
     39c:	be 01       	movw	r22, r28
     39e:	6f 5f       	subi	r22, 0xFF	; 255
     3a0:	7f 4f       	sbci	r23, 0xFF	; 255
     3a2:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <buttonQueue>
     3a6:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <buttonQueue+0x1>
     3aa:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xQueueGenericSendFromISR>

    if (xHigherPriorityTaskWoken) {
     3ae:	8a 81       	ldd	r24, Y+2	; 0x02
     3b0:	81 11       	cpse	r24, r1
        portYIELD();
     3b2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
    }
}
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	ff 91       	pop	r31
     3c0:	ef 91       	pop	r30
     3c2:	bf 91       	pop	r27
     3c4:	af 91       	pop	r26
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	7f 91       	pop	r23
     3cc:	6f 91       	pop	r22
     3ce:	5f 91       	pop	r21
     3d0:	4f 91       	pop	r20
     3d2:	3f 91       	pop	r19
     3d4:	2f 91       	pop	r18
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_2>:

// Interrupt Service Routine for STOP Button (INT1)
ISR(INT1_vect) {
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	00 d0       	rcall	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     40c:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t event = STOP_BUTTON_EVENT;
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendFromISR(buttonQueue, &event, &xHigherPriorityTaskWoken);
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	ae 01       	movw	r20, r28
     416:	4e 5f       	subi	r20, 0xFE	; 254
     418:	5f 4f       	sbci	r21, 0xFF	; 255
     41a:	be 01       	movw	r22, r28
     41c:	6f 5f       	subi	r22, 0xFF	; 255
     41e:	7f 4f       	sbci	r23, 0xFF	; 255
     420:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <buttonQueue>
     424:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <buttonQueue+0x1>
     428:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xQueueGenericSendFromISR>

    if (xHigherPriorityTaskWoken) {
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	81 11       	cpse	r24, r1
        portYIELD();
     430:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
    }
}
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <Os_Init>:
        }
    }
}

// OS Initialization
void Os_Init(void) {
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
    // Initialize peripherals
	LCD_Init();
     464:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_Init>
//        while (1); // Handle semaphore creation failure
//    }
//    xSemaphoreGive(lcdSemaphore);

    // Create binary semaphore for global state
    stateSemaphore = xSemaphoreCreateBinary();
     468:	43 e0       	ldi	r20, 0x03	; 3
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <xQueueGenericCreate>
     472:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <stateSemaphore+0x1>
     476:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <stateSemaphore>
//    if (stateSemaphore == NULL) {
//        while (1); // Handle semaphore creation failure
//    }
    xSemaphoreGive(stateSemaphore);
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <xQueueGenericSend>

    // Create the button queue
    buttonQueue = xQueueCreate(5, sizeof(uint8_t));
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	85 e0       	ldi	r24, 0x05	; 5
     48e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <xQueueGenericCreate>
     492:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <buttonQueue+0x1>
     496:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <buttonQueue>
//    if (buttonQueue == NULL) {
//        while (1); // Handle queue creation failure
//    }

//     Create tasks
    xTaskCreate(TaskDisplayRefresh, "DisplayRefresh", 128, NULL, 4, &taskHandleDisplayRefresh);
     49a:	89 eb       	ldi	r24, 0xB9	; 185
     49c:	e8 2e       	mov	r14, r24
     49e:	87 e0       	ldi	r24, 0x07	; 7
     4a0:	f8 2e       	mov	r15, r24
     4a2:	04 e0       	ldi	r16, 0x04	; 4
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	40 e8       	ldi	r20, 0x80	; 128
     4aa:	62 eb       	ldi	r22, 0xB2	; 178
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	83 ef       	ldi	r24, 0xF3	; 243
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <xTaskCreate>
    xTaskCreate(TaskChargingStart, "ChargingStart", 128, NULL, 3, NULL);
     4b6:	f1 2c       	mov	r15, r1
     4b8:	e1 2c       	mov	r14, r1
     4ba:	03 e0       	ldi	r16, 0x03	; 3
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	40 e8       	ldi	r20, 0x80	; 128
     4c2:	61 ec       	ldi	r22, 0xC1	; 193
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	83 e5       	ldi	r24, 0x53	; 83
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <xTaskCreate>
    xTaskCreate(TaskStopSession, "StopSession", 128, NULL, 3, NULL);
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	40 e8       	ldi	r20, 0x80	; 128
     4d4:	6f ec       	ldi	r22, 0xCF	; 207
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	82 e8       	ldi	r24, 0x82	; 130
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <xTaskCreate>
//    xTaskCreate(prd_Buttons, "prd_Buttons", 128, NULL, 4, NULL);

    // Start the scheduler
    vTaskStartScheduler();
}
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
    xTaskCreate(TaskChargingStart, "ChargingStart", 128, NULL, 3, NULL);
    xTaskCreate(TaskStopSession, "StopSession", 128, NULL, 3, NULL);
//    xTaskCreate(prd_Buttons, "prd_Buttons", 128, NULL, 4, NULL);

    // Start the scheduler
    vTaskStartScheduler();
     4e6:	0c 94 0f 18 	jmp	0x301e	; 0x301e <vTaskStartScheduler>

000004ea <vTimer1Callback>:
#define NULLPtr ((void *)0)
static TimerHandle_t xTimer1 = NULL;
static void (*Timer1Callback)(void) = NULLPtr;

static void vTimer1Callback(TimerHandle_t xTimer) {
    if (Timer1Callback != NULLPtr) {
     4ea:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <Timer1Callback>
     4ee:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <Timer1Callback+0x1>
     4f2:	30 97       	sbiw	r30, 0x00	; 0
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <vTimer1Callback+0xe>
        (*Timer1Callback)(); // Call the user callback function
     4f6:	09 94       	ijmp
    }
}
     4f8:	08 95       	ret

000004fa <Timer_vidInitTimer1>:

// Initialize Timer1 (FreeRTOS Software Timer)
void Timer_vidInitTimer1(void) {
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
    // Create the software timer
    xTimer1 = xTimerCreate(
     4fe:	05 e7       	ldi	r16, 0x75	; 117
     500:	12 e0       	ldi	r17, 0x02	; 2
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	64 e1       	ldi	r22, 0x14	; 20
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	8b ed       	ldi	r24, 0xDB	; 219
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 2b 23 	call	0x4656	; 0x4656 <xTimerCreate>
     514:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xTimer1+0x1>
     518:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xTimer1>
        NULL,                                 // Timer ID (not used)
		vTimer1Callback                       // Callback function
    );


}
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <Timer_vidStartTimer1>:

// Start Timer1 (FreeRTOS Software Timer)
void Timer_vidStartTimer1(void) {
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
    if (xTimer1 != NULL) {
     526:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xTimer1>
     52a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xTimer1+0x1>
     52e:	89 2b       	or	r24, r25
     530:	71 f0       	breq	.+28     	; 0x54e <Timer_vidStartTimer1+0x2c>
        xTimerStart(xTimer1, 0);
     532:	0e 94 72 18 	call	0x30e4	; 0x30e4 <xTaskGetTickCount>
     536:	10 e0       	ldi	r17, 0x00	; 0
     538:	00 e0       	ldi	r16, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	ac 01       	movw	r20, r24
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xTimer1>
     546:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xTimer1+0x1>
     54a:	0e 94 62 23 	call	0x46c4	; 0x46c4 <xTimerGenericCommandFromTask>
    }
}
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <Timer_vidStopTimer1>:

// Stop Timer1 (FreeRTOS Software Timer)
void Timer_vidStopTimer1(void) {
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
    if (xTimer1 != NULL) {
     558:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xTimer1>
     55c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xTimer1+0x1>
     560:	00 97       	sbiw	r24, 0x00	; 0
     562:	49 f0       	breq	.+18     	; 0x576 <Timer_vidStopTimer1+0x22>
        xTimerStop(xTimer1, 0);
     564:	10 e0       	ldi	r17, 0x00	; 0
     566:	00 e0       	ldi	r16, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	63 e0       	ldi	r22, 0x03	; 3
     572:	0e 94 62 23 	call	0x46c4	; 0x46c4 <xTimerGenericCommandFromTask>
    }
}
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	08 95       	ret

0000057c <Timer_vidSetCallBackTimer1>:

// Set the callback function for Timer1
void Timer_vidSetCallBackTimer1(void (*TimerCallback)(void)) {
    if (TimerCallback != NULLPtr) {
     57c:	00 97       	sbiw	r24, 0x00	; 0
     57e:	21 f0       	breq	.+8      	; 0x588 <Timer_vidSetCallBackTimer1+0xc>
        Timer1Callback = TimerCallback;
     580:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <Timer1Callback+0x1>
     584:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Timer1Callback>
    }
}
     588:	08 95       	ret

0000058a <CreateGpioProxy>:

#include "Gpio.h"
#include "Gpio_Config.h"

// Create a GpioProxy for a specific port (portDir and port are pointers to the direction and data registers)
GpioProxy CreateGpioProxy(volatile uint8_t *portDir, volatile uint8_t *port) {
     58a:	9b 01       	movw	r18, r22
    GpioProxy gpioProxy;
    gpioProxy.portDir = portDir;
    gpioProxy.port = port;
    return gpioProxy;
     58c:	ac 01       	movw	r20, r24
}
     58e:	c9 01       	movw	r24, r18
     590:	ba 01       	movw	r22, r20
     592:	08 95       	ret

00000594 <Proxy_SetPortDirection>:

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     594:	dc 01       	movw	r26, r24
     596:	ed 91       	ld	r30, X+
     598:	fc 91       	ld	r31, X
     59a:	60 83       	st	Z, r22
}
     59c:	08 95       	ret

0000059e <Proxy_WritePort>:

// Write a value to the port
void Proxy_WritePort(GpioProxy *gpioProxy, uint8_t value) {
    *(gpioProxy->port) = value;
     59e:	dc 01       	movw	r26, r24
     5a0:	12 96       	adiw	r26, 0x02	; 2
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	60 83       	st	Z, r22
}
     5a8:	08 95       	ret

000005aa <Proxy_ReadPort>:

// Read the value of the port
uint8_t Proxy_ReadPort(GpioProxy *gpioProxy) {
    return *(gpioProxy->port);
     5aa:	dc 01       	movw	r26, r24
     5ac:	12 96       	adiw	r26, 0x02	; 2
     5ae:	ed 91       	ld	r30, X+
     5b0:	fc 91       	ld	r31, X
     5b2:	80 81       	ld	r24, Z
}
     5b4:	08 95       	ret

000005b6 <Proxy_SetPin>:

// Set a specific pin high
void Proxy_SetPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) |= (1 << pin);
     5b6:	dc 01       	movw	r26, r24
     5b8:	12 96       	adiw	r26, 0x02	; 2
     5ba:	ed 91       	ld	r30, X+
     5bc:	fc 91       	ld	r31, X
     5be:	80 81       	ld	r24, Z
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <Proxy_SetPin+0x12>
     5c6:	22 0f       	add	r18, r18
     5c8:	6a 95       	dec	r22
     5ca:	ea f7       	brpl	.-6      	; 0x5c6 <Proxy_SetPin+0x10>
     5cc:	82 2b       	or	r24, r18
     5ce:	80 83       	st	Z, r24
}
     5d0:	08 95       	ret

000005d2 <Proxy_ClearPin>:

// Clear a specific pin (set it low)
void Proxy_ClearPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) &= ~(1 << pin);
     5d2:	dc 01       	movw	r26, r24
     5d4:	12 96       	adiw	r26, 0x02	; 2
     5d6:	ed 91       	ld	r30, X+
     5d8:	fc 91       	ld	r31, X
     5da:	20 81       	ld	r18, Z
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <Proxy_ClearPin+0x12>
     5e2:	88 0f       	add	r24, r24
     5e4:	6a 95       	dec	r22
     5e6:	ea f7       	brpl	.-6      	; 0x5e2 <Proxy_ClearPin+0x10>
     5e8:	80 95       	com	r24
     5ea:	82 23       	and	r24, r18
     5ec:	80 83       	st	Z, r24
}
     5ee:	08 95       	ret

000005f0 <Proxy_ReadPin>:

// Read the state of a specific pin
uint8_t Proxy_ReadPin(GpioProxy *gpioProxy, uint8_t pin) {
    return (*(gpioProxy->port) & (1 << pin)) >> pin;
     5f0:	dc 01       	movw	r26, r24
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	ed 91       	ld	r30, X+
     5f6:	fc 91       	ld	r31, X
     5f8:	20 81       	ld	r18, Z
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	06 2e       	mov	r0, r22
     600:	02 c0       	rjmp	.+4      	; 0x606 <Proxy_ReadPin+0x16>
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	0a 94       	dec	r0
     608:	e2 f7       	brpl	.-8      	; 0x602 <Proxy_ReadPin+0x12>
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	82 23       	and	r24, r18
     60e:	93 23       	and	r25, r19
     610:	02 c0       	rjmp	.+4      	; 0x616 <Proxy_ReadPin+0x26>
     612:	95 95       	asr	r25
     614:	87 95       	ror	r24
     616:	6a 95       	dec	r22
     618:	e2 f7       	brpl	.-8      	; 0x612 <Proxy_ReadPin+0x22>
}
     61a:	08 95       	ret

0000061c <ConfigurePins>:

// Function to configure pins based on the pinConfigs array
void ConfigurePins(void) {
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	c0 e6       	ldi	r28, 0x60	; 96
     626:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i < index_no; i++) {
        PinConfig *pin = &pinConfigs[i];

        // Set pin direction
        if (pin->direction == 1) {
            Proxy_SetPortDirection(pin->gpioProxy, (1 << pin->pin));  // Set as output
     628:	01 e0       	ldi	r16, 0x01	; 1
     62a:	10 e0       	ldi	r17, 0x00	; 0
     62c:	e8 81       	ld	r30, Y
     62e:	f9 81       	ldd	r31, Y+1	; 0x01
     630:	01 90       	ld	r0, Z+
     632:	f0 81       	ld	r31, Z
     634:	e0 2d       	mov	r30, r0

    for (i = 0; i < index_no; i++) {
        PinConfig *pin = &pinConfigs[i];

        // Set pin direction
        if (pin->direction == 1) {
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	d1 f4       	brne	.+52     	; 0x670 <ConfigurePins+0x54>
            Proxy_SetPortDirection(pin->gpioProxy, (1 << pin->pin));  // Set as output
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	98 01       	movw	r18, r16
     640:	02 c0       	rjmp	.+4      	; 0x646 <ConfigurePins+0x2a>
     642:	22 0f       	add	r18, r18
     644:	33 1f       	adc	r19, r19
     646:	8a 95       	dec	r24
     648:	e2 f7       	brpl	.-8      	; 0x642 <ConfigurePins+0x26>
    return gpioProxy;
}

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     64a:	20 83       	st	Z, r18
     64c:	2c 81       	ldd	r18, Y+4	; 0x04
     64e:	6a 81       	ldd	r22, Y+2	; 0x02
     650:	88 81       	ld	r24, Y
     652:	99 81       	ldd	r25, Y+1	; 0x01
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Set pin low
            }
        } else {
            // For input pins, we can enable pull-up resistors if required
            if (pin->value == 1) {
     654:	21 30       	cpi	r18, 0x01	; 1
     656:	71 f4       	brne	.+28     	; 0x674 <ConfigurePins+0x58>
                Proxy_SetPin(pin->gpioProxy, pin->pin);  // Enable pull-up resistor
     658:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Proxy_SetPin>
     65c:	25 96       	adiw	r28, 0x05	; 5
    uint8_t i;
	uint8_t index_no = NUM_INDECIES;

    //uint8_t numPins = sizeof(pinConfigs) / sizeof(pinConfigs[0]);

    for (i = 0; i < index_no; i++) {
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	ce 37       	cpi	r28, 0x7E	; 126
     662:	d3 07       	cpc	r29, r19
     664:	19 f7       	brne	.-58     	; 0x62c <ConfigurePins+0x10>
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Disable pull-up resistor
            }
        }
    }
}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret
    return gpioProxy;
}

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     670:	10 82       	st	Z, r1
     672:	ec cf       	rjmp	.-40     	; 0x64c <ConfigurePins+0x30>
        } else {
            // For input pins, we can enable pull-up resistors if required
            if (pin->value == 1) {
                Proxy_SetPin(pin->gpioProxy, pin->pin);  // Enable pull-up resistor
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Disable pull-up resistor
     674:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Proxy_ClearPin>
     678:	f1 cf       	rjmp	.-30     	; 0x65c <ConfigurePins+0x40>

0000067a <ADC_PRESCALER_SET>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// This function selects sampling frequency of ADC by selecting the prescaler bit
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
     67a:	96 b1       	in	r25, 0x06	; 6
     67c:	98 7f       	andi	r25, 0xF8	; 248
     67e:	96 b9       	out	0x06, r25	; 6

	switch(prescaler)
     680:	80 31       	cpi	r24, 0x10	; 16
     682:	c1 f0       	breq	.+48     	; 0x6b4 <ADC_PRESCALER_SET+0x3a>
     684:	40 f4       	brcc	.+16     	; 0x696 <ADC_PRESCALER_SET+0x1c>
     686:	84 30       	cpi	r24, 0x04	; 4
     688:	79 f0       	breq	.+30     	; 0x6a8 <ADC_PRESCALER_SET+0x2e>
     68a:	88 30       	cpi	r24, 0x08	; 8
     68c:	79 f0       	breq	.+30     	; 0x6ac <ADC_PRESCALER_SET+0x32>
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	c9 f4       	brne	.+50     	; 0x6c4 <ADC_PRESCALER_SET+0x4a>
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
     692:	30 9a       	sbi	0x06, 0	; 6
			   break;
     694:	08 95       	ret
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization

	switch(prescaler)
     696:	80 34       	cpi	r24, 0x40	; 64
     698:	79 f0       	breq	.+30     	; 0x6b8 <ADC_PRESCALER_SET+0x3e>
     69a:	80 38       	cpi	r24, 0x80	; 128
     69c:	81 f0       	breq	.+32     	; 0x6be <ADC_PRESCALER_SET+0x44>
     69e:	80 32       	cpi	r24, 0x20	; 32
     6a0:	89 f4       	brne	.+34     	; 0x6c4 <ADC_PRESCALER_SET+0x4a>
			   break;
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
			   break;
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
			   break;
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
     6a2:	86 b1       	in	r24, 0x06	; 6
     6a4:	85 60       	ori	r24, 0x05	; 5
     6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <ADC_PRESCALER_SET+0x36>

	switch(prescaler)
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
			   break;
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
     6a8:	31 9a       	sbi	0x06, 1	; 6
			   break;
     6aa:	08 95       	ret
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
     6ac:	86 b1       	in	r24, 0x06	; 6
     6ae:	83 60       	ori	r24, 0x03	; 3
			   break;
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
			   break;
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
			   break;
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
     6b0:	86 b9       	out	0x06, r24	; 6
	}

}
     6b2:	08 95       	ret
			   break;
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
			   break;
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
			   break;
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
     6b4:	32 9a       	sbi	0x06, 2	; 6
			   break;
     6b6:	08 95       	ret
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
			   break;
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
     6b8:	86 b1       	in	r24, 0x06	; 6
     6ba:	86 60       	ori	r24, 0x06	; 6
     6bc:	f9 cf       	rjmp	.-14     	; 0x6b0 <ADC_PRESCALER_SET+0x36>
			   break;
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
     6be:	86 b1       	in	r24, 0x06	; 6
     6c0:	87 60       	ori	r24, 0x07	; 7
     6c2:	f6 cf       	rjmp	.-20     	; 0x6b0 <ADC_PRESCALER_SET+0x36>
			   break;
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
     6c4:	86 b1       	in	r24, 0x06	; 6
     6c6:	88 7f       	andi	r24, 0xF8	; 248
     6c8:	f3 cf       	rjmp	.-26     	; 0x6b0 <ADC_PRESCALER_SET+0x36>

000006ca <ADC_voltage_Reference>:

//This function selects the voltage reference
//by default AVCC has been selected
void ADC_voltage_Reference(uint8_t Reference_Voltage)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
     6ca:	97 b1       	in	r25, 0x07	; 7
     6cc:	9f 73       	andi	r25, 0x3F	; 63
     6ce:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1<<REFS0); // Default AVCC has been set
     6d0:	3e 9a       	sbi	0x07, 6	; 7


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
     6d2:	81 11       	cpse	r24, r1
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <ADC_voltage_Reference+0x14>
     6d6:	87 b1       	in	r24, 0x07	; 7
     6d8:	8f 73       	andi	r24, 0x3F	; 63
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     6da:	87 b9       	out	0x07, r24	; 7
     6dc:	08 95       	ret
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <ADC_voltage_Reference+0x1c>
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
	else{ADMUX |= (1<<REFS0);}
     6e2:	3e 9a       	sbi	0x07, 6	; 7

}
     6e4:	08 95       	ret
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     6e6:	83 30       	cpi	r24, 0x03	; 3
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <ADC_voltage_Reference+0x18>
     6ea:	87 b1       	in	r24, 0x07	; 7
     6ec:	80 6c       	ori	r24, 0xC0	; 192
     6ee:	f5 cf       	rjmp	.-22     	; 0x6da <ADC_voltage_Reference+0x10>

000006f0 <ADC_INIT>:
/*------------possible parameter---------
prescaler = 2,4,8,16,32,64,128
 Voltage_Reference = AREF,AVCC,INTERNAL
*/
void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
     6f0:	cf 93       	push	r28
     6f2:	c6 2f       	mov	r28, r22
	2) set prescaler
	3) reference voltage select
	4) left adjust of for data register
	*/

	ADCSRA |= (1<<ADEN); // ADC Enable
     6f4:	37 9a       	sbi	0x06, 7	; 6
	ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
     6f6:	0e 94 3d 03 	call	0x67a	; 0x67a <ADC_PRESCALER_SET>
	ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
     6fa:	8c 2f       	mov	r24, r28
     6fc:	0e 94 65 03 	call	0x6ca	; 0x6ca <ADC_voltage_Reference>
	ADMUX &= ~(1<<ADLAR); //left adjust off // Though bu default left adjust off // this line use for more convenient for future developer
     700:	3d 98       	cbi	0x07, 5	; 7
}
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <ADC_READ>:

//########################################################################################
//########################################################################################
uint16_t ADC_READ(uint8_t channel)
{
	ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     706:	97 b1       	in	r25, 0x07	; 7
     708:	90 7e       	andi	r25, 0xE0	; 224
     70a:	97 b9       	out	0x07, r25	; 7

	switch(channel)
     70c:	88 30       	cpi	r24, 0x08	; 8
     70e:	30 f5       	brcc	.+76     	; 0x75c <ADC_READ+0x56>
     710:	e8 2f       	mov	r30, r24
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	e2 57       	subi	r30, 0x72	; 114
     716:	fc 4f       	sbci	r31, 0xFC	; 252
     718:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__tablejump2__>
     71c:	ae 03       	fmulsu	r18, r22
     71e:	96 03       	fmuls	r17, r22
     720:	9d 03       	fmulsu	r17, r21
     722:	9f 03       	fmulsu	r17, r23
     724:	a3 03       	fmuls	r18, r19
     726:	a5 03       	fmuls	r18, r21
     728:	a8 03       	fmulsu	r18, r16
     72a:	ab 03       	fmulsu	r18, r19
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
     72c:	38 9a       	sbi	0x07, 0	; 7
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
	}
	ADCSRA |=(1<<ADSC); // ADC conversion start
     72e:	36 9a       	sbi	0x06, 6	; 6

	while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
     730:	34 9b       	sbis	0x06, 4	; 6
     732:	fe cf       	rjmp	.-4      	; 0x730 <ADC_READ+0x2a>
	//uint8_t high,low;
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
     734:	84 b1       	in	r24, 0x04	; 4
     736:	95 b1       	in	r25, 0x05	; 5
}
     738:	08 95       	ret
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
     73a:	39 9a       	sbi	0x07, 1	; 7
		       break;
     73c:	f8 cf       	rjmp	.-16     	; 0x72e <ADC_READ+0x28>
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
     73e:	87 b1       	in	r24, 0x07	; 7
     740:	83 60       	ori	r24, 0x03	; 3
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     742:	87 b9       	out	0x07, r24	; 7
     744:	f4 cf       	rjmp	.-24     	; 0x72e <ADC_READ+0x28>
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
		       break;
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
			   break;
		case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
     746:	3a 9a       	sbi	0x07, 2	; 7
			   break;
     748:	f2 cf       	rjmp	.-28     	; 0x72e <ADC_READ+0x28>
		case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
     74a:	87 b1       	in	r24, 0x07	; 7
     74c:	85 60       	ori	r24, 0x05	; 5
     74e:	f9 cf       	rjmp	.-14     	; 0x742 <ADC_READ+0x3c>
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
     750:	87 b1       	in	r24, 0x07	; 7
     752:	86 60       	ori	r24, 0x06	; 6
     754:	f6 cf       	rjmp	.-20     	; 0x742 <ADC_READ+0x3c>
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
     756:	87 b1       	in	r24, 0x07	; 7
     758:	87 60       	ori	r24, 0x07	; 7
     75a:	f3 cf       	rjmp	.-26     	; 0x742 <ADC_READ+0x3c>
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     75c:	87 b1       	in	r24, 0x07	; 7
     75e:	80 7e       	andi	r24, 0xE0	; 224
     760:	f0 cf       	rjmp	.-32     	; 0x742 <ADC_READ+0x3c>

00000762 <ADC_GetVoltage>:
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
}
// Calculate the actual voltage from the ADC value
float ADC_GetVoltage(uint16_t adc_value) {
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	2c 97       	sbiw	r28, 0x0c	; 12
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
    // Calculate voltage at the ADC pin
    float v_adc = (adc_value / ADC_RESOLUTION) * VREF;
     776:	bc 01       	movw	r22, r24
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <__floatunsisf>
     780:	69 87       	std	Y+9, r22	; 0x09
     782:	7a 87       	std	Y+10, r23	; 0x0a
     784:	8b 87       	std	Y+11, r24	; 0x0b
     786:	9c 87       	std	Y+12, r25	; 0x0c
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 ec       	ldi	r19, 0xC0	; 192
     78c:	4f e7       	ldi	r20, 0x7F	; 127
     78e:	54 e4       	ldi	r21, 0x44	; 68
     790:	69 85       	ldd	r22, Y+9	; 0x09
     792:	7a 85       	ldd	r23, Y+10	; 0x0a
     794:	8b 85       	ldd	r24, Y+11	; 0x0b
     796:	9c 85       	ldd	r25, Y+12	; 0x0c
     798:	0e 94 87 24 	call	0x490e	; 0x490e <__divsf3>
     79c:	6d 83       	std	Y+5, r22	; 0x05
     79e:	7e 83       	std	Y+6, r23	; 0x06
     7a0:	8f 83       	std	Y+7, r24	; 0x07
     7a2:	98 87       	std	Y+8, r25	; 0x08
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 ea       	ldi	r20, 0xA0	; 160
     7aa:	50 e4       	ldi	r21, 0x40	; 64
     7ac:	6d 81       	ldd	r22, Y+5	; 0x05
     7ae:	7e 81       	ldd	r23, Y+6	; 0x06
     7b0:	8f 81       	ldd	r24, Y+7	; 0x07
     7b2:	98 85       	ldd	r25, Y+8	; 0x08
     7b4:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__mulsf3>
     7b8:	69 83       	std	Y+1, r22	; 0x01
     7ba:	7a 83       	std	Y+2, r23	; 0x02
     7bc:	8b 83       	std	Y+3, r24	; 0x03
     7be:	9c 83       	std	Y+4, r25	; 0x04

    // Scale the voltage using the voltage divider ratio
    return v_adc ;
     7c0:	69 81       	ldd	r22, Y+1	; 0x01
     7c2:	7a 81       	ldd	r23, Y+2	; 0x02
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	9c 81       	ldd	r25, Y+4	; 0x04
}
     7c8:	2c 96       	adiw	r28, 0x0c	; 12
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <updatePollCounter>:
		}
	}
}

void updatePollCounter(void) {
	pollCounter += 1; 
     7da:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pollCounter>
     7de:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <pollCounter+0x1>
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <pollCounter+0x1>
     7e8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pollCounter>
}
     7ec:	08 95       	ret

000007ee <poll>:
uint16 static pollTimeCounter=0;

float cap_percentage = 0;


void poll(void) {
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	2c 97       	sbiw	r28, 0x0c	; 12
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
	UART_Init(9600);
     802:	80 e8       	ldi	r24, 0x80	; 128
     804:	95 e2       	ldi	r25, 0x25	; 37
     806:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_Init>
	updatePollCounter();
     80a:	0e 94 ed 03 	call	0x7da	; 0x7da <updatePollCounter>
	if ((pollCounter == pollTimeCounter)) {
     80e:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <pollCounter>
     812:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <pollCounter+0x1>
     816:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pollTimeCounter>
     81a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <pollTimeCounter+0x1>
     81e:	28 17       	cp	r18, r24
     820:	39 07       	cpc	r19, r25
     822:	09 f0       	breq	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     824:	45 c0       	rjmp	.+138    	; 0x8b0 <__stack+0x51>
		pollCounter=0;
     826:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pollCounter+0x1>
     82a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <pollCounter>

				uint16_t adc_value = 0;  // Raw ADC value
				float adc_voltage = 0;
//
//				 Read the ADC value from channel 0 (ADC0)
				adc_value = ADC_READ(0);
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 83 03 	call	0x706	; 0x706 <ADC_READ>
//				 Convert ADC value to voltage
				adc_voltage = ADC_GetVoltage(adc_value);
     834:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_GetVoltage>
     838:	69 87       	std	Y+9, r22	; 0x09
     83a:	7a 87       	std	Y+10, r23	; 0x0a
     83c:	8b 87       	std	Y+11, r24	; 0x0b
     83e:	9c 87       	std	Y+12, r25	; 0x0c
				cap_percentage = calculateChargePercentage(adc_voltage);
     840:	69 85       	ldd	r22, Y+9	; 0x09
     842:	7a 85       	ldd	r23, Y+10	; 0x0a
     844:	8b 85       	ldd	r24, Y+11	; 0x0b
     846:	9c 85       	ldd	r25, Y+12	; 0x0c
     848:	0e 94 91 04 	call	0x922	; 0x922 <calculateChargePercentage>
     84c:	6d 83       	std	Y+5, r22	; 0x05
     84e:	7e 83       	std	Y+6, r23	; 0x06
     850:	8f 83       	std	Y+7, r24	; 0x07
     852:	98 87       	std	Y+8, r25	; 0x08
     854:	8d 81       	ldd	r24, Y+5	; 0x05
     856:	9e 81       	ldd	r25, Y+6	; 0x06
     858:	af 81       	ldd	r26, Y+7	; 0x07
     85a:	b8 85       	ldd	r27, Y+8	; 0x08
     85c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cap_percentage>
     860:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <cap_percentage+0x1>
     864:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <cap_percentage+0x2>
     868:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <cap_percentage+0x3>
//
				// Print results to virtual terminal
				UART_Print("Charge Percentage: ");
     86c:	82 ee       	ldi	r24, 0xE2	; 226
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_Print>
				UART_PrintFloat(cap_percentage);
     874:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cap_percentage>
     878:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cap_percentage+0x1>
     87c:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <cap_percentage+0x2>
     880:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <cap_percentage+0x3>
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	9a 83       	std	Y+2, r25	; 0x02
     888:	ab 83       	std	Y+3, r26	; 0x03
     88a:	bc 83       	std	Y+4, r27	; 0x04
     88c:	69 81       	ldd	r22, Y+1	; 0x01
     88e:	7a 81       	ldd	r23, Y+2	; 0x02
     890:	8b 81       	ldd	r24, Y+3	; 0x03
     892:	9c 81       	ldd	r25, Y+4	; 0x04
     894:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <UART_PrintFloat>
				UART_Print("%\r\n");
     898:	86 ef       	ldi	r24, 0xF6	; 246
     89a:	90 e0       	ldi	r25, 0x00	; 0
//				UART_Print("Time Remaining for Charging: ");
//				UART_PrintFloat(timeRemaining);
//				UART_Print(" seconds\r\n");
		}
	}
}
     89c:	2c 96       	adiw	r28, 0x0c	; 12
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
				cap_percentage = calculateChargePercentage(adc_voltage);
//
				// Print results to virtual terminal
				UART_Print("Charge Percentage: ");
				UART_PrintFloat(cap_percentage);
				UART_Print("%\r\n");
     8ac:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <UART_Print>
//				UART_Print("Time Remaining for Charging: ");
//				UART_PrintFloat(timeRemaining);
//				UART_Print(" seconds\r\n");
		}
	}
}
     8b0:	2c 96       	adiw	r28, 0x0c	; 12
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <poller_Init>:
void updatePollCounter(void) {
	pollCounter += 1; 
}

void poller_Init(void) {
	Timer_vidInitTimer1();
     8c2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Timer_vidInitTimer1>
	Timer_vidSetCallBackTimer1(poll);
     8c6:	87 ef       	ldi	r24, 0xF7	; 247
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0c 94 be 02 	jmp	0x57c	; 0x57c <Timer_vidSetCallBackTimer1>

000008ce <Poller__StartPolling>:
}

void Poller__StartPolling(void) {
	Timer_vidStartTimer1();
     8ce:	0c 94 91 02 	jmp	0x522	; 0x522 <Timer_vidStartTimer1>

000008d2 <Poller__StopPolling>:
}

void Poller__StopPolling(void) {
	Timer_vidStopTimer1();
     8d2:	0c 94 aa 02 	jmp	0x554	; 0x554 <Timer_vidStopTimer1>

000008d6 <poller_SetPollTime>:
}


void poller_SetPollTime(uint32 time) {

	pollTimeCounter = time / time_ms;
     8d6:	24 e1       	ldi	r18, 0x14	; 20
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__udivmodsi4>
     8e2:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <pollTimeCounter+0x1>
     8e6:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <pollTimeCounter>

}
     8ea:	08 95       	ret

000008ec <Charge_Logic>:
#include "avr/interrupt.h"
#include <math.h>

void Charge_Logic(void) {
	// Enable an alternative functionality on PC1
	DDRC &= ~(1 << PC1);  // Set PC1 as output
     8ec:	a1 98       	cbi	0x14, 1	; 20
	PORTC &= ~(1 << PC1); // Turn on alternative indicator
     8ee:	a9 98       	cbi	0x15, 1	; 21
    // Set PC0 as output and drive it HIGH
    DDRC |= (1 << PC0);  // Set PC0 as output
     8f0:	a0 9a       	sbi	0x14, 0	; 20
    PORTC |= (1 << PC0); // Turn on charging
     8f2:	a8 9a       	sbi	0x15, 0	; 21
}
     8f4:	08 95       	ret

000008f6 <Stop_Charge_Logic>:

void Stop_Charge_Logic(void) {
    // Stop charging by clearing PC0
    PORTC &= ~(1 << PC0); // Turn off charging
     8f6:	a8 98       	cbi	0x15, 0	; 21
    DDRC &= ~(1 << PC0);  // Optionally, set PC0 as input (optional)
     8f8:	a0 98       	cbi	0x14, 0	; 20

    // Enable an alternative functionality on PC1
    DDRC |= (1 << PC1);  // Set PC1 as output
     8fa:	a1 9a       	sbi	0x14, 1	; 20
    PORTC |= (1 << PC1); // Turn on alternative indicator
     8fc:	a9 9a       	sbi	0x15, 1	; 21
}
     8fe:	08 95       	ret

00000900 <Button_Init>:



void Button_Init(void) {
    // Configure PD2 (INT0) and PD3 (INT1) as inputs
    DDRD &= ~((1 << PD2) | (1 << PD3)); // Set PD2 and PD3 as input
     900:	81 b3       	in	r24, 0x11	; 17
     902:	83 7f       	andi	r24, 0xF3	; 243
     904:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1 << PD2) | (1 << PD3);   // Enable internal pull-up resistors
     906:	82 b3       	in	r24, 0x12	; 18
     908:	8c 60       	ori	r24, 0x0C	; 12
     90a:	82 bb       	out	0x12, r24	; 18

    // Configure falling-edge interrupt for INT0 (PD2) and INT1 (PD3)
    MCUCR |= (1 << ISC01) | (1 << ISC11); // Falling edge triggers
     90c:	85 b7       	in	r24, 0x35	; 53
     90e:	8a 60       	ori	r24, 0x0A	; 10
     910:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~((1 << ISC00) | (1 << ISC10)); // Ensure falling edge mode
     912:	85 b7       	in	r24, 0x35	; 53
     914:	8a 7f       	andi	r24, 0xFA	; 250
     916:	85 bf       	out	0x35, r24	; 53

    // Enable INT0 and INT1
    GICR |= (1 << INT0) | (1 << INT1);
     918:	8b b7       	in	r24, 0x3b	; 59
     91a:	80 6c       	ori	r24, 0xC0	; 192
     91c:	8b bf       	out	0x3b, r24	; 59

    // Enable global interrupts
    sei();
     91e:	78 94       	sei
}
     920:	08 95       	ret

00000922 <calculateChargePercentage>:
/**
 * @brief Calculate the charge percentage based on the current voltage.
 * @param voltage The current voltage of the capacitor.
 * @return Charge percentage (0 to 100).
 */
float calculateChargePercentage(float voltage) {
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	60 97       	sbiw	r28, 0x10	; 16
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	6d 87       	std	Y+13, r22	; 0x0d
     938:	7e 87       	std	Y+14, r23	; 0x0e
     93a:	8f 87       	std	Y+15, r24	; 0x0f
     93c:	98 8b       	std	Y+16, r25	; 0x10
    if (voltage < MIN_VOLTAGE) {
     93e:	2e ea       	ldi	r18, 0xAE	; 174
     940:	37 e4       	ldi	r19, 0x47	; 71
     942:	41 e2       	ldi	r20, 0x21	; 33
     944:	5f e3       	ldi	r21, 0x3F	; 63
     946:	6d 85       	ldd	r22, Y+13	; 0x0d
     948:	7e 85       	ldd	r23, Y+14	; 0x0e
     94a:	8f 85       	ldd	r24, Y+15	; 0x0f
     94c:	98 89       	ldd	r25, Y+16	; 0x10
     94e:	0e 94 82 24 	call	0x4904	; 0x4904 <__cmpsf2>
     952:	87 fd       	sbrc	r24, 7
     954:	43 c0       	rjmp	.+134    	; 0x9dc <calculateChargePercentage+0xba>
        return 0.0; // Below minimum voltage
    } else if (voltage > MAX_VOLTAGE) {
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	48 e8       	ldi	r20, 0x88	; 136
     95c:	50 e4       	ldi	r21, 0x40	; 64
     95e:	6d 85       	ldd	r22, Y+13	; 0x0d
     960:	7e 85       	ldd	r23, Y+14	; 0x0e
     962:	8f 85       	ldd	r24, Y+15	; 0x0f
     964:	98 89       	ldd	r25, Y+16	; 0x10
     966:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__gesf2>
     96a:	18 16       	cp	r1, r24
     96c:	e4 f1       	brlt	.+120    	; 0x9e6 <calculateChargePercentage+0xc4>
        return 100.0; // Above maximum voltage
    }
    return ((voltage - MIN_VOLTAGE) / (MAX_VOLTAGE - MIN_VOLTAGE)) * 100.0;
     96e:	2e ea       	ldi	r18, 0xAE	; 174
     970:	37 e4       	ldi	r19, 0x47	; 71
     972:	41 e2       	ldi	r20, 0x21	; 33
     974:	5f e3       	ldi	r21, 0x3F	; 63
     976:	6d 85       	ldd	r22, Y+13	; 0x0d
     978:	7e 85       	ldd	r23, Y+14	; 0x0e
     97a:	8f 85       	ldd	r24, Y+15	; 0x0f
     97c:	98 89       	ldd	r25, Y+16	; 0x10
     97e:	0e 94 15 24 	call	0x482a	; 0x482a <__subsf3>
     982:	69 87       	std	Y+9, r22	; 0x09
     984:	7a 87       	std	Y+10, r23	; 0x0a
     986:	8b 87       	std	Y+11, r24	; 0x0b
     988:	9c 87       	std	Y+12, r25	; 0x0c
     98a:	24 e1       	ldi	r18, 0x14	; 20
     98c:	3e ea       	ldi	r19, 0xAE	; 174
     98e:	47 e6       	ldi	r20, 0x67	; 103
     990:	50 e4       	ldi	r21, 0x40	; 64
     992:	69 85       	ldd	r22, Y+9	; 0x09
     994:	7a 85       	ldd	r23, Y+10	; 0x0a
     996:	8b 85       	ldd	r24, Y+11	; 0x0b
     998:	9c 85       	ldd	r25, Y+12	; 0x0c
     99a:	0e 94 87 24 	call	0x490e	; 0x490e <__divsf3>
     99e:	6d 83       	std	Y+5, r22	; 0x05
     9a0:	7e 83       	std	Y+6, r23	; 0x06
     9a2:	8f 83       	std	Y+7, r24	; 0x07
     9a4:	98 87       	std	Y+8, r25	; 0x08
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	48 ec       	ldi	r20, 0xC8	; 200
     9ac:	52 e4       	ldi	r21, 0x42	; 66
     9ae:	6d 81       	ldd	r22, Y+5	; 0x05
     9b0:	7e 81       	ldd	r23, Y+6	; 0x06
     9b2:	8f 81       	ldd	r24, Y+7	; 0x07
     9b4:	98 85       	ldd	r25, Y+8	; 0x08
     9b6:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__mulsf3>
     9ba:	69 83       	std	Y+1, r22	; 0x01
     9bc:	7a 83       	std	Y+2, r23	; 0x02
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	9c 83       	std	Y+4, r25	; 0x04
     9c2:	69 81       	ldd	r22, Y+1	; 0x01
     9c4:	7a 81       	ldd	r23, Y+2	; 0x02
     9c6:	8b 81       	ldd	r24, Y+3	; 0x03
     9c8:	9c 81       	ldd	r25, Y+4	; 0x04
}
     9ca:	60 96       	adiw	r28, 0x10	; 16
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret
 * @param voltage The current voltage of the capacitor.
 * @return Charge percentage (0 to 100).
 */
float calculateChargePercentage(float voltage) {
    if (voltage < MIN_VOLTAGE) {
        return 0.0; // Below minimum voltage
     9dc:	19 82       	std	Y+1, r1	; 0x01
     9de:	1a 82       	std	Y+2, r1	; 0x02
     9e0:	1b 82       	std	Y+3, r1	; 0x03
     9e2:	1c 82       	std	Y+4, r1	; 0x04
     9e4:	ee cf       	rjmp	.-36     	; 0x9c2 <calculateChargePercentage+0xa0>
    } else if (voltage > MAX_VOLTAGE) {
        return 100.0; // Above maximum voltage
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	a8 ec       	ldi	r26, 0xC8	; 200
     9ec:	b2 e4       	ldi	r27, 0x42	; 66
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	ab 83       	std	Y+3, r26	; 0x03
     9f4:	bc 83       	std	Y+4, r27	; 0x04
     9f6:	e5 cf       	rjmp	.-54     	; 0x9c2 <calculateChargePercentage+0xa0>

000009f8 <calculateTimeRemaining>:
 * @param targetVoltage The target voltage to reach.
 * @param chargingCurrent The current used for charging (in amps).
 * @param capacitorValue The capacitance value of the capacitor (in farads).
 * @return Time remaining for charging (in seconds).
 */
float calculateTimeRemaining(float currentVoltage, float targetVoltage, float chargingCurrent, float capacitorValue) {
     9f8:	af 92       	push	r10
     9fa:	bf 92       	push	r11
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	ac 97       	sbiw	r28, 0x2c	; 44
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	6d 8f       	std	Y+29, r22	; 0x1d
     a1e:	7e 8f       	std	Y+30, r23	; 0x1e
     a20:	8f 8f       	std	Y+31, r24	; 0x1f
     a22:	98 a3       	std	Y+32, r25	; 0x20
     a24:	29 a3       	std	Y+33, r18	; 0x21
     a26:	3a a3       	std	Y+34, r19	; 0x22
     a28:	4b a3       	std	Y+35, r20	; 0x23
     a2a:	5c a3       	std	Y+36, r21	; 0x24
     a2c:	ed a2       	std	Y+37, r14	; 0x25
     a2e:	fe a2       	std	Y+38, r15	; 0x26
     a30:	0f a3       	std	Y+39, r16	; 0x27
     a32:	18 a7       	std	Y+40, r17	; 0x28
     a34:	a9 a6       	std	Y+41, r10	; 0x29
     a36:	ba a6       	std	Y+42, r11	; 0x2a
     a38:	cb a6       	std	Y+43, r12	; 0x2b
     a3a:	dc a6       	std	Y+44, r13	; 0x2c
    if (currentVoltage >= targetVoltage || chargingCurrent <= 0 || capacitorValue <= 0) {
     a3c:	29 a1       	ldd	r18, Y+33	; 0x21
     a3e:	3a a1       	ldd	r19, Y+34	; 0x22
     a40:	4b a1       	ldd	r20, Y+35	; 0x23
     a42:	5c a1       	ldd	r21, Y+36	; 0x24
     a44:	6d 8d       	ldd	r22, Y+29	; 0x1d
     a46:	7e 8d       	ldd	r23, Y+30	; 0x1e
     a48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a4a:	98 a1       	ldd	r25, Y+32	; 0x20
     a4c:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__gesf2>
     a50:	87 ff       	sbrs	r24, 7
     a52:	86 c0       	rjmp	.+268    	; 0xb60 <calculateTimeRemaining+0x168>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	a9 01       	movw	r20, r18
     a5a:	6d a1       	ldd	r22, Y+37	; 0x25
     a5c:	7e a1       	ldd	r23, Y+38	; 0x26
     a5e:	8f a1       	ldd	r24, Y+39	; 0x27
     a60:	98 a5       	ldd	r25, Y+40	; 0x28
     a62:	0e 94 82 24 	call	0x4904	; 0x4904 <__cmpsf2>
     a66:	18 16       	cp	r1, r24
     a68:	0c f0       	brlt	.+2      	; 0xa6c <calculateTimeRemaining+0x74>
     a6a:	7a c0       	rjmp	.+244    	; 0xb60 <calculateTimeRemaining+0x168>
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	a9 01       	movw	r20, r18
     a72:	69 a5       	ldd	r22, Y+41	; 0x29
     a74:	7a a5       	ldd	r23, Y+42	; 0x2a
     a76:	8b a5       	ldd	r24, Y+43	; 0x2b
     a78:	9c a5       	ldd	r25, Y+44	; 0x2c
     a7a:	0e 94 82 24 	call	0x4904	; 0x4904 <__cmpsf2>
     a7e:	18 16       	cp	r1, r24
     a80:	0c f0       	brlt	.+2      	; 0xa84 <calculateTimeRemaining+0x8c>
     a82:	6e c0       	rjmp	.+220    	; 0xb60 <calculateTimeRemaining+0x168>
        return 0.0; // No time remaining if already charged or invalid input
    }

    // Calculate equivalent resistance (Ohm's law)
    float resistance = MAX_VOLTAGE / chargingCurrent;
     a84:	2d a1       	ldd	r18, Y+37	; 0x25
     a86:	3e a1       	ldd	r19, Y+38	; 0x26
     a88:	4f a1       	ldd	r20, Y+39	; 0x27
     a8a:	58 a5       	ldd	r21, Y+40	; 0x28
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	88 e8       	ldi	r24, 0x88	; 136
     a92:	90 e4       	ldi	r25, 0x40	; 64
     a94:	0e 94 87 24 	call	0x490e	; 0x490e <__divsf3>
     a98:	69 83       	std	Y+1, r22	; 0x01
     a9a:	7a 83       	std	Y+2, r23	; 0x02
     a9c:	8b 83       	std	Y+3, r24	; 0x03
     a9e:	9c 83       	std	Y+4, r25	; 0x04

    // Calculate the remaining time for charging
    float timeRemaining = -resistance * capacitorValue * log(1.0 - (targetVoltage / MAX_VOLTAGE));
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	ab 81       	ldd	r26, Y+3	; 0x03
     aa6:	bc 81       	ldd	r27, Y+4	; 0x04
     aa8:	b0 58       	subi	r27, 0x80	; 128
     aaa:	89 8f       	std	Y+25, r24	; 0x19
     aac:	9a 8f       	std	Y+26, r25	; 0x1a
     aae:	ab 8f       	std	Y+27, r26	; 0x1b
     ab0:	bc 8f       	std	Y+28, r27	; 0x1c
     ab2:	29 a5       	ldd	r18, Y+41	; 0x29
     ab4:	3a a5       	ldd	r19, Y+42	; 0x2a
     ab6:	4b a5       	ldd	r20, Y+43	; 0x2b
     ab8:	5c a5       	ldd	r21, Y+44	; 0x2c
     aba:	69 8d       	ldd	r22, Y+25	; 0x19
     abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ac2:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__mulsf3>
     ac6:	6d 8b       	std	Y+21, r22	; 0x15
     ac8:	7e 8b       	std	Y+22, r23	; 0x16
     aca:	8f 8b       	std	Y+23, r24	; 0x17
     acc:	98 8f       	std	Y+24, r25	; 0x18
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	48 e8       	ldi	r20, 0x88	; 136
     ad4:	50 e4       	ldi	r21, 0x40	; 64
     ad6:	69 a1       	ldd	r22, Y+33	; 0x21
     ad8:	7a a1       	ldd	r23, Y+34	; 0x22
     ada:	8b a1       	ldd	r24, Y+35	; 0x23
     adc:	9c a1       	ldd	r25, Y+36	; 0x24
     ade:	0e 94 87 24 	call	0x490e	; 0x490e <__divsf3>
     ae2:	69 8b       	std	Y+17, r22	; 0x11
     ae4:	7a 8b       	std	Y+18, r23	; 0x12
     ae6:	8b 8b       	std	Y+19, r24	; 0x13
     ae8:	9c 8b       	std	Y+20, r25	; 0x14
     aea:	29 89       	ldd	r18, Y+17	; 0x11
     aec:	3a 89       	ldd	r19, Y+18	; 0x12
     aee:	4b 89       	ldd	r20, Y+19	; 0x13
     af0:	5c 89       	ldd	r21, Y+20	; 0x14
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	80 e8       	ldi	r24, 0x80	; 128
     af8:	9f e3       	ldi	r25, 0x3F	; 63
     afa:	0e 94 15 24 	call	0x482a	; 0x482a <__subsf3>
     afe:	6d 87       	std	Y+13, r22	; 0x0d
     b00:	7e 87       	std	Y+14, r23	; 0x0e
     b02:	8f 87       	std	Y+15, r24	; 0x0f
     b04:	98 8b       	std	Y+16, r25	; 0x10
     b06:	6d 85       	ldd	r22, Y+13	; 0x0d
     b08:	7e 85       	ldd	r23, Y+14	; 0x0e
     b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b0c:	98 89       	ldd	r25, Y+16	; 0x10
     b0e:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <log>
     b12:	69 87       	std	Y+9, r22	; 0x09
     b14:	7a 87       	std	Y+10, r23	; 0x0a
     b16:	8b 87       	std	Y+11, r24	; 0x0b
     b18:	9c 87       	std	Y+12, r25	; 0x0c
     b1a:	29 85       	ldd	r18, Y+9	; 0x09
     b1c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1e:	4b 85       	ldd	r20, Y+11	; 0x0b
     b20:	5c 85       	ldd	r21, Y+12	; 0x0c
     b22:	6d 89       	ldd	r22, Y+21	; 0x15
     b24:	7e 89       	ldd	r23, Y+22	; 0x16
     b26:	8f 89       	ldd	r24, Y+23	; 0x17
     b28:	98 8d       	ldd	r25, Y+24	; 0x18
     b2a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__mulsf3>
     b2e:	6d 83       	std	Y+5, r22	; 0x05
     b30:	7e 83       	std	Y+6, r23	; 0x06
     b32:	8f 83       	std	Y+7, r24	; 0x07
     b34:	98 87       	std	Y+8, r25	; 0x08
     b36:	6d 81       	ldd	r22, Y+5	; 0x05
     b38:	7e 81       	ldd	r23, Y+6	; 0x06
     b3a:	8f 81       	ldd	r24, Y+7	; 0x07
     b3c:	98 85       	ldd	r25, Y+8	; 0x08

    return timeRemaining; // Time in seconds
}
     b3e:	ac 96       	adiw	r28, 0x2c	; 44
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	af 90       	pop	r10
     b5e:	08 95       	ret
 * @param capacitorValue The capacitance value of the capacitor (in farads).
 * @return Time remaining for charging (in seconds).
 */
float calculateTimeRemaining(float currentVoltage, float targetVoltage, float chargingCurrent, float capacitorValue) {
    if (currentVoltage >= targetVoltage || chargingCurrent <= 0 || capacitorValue <= 0) {
        return 0.0; // No time remaining if already charged or invalid input
     b60:	1d 82       	std	Y+5, r1	; 0x05
     b62:	1e 82       	std	Y+6, r1	; 0x06
     b64:	1f 82       	std	Y+7, r1	; 0x07
     b66:	18 86       	std	Y+8, r1	; 0x08
     b68:	e6 cf       	rjmp	.-52     	; 0xb36 <calculateTimeRemaining+0x13e>

00000b6a <LCD_Command>:

// Pin definitions
#define RS 0  // RS pin connected to Pin 0 of lcdControlProxy
#define EN 1  // EN pin connected to Pin 1 of lcdControlProxy

void LCD_Command(unsigned char cmnd) {
     b6a:	cf 93       	push	r28
     b6c:	c8 2f       	mov	r28, r24
    // Send upper nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (cmnd & 0xF0));
     b6e:	86 e8       	ldi	r24, 0x86	; 134
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Proxy_ReadPort>
     b76:	8f 70       	andi	r24, 0x0F	; 15
     b78:	6c 2f       	mov	r22, r28
     b7a:	60 7f       	andi	r22, 0xF0	; 240
     b7c:	68 2b       	or	r22, r24
     b7e:	86 e8       	ldi	r24, 0x86	; 134
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 cf 02 	call	0x59e	; 0x59e <Proxy_WritePort>
    Proxy_ClearPin(&lcdControlProxy, RS); // RS=0, command register
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	82 e8       	ldi	r24, 0x82	; 130
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Proxy_ClearPin>
    Proxy_SetPin(&lcdControlProxy, EN);  // Enable pulse
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	82 e8       	ldi	r24, 0x82	; 130
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Proxy_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	8a 95       	dec	r24
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <LCD_Command+0x32>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <LCD_Command+0x38>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	82 e8       	ldi	r24, 0x82	; 130
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Proxy_ClearPin>
//    _delay_us(200);

    // Send lower nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (cmnd << 4));
     bac:	86 e8       	ldi	r24, 0x86	; 134
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Proxy_ReadPort>
     bb4:	8f 70       	andi	r24, 0x0F	; 15
     bb6:	90 e1       	ldi	r25, 0x10	; 16
     bb8:	c9 9f       	mul	r28, r25
     bba:	b0 01       	movw	r22, r0
     bbc:	11 24       	eor	r1, r1
     bbe:	68 2b       	or	r22, r24
     bc0:	86 e8       	ldi	r24, 0x86	; 134
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 cf 02 	call	0x59e	; 0x59e <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, EN);
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	82 e8       	ldi	r24, 0x82	; 130
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Proxy_SetPin>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	8a 95       	dec	r24
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <LCD_Command+0x6a>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <LCD_Command+0x70>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	82 e8       	ldi	r24, 0x82	; 130
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Proxy_ClearPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be4:	8f e9       	ldi	r24, 0x9F	; 159
     be6:	9f e0       	ldi	r25, 0x0F	; 15
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <LCD_Command+0x7e>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <LCD_Command+0x84>
     bee:	00 00       	nop
    _delay_ms(2);
}
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <LCD_Char>:

void LCD_Char(unsigned char data) {
     bf4:	cf 93       	push	r28
     bf6:	c8 2f       	mov	r28, r24
    // Send upper nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (data & 0xF0));
     bf8:	86 e8       	ldi	r24, 0x86	; 134
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Proxy_ReadPort>
     c00:	8f 70       	andi	r24, 0x0F	; 15
     c02:	6c 2f       	mov	r22, r28
     c04:	60 7f       	andi	r22, 0xF0	; 240
     c06:	68 2b       	or	r22, r24
     c08:	86 e8       	ldi	r24, 0x86	; 134
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 cf 02 	call	0x59e	; 0x59e <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, RS);  // RS=1, data register
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	82 e8       	ldi	r24, 0x82	; 130
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Proxy_SetPin>
    Proxy_SetPin(&lcdControlProxy, EN); // Enable pulse
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	82 e8       	ldi	r24, 0x82	; 130
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Proxy_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	8a 95       	dec	r24
     c28:	f1 f7       	brne	.-4      	; 0xc26 <LCD_Char+0x32>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <LCD_Char+0x38>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	82 e8       	ldi	r24, 0x82	; 130
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Proxy_ClearPin>
//    _delay_us(200);

    // Send lower nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (data << 4));
     c36:	86 e8       	ldi	r24, 0x86	; 134
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Proxy_ReadPort>
     c3e:	8f 70       	andi	r24, 0x0F	; 15
     c40:	90 e1       	ldi	r25, 0x10	; 16
     c42:	c9 9f       	mul	r28, r25
     c44:	b0 01       	movw	r22, r0
     c46:	11 24       	eor	r1, r1
     c48:	68 2b       	or	r22, r24
     c4a:	86 e8       	ldi	r24, 0x86	; 134
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 cf 02 	call	0x59e	; 0x59e <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, EN);
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	82 e8       	ldi	r24, 0x82	; 130
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Proxy_SetPin>
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	8a 95       	dec	r24
     c60:	f1 f7       	brne	.-4      	; 0xc5e <LCD_Char+0x6a>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <LCD_Char+0x70>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	82 e8       	ldi	r24, 0x82	; 130
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Proxy_ClearPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6e:	8f e9       	ldi	r24, 0x9F	; 159
     c70:	9f e0       	ldi	r25, 0x0F	; 15
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <LCD_Char+0x7e>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <LCD_Char+0x84>
     c78:	00 00       	nop
    _delay_ms(2);
}
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <LCD_Init>:

void LCD_Init(void) {
    // Set LCD port direction (D4-D7 as output, RS and EN as output)
    Proxy_SetPortDirection(&lcdDataProxy, 0xF0); // Data pins D4-D7 (upper nibble)
     c7e:	60 ef       	ldi	r22, 0xF0	; 240
     c80:	86 e8       	ldi	r24, 0x86	; 134
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 ca 02 	call	0x594	; 0x594 <Proxy_SetPortDirection>
    Proxy_SetPortDirection(&lcdControlProxy, (1 << RS) | (1 << EN)); // RS and EN pins
     c88:	63 e0       	ldi	r22, 0x03	; 3
     c8a:	82 e8       	ldi	r24, 0x82	; 130
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 ca 02 	call	0x594	; 0x594 <Proxy_SetPortDirection>
     c92:	8f e3       	ldi	r24, 0x3F	; 63
     c94:	9c e9       	ldi	r25, 0x9C	; 156
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <LCD_Init+0x18>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <LCD_Init+0x1e>
     c9c:	00 00       	nop

    _delay_ms(20); // LCD Power ON delay always >15ms

    LCD_Command(0x02); // Initialize LCD in 4-bit mode
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCD_Command>
    LCD_Command(0x28); // 2 lines, 5x7 matrix in 4-bit mode
     ca4:	88 e2       	ldi	r24, 0x28	; 40
     ca6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCD_Command>
    LCD_Command(0x0C); // Display ON, cursor OFF
     caa:	8c e0       	ldi	r24, 0x0C	; 12
     cac:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCD_Command>
    LCD_Command(0x06); // Increment cursor (shift cursor to right)
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCD_Command>
    LCD_Command(0x01); // Clear display
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCD_Command>
     cbc:	8f e9       	ldi	r24, 0x9F	; 159
     cbe:	9f e0       	ldi	r25, 0x0F	; 15
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <LCD_Init+0x42>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <LCD_Init+0x48>
     cc6:	00 00       	nop
    _delay_ms(2);
}
     cc8:	08 95       	ret

00000cca <LCD_String>:

void LCD_String(char *str) {
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
    while (*str) {
     cd0:	89 91       	ld	r24, Y+
     cd2:	81 11       	cpse	r24, r1
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <LCD_String+0x12>
        LCD_Char(*str++);
    }
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret
    _delay_ms(2);
}

void LCD_String(char *str) {
    while (*str) {
        LCD_Char(*str++);
     cdc:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <LCD_Char>
     ce0:	f7 cf       	rjmp	.-18     	; 0xcd0 <LCD_String+0x6>

00000ce2 <LCD_String_xy>:
    }
}

void LCD_String_xy(char row, char pos, char *str) {
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ea 01       	movw	r28, r20
    if (row == 0 && pos < 16)
     ce8:	81 11       	cpse	r24, r1
     cea:	09 c0       	rjmp	.+18     	; 0xcfe <LCD_String_xy+0x1c>
        LCD_Command((pos & 0x0F) | 0x80); // First row position
     cec:	86 2f       	mov	r24, r22
     cee:	80 68       	ori	r24, 0x80	; 128
        LCD_Char(*str++);
    }
}

void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
     cf0:	60 31       	cpi	r22, 0x10	; 16
     cf2:	58 f0       	brcs	.+22     	; 0xd0a <LCD_String_xy+0x28>
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    LCD_String(str);
     cf4:	ce 01       	movw	r24, r28
}
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    LCD_String(str);
     cfa:	0c 94 65 06 	jmp	0xcca	; 0xcca <LCD_String>
}

void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	c9 f7       	brne	.-14     	; 0xcf4 <LCD_String_xy+0x12>
     d02:	60 31       	cpi	r22, 0x10	; 16
     d04:	b8 f7       	brcc	.-18     	; 0xcf4 <LCD_String_xy+0x12>
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
     d06:	86 2f       	mov	r24, r22
     d08:	80 6c       	ori	r24, 0xC0	; 192
     d0a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCD_Command>
     d0e:	f2 cf       	rjmp	.-28     	; 0xcf4 <LCD_String_xy+0x12>

00000d10 <LCD_Clear>:
    LCD_String(str);
}

void LCD_Clear(void) {
    LCD_Command(0x01); // Clear display
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCD_Command>
     d16:	8f e9       	ldi	r24, 0x9F	; 159
     d18:	9f e0       	ldi	r25, 0x0F	; 15
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <LCD_Clear+0xa>
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <LCD_Clear+0x10>
     d20:	00 00       	nop
    _delay_ms(2);
    LCD_Command(0x80); // Cursor at home position
     d22:	80 e8       	ldi	r24, 0x80	; 128
     d24:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <LCD_Command>

00000d28 <LCD_Float>:
}

void LCD_Float(float value) {
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	2e 97       	sbiw	r28, 0x0e	; 14
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	6b 87       	std	Y+11, r22	; 0x0b
     d42:	7c 87       	std	Y+12, r23	; 0x0c
     d44:	8d 87       	std	Y+13, r24	; 0x0d
     d46:	9e 87       	std	Y+14, r25	; 0x0e
	char buffer[10];
	dtostrf(value, 4, 2, buffer);  // Convert float to string with 2 decimal places
     d48:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d50:	8e 01       	movw	r16, r28
     d52:	0f 5f       	subi	r16, 0xFF	; 255
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	22 e0       	ldi	r18, 0x02	; 2
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	44 e0       	ldi	r20, 0x04	; 4
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <dtostrf>
	LCD_String(buffer);  // Display the string on the LCD
     d62:	c8 01       	movw	r24, r16
     d64:	0e 94 65 06 	call	0xcca	; 0xcca <LCD_String>
}
     d68:	2e 96       	adiw	r28, 0x0e	; 14
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <UART_Init>:
#include "avr/io.h"
#include <stdio.h>

#define F_CPU 8000000 
void UART_Init(unsigned int baud) {
	unsigned int ubrr = (F_CPU / 16 / baud) - 1;
     d7e:	9c 01       	movw	r18, r24
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	60 e2       	ldi	r22, 0x20	; 32
     d86:	71 ea       	ldi	r23, 0xA1	; 161
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <__divmodsi4>
     d90:	21 50       	subi	r18, 0x01	; 1
     d92:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(ubrr >> 8);  // Set high byte of baud rate
     d94:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)ubrr;        // Set low byte of baud rate
     d96:	29 b9       	out	0x09, r18	; 9
	UCSRB = (1 << TXEN);                // Enable transmitter
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0); // 8-bit data, 1 stop bit
     d9c:	86 e8       	ldi	r24, 0x86	; 134
     d9e:	80 bd       	out	0x20, r24	; 32
}
     da0:	08 95       	ret

00000da2 <UART_Transmit>:

// Function to send a character via UART
void UART_Transmit(char data) {
	while (!(UCSRA & (1 << UDRE)));  // Wait for the buffer to be empty
     da2:	5d 9b       	sbis	0x0b, 5	; 11
     da4:	fe cf       	rjmp	.-4      	; 0xda2 <UART_Transmit>
	UDR = data;                     // Send the character
     da6:	8c b9       	out	0x0c, r24	; 12
}
     da8:	08 95       	ret

00000daa <UART_Print>:



void UART_Print(const char *str) {
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ec 01       	movw	r28, r24
    while (*str) {
     db0:	89 91       	ld	r24, Y+
     db2:	81 11       	cpse	r24, r1
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <UART_Print+0x12>
        UART_Transmit(*str++);
    }
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret



void UART_Print(const char *str) {
    while (*str) {
        UART_Transmit(*str++);
     dbc:	0e 94 d1 06 	call	0xda2	; 0xda2 <UART_Transmit>
     dc0:	f7 cf       	rjmp	.-18     	; 0xdb0 <UART_Print+0x6>

00000dc2 <UART_PrintFloat>:
    }
}


// UART Print Float Using dtostrf
void UART_PrintFloat(float value) {
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	64 97       	sbiw	r28, 0x14	; 20
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	69 8b       	std	Y+17, r22	; 0x11
     ddc:	7a 8b       	std	Y+18, r23	; 0x12
     dde:	8b 8b       	std	Y+19, r24	; 0x13
     de0:	9c 8b       	std	Y+20, r25	; 0x14
    char buffer[16];
    dtostrf(value, 6, 2, buffer); // Convert float to string (width: 6, precision: 2)
     de2:	69 89       	ldd	r22, Y+17	; 0x11
     de4:	7a 89       	ldd	r23, Y+18	; 0x12
     de6:	8b 89       	ldd	r24, Y+19	; 0x13
     de8:	9c 89       	ldd	r25, Y+20	; 0x14
     dea:	8e 01       	movw	r16, r28
     dec:	0f 5f       	subi	r16, 0xFF	; 255
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	22 e0       	ldi	r18, 0x02	; 2
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	46 e0       	ldi	r20, 0x06	; 6
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <dtostrf>
    UART_Print(buffer);
     dfc:	c8 01       	movw	r24, r16
     dfe:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_Print>
}
     e02:	64 96       	adiw	r28, 0x14	; 20
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <xCoRoutineCreate>:
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode,
                                 UBaseType_t uxPriority,
                                 UBaseType_t uxIndex )
    {
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	6c 01       	movw	r12, r24
     e28:	16 2f       	mov	r17, r22
     e2a:	f4 2e       	mov	r15, r20

        /* Allocate the memory that will store the co-routine control block. */
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     e2c:	8a e1       	ldi	r24, 0x1A	; 26
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <pvPortMalloc>
     e34:	ec 01       	movw	r28, r24

            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     e36:	8f ef       	ldi	r24, 0xFF	; 255
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );

        if( pxCoRoutine )
     e38:	20 97       	sbiw	r28, 0x00	; 0
     e3a:	09 f4       	brne	.+2      	; 0xe3e <xCoRoutineCreate+0x26>
     e3c:	56 c0       	rjmp	.+172    	; 0xeea <xCoRoutineCreate+0xd2>
        {
            /* If pxCurrentCoRoutine is NULL then this is the first co-routine to
            * be created and the co-routine data structures need initialising. */
            if( pxCurrentCoRoutine == NULL )
     e3e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pxCurrentCoRoutine>
     e42:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pxCurrentCoRoutine+0x1>
     e46:	89 2b       	or	r24, r25
     e48:	21 f5       	brne	.+72     	; 0xe92 <xCoRoutineCreate+0x7a>
            {
                pxCurrentCoRoutine = pxCoRoutine;
     e4a:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <pxCurrentCoRoutine+0x1>
     e4e:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <pxCurrentCoRoutine>
    {
        UBaseType_t uxPriority;

        for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
        {
            vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     e52:	8d e3       	ldi	r24, 0x3D	; 61
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
     e5a:	86 e4       	ldi	r24, 0x46	; 70
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
        }

        vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     e62:	84 e3       	ldi	r24, 0x34	; 52
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
        vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
     e6a:	8b e2       	ldi	r24, 0x2B	; 43
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
        vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
     e72:	8e e1       	ldi	r24, 0x1E	; 30
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>

        /* Start with pxDelayedCoRoutineList using list1 and the
         * pxOverflowDelayedCoRoutineList using list2. */
        pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     e7a:	84 e3       	ldi	r24, 0x34	; 52
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxDelayedCoRoutineList+0x1>
     e82:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     e86:	8b e2       	ldi	r24, 0x2B	; 43
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <pxOverflowDelayedCoRoutineList+0x1>
     e8e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <pxOverflowDelayedCoRoutineList>
     e92:	11 11       	cpse	r17, r1
     e94:	11 e0       	ldi	r17, 0x01	; 1
            {
                uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
            }

            /* Fill out the co-routine control block from the function parameters. */
            pxCoRoutine->uxState = corINITIAL_STATE;
     e96:	19 8e       	std	Y+25, r1	; 0x19
     e98:	18 8e       	std	Y+24, r1	; 0x18
            pxCoRoutine->uxPriority = uxPriority;
     e9a:	1e 8b       	std	Y+22, r17	; 0x16
            pxCoRoutine->uxIndex = uxIndex;
     e9c:	ff 8a       	std	Y+23, r15	; 0x17
            pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     e9e:	fe 01       	movw	r30, r28
     ea0:	c1 92       	st	Z+, r12
     ea2:	d1 92       	st	Z+, r13
     ea4:	7f 01       	movw	r14, r30

            /* Initialise all the other co-routine control block parameters. */
            vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     ea6:	cf 01       	movw	r24, r30
     ea8:	0e 94 cd 0a 	call	0x159a	; 0x159a <vListInitialiseItem>
            vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     eac:	ce 01       	movw	r24, r28
     eae:	0c 96       	adiw	r24, 0x0c	; 12
     eb0:	0e 94 cd 0a 	call	0x159a	; 0x159a <vListInitialiseItem>

            /* Set the co-routine control block as a link back from the ListItem_t.
             * This is so we can get back to the containing CRCB from a generic item
             * in a list. */
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     eb4:	d9 87       	std	Y+9, r29	; 0x09
     eb6:	c8 87       	std	Y+8, r28	; 0x08
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     eb8:	db 8b       	std	Y+19, r29	; 0x13
     eba:	ca 8b       	std	Y+18, r28	; 0x12

            /* Event lists are always in priority order. */
            listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	81 1b       	sub	r24, r17
     ec2:	91 09       	sbc	r25, r1
     ec4:	9d 87       	std	Y+13, r25	; 0x0d
     ec6:	8c 87       	std	Y+12, r24	; 0x0c

            /* Now the co-routine has been initialised it can be added to the ready
             * list at the correct priority. */
            prvAddCoRoutineToReadyQueue( pxCoRoutine );
     ec8:	8e 89       	ldd	r24, Y+22	; 0x16
     eca:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <uxTopCoRoutineReadyPriority>
     ece:	98 17       	cp	r25, r24
     ed0:	10 f4       	brcc	.+4      	; 0xed6 <xCoRoutineCreate+0xbe>
     ed2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <uxTopCoRoutineReadyPriority>
     ed6:	f9 e0       	ldi	r31, 0x09	; 9
     ed8:	8f 9f       	mul	r24, r31
     eda:	c0 01       	movw	r24, r0
     edc:	11 24       	eor	r1, r1
     ede:	b7 01       	movw	r22, r14
     ee0:	83 5c       	subi	r24, 0xC3	; 195
     ee2:	9e 4f       	sbci	r25, 0xFE	; 254
     ee4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <vListInsertEnd>

            xReturn = pdPASS;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xCoRoutineCreate( xReturn );

        return xReturn;
    }
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	08 95       	ret

00000efa <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

    void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay,
                                     List_t * pxEventList )
    {
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	8b 01       	movw	r16, r22

        traceENTER_vCoRoutineAddToDelayedList( xTicksToDelay, pxEventList );

        /* Calculate the time to wake - this may overflow but this is
         * not a problem. */
        xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     f04:	c0 91 19 01 	lds	r28, 0x0119	; 0x800119 <xCoRoutineTickCount>
     f08:	d0 91 1a 01 	lds	r29, 0x011A	; 0x80011a <xCoRoutineTickCount+0x1>
     f0c:	c8 0f       	add	r28, r24
     f0e:	d9 1f       	adc	r29, r25

        /* We must remove ourselves from the ready list before adding
         * ourselves to the blocked list as the same list item is used for
         * both lists. */
        ( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     f10:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pxCurrentCoRoutine>
     f14:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pxCurrentCoRoutine+0x1>
     f18:	02 96       	adiw	r24, 0x02	; 2
     f1a:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     f1e:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <pxCurrentCoRoutine>
     f22:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <pxCurrentCoRoutine+0x1>
     f26:	fb 01       	movw	r30, r22
     f28:	d3 83       	std	Z+3, r29	; 0x03
     f2a:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xCoRoutineTickCount )
     f2c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xCoRoutineTickCount>
     f30:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <xCoRoutineTickCount+0x1>
     f34:	6e 5f       	subi	r22, 0xFE	; 254
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	c8 17       	cp	r28, r24
     f3a:	d9 07       	cpc	r29, r25
     f3c:	b0 f4       	brcc	.+44     	; 0xf6a <vCoRoutineAddToDelayedList+0x70>
        {
            /* Wake time has overflowed.  Place this item in the
             * overflow list. */
            vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     f3e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <pxOverflowDelayedCoRoutineList>
     f42:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <pxOverflowDelayedCoRoutineList+0x1>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     f46:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <vListInsert>
        }

        if( pxEventList )
     f4a:	01 15       	cp	r16, r1
     f4c:	11 05       	cpc	r17, r1
     f4e:	91 f0       	breq	.+36     	; 0xf74 <vCoRoutineAddToDelayedList+0x7a>
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     f50:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <pxCurrentCoRoutine>
     f54:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <pxCurrentCoRoutine+0x1>
     f58:	64 5f       	subi	r22, 0xF4	; 244
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	c8 01       	movw	r24, r16
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16

        if( pxEventList )
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     f66:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <vListInsert>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     f6a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <pxDelayedCoRoutineList>
     f6e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pxDelayedCoRoutineList+0x1>
     f72:	e9 cf       	rjmp	.-46     	; 0xf46 <vCoRoutineAddToDelayedList+0x4c>
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <vCoRoutineSchedule>:
        xLastTickCount = xCoRoutineTickCount;
    }
/*-----------------------------------------------------------*/

    void vCoRoutineSchedule( void )
    {
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
        traceENTER_vCoRoutineSchedule();

        /* Only run a co-routine after prvInitialiseCoRoutineLists() has been
         * called.  prvInitialiseCoRoutineLists() is called automatically when a
         * co-routine is created. */
        if( pxDelayedCoRoutineList != NULL )
     f88:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <pxDelayedCoRoutineList>
     f8c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pxDelayedCoRoutineList+0x1>
     f90:	89 2b       	or	r24, r25
     f92:	09 f4       	brne	.+2      	; 0xf96 <vCoRoutineSchedule+0x18>
     f94:	44 c0       	rjmp	.+136    	; 0x101e <vCoRoutineSchedule+0xa0>
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
            }
            portENABLE_INTERRUPTS();

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     f96:	99 e0       	ldi	r25, 0x09	; 9
     f98:	f9 2e       	mov	r15, r25
    static void prvCheckPendingReadyList( void )
    {
        /* Are there any co-routines waiting to get moved to the ready list?  These
         * are co-routines that have been readied by an ISR.  The ISR cannot access
         * the ready lists itself. */
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     f9a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <xPendingReadyCoRoutineList>
     f9e:	81 11       	cpse	r24, r1
     fa0:	44 c0       	rjmp	.+136    	; 0x102a <vCoRoutineSchedule+0xac>

    static void prvCheckDelayedList( void )
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     fa2:	0e 94 72 18 	call	0x30e4	; 0x30e4 <xTaskGetTickCount>
     fa6:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <xLastTickCount>
     faa:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <xLastTickCount+0x1>
     fae:	82 1b       	sub	r24, r18
     fb0:	93 0b       	sbc	r25, r19
     fb2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xPassedTicks+0x1>
     fb6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xPassedTicks>
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
                    }
                }
                portENABLE_INTERRUPTS();

                prvAddCoRoutineToReadyQueue( pxCRCB );
     fba:	89 e0       	ldi	r24, 0x09	; 9
     fbc:	f8 2e       	mov	r15, r24
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
     fbe:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <xPassedTicks>
     fc2:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <xPassedTicks+0x1>
     fc6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xCoRoutineTickCount>
     fca:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <xCoRoutineTickCount+0x1>
     fce:	21 15       	cp	r18, r1
     fd0:	31 05       	cpc	r19, r1
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <vCoRoutineSchedule+0x58>
     fd4:	4c c0       	rjmp	.+152    	; 0x106e <vCoRoutineSchedule+0xf0>

                prvAddCoRoutineToReadyQueue( pxCRCB );
            }
        }

        xLastTickCount = xCoRoutineTickCount;
     fd6:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <xLastTickCount+0x1>
     fda:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <xLastTickCount>
     fde:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <uxTopCoRoutineReadyPriority>

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	99 e0       	ldi	r25, 0x09	; 9
     fe8:	92 9f       	mul	r25, r18
     fea:	f0 01       	movw	r30, r0
     fec:	93 9f       	mul	r25, r19
     fee:	f0 0d       	add	r31, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	e3 5c       	subi	r30, 0xC3	; 195
     ff4:	fe 4f       	sbci	r31, 0xFE	; 254
     ff6:	40 81       	ld	r20, Z
     ff8:	41 11       	cpse	r20, r1
     ffa:	8d c0       	rjmp	.+282    	; 0x1116 <vCoRoutineSchedule+0x198>
            {
                if( uxTopCoRoutineReadyPriority == 0 )
     ffc:	88 23       	and	r24, r24
     ffe:	69 f0       	breq	.+26     	; 0x101a <vCoRoutineSchedule+0x9c>
                {
                    /* No more co-routines to check. */
                    return;
                }

                --uxTopCoRoutineReadyPriority;
    1000:	81 50       	subi	r24, 0x01	; 1

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	92 9f       	mul	r25, r18
    1008:	f0 01       	movw	r30, r0
    100a:	93 9f       	mul	r25, r19
    100c:	f0 0d       	add	r31, r0
    100e:	11 24       	eor	r1, r1
    1010:	e3 5c       	subi	r30, 0xC3	; 195
    1012:	fe 4f       	sbci	r31, 0xFE	; 254
    1014:	90 81       	ld	r25, Z
    1016:	91 11       	cpse	r25, r1
    1018:	7e c0       	rjmp	.+252    	; 0x1116 <vCoRoutineSchedule+0x198>
    101a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <uxTopCoRoutineReadyPriority>
            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
        }

        traceRETURN_vCoRoutineSchedule();
    }
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	08 95       	ret
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
        {
            CRCB_t * pxUnblockedCRCB;

            /* The pending ready list can be accessed by an ISR. */
            portDISABLE_INTERRUPTS();
    102a:	f8 94       	cli
            {
                pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyCoRoutineList ) );
    102c:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <xPendingReadyCoRoutineList+0x5>
    1030:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <xPendingReadyCoRoutineList+0x6>
    1034:	c6 81       	ldd	r28, Z+6	; 0x06
    1036:	d7 81       	ldd	r29, Z+7	; 0x07
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1038:	ce 01       	movw	r24, r28
    103a:	0c 96       	adiw	r24, 0x0c	; 12
    103c:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>
            }
            portENABLE_INTERRUPTS();
    1040:	78 94       	sei

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1042:	8e 01       	movw	r16, r28
    1044:	0e 5f       	subi	r16, 0xFE	; 254
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	c8 01       	movw	r24, r16
    104a:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    104e:	8e 89       	ldd	r24, Y+22	; 0x16
    1050:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <uxTopCoRoutineReadyPriority>
    1054:	98 17       	cp	r25, r24
    1056:	10 f4       	brcc	.+4      	; 0x105c <vCoRoutineSchedule+0xde>
    1058:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <uxTopCoRoutineReadyPriority>
    105c:	8f 9d       	mul	r24, r15
    105e:	c0 01       	movw	r24, r0
    1060:	11 24       	eor	r1, r1
    1062:	b8 01       	movw	r22, r16
    1064:	83 5c       	subi	r24, 0xC3	; 195
    1066:	9e 4f       	sbci	r25, 0xFE	; 254
    1068:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <vListInsertEnd>
    106c:	96 cf       	rjmp	.-212    	; 0xf9a <vCoRoutineSchedule+0x1c>

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
        {
            xCoRoutineTickCount++;
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <xCoRoutineTickCount+0x1>
    1074:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xCoRoutineTickCount>
            xPassedTicks--;
    1078:	21 50       	subi	r18, 0x01	; 1
    107a:	31 09       	sbc	r19, r1
    107c:	30 93 16 01 	sts	0x0116, r19	; 0x800116 <xPassedTicks+0x1>
    1080:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <xPassedTicks>

            /* If the tick count has overflowed we need to swap the ready lists. */
            if( xCoRoutineTickCount == 0 )
    1084:	89 2b       	or	r24, r25
    1086:	81 f4       	brne	.+32     	; 0x10a8 <vCoRoutineSchedule+0x12a>
    1088:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <pxDelayedCoRoutineList>
    108c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pxDelayedCoRoutineList+0x1>
                List_t * pxTemp;

                /* Tick count has overflowed so we need to swap the delay lists.  If there are
                 * any items in pxDelayedCoRoutineList here then there is an error! */
                pxTemp = pxDelayedCoRoutineList;
                pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1090:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <pxOverflowDelayedCoRoutineList>
    1094:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <pxOverflowDelayedCoRoutineList+0x1>
    1098:	30 93 2a 01 	sts	0x012A, r19	; 0x80012a <pxDelayedCoRoutineList+0x1>
    109c:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <pxDelayedCoRoutineList>
                pxOverflowDelayedCoRoutineList = pxTemp;
    10a0:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <pxOverflowDelayedCoRoutineList+0x1>
    10a4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <pxOverflowDelayedCoRoutineList>
            }

            /* See if this tick has made a timeout expire. */
            while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    10a8:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <pxDelayedCoRoutineList>
    10ac:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <pxDelayedCoRoutineList+0x1>
    10b0:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <xCoRoutineTickCount>
    10b4:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <xCoRoutineTickCount+0x1>
    10b8:	80 81       	ld	r24, Z
    10ba:	88 23       	and	r24, r24
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <vCoRoutineSchedule+0x142>
    10be:	7f cf       	rjmp	.-258    	; 0xfbe <vCoRoutineSchedule+0x40>
            {
                pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    10c0:	05 80       	ldd	r0, Z+5	; 0x05
    10c2:	f6 81       	ldd	r31, Z+6	; 0x06
    10c4:	e0 2d       	mov	r30, r0
    10c6:	c6 81       	ldd	r28, Z+6	; 0x06
    10c8:	d7 81       	ldd	r29, Z+7	; 0x07

                if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	28 17       	cp	r18, r24
    10d0:	39 07       	cpc	r19, r25
    10d2:	08 f4       	brcc	.+2      	; 0x10d6 <vCoRoutineSchedule+0x158>
    10d4:	74 cf       	rjmp	.-280    	; 0xfbe <vCoRoutineSchedule+0x40>
                {
                    /* Timeout not yet expired. */
                    break;
                }

                portDISABLE_INTERRUPTS();
    10d6:	f8 94       	cli
                    /* The event could have occurred just before this critical
                     *  section.  If this is the case then the generic list item will
                     *  have been moved to the pending ready list and the following
                     *  line is still valid.  Also the pvContainer parameter will have
                     *  been set to NULL so the following lines are also valid. */
                    ( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    10d8:	8e 01       	movw	r16, r28
    10da:	0e 5f       	subi	r16, 0xFE	; 254
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	c8 01       	movw	r24, r16
    10e0:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>

                    /* Is the co-routine waiting on an event also? */
                    if( pxCRCB->xEventListItem.pxContainer )
    10e4:	8c 89       	ldd	r24, Y+20	; 0x14
    10e6:	9d 89       	ldd	r25, Y+21	; 0x15
    10e8:	89 2b       	or	r24, r25
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <vCoRoutineSchedule+0x176>
                    {
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    10ec:	ce 01       	movw	r24, r28
    10ee:	0c 96       	adiw	r24, 0x0c	; 12
    10f0:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>
                    }
                }
                portENABLE_INTERRUPTS();
    10f4:	78 94       	sei

                prvAddCoRoutineToReadyQueue( pxCRCB );
    10f6:	8e 89       	ldd	r24, Y+22	; 0x16
    10f8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <uxTopCoRoutineReadyPriority>
    10fc:	98 17       	cp	r25, r24
    10fe:	10 f4       	brcc	.+4      	; 0x1104 <vCoRoutineSchedule+0x186>
    1100:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <uxTopCoRoutineReadyPriority>
    1104:	8f 9d       	mul	r24, r15
    1106:	c0 01       	movw	r24, r0
    1108:	11 24       	eor	r1, r1
    110a:	b8 01       	movw	r22, r16
    110c:	83 5c       	subi	r24, 0xC3	; 195
    110e:	9e 4f       	sbci	r25, 0xFE	; 254
    1110:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <vListInsertEnd>
    1114:	c9 cf       	rjmp	.-110    	; 0x10a8 <vCoRoutineSchedule+0x12a>
    1116:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <uxTopCoRoutineReadyPriority>
                --uxTopCoRoutineReadyPriority;
            }

            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    111a:	49 e0       	ldi	r20, 0x09	; 9
    111c:	42 9f       	mul	r20, r18
    111e:	c0 01       	movw	r24, r0
    1120:	43 9f       	mul	r20, r19
    1122:	90 0d       	add	r25, r0
    1124:	11 24       	eor	r1, r1
    1126:	fc 01       	movw	r30, r24
    1128:	e3 5c       	subi	r30, 0xC3	; 195
    112a:	fe 4f       	sbci	r31, 0xFE	; 254
    112c:	a1 81       	ldd	r26, Z+1	; 0x01
    112e:	b2 81       	ldd	r27, Z+2	; 0x02
    1130:	12 96       	adiw	r26, 0x02	; 2
    1132:	4d 91       	ld	r20, X+
    1134:	5c 91       	ld	r21, X
    1136:	52 83       	std	Z+2, r21	; 0x02
    1138:	41 83       	std	Z+1, r20	; 0x01
    113a:	80 5c       	subi	r24, 0xC0	; 192
    113c:	9e 4f       	sbci	r25, 0xFE	; 254
    113e:	48 17       	cp	r20, r24
    1140:	59 07       	cpc	r21, r25
    1142:	21 f4       	brne	.+8      	; 0x114c <vCoRoutineSchedule+0x1ce>
    1144:	85 81       	ldd	r24, Z+5	; 0x05
    1146:	96 81       	ldd	r25, Z+6	; 0x06
    1148:	92 83       	std	Z+2, r25	; 0x02
    114a:	81 83       	std	Z+1, r24	; 0x01
    114c:	89 e0       	ldi	r24, 0x09	; 9
    114e:	82 9f       	mul	r24, r18
    1150:	f0 01       	movw	r30, r0
    1152:	83 9f       	mul	r24, r19
    1154:	f0 0d       	add	r31, r0
    1156:	11 24       	eor	r1, r1
    1158:	e3 5c       	subi	r30, 0xC3	; 195
    115a:	fe 4f       	sbci	r31, 0xFE	; 254
    115c:	01 80       	ldd	r0, Z+1	; 0x01
    115e:	f2 81       	ldd	r31, Z+2	; 0x02
    1160:	e0 2d       	mov	r30, r0
    1162:	86 81       	ldd	r24, Z+6	; 0x06
    1164:	97 81       	ldd	r25, Z+7	; 0x07
    1166:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pxCurrentCoRoutine+0x1>
    116a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pxCurrentCoRoutine>

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    116e:	dc 01       	movw	r26, r24
    1170:	ed 91       	ld	r30, X+
    1172:	fc 91       	ld	r31, X
    1174:	11 97       	sbiw	r26, 0x01	; 1
    1176:	57 96       	adiw	r26, 0x17	; 23
    1178:	6c 91       	ld	r22, X
        }

        traceRETURN_vCoRoutineSchedule();
    }
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    1184:	09 94       	ijmp

00001186 <xCoRoutineRemoveFromEventList>:
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    }
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineRemoveFromEventList( const List_t * pxEventList )
    {
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
        traceENTER_xCoRoutineRemoveFromEventList( pxEventList );

        /* This function is called from within an interrupt.  It can only access
         * event lists and the pending ready list.  This function assumes that a
         * check has already been made to ensure pxEventList is not empty. */
        pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    118e:	dc 01       	movw	r26, r24
    1190:	15 96       	adiw	r26, 0x05	; 5
    1192:	ed 91       	ld	r30, X+
    1194:	fc 91       	ld	r31, X
    1196:	c6 81       	ldd	r28, Z+6	; 0x06
    1198:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    119a:	8e 01       	movw	r16, r28
    119c:	04 5f       	subi	r16, 0xF4	; 244
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	c8 01       	movw	r24, r16
    11a2:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>
        vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    11a6:	b8 01       	movw	r22, r16
    11a8:	8e e1       	ldi	r24, 0x1E	; 30
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <vListInsertEnd>

        if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    11b0:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <pxCurrentCoRoutine>
    11b4:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <pxCurrentCoRoutine+0x1>
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	2e 89       	ldd	r18, Y+22	; 0x16
    11bc:	96 89       	ldd	r25, Z+22	; 0x16
    11be:	29 17       	cp	r18, r25
    11c0:	08 f4       	brcc	.+2      	; 0x11c4 <xCoRoutineRemoveFromEventList+0x3e>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xCoRoutineRemoveFromEventList( xReturn );

        return xReturn;
    }
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <vCoRoutineResetState>:
 * scheduler.
 */
    void vCoRoutineResetState( void )
    {
        /* Lists for ready and blocked co-routines. */
        pxDelayedCoRoutineList = NULL;
    11ce:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <pxDelayedCoRoutineList+0x1>
    11d2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = NULL;
    11d6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <pxOverflowDelayedCoRoutineList+0x1>
    11da:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <pxOverflowDelayedCoRoutineList>

        /* Other file private variables. */
        pxCurrentCoRoutine = NULL;
    11de:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <pxCurrentCoRoutine+0x1>
    11e2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <pxCurrentCoRoutine>
        uxTopCoRoutineReadyPriority = ( UBaseType_t ) 0U;
    11e6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <uxTopCoRoutineReadyPriority>
        xCoRoutineTickCount = ( TickType_t ) 0U;
    11ea:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <xCoRoutineTickCount+0x1>
    11ee:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xCoRoutineTickCount>
        xLastTickCount = ( TickType_t ) 0U;
    11f2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <xLastTickCount+0x1>
    11f6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <xLastTickCount>
        xPassedTicks = ( TickType_t ) 0U;
    11fa:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <xPassedTicks+0x1>
    11fe:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <xPassedTicks>
    }
    1202:	08 95       	ret

00001204 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    1208:	8b e0       	ldi	r24, 0x0B	; 11
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <pvPortMalloc>
    1210:	ec 01       	movw	r28, r24

            if( pxEventBits != NULL )
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	31 f0       	breq	.+12     	; 0x1222 <xEventGroupCreate+0x1e>
            {
                pxEventBits->uxEventBits = 0;
    1216:	fc 01       	movw	r30, r24
    1218:	11 92       	st	Z+, r1
    121a:	11 92       	st	Z+, r1
    121c:	cf 01       	movw	r24, r30
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    121e:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
        }
    1222:	ce 01       	movw	r24, r28
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
    122a:	af 92       	push	r10
    122c:	bf 92       	push	r11
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	6c 01       	movw	r12, r24
    1240:	7b 01       	movw	r14, r22
    1242:	b4 2e       	mov	r11, r20
    1244:	a2 2e       	mov	r10, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
    1246:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    124a:	f6 01       	movw	r30, r12
    124c:	c0 81       	ld	r28, Z
    124e:	d1 81       	ldd	r29, Z+1	; 0x01
    1250:	ce 01       	movw	r24, r28
    1252:	8e 21       	and	r24, r14
    1254:	9f 21       	and	r25, r15
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
    1256:	a1 10       	cpse	r10, r1
    1258:	40 c0       	rjmp	.+128    	; 0x12da <xEventGroupWaitBits+0xb0>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    125a:	89 2b       	or	r24, r25
    125c:	09 f0       	breq	.+2      	; 0x1260 <xEventGroupWaitBits+0x36>
    125e:	41 c0       	rjmp	.+130    	; 0x12e2 <xEventGroupWaitBits+0xb8>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
    1260:	01 15       	cp	r16, r1
    1262:	11 05       	cpc	r17, r1
    1264:	89 f0       	breq	.+34     	; 0x1288 <xEventGroupWaitBits+0x5e>
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
        EventGroup_t * pxEventBits = xEventGroup;
        EventBits_t uxReturn, uxControlBits = 0;
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	60 e0       	ldi	r22, 0x00	; 0
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
    126a:	bb 20       	and	r11, r11
    126c:	11 f0       	breq	.+4      	; 0x1272 <xEventGroupWaitBits+0x48>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	71 e0       	ldi	r23, 0x01	; 1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
    1272:	a1 10       	cpse	r10, r1
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
    1274:	74 60       	ori	r23, 0x04	; 4
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1276:	6e 29       	or	r22, r14
    1278:	7f 29       	or	r23, r15
    127a:	a8 01       	movw	r20, r16
    127c:	c6 01       	movw	r24, r12
    127e:	02 96       	adiw	r24, 0x02	; 2
    1280:	0e 94 09 1b 	call	0x3612	; 0x3612 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
    1284:	d0 e0       	ldi	r29, 0x00	; 0
    1286:	c0 e0       	ldi	r28, 0x00	; 0

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    1288:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
    128c:	01 2b       	or	r16, r17
    128e:	c9 f0       	breq	.+50     	; 0x12c2 <xEventGroupWaitBits+0x98>
        {
            if( xAlreadyYielded == pdFALSE )
    1290:	81 11       	cpse	r24, r1
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <xEventGroupWaitBits+0x6e>
            {
                taskYIELD_WITHIN_API();
    1294:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
    1298:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    129c:	91 fd       	sbrc	r25, 1
    129e:	0f c0       	rjmp	.+30     	; 0x12be <xEventGroupWaitBits+0x94>
            {
                taskENTER_CRITICAL();
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	0f 92       	push	r0
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
    12a6:	f6 01       	movw	r30, r12
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	97 01       	movw	r18, r14
    12ae:	28 23       	and	r18, r24
    12b0:	39 23       	and	r19, r25
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
    12b2:	a1 10       	cpse	r10, r1
    12b4:	23 c0       	rjmp	.+70     	; 0x12fc <xEventGroupWaitBits+0xd2>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    12b6:	23 2b       	or	r18, r19
    12b8:	21 f5       	brne	.+72     	; 0x1302 <xEventGroupWaitBits+0xd8>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
                }
                taskEXIT_CRITICAL();
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    12be:	ec 01       	movw	r28, r24
    12c0:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
    }
    12c2:	ce 01       	movw	r24, r28
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	08 95       	ret
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    12da:	e8 16       	cp	r14, r24
    12dc:	f9 06       	cpc	r15, r25
    12de:	09 f0       	breq	.+2      	; 0x12e2 <xEventGroupWaitBits+0xb8>
    12e0:	bf cf       	rjmp	.-130    	; 0x1260 <xEventGroupWaitBits+0x36>
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
    12e2:	bb 20       	and	r11, r11
    12e4:	41 f0       	breq	.+16     	; 0x12f6 <xEventGroupWaitBits+0xcc>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    12e6:	c7 01       	movw	r24, r14
    12e8:	80 95       	com	r24
    12ea:	90 95       	com	r25
    12ec:	8c 23       	and	r24, r28
    12ee:	9d 23       	and	r25, r29
    12f0:	f6 01       	movw	r30, r12
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
            if( xWaitConditionMet != pdFALSE )
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	00 e0       	ldi	r16, 0x00	; 0
    12fa:	c6 cf       	rjmp	.-116    	; 0x1288 <xEventGroupWaitBits+0x5e>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    12fc:	e2 16       	cp	r14, r18
    12fe:	f3 06       	cpc	r15, r19
    1300:	e1 f6       	brne	.-72     	; 0x12ba <xEventGroupWaitBits+0x90>

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
                    {
                        if( xClearOnExit != pdFALSE )
    1302:	bb 20       	and	r11, r11
    1304:	d1 f2       	breq	.-76     	; 0x12ba <xEventGroupWaitBits+0x90>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1306:	e0 94       	com	r14
    1308:	f0 94       	com	r15
    130a:	e8 22       	and	r14, r24
    130c:	f9 22       	and	r15, r25
    130e:	f6 01       	movw	r30, r12
    1310:	f1 82       	std	Z+1, r15	; 0x01
    1312:	e0 82       	st	Z, r14
    1314:	d2 cf       	rjmp	.-92     	; 0x12ba <xEventGroupWaitBits+0x90>

00001316 <xEventGroupClearBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
    1316:	fc 01       	movw	r30, r24
        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        taskENTER_CRITICAL();
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	0f 92       	push	r0
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
    1322:	60 95       	com	r22
    1324:	70 95       	com	r23
    1326:	68 23       	and	r22, r24
    1328:	79 23       	and	r23, r25
    132a:	71 83       	std	Z+1, r23	; 0x01
    132c:	60 83       	st	Z, r22
        }
        taskEXIT_CRITICAL();
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
    }
    1332:	08 95       	ret

00001334 <xEventGroupGetBitsFromISR>:
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xEventGroupGetBitsFromISR( uxReturn );

        return uxReturn;
    }
    1334:	fc 01       	movw	r30, r24
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	08 95       	ret

0000133c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	ec 01       	movw	r28, r24
    134e:	8b 01       	movw	r16, r22
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        pxList = &( pxEventBits->xTasksWaitingForBits );
        pxListEnd = listGET_END_MARKER( pxList );
    1350:	7c 01       	movw	r14, r24
    1352:	85 e0       	ldi	r24, 0x05	; 5
    1354:	e8 0e       	add	r14, r24
    1356:	f1 1c       	adc	r15, r1
        vTaskSuspendAll();
    1358:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
    135c:	ef 81       	ldd	r30, Y+7	; 0x07
    135e:	f8 85       	ldd	r31, Y+8	; 0x08

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
    1360:	68 81       	ld	r22, Y
    1362:	79 81       	ldd	r23, Y+1	; 0x01
    1364:	60 2b       	or	r22, r16
    1366:	71 2b       	or	r23, r17
    1368:	79 83       	std	Y+1, r23	; 0x01
    136a:	68 83       	st	Y, r22
    {
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    136c:	10 e0       	ldi	r17, 0x00	; 0
    136e:	00 e0       	ldi	r16, 0x00	; 0
    1370:	68 81       	ld	r22, Y
    1372:	79 81       	ldd	r23, Y+1	; 0x01

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
    1374:	ee 15       	cp	r30, r14
    1376:	ff 05       	cpc	r31, r15
    1378:	99 f4       	brne	.+38     	; 0x13a0 <xEventGroupSetBits+0x64>
                pxListItem = pxNext;
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
    137a:	00 95       	com	r16
    137c:	10 95       	com	r17
    137e:	06 23       	and	r16, r22
    1380:	17 23       	and	r17, r23
    1382:	19 83       	std	Y+1, r17	; 0x01
    1384:	08 83       	st	Y, r16
        }
        ( void ) xTaskResumeAll();
    1386:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
    }
    138a:	88 81       	ld	r24, Y
    138c:	99 81       	ldd	r25, Y+1	; 0x01
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	df 90       	pop	r13
    139c:	cf 90       	pop	r12
    139e:	08 95       	ret
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
            {
                pxNext = listGET_NEXT( pxListItem );
    13a0:	c2 80       	ldd	r12, Z+2	; 0x02
    13a2:	d3 80       	ldd	r13, Z+3	; 0x03
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    13a4:	20 81       	ld	r18, Z
    13a6:	31 81       	ldd	r19, Z+1	; 0x01
                xMatchFound = pdFALSE;

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    13a8:	c9 01       	movw	r24, r18
    13aa:	99 27       	eor	r25, r25
    13ac:	ac 01       	movw	r20, r24
    13ae:	46 23       	and	r20, r22
    13b0:	57 23       	and	r21, r23

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    13b2:	32 fd       	sbrc	r19, 2
    13b4:	04 c0       	rjmp	.+8      	; 0x13be <xEventGroupSetBits+0x82>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    13b6:	45 2b       	or	r20, r21
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <xEventGroupSetBits+0x88>
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
    13ba:	f6 01       	movw	r30, r12
    13bc:	d9 cf       	rjmp	.-78     	; 0x1370 <xEventGroupSetBits+0x34>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    13be:	84 17       	cp	r24, r20
    13c0:	95 07       	cpc	r25, r21
    13c2:	d9 f7       	brne	.-10     	; 0x13ba <xEventGroupSetBits+0x7e>
                }

                if( xMatchFound != pdFALSE )
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    13c4:	30 ff       	sbrs	r19, 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <xEventGroupSetBits+0x90>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
    13c8:	08 2b       	or	r16, r24
    13ca:	19 2b       	or	r17, r25
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    13cc:	72 60       	ori	r23, 0x02	; 2
    13ce:	cf 01       	movw	r24, r30
    13d0:	0e 94 31 1c 	call	0x3862	; 0x3862 <vTaskRemoveFromUnorderedEventList>
    13d4:	f2 cf       	rjmp	.-28     	; 0x13ba <xEventGroupSetBits+0x7e>

000013d6 <xEventGroupSync>:

    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait )
    {
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	7c 01       	movw	r14, r24
    13ec:	eb 01       	movw	r28, r22
    13ee:	8a 01       	movw	r16, r20
    13f0:	69 01       	movw	r12, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
    13f2:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        {
            uxOriginalBitValue = pxEventBits->uxEventBits;
    13f6:	f7 01       	movw	r30, r14
    13f8:	a0 80       	ld	r10, Z
    13fa:	b1 80       	ldd	r11, Z+1	; 0x01

            ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    13fc:	be 01       	movw	r22, r28
    13fe:	c7 01       	movw	r24, r14
    1400:	0e 94 9e 09 	call	0x133c	; 0x133c <xEventGroupSetBits>

            if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1404:	ca 29       	or	r28, r10
    1406:	db 29       	or	r29, r11
    1408:	ce 01       	movw	r24, r28
    140a:	80 23       	and	r24, r16
    140c:	91 23       	and	r25, r17
    140e:	80 17       	cp	r24, r16
    1410:	91 07       	cpc	r25, r17
    1412:	09 f0       	breq	.+2      	; 0x1416 <xEventGroupSync+0x40>
    1414:	3b c0       	rjmp	.+118    	; 0x148c <xEventGroupSync+0xb6>
                /* All the rendezvous bits are now set - no need to block. */
                uxReturn = ( uxOriginalBitValue | uxBitsToSet );

                /* Rendezvous always clear the bits.  They will have been cleared
                 * already unless this is the only task in the rendezvous. */
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1416:	f7 01       	movw	r30, r14
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	98 01       	movw	r18, r16
    141e:	20 95       	com	r18
    1420:	30 95       	com	r19
    1422:	82 23       	and	r24, r18
    1424:	93 23       	and	r25, r19
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24

                xTicksToWait = 0;
    142a:	d1 2c       	mov	r13, r1
    142c:	c1 2c       	mov	r12, r1
                    uxReturn = pxEventBits->uxEventBits;
                    xTimeoutOccurred = pdTRUE;
                }
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    142e:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
    1432:	cd 28       	or	r12, r13
    1434:	f9 f0       	breq	.+62     	; 0x1474 <xEventGroupSync+0x9e>
        {
            if( xAlreadyYielded == pdFALSE )
    1436:	81 11       	cpse	r24, r1
    1438:	02 c0       	rjmp	.+4      	; 0x143e <xEventGroupSync+0x68>
            {
                taskYIELD_WITHIN_API();
    143a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
    143e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    1442:	91 fd       	sbrc	r25, 1
    1444:	15 c0       	rjmp	.+42     	; 0x1470 <xEventGroupSync+0x9a>
            {
                /* The task timed out, just return the current event bit value. */
                taskENTER_CRITICAL();
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	0f 92       	push	r0
                {
                    uxReturn = pxEventBits->uxEventBits;
    144c:	f7 01       	movw	r30, r14
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01

                    /* Although the task got here because it timed out before the
                     * bits it was waiting for were set, it is possible that since it
                     * unblocked another task has set the bits.  If this is the case
                     * then it needs to clear the bits before exiting. */
                    if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1452:	98 01       	movw	r18, r16
    1454:	28 23       	and	r18, r24
    1456:	39 23       	and	r19, r25
    1458:	20 17       	cp	r18, r16
    145a:	31 07       	cpc	r19, r17
    145c:	39 f4       	brne	.+14     	; 0x146c <xEventGroupSync+0x96>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    145e:	a8 01       	movw	r20, r16
    1460:	40 95       	com	r20
    1462:	50 95       	com	r21
    1464:	48 23       	and	r20, r24
    1466:	59 23       	and	r21, r25
    1468:	51 83       	std	Z+1, r21	; 0x01
    146a:	40 83       	st	Z, r20
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
                /* The task unblocked because the bits were set. */
            }

            /* Control bits might be set as the task had blocked should not be
             * returned. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1470:	ec 01       	movw	r28, r24
    1472:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupSync( uxReturn );

        return uxReturn;
    }
    1474:	ce 01       	movw	r24, r28
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	df 90       	pop	r13
    1484:	cf 90       	pop	r12
    1486:	bf 90       	pop	r11
    1488:	af 90       	pop	r10
    148a:	08 95       	ret

                xTicksToWait = 0;
            }
            else
            {
                if( xTicksToWait != ( TickType_t ) 0 )
    148c:	c1 14       	cp	r12, r1
    148e:	d1 04       	cpc	r13, r1
    1490:	51 f0       	breq	.+20     	; 0x14a6 <xEventGroupSync+0xd0>
                    traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

                    /* Store the bits that the calling task is waiting for in the
                     * task's event list item so the kernel knows when a match is
                     * found.  Then enter the blocked state. */
                    vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    1492:	a6 01       	movw	r20, r12
    1494:	b8 01       	movw	r22, r16
    1496:	75 60       	ori	r23, 0x05	; 5
    1498:	c7 01       	movw	r24, r14
    149a:	02 96       	adiw	r24, 0x02	; 2
    149c:	0e 94 09 1b 	call	0x3612	; 0x3612 <vTaskPlaceOnUnorderedEventList>

                    /* This assignment is obsolete as uxReturn will get set after
                     * the task unblocks, but some compilers mistakenly generate a
                     * warning about uxReturn being returned without being set if the
                     * assignment is omitted. */
                    uxReturn = 0;
    14a0:	d0 e0       	ldi	r29, 0x00	; 0
    14a2:	c0 e0       	ldi	r28, 0x00	; 0
    14a4:	c4 cf       	rjmp	.-120    	; 0x142e <xEventGroupSync+0x58>
                }
                else
                {
                    /* The rendezvous bits were not set, but no block time was
                     * specified - just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
    14a6:	f7 01       	movw	r30, r14
    14a8:	c0 81       	ld	r28, Z
    14aa:	d1 81       	ldd	r29, Z+1	; 0x01
    14ac:	c0 cf       	rjmp	.-128    	; 0x142e <xEventGroupSync+0x58>

000014ae <vEventGroupDelete>:
        return pxEventBits->uxEventBits;
    }
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ec 01       	movw	r28, r24

        configASSERT( pxEventBits );

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

        vTaskSuspendAll();
    14b4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	81 11       	cpse	r24, r1
    14bc:	07 c0       	rjmp	.+14     	; 0x14cc <vEventGroupDelete+0x1e>
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
            }
        }
        ( void ) xTaskResumeAll();
    14be:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
    14c2:	ce 01       	movw	r24, r28
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
    14c8:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <vPortFree>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	72 e0       	ldi	r23, 0x02	; 2
    14d0:	8f 81       	ldd	r24, Y+7	; 0x07
    14d2:	98 85       	ldd	r25, Y+8	; 0x08
    14d4:	0e 94 31 1c 	call	0x3862	; 0x3862 <vTaskRemoveFromUnorderedEventList>
    14d8:	ef cf       	rjmp	.-34     	; 0x14b8 <vEventGroupDelete+0xa>

000014da <vEventGroupSetBitsCallback>:
        traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    14da:	ba 01       	movw	r22, r20
    14dc:	0c 94 9e 09 	jmp	0x133c	; 0x133c <xEventGroupSetBits>

000014e0 <vEventGroupClearBitsCallback>:
        traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    14e0:	ba 01       	movw	r22, r20
    14e2:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <xEventGroupClearBits>

000014e6 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	8c 01       	movw	r16, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
    14f0:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
    14f4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <pucAlignedHeap.1975>
    14f8:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <pucAlignedHeap.1975+0x1>
    14fc:	89 2b       	or	r24, r25
    14fe:	31 f4       	brne	.+12     	; 0x150c <pvPortMalloc+0x26>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1500:	83 e5       	ldi	r24, 0x53	; 83
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <pucAlignedHeap.1975+0x1>
    1508:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <pucAlignedHeap.1975>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    150c:	01 15       	cp	r16, r1
    150e:	11 05       	cpc	r17, r1
    1510:	f9 f0       	breq	.+62     	; 0x1550 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1512:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <xNextFreeByte>
    1516:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <xNextFreeByte+0x1>
    151a:	02 0f       	add	r16, r18
    151c:	13 1f       	adc	r17, r19
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    151e:	0b 3d       	cpi	r16, 0xDB	; 219
    1520:	85 e0       	ldi	r24, 0x05	; 5
    1522:	18 07       	cpc	r17, r24
    1524:	a8 f4       	brcc	.+42     	; 0x1550 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1526:	20 17       	cp	r18, r16
    1528:	31 07       	cpc	r19, r17
    152a:	90 f4       	brcc	.+36     	; 0x1550 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
    152c:	c0 91 4f 01 	lds	r28, 0x014F	; 0x80014f <pucAlignedHeap.1975>
    1530:	d0 91 50 01 	lds	r29, 0x0150	; 0x800150 <pucAlignedHeap.1975+0x1>
    1534:	c2 0f       	add	r28, r18
    1536:	d3 1f       	adc	r29, r19
            xNextFreeByte += xWantedSize;
    1538:	10 93 52 01 	sts	0x0152, r17	; 0x800152 <xNextFreeByte+0x1>
    153c:	00 93 51 01 	sts	0x0151, r16	; 0x800151 <xNextFreeByte>
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1540:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
    1544:	ce 01       	movw	r24, r28
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
    1550:	d0 e0       	ldi	r29, 0x00	; 0
    1552:	c0 e0       	ldi	r28, 0x00	; 0
    1554:	f5 cf       	rjmp	.-22     	; 0x1540 <pvPortMalloc+0x5a>

00001556 <vPortFree>:
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
    1556:	08 95       	ret

00001558 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* Only required when static memory is not cleared. */
    xNextFreeByte = ( size_t ) 0;
    1558:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <xNextFreeByte+0x1>
    155c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <xNextFreeByte>
}
    1560:	08 95       	ret

00001562 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    1562:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <xNextFreeByte>
    1566:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <xNextFreeByte+0x1>
}
    156a:	8b ed       	ldi	r24, 0xDB	; 219
    156c:	95 e0       	ldi	r25, 0x05	; 5
    156e:	82 1b       	sub	r24, r18
    1570:	93 0b       	sbc	r25, r19
    1572:	08 95       	ret

00001574 <vPortHeapResetState>:
    1574:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <xNextFreeByte+0x1>
    1578:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <xNextFreeByte>
    157c:	08 95       	ret

0000157e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    157e:	fc 01       	movw	r30, r24
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
    1580:	03 96       	adiw	r24, 0x03	; 3
    1582:	92 83       	std	Z+2, r25	; 0x02
    1584:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1586:	2f ef       	ldi	r18, 0xFF	; 255
    1588:	3f ef       	ldi	r19, 0xFF	; 255
    158a:	34 83       	std	Z+4, r19	; 0x04
    158c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
    158e:	96 83       	std	Z+6, r25	; 0x06
    1590:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
    1592:	90 87       	std	Z+8, r25	; 0x08
    1594:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1596:	10 82       	st	Z, r1
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
    1598:	08 95       	ret

0000159a <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    159a:	fc 01       	movw	r30, r24
    159c:	11 86       	std	Z+9, r1	; 0x09
    159e:	10 86       	std	Z+8, r1	; 0x08
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
    15a0:	08 95       	ret

000015a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	9c 01       	movw	r18, r24
    15a8:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
    15aa:	dc 01       	movw	r26, r24
    15ac:	11 96       	adiw	r26, 0x01	; 1
    15ae:	cd 91       	ld	r28, X+
    15b0:	dc 91       	ld	r29, X
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    15b2:	d3 83       	std	Z+3, r29	; 0x03
    15b4:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	95 83       	std	Z+5, r25	; 0x05
    15bc:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	dc 01       	movw	r26, r24
    15c4:	13 96       	adiw	r26, 0x03	; 3
    15c6:	7c 93       	st	X, r23
    15c8:	6e 93       	st	-X, r22
    15ca:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    15cc:	7d 83       	std	Y+5, r23	; 0x05
    15ce:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    15d0:	31 87       	std	Z+9, r19	; 0x09
    15d2:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
    15d4:	f9 01       	movw	r30, r18
    15d6:	80 81       	ld	r24, Z
    15d8:	8f 5f       	subi	r24, 0xFF	; 255
    15da:	80 83       	st	Z, r24

    traceRETURN_vListInsertEnd();
}
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	08 95       	ret

000015e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	8c 01       	movw	r16, r24
    15ec:	fb 01       	movw	r30, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    15ee:	80 81       	ld	r24, Z
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    15f2:	d8 01       	movw	r26, r16
    15f4:	13 96       	adiw	r26, 0x03	; 3
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    15f6:	8f 3f       	cpi	r24, 0xFF	; 255
    15f8:	98 07       	cpc	r25, r24
    15fa:	f1 f4       	brne	.+60     	; 0x1638 <vListInsert+0x56>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    15fc:	e8 01       	movw	r28, r16
    15fe:	af 81       	ldd	r26, Y+7	; 0x07
    1600:	b8 85       	ldd	r27, Y+8	; 0x08
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1602:	12 96       	adiw	r26, 0x02	; 2
    1604:	8d 91       	ld	r24, X+
    1606:	9c 91       	ld	r25, X
    1608:	13 97       	sbiw	r26, 0x03	; 3
    160a:	93 83       	std	Z+3, r25	; 0x03
    160c:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    160e:	ec 01       	movw	r28, r24
    1610:	fd 83       	std	Y+5, r31	; 0x05
    1612:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1614:	b5 83       	std	Z+5, r27	; 0x05
    1616:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    1618:	13 96       	adiw	r26, 0x03	; 3
    161a:	fc 93       	st	X, r31
    161c:	ee 93       	st	-X, r30
    161e:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1620:	11 87       	std	Z+9, r17	; 0x09
    1622:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
    1624:	f8 01       	movw	r30, r16
    1626:	80 81       	ld	r24, Z
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	80 83       	st	Z, r24

    traceRETURN_vListInsert();
}
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	08 95       	ret
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1636:	d9 01       	movw	r26, r18
    1638:	12 96       	adiw	r26, 0x02	; 2
    163a:	2d 91       	ld	r18, X+
    163c:	3c 91       	ld	r19, X
    163e:	13 97       	sbiw	r26, 0x03	; 3
    1640:	e9 01       	movw	r28, r18
    1642:	48 81       	ld	r20, Y
    1644:	59 81       	ldd	r21, Y+1	; 0x01
    1646:	84 17       	cp	r24, r20
    1648:	95 07       	cpc	r25, r21
    164a:	a8 f7       	brcc	.-22     	; 0x1636 <vListInsert+0x54>
    164c:	da cf       	rjmp	.-76     	; 0x1602 <vListInsert+0x20>

0000164e <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	fc 01       	movw	r30, r24
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1654:	a0 85       	ldd	r26, Z+8	; 0x08
    1656:	b1 85       	ldd	r27, Z+9	; 0x09

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	24 81       	ldd	r18, Z+4	; 0x04
    165e:	35 81       	ldd	r19, Z+5	; 0x05
    1660:	ec 01       	movw	r28, r24
    1662:	3d 83       	std	Y+5, r19	; 0x05
    1664:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1666:	c4 81       	ldd	r28, Z+4	; 0x04
    1668:	d5 81       	ldd	r29, Z+5	; 0x05
    166a:	9b 83       	std	Y+3, r25	; 0x03
    166c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    166e:	11 96       	adiw	r26, 0x01	; 1
    1670:	8d 91       	ld	r24, X+
    1672:	9c 91       	ld	r25, X
    1674:	12 97       	sbiw	r26, 0x02	; 2
    1676:	8e 17       	cp	r24, r30
    1678:	9f 07       	cpc	r25, r31
    167a:	21 f4       	brne	.+8      	; 0x1684 <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    167c:	12 96       	adiw	r26, 0x02	; 2
    167e:	dc 93       	st	X, r29
    1680:	ce 93       	st	-X, r28
    1682:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1684:	11 86       	std	Z+9, r1	; 0x09
    1686:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
    1688:	8c 91       	ld	r24, X
    168a:	81 50       	subi	r24, 0x01	; 1
    168c:	8c 93       	st	X, r24

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <pxPortInitialiseStack>:
    uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
     * This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    1694:	31 e1       	ldi	r19, 0x11	; 17
    1696:	fc 01       	movw	r30, r24
    1698:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    169a:	31 97       	sbiw	r30, 0x01	; 1
    169c:	22 e2       	ldi	r18, 0x22	; 34
    169e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    16a0:	31 97       	sbiw	r30, 0x01	; 1
    16a2:	a3 e3       	ldi	r26, 0x33	; 51
    16a4:	a0 83       	st	Z, r26
    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
     * it on first. */
    usAddress = ( uint16_t ) pxCode;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    16a6:	31 97       	sbiw	r30, 0x01	; 1
    16a8:	60 83       	st	Z, r22
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    16aa:	31 97       	sbiw	r30, 0x01	; 1
    16ac:	70 83       	st	Z, r23

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
     *  portSAVE_CONTEXT places the flags on the stack immediately after r0
     *  to ensure the interrupts get disabled as soon as possible, and so ensuring
     *  the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R0 */
    16ae:	31 97       	sbiw	r30, 0x01	; 1
    16b0:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    16b2:	31 97       	sbiw	r30, 0x01	; 1
    16b4:	60 e8       	ldi	r22, 0x80	; 128
    16b6:	60 83       	st	Z, r22
    pxTopOfStack--;


    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R1 */
    16b8:	31 97       	sbiw	r30, 0x01	; 1
    16ba:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02; /* R2 */
    16bc:	31 97       	sbiw	r30, 0x01	; 1
    16be:	62 e0       	ldi	r22, 0x02	; 2
    16c0:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03; /* R3 */
    16c2:	31 97       	sbiw	r30, 0x01	; 1
    16c4:	63 e0       	ldi	r22, 0x03	; 3
    16c6:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04; /* R4 */
    16c8:	31 97       	sbiw	r30, 0x01	; 1
    16ca:	64 e0       	ldi	r22, 0x04	; 4
    16cc:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05; /* R5 */
    16ce:	31 97       	sbiw	r30, 0x01	; 1
    16d0:	65 e0       	ldi	r22, 0x05	; 5
    16d2:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06; /* R6 */
    16d4:	31 97       	sbiw	r30, 0x01	; 1
    16d6:	66 e0       	ldi	r22, 0x06	; 6
    16d8:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07; /* R7 */
    16da:	31 97       	sbiw	r30, 0x01	; 1
    16dc:	67 e0       	ldi	r22, 0x07	; 7
    16de:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08; /* R8 */
    16e0:	31 97       	sbiw	r30, 0x01	; 1
    16e2:	68 e0       	ldi	r22, 0x08	; 8
    16e4:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09; /* R9 */
    16e6:	31 97       	sbiw	r30, 0x01	; 1
    16e8:	69 e0       	ldi	r22, 0x09	; 9
    16ea:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10; /* R10 */
    16ec:	31 97       	sbiw	r30, 0x01	; 1
    16ee:	60 e1       	ldi	r22, 0x10	; 16
    16f0:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11; /* R11 */
    16f2:	31 97       	sbiw	r30, 0x01	; 1
    16f4:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12; /* R12 */
    16f6:	31 97       	sbiw	r30, 0x01	; 1
    16f8:	32 e1       	ldi	r19, 0x12	; 18
    16fa:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13; /* R13 */
    16fc:	31 97       	sbiw	r30, 0x01	; 1
    16fe:	33 e1       	ldi	r19, 0x13	; 19
    1700:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14; /* R14 */
    1702:	31 97       	sbiw	r30, 0x01	; 1
    1704:	34 e1       	ldi	r19, 0x14	; 20
    1706:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15; /* R15 */
    1708:	31 97       	sbiw	r30, 0x01	; 1
    170a:	35 e1       	ldi	r19, 0x15	; 21
    170c:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16; /* R16 */
    170e:	31 97       	sbiw	r30, 0x01	; 1
    1710:	36 e1       	ldi	r19, 0x16	; 22
    1712:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17; /* R17 */
    1714:	31 97       	sbiw	r30, 0x01	; 1
    1716:	37 e1       	ldi	r19, 0x17	; 23
    1718:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18; /* R18 */
    171a:	31 97       	sbiw	r30, 0x01	; 1
    171c:	38 e1       	ldi	r19, 0x18	; 24
    171e:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19; /* R19 */
    1720:	31 97       	sbiw	r30, 0x01	; 1
    1722:	39 e1       	ldi	r19, 0x19	; 25
    1724:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20; /* R20 */
    1726:	31 97       	sbiw	r30, 0x01	; 1
    1728:	30 e2       	ldi	r19, 0x20	; 32
    172a:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21; /* R21 */
    172c:	31 97       	sbiw	r30, 0x01	; 1
    172e:	31 e2       	ldi	r19, 0x21	; 33
    1730:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22; /* R22 */
    1732:	31 97       	sbiw	r30, 0x01	; 1
    1734:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23; /* R23 */
    1736:	31 97       	sbiw	r30, 0x01	; 1
    1738:	23 e2       	ldi	r18, 0x23	; 35
    173a:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    173c:	31 97       	sbiw	r30, 0x01	; 1
    173e:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1740:	31 97       	sbiw	r30, 0x01	; 1
    1742:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;  /* R26 X */
    1744:	31 97       	sbiw	r30, 0x01	; 1
    1746:	26 e2       	ldi	r18, 0x26	; 38
    1748:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;  /* R27 */
    174a:	31 97       	sbiw	r30, 0x01	; 1
    174c:	27 e2       	ldi	r18, 0x27	; 39
    174e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;  /* R28 Y */
    1750:	31 97       	sbiw	r30, 0x01	; 1
    1752:	28 e2       	ldi	r18, 0x28	; 40
    1754:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;  /* R29 */
    1756:	31 97       	sbiw	r30, 0x01	; 1
    1758:	29 e2       	ldi	r18, 0x29	; 41
    175a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;  /* R30 Z */
    175c:	31 97       	sbiw	r30, 0x01	; 1
    175e:	20 e3       	ldi	r18, 0x30	; 48
    1760:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x031; /* R31 */
    1762:	31 97       	sbiw	r30, 0x01	; 1
    1764:	21 e3       	ldi	r18, 0x31	; 49
    1766:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    1768:	86 97       	sbiw	r24, 0x26	; 38
    176a:	08 95       	ret

0000176c <xPortStartScheduler>:
    /* Setup compare match value for compare match A.  Interrupts are disabled
     * before this is called so we need not worry here. */
    ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    ulCompareMatch >>= 8;
    ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    OCR1AH = ucHighByte;
    176c:	1b bc       	out	0x2b, r1	; 43
    OCR1AL = ucLowByte;
    176e:	8c e7       	ldi	r24, 0x7C	; 124
    1770:	8a bd       	out	0x2a, r24	; 42

    /* Setup clock source and compare match behaviour. */
    ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    TCCR1B = ucLowByte;
    1772:	8b e0       	ldi	r24, 0x0B	; 11
    1774:	8e bd       	out	0x2e, r24	; 46

    /* Enable the interrupt - this is okay as interrupt are currently globally
     * disabled. */
    ucLowByte = TIMSK;
    1776:	89 b7       	in	r24, 0x39	; 57
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1778:	80 61       	ori	r24, 0x10	; 16
    TIMSK = ucLowByte;
    177a:	89 bf       	out	0x39, r24	; 57
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    177c:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    1780:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    1784:	cd 91       	ld	r28, X+
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	dd 91       	ld	r29, X+
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	ff 91       	pop	r31
    178e:	ef 91       	pop	r30
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	bf 91       	pop	r27
    1796:	af 91       	pop	r26
    1798:	9f 91       	pop	r25
    179a:	8f 91       	pop	r24
    179c:	7f 91       	pop	r23
    179e:	6f 91       	pop	r22
    17a0:	5f 91       	pop	r21
    17a2:	4f 91       	pop	r20
    17a4:	3f 91       	pop	r19
    17a6:	2f 91       	pop	r18
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	7f 90       	pop	r7
    17be:	6f 90       	pop	r6
    17c0:	5f 90       	pop	r5
    17c2:	4f 90       	pop	r4
    17c4:	3f 90       	pop	r3
    17c6:	2f 90       	pop	r2
    17c8:	1f 90       	pop	r1
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
     * jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    17d0:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	08 95       	ret

000017d6 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
     * disable the tick interrupt here. */
}
    17d6:	08 95       	ret

000017d8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	0f 92       	push	r0
    17e0:	1f 92       	push	r1
    17e2:	11 24       	eor	r1, r1
    17e4:	2f 92       	push	r2
    17e6:	3f 92       	push	r3
    17e8:	4f 92       	push	r4
    17ea:	5f 92       	push	r5
    17ec:	6f 92       	push	r6
    17ee:	7f 92       	push	r7
    17f0:	8f 92       	push	r8
    17f2:	9f 92       	push	r9
    17f4:	af 92       	push	r10
    17f6:	bf 92       	push	r11
    17f8:	cf 92       	push	r12
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	2f 93       	push	r18
    1806:	3f 93       	push	r19
    1808:	4f 93       	push	r20
    180a:	5f 93       	push	r21
    180c:	6f 93       	push	r22
    180e:	7f 93       	push	r23
    1810:	8f 93       	push	r24
    1812:	9f 93       	push	r25
    1814:	af 93       	push	r26
    1816:	bf 93       	push	r27
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
    1820:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    1824:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    1828:	0d b6       	in	r0, 0x3d	; 61
    182a:	0d 92       	st	X+, r0
    182c:	0e b6       	in	r0, 0x3e	; 62
    182e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1830:	0e 94 b3 1a 	call	0x3566	; 0x3566 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1834:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    1838:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    183c:	cd 91       	ld	r28, X+
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	dd 91       	ld	r29, X+
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	ff 91       	pop	r31
    1846:	ef 91       	pop	r30
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	bf 91       	pop	r27
    184e:	af 91       	pop	r26
    1850:	9f 91       	pop	r25
    1852:	8f 91       	pop	r24
    1854:	7f 91       	pop	r23
    1856:	6f 91       	pop	r22
    1858:	5f 91       	pop	r21
    185a:	4f 91       	pop	r20
    185c:	3f 91       	pop	r19
    185e:	2f 91       	pop	r18
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	bf 90       	pop	r11
    186e:	af 90       	pop	r10
    1870:	9f 90       	pop	r9
    1872:	8f 90       	pop	r8
    1874:	7f 90       	pop	r7
    1876:	6f 90       	pop	r6
    1878:	5f 90       	pop	r5
    187a:	4f 90       	pop	r4
    187c:	3f 90       	pop	r3
    187e:	2f 90       	pop	r2
    1880:	1f 90       	pop	r1
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1888:	08 95       	ret

0000188a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__( ( naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    188a:	0f 92       	push	r0
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	0f 92       	push	r0
    1892:	1f 92       	push	r1
    1894:	11 24       	eor	r1, r1
    1896:	2f 92       	push	r2
    1898:	3f 92       	push	r3
    189a:	4f 92       	push	r4
    189c:	5f 92       	push	r5
    189e:	6f 92       	push	r6
    18a0:	7f 92       	push	r7
    18a2:	8f 92       	push	r8
    18a4:	9f 92       	push	r9
    18a6:	af 92       	push	r10
    18a8:	bf 92       	push	r11
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	2f 93       	push	r18
    18b8:	3f 93       	push	r19
    18ba:	4f 93       	push	r20
    18bc:	5f 93       	push	r21
    18be:	6f 93       	push	r22
    18c0:	7f 93       	push	r23
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	af 93       	push	r26
    18c8:	bf 93       	push	r27
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
    18d2:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    18d6:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    18da:	0d b6       	in	r0, 0x3d	; 61
    18dc:	0d 92       	st	X+, r0
    18de:	0e b6       	in	r0, 0x3e	; 62
    18e0:	0d 92       	st	X+, r0

    if( xTaskIncrementTick() != pdFALSE )
    18e2:	0e 94 8c 18 	call	0x3118	; 0x3118 <xTaskIncrementTick>
    18e6:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    18e8:	0e 94 b3 1a 	call	0x3566	; 0x3566 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    18ec:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    18f0:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    18f4:	cd 91       	ld	r28, X+
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	dd 91       	ld	r29, X+
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	df 90       	pop	r13
    1922:	cf 90       	pop	r12
    1924:	bf 90       	pop	r11
    1926:	af 90       	pop	r10
    1928:	9f 90       	pop	r9
    192a:	8f 90       	pop	r8
    192c:	7f 90       	pop	r7
    192e:	6f 90       	pop	r6
    1930:	5f 90       	pop	r5
    1932:	4f 90       	pop	r4
    1934:	3f 90       	pop	r3
    1936:	2f 90       	pop	r2
    1938:	1f 90       	pop	r1
    193a:	0f 90       	pop	r0
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1940:	08 95       	ret

00001942 <__vector_7>:
 * count is incremented after the context is saved.
 */
    void TIMER1_COMPA_vect( void ) __attribute__( ( signal, naked ) );
    void TIMER1_COMPA_vect( void )
    {
        vPortYieldFromTick();
    1942:	0e 94 45 0c 	call	0x188a	; 0x188a <vPortYieldFromTick>
        asm volatile ( "reti" );
    1946:	18 95       	reti

00001948 <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    194e:	fc 01       	movw	r30, r24
    1950:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    1952:	0f 90       	pop	r0
    1954:	0f be       	out	0x3f, r0	; 63
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	91 11       	cpse	r25, r1
    195a:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    taskEXIT_CRITICAL();

    return xReturn;
}
    195c:	08 95       	ret

0000195e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	ec 01       	movw	r28, r24
    1968:	04 2f       	mov	r16, r20
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    196a:	1a 8d       	ldd	r17, Y+26	; 0x1a

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    196c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    196e:	44 23       	and	r20, r20
    1970:	c1 f0       	breq	.+48     	; 0x19a2 <prvCopyDataToQueue+0x44>
    1972:	50 e0       	ldi	r21, 0x00	; 0
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
    1974:	01 11       	cpse	r16, r1
    1976:	1d c0       	rjmp	.+58     	; 0x19b2 <prvCopyDataToQueue+0x54>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1980:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1982:	2a 81       	ldd	r18, Y+2	; 0x02
    1984:	3b 81       	ldd	r19, Y+3	; 0x03
    1986:	82 0f       	add	r24, r18
    1988:	93 2f       	mov	r25, r19
    198a:	91 1d       	adc	r25, r1
    198c:	9b 83       	std	Y+3, r25	; 0x03
    198e:	8a 83       	std	Y+2, r24	; 0x02

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
    1990:	2c 81       	ldd	r18, Y+4	; 0x04
    1992:	3d 81       	ldd	r19, Y+5	; 0x05
    1994:	82 17       	cp	r24, r18
    1996:	93 07       	cpc	r25, r19
    1998:	20 f0       	brcs	.+8      	; 0x19a2 <prvCopyDataToQueue+0x44>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
    199a:	88 81       	ld	r24, Y
    199c:	99 81       	ldd	r25, Y+1	; 0x01
    199e:	9b 83       	std	Y+3, r25	; 0x03
    19a0:	8a 83       	std	Y+2, r24	; 0x02
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    19a2:	1f 5f       	subi	r17, 0xFF	; 255
    19a4:	1a 8f       	std	Y+26, r17	; 0x1a

    return xReturn;
}
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	08 95       	ret
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    19b2:	8e 81       	ldd	r24, Y+6	; 0x06
    19b4:	9f 81       	ldd	r25, Y+7	; 0x07
    19b6:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    19ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	91 95       	neg	r25
    19c0:	81 95       	neg	r24
    19c2:	91 09       	sbc	r25, r1
    19c4:	2e 81       	ldd	r18, Y+6	; 0x06
    19c6:	3f 81       	ldd	r19, Y+7	; 0x07
    19c8:	28 0f       	add	r18, r24
    19ca:	39 1f       	adc	r19, r25
    19cc:	3f 83       	std	Y+7, r19	; 0x07
    19ce:	2e 83       	std	Y+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
    19d0:	48 81       	ld	r20, Y
    19d2:	59 81       	ldd	r21, Y+1	; 0x01
    19d4:	24 17       	cp	r18, r20
    19d6:	35 07       	cpc	r19, r21
    19d8:	30 f4       	brcc	.+12     	; 0x19e6 <prvCopyDataToQueue+0x88>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    19da:	2c 81       	ldd	r18, Y+4	; 0x04
    19dc:	3d 81       	ldd	r19, Y+5	; 0x05
    19de:	82 0f       	add	r24, r18
    19e0:	93 1f       	adc	r25, r19
    19e2:	9f 83       	std	Y+7, r25	; 0x07
    19e4:	8e 83       	std	Y+6, r24	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
    19e6:	02 30       	cpi	r16, 0x02	; 2
    19e8:	e1 f6       	brne	.-72     	; 0x19a2 <prvCopyDataToQueue+0x44>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    19ea:	11 23       	and	r17, r17
    19ec:	d1 f2       	breq	.-76     	; 0x19a2 <prvCopyDataToQueue+0x44>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
    19ee:	11 50       	subi	r17, 0x01	; 1
    19f0:	d8 cf       	rjmp	.-80     	; 0x19a2 <prvCopyDataToQueue+0x44>

000019f2 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    19f2:	fc 01       	movw	r30, r24
    19f4:	cb 01       	movw	r24, r22
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    19f6:	44 8d       	ldd	r20, Z+28	; 0x1c
    19f8:	44 23       	and	r20, r20
    19fa:	a1 f0       	breq	.+40     	; 0x1a24 <prvCopyDataFromQueue+0x32>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	26 81       	ldd	r18, Z+6	; 0x06
    1a00:	37 81       	ldd	r19, Z+7	; 0x07
    1a02:	24 0f       	add	r18, r20
    1a04:	35 1f       	adc	r19, r21
    1a06:	37 83       	std	Z+7, r19	; 0x07
    1a08:	26 83       	std	Z+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    1a0a:	64 81       	ldd	r22, Z+4	; 0x04
    1a0c:	75 81       	ldd	r23, Z+5	; 0x05
    1a0e:	26 17       	cp	r18, r22
    1a10:	37 07       	cpc	r19, r23
    1a12:	20 f0       	brcs	.+8      	; 0x1a1c <prvCopyDataFromQueue+0x2a>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    1a14:	20 81       	ld	r18, Z
    1a16:	31 81       	ldd	r19, Z+1	; 0x01
    1a18:	37 83       	std	Z+7, r19	; 0x07
    1a1a:	26 83       	std	Z+6, r18	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
    1a1c:	66 81       	ldd	r22, Z+6	; 0x06
    1a1e:	77 81       	ldd	r23, Z+7	; 0x07
    1a20:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <memcpy>
    }
}
    1a24:	08 95       	ret

00001a26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	ec 01       	movw	r28, r24

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	0f 92       	push	r0
    {
        int8_t cTxLock = pxQueue->cTxLock;
    1a38:	1e 8d       	ldd	r17, Y+30	; 0x1e
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a3a:	7c 01       	movw	r14, r24
    1a3c:	81 e1       	ldi	r24, 0x11	; 17
    1a3e:	e8 0e       	add	r14, r24
    1a40:	f1 1c       	adc	r15, r1
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
    1a42:	11 16       	cp	r1, r17
    1a44:	c4 f0       	brlt	.+48     	; 0x1a76 <prvUnlockQueue+0x50>
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
        }

        pxQueue->cTxLock = queueUNLOCKED;
    1a46:	8f ef       	ldi	r24, 0xFF	; 255
    1a48:	8e 8f       	std	Y+30, r24	; 0x1e
    }
    taskEXIT_CRITICAL();
    1a4a:	0f 90       	pop	r0
    1a4c:	0f be       	out	0x3f, r0	; 63

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	0f 92       	push	r0
    {
        int8_t cRxLock = pxQueue->cRxLock;
    1a54:	1d 8d       	ldd	r17, Y+29	; 0x1d

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1a56:	7e 01       	movw	r14, r28
    1a58:	88 e0       	ldi	r24, 0x08	; 8
    1a5a:	e8 0e       	add	r14, r24
    1a5c:	f1 1c       	adc	r15, r1
    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
    1a5e:	11 16       	cp	r1, r17
    1a60:	ac f0       	brlt	.+42     	; 0x1a8c <prvUnlockQueue+0x66>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	8d 8f       	std	Y+29, r24	; 0x1d
    }
    taskEXIT_CRITICAL();
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	08 95       	ret
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a76:	89 89       	ldd	r24, Y+17	; 0x11
    1a78:	88 23       	and	r24, r24
    1a7a:	29 f3       	breq	.-54     	; 0x1a46 <prvUnlockQueue+0x20>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    1a82:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
    1a84:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <vTaskMissedYield>
    1a88:	11 50       	subi	r17, 0x01	; 1
    1a8a:	db cf       	rjmp	.-74     	; 0x1a42 <prvUnlockQueue+0x1c>
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a8c:	88 85       	ldd	r24, Y+8	; 0x08
    1a8e:	88 23       	and	r24, r24
    1a90:	41 f3       	breq	.-48     	; 0x1a62 <prvUnlockQueue+0x3c>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1a92:	c7 01       	movw	r24, r14
    1a94:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    1a98:	81 11       	cpse	r24, r1
                {
                    vTaskMissedYield();
    1a9a:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <vTaskMissedYield>
    1a9e:	11 50       	subi	r17, 0x01	; 1
    1aa0:	de cf       	rjmp	.-68     	; 0x1a5e <prvUnlockQueue+0x38>

00001aa2 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <xQueueGenericReset+0xa>
    1aaa:	3f c0       	rjmp	.+126    	; 0x1b2a <xQueueGenericReset+0x88>
        ( pxQueue->uxLength >= 1U ) &&
    1aac:	fc 01       	movw	r30, r24
    1aae:	23 8d       	ldd	r18, Z+27	; 0x1b

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    1ab0:	22 23       	and	r18, r18
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <xQueueGenericReset+0x14>
    1ab4:	3a c0       	rjmp	.+116    	; 0x1b2a <xQueueGenericReset+0x88>
    1ab6:	ec 01       	movw	r28, r24
        ( pxQueue->uxLength >= 1U ) &&
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    1ab8:	44 8d       	ldd	r20, Z+28	; 0x1c
    {
        taskENTER_CRITICAL();
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	0f 92       	push	r0
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	24 9f       	mul	r18, r20
    1ac8:	e0 0d       	add	r30, r0
    1aca:	f1 1d       	adc	r31, r1
    1acc:	11 24       	eor	r1, r1
    1ace:	fd 83       	std	Y+5, r31	; 0x05
    1ad0:	ec 83       	std	Y+4, r30	; 0x04
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1ad2:	1a 8e       	std	Y+26, r1	; 0x1a
            pxQueue->pcWriteTo = pxQueue->pcHead;
    1ad4:	9b 83       	std	Y+3, r25	; 0x03
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
    1ad8:	21 50       	subi	r18, 0x01	; 1
    1ada:	33 0b       	sbc	r19, r19
    1adc:	42 9f       	mul	r20, r18
    1ade:	f0 01       	movw	r30, r0
    1ae0:	43 9f       	mul	r20, r19
    1ae2:	f0 0d       	add	r31, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	8e 0f       	add	r24, r30
    1ae8:	9f 1f       	adc	r25, r31
    1aea:	9f 83       	std	Y+7, r25	; 0x07
    1aec:	8e 83       	std	Y+6, r24	; 0x06
            pxQueue->cRxLock = queueUNLOCKED;
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	8d 8f       	std	Y+29, r24	; 0x1d
            pxQueue->cTxLock = queueUNLOCKED;
    1af2:	8e 8f       	std	Y+30, r24	; 0x1e

            if( xNewQueue == pdFALSE )
    1af4:	61 11       	cpse	r22, r1
    1af6:	10 c0       	rjmp	.+32     	; 0x1b18 <xQueueGenericReset+0x76>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1af8:	88 85       	ldd	r24, Y+8	; 0x08
    1afa:	88 23       	and	r24, r24
    1afc:	39 f0       	breq	.+14     	; 0x1b0c <xQueueGenericReset+0x6a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1afe:	ce 01       	movw	r24, r28
    1b00:	08 96       	adiw	r24, 0x08	; 8
    1b02:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    1b06:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1b08:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
            }
        }
        taskEXIT_CRITICAL();
    1b0c:	0f 90       	pop	r0
    1b0e:	0f be       	out	0x3f, r0	; 63
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    BaseType_t xReturn = pdPASS;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
}
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1b18:	ce 01       	movw	r24, r28
    1b1a:	08 96       	adiw	r24, 0x08	; 8
    1b1c:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1b20:	ce 01       	movw	r24, r28
    1b22:	41 96       	adiw	r24, 0x11	; 17
    1b24:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
    1b28:	f1 cf       	rjmp	.-30     	; 0x1b0c <xQueueGenericReset+0x6a>
        }
        taskEXIT_CRITICAL();
    }
    else
    {
        xReturn = pdFAIL;
    1b2a:	80 e0       	ldi	r24, 0x00	; 0

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
    1b2c:	f2 cf       	rjmp	.-28     	; 0x1b12 <xQueueGenericReset+0x70>

00001b2e <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    1b36:	81 11       	cpse	r24, r1
    1b38:	08 c0       	rjmp	.+16     	; 0x1b4a <xQueueGenericCreate+0x1c>

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
        Queue_t * pxNewQueue = NULL;
    1b3a:	d0 e0       	ldi	r29, 0x00	; 0
    1b3c:	c0 e0       	ldi	r28, 0x00	; 0
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    }
    1b3e:	ce 01       	movw	r24, r28
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	08 95       	ret

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
    1b4a:	86 9f       	mul	r24, r22
    1b4c:	90 01       	movw	r18, r0
    1b4e:	11 24       	eor	r1, r1

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    1b50:	21 3e       	cpi	r18, 0xE1	; 225
    1b52:	31 05       	cpc	r19, r1
    1b54:	94 f7       	brge	.-28     	; 0x1b3a <xQueueGenericCreate+0xc>
    1b56:	16 2f       	mov	r17, r22
    1b58:	08 2f       	mov	r16, r24
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1b5a:	c9 01       	movw	r24, r18
    1b5c:	4f 96       	adiw	r24, 0x1f	; 31
    1b5e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <pvPortMalloc>
    1b62:	ec 01       	movw	r28, r24

            if( pxNewQueue != NULL )
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	49 f3       	breq	.-46     	; 0x1b3a <xQueueGenericCreate+0xc>
{
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
    1b68:	11 11       	cpse	r17, r1
    1b6a:	09 c0       	rjmp	.+18     	; 0x1b7e <xQueueGenericCreate+0x50>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1b6c:	99 83       	std	Y+1, r25	; 0x01
    1b6e:	88 83       	st	Y, r24
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
    1b70:	0b 8f       	std	Y+27, r16	; 0x1b
    pxNewQueue->uxItemSize = uxItemSize;
    1b72:	1c 8f       	std	Y+28, r17	; 0x1c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	ce 01       	movw	r24, r28
    1b78:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <xQueueGenericReset>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    1b7c:	e0 cf       	rjmp	.-64     	; 0x1b3e <xQueueGenericCreate+0x10>
            if( pxNewQueue != NULL )
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
                pucQueueStorage += sizeof( Queue_t );
    1b7e:	4f 96       	adiw	r24, 0x1f	; 31
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1b80:	99 83       	std	Y+1, r25	; 0x01
    1b82:	88 83       	st	Y, r24
    1b84:	f5 cf       	rjmp	.-22     	; 0x1b70 <xQueueGenericCreate+0x42>

00001b86 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
    1b86:	af 92       	push	r10
    1b88:	bf 92       	push	r11
    1b8a:	cf 92       	push	r12
    1b8c:	df 92       	push	r13
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <xQueueGenericSend+0x14>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <xQueueGenericSend+0x16>
    1b9c:	1f 92       	push	r1
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	8c 01       	movw	r16, r24
    1ba4:	6b 01       	movw	r12, r22
    1ba6:	5d 83       	std	Y+5, r21	; 0x05
    1ba8:	4c 83       	std	Y+4, r20	; 0x04
    1baa:	f2 2e       	mov	r15, r18
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1bac:	80 e0       	ldi	r24, 0x00	; 0
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1bae:	58 01       	movw	r10, r16
    1bb0:	98 e0       	ldi	r25, 0x08	; 8
    1bb2:	a9 0e       	add	r10, r25
    1bb4:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	0f 92       	push	r0
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	22 8d       	ldd	r18, Z+26	; 0x1a
    1bc0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1bc2:	29 17       	cp	r18, r25
    1bc4:	18 f0       	brcs	.+6      	; 0x1bcc <xQueueGenericSend+0x46>
    1bc6:	f2 e0       	ldi	r31, 0x02	; 2
    1bc8:	ff 12       	cpse	r15, r31
    1bca:	22 c0       	rjmp	.+68     	; 0x1c10 <xQueueGenericSend+0x8a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1bcc:	4f 2d       	mov	r20, r15
    1bce:	b6 01       	movw	r22, r12
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	0e 94 af 0c 	call	0x195e	; 0x195e <prvCopyDataToQueue>

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	91 89       	ldd	r25, Z+17	; 0x11
    1bda:	99 23       	and	r25, r25
    1bdc:	21 f0       	breq	.+8      	; 0x1be6 <xQueueGenericSend+0x60>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1bde:	c8 01       	movw	r24, r16
    1be0:	41 96       	adiw	r24, 0x11	; 17
    1be2:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    1be6:	81 11       	cpse	r24, r1
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
    1be8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    1bec:	0f 90       	pop	r0
    1bee:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
        }
    }
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	df 90       	pop	r13
    1c08:	cf 90       	pop	r12
    1c0a:	bf 90       	pop	r11
    1c0c:	af 90       	pop	r10
    1c0e:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1c10:	2c 81       	ldd	r18, Y+4	; 0x04
    1c12:	3d 81       	ldd	r19, Y+5	; 0x05
    1c14:	23 2b       	or	r18, r19
    1c16:	21 f4       	brne	.+8      	; 0x1c20 <xQueueGenericSend+0x9a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
            ( void ) xTaskResumeAll();

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	e9 cf       	rjmp	.-46     	; 0x1bf2 <xQueueGenericSend+0x6c>
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
                }
                else if( xEntryTimeSet == pdFALSE )
    1c20:	81 11       	cpse	r24, r1
    1c22:	04 c0       	rjmp	.+8      	; 0x1c2c <xQueueGenericSend+0xa6>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	0e 94 c8 1c 	call	0x3990	; 0x3990 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1c2c:	0f 90       	pop	r0
    1c2e:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1c30:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	0f 92       	push	r0
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <xQueueGenericSend+0xbe>
    1c42:	15 8e       	std	Z+29, r1	; 0x1d
    1c44:	f8 01       	movw	r30, r16
    1c46:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c48:	8f 3f       	cpi	r24, 0xFF	; 255
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <xQueueGenericSend+0xc8>
    1c4c:	16 8e       	std	Z+30, r1	; 0x1e
    1c4e:	0f 90       	pop	r0
    1c50:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c52:	be 01       	movw	r22, r28
    1c54:	6c 5f       	subi	r22, 0xFC	; 252
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	ce 01       	movw	r24, r28
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <xTaskCheckForTimeOut>
    1c60:	81 11       	cpse	r24, r1
    1c62:	20 c0       	rjmp	.+64     	; 0x1ca4 <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
        prvLockQueue( pxQueue );

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1c72:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c74:	98 13       	cpse	r25, r24
    1c76:	10 c0       	rjmp	.+32     	; 0x1c98 <xQueueGenericSend+0x112>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1c78:	6c 81       	ldd	r22, Y+4	; 0x04
    1c7a:	7d 81       	ldd	r23, Y+5	; 0x05
    1c7c:	c5 01       	movw	r24, r10
    1c7e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    1c82:	c8 01       	movw	r24, r16
    1c84:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    1c88:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <xQueueGenericSend+0x10e>
                {
                    taskYIELD_WITHIN_API();
    1c90:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	8f cf       	rjmp	.-226    	; 0x1bb6 <xQueueGenericSend+0x30>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    1c98:	c8 01       	movw	r24, r16
    1c9a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1c9e:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    1ca2:	f8 cf       	rjmp	.-16     	; 0x1c94 <xQueueGenericSend+0x10e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    1caa:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    1cae:	b6 cf       	rjmp	.-148    	; 0x1c1c <xQueueGenericSend+0x96>

00001cb0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1cbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc0:	98 17       	cp	r25, r24
    1cc2:	18 f0       	brcs	.+6      	; 0x1cca <xQueueGenericSendFromISR+0x1a>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	d1 f4       	brne	.+52     	; 0x1cfe <xQueueGenericSendFromISR+0x4e>
    1cca:	7a 01       	movw	r14, r20
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    1ccc:	1e 8d       	ldd	r17, Y+30	; 0x1e
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    1cce:	8a 8d       	ldd	r24, Y+26	; 0x1a
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1cd0:	42 2f       	mov	r20, r18
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	0e 94 af 0c 	call	0x195e	; 0x195e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    1cd8:	1f 3f       	cpi	r17, 0xFF	; 255
    1cda:	b9 f4       	brne	.+46     	; 0x1d0a <xQueueGenericSendFromISR+0x5a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1cdc:	89 89       	ldd	r24, Y+17	; 0x11
    1cde:	81 11       	cpse	r24, r1
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <xQueueGenericSendFromISR+0x36>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	0c c0       	rjmp	.+24     	; 0x1cfe <xQueueGenericSendFromISR+0x4e>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	41 96       	adiw	r24, 0x11	; 17
    1cea:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    1cee:	88 23       	and	r24, r24
    1cf0:	c1 f3       	breq	.-16     	; 0x1ce2 <xQueueGenericSendFromISR+0x32>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    1cf2:	e1 14       	cp	r14, r1
    1cf4:	f1 04       	cpc	r15, r1
    1cf6:	a9 f3       	breq	.-22     	; 0x1ce2 <xQueueGenericSendFromISR+0x32>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	f7 01       	movw	r30, r14
    1cfc:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
}
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	1f 91       	pop	r17
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    1d0a:	0e 94 81 18 	call	0x3102	; 0x3102 <uxTaskGetNumberOfTasks>
    1d0e:	18 17       	cp	r17, r24
    1d10:	40 f7       	brcc	.-48     	; 0x1ce2 <xQueueGenericSendFromISR+0x32>
    1d12:	1f 5f       	subi	r17, 0xFF	; 255
    1d14:	1e 8f       	std	Y+30, r17	; 0x1e
    1d16:	e5 cf       	rjmp	.-54     	; 0x1ce2 <xQueueGenericSendFromISR+0x32>

00001d18 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1d24:	8a 8d       	ldd	r24, Y+26	; 0x1a

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
    1d26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d28:	89 17       	cp	r24, r25
    1d2a:	20 f5       	brcc	.+72     	; 0x1d74 <xQueueGiveFromISR+0x5c>
    1d2c:	7b 01       	movw	r14, r22
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    1d2e:	1e 8d       	ldd	r17, Y+30	; 0x1e
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	8a 8f       	std	Y+26, r24	; 0x1a

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    1d34:	1f 3f       	cpi	r17, 0xFF	; 255
    1d36:	b9 f4       	brne	.+46     	; 0x1d66 <xQueueGiveFromISR+0x4e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1d38:	89 89       	ldd	r24, Y+17	; 0x11
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <xQueueGiveFromISR+0x2a>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	0c c0       	rjmp	.+24     	; 0x1d5a <xQueueGiveFromISR+0x42>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d42:	ce 01       	movw	r24, r28
    1d44:	41 96       	adiw	r24, 0x11	; 17
    1d46:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    1d4a:	88 23       	and	r24, r24
    1d4c:	c1 f3       	breq	.-16     	; 0x1d3e <xQueueGiveFromISR+0x26>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    1d4e:	e1 14       	cp	r14, r1
    1d50:	f1 04       	cpc	r15, r1
    1d52:	a9 f3       	breq	.-22     	; 0x1d3e <xQueueGiveFromISR+0x26>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	f7 01       	movw	r30, r14
    1d58:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
}
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    1d66:	0e 94 81 18 	call	0x3102	; 0x3102 <uxTaskGetNumberOfTasks>
    1d6a:	18 17       	cp	r17, r24
    1d6c:	40 f7       	brcc	.-48     	; 0x1d3e <xQueueGiveFromISR+0x26>
    1d6e:	1f 5f       	subi	r17, 0xFF	; 255
    1d70:	1e 8f       	std	Y+30, r17	; 0x1e
    1d72:	e5 cf       	rjmp	.-54     	; 0x1d3e <xQueueGiveFromISR+0x26>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
    1d76:	f1 cf       	rjmp	.-30     	; 0x1d5a <xQueueGiveFromISR+0x42>

00001d78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
    1d78:	af 92       	push	r10
    1d7a:	bf 92       	push	r11
    1d7c:	cf 92       	push	r12
    1d7e:	df 92       	push	r13
    1d80:	ff 92       	push	r15
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <xQueueReceive+0x14>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <xQueueReceive+0x16>
    1d8e:	1f 92       	push	r1
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	8c 01       	movw	r16, r24
    1d96:	6b 01       	movw	r12, r22
    1d98:	5d 83       	std	Y+5, r21	; 0x05
    1d9a:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1d9e:	58 01       	movw	r10, r16
    1da0:	91 e1       	ldi	r25, 0x11	; 17
    1da2:	a9 0e       	add	r10, r25
    1da4:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1dac:	f8 01       	movw	r30, r16
    1dae:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1db0:	ff 20       	and	r15, r15
    1db2:	19 f1       	breq	.+70     	; 0x1dfa <xQueueReceive+0x82>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
    1db4:	b6 01       	movw	r22, r12
    1db6:	c8 01       	movw	r24, r16
    1db8:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    1dbc:	fa 94       	dec	r15
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1dc2:	80 85       	ldd	r24, Z+8	; 0x08
    1dc4:	88 23       	and	r24, r24
    1dc6:	39 f0       	breq	.+14     	; 0x1dd6 <xQueueReceive+0x5e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1dc8:	c8 01       	movw	r24, r16
    1dca:	08 96       	adiw	r24, 0x08	; 8
    1dcc:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    1dd0:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1dd2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    1dd6:	0f 90       	pop	r0
    1dd8:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	df 90       	pop	r13
    1df2:	cf 90       	pop	r12
    1df4:	bf 90       	pop	r11
    1df6:	af 90       	pop	r10
    1df8:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfe:	23 2b       	or	r18, r19
    1e00:	21 f4       	brne	.+8      	; 0x1e0a <xQueueReceive+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1e02:	0f 90       	pop	r0
    1e04:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	e9 cf       	rjmp	.-46     	; 0x1ddc <xQueueReceive+0x64>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    1e0a:	81 11       	cpse	r24, r1
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <xQueueReceive+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1e0e:	ce 01       	movw	r24, r28
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	0e 94 c8 1c 	call	0x3990	; 0x3990 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1e1a:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	0f 92       	push	r0
    1e24:	f8 01       	movw	r30, r16
    1e26:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e28:	8f 3f       	cpi	r24, 0xFF	; 255
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <xQueueReceive+0xb6>
    1e2c:	15 8e       	std	Z+29, r1	; 0x1d
    1e2e:	f8 01       	movw	r30, r16
    1e30:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e32:	8f 3f       	cpi	r24, 0xFF	; 255
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <xQueueReceive+0xc0>
    1e36:	16 8e       	std	Z+30, r1	; 0x1e
    1e38:	0f 90       	pop	r0
    1e3a:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1e3c:	be 01       	movw	r22, r28
    1e3e:	6c 5f       	subi	r22, 0xFC	; 252
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
    1e42:	ce 01       	movw	r24, r28
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <xTaskCheckForTimeOut>
    1e4a:	81 11       	cpse	r24, r1
    1e4c:	1b c0       	rjmp	.+54     	; 0x1e84 <xQueueReceive+0x10c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1e4e:	c8 01       	movw	r24, r16
    1e50:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prvIsQueueEmpty>
    1e54:	88 23       	and	r24, r24
    1e56:	81 f0       	breq	.+32     	; 0x1e78 <xQueueReceive+0x100>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1e58:	6c 81       	ldd	r22, Y+4	; 0x04
    1e5a:	7d 81       	ldd	r23, Y+5	; 0x05
    1e5c:	c5 01       	movw	r24, r10
    1e5e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1e62:	c8 01       	movw	r24, r16
    1e64:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    1e68:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <xQueueReceive+0xfc>
                {
                    taskYIELD_WITHIN_API();
    1e70:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	97 cf       	rjmp	.-210    	; 0x1da6 <xQueueReceive+0x2e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
    1e78:	c8 01       	movw	r24, r16
    1e7a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1e7e:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    1e82:	f8 cf       	rjmp	.-16     	; 0x1e74 <xQueueReceive+0xfc>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
    1e84:	c8 01       	movw	r24, r16
    1e86:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    1e8a:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1e8e:	c8 01       	movw	r24, r16
    1e90:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prvIsQueueEmpty>
    1e94:	88 23       	and	r24, r24
    1e96:	71 f3       	breq	.-36     	; 0x1e74 <xQueueReceive+0xfc>
    1e98:	b6 cf       	rjmp	.-148    	; 0x1e06 <xQueueReceive+0x8e>

00001e9a <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    1e9a:	ef 92       	push	r14
    1e9c:	ff 92       	push	r15
    1e9e:	0f 93       	push	r16
    1ea0:	1f 93       	push	r17
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <xQueueSemaphoreTake+0xe>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <xQueueSemaphoreTake+0x10>
    1eaa:	1f 92       	push	r1
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	8c 01       	movw	r16, r24
    1eb2:	7d 83       	std	Y+5, r23	; 0x05
    1eb4:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1eb8:	78 01       	movw	r14, r16
    1eba:	81 e1       	ldi	r24, 0x11	; 17
    1ebc:	e8 0e       	add	r14, r24
    1ebe:	f1 1c       	adc	r15, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    1eca:	88 23       	and	r24, r24
    1ecc:	d9 f0       	breq	.+54     	; 0x1f04 <xQueueSemaphoreTake+0x6a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
    1ece:	81 50       	subi	r24, 0x01	; 1
    1ed0:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1ed2:	80 85       	ldd	r24, Z+8	; 0x08
    1ed4:	88 23       	and	r24, r24
    1ed6:	39 f0       	breq	.+14     	; 0x1ee6 <xQueueSemaphoreTake+0x4c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1ed8:	c8 01       	movw	r24, r16
    1eda:	08 96       	adiw	r24, 0x08	; 8
    1edc:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    1ee0:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1ee2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    1ee6:	0f 90       	pop	r0
    1ee8:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1f04:	2c 81       	ldd	r18, Y+4	; 0x04
    1f06:	3d 81       	ldd	r19, Y+5	; 0x05
    1f08:	23 2b       	or	r18, r19
    1f0a:	21 f4       	brne	.+8      	; 0x1f14 <xQueueSemaphoreTake+0x7a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	ec cf       	rjmp	.-40     	; 0x1eec <xQueueSemaphoreTake+0x52>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    1f14:	91 11       	cpse	r25, r1
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <xQueueSemaphoreTake+0x86>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1f18:	ce 01       	movw	r24, r28
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	0e 94 c8 1c 	call	0x3990	; 0x3990 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1f20:	0f 90       	pop	r0
    1f22:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1f24:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	0f 92       	push	r0
    1f2e:	f8 01       	movw	r30, r16
    1f30:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f32:	8f 3f       	cpi	r24, 0xFF	; 255
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <xQueueSemaphoreTake+0x9e>
    1f36:	15 8e       	std	Z+29, r1	; 0x1d
    1f38:	f8 01       	movw	r30, r16
    1f3a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <xQueueSemaphoreTake+0xa8>
    1f40:	16 8e       	std	Z+30, r1	; 0x1e
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1f46:	be 01       	movw	r22, r28
    1f48:	6c 5f       	subi	r22, 0xFC	; 252
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <xTaskCheckForTimeOut>
    1f54:	81 11       	cpse	r24, r1
    1f56:	1b c0       	rjmp	.+54     	; 0x1f8e <xQueueSemaphoreTake+0xf4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1f58:	c8 01       	movw	r24, r16
    1f5a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prvIsQueueEmpty>
    1f5e:	88 23       	and	r24, r24
    1f60:	81 f0       	breq	.+32     	; 0x1f82 <xQueueSemaphoreTake+0xe8>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1f62:	6c 81       	ldd	r22, Y+4	; 0x04
    1f64:	7d 81       	ldd	r23, Y+5	; 0x05
    1f66:	c7 01       	movw	r24, r14
    1f68:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1f6c:	c8 01       	movw	r24, r16
    1f6e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    1f72:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    1f76:	81 11       	cpse	r24, r1
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <xQueueSemaphoreTake+0xe4>
                {
                    taskYIELD_WITHIN_API();
    1f7a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	9f cf       	rjmp	.-194    	; 0x1ec0 <xQueueSemaphoreTake+0x26>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    1f82:	c8 01       	movw	r24, r16
    1f84:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1f88:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    1f8c:	f8 cf       	rjmp	.-16     	; 0x1f7e <xQueueSemaphoreTake+0xe4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    1f8e:	c8 01       	movw	r24, r16
    1f90:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    1f94:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1f98:	c8 01       	movw	r24, r16
    1f9a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prvIsQueueEmpty>
    1f9e:	88 23       	and	r24, r24
    1fa0:	71 f3       	breq	.-36     	; 0x1f7e <xQueueSemaphoreTake+0xe4>
    1fa2:	b6 cf       	rjmp	.-148    	; 0x1f10 <xQueueSemaphoreTake+0x76>

00001fa4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
    1fa4:	cf 92       	push	r12
    1fa6:	df 92       	push	r13
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <xQueuePeek+0x12>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <xQueuePeek+0x14>
    1fb8:	1f 92       	push	r1
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	8c 01       	movw	r16, r24
    1fc0:	7b 01       	movw	r14, r22
    1fc2:	5d 83       	std	Y+5, r21	; 0x05
    1fc4:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1fc8:	68 01       	movw	r12, r16
    1fca:	91 e1       	ldi	r25, 0x11	; 17
    1fcc:	c9 0e       	add	r12, r25
    1fce:	d1 1c       	adc	r13, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	92 8d       	ldd	r25, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1fda:	99 23       	and	r25, r25
    1fdc:	21 f1       	breq	.+72     	; 0x2026 <xQueuePeek+0x82>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    1fde:	c6 80       	ldd	r12, Z+6	; 0x06
    1fe0:	d7 80       	ldd	r13, Z+7	; 0x07

                prvCopyDataFromQueue( pxQueue, pvBuffer );
    1fe2:	b7 01       	movw	r22, r14
    1fe4:	c8 01       	movw	r24, r16
    1fe6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    1fea:	f8 01       	movw	r30, r16
    1fec:	d7 82       	std	Z+7, r13	; 0x07
    1fee:	c6 82       	std	Z+6, r12	; 0x06

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ff0:	81 89       	ldd	r24, Z+17	; 0x11
    1ff2:	88 23       	and	r24, r24
    1ff4:	39 f0       	breq	.+14     	; 0x2004 <xQueuePeek+0x60>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ff6:	c8 01       	movw	r24, r16
    1ff8:	41 96       	adiw	r24, 0x11	; 17
    1ffa:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    1ffe:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
    2000:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    2004:	0f 90       	pop	r0
    2006:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
    2008:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	df 90       	pop	r13
    2022:	cf 90       	pop	r12
    2024:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    2026:	2c 81       	ldd	r18, Y+4	; 0x04
    2028:	3d 81       	ldd	r19, Y+5	; 0x05
    202a:	23 2b       	or	r18, r19
    202c:	21 f4       	brne	.+8      	; 0x2036 <xQueuePeek+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	ea cf       	rjmp	.-44     	; 0x200a <xQueuePeek+0x66>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    2036:	81 11       	cpse	r24, r1
    2038:	04 c0       	rjmp	.+8      	; 0x2042 <xQueuePeek+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    203a:	ce 01       	movw	r24, r28
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	0e 94 c8 1c 	call	0x3990	; 0x3990 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    2042:	0f 90       	pop	r0
    2044:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
    2046:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	0f 92       	push	r0
    2050:	f8 01       	movw	r30, r16
    2052:	85 8d       	ldd	r24, Z+29	; 0x1d
    2054:	8f 3f       	cpi	r24, 0xFF	; 255
    2056:	09 f4       	brne	.+2      	; 0x205a <xQueuePeek+0xb6>
    2058:	15 8e       	std	Z+29, r1	; 0x1d
    205a:	f8 01       	movw	r30, r16
    205c:	86 8d       	ldd	r24, Z+30	; 0x1e
    205e:	8f 3f       	cpi	r24, 0xFF	; 255
    2060:	09 f4       	brne	.+2      	; 0x2064 <xQueuePeek+0xc0>
    2062:	16 8e       	std	Z+30, r1	; 0x1e
    2064:	0f 90       	pop	r0
    2066:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2068:	be 01       	movw	r22, r28
    206a:	6c 5f       	subi	r22, 0xFC	; 252
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	ce 01       	movw	r24, r28
    2070:	01 96       	adiw	r24, 0x01	; 1
    2072:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <xTaskCheckForTimeOut>
    2076:	81 11       	cpse	r24, r1
    2078:	1b c0       	rjmp	.+54     	; 0x20b0 <xQueuePeek+0x10c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    207a:	c8 01       	movw	r24, r16
    207c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prvIsQueueEmpty>
    2080:	88 23       	and	r24, r24
    2082:	81 f0       	breq	.+32     	; 0x20a4 <xQueuePeek+0x100>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2084:	6c 81       	ldd	r22, Y+4	; 0x04
    2086:	7d 81       	ldd	r23, Y+5	; 0x05
    2088:	c6 01       	movw	r24, r12
    208a:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    208e:	c8 01       	movw	r24, r16
    2090:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    2094:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    2098:	81 11       	cpse	r24, r1
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <xQueuePeek+0xfc>
                {
                    taskYIELD_WITHIN_API();
    209c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	96 cf       	rjmp	.-212    	; 0x1fd0 <xQueuePeek+0x2c>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
    20a4:	c8 01       	movw	r24, r16
    20a6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    20aa:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    20ae:	f8 cf       	rjmp	.-16     	; 0x20a0 <xQueuePeek+0xfc>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
    20b0:	c8 01       	movw	r24, r16
    20b2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    20b6:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    20ba:	c8 01       	movw	r24, r16
    20bc:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prvIsQueueEmpty>
    20c0:	88 23       	and	r24, r24
    20c2:	71 f3       	breq	.-36     	; 0x20a0 <xQueuePeek+0xfc>
    20c4:	b6 cf       	rjmp	.-148    	; 0x2032 <xQueuePeek+0x8e>

000020c6 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    20d2:	fc 01       	movw	r30, r24
    20d4:	02 8d       	ldd	r16, Z+26	; 0x1a

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    20d6:	00 23       	and	r16, r16
    20d8:	41 f1       	breq	.+80     	; 0x212a <xQueueReceiveFromISR+0x64>
    20da:	7a 01       	movw	r14, r20
    20dc:	ec 01       	movw	r28, r24
        {
            const int8_t cRxLock = pxQueue->cRxLock;
    20de:	15 8d       	ldd	r17, Z+29	; 0x1d

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
    20e0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    20e4:	01 50       	subi	r16, 0x01	; 1
    20e6:	0a 8f       	std	Y+26, r16	; 0x1a

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
    20e8:	1f 3f       	cpi	r17, 0xFF	; 255
    20ea:	c1 f4       	brne	.+48     	; 0x211c <xQueueReceiveFromISR+0x56>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    20ec:	88 85       	ldd	r24, Y+8	; 0x08
    20ee:	81 11       	cpse	r24, r1
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <xQueueReceiveFromISR+0x30>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
            }

            xReturn = pdPASS;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	0c c0       	rjmp	.+24     	; 0x210e <xQueueReceiveFromISR+0x48>
             * locked. */
            if( cRxLock == queueUNLOCKED )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    20f6:	ce 01       	movw	r24, r28
    20f8:	08 96       	adiw	r24, 0x08	; 8
    20fa:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskRemoveFromEventList>
    20fe:	88 23       	and	r24, r24
    2100:	c1 f3       	breq	.-16     	; 0x20f2 <xQueueReceiveFromISR+0x2c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
    2102:	e1 14       	cp	r14, r1
    2104:	f1 04       	cpc	r15, r1
    2106:	a9 f3       	breq	.-22     	; 0x20f2 <xQueueReceiveFromISR+0x2c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	f7 01       	movw	r30, r14
    210c:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
}
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	1f 91       	pop	r17
    2114:	0f 91       	pop	r16
    2116:	ff 90       	pop	r15
    2118:	ef 90       	pop	r14
    211a:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
    211c:	0e 94 81 18 	call	0x3102	; 0x3102 <uxTaskGetNumberOfTasks>
    2120:	18 17       	cp	r17, r24
    2122:	38 f7       	brcc	.-50     	; 0x20f2 <xQueueReceiveFromISR+0x2c>
    2124:	1f 5f       	subi	r17, 0xFF	; 255
    2126:	1d 8f       	std	Y+29, r17	; 0x1d
    2128:	e4 cf       	rjmp	.-56     	; 0x20f2 <xQueueReceiveFromISR+0x2c>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    212a:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
    212c:	f0 cf       	rjmp	.-32     	; 0x210e <xQueueReceiveFromISR+0x48>

0000212e <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2136:	fc 01       	movw	r30, r24
    2138:	22 8d       	ldd	r18, Z+26	; 0x1a
    213a:	22 23       	and	r18, r18
    213c:	69 f0       	breq	.+26     	; 0x2158 <xQueuePeekFromISR+0x2a>
    213e:	ec 01       	movw	r28, r24
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    2140:	06 81       	ldd	r16, Z+6	; 0x06
    2142:	17 81       	ldd	r17, Z+7	; 0x07
            prvCopyDataFromQueue( pxQueue, pvBuffer );
    2144:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    2148:	1f 83       	std	Y+7, r17	; 0x07
    214a:	0e 83       	std	Y+6, r16	; 0x06

            xReturn = pdPASS;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
}
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	08 95       	ret

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    2158:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
    215a:	f9 cf       	rjmp	.-14     	; 0x214e <xQueuePeekFromISR+0x20>

0000215c <uxQueueMessagesWaiting>:

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );

    taskENTER_CRITICAL();
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	0f 92       	push	r0
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2162:	fc 01       	movw	r30, r24
    2164:	82 8d       	ldd	r24, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    2166:	0f 90       	pop	r0
    2168:	0f be       	out	0x3f, r0	; 63

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
}
    216a:	08 95       	ret

0000216c <uxQueueSpacesAvailable>:

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	0f 92       	push	r0
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    2172:	fc 01       	movw	r30, r24
    2174:	22 8d       	ldd	r18, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    2176:	0f 90       	pop	r0
    2178:	0f be       	out	0x3f, r0	; 63

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    217a:	83 8d       	ldd	r24, Z+27	; 0x1b
    taskEXIT_CRITICAL();

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
}
    217c:	82 1b       	sub	r24, r18
    217e:	08 95       	ret

00002180 <uxQueueMessagesWaitingFromISR>:
    Queue_t * const pxQueue = xQueue;

    traceENTER_uxQueueMessagesWaitingFromISR( xQueue );

    configASSERT( pxQueue );
    uxReturn = pxQueue->uxMessagesWaiting;
    2180:	fc 01       	movw	r30, r24
    2182:	82 8d       	ldd	r24, Z+26	; 0x1a

    traceRETURN_uxQueueMessagesWaitingFromISR( uxReturn );

    return uxReturn;
}
    2184:	08 95       	ret

00002186 <vQueueDelete>:

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
    2186:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <vPortFree>

0000218a <uxQueueGetQueueItemSize>:
    traceENTER_uxQueueGetQueueItemSize( xQueue );

    traceRETURN_uxQueueGetQueueItemSize( ( ( Queue_t * ) xQueue )->uxItemSize );

    return ( ( Queue_t * ) xQueue )->uxItemSize;
}
    218a:	fc 01       	movw	r30, r24
    218c:	84 8d       	ldd	r24, Z+28	; 0x1c
    218e:	08 95       	ret

00002190 <uxQueueGetQueueLength>:
    traceENTER_uxQueueGetQueueLength( xQueue );

    traceRETURN_uxQueueGetQueueLength( ( ( Queue_t * ) xQueue )->uxLength );

    return ( ( Queue_t * ) xQueue )->uxLength;
}
    2190:	fc 01       	movw	r30, r24
    2192:	83 8d       	ldd	r24, Z+27	; 0x1b
    2194:	08 95       	ret

00002196 <xQueueIsQueueEmptyFromISR>:

    traceENTER_xQueueIsQueueEmptyFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2196:	fc 01       	movw	r30, r24
    2198:	92 8d       	ldd	r25, Z+26	; 0x1a
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	91 11       	cpse	r25, r1
    219e:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueEmptyFromISR( xReturn );

    return xReturn;
}
    21a0:	08 95       	ret

000021a2 <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    21a2:	fc 01       	movw	r30, r24

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    21a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	23 8d       	ldd	r18, Z+27	; 0x1b
    21aa:	29 13       	cpse	r18, r25
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
}
    21ae:	08 95       	ret

000021b0 <xQueueCRSend>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSend( QueueHandle_t xQueue,
                             const void * pvItemToQueue,
                             TickType_t xTicksToWait )
    {
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	ec 01       	movw	r28, r24
        traceENTER_xQueueCRSend( xQueue, pvItemToQueue, xTicksToWait );

        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    21b6:	f8 94       	cli

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    21be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    21c2:	0f 90       	pop	r0
    21c4:	0f be       	out	0x3f, r0	; 63
        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    21c6:	89 13       	cpse	r24, r25
    21c8:	11 c0       	rjmp	.+34     	; 0x21ec <xQueueCRSend+0x3c>
            {
                /* The queue is full - do we want to block or just leave without
                 * posting? */
                if( xTicksToWait > ( TickType_t ) 0 )
    21ca:	41 15       	cp	r20, r1
    21cc:	51 05       	cpc	r21, r1
    21ce:	59 f0       	breq	.+22     	; 0x21e6 <xQueueCRSend+0x36>
                {
                    /* As this is called from a coroutine we cannot block directly, but
                     * return indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    21d0:	be 01       	movw	r22, r28
    21d2:	68 5f       	subi	r22, 0xF8	; 248
    21d4:	7f 4f       	sbci	r23, 0xFF	; 255
    21d6:	ca 01       	movw	r24, r20
    21d8:	0e 94 7d 07 	call	0xefa	; 0xefa <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    21dc:	78 94       	sei
                    return errQUEUE_BLOCKED;
    21de:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    }
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    21e6:	78 94       	sei
                    return errQUEUE_FULL;
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	fa cf       	rjmp	.-12     	; 0x21e0 <xQueueCRSend+0x30>
                }
            }
        }
        portENABLE_INTERRUPTS();
    21ec:	78 94       	sei

        portDISABLE_INTERRUPTS();
    21ee:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    21f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21f2:	89 17       	cp	r24, r25
    21f4:	90 f4       	brcc	.+36     	; 0x221a <xQueueCRSend+0x6a>
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	ce 01       	movw	r24, r28
    21fa:	0e 94 af 0c 	call	0x195e	; 0x195e <prvCopyDataToQueue>
                xReturn = pdPASS;

                /* Were any co-routines waiting for data to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    21fe:	89 89       	ldd	r24, Y+17	; 0x11
    2200:	81 11       	cpse	r24, r1
    2202:	03 c0       	rjmp	.+6      	; 0x220a <xQueueCRSend+0x5a>
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
                xReturn = pdPASS;
    2204:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = errQUEUE_FULL;
            }
        }
        portENABLE_INTERRUPTS();
    2206:	78 94       	sei

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    2208:	eb cf       	rjmp	.-42     	; 0x21e0 <xQueueCRSend+0x30>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    220a:	ce 01       	movw	r24, r28
    220c:	41 96       	adiw	r24, 0x11	; 17
    220e:	0e 94 c3 08 	call	0x1186	; 0x1186 <xCoRoutineRemoveFromEventList>
    2212:	88 23       	and	r24, r24
    2214:	b9 f3       	breq	.-18     	; 0x2204 <xQueueCRSend+0x54>
                    {
                        /* The co-routine waiting has a higher priority so record
                         * that a yield might be appropriate. */
                        xReturn = errQUEUE_YIELD;
    2216:	8b ef       	ldi	r24, 0xFB	; 251
    2218:	f6 cf       	rjmp	.-20     	; 0x2206 <xQueueCRSend+0x56>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = errQUEUE_FULL;
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	f4 cf       	rjmp	.-24     	; 0x2206 <xQueueCRSend+0x56>

0000221e <xQueueCRReceive>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
                                void * pvBuffer,
                                TickType_t xTicksToWait )
    {
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	ec 01       	movw	r28, r24
    2224:	fb 01       	movw	r30, r22
        traceENTER_xQueueCRReceive( xQueue, pvBuffer, xTicksToWait );

        /* If the queue is already empty we may have to block.  A critical section
         * is required to prevent an interrupt adding something to the queue
         * between the check to see if the queue is empty and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    2226:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2228:	8a 8d       	ldd	r24, Y+26	; 0x1a
    222a:	81 11       	cpse	r24, r1
    222c:	11 c0       	rjmp	.+34     	; 0x2250 <xQueueCRReceive+0x32>
            {
                /* There are no messages in the queue, do we want to block or just
                 * leave with nothing? */
                if( xTicksToWait > ( TickType_t ) 0 )
    222e:	41 15       	cp	r20, r1
    2230:	51 05       	cpc	r21, r1
    2232:	59 f0       	breq	.+22     	; 0x224a <xQueueCRReceive+0x2c>
                {
                    /* As this is a co-routine we cannot block directly, but return
                     * indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    2234:	be 01       	movw	r22, r28
    2236:	6f 5e       	subi	r22, 0xEF	; 239
    2238:	7f 4f       	sbci	r23, 0xFF	; 255
    223a:	ca 01       	movw	r24, r20
    223c:	0e 94 7d 07 	call	0xefa	; 0xefa <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    2240:	78 94       	sei
                    return errQUEUE_BLOCKED;
    2242:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    }
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    224a:	78 94       	sei
                    return errQUEUE_FULL;
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	fa cf       	rjmp	.-12     	; 0x2244 <xQueueCRReceive+0x26>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portENABLE_INTERRUPTS();
    2250:	78 94       	sei

        portDISABLE_INTERRUPTS();
    2252:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2254:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2256:	88 23       	and	r24, r24
    2258:	39 f1       	breq	.+78     	; 0x22a8 <xQueueCRReceive+0x8a>
            {
                /* Data is available from the queue. */
                pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    225a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	2e 81       	ldd	r18, Y+6	; 0x06
    2260:	3f 81       	ldd	r19, Y+7	; 0x07
    2262:	24 0f       	add	r18, r20
    2264:	35 1f       	adc	r19, r21
    2266:	3f 83       	std	Y+7, r19	; 0x07
    2268:	2e 83       	std	Y+6, r18	; 0x06

                if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    226a:	8c 81       	ldd	r24, Y+4	; 0x04
    226c:	9d 81       	ldd	r25, Y+5	; 0x05
    226e:	28 17       	cp	r18, r24
    2270:	39 07       	cpc	r19, r25
    2272:	20 f0       	brcs	.+8      	; 0x227c <xQueueCRReceive+0x5e>
                {
                    pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    2274:	88 81       	ld	r24, Y
    2276:	99 81       	ldd	r25, Y+1	; 0x01
    2278:	9f 83       	std	Y+7, r25	; 0x07
    227a:	8e 83       	std	Y+6, r24	; 0x06
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --( pxQueue->uxMessagesWaiting );
    227c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    227e:	91 50       	subi	r25, 0x01	; 1
    2280:	9a 8f       	std	Y+26, r25	; 0x1a
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2282:	6e 81       	ldd	r22, Y+6	; 0x06
    2284:	7f 81       	ldd	r23, Y+7	; 0x07
    2286:	cf 01       	movw	r24, r30
    2288:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <memcpy>

                xReturn = pdPASS;

                /* Were any co-routines waiting for space to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    228c:	88 85       	ldd	r24, Y+8	; 0x08
    228e:	81 11       	cpse	r24, r1
    2290:	03 c0       	rjmp	.+6      	; 0x2298 <xQueueCRReceive+0x7a>
                }

                --( pxQueue->uxMessagesWaiting );
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

                xReturn = pdPASS;
    2292:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        portENABLE_INTERRUPTS();
    2294:	78 94       	sei

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    2296:	d6 cf       	rjmp	.-84     	; 0x2244 <xQueueCRReceive+0x26>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2298:	ce 01       	movw	r24, r28
    229a:	08 96       	adiw	r24, 0x08	; 8
    229c:	0e 94 c3 08 	call	0x1186	; 0x1186 <xCoRoutineRemoveFromEventList>
    22a0:	88 23       	and	r24, r24
    22a2:	b9 f3       	breq	.-18     	; 0x2292 <xQueueCRReceive+0x74>
                    {
                        xReturn = errQUEUE_YIELD;
    22a4:	8b ef       	ldi	r24, 0xFB	; 251
    22a6:	f6 cf       	rjmp	.-20     	; 0x2294 <xQueueCRReceive+0x76>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = pdFAIL;
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	f4 cf       	rjmp	.-24     	; 0x2294 <xQueueCRReceive+0x76>

000022ac <xQueueCRSendFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
                                    const void * pvItemToQueue,
                                    BaseType_t xCoRoutinePreviouslyWoken )
    {
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	ec 01       	movw	r28, r24
    22b4:	14 2f       	mov	r17, r20

        traceENTER_xQueueCRSendFromISR( xQueue, pvItemToQueue, xCoRoutinePreviouslyWoken );

        /* Cannot block within an ISR so if there is no space on the queue then
         * exit without doing anything. */
        if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    22b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ba:	98 17       	cp	r25, r24
    22bc:	88 f4       	brcc	.+34     	; 0x22e0 <xQueueCRSendFromISR+0x34>
        {
            prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	ce 01       	movw	r24, r28
    22c2:	0e 94 af 0c 	call	0x195e	; 0x195e <prvCopyDataToQueue>

            /* We only want to wake one co-routine per ISR, so check that a
             * co-routine has not already been woken. */
            if( xCoRoutinePreviouslyWoken == pdFALSE )
    22c6:	11 11       	cpse	r17, r1
    22c8:	0b c0       	rjmp	.+22     	; 0x22e0 <xQueueCRSendFromISR+0x34>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    22ca:	89 89       	ldd	r24, Y+17	; 0x11
    22cc:	88 23       	and	r24, r24
    22ce:	41 f0       	breq	.+16     	; 0x22e0 <xQueueCRSendFromISR+0x34>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    22d0:	ce 01       	movw	r24, r28
    22d2:	41 96       	adiw	r24, 0x11	; 17
    22d4:	0e 94 c3 08 	call	0x1186	; 0x1186 <xCoRoutineRemoveFromEventList>
    22d8:	11 e0       	ldi	r17, 0x01	; 1
    22da:	81 11       	cpse	r24, r1
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <xQueueCRSendFromISR+0x34>
    22de:	10 e0       	ldi	r17, 0x00	; 0
        }

        traceRETURN_xQueueCRSendFromISR( xCoRoutinePreviouslyWoken );

        return xCoRoutinePreviouslyWoken;
    }
    22e0:	81 2f       	mov	r24, r17
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	1f 91       	pop	r17
    22e8:	08 95       	ret

000022ea <xQueueCRReceiveFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
                                       void * pvBuffer,
                                       BaseType_t * pxCoRoutineWoken )
    {
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	ec 01       	movw	r28, r24

        traceENTER_xQueueCRReceiveFromISR( xQueue, pvBuffer, pxCoRoutineWoken );

        /* We cannot block from an ISR, so check there is data available. If
         * not then just leave without doing anything. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    22f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22f6:	88 23       	and	r24, r24
    22f8:	91 f1       	breq	.+100    	; 0x235e <xQueueCRReceiveFromISR+0x74>
        {
            /* Copy the data from the queue. */
            pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    22fa:	2c 8d       	ldd	r18, Y+28	; 0x1c
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	ae 81       	ldd	r26, Y+6	; 0x06
    2300:	bf 81       	ldd	r27, Y+7	; 0x07
    2302:	a2 0f       	add	r26, r18
    2304:	b3 1f       	adc	r27, r19
    2306:	bf 83       	std	Y+7, r27	; 0x07
    2308:	ae 83       	std	Y+6, r26	; 0x06

            if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
    230c:	9d 81       	ldd	r25, Y+5	; 0x05
    230e:	a8 17       	cp	r26, r24
    2310:	b9 07       	cpc	r27, r25
    2312:	20 f0       	brcs	.+8      	; 0x231c <xQueueCRReceiveFromISR+0x32>
            {
                pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    2314:	88 81       	ld	r24, Y
    2316:	99 81       	ldd	r25, Y+1	; 0x01
    2318:	9f 83       	std	Y+7, r25	; 0x07
    231a:	8e 83       	std	Y+6, r24	; 0x06
    231c:	8a 01       	movw	r16, r20
    231e:	cb 01       	movw	r24, r22
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            --( pxQueue->uxMessagesWaiting );
    2320:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2322:	41 50       	subi	r20, 0x01	; 1
    2324:	4a 8f       	std	Y+26, r20	; 0x1a
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2326:	6e 81       	ldd	r22, Y+6	; 0x06
    2328:	7f 81       	ldd	r23, Y+7	; 0x07
    232a:	a9 01       	movw	r20, r18
    232c:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <memcpy>

            if( ( *pxCoRoutineWoken ) == pdFALSE )
    2330:	f8 01       	movw	r30, r16
    2332:	80 81       	ld	r24, Z
    2334:	88 23       	and	r24, r24
    2336:	31 f0       	breq	.+12     	; 0x2344 <xQueueCRReceiveFromISR+0x5a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
    2338:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    }
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	08 95       	ret
            --( pxQueue->uxMessagesWaiting );
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

            if( ( *pxCoRoutineWoken ) == pdFALSE )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2344:	88 85       	ldd	r24, Y+8	; 0x08
    2346:	88 23       	and	r24, r24
    2348:	b9 f3       	breq	.-18     	; 0x2338 <xQueueCRReceiveFromISR+0x4e>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    234a:	ce 01       	movw	r24, r28
    234c:	08 96       	adiw	r24, 0x08	; 8
    234e:	0e 94 c3 08 	call	0x1186	; 0x1186 <xCoRoutineRemoveFromEventList>
    2352:	88 23       	and	r24, r24
    2354:	89 f3       	breq	.-30     	; 0x2338 <xQueueCRReceiveFromISR+0x4e>
                    {
                        *pxCoRoutineWoken = pdTRUE;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	f8 01       	movw	r30, r16
    235a:	80 83       	st	Z, r24
    235c:	ee cf       	rjmp	.-36     	; 0x233a <xQueueCRReceiveFromISR+0x50>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    235e:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    2360:	ec cf       	rjmp	.-40     	; 0x233a <xQueueCRReceiveFromISR+0x50>

00002362 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	0f 92       	push	r0
    236e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2370:	8f 3f       	cpi	r24, 0xFF	; 255
    2372:	09 f4       	brne	.+2      	; 0x2376 <vQueueWaitForMessageRestricted+0x14>
    2374:	1d 8e       	std	Y+29, r1	; 0x1d
    2376:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2378:	8f 3f       	cpi	r24, 0xFF	; 255
    237a:	09 f4       	brne	.+2      	; 0x237e <vQueueWaitForMessageRestricted+0x1c>
    237c:	1e 8e       	std	Y+30, r1	; 0x1e
    237e:	0f 90       	pop	r0
    2380:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2382:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2384:	81 11       	cpse	r24, r1
    2386:	04 c0       	rjmp	.+8      	; 0x2390 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2388:	ce 01       	movw	r24, r28
    238a:	41 96       	adiw	r24, 0x11	; 17
    238c:	0e 94 4d 1b 	call	0x369a	; 0x369a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    2390:	ce 01       	movw	r24, r28

        traceRETURN_vQueueWaitForMessageRestricted();
    }
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    2396:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <prvUnlockQueue>

0000239a <prvBytesInBuffer>:
    return xTail;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    239a:	fc 01       	movw	r30, r24
    /* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    239c:	44 81       	ldd	r20, Z+4	; 0x04
    239e:	55 81       	ldd	r21, Z+5	; 0x05
    23a0:	22 81       	ldd	r18, Z+2	; 0x02
    23a2:	33 81       	ldd	r19, Z+3	; 0x03
    23a4:	24 0f       	add	r18, r20
    23a6:	35 1f       	adc	r19, r21
    xCount -= pxStreamBuffer->xTail;
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	b9 01       	movw	r22, r18
    23ae:	68 1b       	sub	r22, r24
    23b0:	79 0b       	sbc	r23, r25
    23b2:	cb 01       	movw	r24, r22

    if( xCount >= pxStreamBuffer->xLength )
    23b4:	64 17       	cp	r22, r20
    23b6:	75 07       	cpc	r23, r21
    23b8:	10 f0       	brcs	.+4      	; 0x23be <prvBytesInBuffer+0x24>
    {
        xCount -= pxStreamBuffer->xLength;
    23ba:	84 1b       	sub	r24, r20
    23bc:	95 0b       	sbc	r25, r21
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
}
    23be:	08 95       	ret

000023c0 <prvWriteBytesToBuffer>:

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount,
                                     size_t xHead )
{
    23c0:	af 92       	push	r10
    23c2:	bf 92       	push	r11
    23c4:	cf 92       	push	r12
    23c6:	df 92       	push	r13
    23c8:	ef 92       	push	r14
    23ca:	ff 92       	push	r15
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	6c 01       	movw	r12, r24
    23d6:	5b 01       	movw	r10, r22
    23d8:	7a 01       	movw	r14, r20
    23da:	e9 01       	movw	r28, r18
    configASSERT( xCount > ( size_t ) 0 );

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
    23dc:	fc 01       	movw	r30, r24
    23de:	04 81       	ldd	r16, Z+4	; 0x04
    23e0:	15 81       	ldd	r17, Z+5	; 0x05
    23e2:	02 1b       	sub	r16, r18
    23e4:	13 0b       	sbc	r17, r19
    23e6:	40 17       	cp	r20, r16
    23e8:	51 07       	cpc	r21, r17
    23ea:	08 f4       	brcc	.+2      	; 0x23ee <prvWriteBytesToBuffer+0x2e>
    23ec:	8a 01       	movw	r16, r20

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength );
    23ee:	f6 01       	movw	r30, r12
    23f0:	84 85       	ldd	r24, Z+12	; 0x0c
    23f2:	95 85       	ldd	r25, Z+13	; 0x0d
    23f4:	a8 01       	movw	r20, r16
    23f6:	b5 01       	movw	r22, r10
    23f8:	8c 0f       	add	r24, r28
    23fa:	9d 1f       	adc	r25, r29
    23fc:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    2400:	0e 15       	cp	r16, r14
    2402:	1f 05       	cpc	r17, r15
    2404:	58 f4       	brcc	.+22     	; 0x241c <prvWriteBytesToBuffer+0x5c>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength );
    2406:	a7 01       	movw	r20, r14
    2408:	40 1b       	sub	r20, r16
    240a:	51 0b       	sbc	r21, r17
    240c:	b5 01       	movw	r22, r10
    240e:	60 0f       	add	r22, r16
    2410:	71 1f       	adc	r23, r17
    2412:	f6 01       	movw	r30, r12
    2414:	84 85       	ldd	r24, Z+12	; 0x0c
    2416:	95 85       	ldd	r25, Z+13	; 0x0d
    2418:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xHead += xCount;
    241c:	ce 01       	movw	r24, r28
    241e:	8e 0d       	add	r24, r14
    2420:	9f 1d       	adc	r25, r15

    if( xHead >= pxStreamBuffer->xLength )
    2422:	f6 01       	movw	r30, r12
    2424:	24 81       	ldd	r18, Z+4	; 0x04
    2426:	35 81       	ldd	r19, Z+5	; 0x05
    2428:	82 17       	cp	r24, r18
    242a:	93 07       	cpc	r25, r19
    242c:	10 f0       	brcs	.+4      	; 0x2432 <prvWriteBytesToBuffer+0x72>
    {
        xHead -= pxStreamBuffer->xLength;
    242e:	82 1b       	sub	r24, r18
    2430:	93 0b       	sbc	r25, r19
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xHead;
}
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	ff 90       	pop	r15
    243c:	ef 90       	pop	r14
    243e:	df 90       	pop	r13
    2440:	cf 90       	pop	r12
    2442:	bf 90       	pop	r11
    2444:	af 90       	pop	r10
    2446:	08 95       	ret

00002448 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
    2448:	af 92       	push	r10
    244a:	bf 92       	push	r11
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	00 d0       	rcall	.+0      	; 0x245e <prvWriteMessageToBuffer+0x16>
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	6c 01       	movw	r12, r24
    2464:	5b 01       	movw	r10, r22
    2466:	7a 01       	movw	r14, r20
    size_t xNextHead = pxStreamBuffer->xHead;
    2468:	fc 01       	movw	r30, r24
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    configMESSAGE_BUFFER_LENGTH_TYPE xMessageLength;

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    246e:	46 85       	ldd	r20, Z+14	; 0x0e
    2470:	40 ff       	sbrs	r20, 0
    2472:	28 c0       	rjmp	.+80     	; 0x24c4 <prvWriteMessageToBuffer+0x7c>
    {
        /* This is a message buffer, as opposed to a stream buffer. */

        /* Convert xDataLengthBytes to the message length type. */
        xMessageLength = ( configMESSAGE_BUFFER_LENGTH_TYPE ) xDataLengthBytes;
    2474:	fa 82       	std	Y+2, r15	; 0x02
    2476:	e9 82       	std	Y+1, r14	; 0x01

        /* Ensure the data length given fits within configMESSAGE_BUFFER_LENGTH_TYPE. */
        configASSERT( ( size_t ) xMessageLength == xDataLengthBytes );

        if( xSpace >= xRequiredSpace )
    2478:	20 17       	cp	r18, r16
    247a:	31 07       	cpc	r19, r17
    247c:	40 f1       	brcs	.+80     	; 0x24ce <prvWriteMessageToBuffer+0x86>
        {
            /* There is enough space to write both the message length and the message
             * itself into the buffer.  Start by writing the length of the data, the data
             * itself will be written later in this function. */
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
    247e:	9c 01       	movw	r18, r24
    2480:	42 e0       	ldi	r20, 0x02	; 2
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	be 01       	movw	r22, r28
    2486:	6f 5f       	subi	r22, 0xFF	; 255
    2488:	7f 4f       	sbci	r23, 0xFF	; 255
    248a:	c6 01       	movw	r24, r12
    248c:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <prvWriteBytesToBuffer>
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    }

    if( xDataLengthBytes != ( size_t ) 0 )
    2490:	e1 14       	cp	r14, r1
    2492:	f1 04       	cpc	r15, r1
    2494:	49 f0       	breq	.+18     	; 0x24a8 <prvWriteMessageToBuffer+0x60>
    {
        /* Write the data to the buffer. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead );
    2496:	9c 01       	movw	r18, r24
    2498:	a7 01       	movw	r20, r14
    249a:	b5 01       	movw	r22, r10
    249c:	c6 01       	movw	r24, r12
    249e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <prvWriteBytesToBuffer>
    24a2:	f6 01       	movw	r30, r12
    24a4:	93 83       	std	Z+3, r25	; 0x03
    24a6:	82 83       	std	Z+2, r24	; 0x02
    }

    return xDataLengthBytes;
}
    24a8:	c7 01       	movw	r24, r14
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	ff 90       	pop	r15
    24b8:	ef 90       	pop	r14
    24ba:	df 90       	pop	r13
    24bc:	cf 90       	pop	r12
    24be:	bf 90       	pop	r11
    24c0:	af 90       	pop	r10
    24c2:	08 95       	ret
    else
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    24c4:	2e 15       	cp	r18, r14
    24c6:	3f 05       	cpc	r19, r15
    24c8:	18 f7       	brcc	.-58     	; 0x2490 <prvWriteMessageToBuffer+0x48>
    24ca:	79 01       	movw	r14, r18
    24cc:	e1 cf       	rjmp	.-62     	; 0x2490 <prvWriteMessageToBuffer+0x48>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
        }
        else
        {
            /* Not enough space, so do not write data to the buffer. */
            xDataLengthBytes = 0;
    24ce:	f1 2c       	mov	r15, r1
    24d0:	e1 2c       	mov	r14, r1
    24d2:	ea cf       	rjmp	.-44     	; 0x24a8 <prvWriteMessageToBuffer+0x60>

000024d4 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xCount,
                                      size_t xTail )
{
    24d4:	af 92       	push	r10
    24d6:	bf 92       	push	r11
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	6c 01       	movw	r12, r24
    24ea:	5b 01       	movw	r10, r22
    24ec:	7a 01       	movw	r14, r20
    24ee:	e9 01       	movw	r28, r18
    configASSERT( xCount != ( size_t ) 0 );

    /* Calculate the number of bytes that can be read - which may be
     * less than the number wanted if the data wraps around to the start of
     * the buffer. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
    24f0:	fc 01       	movw	r30, r24
    24f2:	04 81       	ldd	r16, Z+4	; 0x04
    24f4:	15 81       	ldd	r17, Z+5	; 0x05
    24f6:	02 1b       	sub	r16, r18
    24f8:	13 0b       	sbc	r17, r19
    24fa:	40 17       	cp	r20, r16
    24fc:	51 07       	cpc	r21, r17
    24fe:	08 f4       	brcc	.+2      	; 0x2502 <prvReadBytesFromBuffer+0x2e>
    2500:	8a 01       	movw	r16, r20

    /* Obtain the number of bytes it is possible to obtain in the first
     * read.  Asserts check bounds of read and write. */
    configASSERT( xFirstLength <= xCount );
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength );
    2502:	f6 01       	movw	r30, r12
    2504:	64 85       	ldd	r22, Z+12	; 0x0c
    2506:	75 85       	ldd	r23, Z+13	; 0x0d
    2508:	6c 0f       	add	r22, r28
    250a:	7d 1f       	adc	r23, r29
    250c:	a8 01       	movw	r20, r16
    250e:	c5 01       	movw	r24, r10
    2510:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <memcpy>

    /* If the total number of wanted bytes is greater than the number
     * that could be read in the first read... */
    if( xCount > xFirstLength )
    2514:	0e 15       	cp	r16, r14
    2516:	1f 05       	cpc	r17, r15
    2518:	58 f4       	brcc	.+22     	; 0x2530 <prvReadBytesFromBuffer+0x5c>
    {
        /* ...then read the remaining bytes from the start of the buffer. */
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength );
    251a:	a7 01       	movw	r20, r14
    251c:	40 1b       	sub	r20, r16
    251e:	51 0b       	sbc	r21, r17
    2520:	f6 01       	movw	r30, r12
    2522:	64 85       	ldd	r22, Z+12	; 0x0c
    2524:	75 85       	ldd	r23, Z+13	; 0x0d
    2526:	c5 01       	movw	r24, r10
    2528:	80 0f       	add	r24, r16
    252a:	91 1f       	adc	r25, r17
    252c:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <memcpy>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Move the tail pointer to effectively remove the data read from the buffer. */
    xTail += xCount;
    2530:	ce 01       	movw	r24, r28
    2532:	8e 0d       	add	r24, r14
    2534:	9f 1d       	adc	r25, r15

    if( xTail >= pxStreamBuffer->xLength )
    2536:	f6 01       	movw	r30, r12
    2538:	24 81       	ldd	r18, Z+4	; 0x04
    253a:	35 81       	ldd	r19, Z+5	; 0x05
    253c:	82 17       	cp	r24, r18
    253e:	93 07       	cpc	r25, r19
    2540:	10 f0       	brcs	.+4      	; 0x2546 <prvReadBytesFromBuffer+0x72>
    {
        xTail -= pxStreamBuffer->xLength;
    2542:	82 1b       	sub	r24, r18
    2544:	93 0b       	sbc	r25, r19
    }

    return xTail;
}
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	ff 90       	pop	r15
    2550:	ef 90       	pop	r14
    2552:	df 90       	pop	r13
    2554:	cf 90       	pop	r12
    2556:	bf 90       	pop	r11
    2558:	af 90       	pop	r10
    255a:	08 95       	ret

0000255c <prvReadMessageFromBuffer>:

static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable )
{
    255c:	af 92       	push	r10
    255e:	bf 92       	push	r11
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	00 d0       	rcall	.+0      	; 0x2572 <prvReadMessageFromBuffer+0x16>
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	7c 01       	movw	r14, r24
    2578:	5b 01       	movw	r10, r22
    257a:	6a 01       	movw	r12, r20
    257c:	89 01       	movw	r16, r18
    size_t xCount, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
    size_t xNextTail = pxStreamBuffer->xTail;
    257e:	fc 01       	movw	r30, r24
    2580:	20 81       	ld	r18, Z
    2582:	31 81       	ldd	r19, Z+1	; 0x01

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2584:	86 85       	ldd	r24, Z+14	; 0x0e
    2586:	80 ff       	sbrs	r24, 0
    2588:	12 c0       	rjmp	.+36     	; 0x25ae <prvReadMessageFromBuffer+0x52>
    {
        /* A discrete message is being received.  First receive the length
         * of the message. */
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
    258a:	42 e0       	ldi	r20, 0x02	; 2
    258c:	50 e0       	ldi	r21, 0x00	; 0
    258e:	be 01       	movw	r22, r28
    2590:	6f 5f       	subi	r22, 0xFF	; 255
    2592:	7f 4f       	sbci	r23, 0xFF	; 255
    2594:	c7 01       	movw	r24, r14
    2596:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <prvReadBytesFromBuffer>
    259a:	9c 01       	movw	r18, r24
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
    25a0:	02 50       	subi	r16, 0x02	; 2
    25a2:	11 09       	sbc	r17, r1

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    25a4:	c8 16       	cp	r12, r24
    25a6:	d9 06       	cpc	r13, r25
    25a8:	f8 f4       	brcc	.+62     	; 0x25e8 <prvReadMessageFromBuffer+0x8c>
        {
            /* The user has provided insufficient space to read the message. */
            xNextMessageLength = 0;
    25aa:	d1 2c       	mov	r13, r1
    25ac:	c1 2c       	mov	r12, r1
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
    25ae:	c0 16       	cp	r12, r16
    25b0:	d1 06       	cpc	r13, r17
    25b2:	08 f4       	brcc	.+2      	; 0x25b6 <prvReadMessageFromBuffer+0x5a>
    25b4:	86 01       	movw	r16, r12

    if( xCount != ( size_t ) 0 )
    25b6:	01 15       	cp	r16, r1
    25b8:	11 05       	cpc	r17, r1
    25ba:	41 f0       	breq	.+16     	; 0x25cc <prvReadMessageFromBuffer+0x70>
    {
        /* Read the actual data and update the tail to mark the data as officially consumed. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail );
    25bc:	a8 01       	movw	r20, r16
    25be:	b5 01       	movw	r22, r10
    25c0:	c7 01       	movw	r24, r14
    25c2:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <prvReadBytesFromBuffer>
    25c6:	f7 01       	movw	r30, r14
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
    }

    return xCount;
}
    25cc:	c8 01       	movw	r24, r16
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	ff 90       	pop	r15
    25dc:	ef 90       	pop	r14
    25de:	df 90       	pop	r13
    25e0:	cf 90       	pop	r12
    25e2:	bf 90       	pop	r11
    25e4:	af 90       	pop	r10
    25e6:	08 95       	ret
    25e8:	6c 01       	movw	r12, r24
    25ea:	e1 cf       	rjmp	.-62     	; 0x25ae <prvReadMessageFromBuffer+0x52>

000025ec <xStreamBufferGenericCreate>:
    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xStreamBufferType,
                                                     StreamBufferCallbackFunction_t pxSendCompletedCallback,
                                                     StreamBufferCallbackFunction_t pxReceiveCompletedCallback )
    {
    25ec:	ef 92       	push	r14
    25ee:	ff 92       	push	r15
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	ec 01       	movw	r28, r24
    25f8:	7b 01       	movw	r14, r22
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    25fa:	11 e0       	ldi	r17, 0x01	; 1

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
    25fc:	41 30       	cpi	r20, 0x01	; 1
    25fe:	21 f0       	breq	.+8      	; 0x2608 <xStreamBufferGenericCreate+0x1c>
            configASSERT( xBufferSizeBytes > 0 );
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
    2600:	10 e0       	ldi	r17, 0x00	; 0
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
        }
        else if( xStreamBufferType == sbTYPE_STREAM_BATCHING_BUFFER )
    2602:	42 30       	cpi	r20, 0x02	; 2
    2604:	09 f4       	brne	.+2      	; 0x2608 <xStreamBufferGenericCreate+0x1c>
        {
            /* Is a batching buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_BATCHING_BUFFER;
    2606:	14 e0       	ldi	r17, 0x04	; 4

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
    2608:	e1 14       	cp	r14, r1
    260a:	f1 04       	cpc	r15, r1
    260c:	19 f4       	brne	.+6      	; 0x2614 <xStreamBufferGenericCreate+0x28>
        {
            xTriggerLevelBytes = ( size_t ) 1;
    260e:	ee 24       	eor	r14, r14
    2610:	e3 94       	inc	r14
    2612:	f1 2c       	mov	r15, r1
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
        }
        else
        {
            pvAllocatedMemory = NULL;
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	e0 e0       	ldi	r30, 0x00	; 0
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
    2618:	cf 3e       	cpi	r28, 0xEF	; 239
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	d8 07       	cpc	r29, r24
    261e:	b8 f4       	brcc	.+46     	; 0x264e <xStreamBufferGenericCreate+0x62>
        {
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
    2620:	ce 01       	movw	r24, r28
    2622:	41 96       	adiw	r24, 0x11	; 17
    2624:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <pvPortMalloc>
    2628:	fc 01       	movw	r30, r24
        else
        {
            pvAllocatedMemory = NULL;
        }

        if( pvAllocatedMemory != NULL )
    262a:	89 2b       	or	r24, r25
    262c:	81 f0       	breq	.+32     	; 0x264e <xStreamBufferGenericCreate+0x62>
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    262e:	8c e0       	ldi	r24, 0x0C	; 12
    2630:	df 01       	movw	r26, r30
    2632:	1d 92       	st	X+, r1
    2634:	8a 95       	dec	r24
    2636:	e9 f7       	brne	.-6      	; 0x2632 <xStreamBufferGenericCreate+0x46>
        if( pvAllocatedMemory != NULL )
        {
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */
    2638:	cf 01       	movw	r24, r30
    263a:	40 96       	adiw	r24, 0x10	; 16
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    263c:	95 87       	std	Z+13, r25	; 0x0d
    263e:	84 87       	std	Z+12, r24	; 0x0c
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
        {
            xBufferSizeBytes++;
    2640:	21 96       	adiw	r28, 0x01	; 1
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    2642:	d5 83       	std	Z+5, r29	; 0x05
    2644:	c4 83       	std	Z+4, r28	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2646:	f7 82       	std	Z+7, r15	; 0x07
    2648:	e6 82       	std	Z+6, r14	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    264a:	16 87       	std	Z+14, r17	; 0x0e
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    264c:	17 86       	std	Z+15, r1	; 0x0f

        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        return ( StreamBufferHandle_t ) pvAllocatedMemory;
    }
    264e:	cf 01       	movw	r24, r30
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	08 95       	ret

0000265c <vStreamBufferDelete>:

    configASSERT( pxStreamBuffer );

    traceSTREAM_BUFFER_DELETE( xStreamBuffer );

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    265c:	fc 01       	movw	r30, r24
    265e:	26 85       	ldd	r18, Z+14	; 0x0e
    2660:	21 ff       	sbrs	r18, 1
    {
        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
        {
            /* Both the structure and the buffer were allocated using a single call
            * to pvPortMalloc(), hence only one call to vPortFree() is required. */
            vPortFree( ( void * ) pxStreamBuffer );
    2662:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <vPortFree>
    }
    else
    {
        /* The structure and buffer were not allocated dynamically and cannot be
         * freed - just scrub the structure so future use will assert. */
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    2666:	20 e1       	ldi	r18, 0x10	; 16
    2668:	11 92       	st	Z+, r1
    266a:	2a 95       	dec	r18
    266c:	e9 f7       	brne	.-6      	; 0x2668 <vStreamBufferDelete+0xc>
    }

    traceRETURN_vStreamBufferDelete();
}
    266e:	08 95       	ret

00002670 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    2670:	fc 01       	movw	r30, r24
        uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
    }
    #endif

    /* Can only reset a message buffer if there are no tasks blocked on it. */
    taskENTER_CRITICAL();
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	0f 92       	push	r0
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    2678:	80 85       	ldd	r24, Z+8	; 0x08
    267a:	91 85       	ldd	r25, Z+9	; 0x09
    267c:	89 2b       	or	r24, r25
    267e:	b1 f4       	brne	.+44     	; 0x26ac <xStreamBufferReset+0x3c>
    2680:	82 85       	ldd	r24, Z+10	; 0x0a
    2682:	93 85       	ldd	r25, Z+11	; 0x0b
    2684:	89 2b       	or	r24, r25
    2686:	91 f4       	brne	.+36     	; 0x26ac <xStreamBufferReset+0x3c>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    2688:	86 81       	ldd	r24, Z+6	; 0x06
    268a:	97 81       	ldd	r25, Z+7	; 0x07
    268c:	24 81       	ldd	r18, Z+4	; 0x04
    268e:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    2690:	4c e0       	ldi	r20, 0x0C	; 12
    2692:	df 01       	movw	r26, r30
    2694:	1d 92       	st	X+, r1
    2696:	4a 95       	dec	r20
    2698:	e9 f7       	brne	.-6      	; 0x2694 <xStreamBufferReset+0x24>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    269a:	35 83       	std	Z+5, r19	; 0x05
    269c:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    269e:	97 83       	std	Z+7, r25	; 0x07
    26a0:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    26a2:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET( xStreamBuffer );

            xReturn = pdPASS;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xStreamBufferReset( xReturn );

    return xReturn;
}
    26aa:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	fb cf       	rjmp	.-10     	; 0x26a6 <xStreamBufferReset+0x36>

000026b0 <xStreamBufferResetFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    26b0:	fc 01       	movw	r30, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    26b2:	80 85       	ldd	r24, Z+8	; 0x08
    26b4:	91 85       	ldd	r25, Z+9	; 0x09
    26b6:	89 2b       	or	r24, r25
    26b8:	a1 f4       	brne	.+40     	; 0x26e2 <xStreamBufferResetFromISR+0x32>
    26ba:	82 85       	ldd	r24, Z+10	; 0x0a
    26bc:	93 85       	ldd	r25, Z+11	; 0x0b
    26be:	89 2b       	or	r24, r25
    26c0:	81 f4       	brne	.+32     	; 0x26e2 <xStreamBufferResetFromISR+0x32>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    26c2:	86 81       	ldd	r24, Z+6	; 0x06
    26c4:	97 81       	ldd	r25, Z+7	; 0x07
    26c6:	24 81       	ldd	r18, Z+4	; 0x04
    26c8:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    26ca:	4c e0       	ldi	r20, 0x0C	; 12
    26cc:	df 01       	movw	r26, r30
    26ce:	1d 92       	st	X+, r1
    26d0:	4a 95       	dec	r20
    26d2:	e9 f7       	brne	.-6      	; 0x26ce <xStreamBufferResetFromISR+0x1e>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    26d4:	35 83       	std	Z+5, r19	; 0x05
    26d6:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    26d8:	97 83       	std	Z+7, r25	; 0x07
    26da:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    26dc:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET_FROM_ISR( xStreamBuffer );

            xReturn = pdPASS;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferResetFromISR( xReturn );

    return xReturn;
}
    26e4:	08 95       	ret

000026e6 <xStreamBufferSetTriggerLevel>:
    traceENTER_xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );

    configASSERT( pxStreamBuffer );

    /* It is not valid for the trigger level to be 0. */
    if( xTriggerLevel == ( size_t ) 0 )
    26e6:	61 15       	cp	r22, r1
    26e8:	71 05       	cpc	r23, r1
    26ea:	11 f4       	brne	.+4      	; 0x26f0 <xStreamBufferSetTriggerLevel+0xa>
    {
        xTriggerLevel = ( size_t ) 1;
    26ec:	61 e0       	ldi	r22, 0x01	; 1
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    }

    /* The trigger level is the number of bytes that must be in the stream
     * buffer before a task that is waiting for data is unblocked. */
    if( xTriggerLevel < pxStreamBuffer->xLength )
    26f0:	fc 01       	movw	r30, r24
    26f2:	24 81       	ldd	r18, Z+4	; 0x04
    26f4:	35 81       	ldd	r19, Z+5	; 0x05
    26f6:	62 17       	cp	r22, r18
    26f8:	73 07       	cpc	r23, r19
    26fa:	20 f4       	brcc	.+8      	; 0x2704 <xStreamBufferSetTriggerLevel+0x1e>
    {
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    26fc:	77 83       	std	Z+7, r23	; 0x07
    26fe:	66 83       	std	Z+6, r22	; 0x06
        xReturn = pdPASS;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	08 95       	ret
    }
    else
    {
        xReturn = pdFALSE;
    2704:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferSetTriggerLevel( xReturn );

    return xReturn;
}
    2706:	08 95       	ret

00002708 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    2708:	fc 01       	movw	r30, r24
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    270a:	24 81       	ldd	r18, Z+4	; 0x04
    270c:	35 81       	ldd	r19, Z+5	; 0x05
    /* The code below reads xTail and then xHead.  This is safe if the stream
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
    270e:	80 81       	ld	r24, Z
    2710:	91 81       	ldd	r25, Z+1	; 0x01
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
        xSpace -= pxStreamBuffer->xHead;
    2716:	42 81       	ldd	r20, Z+2	; 0x02
    2718:	53 81       	ldd	r21, Z+3	; 0x03
    } while( xOriginalTail != pxStreamBuffer->xTail );
    271a:	a0 81       	ld	r26, Z
    271c:	b1 81       	ldd	r27, Z+1	; 0x01
    271e:	a8 17       	cp	r26, r24
    2720:	b9 07       	cpc	r27, r25
    2722:	a9 f7       	brne	.-22     	; 0x270e <xStreamBufferSpacesAvailable+0x6>

    xSpace -= ( size_t ) 1;
    2724:	c9 01       	movw	r24, r18
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	86 0f       	add	r24, r22
    272a:	97 1f       	adc	r25, r23
    272c:	84 1b       	sub	r24, r20
    272e:	95 0b       	sbc	r25, r21

    if( xSpace >= pxStreamBuffer->xLength )
    2730:	82 17       	cp	r24, r18
    2732:	93 07       	cpc	r25, r19
    2734:	10 f0       	brcs	.+4      	; 0x273a <xStreamBufferSpacesAvailable+0x32>
    {
        xSpace -= pxStreamBuffer->xLength;
    2736:	82 1b       	sub	r24, r18
    2738:	93 0b       	sbc	r25, r19
    }

    traceRETURN_xStreamBufferSpacesAvailable( xSpace );

    return xSpace;
}
    273a:	08 95       	ret

0000273c <xStreamBufferBytesAvailable>:

    traceENTER_xStreamBufferBytesAvailable( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    273c:	0c 94 cd 11 	jmp	0x239a	; 0x239a <prvBytesInBuffer>

00002740 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2740:	2f 92       	push	r2
    2742:	3f 92       	push	r3
    2744:	4f 92       	push	r4
    2746:	5f 92       	push	r5
    2748:	6f 92       	push	r6
    274a:	7f 92       	push	r7
    274c:	8f 92       	push	r8
    274e:	9f 92       	push	r9
    2750:	af 92       	push	r10
    2752:	bf 92       	push	r11
    2754:	cf 92       	push	r12
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	00 d0       	rcall	.+0      	; 0x2766 <xStreamBufferSend+0x26>
    2766:	00 d0       	rcall	.+0      	; 0x2768 <xStreamBufferSend+0x28>
    2768:	1f 92       	push	r1
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	5c 01       	movw	r10, r24
    2770:	1b 01       	movw	r2, r22
    2772:	2a 01       	movw	r4, r20
    2774:	3d 83       	std	Y+5, r19	; 0x05
    2776:	2c 83       	std	Y+4, r18	; 0x04
    configASSERT( pvTxData );
    configASSERT( pxStreamBuffer );

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    2778:	fc 01       	movw	r30, r24
    277a:	84 81       	ldd	r24, Z+4	; 0x04
    277c:	95 81       	ldd	r25, Z+5	; 0x05
    277e:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2780:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2782:	4a 01       	movw	r8, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2784:	20 ff       	sbrs	r18, 0
    2786:	54 c0       	rjmp	.+168    	; 0x2830 <xStreamBufferSend+0xf0>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2788:	f2 e0       	ldi	r31, 0x02	; 2
    278a:	8f 0e       	add	r8, r31
    278c:	91 1c       	adc	r9, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    278e:	88 15       	cp	r24, r8
    2790:	99 05       	cpc	r25, r9
    2792:	10 f4       	brcc	.+4      	; 0x2798 <xStreamBufferSend+0x58>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    2794:	1d 82       	std	Y+5, r1	; 0x05
    2796:	1c 82       	std	Y+4, r1	; 0x04
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2798:	8c 81       	ldd	r24, Y+4	; 0x04
    279a:	9d 81       	ldd	r25, Y+5	; 0x05
    279c:	89 2b       	or	r24, r25
    279e:	09 f0       	breq	.+2      	; 0x27a2 <xStreamBufferSend+0x62>
    27a0:	4d c0       	rjmp	.+154    	; 0x283c <xStreamBufferSend+0xfc>
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    27a2:	c5 01       	movw	r24, r10
    27a4:	0e 94 84 13 	call	0x2708	; 0x2708 <xStreamBufferSpacesAvailable>
    27a8:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    27aa:	84 01       	movw	r16, r8
    27ac:	93 01       	movw	r18, r6
    27ae:	a2 01       	movw	r20, r4
    27b0:	b1 01       	movw	r22, r2
    27b2:	c5 01       	movw	r24, r10
    27b4:	0e 94 24 12 	call	0x2448	; 0x2448 <prvWriteMessageToBuffer>
    27b8:	4c 01       	movw	r8, r24

    if( xReturn > ( size_t ) 0 )
    27ba:	89 2b       	or	r24, r25
    27bc:	01 f1       	breq	.+64     	; 0x27fe <xStreamBufferSend+0xbe>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    27be:	c5 01       	movw	r24, r10
    27c0:	0e 94 cd 11 	call	0x239a	; 0x239a <prvBytesInBuffer>
    27c4:	f5 01       	movw	r30, r10
    27c6:	26 81       	ldd	r18, Z+6	; 0x06
    27c8:	37 81       	ldd	r19, Z+7	; 0x07
    27ca:	82 17       	cp	r24, r18
    27cc:	93 07       	cpc	r25, r19
    27ce:	b8 f0       	brcs	.+46     	; 0x27fe <xStreamBufferSend+0xbe>
        {
            prvSEND_COMPLETED( pxStreamBuffer );
    27d0:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
    27d4:	f5 01       	movw	r30, r10
    27d6:	80 85       	ldd	r24, Z+8	; 0x08
    27d8:	91 85       	ldd	r25, Z+9	; 0x09
    27da:	89 2b       	or	r24, r25
    27dc:	71 f0       	breq	.+28     	; 0x27fa <xStreamBufferSend+0xba>
    27de:	80 85       	ldd	r24, Z+8	; 0x08
    27e0:	91 85       	ldd	r25, Z+9	; 0x09
    27e2:	f1 2c       	mov	r15, r1
    27e4:	e1 2c       	mov	r14, r1
    27e6:	00 e0       	ldi	r16, 0x00	; 0
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	a9 01       	movw	r20, r18
    27ee:	67 85       	ldd	r22, Z+15	; 0x0f
    27f0:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <xTaskGenericNotify>
    27f4:	f5 01       	movw	r30, r10
    27f6:	11 86       	std	Z+9, r1	; 0x09
    27f8:	10 86       	std	Z+8, r1	; 0x08
    27fa:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    }

    traceRETURN_xStreamBufferSend( xReturn );

    return xReturn;
}
    27fe:	c4 01       	movw	r24, r8
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	ff 90       	pop	r15
    2814:	ef 90       	pop	r14
    2816:	df 90       	pop	r13
    2818:	cf 90       	pop	r12
    281a:	bf 90       	pop	r11
    281c:	af 90       	pop	r10
    281e:	9f 90       	pop	r9
    2820:	8f 90       	pop	r8
    2822:	7f 90       	pop	r7
    2824:	6f 90       	pop	r6
    2826:	5f 90       	pop	r5
    2828:	4f 90       	pop	r4
    282a:	3f 90       	pop	r3
    282c:	2f 90       	pop	r2
    282e:	08 95       	ret
    2830:	84 17       	cp	r24, r20
    2832:	95 07       	cpc	r25, r21
    2834:	08 f0       	brcs	.+2      	; 0x2838 <xStreamBufferSend+0xf8>
    2836:	b0 cf       	rjmp	.-160    	; 0x2798 <xStreamBufferSend+0x58>
    2838:	4c 01       	movw	r8, r24
    283a:	ae cf       	rjmp	.-164    	; 0x2798 <xStreamBufferSend+0x58>
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    {
        vTaskSetTimeOutState( &xTimeOut );
    283c:	ce 01       	movw	r24, r28
    283e:	01 96       	adiw	r24, 0x01	; 1
    2840:	0e 94 b8 1c 	call	0x3970	; 0x3970 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    284a:	c5 01       	movw	r24, r10
    284c:	0e 94 84 13 	call	0x2708	; 0x2708 <xStreamBufferSpacesAvailable>
    2850:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    2852:	88 15       	cp	r24, r8
    2854:	99 05       	cpc	r25, r9
    2856:	58 f5       	brcc	.+86     	; 0x28ae <xStreamBufferSend+0x16e>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    2858:	f5 01       	movw	r30, r10
    285a:	67 85       	ldd	r22, Z+15	; 0x0f
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	0e 94 02 21 	call	0x4204	; 0x4204 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2864:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xTaskGetCurrentTaskHandle>
    2868:	f5 01       	movw	r30, r10
    286a:	93 87       	std	Z+11, r25	; 0x0b
    286c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    286e:	0f 90       	pop	r0
    2870:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2872:	cc 80       	ldd	r12, Y+4	; 0x04
    2874:	dd 80       	ldd	r13, Y+5	; 0x05
    2876:	f1 2c       	mov	r15, r1
    2878:	e1 2c       	mov	r14, r1
    287a:	00 e0       	ldi	r16, 0x00	; 0
    287c:	10 e0       	ldi	r17, 0x00	; 0
    287e:	98 01       	movw	r18, r16
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	ba 01       	movw	r22, r20
    2886:	87 85       	ldd	r24, Z+15	; 0x0f
    2888:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    288c:	f5 01       	movw	r30, r10
    288e:	13 86       	std	Z+11, r1	; 0x0b
    2890:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2892:	be 01       	movw	r22, r28
    2894:	6c 5f       	subi	r22, 0xFC	; 252
    2896:	7f 4f       	sbci	r23, 0xFF	; 255
    2898:	ce 01       	movw	r24, r28
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <xTaskCheckForTimeOut>
    28a0:	88 23       	and	r24, r24
    28a2:	81 f2       	breq	.-96     	; 0x2844 <xStreamBufferSend+0x104>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    28a4:	61 14       	cp	r6, r1
    28a6:	71 04       	cpc	r7, r1
    28a8:	09 f4       	brne	.+2      	; 0x28ac <xStreamBufferSend+0x16c>
    28aa:	7b cf       	rjmp	.-266    	; 0x27a2 <xStreamBufferSend+0x62>
    28ac:	7e cf       	rjmp	.-260    	; 0x27aa <xStreamBufferSend+0x6a>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    28ae:	0f 90       	pop	r0
    28b0:	0f be       	out	0x3f, r0	; 63
                    break;
    28b2:	f8 cf       	rjmp	.-16     	; 0x28a4 <xStreamBufferSend+0x164>

000028b4 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    28b4:	af 92       	push	r10
    28b6:	bf 92       	push	r11
    28b8:	cf 92       	push	r12
    28ba:	df 92       	push	r13
    28bc:	ef 92       	push	r14
    28be:	ff 92       	push	r15
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	ec 01       	movw	r28, r24
    28ca:	5b 01       	movw	r10, r22
    28cc:	7a 01       	movw	r14, r20
    28ce:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    28d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    28d2:	8a 01       	movw	r16, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    28d4:	80 ff       	sbrs	r24, 0
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <xStreamBufferSendFromISR+0x28>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    28d8:	0e 5f       	subi	r16, 0xFE	; 254
    28da:	1f 4f       	sbci	r17, 0xFF	; 255
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    28dc:	ce 01       	movw	r24, r28
    28de:	0e 94 84 13 	call	0x2708	; 0x2708 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    28e2:	9c 01       	movw	r18, r24
    28e4:	a7 01       	movw	r20, r14
    28e6:	b5 01       	movw	r22, r10
    28e8:	ce 01       	movw	r24, r28
    28ea:	0e 94 24 12 	call	0x2448	; 0x2448 <prvWriteMessageToBuffer>
    28ee:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    28f0:	89 2b       	or	r24, r25
    28f2:	c9 f0       	breq	.+50     	; 0x2926 <xStreamBufferSendFromISR+0x72>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    28f4:	ce 01       	movw	r24, r28
    28f6:	0e 94 cd 11 	call	0x239a	; 0x239a <prvBytesInBuffer>
    28fa:	2e 81       	ldd	r18, Y+6	; 0x06
    28fc:	3f 81       	ldd	r19, Y+7	; 0x07
    28fe:	82 17       	cp	r24, r18
    2900:	93 07       	cpc	r25, r19
    2902:	88 f0       	brcs	.+34     	; 0x2926 <xStreamBufferSendFromISR+0x72>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2904:	88 85       	ldd	r24, Y+8	; 0x08
    2906:	99 85       	ldd	r25, Y+9	; 0x09
    2908:	89 2b       	or	r24, r25
    290a:	69 f0       	breq	.+26     	; 0x2926 <xStreamBufferSendFromISR+0x72>
    290c:	88 85       	ldd	r24, Y+8	; 0x08
    290e:	99 85       	ldd	r25, Y+9	; 0x09
    2910:	f1 2c       	mov	r15, r1
    2912:	e1 2c       	mov	r14, r1
    2914:	00 e0       	ldi	r16, 0x00	; 0
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	a9 01       	movw	r20, r18
    291c:	6f 85       	ldd	r22, Y+15	; 0x0f
    291e:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskGenericNotifyFromISR>
    2922:	19 86       	std	Y+9, r1	; 0x09
    2924:	18 86       	std	Y+8, r1	; 0x08

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
    traceRETURN_xStreamBufferSendFromISR( xReturn );

    return xReturn;
}
    2926:	c5 01       	movw	r24, r10
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	ff 90       	pop	r15
    2932:	ef 90       	pop	r14
    2934:	df 90       	pop	r13
    2936:	cf 90       	pop	r12
    2938:	bf 90       	pop	r11
    293a:	af 90       	pop	r10
    293c:	08 95       	ret

0000293e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    293e:	6f 92       	push	r6
    2940:	7f 92       	push	r7
    2942:	8f 92       	push	r8
    2944:	9f 92       	push	r9
    2946:	af 92       	push	r10
    2948:	bf 92       	push	r11
    294a:	cf 92       	push	r12
    294c:	df 92       	push	r13
    294e:	ef 92       	push	r14
    2950:	ff 92       	push	r15
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	ec 01       	movw	r28, r24
    295c:	4b 01       	movw	r8, r22
    295e:	3a 01       	movw	r6, r20
    2960:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2962:	8e 85       	ldd	r24, Y+14	; 0x0e
    2964:	80 fd       	sbrc	r24, 0
    2966:	47 c0       	rjmp	.+142    	; 0x29f6 <xStreamBufferReceive+0xb8>
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2968:	b1 2c       	mov	r11, r1
    296a:	a1 2c       	mov	r10, r1
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_BATCHING_BUFFER ) != ( uint8_t ) 0 )
    296c:	82 ff       	sbrs	r24, 2
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <xStreamBufferReceive+0x36>
    {
        /* Force task to block if the batching buffer contains less bytes than
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    2970:	ae 80       	ldd	r10, Y+6	; 0x06
    2972:	bf 80       	ldd	r11, Y+7	; 0x07
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2974:	c1 14       	cp	r12, r1
    2976:	d1 04       	cpc	r13, r1
    2978:	29 f1       	breq	.+74     	; 0x29c4 <xStreamBufferReceive+0x86>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2980:	ce 01       	movw	r24, r28
    2982:	0e 94 cd 11 	call	0x239a	; 0x239a <prvBytesInBuffer>
    2986:	8c 01       	movw	r16, r24
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. If this function was invoked by a stream batch buffer read
             * then xBytesToStoreMessageLength will be xTriggerLevelBytes value
             * for the buffer.*/
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2988:	a8 16       	cp	r10, r24
    298a:	b9 06       	cpc	r11, r25
    298c:	48 f0       	brcs	.+18     	; 0x29a0 <xStreamBufferReceive+0x62>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    298e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	0e 94 02 21 	call	0x4204	; 0x4204 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2998:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xTaskGetCurrentTaskHandle>
    299c:	99 87       	std	Y+9, r25	; 0x09
    299e:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    29a0:	0f 90       	pop	r0
    29a2:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    29a4:	a0 16       	cp	r10, r16
    29a6:	b1 06       	cpc	r11, r17
    29a8:	50 f1       	brcs	.+84     	; 0x29fe <xStreamBufferReceive+0xc0>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    29aa:	f1 2c       	mov	r15, r1
    29ac:	e1 2c       	mov	r14, r1
    29ae:	00 e0       	ldi	r16, 0x00	; 0
    29b0:	10 e0       	ldi	r17, 0x00	; 0
    29b2:	98 01       	movw	r18, r16
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	ba 01       	movw	r22, r20
    29ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    29bc:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    29c0:	19 86       	std	Y+9, r1	; 0x09
    29c2:	18 86       	std	Y+8, r1	; 0x08
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    29c4:	ce 01       	movw	r24, r28
    29c6:	0e 94 cd 11 	call	0x239a	; 0x239a <prvBytesInBuffer>
    29ca:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    29cc:	a8 16       	cp	r10, r24
    29ce:	b9 06       	cpc	r11, r25
    29d0:	b0 f0       	brcs	.+44     	; 0x29fe <xStreamBufferReceive+0xc0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    29d2:	b1 2c       	mov	r11, r1
    29d4:	a1 2c       	mov	r10, r1
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
}
    29d6:	c5 01       	movw	r24, r10
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	ff 90       	pop	r15
    29e2:	ef 90       	pop	r14
    29e4:	df 90       	pop	r13
    29e6:	cf 90       	pop	r12
    29e8:	bf 90       	pop	r11
    29ea:	af 90       	pop	r10
    29ec:	9f 90       	pop	r9
    29ee:	8f 90       	pop	r8
    29f0:	7f 90       	pop	r7
    29f2:	6f 90       	pop	r6
    29f4:	08 95       	ret
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	a8 2e       	mov	r10, r24
    29fa:	b1 2c       	mov	r11, r1
    29fc:	bb cf       	rjmp	.-138    	; 0x2974 <xStreamBufferReceive+0x36>
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    29fe:	98 01       	movw	r18, r16
    2a00:	a3 01       	movw	r20, r6
    2a02:	b4 01       	movw	r22, r8
    2a04:	ce 01       	movw	r24, r28
    2a06:	0e 94 ae 12 	call	0x255c	; 0x255c <prvReadMessageFromBuffer>
    2a0a:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2a0c:	89 2b       	or	r24, r25
    2a0e:	09 f3       	breq	.-62     	; 0x29d2 <xStreamBufferReceive+0x94>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            prvRECEIVE_COMPLETED( xStreamBuffer );
    2a10:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
    2a14:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a16:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a18:	89 2b       	or	r24, r25
    2a1a:	69 f0       	breq	.+26     	; 0x2a36 <xStreamBufferReceive+0xf8>
    2a1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a20:	f1 2c       	mov	r15, r1
    2a22:	e1 2c       	mov	r14, r1
    2a24:	00 e0       	ldi	r16, 0x00	; 0
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	a9 01       	movw	r20, r18
    2a2c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a2e:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <xTaskGenericNotify>
    2a32:	1b 86       	std	Y+11, r1	; 0x0b
    2a34:	1a 86       	std	Y+10, r1	; 0x0a
    2a36:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
    2a3a:	cd cf       	rjmp	.-102    	; 0x29d6 <xStreamBufferReceive+0x98>

00002a3c <xStreamBufferNextMessageLengthBytes>:
}
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <xStreamBufferNextMessageLengthBytes+0xa>
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    traceENTER_xStreamBufferNextMessageLengthBytes( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	26 85       	ldd	r18, Z+14	; 0x0e
    2a4e:	20 fd       	sbrc	r18, 0
    2a50:	09 c0       	rjmp	.+18     	; 0x2a64 <xStreamBufferNextMessageLengthBytes+0x28>
            xReturn = 0;
        }
    }
    else
    {
        xReturn = 0;
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
}
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	08 95       	ret
    2a64:	8c 01       	movw	r16, r24
    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2a66:	0e 94 cd 11 	call	0x239a	; 0x239a <prvBytesInBuffer>

        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    2a6a:	03 97       	sbiw	r24, 0x03	; 3
    2a6c:	90 f3       	brcs	.-28     	; 0x2a52 <xStreamBufferNextMessageLengthBytes+0x16>
        {
            /* The number of bytes available is greater than the number of bytes
             * required to hold the length of the next message, so another message
             * is available. */
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
    2a6e:	f8 01       	movw	r30, r16
    2a70:	20 81       	ld	r18, Z
    2a72:	31 81       	ldd	r19, Z+1	; 0x01
    2a74:	42 e0       	ldi	r20, 0x02	; 2
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	be 01       	movw	r22, r28
    2a7a:	6f 5f       	subi	r22, 0xFF	; 255
    2a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7e:	c8 01       	movw	r24, r16
    2a80:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
        xReturn = 0;
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
    2a88:	e6 cf       	rjmp	.-52     	; 0x2a56 <xStreamBufferNextMessageLengthBytes+0x1a>

00002a8a <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    2a8a:	af 92       	push	r10
    2a8c:	bf 92       	push	r11
    2a8e:	cf 92       	push	r12
    2a90:	df 92       	push	r13
    2a92:	ef 92       	push	r14
    2a94:	ff 92       	push	r15
    2a96:	0f 93       	push	r16
    2a98:	1f 93       	push	r17
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	ec 01       	movw	r28, r24
    2aa0:	5b 01       	movw	r10, r22
    2aa2:	7a 01       	movw	r14, r20
    2aa4:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2aa6:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2aa8:	10 e0       	ldi	r17, 0x00	; 0
    2aaa:	00 e0       	ldi	r16, 0x00	; 0
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2aac:	80 ff       	sbrs	r24, 0
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <xStreamBufferReceiveFromISR+0x2a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2ab0:	02 e0       	ldi	r16, 0x02	; 2
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	0e 94 cd 11 	call	0x239a	; 0x239a <prvBytesInBuffer>
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2aba:	08 17       	cp	r16, r24
    2abc:	19 07       	cpc	r17, r25
    2abe:	70 f0       	brcs	.+28     	; 0x2adc <xStreamBufferReceiveFromISR+0x52>
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2ac0:	b1 2c       	mov	r11, r1
    2ac2:	a1 2c       	mov	r10, r1

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
}
    2ac4:	c5 01       	movw	r24, r10
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	1f 91       	pop	r17
    2acc:	0f 91       	pop	r16
    2ace:	ff 90       	pop	r15
    2ad0:	ef 90       	pop	r14
    2ad2:	df 90       	pop	r13
    2ad4:	cf 90       	pop	r12
    2ad6:	bf 90       	pop	r11
    2ad8:	af 90       	pop	r10
    2ada:	08 95       	ret
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    2adc:	9c 01       	movw	r18, r24
    2ade:	a7 01       	movw	r20, r14
    2ae0:	b5 01       	movw	r22, r10
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	0e 94 ae 12 	call	0x255c	; 0x255c <prvReadMessageFromBuffer>
    2ae8:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2aea:	89 2b       	or	r24, r25
    2aec:	49 f3       	breq	.-46     	; 0x2ac0 <xStreamBufferReceiveFromISR+0x36>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2aee:	8a 85       	ldd	r24, Y+10	; 0x0a
    2af0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2af2:	89 2b       	or	r24, r25
    2af4:	39 f3       	breq	.-50     	; 0x2ac4 <xStreamBufferReceiveFromISR+0x3a>
    2af6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2af8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2afa:	f1 2c       	mov	r15, r1
    2afc:	e1 2c       	mov	r14, r1
    2afe:	00 e0       	ldi	r16, 0x00	; 0
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	a9 01       	movw	r20, r18
    2b06:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b08:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskGenericNotifyFromISR>
    2b0c:	1b 86       	std	Y+11, r1	; 0x0b
    2b0e:	1a 86       	std	Y+10, r1	; 0x0a
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
    2b10:	d9 cf       	rjmp	.-78     	; 0x2ac4 <xStreamBufferReceiveFromISR+0x3a>

00002b12 <xStreamBufferIsEmpty>:
    traceENTER_xStreamBufferIsEmpty( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* True if no bytes are available. */
    xTail = pxStreamBuffer->xTail;
    2b12:	fc 01       	movw	r30, r24
    2b14:	20 81       	ld	r18, Z
    2b16:	31 81       	ldd	r19, Z+1	; 0x01

    if( pxStreamBuffer->xHead == xTail )
    2b18:	42 81       	ldd	r20, Z+2	; 0x02
    2b1a:	53 81       	ldd	r21, Z+3	; 0x03
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	42 17       	cp	r20, r18
    2b20:	53 07       	cpc	r21, r19
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <xStreamBufferIsEmpty+0x14>
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsEmpty( xReturn );

    return xReturn;
}
    2b26:	08 95       	ret

00002b28 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2b30:	d0 e0       	ldi	r29, 0x00	; 0
    2b32:	c0 e0       	ldi	r28, 0x00	; 0

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2b34:	20 ff       	sbrs	r18, 0
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <xStreamBufferIsFull+0x14>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2b38:	c2 e0       	ldi	r28, 0x02	; 2
    2b3a:	d0 e0       	ldi	r29, 0x00	; 0
    {
        xBytesToStoreMessageLength = 0;
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    2b3c:	0e 94 84 13 	call	0x2708	; 0x2708 <xStreamBufferSpacesAvailable>
    2b40:	21 e0       	ldi	r18, 0x01	; 1
    2b42:	c8 17       	cp	r28, r24
    2b44:	d9 07       	cpc	r29, r25
    2b46:	08 f4       	brcc	.+2      	; 0x2b4a <xStreamBufferIsFull+0x22>
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsFull( xReturn );

    return xReturn;
}
    2b4a:	82 2f       	mov	r24, r18
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	08 95       	ret

00002b52 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
    2b52:	cf 92       	push	r12
    2b54:	df 92       	push	r13
    2b56:	ef 92       	push	r14
    2b58:	ff 92       	push	r15
    2b5a:	0f 93       	push	r16
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    2b60:	fc 01       	movw	r30, r24
    2b62:	20 85       	ldd	r18, Z+8	; 0x08
    2b64:	31 85       	ldd	r19, Z+9	; 0x09
    2b66:	23 2b       	or	r18, r19
    2b68:	c1 f0       	breq	.+48     	; 0x2b9a <xStreamBufferSendCompletedFromISR+0x48>
    2b6a:	6b 01       	movw	r12, r22
    2b6c:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    2b6e:	80 85       	ldd	r24, Z+8	; 0x08
    2b70:	91 85       	ldd	r25, Z+9	; 0x09
    2b72:	f1 2c       	mov	r15, r1
    2b74:	e1 2c       	mov	r14, r1
    2b76:	00 e0       	ldi	r16, 0x00	; 0
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	a9 01       	movw	r20, r18
    2b7e:	67 85       	ldd	r22, Z+15	; 0x0f
    2b80:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    2b84:	19 86       	std	Y+9, r1	; 0x09
    2b86:	18 86       	std	Y+8, r1	; 0x08
            xReturn = pdTRUE;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
}
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	0f 91       	pop	r16
    2b90:	ff 90       	pop	r15
    2b92:	ef 90       	pop	r14
    2b94:	df 90       	pop	r13
    2b96:	cf 90       	pop	r12
    2b98:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
    2b9c:	f6 cf       	rjmp	.-20     	; 0x2b8a <xStreamBufferSendCompletedFromISR+0x38>

00002b9e <xStreamBufferReceiveCompletedFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
    2b9e:	cf 92       	push	r12
    2ba0:	df 92       	push	r13
    2ba2:	ef 92       	push	r14
    2ba4:	ff 92       	push	r15
    2ba6:	0f 93       	push	r16
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    2bac:	fc 01       	movw	r30, r24
    2bae:	22 85       	ldd	r18, Z+10	; 0x0a
    2bb0:	33 85       	ldd	r19, Z+11	; 0x0b
    2bb2:	23 2b       	or	r18, r19
    2bb4:	c1 f0       	breq	.+48     	; 0x2be6 <xStreamBufferReceiveCompletedFromISR+0x48>
    2bb6:	6b 01       	movw	r12, r22
    2bb8:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    2bba:	82 85       	ldd	r24, Z+10	; 0x0a
    2bbc:	93 85       	ldd	r25, Z+11	; 0x0b
    2bbe:	f1 2c       	mov	r15, r1
    2bc0:	e1 2c       	mov	r14, r1
    2bc2:	00 e0       	ldi	r16, 0x00	; 0
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	a9 01       	movw	r20, r18
    2bca:	67 85       	ldd	r22, Z+15	; 0x0f
    2bcc:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    2bd0:	1b 86       	std	Y+11, r1	; 0x0b
    2bd2:	1a 86       	std	Y+10, r1	; 0x0a
            xReturn = pdTRUE;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
}
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
    2be4:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
    2be8:	f6 cf       	rjmp	.-20     	; 0x2bd6 <xStreamBufferReceiveCompletedFromISR+0x38>

00002bea <uxStreamBufferGetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer );

    traceRETURN_uxStreamBufferGetStreamBufferNotificationIndex( pxStreamBuffer->uxNotificationIndex );

    return pxStreamBuffer->uxNotificationIndex;
}
    2bea:	fc 01       	movw	r30, r24
    2bec:	87 85       	ldd	r24, Z+15	; 0x0f
    2bee:	08 95       	ret

00002bf0 <vStreamBufferSetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );

    /* Check that the task notification index is valid. */
    configASSERT( uxNotificationIndex < configTASK_NOTIFICATION_ARRAY_ENTRIES );

    pxStreamBuffer->uxNotificationIndex = uxNotificationIndex;
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	67 87       	std	Z+15, r22	; 0x0f

    traceRETURN_vStreamBufferSetStreamBufferNotificationIndex();
}
    2bf4:	08 95       	ret

00002bf6 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2bf6:	e0 91 53 07 	lds	r30, 0x0753	; 0x800753 <pxDelayedTaskList>
    2bfa:	f0 91 54 07 	lds	r31, 0x0754	; 0x800754 <pxDelayedTaskList+0x1>
    2bfe:	80 81       	ld	r24, Z
    2c00:	81 11       	cpse	r24, r1
    2c02:	07 c0       	rjmp	.+14     	; 0x2c12 <prvResetNextTaskUnblockTime+0x1c>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
    2c04:	8f ef       	ldi	r24, 0xFF	; 255
    2c06:	9f ef       	ldi	r25, 0xFF	; 255
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    2c08:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <xNextTaskUnblockTime+0x1>
    2c0c:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <xNextTaskUnblockTime>
    }
}
    2c10:	08 95       	ret
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    2c12:	e0 91 53 07 	lds	r30, 0x0753	; 0x800753 <pxDelayedTaskList>
    2c16:	f0 91 54 07 	lds	r31, 0x0754	; 0x800754 <pxDelayedTaskList+0x1>
    2c1a:	05 80       	ldd	r0, Z+5	; 0x05
    2c1c:	f6 81       	ldd	r31, Z+6	; 0x06
    2c1e:	e0 2d       	mov	r30, r0
    2c20:	80 81       	ld	r24, Z
    2c22:	91 81       	ldd	r25, Z+1	; 0x01
    2c24:	f1 cf       	rjmp	.-30     	; 0x2c08 <prvResetNextTaskUnblockTime+0x12>

00002c26 <prvAddCurrentTaskToDelayedList.isra.2>:
    }

#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	ec 01       	movw	r28, r24
                                            const BaseType_t xCanBlockIndefinitely )
{
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    2c38:	c0 90 3b 07 	lds	r12, 0x073B	; 0x80073b <xTickCount>
    2c3c:	d0 90 3c 07 	lds	r13, 0x073C	; 0x80073c <xTickCount+0x1>
    List_t * const pxDelayedList = pxDelayedTaskList;
    2c40:	00 91 53 07 	lds	r16, 0x0753	; 0x800753 <pxDelayedTaskList>
    2c44:	10 91 54 07 	lds	r17, 0x0754	; 0x800754 <pxDelayedTaskList+0x1>
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
    2c48:	e0 90 51 07 	lds	r14, 0x0751	; 0x800751 <pxOverflowDelayedTaskList>
    2c4c:	f0 90 52 07 	lds	r15, 0x0752	; 0x800752 <pxOverflowDelayedTaskList+0x1>
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2c50:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    2c54:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    2c58:	02 96       	adiw	r24, 0x02	; 2
    2c5a:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
    2c5e:	cc 0d       	add	r28, r12
    2c60:	dd 1d       	adc	r29, r13

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2c62:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    2c66:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    2c6a:	d3 83       	std	Z+3, r29	; 0x03
    2c6c:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2c6e:	60 91 8b 07 	lds	r22, 0x078B	; 0x80078b <pxCurrentTCB>
    2c72:	70 91 8c 07 	lds	r23, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    2c76:	6e 5f       	subi	r22, 0xFE	; 254
    2c78:	7f 4f       	sbci	r23, 0xFF	; 255
        xTimeToWake = xConstTickCount + xTicksToWait;

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );

        if( xTimeToWake < xConstTickCount )
    2c7a:	cc 15       	cp	r28, r12
    2c7c:	dd 05       	cpc	r29, r13
    2c7e:	58 f4       	brcc	.+22     	; 0x2c96 <prvAddCurrentTaskToDelayedList.isra.2+0x70>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2c80:	c7 01       	movw	r24, r14

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	ff 90       	pop	r15
    2c8c:	ef 90       	pop	r14
    2c8e:	df 90       	pop	r13
    2c90:	cf 90       	pop	r12

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2c92:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <vListInsert>
        }
        else
        {
            traceMOVED_TASK_TO_DELAYED_LIST();
            /* The wake time has not overflowed, so the current block list is used. */
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2c96:	c8 01       	movw	r24, r16
    2c98:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <vListInsert>

            /* If the task entering the blocked state was placed at the head of the
             * list of blocked tasks then xNextTaskUnblockTime needs to be updated
             * too. */
            if( xTimeToWake < xNextTaskUnblockTime )
    2c9c:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <xNextTaskUnblockTime>
    2ca0:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <xNextTaskUnblockTime+0x1>
    2ca4:	c8 17       	cp	r28, r24
    2ca6:	d9 07       	cpc	r29, r25
    2ca8:	20 f4       	brcc	.+8      	; 0x2cb2 <prvAddCurrentTaskToDelayedList.isra.2+0x8c>
            {
                xNextTaskUnblockTime = xTimeToWake;
    2caa:	d0 93 33 07 	sts	0x0733, r29	; 0x800733 <xNextTaskUnblockTime+0x1>
    2cae:	c0 93 32 07 	sts	0x0732, r28	; 0x800732 <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    2cb2:	df 91       	pop	r29
    2cb4:	cf 91       	pop	r28
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	ff 90       	pop	r15
    2cbc:	ef 90       	pop	r14
    2cbe:	df 90       	pop	r13
    2cc0:	cf 90       	pop	r12
    2cc2:	08 95       	ret

00002cc4 <prvCheckTasksWaitingTermination>:
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2cc8:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <uxDeletedTasksWaitingCleanUp>
    2ccc:	81 11       	cpse	r24, r1
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <prvCheckTasksWaitingTermination+0x12>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	08 95       	ret
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	0f 92       	push	r0
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2cdc:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <xTasksWaitingTermination+0x5>
    2ce0:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <xTasksWaitingTermination+0x6>
    2ce4:	c6 81       	ldd	r28, Z+6	; 0x06
    2ce6:	d7 81       	ldd	r29, Z+7	; 0x07
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2ce8:	ce 01       	movw	r24, r28
    2cea:	02 96       	adiw	r24, 0x02	; 2
    2cec:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>
                        --uxCurrentNumberOfTasks;
    2cf0:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxCurrentNumberOfTasks>
    2cf4:	81 50       	subi	r24, 0x01	; 1
    2cf6:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <uxCurrentNumberOfTasks>
                        --uxDeletedTasksWaitingCleanUp;
    2cfa:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <uxDeletedTasksWaitingCleanUp>
    2cfe:	81 50       	subi	r24, 0x01	; 1
    2d00:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <uxDeletedTasksWaitingCleanUp>
                    }
                }
                taskEXIT_CRITICAL();
    2d04:	0f 90       	pop	r0
    2d06:	0f be       	out	0x3f, r0	; 63

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    2d08:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d0c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <vPortFree>
            vPortFree( pxTCB );
    2d10:	ce 01       	movw	r24, r28
    2d12:	0e 94 ab 0a 	call	0x1556	; 0x1556 <vPortFree>
    2d16:	d8 cf       	rjmp	.-80     	; 0x2cc8 <prvCheckTasksWaitingTermination+0x4>

00002d18 <prvIdleTask>:

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
    2d18:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
    2d1c:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <pxReadyTasksLists>
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	d0 f3       	brcs	.-12     	; 0x2d18 <prvIdleTask>
            {
                taskYIELD();
    2d24:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
    2d28:	f7 cf       	rjmp	.-18     	; 0x2d18 <prvIdleTask>

00002d2a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
    2d2a:	4f 92       	push	r4
    2d2c:	5f 92       	push	r5
    2d2e:	6f 92       	push	r6
    2d30:	7f 92       	push	r7
    2d32:	8f 92       	push	r8
    2d34:	9f 92       	push	r9
    2d36:	af 92       	push	r10
    2d38:	bf 92       	push	r11
    2d3a:	cf 92       	push	r12
    2d3c:	df 92       	push	r13
    2d3e:	ef 92       	push	r14
    2d40:	ff 92       	push	r15
    2d42:	0f 93       	push	r16
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	4c 01       	movw	r8, r24
    2d4a:	5b 01       	movw	r10, r22
    2d4c:	29 01       	movw	r4, r18

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
    2d4e:	c4 2e       	mov	r12, r20
    2d50:	d1 2c       	mov	r13, r1
    2d52:	c6 01       	movw	r24, r12
    2d54:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <pvPortMalloc>
    2d58:	3c 01       	movw	r6, r24

            if( pxStack != NULL )
    2d5a:	89 2b       	or	r24, r25
    2d5c:	09 f4       	brne	.+2      	; 0x2d60 <xTaskCreate+0x36>
    2d5e:	c9 c0       	rjmp	.+402    	; 0x2ef2 <xTaskCreate+0x1c8>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    2d60:	86 e2       	ldi	r24, 0x26	; 38
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <pvPortMalloc>
    2d68:	ec 01       	movw	r28, r24

                if( pxNewTCB != NULL )
    2d6a:	89 2b       	or	r24, r25
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <xTaskCreate+0x46>
    2d6e:	be c0       	rjmp	.+380    	; 0x2eec <xTaskCreate+0x1c2>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
    2d70:	86 e2       	ldi	r24, 0x26	; 38
    2d72:	de 01       	movw	r26, r28
    2d74:	1d 92       	st	X+, r1
    2d76:	8a 95       	dec	r24
    2d78:	e9 f7       	brne	.-6      	; 0x2d74 <xTaskCreate+0x4a>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
    2d7a:	78 8e       	std	Y+24, r7	; 0x18
    2d7c:	6f 8a       	std	Y+23, r6	; 0x17
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
    2d7e:	b1 e0       	ldi	r27, 0x01	; 1
    2d80:	cb 1a       	sub	r12, r27
    2d82:	d1 08       	sbc	r13, r1
    2d84:	c6 0c       	add	r12, r6
    2d86:	d7 1c       	adc	r13, r7
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    2d88:	a1 14       	cp	r10, r1
    2d8a:	b1 04       	cpc	r11, r1
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <xTaskCreate+0x66>
    2d8e:	c2 c0       	rjmp	.+388    	; 0x2f14 <xTaskCreate+0x1ea>
    2d90:	04 30       	cpi	r16, 0x04	; 4
    2d92:	08 f0       	brcs	.+2      	; 0x2d96 <xTaskCreate+0x6c>
    2d94:	03 e0       	ldi	r16, 0x03	; 3
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
    2d96:	0e 8b       	std	Y+22, r16	; 0x16
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2d98:	5e 01       	movw	r10, r28
    2d9a:	b2 e0       	ldi	r27, 0x02	; 2
    2d9c:	ab 0e       	add	r10, r27
    2d9e:	b1 1c       	adc	r11, r1
    2da0:	c5 01       	movw	r24, r10
    2da2:	0e 94 cd 0a 	call	0x159a	; 0x159a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2da6:	ce 01       	movw	r24, r28
    2da8:	0c 96       	adiw	r24, 0x0c	; 12
    2daa:	0e 94 cd 0a 	call	0x159a	; 0x159a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2dae:	d9 87       	std	Y+9, r29	; 0x09
    2db0:	c8 87       	std	Y+8, r28	; 0x08

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
    2db2:	84 e0       	ldi	r24, 0x04	; 4
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	80 1b       	sub	r24, r16
    2db8:	91 09       	sbc	r25, r1
    2dba:	9d 87       	std	Y+13, r25	; 0x0d
    2dbc:	8c 87       	std	Y+12, r24	; 0x0c
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2dbe:	db 8b       	std	Y+19, r29	; 0x13
    2dc0:	ca 8b       	std	Y+18, r28	; 0x12
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2dc2:	a2 01       	movw	r20, r4
    2dc4:	b4 01       	movw	r22, r8
    2dc6:	c6 01       	movw	r24, r12
    2dc8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <pxPortInitialiseStack>
    2dcc:	99 83       	std	Y+1, r25	; 0x01
    2dce:	88 83       	st	Y, r24
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
    2dd0:	e1 14       	cp	r14, r1
    2dd2:	f1 04       	cpc	r15, r1
    2dd4:	19 f0       	breq	.+6      	; 0x2ddc <xTaskCreate+0xb2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2dd6:	f7 01       	movw	r30, r14
    2dd8:	d1 83       	std	Z+1, r29	; 0x01
    2dda:	c0 83       	st	Z, r28

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	0f 92       	push	r0
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
    2de2:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxCurrentNumberOfTasks>
    2de6:	8f 5f       	subi	r24, 0xFF	; 255
    2de8:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <uxCurrentNumberOfTasks>

            if( pxCurrentTCB == NULL )
    2dec:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    2df0:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    2df4:	89 2b       	or	r24, r25
    2df6:	09 f0       	breq	.+2      	; 0x2dfa <xTaskCreate+0xd0>
    2df8:	a3 c0       	rjmp	.+326    	; 0x2f40 <xTaskCreate+0x216>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
    2dfa:	d0 93 8c 07 	sts	0x078C, r29	; 0x80078c <pxCurrentTCB+0x1>
    2dfe:	c0 93 8b 07 	sts	0x078B, r28	; 0x80078b <pxCurrentTCB>

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2e02:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxCurrentNumberOfTasks>
    2e06:	81 30       	cpi	r24, 0x01	; 1
    2e08:	61 f5       	brne	.+88     	; 0x2e62 <xTaskCreate+0x138>
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    2e0a:	87 e6       	ldi	r24, 0x67	; 103
    2e0c:	97 e0       	ldi	r25, 0x07	; 7
    2e0e:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
    2e12:	80 e7       	ldi	r24, 0x70	; 112
    2e14:	97 e0       	ldi	r25, 0x07	; 7
    2e16:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
    2e1a:	89 e7       	ldi	r24, 0x79	; 121
    2e1c:	97 e0       	ldi	r25, 0x07	; 7
    2e1e:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
    2e22:	82 e8       	ldi	r24, 0x82	; 130
    2e24:	97 e0       	ldi	r25, 0x07	; 7
    2e26:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
    }

    vListInitialise( &xDelayedTaskList1 );
    2e2a:	8e e5       	ldi	r24, 0x5E	; 94
    2e2c:	97 e0       	ldi	r25, 0x07	; 7
    2e2e:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
    2e32:	85 e5       	ldi	r24, 0x55	; 85
    2e34:	97 e0       	ldi	r25, 0x07	; 7
    2e36:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
    vListInitialise( &xPendingReadyList );
    2e3a:	88 e4       	ldi	r24, 0x48	; 72
    2e3c:	97 e0       	ldi	r25, 0x07	; 7
    2e3e:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
    2e42:	8f e3       	ldi	r24, 0x3F	; 63
    2e44:	97 e0       	ldi	r25, 0x07	; 7
    2e46:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
    2e4a:	8e e5       	ldi	r24, 0x5E	; 94
    2e4c:	97 e0       	ldi	r25, 0x07	; 7
    2e4e:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <pxDelayedTaskList+0x1>
    2e52:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <pxDelayedTaskList>
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2e56:	85 e5       	ldi	r24, 0x55	; 85
    2e58:	97 e0       	ldi	r25, 0x07	; 7
    2e5a:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <pxOverflowDelayedTaskList+0x1>
    2e5e:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <pxOverflowDelayedTaskList>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
    2e62:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <uxTaskNumber>
    2e66:	8f 5f       	subi	r24, 0xFF	; 255
    2e68:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <uxTaskNumber>
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
    2e6c:	ae 89       	ldd	r26, Y+22	; 0x16
    2e6e:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxTopReadyPriority>
    2e72:	8a 17       	cp	r24, r26
    2e74:	10 f4       	brcc	.+4      	; 0x2e7a <xTaskCreate+0x150>
    2e76:	a0 93 3a 07 	sts	0x073A, r26	; 0x80073a <uxTopReadyPriority>
    2e7a:	29 e0       	ldi	r18, 0x09	; 9
    2e7c:	2a 9f       	mul	r18, r26
    2e7e:	d0 01       	movw	r26, r0
    2e80:	11 24       	eor	r1, r1
    2e82:	a9 59       	subi	r26, 0x99	; 153
    2e84:	b8 4f       	sbci	r27, 0xF8	; 248
    2e86:	11 96       	adiw	r26, 0x01	; 1
    2e88:	0d 90       	ld	r0, X+
    2e8a:	bc 91       	ld	r27, X
    2e8c:	a0 2d       	mov	r26, r0
    2e8e:	bd 83       	std	Y+5, r27	; 0x05
    2e90:	ac 83       	std	Y+4, r26	; 0x04
    2e92:	14 96       	adiw	r26, 0x04	; 4
    2e94:	8d 91       	ld	r24, X+
    2e96:	9c 91       	ld	r25, X
    2e98:	15 97       	sbiw	r26, 0x05	; 5
    2e9a:	9f 83       	std	Y+7, r25	; 0x07
    2e9c:	8e 83       	std	Y+6, r24	; 0x06
    2e9e:	14 96       	adiw	r26, 0x04	; 4
    2ea0:	8d 91       	ld	r24, X+
    2ea2:	9c 91       	ld	r25, X
    2ea4:	15 97       	sbiw	r26, 0x05	; 5
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	b3 82       	std	Z+3, r11	; 0x03
    2eaa:	a2 82       	std	Z+2, r10	; 0x02
    2eac:	15 96       	adiw	r26, 0x05	; 5
    2eae:	bc 92       	st	X, r11
    2eb0:	ae 92       	st	-X, r10
    2eb2:	14 97       	sbiw	r26, 0x04	; 4
    2eb4:	9e 89       	ldd	r25, Y+22	; 0x16
    2eb6:	92 9f       	mul	r25, r18
    2eb8:	f0 01       	movw	r30, r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	e9 59       	subi	r30, 0x99	; 153
    2ebe:	f8 4f       	sbci	r31, 0xF8	; 248
    2ec0:	fb 87       	std	Y+11, r31	; 0x0b
    2ec2:	ea 87       	std	Y+10, r30	; 0x0a
    2ec4:	80 81       	ld	r24, Z
    2ec6:	8f 5f       	subi	r24, 0xFF	; 255
    2ec8:	80 83       	st	Z, r24

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
    2eca:	0f 90       	pop	r0
    2ecc:	0f be       	out	0x3f, r0	; 63

        if( xSchedulerRunning != pdFALSE )
    2ece:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <xSchedulerRunning>
    2ed2:	88 23       	and	r24, r24
    2ed4:	49 f0       	breq	.+18     	; 0x2ee8 <xTaskCreate+0x1be>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
    2ed6:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    2eda:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    2ede:	86 89       	ldd	r24, Z+22	; 0x16
    2ee0:	89 17       	cp	r24, r25
    2ee2:	10 f4       	brcc	.+4      	; 0x2ee8 <xTaskCreate+0x1be>
    2ee4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    2eea:	04 c0       	rjmp	.+8      	; 0x2ef4 <xTaskCreate+0x1ca>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
    2eec:	c3 01       	movw	r24, r6
    2eee:	0e 94 ab 0a 	call	0x1556	; 0x1556 <vPortFree>
            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2ef2:	8f ef       	ldi	r24, 0xFF	; 255
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    }
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	0f 91       	pop	r16
    2efa:	ff 90       	pop	r15
    2efc:	ef 90       	pop	r14
    2efe:	df 90       	pop	r13
    2f00:	cf 90       	pop	r12
    2f02:	bf 90       	pop	r11
    2f04:	af 90       	pop	r10
    2f06:	9f 90       	pop	r9
    2f08:	8f 90       	pop	r8
    2f0a:	7f 90       	pop	r7
    2f0c:	6f 90       	pop	r6
    2f0e:	5f 90       	pop	r5
    2f10:	4f 90       	pop	r4
    2f12:	08 95       	ret
    2f14:	f5 01       	movw	r30, r10
    2f16:	ae 01       	movw	r20, r28
    2f18:	47 5e       	subi	r20, 0xE7	; 231
    2f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1c:	c5 01       	movw	r24, r10
    2f1e:	08 96       	adiw	r24, 0x08	; 8
    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2f20:	21 91       	ld	r18, Z+
    2f22:	da 01       	movw	r26, r20
    2f24:	2d 93       	st	X+, r18
    2f26:	ad 01       	movw	r20, r26

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
    2f28:	9f 01       	movw	r18, r30
    2f2a:	21 50       	subi	r18, 0x01	; 1
    2f2c:	31 09       	sbc	r19, r1
    2f2e:	d9 01       	movw	r26, r18
    2f30:	2c 91       	ld	r18, X
    2f32:	22 23       	and	r18, r18
    2f34:	19 f0       	breq	.+6      	; 0x2f3c <xTaskCreate+0x212>
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2f36:	e8 17       	cp	r30, r24
    2f38:	f9 07       	cpc	r31, r25
    2f3a:	91 f7       	brne	.-28     	; 0x2f20 <xTaskCreate+0x1f6>
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
    2f3c:	18 a2       	std	Y+32, r1	; 0x20
    2f3e:	28 cf       	rjmp	.-432    	; 0x2d90 <xTaskCreate+0x66>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
    2f40:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <xSchedulerRunning>
    2f44:	81 11       	cpse	r24, r1
    2f46:	8d cf       	rjmp	.-230    	; 0x2e62 <xTaskCreate+0x138>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2f48:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    2f4c:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    2f50:	9e 89       	ldd	r25, Y+22	; 0x16
    2f52:	86 89       	ldd	r24, Z+22	; 0x16
    2f54:	98 17       	cp	r25, r24
    2f56:	08 f4       	brcc	.+2      	; 0x2f5a <xTaskCreate+0x230>
    2f58:	84 cf       	rjmp	.-248    	; 0x2e62 <xTaskCreate+0x138>
                    {
                        pxCurrentTCB = pxNewTCB;
    2f5a:	d0 93 8c 07 	sts	0x078C, r29	; 0x80078c <pxCurrentTCB+0x1>
    2f5e:	c0 93 8b 07 	sts	0x078B, r28	; 0x80078b <pxCurrentTCB>
    2f62:	7f cf       	rjmp	.-258    	; 0x2e62 <xTaskCreate+0x138>

00002f64 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
    2f64:	0f 93       	push	r16
    2f66:	1f 93       	push	r17
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	ec 01       	movw	r28, r24
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	0f 92       	push	r0
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2f74:	89 2b       	or	r24, r25
    2f76:	21 f4       	brne	.+8      	; 0x2f80 <vTaskDelete+0x1c>
    2f78:	c0 91 8b 07 	lds	r28, 0x078B	; 0x80078b <pxCurrentTCB>
    2f7c:	d0 91 8c 07 	lds	r29, 0x078C	; 0x80078c <pxCurrentTCB+0x1>

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2f80:	8e 01       	movw	r16, r28
    2f82:	0e 5f       	subi	r16, 0xFE	; 254
    2f84:	1f 4f       	sbci	r17, 0xFF	; 255
    2f86:	c8 01       	movw	r24, r16
    2f88:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2f8c:	8c 89       	ldd	r24, Y+20	; 0x14
    2f8e:	9d 89       	ldd	r25, Y+21	; 0x15
    2f90:	89 2b       	or	r24, r25
    2f92:	21 f0       	breq	.+8      	; 0x2f9c <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2f94:	ce 01       	movw	r24, r28
    2f96:	0c 96       	adiw	r24, 0x0c	; 12
    2f98:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
    2f9c:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <uxTaskNumber>
    2fa0:	8f 5f       	subi	r24, 0xFF	; 255
    2fa2:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <uxTaskNumber>

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
    2fa6:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    2faa:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
    2fae:	20 91 39 07 	lds	r18, 0x0739	; 0x800739 <xSchedulerRunning>
    2fb2:	22 23       	and	r18, r18
    2fb4:	59 f1       	breq	.+86     	; 0x300c <vTaskDelete+0xa8>
    2fb6:	8c 17       	cp	r24, r28
    2fb8:	9d 07       	cpc	r25, r29
    2fba:	41 f5       	brne	.+80     	; 0x300c <vTaskDelete+0xa8>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    2fbc:	b8 01       	movw	r22, r16
    2fbe:	8f e3       	ldi	r24, 0x3F	; 63
    2fc0:	97 e0       	ldi	r25, 0x07	; 7
    2fc2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
    2fc6:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <uxDeletedTasksWaitingCleanUp>
    2fca:	8f 5f       	subi	r24, 0xFF	; 255
    2fcc:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <uxDeletedTasksWaitingCleanUp>
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
            }
        }
        taskEXIT_CRITICAL();
    2fd2:	0f 90       	pop	r0
    2fd4:	0f be       	out	0x3f, r0	; 63

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
    2fd6:	81 30       	cpi	r24, 0x01	; 1
    2fd8:	39 f0       	breq	.+14     	; 0x2fe8 <vTaskDelete+0x84>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    2fda:	8f 89       	ldd	r24, Y+23	; 0x17
    2fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2fde:	0e 94 ab 0a 	call	0x1556	; 0x1556 <vPortFree>
            vPortFree( pxTCB );
    2fe2:	ce 01       	movw	r24, r28
    2fe4:	0e 94 ab 0a 	call	0x1556	; 0x1556 <vPortFree>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
    2fe8:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <xSchedulerRunning>
    2fec:	88 23       	and	r24, r24
    2fee:	49 f0       	breq	.+18     	; 0x3002 <vTaskDelete+0x9e>
            {
                if( pxTCB == pxCurrentTCB )
    2ff0:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    2ff4:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    2ff8:	8c 17       	cp	r24, r28
    2ffa:	9d 07       	cpc	r25, r29
    2ffc:	11 f4       	brne	.+4      	; 0x3002 <vTaskDelete+0x9e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
                    taskYIELD_WITHIN_API();
    2ffe:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	08 95       	ret
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
    300c:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxCurrentNumberOfTasks>
    3010:	81 50       	subi	r24, 0x01	; 1
    3012:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <uxCurrentNumberOfTasks>
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
    3016:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <prvResetNextTaskUnblockTime>
#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	da cf       	rjmp	.-76     	; 0x2fd2 <vTaskDelete+0x6e>

0000301e <vTaskStartScheduler>:
}

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    301e:	ef 92       	push	r14
    3020:	ff 92       	push	r15
    3022:	0f 93       	push	r16
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	28 97       	sbiw	r28, 0x08	; 8
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	aa ef       	ldi	r26, 0xFA	; 250
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	fe 01       	movw	r30, r28
    303e:	31 96       	adiw	r30, 0x01	; 1
    3040:	22 e0       	ldi	r18, 0x02	; 2
    3042:	31 e0       	ldi	r19, 0x01	; 1
    3044:	bf 01       	movw	r22, r30
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
    3046:	8d 91       	ld	r24, X+
    3048:	81 93       	st	Z+, r24

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
    304a:	88 23       	and	r24, r24
    304c:	19 f0       	breq	.+6      	; 0x3054 <vTaskStartScheduler+0x36>
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    304e:	2a 17       	cp	r18, r26
    3050:	3b 07       	cpc	r19, r27
    3052:	c9 f7       	brne	.-14     	; 0x3046 <vTaskStartScheduler+0x28>
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
    3054:	80 e3       	ldi	r24, 0x30	; 48
    3056:	e8 2e       	mov	r14, r24
    3058:	87 e0       	ldi	r24, 0x07	; 7
    305a:	f8 2e       	mov	r15, r24
    305c:	00 e0       	ldi	r16, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	45 e5       	ldi	r20, 0x55	; 85
    3064:	8c e8       	ldi	r24, 0x8C	; 140
    3066:	96 e1       	ldi	r25, 0x16	; 22
    3068:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <xTaskCreate>
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
    306c:	88 23       	and	r24, r24
    306e:	a9 f0       	breq	.+42     	; 0x309a <vTaskStartScheduler+0x7c>

    xReturn = prvCreateIdleTasks();

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
    3070:	81 30       	cpi	r24, 0x01	; 1
    3072:	99 f4       	brne	.+38     	; 0x309a <vTaskStartScheduler+0x7c>
        {
            xReturn = xTimerCreateTimerTask();
    3074:	0e 94 0c 23 	call	0x4618	; 0x4618 <xTimerCreateTimerTask>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	79 f4       	brne	.+30     	; 0x309a <vTaskStartScheduler+0x7c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
    307c:	f8 94       	cli
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
    307e:	2f ef       	ldi	r18, 0xFF	; 255
    3080:	3f ef       	ldi	r19, 0xFF	; 255
    3082:	30 93 33 07 	sts	0x0733, r19	; 0x800733 <xNextTaskUnblockTime+0x1>
    3086:	20 93 32 07 	sts	0x0732, r18	; 0x800732 <xNextTaskUnblockTime>
        xSchedulerRunning = pdTRUE;
    308a:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <xSchedulerRunning>
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    308e:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <xTickCount+0x1>
    3092:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <xTickCount>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
    3096:	0e 94 b6 0b 	call	0x176c	; 0x176c <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
    309a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <uxTopUsedPriority>

    traceRETURN_vTaskStartScheduler();
}
    309e:	28 96       	adiw	r28, 0x08	; 8
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	0f 91       	pop	r16
    30b0:	ff 90       	pop	r15
    30b2:	ef 90       	pop	r14
    30b4:	08 95       	ret

000030b6 <vTaskEndScheduler>:
        BaseType_t xCoreID;

        #if ( configUSE_TIMERS == 1 )
        {
            /* Delete the timer task created by the kernel. */
            vTaskDelete( xTimerGetTimerDaemonTaskHandle() );
    30b6:	0e 94 bc 23 	call	0x4778	; 0x4778 <xTimerGetTimerDaemonTaskHandle>
    30ba:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <vTaskDelete>
        #endif /* #if ( configUSE_TIMERS == 1 ) */

        /* Delete Idle tasks created by the kernel.*/
        for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
        {
            vTaskDelete( xIdleTaskHandles[ xCoreID ] );
    30be:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <xIdleTaskHandles>
    30c2:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <xIdleTaskHandles+0x1>
    30c6:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <vTaskDelete>

        /* Idle task is responsible for reclaiming the resources of the tasks in
         * xTasksWaitingTermination list. Since the idle task is now deleted and
         * no longer going to run, we need to reclaim resources of all the tasks
         * in the xTasksWaitingTermination list. */
        prvCheckTasksWaitingTermination();
    30ca:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <prvCheckTasksWaitingTermination>
    #endif /* #if ( INCLUDE_vTaskDelete == 1 ) */

    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    30ce:	f8 94       	cli
    xSchedulerRunning = pdFALSE;
    30d0:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <xSchedulerRunning>

    /* This function must be called from a task and the application is
     * responsible for deleting that task after the scheduler is stopped. */
    vPortEndScheduler();
    30d4:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <vPortEndScheduler>

000030d8 <vTaskSuspendAll>:
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
    30d8:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxSchedulerSuspended>
    30dc:	8f 5f       	subi	r24, 0xFF	; 255
    30de:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <uxSchedulerSuspended>
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
    30e2:	08 95       	ret

000030e4 <xTaskGetTickCount>:
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	0f 92       	push	r0
    {
        xTicks = xTickCount;
    30ea:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <xTickCount>
    30ee:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <xTickCount+0x1>
    }
    portTICK_TYPE_EXIT_CRITICAL();
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
}
    30f6:	08 95       	ret

000030f8 <xTaskGetTickCountFromISR>:
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    {
        xReturn = xTickCount;
    30f8:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <xTickCount>
    30fc:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <xTickCount+0x1>
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
}
    3100:	08 95       	ret

00003102 <uxTaskGetNumberOfTasks>:

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
    3102:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxCurrentNumberOfTasks>
}
    3106:	08 95       	ret

00003108 <pcTaskGetName>:

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3108:	00 97       	sbiw	r24, 0x00	; 0
    310a:	21 f4       	brne	.+8      	; 0x3114 <pcTaskGetName+0xc>
    310c:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    3110:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    configASSERT( pxTCB );

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
}
    3114:	49 96       	adiw	r24, 0x19	; 25
    3116:	08 95       	ret

00003118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3118:	cf 92       	push	r12
    311a:	df 92       	push	r13
    311c:	ef 92       	push	r14
    311e:	ff 92       	push	r15
    3120:	0f 93       	push	r16
    3122:	1f 93       	push	r17
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3128:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxSchedulerSuspended>
    312c:	81 11       	cpse	r24, r1
    312e:	e5 c0       	rjmp	.+458    	; 0x32fa <xTaskIncrementTick+0x1e2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3130:	c0 91 3b 07 	lds	r28, 0x073B	; 0x80073b <xTickCount>
    3134:	d0 91 3c 07 	lds	r29, 0x073C	; 0x80073c <xTickCount+0x1>
    3138:	6e 01       	movw	r12, r28
    313a:	8f ef       	ldi	r24, 0xFF	; 255
    313c:	c8 1a       	sub	r12, r24
    313e:	d8 0a       	sbc	r13, r24

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
    3140:	d0 92 3c 07 	sts	0x073C, r13	; 0x80073c <xTickCount+0x1>
    3144:	c0 92 3b 07 	sts	0x073B, r12	; 0x80073b <xTickCount>

        if( xConstTickCount == ( TickType_t ) 0U )
    3148:	c1 14       	cp	r12, r1
    314a:	d1 04       	cpc	r13, r1
    314c:	b9 f4       	brne	.+46     	; 0x317c <xTaskIncrementTick+0x64>
        {
            taskSWITCH_DELAYED_LISTS();
    314e:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <pxDelayedTaskList>
    3152:	90 91 54 07 	lds	r25, 0x0754	; 0x800754 <pxDelayedTaskList+0x1>
    3156:	20 91 51 07 	lds	r18, 0x0751	; 0x800751 <pxOverflowDelayedTaskList>
    315a:	30 91 52 07 	lds	r19, 0x0752	; 0x800752 <pxOverflowDelayedTaskList+0x1>
    315e:	30 93 54 07 	sts	0x0754, r19	; 0x800754 <pxDelayedTaskList+0x1>
    3162:	20 93 53 07 	sts	0x0753, r18	; 0x800753 <pxDelayedTaskList>
    3166:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <pxOverflowDelayedTaskList+0x1>
    316a:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <pxOverflowDelayedTaskList>
    316e:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <xNumOfOverflows>
    3172:	8f 5f       	subi	r24, 0xFF	; 255
    3174:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <xNumOfOverflows>
    3178:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
    317c:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <xNextTaskUnblockTime>
    3180:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <xNextTaskUnblockTime+0x1>
    3184:	c8 16       	cp	r12, r24
    3186:	d9 06       	cpc	r13, r25
    3188:	e8 f4       	brcc	.+58     	; 0x31c4 <xTaskIncrementTick+0xac>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    318a:	80 e0       	ldi	r24, 0x00	; 0
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
    318c:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3190:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3194:	e6 89       	ldd	r30, Z+22	; 0x16
    3196:	d9 e0       	ldi	r29, 0x09	; 9
    3198:	ed 9f       	mul	r30, r29
    319a:	f0 01       	movw	r30, r0
    319c:	11 24       	eor	r1, r1
    319e:	e9 59       	subi	r30, 0x99	; 153
    31a0:	f8 4f       	sbci	r31, 0xF8	; 248
    31a2:	90 81       	ld	r25, Z
    31a4:	92 30       	cpi	r25, 0x02	; 2
    31a6:	08 f0       	brcs	.+2      	; 0x31aa <xTaskIncrementTick+0x92>
                {
                    xSwitchRequired = pdTRUE;
    31a8:	81 e0       	ldi	r24, 0x01	; 1
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
    31aa:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <xYieldPendings>
    31ae:	91 11       	cpse	r25, r1
                {
                    xSwitchRequired = pdTRUE;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
}
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    31c4:	80 e0       	ldi	r24, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    31c6:	69 e0       	ldi	r22, 0x09	; 9
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    31c8:	e0 91 53 07 	lds	r30, 0x0753	; 0x800753 <pxDelayedTaskList>
    31cc:	f0 91 54 07 	lds	r31, 0x0754	; 0x800754 <pxDelayedTaskList+0x1>
    31d0:	90 81       	ld	r25, Z
    31d2:	91 11       	cpse	r25, r1
    31d4:	07 c0       	rjmp	.+14     	; 0x31e4 <xTaskIncrementTick+0xcc>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
    31d6:	2f ef       	ldi	r18, 0xFF	; 255
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
    31da:	30 93 33 07 	sts	0x0733, r19	; 0x800733 <xNextTaskUnblockTime+0x1>
    31de:	20 93 32 07 	sts	0x0732, r18	; 0x800732 <xNextTaskUnblockTime>
    31e2:	d4 cf       	rjmp	.-88     	; 0x318c <xTaskIncrementTick+0x74>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    31e4:	e0 91 53 07 	lds	r30, 0x0753	; 0x800753 <pxDelayedTaskList>
    31e8:	f0 91 54 07 	lds	r31, 0x0754	; 0x800754 <pxDelayedTaskList+0x1>
    31ec:	05 80       	ldd	r0, Z+5	; 0x05
    31ee:	f6 81       	ldd	r31, Z+6	; 0x06
    31f0:	e0 2d       	mov	r30, r0
    31f2:	06 80       	ldd	r0, Z+6	; 0x06
    31f4:	f7 81       	ldd	r31, Z+7	; 0x07
    31f6:	e0 2d       	mov	r30, r0
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    31f8:	22 81       	ldd	r18, Z+2	; 0x02
    31fa:	33 81       	ldd	r19, Z+3	; 0x03

                    if( xConstTickCount < xItemValue )
    31fc:	c2 16       	cp	r12, r18
    31fe:	d3 06       	cpc	r13, r19
    3200:	60 f3       	brcs	.-40     	; 0x31da <xTaskIncrementTick+0xc2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    3202:	c2 85       	ldd	r28, Z+10	; 0x0a
    3204:	d3 85       	ldd	r29, Z+11	; 0x0b
    3206:	24 81       	ldd	r18, Z+4	; 0x04
    3208:	35 81       	ldd	r19, Z+5	; 0x05
    320a:	46 81       	ldd	r20, Z+6	; 0x06
    320c:	57 81       	ldd	r21, Z+7	; 0x07
    320e:	d9 01       	movw	r26, r18
    3210:	15 96       	adiw	r26, 0x05	; 5
    3212:	5c 93       	st	X, r21
    3214:	4e 93       	st	-X, r20
    3216:	14 97       	sbiw	r26, 0x04	; 4
    3218:	46 81       	ldd	r20, Z+6	; 0x06
    321a:	57 81       	ldd	r21, Z+7	; 0x07
    321c:	da 01       	movw	r26, r20
    321e:	13 96       	adiw	r26, 0x03	; 3
    3220:	3c 93       	st	X, r19
    3222:	2e 93       	st	-X, r18
    3224:	12 97       	sbiw	r26, 0x02	; 2
    3226:	9f 01       	movw	r18, r30
    3228:	2e 5f       	subi	r18, 0xFE	; 254
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	09 81       	ldd	r16, Y+1	; 0x01
    322e:	1a 81       	ldd	r17, Y+2	; 0x02
    3230:	02 17       	cp	r16, r18
    3232:	13 07       	cpc	r17, r19
    3234:	11 f4       	brne	.+4      	; 0x323a <xTaskIncrementTick+0x122>
    3236:	5a 83       	std	Y+2, r21	; 0x02
    3238:	49 83       	std	Y+1, r20	; 0x01
    323a:	13 86       	std	Z+11, r1	; 0x0b
    323c:	12 86       	std	Z+10, r1	; 0x0a
    323e:	98 81       	ld	r25, Y
    3240:	91 50       	subi	r25, 0x01	; 1
    3242:	98 83       	st	Y, r25

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3244:	a4 89       	ldd	r26, Z+20	; 0x14
    3246:	b5 89       	ldd	r27, Z+21	; 0x15
    3248:	10 97       	sbiw	r26, 0x00	; 0
    324a:	f9 f0       	breq	.+62     	; 0x328a <xTaskIncrementTick+0x172>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    324c:	46 85       	ldd	r20, Z+14	; 0x0e
    324e:	57 85       	ldd	r21, Z+15	; 0x0f
    3250:	00 89       	ldd	r16, Z+16	; 0x10
    3252:	11 89       	ldd	r17, Z+17	; 0x11
    3254:	ea 01       	movw	r28, r20
    3256:	1d 83       	std	Y+5, r17	; 0x05
    3258:	0c 83       	std	Y+4, r16	; 0x04
    325a:	00 89       	ldd	r16, Z+16	; 0x10
    325c:	11 89       	ldd	r17, Z+17	; 0x11
    325e:	e8 01       	movw	r28, r16
    3260:	5b 83       	std	Y+3, r21	; 0x03
    3262:	4a 83       	std	Y+2, r20	; 0x02
    3264:	11 96       	adiw	r26, 0x01	; 1
    3266:	ed 90       	ld	r14, X+
    3268:	fc 90       	ld	r15, X
    326a:	12 97       	sbiw	r26, 0x02	; 2
    326c:	af 01       	movw	r20, r30
    326e:	44 5f       	subi	r20, 0xF4	; 244
    3270:	5f 4f       	sbci	r21, 0xFF	; 255
    3272:	e4 16       	cp	r14, r20
    3274:	f5 06       	cpc	r15, r21
    3276:	21 f4       	brne	.+8      	; 0x3280 <xTaskIncrementTick+0x168>
    3278:	12 96       	adiw	r26, 0x02	; 2
    327a:	1c 93       	st	X, r17
    327c:	0e 93       	st	-X, r16
    327e:	11 97       	sbiw	r26, 0x01	; 1
    3280:	15 8a       	std	Z+21, r1	; 0x15
    3282:	14 8a       	std	Z+20, r1	; 0x14
    3284:	9c 91       	ld	r25, X
    3286:	91 50       	subi	r25, 0x01	; 1
    3288:	9c 93       	st	X, r25
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    328a:	a6 89       	ldd	r26, Z+22	; 0x16
    328c:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <uxTopReadyPriority>
    3290:	9a 17       	cp	r25, r26
    3292:	10 f4       	brcc	.+4      	; 0x3298 <xTaskIncrementTick+0x180>
    3294:	a0 93 3a 07 	sts	0x073A, r26	; 0x80073a <uxTopReadyPriority>
    3298:	6a 9f       	mul	r22, r26
    329a:	d0 01       	movw	r26, r0
    329c:	11 24       	eor	r1, r1
    329e:	a9 59       	subi	r26, 0x99	; 153
    32a0:	b8 4f       	sbci	r27, 0xF8	; 248
    32a2:	11 96       	adiw	r26, 0x01	; 1
    32a4:	0d 90       	ld	r0, X+
    32a6:	bc 91       	ld	r27, X
    32a8:	a0 2d       	mov	r26, r0
    32aa:	b5 83       	std	Z+5, r27	; 0x05
    32ac:	a4 83       	std	Z+4, r26	; 0x04
    32ae:	14 96       	adiw	r26, 0x04	; 4
    32b0:	4d 91       	ld	r20, X+
    32b2:	5c 91       	ld	r21, X
    32b4:	15 97       	sbiw	r26, 0x05	; 5
    32b6:	57 83       	std	Z+7, r21	; 0x07
    32b8:	46 83       	std	Z+6, r20	; 0x06
    32ba:	14 96       	adiw	r26, 0x04	; 4
    32bc:	4d 91       	ld	r20, X+
    32be:	5c 91       	ld	r21, X
    32c0:	15 97       	sbiw	r26, 0x05	; 5
    32c2:	ea 01       	movw	r28, r20
    32c4:	3b 83       	std	Y+3, r19	; 0x03
    32c6:	2a 83       	std	Y+2, r18	; 0x02
    32c8:	15 96       	adiw	r26, 0x05	; 5
    32ca:	3c 93       	st	X, r19
    32cc:	2e 93       	st	-X, r18
    32ce:	14 97       	sbiw	r26, 0x04	; 4
    32d0:	26 89       	ldd	r18, Z+22	; 0x16
    32d2:	26 9f       	mul	r18, r22
    32d4:	d0 01       	movw	r26, r0
    32d6:	11 24       	eor	r1, r1
    32d8:	a9 59       	subi	r26, 0x99	; 153
    32da:	b8 4f       	sbci	r27, 0xF8	; 248
    32dc:	b3 87       	std	Z+11, r27	; 0x0b
    32de:	a2 87       	std	Z+10, r26	; 0x0a
    32e0:	9c 91       	ld	r25, X
    32e2:	9f 5f       	subi	r25, 0xFF	; 255
    32e4:	9c 93       	st	X, r25
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    32e6:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    32ea:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    32ee:	96 89       	ldd	r25, Z+22	; 0x16
    32f0:	92 17       	cp	r25, r18
    32f2:	08 f0       	brcs	.+2      	; 0x32f6 <xTaskIncrementTick+0x1de>
    32f4:	69 cf       	rjmp	.-302    	; 0x31c8 <xTaskIncrementTick+0xb0>
                            {
                                xSwitchRequired = pdTRUE;
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	67 cf       	rjmp	.-306    	; 0x31c8 <xTaskIncrementTick+0xb0>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
    32fa:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <xPendedTicks>
    32fe:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <xPendedTicks+0x1>
    3302:	01 96       	adiw	r24, 0x01	; 1
    3304:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <xPendedTicks+0x1>
    3308:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <xPendedTicks>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    330c:	80 e0       	ldi	r24, 0x00	; 0
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
    330e:	51 cf       	rjmp	.-350    	; 0x31b2 <xTaskIncrementTick+0x9a>

00003310 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3310:	ef 92       	push	r14
    3312:	ff 92       	push	r15
    3314:	0f 93       	push	r16
    3316:	1f 93       	push	r17
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	0f 92       	push	r0

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
    3322:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxSchedulerSuspended>
    3326:	81 50       	subi	r24, 0x01	; 1
    3328:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <uxSchedulerSuspended>
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    332c:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxSchedulerSuspended>
    3330:	88 23       	and	r24, r24
    3332:	51 f0       	breq	.+20     	; 0x3348 <xTaskResumeAll+0x38>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    BaseType_t xAlreadyYielded = pdFALSE;
    3334:	80 e0       	ldi	r24, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    3336:	0f 90       	pop	r0
    3338:	0f be       	out	0x3f, r0	; 63
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
}
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	ff 90       	pop	r15
    3344:	ef 90       	pop	r14
    3346:	08 95       	ret
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3348:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxCurrentNumberOfTasks>
    334c:	88 23       	and	r24, r24
    334e:	91 f3       	breq	.-28     	; 0x3334 <xTaskResumeAll+0x24>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3350:	e0 90 4d 07 	lds	r14, 0x074D	; 0x80074d <xPendingReadyList+0x5>
    3354:	f0 90 4e 07 	lds	r15, 0x074E	; 0x80074e <xPendingReadyList+0x6>
#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	e0 e0       	ldi	r30, 0x00	; 0
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
                        prvAddTaskToReadyList( pxTCB );
    335c:	39 e0       	ldi	r19, 0x09	; 9
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    335e:	41 e0       	ldi	r20, 0x01	; 1
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3360:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <xPendingReadyList>
    3364:	81 11       	cpse	r24, r1
    3366:	22 c0       	rjmp	.+68     	; 0x33ac <xTaskResumeAll+0x9c>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
    3368:	ef 2b       	or	r30, r31
    336a:	11 f0       	breq	.+4      	; 0x3370 <xTaskResumeAll+0x60>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
    336c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    3370:	c0 91 37 07 	lds	r28, 0x0737	; 0x800737 <xPendedTicks>
    3374:	d0 91 38 07 	lds	r29, 0x0738	; 0x800738 <xPendedTicks+0x1>

                        if( xPendedCounts > ( TickType_t ) 0U )
    3378:	20 97       	sbiw	r28, 0x00	; 0
    337a:	61 f0       	breq	.+24     	; 0x3394 <xTaskResumeAll+0x84>
                            {
                                if( xTaskIncrementTick() != pdFALSE )
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    337c:	11 e0       	ldi	r17, 0x01	; 1

                        if( xPendedCounts > ( TickType_t ) 0U )
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
    337e:	0e 94 8c 18 	call	0x3118	; 0x3118 <xTaskIncrementTick>
    3382:	81 11       	cpse	r24, r1
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    3384:	10 93 36 07 	sts	0x0736, r17	; 0x800736 <xYieldPendings>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
    3388:	21 97       	sbiw	r28, 0x01	; 1
                            } while( xPendedCounts > ( TickType_t ) 0U );
    338a:	c9 f7       	brne	.-14     	; 0x337e <xTaskResumeAll+0x6e>

                            xPendedTicks = 0;
    338c:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <xPendedTicks+0x1>
    3390:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <xPendedTicks>
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
    3394:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <xYieldPendings>
    3398:	88 23       	and	r24, r24
    339a:	61 f2       	breq	.-104    	; 0x3334 <xTaskResumeAll+0x24>
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
    339c:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    33a0:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    33a4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	c5 cf       	rjmp	.-118    	; 0x3336 <xTaskResumeAll+0x26>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    33ac:	d7 01       	movw	r26, r14
    33ae:	16 96       	adiw	r26, 0x06	; 6
    33b0:	ed 91       	ld	r30, X+
    33b2:	fc 91       	ld	r31, X
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    33b4:	a4 89       	ldd	r26, Z+20	; 0x14
    33b6:	b5 89       	ldd	r27, Z+21	; 0x15
    33b8:	66 85       	ldd	r22, Z+14	; 0x0e
    33ba:	77 85       	ldd	r23, Z+15	; 0x0f
    33bc:	80 89       	ldd	r24, Z+16	; 0x10
    33be:	91 89       	ldd	r25, Z+17	; 0x11
    33c0:	eb 01       	movw	r28, r22
    33c2:	9d 83       	std	Y+5, r25	; 0x05
    33c4:	8c 83       	std	Y+4, r24	; 0x04
    33c6:	80 89       	ldd	r24, Z+16	; 0x10
    33c8:	91 89       	ldd	r25, Z+17	; 0x11
    33ca:	ec 01       	movw	r28, r24
    33cc:	7b 83       	std	Y+3, r23	; 0x03
    33ce:	6a 83       	std	Y+2, r22	; 0x02
    33d0:	bf 01       	movw	r22, r30
    33d2:	64 5f       	subi	r22, 0xF4	; 244
    33d4:	7f 4f       	sbci	r23, 0xFF	; 255
    33d6:	11 96       	adiw	r26, 0x01	; 1
    33d8:	0d 91       	ld	r16, X+
    33da:	1c 91       	ld	r17, X
    33dc:	12 97       	sbiw	r26, 0x02	; 2
    33de:	06 17       	cp	r16, r22
    33e0:	17 07       	cpc	r17, r23
    33e2:	21 f4       	brne	.+8      	; 0x33ec <xTaskResumeAll+0xdc>
    33e4:	12 96       	adiw	r26, 0x02	; 2
    33e6:	9c 93       	st	X, r25
    33e8:	8e 93       	st	-X, r24
    33ea:	11 97       	sbiw	r26, 0x01	; 1
    33ec:	15 8a       	std	Z+21, r1	; 0x15
    33ee:	14 8a       	std	Z+20, r1	; 0x14
    33f0:	8c 91       	ld	r24, X
    33f2:	81 50       	subi	r24, 0x01	; 1
    33f4:	8c 93       	st	X, r24
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    33f6:	a2 85       	ldd	r26, Z+10	; 0x0a
    33f8:	b3 85       	ldd	r27, Z+11	; 0x0b
    33fa:	84 81       	ldd	r24, Z+4	; 0x04
    33fc:	95 81       	ldd	r25, Z+5	; 0x05
    33fe:	66 81       	ldd	r22, Z+6	; 0x06
    3400:	77 81       	ldd	r23, Z+7	; 0x07
    3402:	ec 01       	movw	r28, r24
    3404:	7d 83       	std	Y+5, r23	; 0x05
    3406:	6c 83       	std	Y+4, r22	; 0x04
    3408:	66 81       	ldd	r22, Z+6	; 0x06
    340a:	77 81       	ldd	r23, Z+7	; 0x07
    340c:	eb 01       	movw	r28, r22
    340e:	9b 83       	std	Y+3, r25	; 0x03
    3410:	8a 83       	std	Y+2, r24	; 0x02
    3412:	cf 01       	movw	r24, r30
    3414:	02 96       	adiw	r24, 0x02	; 2
    3416:	11 96       	adiw	r26, 0x01	; 1
    3418:	0d 91       	ld	r16, X+
    341a:	1c 91       	ld	r17, X
    341c:	12 97       	sbiw	r26, 0x02	; 2
    341e:	08 17       	cp	r16, r24
    3420:	19 07       	cpc	r17, r25
    3422:	21 f4       	brne	.+8      	; 0x342c <xTaskResumeAll+0x11c>
    3424:	12 96       	adiw	r26, 0x02	; 2
    3426:	7c 93       	st	X, r23
    3428:	6e 93       	st	-X, r22
    342a:	11 97       	sbiw	r26, 0x01	; 1
    342c:	13 86       	std	Z+11, r1	; 0x0b
    342e:	12 86       	std	Z+10, r1	; 0x0a
    3430:	2c 91       	ld	r18, X
    3432:	21 50       	subi	r18, 0x01	; 1
    3434:	2c 93       	st	X, r18
                        prvAddTaskToReadyList( pxTCB );
    3436:	a6 89       	ldd	r26, Z+22	; 0x16
    3438:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <uxTopReadyPriority>
    343c:	2a 17       	cp	r18, r26
    343e:	10 f4       	brcc	.+4      	; 0x3444 <xTaskResumeAll+0x134>
    3440:	a0 93 3a 07 	sts	0x073A, r26	; 0x80073a <uxTopReadyPriority>
    3444:	3a 9f       	mul	r19, r26
    3446:	d0 01       	movw	r26, r0
    3448:	11 24       	eor	r1, r1
    344a:	a9 59       	subi	r26, 0x99	; 153
    344c:	b8 4f       	sbci	r27, 0xF8	; 248
    344e:	11 96       	adiw	r26, 0x01	; 1
    3450:	0d 90       	ld	r0, X+
    3452:	bc 91       	ld	r27, X
    3454:	a0 2d       	mov	r26, r0
    3456:	b5 83       	std	Z+5, r27	; 0x05
    3458:	a4 83       	std	Z+4, r26	; 0x04
    345a:	14 96       	adiw	r26, 0x04	; 4
    345c:	6d 91       	ld	r22, X+
    345e:	7c 91       	ld	r23, X
    3460:	15 97       	sbiw	r26, 0x05	; 5
    3462:	77 83       	std	Z+7, r23	; 0x07
    3464:	66 83       	std	Z+6, r22	; 0x06
    3466:	14 96       	adiw	r26, 0x04	; 4
    3468:	6d 91       	ld	r22, X+
    346a:	7c 91       	ld	r23, X
    346c:	15 97       	sbiw	r26, 0x05	; 5
    346e:	eb 01       	movw	r28, r22
    3470:	9b 83       	std	Y+3, r25	; 0x03
    3472:	8a 83       	std	Y+2, r24	; 0x02
    3474:	15 96       	adiw	r26, 0x05	; 5
    3476:	9c 93       	st	X, r25
    3478:	8e 93       	st	-X, r24
    347a:	14 97       	sbiw	r26, 0x04	; 4
    347c:	96 89       	ldd	r25, Z+22	; 0x16
    347e:	93 9f       	mul	r25, r19
    3480:	d0 01       	movw	r26, r0
    3482:	11 24       	eor	r1, r1
    3484:	a9 59       	subi	r26, 0x99	; 153
    3486:	b8 4f       	sbci	r27, 0xF8	; 248
    3488:	b3 87       	std	Z+11, r27	; 0x0b
    348a:	a2 87       	std	Z+10, r26	; 0x0a
    348c:	8c 91       	ld	r24, X
    348e:	8f 5f       	subi	r24, 0xFF	; 255
    3490:	8c 93       	st	X, r24

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    3492:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    3496:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    349a:	56 96       	adiw	r26, 0x16	; 22
    349c:	8c 91       	ld	r24, X
    349e:	89 17       	cp	r24, r25
    34a0:	08 f0       	brcs	.+2      	; 0x34a4 <xTaskResumeAll+0x194>
    34a2:	5e cf       	rjmp	.-324    	; 0x3360 <xTaskResumeAll+0x50>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    34a4:	40 93 36 07 	sts	0x0736, r20	; 0x800736 <xYieldPendings>
    34a8:	5b cf       	rjmp	.-330    	; 0x3360 <xTaskResumeAll+0x50>

000034aa <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
    34aa:	0f 93       	push	r16
    34ac:	1f 93       	push	r17
    34ae:	cf 93       	push	r28
    34b0:	df 93       	push	r29
    34b2:	ec 01       	movw	r28, r24
    34b4:	8b 01       	movw	r16, r22
        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
        configASSERT( ( xTimeIncrement > 0U ) );

        vTaskSuspendAll();
    34b6:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
    34ba:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <xTickCount>
    34be:	30 91 3c 07 	lds	r19, 0x073C	; 0x80073c <xTickCount+0x1>

            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    34c2:	48 81       	ld	r20, Y
    34c4:	59 81       	ldd	r21, Y+1	; 0x01
    34c6:	ca 01       	movw	r24, r20
    34c8:	80 0f       	add	r24, r16
    34ca:	91 1f       	adc	r25, r17
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
    34cc:	99 83       	std	Y+1, r25	; 0x01
    34ce:	88 83       	st	Y, r24
            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

            if( xConstTickCount < *pxPreviousWakeTime )
    34d0:	24 17       	cp	r18, r20
    34d2:	35 07       	cpc	r19, r21
    34d4:	80 f4       	brcc	.+32     	; 0x34f6 <xTaskDelayUntil+0x4c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    34d6:	84 17       	cp	r24, r20
    34d8:	95 07       	cpc	r25, r21
    34da:	80 f0       	brcs	.+32     	; 0x34fc <xTaskDelayUntil+0x52>

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    34dc:	c0 e0       	ldi	r28, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    34de:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    34e2:	81 11       	cpse	r24, r1
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <xTaskDelayUntil+0x40>
        {
            taskYIELD_WITHIN_API();
    34e6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );

        return xShouldDelay;
    }
    34ea:	8c 2f       	mov	r24, r28
    34ec:	df 91       	pop	r29
    34ee:	cf 91       	pop	r28
    34f0:	1f 91       	pop	r17
    34f2:	0f 91       	pop	r16
    34f4:	08 95       	ret
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    34f6:	84 17       	cp	r24, r20
    34f8:	95 07       	cpc	r25, r21
    34fa:	18 f0       	brcs	.+6      	; 0x3502 <xTaskDelayUntil+0x58>
    34fc:	28 17       	cp	r18, r24
    34fe:	39 07       	cpc	r19, r25
    3500:	68 f7       	brcc	.-38     	; 0x34dc <xTaskDelayUntil+0x32>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    3502:	82 1b       	sub	r24, r18
    3504:	93 0b       	sbc	r25, r19
    3506:	0e 94 13 16 	call	0x2c26	; 0x2c26 <prvAddCurrentTaskToDelayedList.isra.2>
    350a:	c1 e0       	ldi	r28, 0x01	; 1
    350c:	e8 cf       	rjmp	.-48     	; 0x34de <xTaskDelayUntil+0x34>

0000350e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	ec 01       	movw	r28, r24
        BaseType_t xAlreadyYielded = pdFALSE;

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
    3514:	89 2b       	or	r24, r25
    3516:	29 f4       	brne	.+10     	; 0x3522 <vTaskDelay+0x14>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
        {
            taskYIELD_WITHIN_API();
    3518:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
    351c:	df 91       	pop	r29
    351e:	cf 91       	pop	r28
    3520:	08 95       	ret
        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
        {
            vTaskSuspendAll();
    3522:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3526:	ce 01       	movw	r24, r28
    3528:	0e 94 13 16 	call	0x2c26	; 0x2c26 <prvAddCurrentTaskToDelayedList.isra.2>
            }
            xAlreadyYielded = xTaskResumeAll();
    352c:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    3530:	88 23       	and	r24, r24
    3532:	91 f3       	breq	.-28     	; 0x3518 <vTaskDelay+0xa>
    3534:	f3 cf       	rjmp	.-26     	; 0x351c <vTaskDelay+0xe>

00003536 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
    3536:	cf 93       	push	r28
    3538:	df 93       	push	r29
    353a:	ec 01       	movw	r28, r24
     * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
    configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );

    /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
    vTaskSuspendAll();
    353c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>

    /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
    taskENTER_CRITICAL();
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	0f 92       	push	r0
    {
        xPendedTicks += xTicksToCatchUp;
    3546:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <xPendedTicks>
    354a:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <xPendedTicks+0x1>
    354e:	8c 0f       	add	r24, r28
    3550:	9d 1f       	adc	r25, r29
    3552:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <xPendedTicks+0x1>
    3556:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <xPendedTicks>
    }
    taskEXIT_CRITICAL();
    355a:	0f 90       	pop	r0
    355c:	0f be       	out	0x3f, r0	; 63
    xYieldOccurred = xTaskResumeAll();

    traceRETURN_xTaskCatchUpTicks( xYieldOccurred );

    return xYieldOccurred;
}
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    taskENTER_CRITICAL();
    {
        xPendedTicks += xTicksToCatchUp;
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();
    3562:	0c 94 88 19 	jmp	0x3310	; 0x3310 <xTaskResumeAll>

00003566 <vTaskSwitchContext>:
#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
    3566:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxSchedulerSuspended>
    356a:	88 23       	and	r24, r24
    356c:	21 f0       	breq	.+8      	; 0x3576 <vTaskSwitchContext+0x10>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xYieldPendings>
    3574:	08 95       	ret
        }
        else
        {
            xYieldPendings[ 0 ] = pdFALSE;
    3576:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <xYieldPendings>
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    357a:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <uxTopReadyPriority>
    357e:	89 e0       	ldi	r24, 0x09	; 9
    3580:	42 2f       	mov	r20, r18
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	84 9f       	mul	r24, r20
    3586:	f0 01       	movw	r30, r0
    3588:	85 9f       	mul	r24, r21
    358a:	f0 0d       	add	r31, r0
    358c:	11 24       	eor	r1, r1
    358e:	e9 59       	subi	r30, 0x99	; 153
    3590:	f8 4f       	sbci	r31, 0xF8	; 248
    3592:	90 81       	ld	r25, Z
    3594:	99 23       	and	r25, r25
    3596:	59 f1       	breq	.+86     	; 0x35ee <vTaskSwitchContext+0x88>
    3598:	a1 81       	ldd	r26, Z+1	; 0x01
    359a:	b2 81       	ldd	r27, Z+2	; 0x02
    359c:	12 96       	adiw	r26, 0x02	; 2
    359e:	6d 91       	ld	r22, X+
    35a0:	7c 91       	ld	r23, X
    35a2:	72 83       	std	Z+2, r23	; 0x02
    35a4:	61 83       	std	Z+1, r22	; 0x01
    35a6:	28 9f       	mul	r18, r24
    35a8:	c0 01       	movw	r24, r0
    35aa:	11 24       	eor	r1, r1
    35ac:	86 59       	subi	r24, 0x96	; 150
    35ae:	98 4f       	sbci	r25, 0xF8	; 248
    35b0:	68 17       	cp	r22, r24
    35b2:	79 07       	cpc	r23, r25
    35b4:	21 f4       	brne	.+8      	; 0x35be <vTaskSwitchContext+0x58>
    35b6:	85 81       	ldd	r24, Z+5	; 0x05
    35b8:	96 81       	ldd	r25, Z+6	; 0x06
    35ba:	92 83       	std	Z+2, r25	; 0x02
    35bc:	81 83       	std	Z+1, r24	; 0x01
    35be:	89 e0       	ldi	r24, 0x09	; 9
    35c0:	84 9f       	mul	r24, r20
    35c2:	f0 01       	movw	r30, r0
    35c4:	85 9f       	mul	r24, r21
    35c6:	f0 0d       	add	r31, r0
    35c8:	11 24       	eor	r1, r1
    35ca:	e9 59       	subi	r30, 0x99	; 153
    35cc:	f8 4f       	sbci	r31, 0xF8	; 248
    35ce:	01 80       	ldd	r0, Z+1	; 0x01
    35d0:	f2 81       	ldd	r31, Z+2	; 0x02
    35d2:	e0 2d       	mov	r30, r0
    35d4:	86 81       	ldd	r24, Z+6	; 0x06
    35d6:	97 81       	ldd	r25, Z+7	; 0x07
    35d8:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <pxCurrentTCB+0x1>
    35dc:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <pxCurrentTCB>
    35e0:	20 93 3a 07 	sts	0x073A, r18	; 0x80073a <uxTopReadyPriority>
            traceTASK_SWITCHED_IN();

            /* Macro to inject port specific behaviour immediately after
             * switching tasks, such as setting an end of stack watchpoint
             * or reconfiguring the MPU. */
            portTASK_SWITCH_HOOK( pxCurrentTCB );
    35e4:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    35e8:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
    35ec:	08 95       	ret
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    35ee:	21 50       	subi	r18, 0x01	; 1
    35f0:	c7 cf       	rjmp	.-114    	; 0x3580 <vTaskSwitchContext+0x1a>

000035f2 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    35f6:	eb 01       	movw	r28, r22
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    35f8:	60 91 8b 07 	lds	r22, 0x078B	; 0x80078b <pxCurrentTCB>
    35fc:	70 91 8c 07 	lds	r23, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3600:	64 5f       	subi	r22, 0xF4	; 244
    3602:	7f 4f       	sbci	r23, 0xFF	; 255
    3604:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3608:	ce 01       	movw	r24, r28

    traceRETURN_vTaskPlaceOnEventList();
}
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    360e:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <prvAddCurrentTaskToDelayedList.isra.2>

00003612 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	fc 01       	movw	r30, r24
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3618:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    361c:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3620:	70 68       	ori	r23, 0x80	; 128
    3622:	1d 96       	adiw	r26, 0x0d	; 13
    3624:	7c 93       	st	X, r23
    3626:	6e 93       	st	-X, r22
    3628:	1c 97       	sbiw	r26, 0x0c	; 12
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    362a:	a1 81       	ldd	r26, Z+1	; 0x01
    362c:	b2 81       	ldd	r27, Z+2	; 0x02
    362e:	c0 91 8b 07 	lds	r28, 0x078B	; 0x80078b <pxCurrentTCB>
    3632:	d0 91 8c 07 	lds	r29, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3636:	bf 87       	std	Y+15, r27	; 0x0f
    3638:	ae 87       	std	Y+14, r26	; 0x0e
    363a:	c0 91 8b 07 	lds	r28, 0x078B	; 0x80078b <pxCurrentTCB>
    363e:	d0 91 8c 07 	lds	r29, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3642:	14 96       	adiw	r26, 0x04	; 4
    3644:	8d 91       	ld	r24, X+
    3646:	9c 91       	ld	r25, X
    3648:	15 97       	sbiw	r26, 0x05	; 5
    364a:	99 8b       	std	Y+17, r25	; 0x11
    364c:	88 8b       	std	Y+16, r24	; 0x10
    364e:	20 91 8b 07 	lds	r18, 0x078B	; 0x80078b <pxCurrentTCB>
    3652:	30 91 8c 07 	lds	r19, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3656:	14 96       	adiw	r26, 0x04	; 4
    3658:	cd 91       	ld	r28, X+
    365a:	dc 91       	ld	r29, X
    365c:	15 97       	sbiw	r26, 0x05	; 5
    365e:	24 5f       	subi	r18, 0xF4	; 244
    3660:	3f 4f       	sbci	r19, 0xFF	; 255
    3662:	3b 83       	std	Y+3, r19	; 0x03
    3664:	2a 83       	std	Y+2, r18	; 0x02
    3666:	20 91 8b 07 	lds	r18, 0x078B	; 0x80078b <pxCurrentTCB>
    366a:	30 91 8c 07 	lds	r19, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    366e:	24 5f       	subi	r18, 0xF4	; 244
    3670:	3f 4f       	sbci	r19, 0xFF	; 255
    3672:	15 96       	adiw	r26, 0x05	; 5
    3674:	3c 93       	st	X, r19
    3676:	2e 93       	st	-X, r18
    3678:	14 97       	sbiw	r26, 0x04	; 4
    367a:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    367e:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3682:	55 96       	adiw	r26, 0x15	; 21
    3684:	fc 93       	st	X, r31
    3686:	ee 93       	st	-X, r30
    3688:	54 97       	sbiw	r26, 0x14	; 20
    368a:	90 81       	ld	r25, Z
    368c:	9f 5f       	subi	r25, 0xFF	; 255
    368e:	90 83       	st	Z, r25

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3690:	ca 01       	movw	r24, r20

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3696:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <prvAddCurrentTaskToDelayedList.isra.2>

0000369a <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	fc 01       	movw	r30, r24

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    36a0:	a1 81       	ldd	r26, Z+1	; 0x01
    36a2:	b2 81       	ldd	r27, Z+2	; 0x02
    36a4:	c0 91 8b 07 	lds	r28, 0x078B	; 0x80078b <pxCurrentTCB>
    36a8:	d0 91 8c 07 	lds	r29, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    36ac:	bf 87       	std	Y+15, r27	; 0x0f
    36ae:	ae 87       	std	Y+14, r26	; 0x0e
    36b0:	c0 91 8b 07 	lds	r28, 0x078B	; 0x80078b <pxCurrentTCB>
    36b4:	d0 91 8c 07 	lds	r29, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    36b8:	14 96       	adiw	r26, 0x04	; 4
    36ba:	8d 91       	ld	r24, X+
    36bc:	9c 91       	ld	r25, X
    36be:	15 97       	sbiw	r26, 0x05	; 5
    36c0:	99 8b       	std	Y+17, r25	; 0x11
    36c2:	88 8b       	std	Y+16, r24	; 0x10
    36c4:	20 91 8b 07 	lds	r18, 0x078B	; 0x80078b <pxCurrentTCB>
    36c8:	30 91 8c 07 	lds	r19, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    36cc:	14 96       	adiw	r26, 0x04	; 4
    36ce:	cd 91       	ld	r28, X+
    36d0:	dc 91       	ld	r29, X
    36d2:	15 97       	sbiw	r26, 0x05	; 5
    36d4:	24 5f       	subi	r18, 0xF4	; 244
    36d6:	3f 4f       	sbci	r19, 0xFF	; 255
    36d8:	3b 83       	std	Y+3, r19	; 0x03
    36da:	2a 83       	std	Y+2, r18	; 0x02
    36dc:	20 91 8b 07 	lds	r18, 0x078B	; 0x80078b <pxCurrentTCB>
    36e0:	30 91 8c 07 	lds	r19, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    36e4:	24 5f       	subi	r18, 0xF4	; 244
    36e6:	3f 4f       	sbci	r19, 0xFF	; 255
    36e8:	15 96       	adiw	r26, 0x05	; 5
    36ea:	3c 93       	st	X, r19
    36ec:	2e 93       	st	-X, r18
    36ee:	14 97       	sbiw	r26, 0x04	; 4
    36f0:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    36f4:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    36f8:	55 96       	adiw	r26, 0x15	; 21
    36fa:	fc 93       	st	X, r31
    36fc:	ee 93       	st	-X, r30
    36fe:	54 97       	sbiw	r26, 0x14	; 20
    3700:	90 81       	ld	r25, Z
    3702:	9f 5f       	subi	r25, 0xFF	; 255
    3704:	90 83       	st	Z, r25

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
    3706:	44 23       	and	r20, r20
    3708:	11 f0       	breq	.+4      	; 0x370e <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
    370a:	6f ef       	ldi	r22, 0xFF	; 255
    370c:	7f ef       	ldi	r23, 0xFF	; 255
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    370e:	cb 01       	movw	r24, r22

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
    3710:	df 91       	pop	r29
    3712:	cf 91       	pop	r28
        {
            xTicksToWait = portMAX_DELAY;
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3714:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <prvAddCurrentTaskToDelayedList.isra.2>

00003718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    371c:	dc 01       	movw	r26, r24
    371e:	15 96       	adiw	r26, 0x05	; 5
    3720:	ed 91       	ld	r30, X+
    3722:	fc 91       	ld	r31, X
    3724:	06 80       	ldd	r0, Z+6	; 0x06
    3726:	f7 81       	ldd	r31, Z+7	; 0x07
    3728:	e0 2d       	mov	r30, r0
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    372a:	a4 89       	ldd	r26, Z+20	; 0x14
    372c:	b5 89       	ldd	r27, Z+21	; 0x15
    372e:	86 85       	ldd	r24, Z+14	; 0x0e
    3730:	97 85       	ldd	r25, Z+15	; 0x0f
    3732:	20 89       	ldd	r18, Z+16	; 0x10
    3734:	31 89       	ldd	r19, Z+17	; 0x11
    3736:	ec 01       	movw	r28, r24
    3738:	3d 83       	std	Y+5, r19	; 0x05
    373a:	2c 83       	std	Y+4, r18	; 0x04
    373c:	c0 89       	ldd	r28, Z+16	; 0x10
    373e:	d1 89       	ldd	r29, Z+17	; 0x11
    3740:	9b 83       	std	Y+3, r25	; 0x03
    3742:	8a 83       	std	Y+2, r24	; 0x02
    3744:	cf 01       	movw	r24, r30
    3746:	0c 96       	adiw	r24, 0x0c	; 12
    3748:	11 96       	adiw	r26, 0x01	; 1
    374a:	2d 91       	ld	r18, X+
    374c:	3c 91       	ld	r19, X
    374e:	12 97       	sbiw	r26, 0x02	; 2
    3750:	28 17       	cp	r18, r24
    3752:	39 07       	cpc	r19, r25
    3754:	21 f4       	brne	.+8      	; 0x375e <xTaskRemoveFromEventList+0x46>
    3756:	12 96       	adiw	r26, 0x02	; 2
    3758:	dc 93       	st	X, r29
    375a:	ce 93       	st	-X, r28
    375c:	11 97       	sbiw	r26, 0x01	; 1
    375e:	15 8a       	std	Z+21, r1	; 0x15
    3760:	14 8a       	std	Z+20, r1	; 0x14
    3762:	2c 91       	ld	r18, X
    3764:	21 50       	subi	r18, 0x01	; 1
    3766:	2c 93       	st	X, r18

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3768:	20 91 2f 07 	lds	r18, 0x072F	; 0x80072f <uxSchedulerSuspended>
    376c:	21 11       	cpse	r18, r1
    376e:	57 c0       	rjmp	.+174    	; 0x381e <xTaskRemoveFromEventList+0x106>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    3770:	a2 85       	ldd	r26, Z+10	; 0x0a
    3772:	b3 85       	ldd	r27, Z+11	; 0x0b
    3774:	84 81       	ldd	r24, Z+4	; 0x04
    3776:	95 81       	ldd	r25, Z+5	; 0x05
    3778:	26 81       	ldd	r18, Z+6	; 0x06
    377a:	37 81       	ldd	r19, Z+7	; 0x07
    377c:	ec 01       	movw	r28, r24
    377e:	3d 83       	std	Y+5, r19	; 0x05
    3780:	2c 83       	std	Y+4, r18	; 0x04
    3782:	c6 81       	ldd	r28, Z+6	; 0x06
    3784:	d7 81       	ldd	r29, Z+7	; 0x07
    3786:	9b 83       	std	Y+3, r25	; 0x03
    3788:	8a 83       	std	Y+2, r24	; 0x02
    378a:	cf 01       	movw	r24, r30
    378c:	02 96       	adiw	r24, 0x02	; 2
    378e:	11 96       	adiw	r26, 0x01	; 1
    3790:	2d 91       	ld	r18, X+
    3792:	3c 91       	ld	r19, X
    3794:	12 97       	sbiw	r26, 0x02	; 2
    3796:	28 17       	cp	r18, r24
    3798:	39 07       	cpc	r19, r25
    379a:	21 f4       	brne	.+8      	; 0x37a4 <xTaskRemoveFromEventList+0x8c>
    379c:	12 96       	adiw	r26, 0x02	; 2
    379e:	dc 93       	st	X, r29
    37a0:	ce 93       	st	-X, r28
    37a2:	11 97       	sbiw	r26, 0x01	; 1
    37a4:	13 86       	std	Z+11, r1	; 0x0b
    37a6:	12 86       	std	Z+10, r1	; 0x0a
    37a8:	2c 91       	ld	r18, X
    37aa:	21 50       	subi	r18, 0x01	; 1
    37ac:	2c 93       	st	X, r18
        prvAddTaskToReadyList( pxUnblockedTCB );
    37ae:	c6 89       	ldd	r28, Z+22	; 0x16
    37b0:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <uxTopReadyPriority>
    37b4:	2c 17       	cp	r18, r28
    37b6:	10 f4       	brcc	.+4      	; 0x37bc <xTaskRemoveFromEventList+0xa4>
    37b8:	c0 93 3a 07 	sts	0x073A, r28	; 0x80073a <uxTopReadyPriority>
    37bc:	29 e0       	ldi	r18, 0x09	; 9
    37be:	2c 9f       	mul	r18, r28
    37c0:	e0 01       	movw	r28, r0
    37c2:	11 24       	eor	r1, r1
    37c4:	c9 59       	subi	r28, 0x99	; 153
    37c6:	d8 4f       	sbci	r29, 0xF8	; 248
    37c8:	09 80       	ldd	r0, Y+1	; 0x01
    37ca:	da 81       	ldd	r29, Y+2	; 0x02
    37cc:	c0 2d       	mov	r28, r0
    37ce:	d5 83       	std	Z+5, r29	; 0x05
    37d0:	c4 83       	std	Z+4, r28	; 0x04
    37d2:	4c 81       	ldd	r20, Y+4	; 0x04
    37d4:	5d 81       	ldd	r21, Y+5	; 0x05
    37d6:	57 83       	std	Z+7, r21	; 0x07
    37d8:	46 83       	std	Z+6, r20	; 0x06
    37da:	ac 81       	ldd	r26, Y+4	; 0x04
    37dc:	bd 81       	ldd	r27, Y+5	; 0x05
    37de:	13 96       	adiw	r26, 0x03	; 3
    37e0:	9c 93       	st	X, r25
    37e2:	8e 93       	st	-X, r24
    37e4:	12 97       	sbiw	r26, 0x02	; 2
    37e6:	9d 83       	std	Y+5, r25	; 0x05
    37e8:	8c 83       	std	Y+4, r24	; 0x04
    37ea:	a6 89       	ldd	r26, Z+22	; 0x16
    37ec:	a2 9f       	mul	r26, r18
    37ee:	d0 01       	movw	r26, r0
    37f0:	11 24       	eor	r1, r1
    37f2:	a9 59       	subi	r26, 0x99	; 153
    37f4:	b8 4f       	sbci	r27, 0xF8	; 248
    37f6:	b3 87       	std	Z+11, r27	; 0x0b
    37f8:	a2 87       	std	Z+10, r26	; 0x0a
    37fa:	8c 91       	ld	r24, X
    37fc:	8f 5f       	subi	r24, 0xFF	; 255
    37fe:	8c 93       	st	X, r24
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3800:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    3804:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3808:	96 89       	ldd	r25, Z+22	; 0x16
    380a:	56 96       	adiw	r26, 0x16	; 22
    380c:	8c 91       	ld	r24, X
    380e:	89 17       	cp	r24, r25
    3810:	30 f5       	brcc	.+76     	; 0x385e <xTaskRemoveFromEventList+0x146>
             * it should force a context switch now. */
            xReturn = pdTRUE;

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xYieldPendings>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
}
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	08 95       	ret
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    381e:	a0 91 49 07 	lds	r26, 0x0749	; 0x800749 <xPendingReadyList+0x1>
    3822:	b0 91 4a 07 	lds	r27, 0x074A	; 0x80074a <xPendingReadyList+0x2>
    3826:	b7 87       	std	Z+15, r27	; 0x0f
    3828:	a6 87       	std	Z+14, r26	; 0x0e
    382a:	14 96       	adiw	r26, 0x04	; 4
    382c:	2d 91       	ld	r18, X+
    382e:	3c 91       	ld	r19, X
    3830:	15 97       	sbiw	r26, 0x05	; 5
    3832:	31 8b       	std	Z+17, r19	; 0x11
    3834:	20 8b       	std	Z+16, r18	; 0x10
    3836:	14 96       	adiw	r26, 0x04	; 4
    3838:	cd 91       	ld	r28, X+
    383a:	dc 91       	ld	r29, X
    383c:	15 97       	sbiw	r26, 0x05	; 5
    383e:	9b 83       	std	Y+3, r25	; 0x03
    3840:	8a 83       	std	Y+2, r24	; 0x02
    3842:	15 96       	adiw	r26, 0x05	; 5
    3844:	9c 93       	st	X, r25
    3846:	8e 93       	st	-X, r24
    3848:	14 97       	sbiw	r26, 0x04	; 4
    384a:	88 e4       	ldi	r24, 0x48	; 72
    384c:	97 e0       	ldi	r25, 0x07	; 7
    384e:	95 8b       	std	Z+21, r25	; 0x15
    3850:	84 8b       	std	Z+20, r24	; 0x14
    3852:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <xPendingReadyList>
    3856:	8f 5f       	subi	r24, 0xFF	; 255
    3858:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <xPendingReadyList>
    385c:	d1 cf       	rjmp	.-94     	; 0x3800 <xTaskRemoveFromEventList+0xe8>
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    385e:	80 e0       	ldi	r24, 0x00	; 0
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
    3860:	db cf       	rjmp	.-74     	; 0x3818 <xTaskRemoveFromEventList+0x100>

00003862 <vTaskRemoveFromUnorderedEventList>:
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	dc 01       	movw	r26, r24
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3868:	70 68       	ori	r23, 0x80	; 128
    386a:	11 96       	adiw	r26, 0x01	; 1
    386c:	7c 93       	st	X, r23
    386e:	6e 93       	st	-X, r22
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
    3870:	16 96       	adiw	r26, 0x06	; 6
    3872:	ed 91       	ld	r30, X+
    3874:	fc 91       	ld	r31, X
    3876:	17 97       	sbiw	r26, 0x07	; 7
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( pxEventListItem );
    3878:	18 96       	adiw	r26, 0x08	; 8
    387a:	4d 91       	ld	r20, X+
    387c:	5c 91       	ld	r21, X
    387e:	19 97       	sbiw	r26, 0x09	; 9
    3880:	12 96       	adiw	r26, 0x02	; 2
    3882:	2d 91       	ld	r18, X+
    3884:	3c 91       	ld	r19, X
    3886:	13 97       	sbiw	r26, 0x03	; 3
    3888:	14 96       	adiw	r26, 0x04	; 4
    388a:	8d 91       	ld	r24, X+
    388c:	9c 91       	ld	r25, X
    388e:	15 97       	sbiw	r26, 0x05	; 5
    3890:	e9 01       	movw	r28, r18
    3892:	9d 83       	std	Y+5, r25	; 0x05
    3894:	8c 83       	std	Y+4, r24	; 0x04
    3896:	14 96       	adiw	r26, 0x04	; 4
    3898:	8d 91       	ld	r24, X+
    389a:	9c 91       	ld	r25, X
    389c:	15 97       	sbiw	r26, 0x05	; 5
    389e:	ec 01       	movw	r28, r24
    38a0:	3b 83       	std	Y+3, r19	; 0x03
    38a2:	2a 83       	std	Y+2, r18	; 0x02
    38a4:	ea 01       	movw	r28, r20
    38a6:	29 81       	ldd	r18, Y+1	; 0x01
    38a8:	3a 81       	ldd	r19, Y+2	; 0x02
    38aa:	2a 17       	cp	r18, r26
    38ac:	3b 07       	cpc	r19, r27
    38ae:	11 f4       	brne	.+4      	; 0x38b4 <vTaskRemoveFromUnorderedEventList+0x52>
    38b0:	9a 83       	std	Y+2, r25	; 0x02
    38b2:	89 83       	std	Y+1, r24	; 0x01
    38b4:	19 96       	adiw	r26, 0x09	; 9
    38b6:	1c 92       	st	X, r1
    38b8:	1e 92       	st	-X, r1
    38ba:	18 97       	sbiw	r26, 0x08	; 8
    38bc:	da 01       	movw	r26, r20
    38be:	8c 91       	ld	r24, X
    38c0:	81 50       	subi	r24, 0x01	; 1
    38c2:	8c 93       	st	X, r24
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    38c4:	a2 85       	ldd	r26, Z+10	; 0x0a
    38c6:	b3 85       	ldd	r27, Z+11	; 0x0b
    38c8:	84 81       	ldd	r24, Z+4	; 0x04
    38ca:	95 81       	ldd	r25, Z+5	; 0x05
    38cc:	26 81       	ldd	r18, Z+6	; 0x06
    38ce:	37 81       	ldd	r19, Z+7	; 0x07
    38d0:	ec 01       	movw	r28, r24
    38d2:	3d 83       	std	Y+5, r19	; 0x05
    38d4:	2c 83       	std	Y+4, r18	; 0x04
    38d6:	c6 81       	ldd	r28, Z+6	; 0x06
    38d8:	d7 81       	ldd	r29, Z+7	; 0x07
    38da:	9b 83       	std	Y+3, r25	; 0x03
    38dc:	8a 83       	std	Y+2, r24	; 0x02
    38de:	cf 01       	movw	r24, r30
    38e0:	02 96       	adiw	r24, 0x02	; 2
    38e2:	11 96       	adiw	r26, 0x01	; 1
    38e4:	2d 91       	ld	r18, X+
    38e6:	3c 91       	ld	r19, X
    38e8:	12 97       	sbiw	r26, 0x02	; 2
    38ea:	28 17       	cp	r18, r24
    38ec:	39 07       	cpc	r19, r25
    38ee:	21 f4       	brne	.+8      	; 0x38f8 <vTaskRemoveFromUnorderedEventList+0x96>
    38f0:	12 96       	adiw	r26, 0x02	; 2
    38f2:	dc 93       	st	X, r29
    38f4:	ce 93       	st	-X, r28
    38f6:	11 97       	sbiw	r26, 0x01	; 1
    38f8:	13 86       	std	Z+11, r1	; 0x0b
    38fa:	12 86       	std	Z+10, r1	; 0x0a
    38fc:	2c 91       	ld	r18, X
    38fe:	21 50       	subi	r18, 0x01	; 1
    3900:	2c 93       	st	X, r18
    prvAddTaskToReadyList( pxUnblockedTCB );
    3902:	c6 89       	ldd	r28, Z+22	; 0x16
    3904:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <uxTopReadyPriority>
    3908:	2c 17       	cp	r18, r28
    390a:	10 f4       	brcc	.+4      	; 0x3910 <vTaskRemoveFromUnorderedEventList+0xae>
    390c:	c0 93 3a 07 	sts	0x073A, r28	; 0x80073a <uxTopReadyPriority>
    3910:	49 e0       	ldi	r20, 0x09	; 9
    3912:	4c 9f       	mul	r20, r28
    3914:	e0 01       	movw	r28, r0
    3916:	11 24       	eor	r1, r1
    3918:	c9 59       	subi	r28, 0x99	; 153
    391a:	d8 4f       	sbci	r29, 0xF8	; 248
    391c:	09 80       	ldd	r0, Y+1	; 0x01
    391e:	da 81       	ldd	r29, Y+2	; 0x02
    3920:	c0 2d       	mov	r28, r0
    3922:	d5 83       	std	Z+5, r29	; 0x05
    3924:	c4 83       	std	Z+4, r28	; 0x04
    3926:	2c 81       	ldd	r18, Y+4	; 0x04
    3928:	3d 81       	ldd	r19, Y+5	; 0x05
    392a:	37 83       	std	Z+7, r19	; 0x07
    392c:	26 83       	std	Z+6, r18	; 0x06
    392e:	2c 81       	ldd	r18, Y+4	; 0x04
    3930:	3d 81       	ldd	r19, Y+5	; 0x05
    3932:	d9 01       	movw	r26, r18
    3934:	13 96       	adiw	r26, 0x03	; 3
    3936:	9c 93       	st	X, r25
    3938:	8e 93       	st	-X, r24
    393a:	12 97       	sbiw	r26, 0x02	; 2
    393c:	9d 83       	std	Y+5, r25	; 0x05
    393e:	8c 83       	std	Y+4, r24	; 0x04
    3940:	96 89       	ldd	r25, Z+22	; 0x16
    3942:	94 9f       	mul	r25, r20
    3944:	d0 01       	movw	r26, r0
    3946:	11 24       	eor	r1, r1
    3948:	a9 59       	subi	r26, 0x99	; 153
    394a:	b8 4f       	sbci	r27, 0xF8	; 248
    394c:	b3 87       	std	Z+11, r27	; 0x0b
    394e:	a2 87       	std	Z+10, r26	; 0x0a
    3950:	8c 91       	ld	r24, X
    3952:	8f 5f       	subi	r24, 0xFF	; 255
    3954:	8c 93       	st	X, r24

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3956:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    395a:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    395e:	86 89       	ldd	r24, Z+22	; 0x16
    3960:	89 17       	cp	r24, r25
    3962:	18 f4       	brcc	.+6      	; 0x396a <vTaskRemoveFromUnorderedEventList+0x108>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xYieldPendings>
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
    396a:	df 91       	pop	r29
    396c:	cf 91       	pop	r28
    396e:	08 95       	ret

00003970 <vTaskSetTimeOutState>:
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
    taskENTER_CRITICAL();
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	0f 92       	push	r0
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
    3976:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <xNumOfOverflows>
    397a:	fc 01       	movw	r30, r24
    397c:	20 83       	st	Z, r18
        pxTimeOut->xTimeOnEntering = xTickCount;
    397e:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <xTickCount>
    3982:	30 91 3c 07 	lds	r19, 0x073C	; 0x80073c <xTickCount+0x1>
    3986:	32 83       	std	Z+2, r19	; 0x02
    3988:	21 83       	std	Z+1, r18	; 0x01
    }
    taskEXIT_CRITICAL();
    398a:	0f 90       	pop	r0
    398c:	0f be       	out	0x3f, r0	; 63

    traceRETURN_vTaskSetTimeOutState();
}
    398e:	08 95       	ret

00003990 <vTaskInternalSetTimeOutState>:
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    3990:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <xNumOfOverflows>
    3994:	fc 01       	movw	r30, r24
    3996:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    3998:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <xTickCount>
    399c:	30 91 3c 07 	lds	r19, 0x073C	; 0x80073c <xTickCount+0x1>
    39a0:	32 83       	std	Z+2, r19	; 0x02
    39a2:	21 83       	std	Z+1, r18	; 0x01

    traceRETURN_vTaskInternalSetTimeOutState();
}
    39a4:	08 95       	ret

000039a6 <xTaskCheckForTimeOut>:
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	f8 94       	cli
    39aa:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    39ac:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <xTickCount>
    39b0:	30 91 3c 07 	lds	r19, 0x073C	; 0x80073c <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    39b4:	dc 01       	movw	r26, r24
    39b6:	11 96       	adiw	r26, 0x01	; 1
    39b8:	4d 91       	ld	r20, X+
    39ba:	5c 91       	ld	r21, X
    39bc:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
    39be:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <xNumOfOverflows>
    39c2:	fc 91       	ld	r31, X
    39c4:	fe 17       	cp	r31, r30
    39c6:	51 f0       	breq	.+20     	; 0x39dc <xTaskCheckForTimeOut+0x36>
    39c8:	24 17       	cp	r18, r20
    39ca:	35 07       	cpc	r19, r21
    39cc:	38 f0       	brcs	.+14     	; 0x39dc <xTaskCheckForTimeOut+0x36>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    39ce:	fb 01       	movw	r30, r22
    39d0:	11 82       	std	Z+1, r1	; 0x01
    39d2:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    39d4:	81 e0       	ldi	r24, 0x01	; 1
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    39d6:	0f 90       	pop	r0
    39d8:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
}
    39da:	08 95       	ret

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    39dc:	24 1b       	sub	r18, r20
    39de:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait )
    39e0:	db 01       	movw	r26, r22
    39e2:	4d 91       	ld	r20, X+
    39e4:	5c 91       	ld	r21, X
    39e6:	24 17       	cp	r18, r20
    39e8:	35 07       	cpc	r19, r21
    39ea:	88 f7       	brcc	.-30     	; 0x39ce <xTaskCheckForTimeOut+0x28>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    39ec:	42 1b       	sub	r20, r18
    39ee:	53 0b       	sbc	r21, r19
    39f0:	fb 01       	movw	r30, r22
    39f2:	51 83       	std	Z+1, r21	; 0x01
    39f4:	40 83       	st	Z, r20
            vTaskInternalSetTimeOutState( pxTimeOut );
    39f6:	0e 94 c8 1c 	call	0x3990	; 0x3990 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	ec cf       	rjmp	.-40     	; 0x39d6 <xTaskCheckForTimeOut+0x30>

000039fe <vTaskMissedYield>:
void vTaskMissedYield( void )
{
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xYieldPendings>

    traceRETURN_vTaskMissedYield();
}
    3a04:	08 95       	ret

00003a06 <xTaskGetCurrentTaskHandle>:
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
    3a06:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    3a0a:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
        }
    3a0e:	08 95       	ret

00003a10 <xTaskGetCurrentTaskHandleForCore>:
    {
        TaskHandle_t xReturn = NULL;

        traceENTER_xTaskGetCurrentTaskHandleForCore( xCoreID );

        if( taskVALID_CORE_ID( xCoreID ) != pdFALSE )
    3a10:	81 11       	cpse	r24, r1
    3a12:	05 c0       	rjmp	.+10     	; 0x3a1e <xTaskGetCurrentTaskHandleForCore+0xe>
        {
            #if ( configNUMBER_OF_CORES == 1 )
                xReturn = pxCurrentTCB;
    3a14:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    3a18:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3a1c:	08 95       	ret
        }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    TaskHandle_t xTaskGetCurrentTaskHandleForCore( BaseType_t xCoreID )
    {
        TaskHandle_t xReturn = NULL;
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTaskGetCurrentTaskHandleForCore( xReturn );

        return xReturn;
    }
    3a22:	08 95       	ret

00003a24 <xTaskGetSchedulerState>:
    {
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
    3a24:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <xSchedulerRunning>
    3a28:	88 23       	and	r24, r24
    3a2a:	31 f0       	breq	.+12     	; 0x3a38 <xTaskGetSchedulerState+0x14>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3a2c:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxSchedulerSuspended>
    3a30:	88 23       	and	r24, r24
    3a32:	21 f0       	breq	.+8      	; 0x3a3c <xTaskGetSchedulerState+0x18>
                {
                    xReturn = taskSCHEDULER_RUNNING;
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	08 95       	ret

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	08 95       	ret
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
                {
                    xReturn = taskSCHEDULER_RUNNING;
    3a3c:	82 e0       	ldi	r24, 0x02	; 2
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
    }
    3a3e:	08 95       	ret

00003a40 <uxTaskResetEventItemValue>:
{
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    3a40:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3a44:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3a48:	84 85       	ldd	r24, Z+12	; 0x0c
    3a4a:	95 85       	ldd	r25, Z+13	; 0x0d

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
    3a4c:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    3a50:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3a54:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3a58:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3a5c:	56 96       	adiw	r26, 0x16	; 22
    3a5e:	4c 91       	ld	r20, X
    3a60:	24 e0       	ldi	r18, 0x04	; 4
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	24 1b       	sub	r18, r20
    3a66:	31 09       	sbc	r19, r1
    3a68:	35 87       	std	Z+13, r19	; 0x0d
    3a6a:	24 87       	std	Z+12, r18	; 0x0c

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
}
    3a6c:	08 95       	ret

00003a6e <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
    3a6e:	cf 92       	push	r12
    3a70:	df 92       	push	r13
    3a72:	ef 92       	push	r14
    3a74:	ff 92       	push	r15
    3a76:	0f 93       	push	r16
    3a78:	1f 93       	push	r17
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
    3a7e:	c8 2f       	mov	r28, r24
    3a80:	e6 2e       	mov	r14, r22
    3a82:	6a 01       	movw	r12, r20

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    3a84:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
    3a88:	0f b6       	in	r0, 0x3f	; 63
    3a8a:	f8 94       	cli
    3a8c:	0f 92       	push	r0
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
    3a8e:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3a92:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3a96:	d0 e0       	ldi	r29, 0x00	; 0
    3a98:	8e 01       	movw	r16, r28
    3a9a:	00 0f       	add	r16, r16
    3a9c:	11 1f       	adc	r17, r17
    3a9e:	00 0f       	add	r16, r16
    3aa0:	11 1f       	adc	r17, r17
    3aa2:	e0 0f       	add	r30, r16
    3aa4:	f1 1f       	adc	r31, r17
    3aa6:	81 a1       	ldd	r24, Z+33	; 0x21
    3aa8:	92 a1       	ldd	r25, Z+34	; 0x22
    3aaa:	a3 a1       	ldd	r26, Z+35	; 0x23
    3aac:	b4 a1       	ldd	r27, Z+36	; 0x24
    3aae:	89 2b       	or	r24, r25
    3ab0:	8a 2b       	or	r24, r26
    3ab2:	8b 2b       	or	r24, r27
    3ab4:	69 f4       	brne	.+26     	; 0x3ad0 <ulTaskGenericNotifyTake+0x62>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    3ab6:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3aba:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3abe:	ec 0f       	add	r30, r28
    3ac0:	fd 1f       	adc	r31, r29
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    3ac6:	ff 24       	eor	r15, r15
    3ac8:	f3 94       	inc	r15
    3aca:	c1 14       	cp	r12, r1
    3acc:	d1 04       	cpc	r13, r1
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <ulTaskGenericNotifyTake+0x64>
    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
    3ad0:	f1 2c       	mov	r15, r1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3ad2:	0f 90       	pop	r0
    3ad4:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    3ad6:	21 e0       	ldi	r18, 0x01	; 1
    3ad8:	f2 12       	cpse	r15, r18
    3ada:	03 c0       	rjmp	.+6      	; 0x3ae2 <ulTaskGenericNotifyTake+0x74>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3adc:	c6 01       	movw	r24, r12
    3ade:	0e 94 13 16 	call	0x2c26	; 0x2c26 <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3ae2:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    3ae6:	91 e0       	ldi	r25, 0x01	; 1
    3ae8:	f9 12       	cpse	r15, r25
    3aea:	04 c0       	rjmp	.+8      	; 0x3af4 <ulTaskGenericNotifyTake+0x86>
    3aec:	81 11       	cpse	r24, r1
    3aee:	02 c0       	rjmp	.+4      	; 0x3af4 <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
    3af0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3af4:	0f b6       	in	r0, 0x3f	; 63
    3af6:	f8 94       	cli
    3af8:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    3afa:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3afe:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3b02:	e0 0f       	add	r30, r16
    3b04:	f1 1f       	adc	r31, r17
    3b06:	61 a1       	ldd	r22, Z+33	; 0x21
    3b08:	72 a1       	ldd	r23, Z+34	; 0x22
    3b0a:	83 a1       	ldd	r24, Z+35	; 0x23
    3b0c:	94 a1       	ldd	r25, Z+36	; 0x24

            if( ulReturn != 0U )
    3b0e:	61 15       	cp	r22, r1
    3b10:	71 05       	cpc	r23, r1
    3b12:	81 05       	cpc	r24, r1
    3b14:	91 05       	cpc	r25, r1
    3b16:	69 f0       	breq	.+26     	; 0x3b32 <ulTaskGenericNotifyTake+0xc4>
            {
                if( xClearCountOnExit != pdFALSE )
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3b18:	20 91 8b 07 	lds	r18, 0x078B	; 0x80078b <pxCurrentTCB>
    3b1c:	30 91 8c 07 	lds	r19, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3b20:	02 0f       	add	r16, r18
    3b22:	13 1f       	adc	r17, r19
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];

            if( ulReturn != 0U )
            {
                if( xClearCountOnExit != pdFALSE )
    3b24:	ee 20       	and	r14, r14
    3b26:	b9 f0       	breq	.+46     	; 0x3b56 <ulTaskGenericNotifyTake+0xe8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3b28:	f8 01       	movw	r30, r16
    3b2a:	11 a2       	std	Z+33, r1	; 0x21
    3b2c:	12 a2       	std	Z+34, r1	; 0x22
    3b2e:	13 a2       	std	Z+35, r1	; 0x23
    3b30:	14 a2       	std	Z+36, r1	; 0x24
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    3b32:	20 91 8b 07 	lds	r18, 0x078B	; 0x80078b <pxCurrentTCB>
    3b36:	30 91 8c 07 	lds	r19, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3b3a:	c2 0f       	add	r28, r18
    3b3c:	d3 1f       	adc	r29, r19
    3b3e:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    3b40:	0f 90       	pop	r0
    3b42:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
    }
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	df 90       	pop	r13
    3b52:	cf 90       	pop	r12
    3b54:	08 95       	ret
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
    3b56:	6b 01       	movw	r12, r22
    3b58:	7c 01       	movw	r14, r24
    3b5a:	f1 e0       	ldi	r31, 0x01	; 1
    3b5c:	cf 1a       	sub	r12, r31
    3b5e:	d1 08       	sbc	r13, r1
    3b60:	e1 08       	sbc	r14, r1
    3b62:	f1 08       	sbc	r15, r1
    3b64:	f8 01       	movw	r30, r16
    3b66:	c1 a2       	std	Z+33, r12	; 0x21
    3b68:	d2 a2       	std	Z+34, r13	; 0x22
    3b6a:	e3 a2       	std	Z+35, r14	; 0x23
    3b6c:	f4 a2       	std	Z+36, r15	; 0x24
    3b6e:	e1 cf       	rjmp	.-62     	; 0x3b32 <ulTaskGenericNotifyTake+0xc4>

00003b70 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
    3b70:	4f 92       	push	r4
    3b72:	5f 92       	push	r5
    3b74:	6f 92       	push	r6
    3b76:	7f 92       	push	r7
    3b78:	8f 92       	push	r8
    3b7a:	9f 92       	push	r9
    3b7c:	af 92       	push	r10
    3b7e:	bf 92       	push	r11
    3b80:	cf 92       	push	r12
    3b82:	df 92       	push	r13
    3b84:	ef 92       	push	r14
    3b86:	ff 92       	push	r15
    3b88:	0f 93       	push	r16
    3b8a:	1f 93       	push	r17
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	c8 2f       	mov	r28, r24
    3b92:	2a 01       	movw	r4, r20
    3b94:	3b 01       	movw	r6, r22
    3b96:	48 01       	movw	r8, r16
    3b98:	59 01       	movw	r10, r18

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    3b9a:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	0f 92       	push	r0
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    3ba4:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3ba8:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3bac:	d0 e0       	ldi	r29, 0x00	; 0
    3bae:	ec 0f       	add	r30, r28
    3bb0:	fd 1f       	adc	r31, r29
    3bb2:	85 a1       	ldd	r24, Z+37	; 0x25
    3bb4:	82 30       	cpi	r24, 0x02	; 2
    3bb6:	39 f1       	breq	.+78     	; 0x3c06 <xTaskGenericNotifyWait+0x96>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
    3bb8:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3bbc:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3bc0:	ce 01       	movw	r24, r28
    3bc2:	88 0f       	add	r24, r24
    3bc4:	99 1f       	adc	r25, r25
    3bc6:	88 0f       	add	r24, r24
    3bc8:	99 1f       	adc	r25, r25
    3bca:	e8 0f       	add	r30, r24
    3bcc:	f9 1f       	adc	r31, r25
    3bce:	81 a1       	ldd	r24, Z+33	; 0x21
    3bd0:	92 a1       	ldd	r25, Z+34	; 0x22
    3bd2:	a3 a1       	ldd	r26, Z+35	; 0x23
    3bd4:	b4 a1       	ldd	r27, Z+36	; 0x24
    3bd6:	40 94       	com	r4
    3bd8:	50 94       	com	r5
    3bda:	60 94       	com	r6
    3bdc:	70 94       	com	r7
    3bde:	84 21       	and	r24, r4
    3be0:	95 21       	and	r25, r5
    3be2:	a6 21       	and	r26, r6
    3be4:	b7 21       	and	r27, r7
    3be6:	81 a3       	std	Z+33, r24	; 0x21
    3be8:	92 a3       	std	Z+34, r25	; 0x22
    3bea:	a3 a3       	std	Z+35, r26	; 0x23
    3bec:	b4 a3       	std	Z+36, r27	; 0x24

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    3bee:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3bf2:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3bf6:	ec 0f       	add	r30, r28
    3bf8:	fd 1f       	adc	r31, r29
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    3bfe:	11 e0       	ldi	r17, 0x01	; 1
    3c00:	c1 14       	cp	r12, r1
    3c02:	d1 04       	cpc	r13, r1
    3c04:	09 f4       	brne	.+2      	; 0x3c08 <xTaskGenericNotifyWait+0x98>
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
    3c06:	10 e0       	ldi	r17, 0x00	; 0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3c08:	0f 90       	pop	r0
    3c0a:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    3c0c:	11 30       	cpi	r17, 0x01	; 1
    3c0e:	19 f4       	brne	.+6      	; 0x3c16 <xTaskGenericNotifyWait+0xa6>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3c10:	c6 01       	movw	r24, r12
    3c12:	0e 94 13 16 	call	0x2c26	; 0x2c26 <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3c16:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    3c1a:	11 30       	cpi	r17, 0x01	; 1
    3c1c:	21 f4       	brne	.+8      	; 0x3c26 <xTaskGenericNotifyWait+0xb6>
    3c1e:	81 11       	cpse	r24, r1
    3c20:	02 c0       	rjmp	.+4      	; 0x3c26 <xTaskGenericNotifyWait+0xb6>
        {
            taskYIELD_WITHIN_API();
    3c22:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
    3c2c:	e1 14       	cp	r14, r1
    3c2e:	f1 04       	cpc	r15, r1
    3c30:	a1 f0       	breq	.+40     	; 0x3c5a <xTaskGenericNotifyWait+0xea>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    3c32:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3c36:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3c3a:	ce 01       	movw	r24, r28
    3c3c:	88 0f       	add	r24, r24
    3c3e:	99 1f       	adc	r25, r25
    3c40:	88 0f       	add	r24, r24
    3c42:	99 1f       	adc	r25, r25
    3c44:	e8 0f       	add	r30, r24
    3c46:	f9 1f       	adc	r31, r25
    3c48:	81 a1       	ldd	r24, Z+33	; 0x21
    3c4a:	92 a1       	ldd	r25, Z+34	; 0x22
    3c4c:	a3 a1       	ldd	r26, Z+35	; 0x23
    3c4e:	b4 a1       	ldd	r27, Z+36	; 0x24
    3c50:	f7 01       	movw	r30, r14
    3c52:	80 83       	st	Z, r24
    3c54:	91 83       	std	Z+1, r25	; 0x01
    3c56:	a2 83       	std	Z+2, r26	; 0x02
    3c58:	b3 83       	std	Z+3, r27	; 0x03

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    3c5a:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3c5e:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3c62:	ec 0f       	add	r30, r28
    3c64:	fd 1f       	adc	r31, r29
    3c66:	85 a1       	ldd	r24, Z+37	; 0x25
    3c68:	82 30       	cpi	r24, 0x02	; 2
    3c6a:	b1 f5       	brne	.+108    	; 0x3cd8 <xTaskGenericNotifyWait+0x168>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
    3c6c:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3c70:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3c74:	ce 01       	movw	r24, r28
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	e8 0f       	add	r30, r24
    3c80:	f9 1f       	adc	r31, r25
    3c82:	81 a1       	ldd	r24, Z+33	; 0x21
    3c84:	92 a1       	ldd	r25, Z+34	; 0x22
    3c86:	a3 a1       	ldd	r26, Z+35	; 0x23
    3c88:	b4 a1       	ldd	r27, Z+36	; 0x24
    3c8a:	80 94       	com	r8
    3c8c:	90 94       	com	r9
    3c8e:	a0 94       	com	r10
    3c90:	b0 94       	com	r11
    3c92:	88 21       	and	r24, r8
    3c94:	99 21       	and	r25, r9
    3c96:	aa 21       	and	r26, r10
    3c98:	bb 21       	and	r27, r11
    3c9a:	81 a3       	std	Z+33, r24	; 0x21
    3c9c:	92 a3       	std	Z+34, r25	; 0x22
    3c9e:	a3 a3       	std	Z+35, r26	; 0x23
    3ca0:	b4 a3       	std	Z+36, r27	; 0x24
                xReturn = pdTRUE;
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    3ca4:	20 91 8b 07 	lds	r18, 0x078B	; 0x80078b <pxCurrentTCB>
    3ca8:	30 91 8c 07 	lds	r19, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3cac:	c2 0f       	add	r28, r18
    3cae:	d3 1f       	adc	r29, r19
    3cb0:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    3cb2:	0f 90       	pop	r0
    3cb4:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
    }
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	1f 91       	pop	r17
    3cbc:	0f 91       	pop	r16
    3cbe:	ff 90       	pop	r15
    3cc0:	ef 90       	pop	r14
    3cc2:	df 90       	pop	r13
    3cc4:	cf 90       	pop	r12
    3cc6:	bf 90       	pop	r11
    3cc8:	af 90       	pop	r10
    3cca:	9f 90       	pop	r9
    3ccc:	8f 90       	pop	r8
    3cce:	7f 90       	pop	r7
    3cd0:	6f 90       	pop	r6
    3cd2:	5f 90       	pop	r5
    3cd4:	4f 90       	pop	r4
    3cd6:	08 95       	ret
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	e4 cf       	rjmp	.-56     	; 0x3ca4 <xTaskGenericNotifyWait+0x134>

00003cdc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
    3cdc:	8f 92       	push	r8
    3cde:	9f 92       	push	r9
    3ce0:	af 92       	push	r10
    3ce2:	bf 92       	push	r11
    3ce4:	cf 92       	push	r12
    3ce6:	df 92       	push	r13
    3ce8:	ef 92       	push	r14
    3cea:	ff 92       	push	r15
    3cec:	0f 93       	push	r16
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	dc 01       	movw	r26, r24

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;

        taskENTER_CRITICAL();
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	0f 92       	push	r0
    3cfa:	70 e0       	ldi	r23, 0x00	; 0
        {
            if( pulPreviousNotificationValue != NULL )
    3cfc:	e1 14       	cp	r14, r1
    3cfe:	f1 04       	cpc	r15, r1
    3d00:	81 f0       	breq	.+32     	; 0x3d22 <xTaskGenericNotify+0x46>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    3d02:	fb 01       	movw	r30, r22
    3d04:	ee 0f       	add	r30, r30
    3d06:	ff 1f       	adc	r31, r31
    3d08:	ee 0f       	add	r30, r30
    3d0a:	ff 1f       	adc	r31, r31
    3d0c:	e8 0f       	add	r30, r24
    3d0e:	f9 1f       	adc	r31, r25
    3d10:	81 a0       	ldd	r8, Z+33	; 0x21
    3d12:	92 a0       	ldd	r9, Z+34	; 0x22
    3d14:	a3 a0       	ldd	r10, Z+35	; 0x23
    3d16:	b4 a0       	ldd	r11, Z+36	; 0x24
    3d18:	e7 01       	movw	r28, r14
    3d1a:	88 82       	st	Y, r8
    3d1c:	99 82       	std	Y+1, r9	; 0x01
    3d1e:	aa 82       	std	Y+2, r10	; 0x02
    3d20:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    3d22:	fd 01       	movw	r30, r26
    3d24:	e6 0f       	add	r30, r22
    3d26:	f7 1f       	adc	r31, r23
    3d28:	85 a1       	ldd	r24, Z+37	; 0x25

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    3d2a:	92 e0       	ldi	r25, 0x02	; 2
    3d2c:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    3d2e:	02 30       	cpi	r16, 0x02	; 2
    3d30:	e1 f1       	breq	.+120    	; 0x3daa <xTaskGenericNotify+0xce>
    3d32:	a0 f4       	brcc	.+40     	; 0x3d5c <xTaskGenericNotify+0x80>
    3d34:	01 30       	cpi	r16, 0x01	; 1
    3d36:	29 f1       	breq	.+74     	; 0x3d82 <xTaskGenericNotify+0xa6>

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    3d38:	81 30       	cpi	r24, 0x01	; 1
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <xTaskGenericNotify+0x62>
    3d3c:	4a c0       	rjmp	.+148    	; 0x3dd2 <xTaskGenericNotify+0xf6>
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    3d40:	0f 90       	pop	r0
    3d42:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
    }
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	0f 91       	pop	r16
    3d4a:	ff 90       	pop	r15
    3d4c:	ef 90       	pop	r14
    3d4e:	df 90       	pop	r13
    3d50:	cf 90       	pop	r12
    3d52:	bf 90       	pop	r11
    3d54:	af 90       	pop	r10
    3d56:	9f 90       	pop	r9
    3d58:	8f 90       	pop	r8
    3d5a:	08 95       	ret

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    3d5c:	03 30       	cpi	r16, 0x03	; 3
    3d5e:	29 f0       	breq	.+10     	; 0x3d6a <xTaskGenericNotify+0x8e>
    3d60:	04 30       	cpi	r16, 0x04	; 4
    3d62:	51 f7       	brne	.-44     	; 0x3d38 <xTaskGenericNotify+0x5c>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    3d64:	82 30       	cpi	r24, 0x02	; 2
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <xTaskGenericNotify+0x8e>
    3d68:	97 c0       	rjmp	.+302    	; 0x3e98 <xTaskGenericNotify+0x1bc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    3d6a:	66 0f       	add	r22, r22
    3d6c:	77 1f       	adc	r23, r23
    3d6e:	66 0f       	add	r22, r22
    3d70:	77 1f       	adc	r23, r23
    3d72:	fd 01       	movw	r30, r26
    3d74:	e6 0f       	add	r30, r22
    3d76:	f7 1f       	adc	r31, r23
    3d78:	21 a3       	std	Z+33, r18	; 0x21
    3d7a:	32 a3       	std	Z+34, r19	; 0x22
    3d7c:	43 a3       	std	Z+35, r20	; 0x23
    3d7e:	54 a3       	std	Z+36, r21	; 0x24
    3d80:	db cf       	rjmp	.-74     	; 0x3d38 <xTaskGenericNotify+0x5c>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    3d82:	66 0f       	add	r22, r22
    3d84:	77 1f       	adc	r23, r23
    3d86:	66 0f       	add	r22, r22
    3d88:	77 1f       	adc	r23, r23
    3d8a:	fd 01       	movw	r30, r26
    3d8c:	e6 0f       	add	r30, r22
    3d8e:	f7 1f       	adc	r31, r23
    3d90:	c1 a0       	ldd	r12, Z+33	; 0x21
    3d92:	d2 a0       	ldd	r13, Z+34	; 0x22
    3d94:	e3 a0       	ldd	r14, Z+35	; 0x23
    3d96:	f4 a0       	ldd	r15, Z+36	; 0x24
    3d98:	c2 2a       	or	r12, r18
    3d9a:	d3 2a       	or	r13, r19
    3d9c:	e4 2a       	or	r14, r20
    3d9e:	f5 2a       	or	r15, r21
    3da0:	c1 a2       	std	Z+33, r12	; 0x21
    3da2:	d2 a2       	std	Z+34, r13	; 0x22
    3da4:	e3 a2       	std	Z+35, r14	; 0x23
    3da6:	f4 a2       	std	Z+36, r15	; 0x24
                    break;
    3da8:	c7 cf       	rjmp	.-114    	; 0x3d38 <xTaskGenericNotify+0x5c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    3daa:	66 0f       	add	r22, r22
    3dac:	77 1f       	adc	r23, r23
    3dae:	66 0f       	add	r22, r22
    3db0:	77 1f       	adc	r23, r23
    3db2:	fd 01       	movw	r30, r26
    3db4:	e6 0f       	add	r30, r22
    3db6:	f7 1f       	adc	r31, r23
    3db8:	41 a1       	ldd	r20, Z+33	; 0x21
    3dba:	52 a1       	ldd	r21, Z+34	; 0x22
    3dbc:	63 a1       	ldd	r22, Z+35	; 0x23
    3dbe:	74 a1       	ldd	r23, Z+36	; 0x24
    3dc0:	4f 5f       	subi	r20, 0xFF	; 255
    3dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc4:	6f 4f       	sbci	r22, 0xFF	; 255
    3dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc8:	41 a3       	std	Z+33, r20	; 0x21
    3dca:	52 a3       	std	Z+34, r21	; 0x22
    3dcc:	63 a3       	std	Z+35, r22	; 0x23
    3dce:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    3dd0:	b3 cf       	rjmp	.-154    	; 0x3d38 <xTaskGenericNotify+0x5c>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    3dd2:	1a 96       	adiw	r26, 0x0a	; 10
    3dd4:	ed 91       	ld	r30, X+
    3dd6:	fc 91       	ld	r31, X
    3dd8:	1b 97       	sbiw	r26, 0x0b	; 11
    3dda:	14 96       	adiw	r26, 0x04	; 4
    3ddc:	8d 91       	ld	r24, X+
    3dde:	9c 91       	ld	r25, X
    3de0:	15 97       	sbiw	r26, 0x05	; 5
    3de2:	16 96       	adiw	r26, 0x06	; 6
    3de4:	2d 91       	ld	r18, X+
    3de6:	3c 91       	ld	r19, X
    3de8:	17 97       	sbiw	r26, 0x07	; 7
    3dea:	ec 01       	movw	r28, r24
    3dec:	3d 83       	std	Y+5, r19	; 0x05
    3dee:	2c 83       	std	Y+4, r18	; 0x04
    3df0:	16 96       	adiw	r26, 0x06	; 6
    3df2:	cd 91       	ld	r28, X+
    3df4:	dc 91       	ld	r29, X
    3df6:	17 97       	sbiw	r26, 0x07	; 7
    3df8:	9b 83       	std	Y+3, r25	; 0x03
    3dfa:	8a 83       	std	Y+2, r24	; 0x02
    3dfc:	9d 01       	movw	r18, r26
    3dfe:	2e 5f       	subi	r18, 0xFE	; 254
    3e00:	3f 4f       	sbci	r19, 0xFF	; 255
    3e02:	81 81       	ldd	r24, Z+1	; 0x01
    3e04:	92 81       	ldd	r25, Z+2	; 0x02
    3e06:	82 17       	cp	r24, r18
    3e08:	93 07       	cpc	r25, r19
    3e0a:	11 f4       	brne	.+4      	; 0x3e10 <xTaskGenericNotify+0x134>
    3e0c:	d2 83       	std	Z+2, r29	; 0x02
    3e0e:	c1 83       	std	Z+1, r28	; 0x01
    3e10:	1b 96       	adiw	r26, 0x0b	; 11
    3e12:	1c 92       	st	X, r1
    3e14:	1e 92       	st	-X, r1
    3e16:	1a 97       	sbiw	r26, 0x0a	; 10
    3e18:	80 81       	ld	r24, Z
    3e1a:	81 50       	subi	r24, 0x01	; 1
    3e1c:	80 83       	st	Z, r24
                prvAddTaskToReadyList( pxTCB );
    3e1e:	56 96       	adiw	r26, 0x16	; 22
    3e20:	cc 91       	ld	r28, X
    3e22:	56 97       	sbiw	r26, 0x16	; 22
    3e24:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxTopReadyPriority>
    3e28:	8c 17       	cp	r24, r28
    3e2a:	10 f4       	brcc	.+4      	; 0x3e30 <xTaskGenericNotify+0x154>
    3e2c:	c0 93 3a 07 	sts	0x073A, r28	; 0x80073a <uxTopReadyPriority>
    3e30:	49 e0       	ldi	r20, 0x09	; 9
    3e32:	4c 9f       	mul	r20, r28
    3e34:	e0 01       	movw	r28, r0
    3e36:	11 24       	eor	r1, r1
    3e38:	c9 59       	subi	r28, 0x99	; 153
    3e3a:	d8 4f       	sbci	r29, 0xF8	; 248
    3e3c:	09 80       	ldd	r0, Y+1	; 0x01
    3e3e:	da 81       	ldd	r29, Y+2	; 0x02
    3e40:	c0 2d       	mov	r28, r0
    3e42:	15 96       	adiw	r26, 0x05	; 5
    3e44:	dc 93       	st	X, r29
    3e46:	ce 93       	st	-X, r28
    3e48:	14 97       	sbiw	r26, 0x04	; 4
    3e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e4e:	17 96       	adiw	r26, 0x07	; 7
    3e50:	9c 93       	st	X, r25
    3e52:	8e 93       	st	-X, r24
    3e54:	16 97       	sbiw	r26, 0x06	; 6
    3e56:	8c 81       	ldd	r24, Y+4	; 0x04
    3e58:	9d 81       	ldd	r25, Y+5	; 0x05
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	33 83       	std	Z+3, r19	; 0x03
    3e5e:	22 83       	std	Z+2, r18	; 0x02
    3e60:	3d 83       	std	Y+5, r19	; 0x05
    3e62:	2c 83       	std	Y+4, r18	; 0x04
    3e64:	56 96       	adiw	r26, 0x16	; 22
    3e66:	9c 91       	ld	r25, X
    3e68:	56 97       	sbiw	r26, 0x16	; 22
    3e6a:	94 9f       	mul	r25, r20
    3e6c:	f0 01       	movw	r30, r0
    3e6e:	11 24       	eor	r1, r1
    3e70:	e9 59       	subi	r30, 0x99	; 153
    3e72:	f8 4f       	sbci	r31, 0xF8	; 248
    3e74:	1b 96       	adiw	r26, 0x0b	; 11
    3e76:	fc 93       	st	X, r31
    3e78:	ee 93       	st	-X, r30
    3e7a:	1a 97       	sbiw	r26, 0x0a	; 10
    3e7c:	80 81       	ld	r24, Z
    3e7e:	8f 5f       	subi	r24, 0xFF	; 255
    3e80:	80 83       	st	Z, r24
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
    3e82:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    3e86:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    3e8a:	86 89       	ldd	r24, Z+22	; 0x16
    3e8c:	89 17       	cp	r24, r25
    3e8e:	08 f0       	brcs	.+2      	; 0x3e92 <xTaskGenericNotify+0x1b6>
    3e90:	56 cf       	rjmp	.-340    	; 0x3d3e <xTaskGenericNotify+0x62>
    3e92:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
    3e96:	53 cf       	rjmp	.-346    	; 0x3d3e <xTaskGenericNotify+0x62>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	52 cf       	rjmp	.-348    	; 0x3d40 <xTaskGenericNotify+0x64>

00003e9c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    3e9c:	8f 92       	push	r8
    3e9e:	9f 92       	push	r9
    3ea0:	af 92       	push	r10
    3ea2:	bf 92       	push	r11
    3ea4:	cf 92       	push	r12
    3ea6:	df 92       	push	r13
    3ea8:	ef 92       	push	r14
    3eaa:	ff 92       	push	r15
    3eac:	0f 93       	push	r16
    3eae:	cf 93       	push	r28
    3eb0:	df 93       	push	r29
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	70 e0       	ldi	r23, 0x00	; 0
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            if( pulPreviousNotificationValue != NULL )
    3eb6:	e1 14       	cp	r14, r1
    3eb8:	f1 04       	cpc	r15, r1
    3eba:	81 f0       	breq	.+32     	; 0x3edc <xTaskGenericNotifyFromISR+0x40>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    3ebc:	fb 01       	movw	r30, r22
    3ebe:	ee 0f       	add	r30, r30
    3ec0:	ff 1f       	adc	r31, r31
    3ec2:	ee 0f       	add	r30, r30
    3ec4:	ff 1f       	adc	r31, r31
    3ec6:	e8 0f       	add	r30, r24
    3ec8:	f9 1f       	adc	r31, r25
    3eca:	81 a0       	ldd	r8, Z+33	; 0x21
    3ecc:	92 a0       	ldd	r9, Z+34	; 0x22
    3ece:	a3 a0       	ldd	r10, Z+35	; 0x23
    3ed0:	b4 a0       	ldd	r11, Z+36	; 0x24
    3ed2:	e7 01       	movw	r28, r14
    3ed4:	88 82       	st	Y, r8
    3ed6:	99 82       	std	Y+1, r9	; 0x01
    3ed8:	aa 82       	std	Y+2, r10	; 0x02
    3eda:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    3edc:	fd 01       	movw	r30, r26
    3ede:	e6 0f       	add	r30, r22
    3ee0:	f7 1f       	adc	r31, r23
    3ee2:	85 a1       	ldd	r24, Z+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    3ee4:	92 e0       	ldi	r25, 0x02	; 2
    3ee6:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    3ee8:	02 30       	cpi	r16, 0x02	; 2
    3eea:	d1 f1       	breq	.+116    	; 0x3f60 <xTaskGenericNotifyFromISR+0xc4>
    3eec:	90 f4       	brcc	.+36     	; 0x3f12 <xTaskGenericNotifyFromISR+0x76>
    3eee:	01 30       	cpi	r16, 0x01	; 1
    3ef0:	19 f1       	breq	.+70     	; 0x3f38 <xTaskGenericNotifyFromISR+0x9c>

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    3ef2:	81 30       	cpi	r24, 0x01	; 1
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <xTaskGenericNotifyFromISR+0x5c>
    3ef6:	48 c0       	rjmp	.+144    	; 0x3f88 <xTaskGenericNotifyFromISR+0xec>
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    }
    3efa:	df 91       	pop	r29
    3efc:	cf 91       	pop	r28
    3efe:	0f 91       	pop	r16
    3f00:	ff 90       	pop	r15
    3f02:	ef 90       	pop	r14
    3f04:	df 90       	pop	r13
    3f06:	cf 90       	pop	r12
    3f08:	bf 90       	pop	r11
    3f0a:	af 90       	pop	r10
    3f0c:	9f 90       	pop	r9
    3f0e:	8f 90       	pop	r8
    3f10:	08 95       	ret
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    3f12:	03 30       	cpi	r16, 0x03	; 3
    3f14:	29 f0       	breq	.+10     	; 0x3f20 <xTaskGenericNotifyFromISR+0x84>
    3f16:	04 30       	cpi	r16, 0x04	; 4
    3f18:	61 f7       	brne	.-40     	; 0x3ef2 <xTaskGenericNotifyFromISR+0x56>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    3f1a:	82 30       	cpi	r24, 0x02	; 2
    3f1c:	09 f4       	brne	.+2      	; 0x3f20 <xTaskGenericNotifyFromISR+0x84>
    3f1e:	c5 c0       	rjmp	.+394    	; 0x40aa <xTaskGenericNotifyFromISR+0x20e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    3f20:	66 0f       	add	r22, r22
    3f22:	77 1f       	adc	r23, r23
    3f24:	66 0f       	add	r22, r22
    3f26:	77 1f       	adc	r23, r23
    3f28:	fd 01       	movw	r30, r26
    3f2a:	e6 0f       	add	r30, r22
    3f2c:	f7 1f       	adc	r31, r23
    3f2e:	21 a3       	std	Z+33, r18	; 0x21
    3f30:	32 a3       	std	Z+34, r19	; 0x22
    3f32:	43 a3       	std	Z+35, r20	; 0x23
    3f34:	54 a3       	std	Z+36, r21	; 0x24
    3f36:	dd cf       	rjmp	.-70     	; 0x3ef2 <xTaskGenericNotifyFromISR+0x56>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    3f38:	66 0f       	add	r22, r22
    3f3a:	77 1f       	adc	r23, r23
    3f3c:	66 0f       	add	r22, r22
    3f3e:	77 1f       	adc	r23, r23
    3f40:	fd 01       	movw	r30, r26
    3f42:	e6 0f       	add	r30, r22
    3f44:	f7 1f       	adc	r31, r23
    3f46:	81 a0       	ldd	r8, Z+33	; 0x21
    3f48:	92 a0       	ldd	r9, Z+34	; 0x22
    3f4a:	a3 a0       	ldd	r10, Z+35	; 0x23
    3f4c:	b4 a0       	ldd	r11, Z+36	; 0x24
    3f4e:	82 2a       	or	r8, r18
    3f50:	93 2a       	or	r9, r19
    3f52:	a4 2a       	or	r10, r20
    3f54:	b5 2a       	or	r11, r21
    3f56:	81 a2       	std	Z+33, r8	; 0x21
    3f58:	92 a2       	std	Z+34, r9	; 0x22
    3f5a:	a3 a2       	std	Z+35, r10	; 0x23
    3f5c:	b4 a2       	std	Z+36, r11	; 0x24
                    break;
    3f5e:	c9 cf       	rjmp	.-110    	; 0x3ef2 <xTaskGenericNotifyFromISR+0x56>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    3f60:	66 0f       	add	r22, r22
    3f62:	77 1f       	adc	r23, r23
    3f64:	66 0f       	add	r22, r22
    3f66:	77 1f       	adc	r23, r23
    3f68:	fd 01       	movw	r30, r26
    3f6a:	e6 0f       	add	r30, r22
    3f6c:	f7 1f       	adc	r31, r23
    3f6e:	41 a1       	ldd	r20, Z+33	; 0x21
    3f70:	52 a1       	ldd	r21, Z+34	; 0x22
    3f72:	63 a1       	ldd	r22, Z+35	; 0x23
    3f74:	74 a1       	ldd	r23, Z+36	; 0x24
    3f76:	4f 5f       	subi	r20, 0xFF	; 255
    3f78:	5f 4f       	sbci	r21, 0xFF	; 255
    3f7a:	6f 4f       	sbci	r22, 0xFF	; 255
    3f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7e:	41 a3       	std	Z+33, r20	; 0x21
    3f80:	52 a3       	std	Z+34, r21	; 0x22
    3f82:	63 a3       	std	Z+35, r22	; 0x23
    3f84:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    3f86:	b5 cf       	rjmp	.-150    	; 0x3ef2 <xTaskGenericNotifyFromISR+0x56>
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3f88:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxSchedulerSuspended>
    3f8c:	81 11       	cpse	r24, r1
    3f8e:	6b c0       	rjmp	.+214    	; 0x4066 <xTaskGenericNotifyFromISR+0x1ca>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    3f90:	1a 96       	adiw	r26, 0x0a	; 10
    3f92:	ed 91       	ld	r30, X+
    3f94:	fc 91       	ld	r31, X
    3f96:	1b 97       	sbiw	r26, 0x0b	; 11
    3f98:	14 96       	adiw	r26, 0x04	; 4
    3f9a:	8d 91       	ld	r24, X+
    3f9c:	9c 91       	ld	r25, X
    3f9e:	15 97       	sbiw	r26, 0x05	; 5
    3fa0:	16 96       	adiw	r26, 0x06	; 6
    3fa2:	2d 91       	ld	r18, X+
    3fa4:	3c 91       	ld	r19, X
    3fa6:	17 97       	sbiw	r26, 0x07	; 7
    3fa8:	ec 01       	movw	r28, r24
    3faa:	3d 83       	std	Y+5, r19	; 0x05
    3fac:	2c 83       	std	Y+4, r18	; 0x04
    3fae:	16 96       	adiw	r26, 0x06	; 6
    3fb0:	cd 91       	ld	r28, X+
    3fb2:	dc 91       	ld	r29, X
    3fb4:	17 97       	sbiw	r26, 0x07	; 7
    3fb6:	9b 83       	std	Y+3, r25	; 0x03
    3fb8:	8a 83       	std	Y+2, r24	; 0x02
    3fba:	9d 01       	movw	r18, r26
    3fbc:	2e 5f       	subi	r18, 0xFE	; 254
    3fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc0:	81 81       	ldd	r24, Z+1	; 0x01
    3fc2:	92 81       	ldd	r25, Z+2	; 0x02
    3fc4:	82 17       	cp	r24, r18
    3fc6:	93 07       	cpc	r25, r19
    3fc8:	11 f4       	brne	.+4      	; 0x3fce <xTaskGenericNotifyFromISR+0x132>
    3fca:	d2 83       	std	Z+2, r29	; 0x02
    3fcc:	c1 83       	std	Z+1, r28	; 0x01
    3fce:	1b 96       	adiw	r26, 0x0b	; 11
    3fd0:	1c 92       	st	X, r1
    3fd2:	1e 92       	st	-X, r1
    3fd4:	1a 97       	sbiw	r26, 0x0a	; 10
    3fd6:	80 81       	ld	r24, Z
    3fd8:	81 50       	subi	r24, 0x01	; 1
    3fda:	80 83       	st	Z, r24
                    prvAddTaskToReadyList( pxTCB );
    3fdc:	56 96       	adiw	r26, 0x16	; 22
    3fde:	cc 91       	ld	r28, X
    3fe0:	56 97       	sbiw	r26, 0x16	; 22
    3fe2:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxTopReadyPriority>
    3fe6:	8c 17       	cp	r24, r28
    3fe8:	10 f4       	brcc	.+4      	; 0x3fee <xTaskGenericNotifyFromISR+0x152>
    3fea:	c0 93 3a 07 	sts	0x073A, r28	; 0x80073a <uxTopReadyPriority>
    3fee:	89 e0       	ldi	r24, 0x09	; 9
    3ff0:	8c 9f       	mul	r24, r28
    3ff2:	e0 01       	movw	r28, r0
    3ff4:	11 24       	eor	r1, r1
    3ff6:	c9 59       	subi	r28, 0x99	; 153
    3ff8:	d8 4f       	sbci	r29, 0xF8	; 248
    3ffa:	09 80       	ldd	r0, Y+1	; 0x01
    3ffc:	da 81       	ldd	r29, Y+2	; 0x02
    3ffe:	c0 2d       	mov	r28, r0
    4000:	15 96       	adiw	r26, 0x05	; 5
    4002:	dc 93       	st	X, r29
    4004:	ce 93       	st	-X, r28
    4006:	14 97       	sbiw	r26, 0x04	; 4
    4008:	4c 81       	ldd	r20, Y+4	; 0x04
    400a:	5d 81       	ldd	r21, Y+5	; 0x05
    400c:	17 96       	adiw	r26, 0x07	; 7
    400e:	5c 93       	st	X, r21
    4010:	4e 93       	st	-X, r20
    4012:	16 97       	sbiw	r26, 0x06	; 6
    4014:	ec 81       	ldd	r30, Y+4	; 0x04
    4016:	fd 81       	ldd	r31, Y+5	; 0x05
    4018:	33 83       	std	Z+3, r19	; 0x03
    401a:	22 83       	std	Z+2, r18	; 0x02
    401c:	3d 83       	std	Y+5, r19	; 0x05
    401e:	2c 83       	std	Y+4, r18	; 0x04
    4020:	56 96       	adiw	r26, 0x16	; 22
    4022:	ec 91       	ld	r30, X
    4024:	56 97       	sbiw	r26, 0x16	; 22
    4026:	e8 9f       	mul	r30, r24
    4028:	f0 01       	movw	r30, r0
    402a:	11 24       	eor	r1, r1
    402c:	e9 59       	subi	r30, 0x99	; 153
    402e:	f8 4f       	sbci	r31, 0xF8	; 248
    4030:	1b 96       	adiw	r26, 0x0b	; 11
    4032:	fc 93       	st	X, r31
    4034:	ee 93       	st	-X, r30
    4036:	1a 97       	sbiw	r26, 0x0a	; 10
    4038:	80 81       	ld	r24, Z
    403a:	8f 5f       	subi	r24, 0xFF	; 255
    403c:	80 83       	st	Z, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    403e:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <pxCurrentTCB>
    4042:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    4046:	56 96       	adiw	r26, 0x16	; 22
    4048:	9c 91       	ld	r25, X
    404a:	86 89       	ldd	r24, Z+22	; 0x16
    404c:	89 17       	cp	r24, r25
    404e:	08 f0       	brcs	.+2      	; 0x4052 <xTaskGenericNotifyFromISR+0x1b6>
    4050:	53 cf       	rjmp	.-346    	; 0x3ef8 <xTaskGenericNotifyFromISR+0x5c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    4052:	c1 14       	cp	r12, r1
    4054:	d1 04       	cpc	r13, r1
    4056:	19 f0       	breq	.+6      	; 0x405e <xTaskGenericNotifyFromISR+0x1c2>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	f6 01       	movw	r30, r12
    405c:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xYieldPendings>
    4064:	4a cf       	rjmp	.-364    	; 0x3efa <xTaskGenericNotifyFromISR+0x5e>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4066:	e0 91 49 07 	lds	r30, 0x0749	; 0x800749 <xPendingReadyList+0x1>
    406a:	f0 91 4a 07 	lds	r31, 0x074A	; 0x80074a <xPendingReadyList+0x2>
    406e:	1f 96       	adiw	r26, 0x0f	; 15
    4070:	fc 93       	st	X, r31
    4072:	ee 93       	st	-X, r30
    4074:	1e 97       	sbiw	r26, 0x0e	; 14
    4076:	84 81       	ldd	r24, Z+4	; 0x04
    4078:	95 81       	ldd	r25, Z+5	; 0x05
    407a:	51 96       	adiw	r26, 0x11	; 17
    407c:	9c 93       	st	X, r25
    407e:	8e 93       	st	-X, r24
    4080:	50 97       	sbiw	r26, 0x10	; 16
    4082:	c4 81       	ldd	r28, Z+4	; 0x04
    4084:	d5 81       	ldd	r29, Z+5	; 0x05
    4086:	cd 01       	movw	r24, r26
    4088:	0c 96       	adiw	r24, 0x0c	; 12
    408a:	9b 83       	std	Y+3, r25	; 0x03
    408c:	8a 83       	std	Y+2, r24	; 0x02
    408e:	95 83       	std	Z+5, r25	; 0x05
    4090:	84 83       	std	Z+4, r24	; 0x04
    4092:	88 e4       	ldi	r24, 0x48	; 72
    4094:	97 e0       	ldi	r25, 0x07	; 7
    4096:	55 96       	adiw	r26, 0x15	; 21
    4098:	9c 93       	st	X, r25
    409a:	8e 93       	st	-X, r24
    409c:	54 97       	sbiw	r26, 0x14	; 20
    409e:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <xPendingReadyList>
    40a2:	8f 5f       	subi	r24, 0xFF	; 255
    40a4:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <xPendingReadyList>
    40a8:	ca cf       	rjmp	.-108    	; 0x403e <xTaskGenericNotifyFromISR+0x1a2>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    40aa:	80 e0       	ldi	r24, 0x00	; 0
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    40ac:	26 cf       	rjmp	.-436    	; 0x3efa <xTaskGenericNotifyFromISR+0x5e>

000040ae <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
    40ae:	0f 93       	push	r16
    40b0:	1f 93       	push	r17
    40b2:	cf 93       	push	r28
    40b4:	df 93       	push	r29
    40b6:	fc 01       	movw	r30, r24
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    40b8:	a6 2f       	mov	r26, r22
    40ba:	b0 e0       	ldi	r27, 0x00	; 0
    40bc:	ec 01       	movw	r28, r24
    40be:	ca 0f       	add	r28, r26
    40c0:	db 1f       	adc	r29, r27
    40c2:	8d a1       	ldd	r24, Y+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    40c4:	92 e0       	ldi	r25, 0x02	; 2
    40c6:	9d a3       	std	Y+37, r25	; 0x25

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    40c8:	aa 0f       	add	r26, r26
    40ca:	bb 1f       	adc	r27, r27
    40cc:	aa 0f       	add	r26, r26
    40ce:	bb 1f       	adc	r27, r27
    40d0:	ae 0f       	add	r26, r30
    40d2:	bf 1f       	adc	r27, r31
    40d4:	91 96       	adiw	r26, 0x21	; 33
    40d6:	0d 91       	ld	r16, X+
    40d8:	1d 91       	ld	r17, X+
    40da:	2d 91       	ld	r18, X+
    40dc:	3c 91       	ld	r19, X
    40de:	94 97       	sbiw	r26, 0x24	; 36
    40e0:	0f 5f       	subi	r16, 0xFF	; 255
    40e2:	1f 4f       	sbci	r17, 0xFF	; 255
    40e4:	2f 4f       	sbci	r18, 0xFF	; 255
    40e6:	3f 4f       	sbci	r19, 0xFF	; 255
    40e8:	91 96       	adiw	r26, 0x21	; 33
    40ea:	0d 93       	st	X+, r16
    40ec:	1d 93       	st	X+, r17
    40ee:	2d 93       	st	X+, r18
    40f0:	3c 93       	st	X, r19
    40f2:	94 97       	sbiw	r26, 0x24	; 36

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    40f4:	81 30       	cpi	r24, 0x01	; 1
    40f6:	09 f0       	breq	.+2      	; 0x40fa <vTaskGenericNotifyGiveFromISR+0x4c>
    40f8:	5e c0       	rjmp	.+188    	; 0x41b6 <vTaskGenericNotifyGiveFromISR+0x108>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    40fa:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxSchedulerSuspended>
    40fe:	81 11       	cpse	r24, r1
    4100:	5f c0       	rjmp	.+190    	; 0x41c0 <vTaskGenericNotifyGiveFromISR+0x112>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    4102:	a2 85       	ldd	r26, Z+10	; 0x0a
    4104:	b3 85       	ldd	r27, Z+11	; 0x0b
    4106:	84 81       	ldd	r24, Z+4	; 0x04
    4108:	95 81       	ldd	r25, Z+5	; 0x05
    410a:	26 81       	ldd	r18, Z+6	; 0x06
    410c:	37 81       	ldd	r19, Z+7	; 0x07
    410e:	ec 01       	movw	r28, r24
    4110:	3d 83       	std	Y+5, r19	; 0x05
    4112:	2c 83       	std	Y+4, r18	; 0x04
    4114:	c6 81       	ldd	r28, Z+6	; 0x06
    4116:	d7 81       	ldd	r29, Z+7	; 0x07
    4118:	9b 83       	std	Y+3, r25	; 0x03
    411a:	8a 83       	std	Y+2, r24	; 0x02
    411c:	cf 01       	movw	r24, r30
    411e:	02 96       	adiw	r24, 0x02	; 2
    4120:	11 96       	adiw	r26, 0x01	; 1
    4122:	2d 91       	ld	r18, X+
    4124:	3c 91       	ld	r19, X
    4126:	12 97       	sbiw	r26, 0x02	; 2
    4128:	28 17       	cp	r18, r24
    412a:	39 07       	cpc	r19, r25
    412c:	21 f4       	brne	.+8      	; 0x4136 <vTaskGenericNotifyGiveFromISR+0x88>
    412e:	12 96       	adiw	r26, 0x02	; 2
    4130:	dc 93       	st	X, r29
    4132:	ce 93       	st	-X, r28
    4134:	11 97       	sbiw	r26, 0x01	; 1
    4136:	13 86       	std	Z+11, r1	; 0x0b
    4138:	12 86       	std	Z+10, r1	; 0x0a
    413a:	2c 91       	ld	r18, X
    413c:	21 50       	subi	r18, 0x01	; 1
    413e:	2c 93       	st	X, r18
                    prvAddTaskToReadyList( pxTCB );
    4140:	c6 89       	ldd	r28, Z+22	; 0x16
    4142:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <uxTopReadyPriority>
    4146:	2c 17       	cp	r18, r28
    4148:	10 f4       	brcc	.+4      	; 0x414e <vTaskGenericNotifyGiveFromISR+0xa0>
    414a:	c0 93 3a 07 	sts	0x073A, r28	; 0x80073a <uxTopReadyPriority>
    414e:	29 e0       	ldi	r18, 0x09	; 9
    4150:	2c 9f       	mul	r18, r28
    4152:	e0 01       	movw	r28, r0
    4154:	11 24       	eor	r1, r1
    4156:	c9 59       	subi	r28, 0x99	; 153
    4158:	d8 4f       	sbci	r29, 0xF8	; 248
    415a:	09 80       	ldd	r0, Y+1	; 0x01
    415c:	da 81       	ldd	r29, Y+2	; 0x02
    415e:	c0 2d       	mov	r28, r0
    4160:	d5 83       	std	Z+5, r29	; 0x05
    4162:	c4 83       	std	Z+4, r28	; 0x04
    4164:	6c 81       	ldd	r22, Y+4	; 0x04
    4166:	7d 81       	ldd	r23, Y+5	; 0x05
    4168:	77 83       	std	Z+7, r23	; 0x07
    416a:	66 83       	std	Z+6, r22	; 0x06
    416c:	ac 81       	ldd	r26, Y+4	; 0x04
    416e:	bd 81       	ldd	r27, Y+5	; 0x05
    4170:	13 96       	adiw	r26, 0x03	; 3
    4172:	9c 93       	st	X, r25
    4174:	8e 93       	st	-X, r24
    4176:	12 97       	sbiw	r26, 0x02	; 2
    4178:	9d 83       	std	Y+5, r25	; 0x05
    417a:	8c 83       	std	Y+4, r24	; 0x04
    417c:	a6 89       	ldd	r26, Z+22	; 0x16
    417e:	a2 9f       	mul	r26, r18
    4180:	d0 01       	movw	r26, r0
    4182:	11 24       	eor	r1, r1
    4184:	a9 59       	subi	r26, 0x99	; 153
    4186:	b8 4f       	sbci	r27, 0xF8	; 248
    4188:	b3 87       	std	Z+11, r27	; 0x0b
    418a:	a2 87       	std	Z+10, r26	; 0x0a
    418c:	8c 91       	ld	r24, X
    418e:	8f 5f       	subi	r24, 0xFF	; 255
    4190:	8c 93       	st	X, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4192:	a0 91 8b 07 	lds	r26, 0x078B	; 0x80078b <pxCurrentTCB>
    4196:	b0 91 8c 07 	lds	r27, 0x078C	; 0x80078c <pxCurrentTCB+0x1>
    419a:	96 89       	ldd	r25, Z+22	; 0x16
    419c:	56 96       	adiw	r26, 0x16	; 22
    419e:	8c 91       	ld	r24, X
    41a0:	89 17       	cp	r24, r25
    41a2:	48 f4       	brcc	.+18     	; 0x41b6 <vTaskGenericNotifyGiveFromISR+0x108>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    41a4:	41 15       	cp	r20, r1
    41a6:	51 05       	cpc	r21, r1
    41a8:	19 f0       	breq	.+6      	; 0x41b0 <vTaskGenericNotifyGiveFromISR+0x102>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    41aa:	81 e0       	ldi	r24, 0x01	; 1
    41ac:	fa 01       	movw	r30, r20
    41ae:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xYieldPendings>
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
    41b6:	df 91       	pop	r29
    41b8:	cf 91       	pop	r28
    41ba:	1f 91       	pop	r17
    41bc:	0f 91       	pop	r16
    41be:	08 95       	ret
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    41c0:	a0 91 49 07 	lds	r26, 0x0749	; 0x800749 <xPendingReadyList+0x1>
    41c4:	b0 91 4a 07 	lds	r27, 0x074A	; 0x80074a <xPendingReadyList+0x2>
    41c8:	b7 87       	std	Z+15, r27	; 0x0f
    41ca:	a6 87       	std	Z+14, r26	; 0x0e
    41cc:	14 96       	adiw	r26, 0x04	; 4
    41ce:	8d 91       	ld	r24, X+
    41d0:	9c 91       	ld	r25, X
    41d2:	15 97       	sbiw	r26, 0x05	; 5
    41d4:	91 8b       	std	Z+17, r25	; 0x11
    41d6:	80 8b       	std	Z+16, r24	; 0x10
    41d8:	14 96       	adiw	r26, 0x04	; 4
    41da:	cd 91       	ld	r28, X+
    41dc:	dc 91       	ld	r29, X
    41de:	15 97       	sbiw	r26, 0x05	; 5
    41e0:	cf 01       	movw	r24, r30
    41e2:	0c 96       	adiw	r24, 0x0c	; 12
    41e4:	9b 83       	std	Y+3, r25	; 0x03
    41e6:	8a 83       	std	Y+2, r24	; 0x02
    41e8:	15 96       	adiw	r26, 0x05	; 5
    41ea:	9c 93       	st	X, r25
    41ec:	8e 93       	st	-X, r24
    41ee:	14 97       	sbiw	r26, 0x04	; 4
    41f0:	88 e4       	ldi	r24, 0x48	; 72
    41f2:	97 e0       	ldi	r25, 0x07	; 7
    41f4:	95 8b       	std	Z+21, r25	; 0x15
    41f6:	84 8b       	std	Z+20, r24	; 0x14
    41f8:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <xPendingReadyList>
    41fc:	8f 5f       	subi	r24, 0xFF	; 255
    41fe:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <xPendingReadyList>
    4202:	c7 cf       	rjmp	.-114    	; 0x4192 <vTaskGenericNotifyGiveFromISR+0xe4>

00004204 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	21 f4       	brne	.+8      	; 0x4210 <xTaskGenericNotifyStateClear+0xc>
    4208:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    420c:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	f8 94       	cli
    4214:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    4216:	fc 01       	movw	r30, r24
    4218:	e6 0f       	add	r30, r22
    421a:	f1 1d       	adc	r31, r1
    421c:	85 a1       	ldd	r24, Z+37	; 0x25
    421e:	82 30       	cpi	r24, 0x02	; 2
    4220:	29 f4       	brne	.+10     	; 0x422c <xTaskGenericNotifyStateClear+0x28>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    4222:	15 a2       	std	Z+37, r1	; 0x25
                xReturn = pdPASS;
    4224:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        taskEXIT_CRITICAL();
    4226:	0f 90       	pop	r0
    4228:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyStateClear( xReturn );

        return xReturn;
    }
    422a:	08 95       	ret
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
                xReturn = pdPASS;
            }
            else
            {
                xReturn = pdFAIL;
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	fb cf       	rjmp	.-10     	; 0x4226 <xTaskGenericNotifyStateClear+0x22>

00004230 <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
    4230:	cf 92       	push	r12
    4232:	df 92       	push	r13
    4234:	ef 92       	push	r14
    4236:	ff 92       	push	r15

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    4238:	00 97       	sbiw	r24, 0x00	; 0
    423a:	21 f4       	brne	.+8      	; 0x4244 <ulTaskGenericNotifyValueClear+0x14>
    423c:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxCurrentTCB>
    4240:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	0f 92       	push	r0
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
    424a:	74 e0       	ldi	r23, 0x04	; 4
    424c:	67 9f       	mul	r22, r23
    424e:	f0 01       	movw	r30, r0
    4250:	11 24       	eor	r1, r1
    4252:	e8 0f       	add	r30, r24
    4254:	f9 1f       	adc	r31, r25
    4256:	61 a1       	ldd	r22, Z+33	; 0x21
    4258:	72 a1       	ldd	r23, Z+34	; 0x22
    425a:	83 a1       	ldd	r24, Z+35	; 0x23
    425c:	94 a1       	ldd	r25, Z+36	; 0x24
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
    425e:	c1 a0       	ldd	r12, Z+33	; 0x21
    4260:	d2 a0       	ldd	r13, Z+34	; 0x22
    4262:	e3 a0       	ldd	r14, Z+35	; 0x23
    4264:	f4 a0       	ldd	r15, Z+36	; 0x24
    4266:	20 95       	com	r18
    4268:	30 95       	com	r19
    426a:	40 95       	com	r20
    426c:	50 95       	com	r21
    426e:	c2 22       	and	r12, r18
    4270:	d3 22       	and	r13, r19
    4272:	e4 22       	and	r14, r20
    4274:	f5 22       	and	r15, r21
    4276:	c1 a2       	std	Z+33, r12	; 0x21
    4278:	d2 a2       	std	Z+34, r13	; 0x22
    427a:	e3 a2       	std	Z+35, r14	; 0x23
    427c:	f4 a2       	std	Z+36, r15	; 0x24
        }
        taskEXIT_CRITICAL();
    427e:	0f 90       	pop	r0
    4280:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyValueClear( ulReturn );

        return ulReturn;
    }
    4282:	ff 90       	pop	r15
    4284:	ef 90       	pop	r14
    4286:	df 90       	pop	r13
    4288:	cf 90       	pop	r12
    428a:	08 95       	ret

0000428c <vTaskResetState>:
    BaseType_t xCoreID;

    /* Task control block. */
    #if ( configNUMBER_OF_CORES == 1 )
    {
        pxCurrentTCB = NULL;
    428c:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <pxCurrentTCB+0x1>
    4290:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <pxCurrentTCB>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
    4294:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <uxDeletedTasksWaitingCleanUp>
        FreeRTOS_errno = 0;
    }
    #endif /* #if ( configUSE_POSIX_ERRNO == 1 ) */

    /* Other file private variables. */
    uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
    4298:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <uxCurrentNumberOfTasks>
    xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    429c:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <xTickCount+0x1>
    42a0:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <xTickCount>
    uxTopReadyPriority = tskIDLE_PRIORITY;
    42a4:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <uxTopReadyPriority>
    xSchedulerRunning = pdFALSE;
    42a8:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <xSchedulerRunning>
    xPendedTicks = ( TickType_t ) 0U;
    42ac:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <xPendedTicks+0x1>
    42b0:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <xPendedTicks>

    for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
    {
        xYieldPendings[ xCoreID ] = pdFALSE;
    42b4:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <xYieldPendings>
    }

    xNumOfOverflows = ( BaseType_t ) 0;
    42b8:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <xNumOfOverflows>
    uxTaskNumber = ( UBaseType_t ) 0U;
    42bc:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <uxTaskNumber>
    xNextTaskUnblockTime = ( TickType_t ) 0U;
    42c0:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <xNextTaskUnblockTime+0x1>
    42c4:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <xNextTaskUnblockTime>

    uxSchedulerSuspended = ( UBaseType_t ) 0U;
    42c8:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <uxSchedulerSuspended>
            ulTaskSwitchedInTime[ xCoreID ] = 0U;
            ulTotalRunTime[ xCoreID ] = 0U;
        }
    }
    #endif /* #if ( configGENERATE_RUN_TIME_STATS == 1 ) */
}
    42cc:	08 95       	ret

000042ce <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    42d4:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xTimerQueue>
    42d8:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <xTimerQueue+0x1>
    42dc:	89 2b       	or	r24, r25
    42de:	e9 f4       	brne	.+58     	; 0x431a <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    42e0:	80 ea       	ldi	r24, 0xA0	; 160
    42e2:	97 e0       	ldi	r25, 0x07	; 7
    42e4:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    42e8:	87 e9       	ldi	r24, 0x97	; 151
    42ea:	97 e0       	ldi	r25, 0x07	; 7
    42ec:	0e 94 bf 0a 	call	0x157e	; 0x157e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    42f0:	80 ea       	ldi	r24, 0xA0	; 160
    42f2:	97 e0       	ldi	r25, 0x07	; 7
    42f4:	90 93 96 07 	sts	0x0796, r25	; 0x800796 <pxCurrentTimerList+0x1>
    42f8:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    42fc:	87 e9       	ldi	r24, 0x97	; 151
    42fe:	97 e0       	ldi	r25, 0x07	; 7
    4300:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <pxOverflowTimerList+0x1>
    4304:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <pxOverflowTimerList>

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
    4308:	40 e0       	ldi	r20, 0x00	; 0
    430a:	65 e0       	ldi	r22, 0x05	; 5
    430c:	8a e0       	ldi	r24, 0x0A	; 10
    430e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <xQueueGenericCreate>
    4312:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <xTimerQueue+0x1>
    4316:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    431a:	0f 90       	pop	r0
    431c:	0f be       	out	0x3f, r0	; 63
    }
    431e:	08 95       	ret

00004320 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    4320:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4322:	73 83       	std	Z+3, r23	; 0x03
    4324:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4326:	91 87       	std	Z+9, r25	; 0x09
    4328:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    432a:	46 17       	cp	r20, r22
    432c:	57 07       	cpc	r21, r23
    432e:	90 f0       	brcs	.+36     	; 0x4354 <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    4330:	42 1b       	sub	r20, r18
    4332:	53 0b       	sbc	r21, r19
    4334:	84 85       	ldd	r24, Z+12	; 0x0c
    4336:	95 85       	ldd	r25, Z+13	; 0x0d
    4338:	48 17       	cp	r20, r24
    433a:	59 07       	cpc	r21, r25
    433c:	c8 f4       	brcc	.+50     	; 0x4370 <prvInsertTimerInActiveList+0x50>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    433e:	bf 01       	movw	r22, r30
    4340:	6e 5f       	subi	r22, 0xFE	; 254
    4342:	7f 4f       	sbci	r23, 0xFF	; 255
    4344:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <pxOverflowTimerList>
    4348:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <pxOverflowTimerList+0x1>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    434c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    4350:	80 e0       	ldi	r24, 0x00	; 0
    4352:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4354:	42 17       	cp	r20, r18
    4356:	53 07       	cpc	r21, r19
    4358:	18 f4       	brcc	.+6      	; 0x4360 <prvInsertTimerInActiveList+0x40>
    435a:	62 17       	cp	r22, r18
    435c:	73 07       	cpc	r23, r19
    435e:	40 f4       	brcc	.+16     	; 0x4370 <prvInsertTimerInActiveList+0x50>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4360:	bf 01       	movw	r22, r30
    4362:	6e 5f       	subi	r22, 0xFE	; 254
    4364:	7f 4f       	sbci	r23, 0xFF	; 255
    4366:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <pxCurrentTimerList>
    436a:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <pxCurrentTimerList+0x1>
    436e:	ee cf       	rjmp	.-36     	; 0x434c <prvInsertTimerInActiveList+0x2c>
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    4370:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    4372:	08 95       	ret

00004374 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    4374:	ef 92       	push	r14
    4376:	ff 92       	push	r15
    4378:	0f 93       	push	r16
    437a:	1f 93       	push	r17
    437c:	cf 93       	push	r28
    437e:	df 93       	push	r29
    4380:	ec 01       	movw	r28, r24
    4382:	8b 01       	movw	r16, r22
    4384:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    4386:	6c 85       	ldd	r22, Y+12	; 0x0c
    4388:	7d 85       	ldd	r23, Y+13	; 0x0d
    438a:	60 0f       	add	r22, r16
    438c:	71 1f       	adc	r23, r17
    438e:	98 01       	movw	r18, r16
    4390:	a7 01       	movw	r20, r14
    4392:	ce 01       	movw	r24, r28
    4394:	0e 94 90 21 	call	0x4320	; 0x4320 <prvInsertTimerInActiveList>
    4398:	81 11       	cpse	r24, r1
    439a:	07 c0       	rjmp	.+14     	; 0x43aa <prvReloadTimer+0x36>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    439c:	df 91       	pop	r29
    439e:	cf 91       	pop	r28
    43a0:	1f 91       	pop	r17
    43a2:	0f 91       	pop	r16
    43a4:	ff 90       	pop	r15
    43a6:	ef 90       	pop	r14
    43a8:	08 95       	ret
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    43aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    43ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    43ae:	08 0f       	add	r16, r24
    43b0:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    43b2:	e8 89       	ldd	r30, Y+16	; 0x10
    43b4:	f9 89       	ldd	r31, Y+17	; 0x11
    43b6:	ce 01       	movw	r24, r28
    43b8:	09 95       	icall
    43ba:	e5 cf       	rjmp	.-54     	; 0x4386 <prvReloadTimer+0x12>

000043bc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    43bc:	ef 92       	push	r14
    43be:	ff 92       	push	r15
    43c0:	0f 93       	push	r16
    43c2:	1f 93       	push	r17
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	8c 01       	movw	r16, r24
    43ca:	7b 01       	movw	r14, r22
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    43cc:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <pxCurrentTimerList>
    43d0:	f0 91 96 07 	lds	r31, 0x0796	; 0x800796 <pxCurrentTimerList+0x1>
    43d4:	05 80       	ldd	r0, Z+5	; 0x05
    43d6:	f6 81       	ldd	r31, Z+6	; 0x06
    43d8:	e0 2d       	mov	r30, r0
    43da:	c6 81       	ldd	r28, Z+6	; 0x06
    43dc:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    43de:	ce 01       	movw	r24, r28
    43e0:	02 96       	adiw	r24, 0x02	; 2
    43e2:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    43e6:	8a 89       	ldd	r24, Y+18	; 0x12
    43e8:	82 ff       	sbrs	r24, 2
    43ea:	0f c0       	rjmp	.+30     	; 0x440a <prvProcessExpiredTimer+0x4e>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    43ec:	a7 01       	movw	r20, r14
    43ee:	b8 01       	movw	r22, r16
    43f0:	ce 01       	movw	r24, r28
    43f2:	0e 94 ba 21 	call	0x4374	; 0x4374 <prvReloadTimer>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    43f6:	e8 89       	ldd	r30, Y+16	; 0x10
    43f8:	f9 89       	ldd	r31, Y+17	; 0x11
    43fa:	ce 01       	movw	r24, r28
    }
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	ff 90       	pop	r15
    4406:	ef 90       	pop	r14
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4408:	09 94       	ijmp
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    440a:	8e 7f       	andi	r24, 0xFE	; 254
    440c:	8a 8b       	std	Y+18, r24	; 0x12
    440e:	f3 cf       	rjmp	.-26     	; 0x43f6 <prvProcessExpiredTimer+0x3a>

00004410 <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4410:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <pxCurrentTimerList>
    4414:	f0 91 96 07 	lds	r31, 0x0796	; 0x800796 <pxCurrentTimerList+0x1>
    4418:	80 81       	ld	r24, Z
    441a:	81 11       	cpse	r24, r1
    441c:	0d c0       	rjmp	.+26     	; 0x4438 <prvSwitchTimerLists+0x28>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    441e:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <pxOverflowTimerList>
    4422:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <pxOverflowTimerList+0x1>
    4426:	90 93 96 07 	sts	0x0796, r25	; 0x800796 <pxCurrentTimerList+0x1>
    442a:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    442e:	f0 93 94 07 	sts	0x0794, r31	; 0x800794 <pxOverflowTimerList+0x1>
    4432:	e0 93 93 07 	sts	0x0793, r30	; 0x800793 <pxOverflowTimerList>
    }
    4436:	08 95       	ret
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4438:	05 80       	ldd	r0, Z+5	; 0x05
    443a:	f6 81       	ldd	r31, Z+6	; 0x06
    443c:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    443e:	6f ef       	ldi	r22, 0xFF	; 255
    4440:	7f ef       	ldi	r23, 0xFF	; 255
    4442:	80 81       	ld	r24, Z
    4444:	91 81       	ldd	r25, Z+1	; 0x01
    4446:	0e 94 de 21 	call	0x43bc	; 0x43bc <prvProcessExpiredTimer>
    444a:	e2 cf       	rjmp	.-60     	; 0x4410 <prvSwitchTimerLists>

0000444c <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
    4450:	00 d0       	rcall	.+0      	; 0x4452 <prvTimerTask+0x6>
    4452:	00 d0       	rcall	.+0      	; 0x4454 <prvTimerTask+0x8>
    4454:	1f 92       	push	r1
    4456:	cd b7       	in	r28, 0x3d	; 61
    4458:	de b7       	in	r29, 0x3e	; 62
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
    445a:	85 e0       	ldi	r24, 0x05	; 5
    445c:	b8 2e       	mov	r11, r24
    445e:	ce 01       	movw	r24, r28
    4460:	01 96       	adiw	r24, 0x01	; 1
    4462:	7c 01       	movw	r14, r24
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4464:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <pxCurrentTimerList>
    4468:	f0 91 96 07 	lds	r31, 0x0796	; 0x800796 <pxCurrentTimerList+0x1>
    446c:	a0 80       	ld	r10, Z
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    446e:	10 e0       	ldi	r17, 0x00	; 0
    4470:	00 e0       	ldi	r16, 0x00	; 0
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );

        if( *pxListWasEmpty == pdFALSE )
    4472:	aa 20       	and	r10, r10
    4474:	29 f0       	breq	.+10     	; 0x4480 <prvTimerTask+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4476:	05 80       	ldd	r0, Z+5	; 0x05
    4478:	f6 81       	ldd	r31, Z+6	; 0x06
    447a:	e0 2d       	mov	r30, r0
    447c:	00 81       	ld	r16, Z
    447e:	11 81       	ldd	r17, Z+1	; 0x01
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    4480:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
    4484:	0e 94 72 18 	call	0x30e4	; 0x30e4 <xTaskGetTickCount>
    4488:	6c 01       	movw	r12, r24

        if( xTimeNow < xLastTime )
    448a:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <xLastTime.2269>
    448e:	90 91 8e 07 	lds	r25, 0x078E	; 0x80078e <xLastTime.2269+0x1>
    4492:	c8 16       	cp	r12, r24
    4494:	d9 06       	cpc	r13, r25
    4496:	08 f0       	brcs	.+2      	; 0x449a <prvTimerTask+0x4e>
    4498:	4f c0       	rjmp	.+158    	; 0x4538 <prvTimerTask+0xec>
        {
            prvSwitchTimerLists();
    449a:	0e 94 08 22 	call	0x4410	; 0x4410 <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    449e:	d0 92 8e 07 	sts	0x078E, r13	; 0x80078e <xLastTime.2269+0x1>
    44a2:	c0 92 8d 07 	sts	0x078D, r12	; 0x80078d <xLastTime.2269>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    44a6:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
    44aa:	d7 01       	movw	r26, r14
    44ac:	eb 2d       	mov	r30, r11
    44ae:	1d 92       	st	X+, r1
    44b0:	ea 95       	dec	r30
    44b2:	e9 f7       	brne	.-6      	; 0x44ae <prvTimerTask+0x62>
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    44b4:	50 e0       	ldi	r21, 0x00	; 0
    44b6:	40 e0       	ldi	r20, 0x00	; 0
    44b8:	b7 01       	movw	r22, r14
    44ba:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xTimerQueue>
    44be:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <xTimerQueue+0x1>
    44c2:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <xQueueReceive>
    44c6:	88 23       	and	r24, r24
    44c8:	69 f2       	breq	.-102    	; 0x4464 <prvTimerTask+0x18>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    44ca:	89 81       	ldd	r24, Y+1	; 0x01
    44cc:	87 fd       	sbrc	r24, 7
    44ce:	f2 cf       	rjmp	.-28     	; 0x44b4 <prvTimerTask+0x68>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    44d0:	0c 81       	ldd	r16, Y+4	; 0x04
    44d2:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    44d4:	d8 01       	movw	r26, r16
    44d6:	1a 96       	adiw	r26, 0x0a	; 10
    44d8:	8d 91       	ld	r24, X+
    44da:	9c 91       	ld	r25, X
    44dc:	89 2b       	or	r24, r25
    44de:	21 f0       	breq	.+8      	; 0x44e8 <prvTimerTask+0x9c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    44e0:	c8 01       	movw	r24, r16
    44e2:	02 96       	adiw	r24, 0x02	; 2
    44e4:	0e 94 27 0b 	call	0x164e	; 0x164e <uxListRemove>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
    44e8:	0e 94 72 18 	call	0x30e4	; 0x30e4 <xTaskGetTickCount>
    44ec:	6c 01       	movw	r12, r24

        if( xTimeNow < xLastTime )
    44ee:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <xLastTime.2269>
    44f2:	90 91 8e 07 	lds	r25, 0x078E	; 0x80078e <xLastTime.2269+0x1>
    44f6:	c8 16       	cp	r12, r24
    44f8:	d9 06       	cpc	r13, r25
    44fa:	10 f4       	brcc	.+4      	; 0x4500 <prvTimerTask+0xb4>
        {
            prvSwitchTimerLists();
    44fc:	0e 94 08 22 	call	0x4410	; 0x4410 <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    4500:	d0 92 8e 07 	sts	0x078E, r13	; 0x80078e <xLastTime.2269+0x1>
    4504:	c0 92 8d 07 	sts	0x078D, r12	; 0x80078d <xLastTime.2269>
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
    4508:	e9 81       	ldd	r30, Y+1	; 0x01
    450a:	e1 50       	subi	r30, 0x01	; 1
    450c:	e9 30       	cpi	r30, 0x09	; 9
    450e:	90 f6       	brcc	.-92     	; 0x44b4 <prvTimerTask+0x68>
    4510:	0e 2e       	mov	r0, r30
    4512:	00 0c       	add	r0, r0
    4514:	ff 0b       	sbc	r31, r31
    4516:	ed 56       	subi	r30, 0x6D	; 109
    4518:	fd 4d       	sbci	r31, 0xDD	; 221
    451a:	d8 01       	movw	r26, r16
    451c:	52 96       	adiw	r26, 0x12	; 18
    451e:	8c 91       	ld	r24, X
    4520:	52 97       	sbiw	r26, 0x12	; 18
    4522:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__tablejump2__>
    4526:	c4 22       	and	r12, r20
    4528:	c4 22       	and	r12, r20
    452a:	08 23       	and	r16, r24
    452c:	f0 22       	and	r15, r16
    452e:	02 23       	and	r16, r18
    4530:	c4 22       	and	r12, r20
    4532:	c4 22       	and	r12, r20
    4534:	08 23       	and	r16, r24
    4536:	f0 22       	and	r15, r16
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    4538:	d0 92 8e 07 	sts	0x078E, r13	; 0x80078e <xLastTime.2269+0x1>
    453c:	c0 92 8d 07 	sts	0x078D, r12	; 0x80078d <xLastTime.2269>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4540:	aa 20       	and	r10, r10
    4542:	51 f0       	breq	.+20     	; 0x4558 <prvTimerTask+0x10c>
    4544:	c0 16       	cp	r12, r16
    4546:	d1 06       	cpc	r13, r17
    4548:	70 f0       	brcs	.+28     	; 0x4566 <prvTimerTask+0x11a>
                {
                    ( void ) xTaskResumeAll();
    454a:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    454e:	b6 01       	movw	r22, r12
    4550:	c8 01       	movw	r24, r16
    4552:	0e 94 de 21 	call	0x43bc	; 0x43bc <prvProcessExpiredTimer>
    4556:	a9 cf       	rjmp	.-174    	; 0x44aa <prvTimerTask+0x5e>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4558:	e0 91 93 07 	lds	r30, 0x0793	; 0x800793 <pxOverflowTimerList>
    455c:	f0 91 94 07 	lds	r31, 0x0794	; 0x800794 <pxOverflowTimerList+0x1>
    4560:	41 e0       	ldi	r20, 0x01	; 1
    4562:	80 81       	ld	r24, Z
    4564:	81 11       	cpse	r24, r1
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4566:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4568:	b8 01       	movw	r22, r16
    456a:	6c 19       	sub	r22, r12
    456c:	7d 09       	sbc	r23, r13
    456e:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xTimerQueue>
    4572:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <xTimerQueue+0x1>
    4576:	0e 94 b1 11 	call	0x2362	; 0x2362 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    457a:	0e 94 88 19 	call	0x3310	; 0x3310 <xTaskResumeAll>
    457e:	81 11       	cpse	r24, r1
    4580:	94 cf       	rjmp	.-216    	; 0x44aa <prvTimerTask+0x5e>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        taskYIELD_WITHIN_API();
    4582:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vPortYield>
    4586:	91 cf       	rjmp	.-222    	; 0x44aa <prvTimerTask+0x5e>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    4588:	81 60       	ori	r24, 0x01	; 1
    458a:	f8 01       	movw	r30, r16
    458c:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    458e:	2a 81       	ldd	r18, Y+2	; 0x02
    4590:	3b 81       	ldd	r19, Y+3	; 0x03
    4592:	64 85       	ldd	r22, Z+12	; 0x0c
    4594:	75 85       	ldd	r23, Z+13	; 0x0d
    4596:	62 0f       	add	r22, r18
    4598:	73 1f       	adc	r23, r19
    459a:	a6 01       	movw	r20, r12
    459c:	c8 01       	movw	r24, r16
    459e:	0e 94 90 21 	call	0x4320	; 0x4320 <prvInsertTimerInActiveList>
    45a2:	88 23       	and	r24, r24
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <prvTimerTask+0x15c>
    45a6:	86 cf       	rjmp	.-244    	; 0x44b4 <prvTimerTask+0x68>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    45a8:	d8 01       	movw	r26, r16
    45aa:	52 96       	adiw	r26, 0x12	; 18
    45ac:	8c 91       	ld	r24, X
    45ae:	52 97       	sbiw	r26, 0x12	; 18
    45b0:	82 ff       	sbrs	r24, 2
    45b2:	12 c0       	rjmp	.+36     	; 0x45d8 <prvTimerTask+0x18c>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    45b4:	6a 81       	ldd	r22, Y+2	; 0x02
    45b6:	7b 81       	ldd	r23, Y+3	; 0x03
    45b8:	1c 96       	adiw	r26, 0x0c	; 12
    45ba:	8d 91       	ld	r24, X+
    45bc:	9c 91       	ld	r25, X
    45be:	68 0f       	add	r22, r24
    45c0:	79 1f       	adc	r23, r25
    45c2:	a6 01       	movw	r20, r12
    45c4:	c8 01       	movw	r24, r16
    45c6:	0e 94 ba 21 	call	0x4374	; 0x4374 <prvReloadTimer>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    45ca:	d8 01       	movw	r26, r16
    45cc:	50 96       	adiw	r26, 0x10	; 16
    45ce:	ed 91       	ld	r30, X+
    45d0:	fc 91       	ld	r31, X
    45d2:	c8 01       	movw	r24, r16
    45d4:	09 95       	icall
    45d6:	6e cf       	rjmp	.-292    	; 0x44b4 <prvTimerTask+0x68>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    45d8:	8e 7f       	andi	r24, 0xFE	; 254
    45da:	f8 01       	movw	r30, r16
    45dc:	82 8b       	std	Z+18, r24	; 0x12
    45de:	f5 cf       	rjmp	.-22     	; 0x45ca <prvTimerTask+0x17e>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    45e0:	81 60       	ori	r24, 0x01	; 1
    45e2:	52 96       	adiw	r26, 0x12	; 18
    45e4:	8c 93       	st	X, r24
    45e6:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    45e8:	6a 81       	ldd	r22, Y+2	; 0x02
    45ea:	7b 81       	ldd	r23, Y+3	; 0x03
    45ec:	1d 96       	adiw	r26, 0x0d	; 13
    45ee:	7c 93       	st	X, r23
    45f0:	6e 93       	st	-X, r22
    45f2:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    45f4:	6c 0d       	add	r22, r12
    45f6:	7d 1d       	adc	r23, r13
    45f8:	96 01       	movw	r18, r12
    45fa:	a6 01       	movw	r20, r12
    45fc:	c8 01       	movw	r24, r16
    45fe:	0e 94 90 21 	call	0x4320	; 0x4320 <prvInsertTimerInActiveList>
    4602:	58 cf       	rjmp	.-336    	; 0x44b4 <prvTimerTask+0x68>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    4604:	81 fd       	sbrc	r24, 1
    4606:	04 c0       	rjmp	.+8      	; 0x4610 <prvTimerTask+0x1c4>
                            {
                                vPortFree( pxTimer );
    4608:	c8 01       	movw	r24, r16
    460a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <vPortFree>
    460e:	52 cf       	rjmp	.-348    	; 0x44b4 <prvTimerTask+0x68>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    4610:	8e 7f       	andi	r24, 0xFE	; 254
    4612:	f8 01       	movw	r30, r16
    4614:	82 8b       	std	Z+18, r24	; 0x12
    4616:	4e cf       	rjmp	.-356    	; 0x44b4 <prvTimerTask+0x68>

00004618 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    4618:	ef 92       	push	r14
    461a:	ff 92       	push	r15
    461c:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    461e:	0e 94 67 21 	call	0x42ce	; 0x42ce <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    4622:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xTimerQueue>
    4626:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <xTimerQueue+0x1>
    462a:	89 2b       	or	r24, r25
    462c:	91 f0       	breq	.+36     	; 0x4652 <xTimerCreateTimerTask+0x3a>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    462e:	8f e8       	ldi	r24, 0x8F	; 143
    4630:	e8 2e       	mov	r14, r24
    4632:	87 e0       	ldi	r24, 0x07	; 7
    4634:	f8 2e       	mov	r15, r24
    4636:	02 e0       	ldi	r16, 0x02	; 2
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	40 e8       	ldi	r20, 0x80	; 128
    463e:	6f ef       	ldi	r22, 0xFF	; 255
    4640:	70 e0       	ldi	r23, 0x00	; 0
    4642:	86 e2       	ldi	r24, 0x26	; 38
    4644:	92 e2       	ldi	r25, 0x22	; 34
    4646:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <xTaskCreate>
        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
    }
    464a:	0f 91       	pop	r16
    464c:	ff 90       	pop	r15
    464e:	ef 90       	pop	r14
    4650:	08 95       	ret
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    4652:	80 e0       	ldi	r24, 0x00	; 0

        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
    4654:	fa cf       	rjmp	.-12     	; 0x464a <xTimerCreateTimerTask+0x32>

00004656 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    4656:	8f 92       	push	r8
    4658:	9f 92       	push	r9
    465a:	af 92       	push	r10
    465c:	bf 92       	push	r11
    465e:	cf 92       	push	r12
    4660:	df 92       	push	r13
    4662:	ff 92       	push	r15
    4664:	0f 93       	push	r16
    4666:	1f 93       	push	r17
    4668:	cf 93       	push	r28
    466a:	df 93       	push	r29
    466c:	4c 01       	movw	r8, r24
    466e:	5b 01       	movw	r10, r22
    4670:	f4 2e       	mov	r15, r20
    4672:	69 01       	movw	r12, r18
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    4674:	83 e1       	ldi	r24, 0x13	; 19
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <pvPortMalloc>
    467c:	ec 01       	movw	r28, r24

            if( pxNewTimer != NULL )
    467e:	89 2b       	or	r24, r25
    4680:	a1 f0       	breq	.+40     	; 0x46aa <xTimerCreate+0x54>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    4682:	1a 8a       	std	Y+18, r1	; 0x12
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    4684:	0e 94 67 21 	call	0x42ce	; 0x42ce <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    4688:	99 82       	std	Y+1, r9	; 0x01
    468a:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    468c:	bd 86       	std	Y+13, r11	; 0x0d
    468e:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    4690:	df 86       	std	Y+15, r13	; 0x0f
    4692:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    4694:	19 8b       	std	Y+17, r17	; 0x11
    4696:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    4698:	ce 01       	movw	r24, r28
    469a:	02 96       	adiw	r24, 0x02	; 2
    469c:	0e 94 cd 0a 	call	0x159a	; 0x159a <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    46a0:	ff 20       	and	r15, r15
    46a2:	19 f0       	breq	.+6      	; 0x46aa <xTimerCreate+0x54>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
    46a4:	8a 89       	ldd	r24, Y+18	; 0x12
    46a6:	84 60       	ori	r24, 0x04	; 4
    46a8:	8a 8b       	std	Y+18, r24	; 0x12
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
        }
    46aa:	ce 01       	movw	r24, r28
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	1f 91       	pop	r17
    46b2:	0f 91       	pop	r16
    46b4:	ff 90       	pop	r15
    46b6:	df 90       	pop	r13
    46b8:	cf 90       	pop	r12
    46ba:	bf 90       	pop	r11
    46bc:	af 90       	pop	r10
    46be:	9f 90       	pop	r9
    46c0:	8f 90       	pop	r8
    46c2:	08 95       	ret

000046c4 <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
    46c4:	0f 93       	push	r16
    46c6:	1f 93       	push	r17
    46c8:	cf 93       	push	r28
    46ca:	df 93       	push	r29
    46cc:	00 d0       	rcall	.+0      	; 0x46ce <xTimerGenericCommandFromTask+0xa>
    46ce:	00 d0       	rcall	.+0      	; 0x46d0 <xTimerGenericCommandFromTask+0xc>
    46d0:	1f 92       	push	r1
    46d2:	cd b7       	in	r28, 0x3d	; 61
    46d4:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    46d6:	20 91 91 07 	lds	r18, 0x0791	; 0x800791 <xTimerQueue>
    46da:	30 91 92 07 	lds	r19, 0x0792	; 0x800792 <xTimerQueue+0x1>
    46de:	23 2b       	or	r18, r19
    46e0:	59 f4       	brne	.+22     	; 0x46f8 <xTimerGenericCommandFromTask+0x34>
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    46e2:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
    }
    46e4:	0f 90       	pop	r0
    46e6:	0f 90       	pop	r0
    46e8:	0f 90       	pop	r0
    46ea:	0f 90       	pop	r0
    46ec:	0f 90       	pop	r0
    46ee:	df 91       	pop	r29
    46f0:	cf 91       	pop	r28
    46f2:	1f 91       	pop	r17
    46f4:	0f 91       	pop	r16
    46f6:	08 95       	ret
        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    46f8:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    46fa:	5b 83       	std	Y+3, r21	; 0x03
    46fc:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    46fe:	9d 83       	std	Y+5, r25	; 0x05
    4700:	8c 83       	std	Y+4, r24	; 0x04

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4702:	66 30       	cpi	r22, 0x06	; 6
    4704:	74 f7       	brge	.-36     	; 0x46e2 <xTimerGenericCommandFromTask+0x1e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4706:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <xTaskGetSchedulerState>
    470a:	e0 91 91 07 	lds	r30, 0x0791	; 0x800791 <xTimerQueue>
    470e:	f0 91 92 07 	lds	r31, 0x0792	; 0x800792 <xTimerQueue+0x1>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	a8 01       	movw	r20, r16

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4716:	82 30       	cpi	r24, 0x02	; 2
    4718:	11 f0       	breq	.+4      	; 0x471e <xTimerGenericCommandFromTask+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    471a:	50 e0       	ldi	r21, 0x00	; 0
    471c:	40 e0       	ldi	r20, 0x00	; 0
    471e:	be 01       	movw	r22, r28
    4720:	6f 5f       	subi	r22, 0xFF	; 255
    4722:	7f 4f       	sbci	r23, 0xFF	; 255
    4724:	cf 01       	movw	r24, r30
    4726:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <xQueueGenericSend>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
    472a:	dc cf       	rjmp	.-72     	; 0x46e4 <xTimerGenericCommandFromTask+0x20>

0000472c <xTimerGenericCommandFromISR>:
    BaseType_t xTimerGenericCommandFromISR( TimerHandle_t xTimer,
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	00 d0       	rcall	.+0      	; 0x4732 <xTimerGenericCommandFromISR+0x6>
    4732:	00 d0       	rcall	.+0      	; 0x4734 <xTimerGenericCommandFromISR+0x8>
    4734:	1f 92       	push	r1
    4736:	cd b7       	in	r28, 0x3d	; 61
    4738:	de b7       	in	r29, 0x3e	; 62
    473a:	fc 01       	movw	r30, r24

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    473c:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <xTimerQueue>
    4740:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <xTimerQueue+0x1>
    4744:	00 97       	sbiw	r24, 0x00	; 0
    4746:	49 f4       	brne	.+18     	; 0x475a <xTimerGenericCommandFromISR+0x2e>
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    4748:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
    }
    474a:	0f 90       	pop	r0
    474c:	0f 90       	pop	r0
    474e:	0f 90       	pop	r0
    4750:	0f 90       	pop	r0
    4752:	0f 90       	pop	r0
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	08 95       	ret
        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    475a:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    475c:	5b 83       	std	Y+3, r21	; 0x03
    475e:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    4760:	fd 83       	std	Y+5, r31	; 0x05
    4762:	ec 83       	std	Y+4, r30	; 0x04

            configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
    4764:	66 30       	cpi	r22, 0x06	; 6
    4766:	84 f3       	brlt	.-32     	; 0x4748 <xTimerGenericCommandFromISR+0x1c>
    4768:	a9 01       	movw	r20, r18
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	be 01       	movw	r22, r28
    476e:	6f 5f       	subi	r22, 0xFF	; 255
    4770:	7f 4f       	sbci	r23, 0xFF	; 255
    4772:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xQueueGenericSendFromISR>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
    4776:	e9 cf       	rjmp	.-46     	; 0x474a <xTimerGenericCommandFromISR+0x1e>

00004778 <xTimerGetTimerDaemonTaskHandle>:
        configASSERT( ( xTimerTaskHandle != NULL ) );

        traceRETURN_xTimerGetTimerDaemonTaskHandle( xTimerTaskHandle );

        return xTimerTaskHandle;
    }
    4778:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <xTimerTaskHandle>
    477c:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <xTimerTaskHandle+0x1>
    4780:	08 95       	ret

00004782 <xTimerGetPeriod>:
        configASSERT( xTimer );

        traceRETURN_xTimerGetPeriod( pxTimer->xTimerPeriodInTicks );

        return pxTimer->xTimerPeriodInTicks;
    }
    4782:	fc 01       	movw	r30, r24
    4784:	84 85       	ldd	r24, Z+12	; 0x0c
    4786:	95 85       	ldd	r25, Z+13	; 0x0d
    4788:	08 95       	ret

0000478a <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

    void vTimerSetReloadMode( TimerHandle_t xTimer,
                              const BaseType_t xAutoReload )
    {
    478a:	fc 01       	movw	r30, r24
        Timer_t * pxTimer = xTimer;

        traceENTER_vTimerSetReloadMode( xTimer, xAutoReload );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	0f 92       	push	r0
    4792:	92 89       	ldd	r25, Z+18	; 0x12
        {
            if( xAutoReload != pdFALSE )
    4794:	66 23       	and	r22, r22
    4796:	29 f0       	breq	.+10     	; 0x47a2 <vTimerSetReloadMode+0x18>
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
    4798:	94 60       	ori	r25, 0x04	; 4
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
    479a:	92 8b       	std	Z+18, r25	; 0x12
            }
        }
        taskEXIT_CRITICAL();
    479c:	0f 90       	pop	r0
    479e:	0f be       	out	0x3f, r0	; 63

        traceRETURN_vTimerSetReloadMode();
    }
    47a0:	08 95       	ret
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
    47a2:	9b 7f       	andi	r25, 0xFB	; 251
    47a4:	fa cf       	rjmp	.-12     	; 0x479a <vTimerSetReloadMode+0x10>

000047a6 <xTimerGetReloadMode>:
        BaseType_t xReturn;

        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
    47a6:	0f b6       	in	r0, 0x3f	; 63
    47a8:	f8 94       	cli
    47aa:	0f 92       	push	r0
            {
                /* Is an auto-reload timer. */
                xReturn = pdTRUE;
            }
        }
        taskEXIT_CRITICAL();
    47ac:	0f 90       	pop	r0
    47ae:	0f be       	out	0x3f, r0	; 63
        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0U )
    47b0:	fc 01       	movw	r30, r24
    47b2:	82 89       	ldd	r24, Z+18	; 0x12
        taskEXIT_CRITICAL();

        traceRETURN_xTimerGetReloadMode( xReturn );

        return xReturn;
    }
    47b4:	82 fb       	bst	r24, 2
    47b6:	88 27       	eor	r24, r24
    47b8:	80 f9       	bld	r24, 0
    47ba:	08 95       	ret

000047bc <uxTimerGetReloadMode>:
    {
        UBaseType_t uxReturn;

        traceENTER_uxTimerGetReloadMode( xTimer );

        uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
    47bc:	0c 94 d3 23 	jmp	0x47a6	; 0x47a6 <xTimerGetReloadMode>

000047c0 <xTimerGetExpiryTime>:
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );

        traceRETURN_xTimerGetExpiryTime( xReturn );

        return xReturn;
    }
    47c0:	fc 01       	movw	r30, r24
    47c2:	82 81       	ldd	r24, Z+2	; 0x02
    47c4:	93 81       	ldd	r25, Z+3	; 0x03
    47c6:	08 95       	ret

000047c8 <pcTimerGetName>:
        configASSERT( xTimer );

        traceRETURN_pcTimerGetName( pxTimer->pcTimerName );

        return pxTimer->pcTimerName;
    }
    47c8:	fc 01       	movw	r30, r24
    47ca:	80 81       	ld	r24, Z
    47cc:	91 81       	ldd	r25, Z+1	; 0x01
    47ce:	08 95       	ret

000047d0 <xTimerIsTimerActive>:
        traceENTER_xTimerIsTimerActive( xTimer );

        configASSERT( xTimer );

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
    47d0:	0f b6       	in	r0, 0x3f	; 63
    47d2:	f8 94       	cli
    47d4:	0f 92       	push	r0
            else
            {
                xReturn = pdTRUE;
            }
        }
        taskEXIT_CRITICAL();
    47d6:	0f 90       	pop	r0
    47d8:	0f be       	out	0x3f, r0	; 63
        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0U )
            {
                xReturn = pdFALSE;
    47da:	fc 01       	movw	r30, r24
    47dc:	82 89       	ldd	r24, Z+18	; 0x12
        taskEXIT_CRITICAL();

        traceRETURN_xTimerIsTimerActive( xReturn );

        return xReturn;
    }
    47de:	81 70       	andi	r24, 0x01	; 1
    47e0:	08 95       	ret

000047e2 <pvTimerGetTimerID>:

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    47e2:	0f b6       	in	r0, 0x3f	; 63
    47e4:	f8 94       	cli
    47e6:	0f 92       	push	r0
        {
            pvReturn = pxTimer->pvTimerID;
        }
        taskEXIT_CRITICAL();
    47e8:	0f 90       	pop	r0
    47ea:	0f be       	out	0x3f, r0	; 63

        traceRETURN_pvTimerGetTimerID( pvReturn );

        return pvReturn;
    }
    47ec:	fc 01       	movw	r30, r24
    47ee:	86 85       	ldd	r24, Z+14	; 0x0e
    47f0:	97 85       	ldd	r25, Z+15	; 0x0f
    47f2:	08 95       	ret

000047f4 <vTimerSetTimerID>:

        traceENTER_vTimerSetTimerID( xTimer, pvNewID );

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	0f 92       	push	r0
        {
            pxTimer->pvTimerID = pvNewID;
    47fa:	fc 01       	movw	r30, r24
    47fc:	77 87       	std	Z+15, r23	; 0x0f
    47fe:	66 87       	std	Z+14, r22	; 0x0e
        }
        taskEXIT_CRITICAL();
    4800:	0f 90       	pop	r0
    4802:	0f be       	out	0x3f, r0	; 63

        traceRETURN_vTimerSetTimerID();
    }
    4804:	08 95       	ret

00004806 <vTimerResetState>:
 * This function must be called by the application before restarting the
 * scheduler.
 */
    void vTimerResetState( void )
    {
        xTimerQueue = NULL;
    4806:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <xTimerQueue+0x1>
    480a:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <xTimerQueue>
        xTimerTaskHandle = NULL;
    480e:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <xTimerTaskHandle+0x1>
    4812:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <xTimerTaskHandle>
    }
    4816:	08 95       	ret

00004818 <main>:


int main(void) {

	// Initialize buttons for interrupts
		Button_Init();
    4818:	0e 94 80 04 	call	0x900	; 0x900 <Button_Init>
//		LCD_Init();

		ADC_INIT(128, AREF);
    481c:	60 e0       	ldi	r22, 0x00	; 0
    481e:	80 e8       	ldi	r24, 0x80	; 128
    4820:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ADC_INIT>
//		poller_SetPollTime(20);
//		Poller__StartPolling();

		

		Os_Init();
    4824:	0e 94 2f 02 	call	0x45e	; 0x45e <Os_Init>
    4828:	ff cf       	rjmp	.-2      	; 0x4828 <main+0x10>

0000482a <__subsf3>:
    482a:	50 58       	subi	r21, 0x80	; 128

0000482c <__addsf3>:
    482c:	bb 27       	eor	r27, r27
    482e:	aa 27       	eor	r26, r26
    4830:	0e 94 2d 24 	call	0x485a	; 0x485a <__addsf3x>
    4834:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__fp_round>
    4838:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__fp_pscA>
    483c:	38 f0       	brcs	.+14     	; 0x484c <__addsf3+0x20>
    483e:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__fp_pscB>
    4842:	20 f0       	brcs	.+8      	; 0x484c <__addsf3+0x20>
    4844:	39 f4       	brne	.+14     	; 0x4854 <__addsf3+0x28>
    4846:	9f 3f       	cpi	r25, 0xFF	; 255
    4848:	19 f4       	brne	.+6      	; 0x4850 <__addsf3+0x24>
    484a:	26 f4       	brtc	.+8      	; 0x4854 <__addsf3+0x28>
    484c:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__fp_nan>
    4850:	0e f4       	brtc	.+2      	; 0x4854 <__addsf3+0x28>
    4852:	e0 95       	com	r30
    4854:	e7 fb       	bst	r30, 7
    4856:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__fp_inf>

0000485a <__addsf3x>:
    485a:	e9 2f       	mov	r30, r25
    485c:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__fp_split3>
    4860:	58 f3       	brcs	.-42     	; 0x4838 <__addsf3+0xc>
    4862:	ba 17       	cp	r27, r26
    4864:	62 07       	cpc	r22, r18
    4866:	73 07       	cpc	r23, r19
    4868:	84 07       	cpc	r24, r20
    486a:	95 07       	cpc	r25, r21
    486c:	20 f0       	brcs	.+8      	; 0x4876 <__addsf3x+0x1c>
    486e:	79 f4       	brne	.+30     	; 0x488e <__addsf3x+0x34>
    4870:	a6 f5       	brtc	.+104    	; 0x48da <__addsf3x+0x80>
    4872:	0c 94 a4 25 	jmp	0x4b48	; 0x4b48 <__fp_zero>
    4876:	0e f4       	brtc	.+2      	; 0x487a <__addsf3x+0x20>
    4878:	e0 95       	com	r30
    487a:	0b 2e       	mov	r0, r27
    487c:	ba 2f       	mov	r27, r26
    487e:	a0 2d       	mov	r26, r0
    4880:	0b 01       	movw	r0, r22
    4882:	b9 01       	movw	r22, r18
    4884:	90 01       	movw	r18, r0
    4886:	0c 01       	movw	r0, r24
    4888:	ca 01       	movw	r24, r20
    488a:	a0 01       	movw	r20, r0
    488c:	11 24       	eor	r1, r1
    488e:	ff 27       	eor	r31, r31
    4890:	59 1b       	sub	r21, r25
    4892:	99 f0       	breq	.+38     	; 0x48ba <__addsf3x+0x60>
    4894:	59 3f       	cpi	r21, 0xF9	; 249
    4896:	50 f4       	brcc	.+20     	; 0x48ac <__addsf3x+0x52>
    4898:	50 3e       	cpi	r21, 0xE0	; 224
    489a:	68 f1       	brcs	.+90     	; 0x48f6 <__addsf3x+0x9c>
    489c:	1a 16       	cp	r1, r26
    489e:	f0 40       	sbci	r31, 0x00	; 0
    48a0:	a2 2f       	mov	r26, r18
    48a2:	23 2f       	mov	r18, r19
    48a4:	34 2f       	mov	r19, r20
    48a6:	44 27       	eor	r20, r20
    48a8:	58 5f       	subi	r21, 0xF8	; 248
    48aa:	f3 cf       	rjmp	.-26     	; 0x4892 <__addsf3x+0x38>
    48ac:	46 95       	lsr	r20
    48ae:	37 95       	ror	r19
    48b0:	27 95       	ror	r18
    48b2:	a7 95       	ror	r26
    48b4:	f0 40       	sbci	r31, 0x00	; 0
    48b6:	53 95       	inc	r21
    48b8:	c9 f7       	brne	.-14     	; 0x48ac <__addsf3x+0x52>
    48ba:	7e f4       	brtc	.+30     	; 0x48da <__addsf3x+0x80>
    48bc:	1f 16       	cp	r1, r31
    48be:	ba 0b       	sbc	r27, r26
    48c0:	62 0b       	sbc	r22, r18
    48c2:	73 0b       	sbc	r23, r19
    48c4:	84 0b       	sbc	r24, r20
    48c6:	ba f0       	brmi	.+46     	; 0x48f6 <__addsf3x+0x9c>
    48c8:	91 50       	subi	r25, 0x01	; 1
    48ca:	a1 f0       	breq	.+40     	; 0x48f4 <__addsf3x+0x9a>
    48cc:	ff 0f       	add	r31, r31
    48ce:	bb 1f       	adc	r27, r27
    48d0:	66 1f       	adc	r22, r22
    48d2:	77 1f       	adc	r23, r23
    48d4:	88 1f       	adc	r24, r24
    48d6:	c2 f7       	brpl	.-16     	; 0x48c8 <__addsf3x+0x6e>
    48d8:	0e c0       	rjmp	.+28     	; 0x48f6 <__addsf3x+0x9c>
    48da:	ba 0f       	add	r27, r26
    48dc:	62 1f       	adc	r22, r18
    48de:	73 1f       	adc	r23, r19
    48e0:	84 1f       	adc	r24, r20
    48e2:	48 f4       	brcc	.+18     	; 0x48f6 <__addsf3x+0x9c>
    48e4:	87 95       	ror	r24
    48e6:	77 95       	ror	r23
    48e8:	67 95       	ror	r22
    48ea:	b7 95       	ror	r27
    48ec:	f7 95       	ror	r31
    48ee:	9e 3f       	cpi	r25, 0xFE	; 254
    48f0:	08 f0       	brcs	.+2      	; 0x48f4 <__addsf3x+0x9a>
    48f2:	b0 cf       	rjmp	.-160    	; 0x4854 <__addsf3+0x28>
    48f4:	93 95       	inc	r25
    48f6:	88 0f       	add	r24, r24
    48f8:	08 f0       	brcs	.+2      	; 0x48fc <__addsf3x+0xa2>
    48fa:	99 27       	eor	r25, r25
    48fc:	ee 0f       	add	r30, r30
    48fe:	97 95       	ror	r25
    4900:	87 95       	ror	r24
    4902:	08 95       	ret

00004904 <__cmpsf2>:
    4904:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <__fp_cmp>
    4908:	08 f4       	brcc	.+2      	; 0x490c <__cmpsf2+0x8>
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	08 95       	ret

0000490e <__divsf3>:
    490e:	0e 94 9b 24 	call	0x4936	; 0x4936 <__divsf3x>
    4912:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__fp_round>
    4916:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__fp_pscB>
    491a:	58 f0       	brcs	.+22     	; 0x4932 <__divsf3+0x24>
    491c:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__fp_pscA>
    4920:	40 f0       	brcs	.+16     	; 0x4932 <__divsf3+0x24>
    4922:	29 f4       	brne	.+10     	; 0x492e <__divsf3+0x20>
    4924:	5f 3f       	cpi	r21, 0xFF	; 255
    4926:	29 f0       	breq	.+10     	; 0x4932 <__divsf3+0x24>
    4928:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__fp_inf>
    492c:	51 11       	cpse	r21, r1
    492e:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__fp_szero>
    4932:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__fp_nan>

00004936 <__divsf3x>:
    4936:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__fp_split3>
    493a:	68 f3       	brcs	.-38     	; 0x4916 <__divsf3+0x8>

0000493c <__divsf3_pse>:
    493c:	99 23       	and	r25, r25
    493e:	b1 f3       	breq	.-20     	; 0x492c <__divsf3+0x1e>
    4940:	55 23       	and	r21, r21
    4942:	91 f3       	breq	.-28     	; 0x4928 <__divsf3+0x1a>
    4944:	95 1b       	sub	r25, r21
    4946:	55 0b       	sbc	r21, r21
    4948:	bb 27       	eor	r27, r27
    494a:	aa 27       	eor	r26, r26
    494c:	62 17       	cp	r22, r18
    494e:	73 07       	cpc	r23, r19
    4950:	84 07       	cpc	r24, r20
    4952:	38 f0       	brcs	.+14     	; 0x4962 <__divsf3_pse+0x26>
    4954:	9f 5f       	subi	r25, 0xFF	; 255
    4956:	5f 4f       	sbci	r21, 0xFF	; 255
    4958:	22 0f       	add	r18, r18
    495a:	33 1f       	adc	r19, r19
    495c:	44 1f       	adc	r20, r20
    495e:	aa 1f       	adc	r26, r26
    4960:	a9 f3       	breq	.-22     	; 0x494c <__divsf3_pse+0x10>
    4962:	35 d0       	rcall	.+106    	; 0x49ce <__divsf3_pse+0x92>
    4964:	0e 2e       	mov	r0, r30
    4966:	3a f0       	brmi	.+14     	; 0x4976 <__divsf3_pse+0x3a>
    4968:	e0 e8       	ldi	r30, 0x80	; 128
    496a:	32 d0       	rcall	.+100    	; 0x49d0 <__divsf3_pse+0x94>
    496c:	91 50       	subi	r25, 0x01	; 1
    496e:	50 40       	sbci	r21, 0x00	; 0
    4970:	e6 95       	lsr	r30
    4972:	00 1c       	adc	r0, r0
    4974:	ca f7       	brpl	.-14     	; 0x4968 <__divsf3_pse+0x2c>
    4976:	2b d0       	rcall	.+86     	; 0x49ce <__divsf3_pse+0x92>
    4978:	fe 2f       	mov	r31, r30
    497a:	29 d0       	rcall	.+82     	; 0x49ce <__divsf3_pse+0x92>
    497c:	66 0f       	add	r22, r22
    497e:	77 1f       	adc	r23, r23
    4980:	88 1f       	adc	r24, r24
    4982:	bb 1f       	adc	r27, r27
    4984:	26 17       	cp	r18, r22
    4986:	37 07       	cpc	r19, r23
    4988:	48 07       	cpc	r20, r24
    498a:	ab 07       	cpc	r26, r27
    498c:	b0 e8       	ldi	r27, 0x80	; 128
    498e:	09 f0       	breq	.+2      	; 0x4992 <__divsf3_pse+0x56>
    4990:	bb 0b       	sbc	r27, r27
    4992:	80 2d       	mov	r24, r0
    4994:	bf 01       	movw	r22, r30
    4996:	ff 27       	eor	r31, r31
    4998:	93 58       	subi	r25, 0x83	; 131
    499a:	5f 4f       	sbci	r21, 0xFF	; 255
    499c:	3a f0       	brmi	.+14     	; 0x49ac <__divsf3_pse+0x70>
    499e:	9e 3f       	cpi	r25, 0xFE	; 254
    49a0:	51 05       	cpc	r21, r1
    49a2:	78 f0       	brcs	.+30     	; 0x49c2 <__divsf3_pse+0x86>
    49a4:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__fp_inf>
    49a8:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__fp_szero>
    49ac:	5f 3f       	cpi	r21, 0xFF	; 255
    49ae:	e4 f3       	brlt	.-8      	; 0x49a8 <__divsf3_pse+0x6c>
    49b0:	98 3e       	cpi	r25, 0xE8	; 232
    49b2:	d4 f3       	brlt	.-12     	; 0x49a8 <__divsf3_pse+0x6c>
    49b4:	86 95       	lsr	r24
    49b6:	77 95       	ror	r23
    49b8:	67 95       	ror	r22
    49ba:	b7 95       	ror	r27
    49bc:	f7 95       	ror	r31
    49be:	9f 5f       	subi	r25, 0xFF	; 255
    49c0:	c9 f7       	brne	.-14     	; 0x49b4 <__divsf3_pse+0x78>
    49c2:	88 0f       	add	r24, r24
    49c4:	91 1d       	adc	r25, r1
    49c6:	96 95       	lsr	r25
    49c8:	87 95       	ror	r24
    49ca:	97 f9       	bld	r25, 7
    49cc:	08 95       	ret
    49ce:	e1 e0       	ldi	r30, 0x01	; 1
    49d0:	66 0f       	add	r22, r22
    49d2:	77 1f       	adc	r23, r23
    49d4:	88 1f       	adc	r24, r24
    49d6:	bb 1f       	adc	r27, r27
    49d8:	62 17       	cp	r22, r18
    49da:	73 07       	cpc	r23, r19
    49dc:	84 07       	cpc	r24, r20
    49de:	ba 07       	cpc	r27, r26
    49e0:	20 f0       	brcs	.+8      	; 0x49ea <__divsf3_pse+0xae>
    49e2:	62 1b       	sub	r22, r18
    49e4:	73 0b       	sbc	r23, r19
    49e6:	84 0b       	sbc	r24, r20
    49e8:	ba 0b       	sbc	r27, r26
    49ea:	ee 1f       	adc	r30, r30
    49ec:	88 f7       	brcc	.-30     	; 0x49d0 <__divsf3_pse+0x94>
    49ee:	e0 95       	com	r30
    49f0:	08 95       	ret

000049f2 <__floatunsisf>:
    49f2:	e8 94       	clt
    49f4:	09 c0       	rjmp	.+18     	; 0x4a08 <__floatsisf+0x12>

000049f6 <__floatsisf>:
    49f6:	97 fb       	bst	r25, 7
    49f8:	3e f4       	brtc	.+14     	; 0x4a08 <__floatsisf+0x12>
    49fa:	90 95       	com	r25
    49fc:	80 95       	com	r24
    49fe:	70 95       	com	r23
    4a00:	61 95       	neg	r22
    4a02:	7f 4f       	sbci	r23, 0xFF	; 255
    4a04:	8f 4f       	sbci	r24, 0xFF	; 255
    4a06:	9f 4f       	sbci	r25, 0xFF	; 255
    4a08:	99 23       	and	r25, r25
    4a0a:	a9 f0       	breq	.+42     	; 0x4a36 <__floatsisf+0x40>
    4a0c:	f9 2f       	mov	r31, r25
    4a0e:	96 e9       	ldi	r25, 0x96	; 150
    4a10:	bb 27       	eor	r27, r27
    4a12:	93 95       	inc	r25
    4a14:	f6 95       	lsr	r31
    4a16:	87 95       	ror	r24
    4a18:	77 95       	ror	r23
    4a1a:	67 95       	ror	r22
    4a1c:	b7 95       	ror	r27
    4a1e:	f1 11       	cpse	r31, r1
    4a20:	f8 cf       	rjmp	.-16     	; 0x4a12 <__floatsisf+0x1c>
    4a22:	fa f4       	brpl	.+62     	; 0x4a62 <__floatsisf+0x6c>
    4a24:	bb 0f       	add	r27, r27
    4a26:	11 f4       	brne	.+4      	; 0x4a2c <__floatsisf+0x36>
    4a28:	60 ff       	sbrs	r22, 0
    4a2a:	1b c0       	rjmp	.+54     	; 0x4a62 <__floatsisf+0x6c>
    4a2c:	6f 5f       	subi	r22, 0xFF	; 255
    4a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a30:	8f 4f       	sbci	r24, 0xFF	; 255
    4a32:	9f 4f       	sbci	r25, 0xFF	; 255
    4a34:	16 c0       	rjmp	.+44     	; 0x4a62 <__floatsisf+0x6c>
    4a36:	88 23       	and	r24, r24
    4a38:	11 f0       	breq	.+4      	; 0x4a3e <__floatsisf+0x48>
    4a3a:	96 e9       	ldi	r25, 0x96	; 150
    4a3c:	11 c0       	rjmp	.+34     	; 0x4a60 <__floatsisf+0x6a>
    4a3e:	77 23       	and	r23, r23
    4a40:	21 f0       	breq	.+8      	; 0x4a4a <__floatsisf+0x54>
    4a42:	9e e8       	ldi	r25, 0x8E	; 142
    4a44:	87 2f       	mov	r24, r23
    4a46:	76 2f       	mov	r23, r22
    4a48:	05 c0       	rjmp	.+10     	; 0x4a54 <__floatsisf+0x5e>
    4a4a:	66 23       	and	r22, r22
    4a4c:	71 f0       	breq	.+28     	; 0x4a6a <__floatsisf+0x74>
    4a4e:	96 e8       	ldi	r25, 0x86	; 134
    4a50:	86 2f       	mov	r24, r22
    4a52:	70 e0       	ldi	r23, 0x00	; 0
    4a54:	60 e0       	ldi	r22, 0x00	; 0
    4a56:	2a f0       	brmi	.+10     	; 0x4a62 <__floatsisf+0x6c>
    4a58:	9a 95       	dec	r25
    4a5a:	66 0f       	add	r22, r22
    4a5c:	77 1f       	adc	r23, r23
    4a5e:	88 1f       	adc	r24, r24
    4a60:	da f7       	brpl	.-10     	; 0x4a58 <__floatsisf+0x62>
    4a62:	88 0f       	add	r24, r24
    4a64:	96 95       	lsr	r25
    4a66:	87 95       	ror	r24
    4a68:	97 f9       	bld	r25, 7
    4a6a:	08 95       	ret

00004a6c <__fp_cmp>:
    4a6c:	99 0f       	add	r25, r25
    4a6e:	00 08       	sbc	r0, r0
    4a70:	55 0f       	add	r21, r21
    4a72:	aa 0b       	sbc	r26, r26
    4a74:	e0 e8       	ldi	r30, 0x80	; 128
    4a76:	fe ef       	ldi	r31, 0xFE	; 254
    4a78:	16 16       	cp	r1, r22
    4a7a:	17 06       	cpc	r1, r23
    4a7c:	e8 07       	cpc	r30, r24
    4a7e:	f9 07       	cpc	r31, r25
    4a80:	c0 f0       	brcs	.+48     	; 0x4ab2 <__fp_cmp+0x46>
    4a82:	12 16       	cp	r1, r18
    4a84:	13 06       	cpc	r1, r19
    4a86:	e4 07       	cpc	r30, r20
    4a88:	f5 07       	cpc	r31, r21
    4a8a:	98 f0       	brcs	.+38     	; 0x4ab2 <__fp_cmp+0x46>
    4a8c:	62 1b       	sub	r22, r18
    4a8e:	73 0b       	sbc	r23, r19
    4a90:	84 0b       	sbc	r24, r20
    4a92:	95 0b       	sbc	r25, r21
    4a94:	39 f4       	brne	.+14     	; 0x4aa4 <__fp_cmp+0x38>
    4a96:	0a 26       	eor	r0, r26
    4a98:	61 f0       	breq	.+24     	; 0x4ab2 <__fp_cmp+0x46>
    4a9a:	23 2b       	or	r18, r19
    4a9c:	24 2b       	or	r18, r20
    4a9e:	25 2b       	or	r18, r21
    4aa0:	21 f4       	brne	.+8      	; 0x4aaa <__fp_cmp+0x3e>
    4aa2:	08 95       	ret
    4aa4:	0a 26       	eor	r0, r26
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <__fp_cmp+0x3e>
    4aa8:	a1 40       	sbci	r26, 0x01	; 1
    4aaa:	a6 95       	lsr	r26
    4aac:	8f ef       	ldi	r24, 0xFF	; 255
    4aae:	81 1d       	adc	r24, r1
    4ab0:	81 1d       	adc	r24, r1
    4ab2:	08 95       	ret

00004ab4 <__fp_inf>:
    4ab4:	97 f9       	bld	r25, 7
    4ab6:	9f 67       	ori	r25, 0x7F	; 127
    4ab8:	80 e8       	ldi	r24, 0x80	; 128
    4aba:	70 e0       	ldi	r23, 0x00	; 0
    4abc:	60 e0       	ldi	r22, 0x00	; 0
    4abe:	08 95       	ret

00004ac0 <__fp_nan>:
    4ac0:	9f ef       	ldi	r25, 0xFF	; 255
    4ac2:	80 ec       	ldi	r24, 0xC0	; 192
    4ac4:	08 95       	ret

00004ac6 <__fp_pscA>:
    4ac6:	00 24       	eor	r0, r0
    4ac8:	0a 94       	dec	r0
    4aca:	16 16       	cp	r1, r22
    4acc:	17 06       	cpc	r1, r23
    4ace:	18 06       	cpc	r1, r24
    4ad0:	09 06       	cpc	r0, r25
    4ad2:	08 95       	ret

00004ad4 <__fp_pscB>:
    4ad4:	00 24       	eor	r0, r0
    4ad6:	0a 94       	dec	r0
    4ad8:	12 16       	cp	r1, r18
    4ada:	13 06       	cpc	r1, r19
    4adc:	14 06       	cpc	r1, r20
    4ade:	05 06       	cpc	r0, r21
    4ae0:	08 95       	ret

00004ae2 <__fp_round>:
    4ae2:	09 2e       	mov	r0, r25
    4ae4:	03 94       	inc	r0
    4ae6:	00 0c       	add	r0, r0
    4ae8:	11 f4       	brne	.+4      	; 0x4aee <__fp_round+0xc>
    4aea:	88 23       	and	r24, r24
    4aec:	52 f0       	brmi	.+20     	; 0x4b02 <__fp_round+0x20>
    4aee:	bb 0f       	add	r27, r27
    4af0:	40 f4       	brcc	.+16     	; 0x4b02 <__fp_round+0x20>
    4af2:	bf 2b       	or	r27, r31
    4af4:	11 f4       	brne	.+4      	; 0x4afa <__fp_round+0x18>
    4af6:	60 ff       	sbrs	r22, 0
    4af8:	04 c0       	rjmp	.+8      	; 0x4b02 <__fp_round+0x20>
    4afa:	6f 5f       	subi	r22, 0xFF	; 255
    4afc:	7f 4f       	sbci	r23, 0xFF	; 255
    4afe:	8f 4f       	sbci	r24, 0xFF	; 255
    4b00:	9f 4f       	sbci	r25, 0xFF	; 255
    4b02:	08 95       	ret

00004b04 <__fp_split3>:
    4b04:	57 fd       	sbrc	r21, 7
    4b06:	90 58       	subi	r25, 0x80	; 128
    4b08:	44 0f       	add	r20, r20
    4b0a:	55 1f       	adc	r21, r21
    4b0c:	59 f0       	breq	.+22     	; 0x4b24 <__fp_splitA+0x10>
    4b0e:	5f 3f       	cpi	r21, 0xFF	; 255
    4b10:	71 f0       	breq	.+28     	; 0x4b2e <__fp_splitA+0x1a>
    4b12:	47 95       	ror	r20

00004b14 <__fp_splitA>:
    4b14:	88 0f       	add	r24, r24
    4b16:	97 fb       	bst	r25, 7
    4b18:	99 1f       	adc	r25, r25
    4b1a:	61 f0       	breq	.+24     	; 0x4b34 <__fp_splitA+0x20>
    4b1c:	9f 3f       	cpi	r25, 0xFF	; 255
    4b1e:	79 f0       	breq	.+30     	; 0x4b3e <__fp_splitA+0x2a>
    4b20:	87 95       	ror	r24
    4b22:	08 95       	ret
    4b24:	12 16       	cp	r1, r18
    4b26:	13 06       	cpc	r1, r19
    4b28:	14 06       	cpc	r1, r20
    4b2a:	55 1f       	adc	r21, r21
    4b2c:	f2 cf       	rjmp	.-28     	; 0x4b12 <__fp_split3+0xe>
    4b2e:	46 95       	lsr	r20
    4b30:	f1 df       	rcall	.-30     	; 0x4b14 <__fp_splitA>
    4b32:	08 c0       	rjmp	.+16     	; 0x4b44 <__fp_splitA+0x30>
    4b34:	16 16       	cp	r1, r22
    4b36:	17 06       	cpc	r1, r23
    4b38:	18 06       	cpc	r1, r24
    4b3a:	99 1f       	adc	r25, r25
    4b3c:	f1 cf       	rjmp	.-30     	; 0x4b20 <__fp_splitA+0xc>
    4b3e:	86 95       	lsr	r24
    4b40:	71 05       	cpc	r23, r1
    4b42:	61 05       	cpc	r22, r1
    4b44:	08 94       	sec
    4b46:	08 95       	ret

00004b48 <__fp_zero>:
    4b48:	e8 94       	clt

00004b4a <__fp_szero>:
    4b4a:	bb 27       	eor	r27, r27
    4b4c:	66 27       	eor	r22, r22
    4b4e:	77 27       	eor	r23, r23
    4b50:	cb 01       	movw	r24, r22
    4b52:	97 f9       	bld	r25, 7
    4b54:	08 95       	ret

00004b56 <__gesf2>:
    4b56:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <__fp_cmp>
    4b5a:	08 f4       	brcc	.+2      	; 0x4b5e <__gesf2+0x8>
    4b5c:	8f ef       	ldi	r24, 0xFF	; 255
    4b5e:	08 95       	ret
    4b60:	16 f0       	brts	.+4      	; 0x4b66 <__gesf2+0x10>
    4b62:	0c 94 6d 26 	jmp	0x4cda	; 0x4cda <__fp_mpack>
    4b66:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__fp_nan>
    4b6a:	68 94       	set
    4b6c:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__fp_inf>

00004b70 <log>:
    4b70:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <__fp_splitA>
    4b74:	a8 f3       	brcs	.-22     	; 0x4b60 <__gesf2+0xa>
    4b76:	99 23       	and	r25, r25
    4b78:	c1 f3       	breq	.-16     	; 0x4b6a <__gesf2+0x14>
    4b7a:	ae f3       	brts	.-22     	; 0x4b66 <__gesf2+0x10>
    4b7c:	df 93       	push	r29
    4b7e:	cf 93       	push	r28
    4b80:	1f 93       	push	r17
    4b82:	0f 93       	push	r16
    4b84:	ff 92       	push	r15
    4b86:	c9 2f       	mov	r28, r25
    4b88:	dd 27       	eor	r29, r29
    4b8a:	88 23       	and	r24, r24
    4b8c:	2a f0       	brmi	.+10     	; 0x4b98 <log+0x28>
    4b8e:	21 97       	sbiw	r28, 0x01	; 1
    4b90:	66 0f       	add	r22, r22
    4b92:	77 1f       	adc	r23, r23
    4b94:	88 1f       	adc	r24, r24
    4b96:	da f7       	brpl	.-10     	; 0x4b8e <log+0x1e>
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	40 e8       	ldi	r20, 0x80	; 128
    4b9e:	5f eb       	ldi	r21, 0xBF	; 191
    4ba0:	9f e3       	ldi	r25, 0x3F	; 63
    4ba2:	88 39       	cpi	r24, 0x98	; 152
    4ba4:	20 f0       	brcs	.+8      	; 0x4bae <log+0x3e>
    4ba6:	80 3e       	cpi	r24, 0xE0	; 224
    4ba8:	38 f0       	brcs	.+14     	; 0x4bb8 <log+0x48>
    4baa:	21 96       	adiw	r28, 0x01	; 1
    4bac:	8f 77       	andi	r24, 0x7F	; 127
    4bae:	0e 94 16 24 	call	0x482c	; 0x482c <__addsf3>
    4bb2:	e4 e5       	ldi	r30, 0x54	; 84
    4bb4:	f0 e0       	ldi	r31, 0x00	; 0
    4bb6:	04 c0       	rjmp	.+8      	; 0x4bc0 <log+0x50>
    4bb8:	0e 94 16 24 	call	0x482c	; 0x482c <__addsf3>
    4bbc:	e1 e8       	ldi	r30, 0x81	; 129
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <__fp_powser>
    4bc4:	8b 01       	movw	r16, r22
    4bc6:	be 01       	movw	r22, r28
    4bc8:	ec 01       	movw	r28, r24
    4bca:	fb 2e       	mov	r15, r27
    4bcc:	6f 57       	subi	r22, 0x7F	; 127
    4bce:	71 09       	sbc	r23, r1
    4bd0:	75 95       	asr	r23
    4bd2:	77 1f       	adc	r23, r23
    4bd4:	88 0b       	sbc	r24, r24
    4bd6:	99 0b       	sbc	r25, r25
    4bd8:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__floatsisf>
    4bdc:	28 e1       	ldi	r18, 0x18	; 24
    4bde:	32 e7       	ldi	r19, 0x72	; 114
    4be0:	41 e3       	ldi	r20, 0x31	; 49
    4be2:	5f e3       	ldi	r21, 0x3F	; 63
    4be4:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__mulsf3x>
    4be8:	af 2d       	mov	r26, r15
    4bea:	98 01       	movw	r18, r16
    4bec:	ae 01       	movw	r20, r28
    4bee:	ff 90       	pop	r15
    4bf0:	0f 91       	pop	r16
    4bf2:	1f 91       	pop	r17
    4bf4:	cf 91       	pop	r28
    4bf6:	df 91       	pop	r29
    4bf8:	0e 94 2d 24 	call	0x485a	; 0x485a <__addsf3x>
    4bfc:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__fp_round>

00004c00 <__mulsf3>:
    4c00:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__mulsf3x>
    4c04:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__fp_round>
    4c08:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__fp_pscA>
    4c0c:	38 f0       	brcs	.+14     	; 0x4c1c <__mulsf3+0x1c>
    4c0e:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__fp_pscB>
    4c12:	20 f0       	brcs	.+8      	; 0x4c1c <__mulsf3+0x1c>
    4c14:	95 23       	and	r25, r21
    4c16:	11 f0       	breq	.+4      	; 0x4c1c <__mulsf3+0x1c>
    4c18:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__fp_inf>
    4c1c:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__fp_nan>
    4c20:	11 24       	eor	r1, r1
    4c22:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__fp_szero>

00004c26 <__mulsf3x>:
    4c26:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__fp_split3>
    4c2a:	70 f3       	brcs	.-36     	; 0x4c08 <__mulsf3+0x8>

00004c2c <__mulsf3_pse>:
    4c2c:	95 9f       	mul	r25, r21
    4c2e:	c1 f3       	breq	.-16     	; 0x4c20 <__mulsf3+0x20>
    4c30:	95 0f       	add	r25, r21
    4c32:	50 e0       	ldi	r21, 0x00	; 0
    4c34:	55 1f       	adc	r21, r21
    4c36:	62 9f       	mul	r22, r18
    4c38:	f0 01       	movw	r30, r0
    4c3a:	72 9f       	mul	r23, r18
    4c3c:	bb 27       	eor	r27, r27
    4c3e:	f0 0d       	add	r31, r0
    4c40:	b1 1d       	adc	r27, r1
    4c42:	63 9f       	mul	r22, r19
    4c44:	aa 27       	eor	r26, r26
    4c46:	f0 0d       	add	r31, r0
    4c48:	b1 1d       	adc	r27, r1
    4c4a:	aa 1f       	adc	r26, r26
    4c4c:	64 9f       	mul	r22, r20
    4c4e:	66 27       	eor	r22, r22
    4c50:	b0 0d       	add	r27, r0
    4c52:	a1 1d       	adc	r26, r1
    4c54:	66 1f       	adc	r22, r22
    4c56:	82 9f       	mul	r24, r18
    4c58:	22 27       	eor	r18, r18
    4c5a:	b0 0d       	add	r27, r0
    4c5c:	a1 1d       	adc	r26, r1
    4c5e:	62 1f       	adc	r22, r18
    4c60:	73 9f       	mul	r23, r19
    4c62:	b0 0d       	add	r27, r0
    4c64:	a1 1d       	adc	r26, r1
    4c66:	62 1f       	adc	r22, r18
    4c68:	83 9f       	mul	r24, r19
    4c6a:	a0 0d       	add	r26, r0
    4c6c:	61 1d       	adc	r22, r1
    4c6e:	22 1f       	adc	r18, r18
    4c70:	74 9f       	mul	r23, r20
    4c72:	33 27       	eor	r19, r19
    4c74:	a0 0d       	add	r26, r0
    4c76:	61 1d       	adc	r22, r1
    4c78:	23 1f       	adc	r18, r19
    4c7a:	84 9f       	mul	r24, r20
    4c7c:	60 0d       	add	r22, r0
    4c7e:	21 1d       	adc	r18, r1
    4c80:	82 2f       	mov	r24, r18
    4c82:	76 2f       	mov	r23, r22
    4c84:	6a 2f       	mov	r22, r26
    4c86:	11 24       	eor	r1, r1
    4c88:	9f 57       	subi	r25, 0x7F	; 127
    4c8a:	50 40       	sbci	r21, 0x00	; 0
    4c8c:	9a f0       	brmi	.+38     	; 0x4cb4 <__mulsf3_pse+0x88>
    4c8e:	f1 f0       	breq	.+60     	; 0x4ccc <__mulsf3_pse+0xa0>
    4c90:	88 23       	and	r24, r24
    4c92:	4a f0       	brmi	.+18     	; 0x4ca6 <__mulsf3_pse+0x7a>
    4c94:	ee 0f       	add	r30, r30
    4c96:	ff 1f       	adc	r31, r31
    4c98:	bb 1f       	adc	r27, r27
    4c9a:	66 1f       	adc	r22, r22
    4c9c:	77 1f       	adc	r23, r23
    4c9e:	88 1f       	adc	r24, r24
    4ca0:	91 50       	subi	r25, 0x01	; 1
    4ca2:	50 40       	sbci	r21, 0x00	; 0
    4ca4:	a9 f7       	brne	.-22     	; 0x4c90 <__mulsf3_pse+0x64>
    4ca6:	9e 3f       	cpi	r25, 0xFE	; 254
    4ca8:	51 05       	cpc	r21, r1
    4caa:	80 f0       	brcs	.+32     	; 0x4ccc <__mulsf3_pse+0xa0>
    4cac:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__fp_inf>
    4cb0:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <__fp_szero>
    4cb4:	5f 3f       	cpi	r21, 0xFF	; 255
    4cb6:	e4 f3       	brlt	.-8      	; 0x4cb0 <__mulsf3_pse+0x84>
    4cb8:	98 3e       	cpi	r25, 0xE8	; 232
    4cba:	d4 f3       	brlt	.-12     	; 0x4cb0 <__mulsf3_pse+0x84>
    4cbc:	86 95       	lsr	r24
    4cbe:	77 95       	ror	r23
    4cc0:	67 95       	ror	r22
    4cc2:	b7 95       	ror	r27
    4cc4:	f7 95       	ror	r31
    4cc6:	e7 95       	ror	r30
    4cc8:	9f 5f       	subi	r25, 0xFF	; 255
    4cca:	c1 f7       	brne	.-16     	; 0x4cbc <__mulsf3_pse+0x90>
    4ccc:	fe 2b       	or	r31, r30
    4cce:	88 0f       	add	r24, r24
    4cd0:	91 1d       	adc	r25, r1
    4cd2:	96 95       	lsr	r25
    4cd4:	87 95       	ror	r24
    4cd6:	97 f9       	bld	r25, 7
    4cd8:	08 95       	ret

00004cda <__fp_mpack>:
    4cda:	9f 3f       	cpi	r25, 0xFF	; 255
    4cdc:	31 f0       	breq	.+12     	; 0x4cea <__fp_mpack_finite+0xc>

00004cde <__fp_mpack_finite>:
    4cde:	91 50       	subi	r25, 0x01	; 1
    4ce0:	20 f4       	brcc	.+8      	; 0x4cea <__fp_mpack_finite+0xc>
    4ce2:	87 95       	ror	r24
    4ce4:	77 95       	ror	r23
    4ce6:	67 95       	ror	r22
    4ce8:	b7 95       	ror	r27
    4cea:	88 0f       	add	r24, r24
    4cec:	91 1d       	adc	r25, r1
    4cee:	96 95       	lsr	r25
    4cf0:	87 95       	ror	r24
    4cf2:	97 f9       	bld	r25, 7
    4cf4:	08 95       	ret

00004cf6 <__fp_powser>:
    4cf6:	df 93       	push	r29
    4cf8:	cf 93       	push	r28
    4cfa:	1f 93       	push	r17
    4cfc:	0f 93       	push	r16
    4cfe:	ff 92       	push	r15
    4d00:	ef 92       	push	r14
    4d02:	df 92       	push	r13
    4d04:	7b 01       	movw	r14, r22
    4d06:	8c 01       	movw	r16, r24
    4d08:	68 94       	set
    4d0a:	06 c0       	rjmp	.+12     	; 0x4d18 <__fp_powser+0x22>
    4d0c:	da 2e       	mov	r13, r26
    4d0e:	ef 01       	movw	r28, r30
    4d10:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__mulsf3x>
    4d14:	fe 01       	movw	r30, r28
    4d16:	e8 94       	clt
    4d18:	a5 91       	lpm	r26, Z+
    4d1a:	25 91       	lpm	r18, Z+
    4d1c:	35 91       	lpm	r19, Z+
    4d1e:	45 91       	lpm	r20, Z+
    4d20:	55 91       	lpm	r21, Z+
    4d22:	a6 f3       	brts	.-24     	; 0x4d0c <__fp_powser+0x16>
    4d24:	ef 01       	movw	r28, r30
    4d26:	0e 94 2d 24 	call	0x485a	; 0x485a <__addsf3x>
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	97 01       	movw	r18, r14
    4d2e:	a8 01       	movw	r20, r16
    4d30:	da 94       	dec	r13
    4d32:	69 f7       	brne	.-38     	; 0x4d0e <__fp_powser+0x18>
    4d34:	df 90       	pop	r13
    4d36:	ef 90       	pop	r14
    4d38:	ff 90       	pop	r15
    4d3a:	0f 91       	pop	r16
    4d3c:	1f 91       	pop	r17
    4d3e:	cf 91       	pop	r28
    4d40:	df 91       	pop	r29
    4d42:	08 95       	ret

00004d44 <__udivmodsi4>:
    4d44:	a1 e2       	ldi	r26, 0x21	; 33
    4d46:	1a 2e       	mov	r1, r26
    4d48:	aa 1b       	sub	r26, r26
    4d4a:	bb 1b       	sub	r27, r27
    4d4c:	fd 01       	movw	r30, r26
    4d4e:	0d c0       	rjmp	.+26     	; 0x4d6a <__udivmodsi4_ep>

00004d50 <__udivmodsi4_loop>:
    4d50:	aa 1f       	adc	r26, r26
    4d52:	bb 1f       	adc	r27, r27
    4d54:	ee 1f       	adc	r30, r30
    4d56:	ff 1f       	adc	r31, r31
    4d58:	a2 17       	cp	r26, r18
    4d5a:	b3 07       	cpc	r27, r19
    4d5c:	e4 07       	cpc	r30, r20
    4d5e:	f5 07       	cpc	r31, r21
    4d60:	20 f0       	brcs	.+8      	; 0x4d6a <__udivmodsi4_ep>
    4d62:	a2 1b       	sub	r26, r18
    4d64:	b3 0b       	sbc	r27, r19
    4d66:	e4 0b       	sbc	r30, r20
    4d68:	f5 0b       	sbc	r31, r21

00004d6a <__udivmodsi4_ep>:
    4d6a:	66 1f       	adc	r22, r22
    4d6c:	77 1f       	adc	r23, r23
    4d6e:	88 1f       	adc	r24, r24
    4d70:	99 1f       	adc	r25, r25
    4d72:	1a 94       	dec	r1
    4d74:	69 f7       	brne	.-38     	; 0x4d50 <__udivmodsi4_loop>
    4d76:	60 95       	com	r22
    4d78:	70 95       	com	r23
    4d7a:	80 95       	com	r24
    4d7c:	90 95       	com	r25
    4d7e:	9b 01       	movw	r18, r22
    4d80:	ac 01       	movw	r20, r24
    4d82:	bd 01       	movw	r22, r26
    4d84:	cf 01       	movw	r24, r30
    4d86:	08 95       	ret

00004d88 <__divmodsi4>:
    4d88:	05 2e       	mov	r0, r21
    4d8a:	97 fb       	bst	r25, 7
    4d8c:	1e f4       	brtc	.+6      	; 0x4d94 <__divmodsi4+0xc>
    4d8e:	00 94       	com	r0
    4d90:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__negsi2>
    4d94:	57 fd       	sbrc	r21, 7
    4d96:	07 d0       	rcall	.+14     	; 0x4da6 <__divmodsi4_neg2>
    4d98:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__udivmodsi4>
    4d9c:	07 fc       	sbrc	r0, 7
    4d9e:	03 d0       	rcall	.+6      	; 0x4da6 <__divmodsi4_neg2>
    4da0:	4e f4       	brtc	.+18     	; 0x4db4 <__divmodsi4_exit>
    4da2:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__negsi2>

00004da6 <__divmodsi4_neg2>:
    4da6:	50 95       	com	r21
    4da8:	40 95       	com	r20
    4daa:	30 95       	com	r19
    4dac:	21 95       	neg	r18
    4dae:	3f 4f       	sbci	r19, 0xFF	; 255
    4db0:	4f 4f       	sbci	r20, 0xFF	; 255
    4db2:	5f 4f       	sbci	r21, 0xFF	; 255

00004db4 <__divmodsi4_exit>:
    4db4:	08 95       	ret

00004db6 <__negsi2>:
    4db6:	90 95       	com	r25
    4db8:	80 95       	com	r24
    4dba:	70 95       	com	r23
    4dbc:	61 95       	neg	r22
    4dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc4:	08 95       	ret

00004dc6 <__tablejump2__>:
    4dc6:	ee 0f       	add	r30, r30
    4dc8:	ff 1f       	adc	r31, r31
    4dca:	05 90       	lpm	r0, Z+
    4dcc:	f4 91       	lpm	r31, Z
    4dce:	e0 2d       	mov	r30, r0
    4dd0:	09 94       	ijmp

00004dd2 <dtostrf>:
    4dd2:	ef 92       	push	r14
    4dd4:	0f 93       	push	r16
    4dd6:	1f 93       	push	r17
    4dd8:	cf 93       	push	r28
    4dda:	df 93       	push	r29
    4ddc:	e8 01       	movw	r28, r16
    4dde:	34 e0       	ldi	r19, 0x04	; 4
    4de0:	47 fd       	sbrc	r20, 7
    4de2:	34 e1       	ldi	r19, 0x14	; 20
    4de4:	04 2e       	mov	r0, r20
    4de6:	00 0c       	add	r0, r0
    4de8:	55 0b       	sbc	r21, r21
    4dea:	57 ff       	sbrs	r21, 7
    4dec:	03 c0       	rjmp	.+6      	; 0x4df4 <dtostrf+0x22>
    4dee:	51 95       	neg	r21
    4df0:	41 95       	neg	r20
    4df2:	51 09       	sbc	r21, r1
    4df4:	e3 2e       	mov	r14, r19
    4df6:	02 2f       	mov	r16, r18
    4df8:	24 2f       	mov	r18, r20
    4dfa:	ae 01       	movw	r20, r28
    4dfc:	0e 94 10 27 	call	0x4e20	; 0x4e20 <dtoa_prf>
    4e00:	ce 01       	movw	r24, r28
    4e02:	df 91       	pop	r29
    4e04:	cf 91       	pop	r28
    4e06:	1f 91       	pop	r17
    4e08:	0f 91       	pop	r16
    4e0a:	ef 90       	pop	r14
    4e0c:	08 95       	ret

00004e0e <memcpy>:
    4e0e:	fb 01       	movw	r30, r22
    4e10:	dc 01       	movw	r26, r24
    4e12:	02 c0       	rjmp	.+4      	; 0x4e18 <memcpy+0xa>
    4e14:	01 90       	ld	r0, Z+
    4e16:	0d 92       	st	X+, r0
    4e18:	41 50       	subi	r20, 0x01	; 1
    4e1a:	50 40       	sbci	r21, 0x00	; 0
    4e1c:	d8 f7       	brcc	.-10     	; 0x4e14 <memcpy+0x6>
    4e1e:	08 95       	ret

00004e20 <dtoa_prf>:
    4e20:	a9 e0       	ldi	r26, 0x09	; 9
    4e22:	b0 e0       	ldi	r27, 0x00	; 0
    4e24:	e6 e1       	ldi	r30, 0x16	; 22
    4e26:	f7 e2       	ldi	r31, 0x27	; 39
    4e28:	0c 94 4d 29 	jmp	0x529a	; 0x529a <__prologue_saves__+0xc>
    4e2c:	6a 01       	movw	r12, r20
    4e2e:	f2 2e       	mov	r15, r18
    4e30:	b0 2e       	mov	r11, r16
    4e32:	10 2f       	mov	r17, r16
    4e34:	fb e3       	ldi	r31, 0x3B	; 59
    4e36:	af 2e       	mov	r10, r31
    4e38:	a0 16       	cp	r10, r16
    4e3a:	08 f4       	brcc	.+2      	; 0x4e3e <dtoa_prf+0x1e>
    4e3c:	1b e3       	ldi	r17, 0x3B	; 59
    4e3e:	1f 5f       	subi	r17, 0xFF	; 255
    4e40:	01 2f       	mov	r16, r17
    4e42:	27 e0       	ldi	r18, 0x07	; 7
    4e44:	ae 01       	movw	r20, r28
    4e46:	4f 5f       	subi	r20, 0xFF	; 255
    4e48:	5f 4f       	sbci	r21, 0xFF	; 255
    4e4a:	0e 94 6f 28 	call	0x50de	; 0x50de <__ftoa_engine>
    4e4e:	bc 01       	movw	r22, r24
    4e50:	89 81       	ldd	r24, Y+1	; 0x01
    4e52:	98 2f       	mov	r25, r24
    4e54:	99 70       	andi	r25, 0x09	; 9
    4e56:	91 30       	cpi	r25, 0x01	; 1
    4e58:	09 f4       	brne	.+2      	; 0x4e5c <dtoa_prf+0x3c>
    4e5a:	3f c0       	rjmp	.+126    	; 0x4eda <dtoa_prf+0xba>
    4e5c:	9b e2       	ldi	r25, 0x2B	; 43
    4e5e:	e1 fc       	sbrc	r14, 1
    4e60:	04 c0       	rjmp	.+8      	; 0x4e6a <dtoa_prf+0x4a>
    4e62:	9e 2d       	mov	r25, r14
    4e64:	91 70       	andi	r25, 0x01	; 1
    4e66:	e0 fc       	sbrc	r14, 0
    4e68:	3a c0       	rjmp	.+116    	; 0x4ede <dtoa_prf+0xbe>
    4e6a:	5e 2d       	mov	r21, r14
    4e6c:	50 71       	andi	r21, 0x10	; 16
    4e6e:	e8 2f       	mov	r30, r24
    4e70:	e8 70       	andi	r30, 0x08	; 8
    4e72:	83 ff       	sbrs	r24, 3
    4e74:	46 c0       	rjmp	.+140    	; 0x4f02 <dtoa_prf+0xe2>
    4e76:	84 e0       	ldi	r24, 0x04	; 4
    4e78:	91 11       	cpse	r25, r1
    4e7a:	01 c0       	rjmp	.+2      	; 0x4e7e <dtoa_prf+0x5e>
    4e7c:	83 e0       	ldi	r24, 0x03	; 3
    4e7e:	ef 2d       	mov	r30, r15
    4e80:	e8 1b       	sub	r30, r24
    4e82:	8f 15       	cp	r24, r15
    4e84:	08 f0       	brcs	.+2      	; 0x4e88 <dtoa_prf+0x68>
    4e86:	e0 e0       	ldi	r30, 0x00	; 0
    4e88:	d6 01       	movw	r26, r12
    4e8a:	8e 2f       	mov	r24, r30
    4e8c:	20 e2       	ldi	r18, 0x20	; 32
    4e8e:	55 23       	and	r21, r21
    4e90:	51 f1       	breq	.+84     	; 0x4ee6 <dtoa_prf+0xc6>
    4e92:	99 23       	and	r25, r25
    4e94:	29 f0       	breq	.+10     	; 0x4ea0 <dtoa_prf+0x80>
    4e96:	d6 01       	movw	r26, r12
    4e98:	9c 93       	st	X, r25
    4e9a:	c6 01       	movw	r24, r12
    4e9c:	01 96       	adiw	r24, 0x01	; 1
    4e9e:	6c 01       	movw	r12, r24
    4ea0:	96 01       	movw	r18, r12
    4ea2:	2d 5f       	subi	r18, 0xFD	; 253
    4ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea6:	e2 fe       	sbrs	r14, 2
    4ea8:	24 c0       	rjmp	.+72     	; 0x4ef2 <dtoa_prf+0xd2>
    4eaa:	8e e4       	ldi	r24, 0x4E	; 78
    4eac:	d6 01       	movw	r26, r12
    4eae:	8c 93       	st	X, r24
    4eb0:	91 e4       	ldi	r25, 0x41	; 65
    4eb2:	11 96       	adiw	r26, 0x01	; 1
    4eb4:	9c 93       	st	X, r25
    4eb6:	11 97       	sbiw	r26, 0x01	; 1
    4eb8:	12 96       	adiw	r26, 0x02	; 2
    4eba:	8c 93       	st	X, r24
    4ebc:	d9 01       	movw	r26, r18
    4ebe:	8e 2f       	mov	r24, r30
    4ec0:	90 e2       	ldi	r25, 0x20	; 32
    4ec2:	81 11       	cpse	r24, r1
    4ec4:	1b c0       	rjmp	.+54     	; 0x4efc <dtoa_prf+0xdc>
    4ec6:	e2 0f       	add	r30, r18
    4ec8:	f3 2f       	mov	r31, r19
    4eca:	f1 1d       	adc	r31, r1
    4ecc:	10 82       	st	Z, r1
    4ece:	8e ef       	ldi	r24, 0xFE	; 254
    4ed0:	9f ef       	ldi	r25, 0xFF	; 255
    4ed2:	29 96       	adiw	r28, 0x09	; 9
    4ed4:	ec e0       	ldi	r30, 0x0C	; 12
    4ed6:	0c 94 69 29 	jmp	0x52d2	; 0x52d2 <__epilogue_restores__+0xc>
    4eda:	9d e2       	ldi	r25, 0x2D	; 45
    4edc:	c6 cf       	rjmp	.-116    	; 0x4e6a <dtoa_prf+0x4a>
    4ede:	90 e2       	ldi	r25, 0x20	; 32
    4ee0:	c4 cf       	rjmp	.-120    	; 0x4e6a <dtoa_prf+0x4a>
    4ee2:	2d 93       	st	X+, r18
    4ee4:	81 50       	subi	r24, 0x01	; 1
    4ee6:	81 11       	cpse	r24, r1
    4ee8:	fc cf       	rjmp	.-8      	; 0x4ee2 <dtoa_prf+0xc2>
    4eea:	ce 0e       	add	r12, r30
    4eec:	d1 1c       	adc	r13, r1
    4eee:	e0 e0       	ldi	r30, 0x00	; 0
    4ef0:	d0 cf       	rjmp	.-96     	; 0x4e92 <dtoa_prf+0x72>
    4ef2:	8e e6       	ldi	r24, 0x6E	; 110
    4ef4:	d6 01       	movw	r26, r12
    4ef6:	8c 93       	st	X, r24
    4ef8:	91 e6       	ldi	r25, 0x61	; 97
    4efa:	db cf       	rjmp	.-74     	; 0x4eb2 <dtoa_prf+0x92>
    4efc:	9d 93       	st	X+, r25
    4efe:	81 50       	subi	r24, 0x01	; 1
    4f00:	e0 cf       	rjmp	.-64     	; 0x4ec2 <dtoa_prf+0xa2>
    4f02:	48 2f       	mov	r20, r24
    4f04:	44 70       	andi	r20, 0x04	; 4
    4f06:	82 ff       	sbrs	r24, 2
    4f08:	3d c0       	rjmp	.+122    	; 0x4f84 <dtoa_prf+0x164>
    4f0a:	84 e0       	ldi	r24, 0x04	; 4
    4f0c:	91 11       	cpse	r25, r1
    4f0e:	01 c0       	rjmp	.+2      	; 0x4f12 <dtoa_prf+0xf2>
    4f10:	83 e0       	ldi	r24, 0x03	; 3
    4f12:	8f 15       	cp	r24, r15
    4f14:	10 f4       	brcc	.+4      	; 0x4f1a <dtoa_prf+0xfa>
    4f16:	ef 2d       	mov	r30, r15
    4f18:	e8 1b       	sub	r30, r24
    4f1a:	d6 01       	movw	r26, r12
    4f1c:	8e 2f       	mov	r24, r30
    4f1e:	20 e2       	ldi	r18, 0x20	; 32
    4f20:	55 23       	and	r21, r21
    4f22:	09 f1       	breq	.+66     	; 0x4f66 <dtoa_prf+0x146>
    4f24:	99 23       	and	r25, r25
    4f26:	29 f0       	breq	.+10     	; 0x4f32 <dtoa_prf+0x112>
    4f28:	d6 01       	movw	r26, r12
    4f2a:	9c 93       	st	X, r25
    4f2c:	c6 01       	movw	r24, r12
    4f2e:	01 96       	adiw	r24, 0x01	; 1
    4f30:	6c 01       	movw	r12, r24
    4f32:	96 01       	movw	r18, r12
    4f34:	2d 5f       	subi	r18, 0xFD	; 253
    4f36:	3f 4f       	sbci	r19, 0xFF	; 255
    4f38:	e2 fe       	sbrs	r14, 2
    4f3a:	1b c0       	rjmp	.+54     	; 0x4f72 <dtoa_prf+0x152>
    4f3c:	89 e4       	ldi	r24, 0x49	; 73
    4f3e:	d6 01       	movw	r26, r12
    4f40:	8c 93       	st	X, r24
    4f42:	8e e4       	ldi	r24, 0x4E	; 78
    4f44:	11 96       	adiw	r26, 0x01	; 1
    4f46:	8c 93       	st	X, r24
    4f48:	11 97       	sbiw	r26, 0x01	; 1
    4f4a:	86 e4       	ldi	r24, 0x46	; 70
    4f4c:	12 96       	adiw	r26, 0x02	; 2
    4f4e:	8c 93       	st	X, r24
    4f50:	d9 01       	movw	r26, r18
    4f52:	8e 2f       	mov	r24, r30
    4f54:	90 e2       	ldi	r25, 0x20	; 32
    4f56:	88 23       	and	r24, r24
    4f58:	09 f4       	brne	.+2      	; 0x4f5c <dtoa_prf+0x13c>
    4f5a:	b5 cf       	rjmp	.-150    	; 0x4ec6 <dtoa_prf+0xa6>
    4f5c:	9d 93       	st	X+, r25
    4f5e:	81 50       	subi	r24, 0x01	; 1
    4f60:	fa cf       	rjmp	.-12     	; 0x4f56 <dtoa_prf+0x136>
    4f62:	2d 93       	st	X+, r18
    4f64:	81 50       	subi	r24, 0x01	; 1
    4f66:	81 11       	cpse	r24, r1
    4f68:	fc cf       	rjmp	.-8      	; 0x4f62 <dtoa_prf+0x142>
    4f6a:	ce 0e       	add	r12, r30
    4f6c:	d1 1c       	adc	r13, r1
    4f6e:	e0 e0       	ldi	r30, 0x00	; 0
    4f70:	d9 cf       	rjmp	.-78     	; 0x4f24 <dtoa_prf+0x104>
    4f72:	89 e6       	ldi	r24, 0x69	; 105
    4f74:	d6 01       	movw	r26, r12
    4f76:	8c 93       	st	X, r24
    4f78:	8e e6       	ldi	r24, 0x6E	; 110
    4f7a:	11 96       	adiw	r26, 0x01	; 1
    4f7c:	8c 93       	st	X, r24
    4f7e:	11 97       	sbiw	r26, 0x01	; 1
    4f80:	86 e6       	ldi	r24, 0x66	; 102
    4f82:	e4 cf       	rjmp	.-56     	; 0x4f4c <dtoa_prf+0x12c>
    4f84:	9b 01       	movw	r18, r22
    4f86:	77 ff       	sbrs	r23, 7
    4f88:	02 c0       	rjmp	.+4      	; 0x4f8e <dtoa_prf+0x16e>
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	20 e0       	ldi	r18, 0x00	; 0
    4f8e:	a1 e0       	ldi	r26, 0x01	; 1
    4f90:	b0 e0       	ldi	r27, 0x00	; 0
    4f92:	91 11       	cpse	r25, r1
    4f94:	02 c0       	rjmp	.+4      	; 0x4f9a <dtoa_prf+0x17a>
    4f96:	b0 e0       	ldi	r27, 0x00	; 0
    4f98:	a0 e0       	ldi	r26, 0x00	; 0
    4f9a:	f9 01       	movw	r30, r18
    4f9c:	31 96       	adiw	r30, 0x01	; 1
    4f9e:	ae 0f       	add	r26, r30
    4fa0:	bf 1f       	adc	r27, r31
    4fa2:	8b 2c       	mov	r8, r11
    4fa4:	91 2c       	mov	r9, r1
    4fa6:	bb 20       	and	r11, r11
    4fa8:	09 f4       	brne	.+2      	; 0x4fac <dtoa_prf+0x18c>
    4faa:	61 c0       	rjmp	.+194    	; 0x506e <dtoa_prf+0x24e>
    4fac:	54 01       	movw	r10, r8
    4fae:	ef ef       	ldi	r30, 0xFF	; 255
    4fb0:	ae 1a       	sub	r10, r30
    4fb2:	be 0a       	sbc	r11, r30
    4fb4:	aa 0d       	add	r26, r10
    4fb6:	bb 1d       	adc	r27, r11
    4fb8:	fa 16       	cp	r15, r26
    4fba:	1b 06       	cpc	r1, r27
    4fbc:	19 f0       	breq	.+6      	; 0x4fc4 <dtoa_prf+0x1a4>
    4fbe:	14 f0       	brlt	.+4      	; 0x4fc4 <dtoa_prf+0x1a4>
    4fc0:	4f 2d       	mov	r20, r15
    4fc2:	4a 1b       	sub	r20, r26
    4fc4:	51 11       	cpse	r21, r1
    4fc6:	88 c0       	rjmp	.+272    	; 0x50d8 <dtoa_prf+0x2b8>
    4fc8:	e3 fc       	sbrc	r14, 3
    4fca:	59 c0       	rjmp	.+178    	; 0x507e <dtoa_prf+0x25e>
    4fcc:	76 01       	movw	r14, r12
    4fce:	a4 2f       	mov	r26, r20
    4fd0:	b0 e2       	ldi	r27, 0x20	; 32
    4fd2:	a1 11       	cpse	r26, r1
    4fd4:	4f c0       	rjmp	.+158    	; 0x5074 <dtoa_prf+0x254>
    4fd6:	c4 0e       	add	r12, r20
    4fd8:	d1 1c       	adc	r13, r1
    4fda:	99 23       	and	r25, r25
    4fdc:	09 f4       	brne	.+2      	; 0x4fe0 <dtoa_prf+0x1c0>
    4fde:	5b c0       	rjmp	.+182    	; 0x5096 <dtoa_prf+0x276>
    4fe0:	40 e0       	ldi	r20, 0x00	; 0
    4fe2:	d6 01       	movw	r26, r12
    4fe4:	11 96       	adiw	r26, 0x01	; 1
    4fe6:	f6 01       	movw	r30, r12
    4fe8:	90 83       	st	Z, r25
    4fea:	6d 01       	movw	r12, r26
    4fec:	55 23       	and	r21, r21
    4fee:	09 f4       	brne	.+2      	; 0x4ff2 <dtoa_prf+0x1d2>
    4ff0:	48 c0       	rjmp	.+144    	; 0x5082 <dtoa_prf+0x262>
    4ff2:	01 2f       	mov	r16, r17
    4ff4:	06 0f       	add	r16, r22
    4ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff8:	58 2f       	mov	r21, r24
    4ffa:	50 71       	andi	r21, 0x10	; 16
    4ffc:	84 ff       	sbrs	r24, 4
    4ffe:	03 c0       	rjmp	.+6      	; 0x5006 <dtoa_prf+0x1e6>
    5000:	91 33       	cpi	r25, 0x31	; 49
    5002:	09 f4       	brne	.+2      	; 0x5006 <dtoa_prf+0x1e6>
    5004:	01 50       	subi	r16, 0x01	; 1
    5006:	10 16       	cp	r1, r16
    5008:	0c f0       	brlt	.+2      	; 0x500c <dtoa_prf+0x1ec>
    500a:	47 c0       	rjmp	.+142    	; 0x509a <dtoa_prf+0x27a>
    500c:	09 30       	cpi	r16, 0x09	; 9
    500e:	08 f0       	brcs	.+2      	; 0x5012 <dtoa_prf+0x1f2>
    5010:	08 e0       	ldi	r16, 0x08	; 8
    5012:	ee e2       	ldi	r30, 0x2E	; 46
    5014:	fe 2e       	mov	r15, r30
    5016:	5b 01       	movw	r10, r22
    5018:	a0 1a       	sub	r10, r16
    501a:	b1 08       	sbc	r11, r1
    501c:	85 01       	movw	r16, r10
    501e:	91 94       	neg	r9
    5020:	81 94       	neg	r8
    5022:	91 08       	sbc	r9, r1
    5024:	2f 3f       	cpi	r18, 0xFF	; 255
    5026:	32 07       	cpc	r19, r18
    5028:	29 f4       	brne	.+10     	; 0x5034 <dtoa_prf+0x214>
    502a:	d6 01       	movw	r26, r12
    502c:	fc 92       	st	X, r15
    502e:	f6 01       	movw	r30, r12
    5030:	31 96       	adiw	r30, 0x01	; 1
    5032:	6f 01       	movw	r12, r30
    5034:	62 17       	cp	r22, r18
    5036:	73 07       	cpc	r23, r19
    5038:	94 f1       	brlt	.+100    	; 0x509e <dtoa_prf+0x27e>
    503a:	02 17       	cp	r16, r18
    503c:	13 07       	cpc	r17, r19
    503e:	7c f5       	brge	.+94     	; 0x509e <dtoa_prf+0x27e>
    5040:	db 01       	movw	r26, r22
    5042:	a2 1b       	sub	r26, r18
    5044:	b3 0b       	sbc	r27, r19
    5046:	aa 24       	eor	r10, r10
    5048:	a3 94       	inc	r10
    504a:	b1 2c       	mov	r11, r1
    504c:	ac 0e       	add	r10, r28
    504e:	bd 1e       	adc	r11, r29
    5050:	aa 0d       	add	r26, r10
    5052:	bb 1d       	adc	r27, r11
    5054:	11 96       	adiw	r26, 0x01	; 1
    5056:	8c 91       	ld	r24, X
    5058:	21 50       	subi	r18, 0x01	; 1
    505a:	31 09       	sbc	r19, r1
    505c:	d6 01       	movw	r26, r12
    505e:	11 96       	adiw	r26, 0x01	; 1
    5060:	28 15       	cp	r18, r8
    5062:	39 05       	cpc	r19, r9
    5064:	f4 f0       	brlt	.+60     	; 0x50a2 <dtoa_prf+0x282>
    5066:	f6 01       	movw	r30, r12
    5068:	80 83       	st	Z, r24
    506a:	6d 01       	movw	r12, r26
    506c:	db cf       	rjmp	.-74     	; 0x5024 <dtoa_prf+0x204>
    506e:	b1 2c       	mov	r11, r1
    5070:	a1 2c       	mov	r10, r1
    5072:	a0 cf       	rjmp	.-192    	; 0x4fb4 <dtoa_prf+0x194>
    5074:	f7 01       	movw	r30, r14
    5076:	b1 93       	st	Z+, r27
    5078:	7f 01       	movw	r14, r30
    507a:	a1 50       	subi	r26, 0x01	; 1
    507c:	aa cf       	rjmp	.-172    	; 0x4fd2 <dtoa_prf+0x1b2>
    507e:	91 11       	cpse	r25, r1
    5080:	b0 cf       	rjmp	.-160    	; 0x4fe2 <dtoa_prf+0x1c2>
    5082:	d6 01       	movw	r26, r12
    5084:	94 2f       	mov	r25, r20
    5086:	50 e3       	ldi	r21, 0x30	; 48
    5088:	02 c0       	rjmp	.+4      	; 0x508e <dtoa_prf+0x26e>
    508a:	5d 93       	st	X+, r21
    508c:	91 50       	subi	r25, 0x01	; 1
    508e:	91 11       	cpse	r25, r1
    5090:	fc cf       	rjmp	.-8      	; 0x508a <dtoa_prf+0x26a>
    5092:	c4 0e       	add	r12, r20
    5094:	d1 1c       	adc	r13, r1
    5096:	40 e0       	ldi	r20, 0x00	; 0
    5098:	ac cf       	rjmp	.-168    	; 0x4ff2 <dtoa_prf+0x1d2>
    509a:	01 e0       	ldi	r16, 0x01	; 1
    509c:	ba cf       	rjmp	.-140    	; 0x5012 <dtoa_prf+0x1f2>
    509e:	80 e3       	ldi	r24, 0x30	; 48
    50a0:	db cf       	rjmp	.-74     	; 0x5058 <dtoa_prf+0x238>
    50a2:	62 17       	cp	r22, r18
    50a4:	73 07       	cpc	r23, r19
    50a6:	31 f4       	brne	.+12     	; 0x50b4 <dtoa_prf+0x294>
    50a8:	96 33       	cpi	r25, 0x36	; 54
    50aa:	88 f4       	brcc	.+34     	; 0x50ce <dtoa_prf+0x2ae>
    50ac:	95 33       	cpi	r25, 0x35	; 53
    50ae:	11 f4       	brne	.+4      	; 0x50b4 <dtoa_prf+0x294>
    50b0:	55 23       	and	r21, r21
    50b2:	69 f0       	breq	.+26     	; 0x50ce <dtoa_prf+0x2ae>
    50b4:	f6 01       	movw	r30, r12
    50b6:	80 83       	st	Z, r24
    50b8:	fd 01       	movw	r30, r26
    50ba:	84 2f       	mov	r24, r20
    50bc:	90 e2       	ldi	r25, 0x20	; 32
    50be:	81 11       	cpse	r24, r1
    50c0:	08 c0       	rjmp	.+16     	; 0x50d2 <dtoa_prf+0x2b2>
    50c2:	a4 0f       	add	r26, r20
    50c4:	b1 1d       	adc	r27, r1
    50c6:	1c 92       	st	X, r1
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	80 e0       	ldi	r24, 0x00	; 0
    50cc:	02 cf       	rjmp	.-508    	; 0x4ed2 <dtoa_prf+0xb2>
    50ce:	81 e3       	ldi	r24, 0x31	; 49
    50d0:	f1 cf       	rjmp	.-30     	; 0x50b4 <dtoa_prf+0x294>
    50d2:	91 93       	st	Z+, r25
    50d4:	81 50       	subi	r24, 0x01	; 1
    50d6:	f3 cf       	rjmp	.-26     	; 0x50be <dtoa_prf+0x29e>
    50d8:	91 11       	cpse	r25, r1
    50da:	83 cf       	rjmp	.-250    	; 0x4fe2 <dtoa_prf+0x1c2>
    50dc:	8a cf       	rjmp	.-236    	; 0x4ff2 <dtoa_prf+0x1d2>

000050de <__ftoa_engine>:
    50de:	28 30       	cpi	r18, 0x08	; 8
    50e0:	08 f0       	brcs	.+2      	; 0x50e4 <__ftoa_engine+0x6>
    50e2:	27 e0       	ldi	r18, 0x07	; 7
    50e4:	33 27       	eor	r19, r19
    50e6:	da 01       	movw	r26, r20
    50e8:	99 0f       	add	r25, r25
    50ea:	31 1d       	adc	r19, r1
    50ec:	87 fd       	sbrc	r24, 7
    50ee:	91 60       	ori	r25, 0x01	; 1
    50f0:	00 96       	adiw	r24, 0x00	; 0
    50f2:	61 05       	cpc	r22, r1
    50f4:	71 05       	cpc	r23, r1
    50f6:	39 f4       	brne	.+14     	; 0x5106 <__ftoa_engine+0x28>
    50f8:	32 60       	ori	r19, 0x02	; 2
    50fa:	2e 5f       	subi	r18, 0xFE	; 254
    50fc:	3d 93       	st	X+, r19
    50fe:	30 e3       	ldi	r19, 0x30	; 48
    5100:	2a 95       	dec	r18
    5102:	e1 f7       	brne	.-8      	; 0x50fc <__ftoa_engine+0x1e>
    5104:	08 95       	ret
    5106:	9f 3f       	cpi	r25, 0xFF	; 255
    5108:	30 f0       	brcs	.+12     	; 0x5116 <__ftoa_engine+0x38>
    510a:	80 38       	cpi	r24, 0x80	; 128
    510c:	71 05       	cpc	r23, r1
    510e:	61 05       	cpc	r22, r1
    5110:	09 f0       	breq	.+2      	; 0x5114 <__ftoa_engine+0x36>
    5112:	3c 5f       	subi	r19, 0xFC	; 252
    5114:	3c 5f       	subi	r19, 0xFC	; 252
    5116:	3d 93       	st	X+, r19
    5118:	91 30       	cpi	r25, 0x01	; 1
    511a:	08 f0       	brcs	.+2      	; 0x511e <__ftoa_engine+0x40>
    511c:	80 68       	ori	r24, 0x80	; 128
    511e:	91 1d       	adc	r25, r1
    5120:	df 93       	push	r29
    5122:	cf 93       	push	r28
    5124:	1f 93       	push	r17
    5126:	0f 93       	push	r16
    5128:	ff 92       	push	r15
    512a:	ef 92       	push	r14
    512c:	19 2f       	mov	r17, r25
    512e:	98 7f       	andi	r25, 0xF8	; 248
    5130:	96 95       	lsr	r25
    5132:	e9 2f       	mov	r30, r25
    5134:	96 95       	lsr	r25
    5136:	96 95       	lsr	r25
    5138:	e9 0f       	add	r30, r25
    513a:	ff 27       	eor	r31, r31
    513c:	e8 5f       	subi	r30, 0xF8	; 248
    513e:	fe 4f       	sbci	r31, 0xFE	; 254
    5140:	99 27       	eor	r25, r25
    5142:	33 27       	eor	r19, r19
    5144:	ee 24       	eor	r14, r14
    5146:	ff 24       	eor	r15, r15
    5148:	a7 01       	movw	r20, r14
    514a:	e7 01       	movw	r28, r14
    514c:	05 90       	lpm	r0, Z+
    514e:	08 94       	sec
    5150:	07 94       	ror	r0
    5152:	28 f4       	brcc	.+10     	; 0x515e <__ftoa_engine+0x80>
    5154:	36 0f       	add	r19, r22
    5156:	e7 1e       	adc	r14, r23
    5158:	f8 1e       	adc	r15, r24
    515a:	49 1f       	adc	r20, r25
    515c:	51 1d       	adc	r21, r1
    515e:	66 0f       	add	r22, r22
    5160:	77 1f       	adc	r23, r23
    5162:	88 1f       	adc	r24, r24
    5164:	99 1f       	adc	r25, r25
    5166:	06 94       	lsr	r0
    5168:	a1 f7       	brne	.-24     	; 0x5152 <__ftoa_engine+0x74>
    516a:	05 90       	lpm	r0, Z+
    516c:	07 94       	ror	r0
    516e:	28 f4       	brcc	.+10     	; 0x517a <__ftoa_engine+0x9c>
    5170:	e7 0e       	add	r14, r23
    5172:	f8 1e       	adc	r15, r24
    5174:	49 1f       	adc	r20, r25
    5176:	56 1f       	adc	r21, r22
    5178:	c1 1d       	adc	r28, r1
    517a:	77 0f       	add	r23, r23
    517c:	88 1f       	adc	r24, r24
    517e:	99 1f       	adc	r25, r25
    5180:	66 1f       	adc	r22, r22
    5182:	06 94       	lsr	r0
    5184:	a1 f7       	brne	.-24     	; 0x516e <__ftoa_engine+0x90>
    5186:	05 90       	lpm	r0, Z+
    5188:	07 94       	ror	r0
    518a:	28 f4       	brcc	.+10     	; 0x5196 <__ftoa_engine+0xb8>
    518c:	f8 0e       	add	r15, r24
    518e:	49 1f       	adc	r20, r25
    5190:	56 1f       	adc	r21, r22
    5192:	c7 1f       	adc	r28, r23
    5194:	d1 1d       	adc	r29, r1
    5196:	88 0f       	add	r24, r24
    5198:	99 1f       	adc	r25, r25
    519a:	66 1f       	adc	r22, r22
    519c:	77 1f       	adc	r23, r23
    519e:	06 94       	lsr	r0
    51a0:	a1 f7       	brne	.-24     	; 0x518a <__ftoa_engine+0xac>
    51a2:	05 90       	lpm	r0, Z+
    51a4:	07 94       	ror	r0
    51a6:	20 f4       	brcc	.+8      	; 0x51b0 <__ftoa_engine+0xd2>
    51a8:	49 0f       	add	r20, r25
    51aa:	56 1f       	adc	r21, r22
    51ac:	c7 1f       	adc	r28, r23
    51ae:	d8 1f       	adc	r29, r24
    51b0:	99 0f       	add	r25, r25
    51b2:	66 1f       	adc	r22, r22
    51b4:	77 1f       	adc	r23, r23
    51b6:	88 1f       	adc	r24, r24
    51b8:	06 94       	lsr	r0
    51ba:	a9 f7       	brne	.-22     	; 0x51a6 <__ftoa_engine+0xc8>
    51bc:	84 91       	lpm	r24, Z
    51be:	10 95       	com	r17
    51c0:	17 70       	andi	r17, 0x07	; 7
    51c2:	41 f0       	breq	.+16     	; 0x51d4 <__ftoa_engine+0xf6>
    51c4:	d6 95       	lsr	r29
    51c6:	c7 95       	ror	r28
    51c8:	57 95       	ror	r21
    51ca:	47 95       	ror	r20
    51cc:	f7 94       	ror	r15
    51ce:	e7 94       	ror	r14
    51d0:	1a 95       	dec	r17
    51d2:	c1 f7       	brne	.-16     	; 0x51c4 <__ftoa_engine+0xe6>
    51d4:	ee ea       	ldi	r30, 0xAE	; 174
    51d6:	f0 e0       	ldi	r31, 0x00	; 0
    51d8:	68 94       	set
    51da:	15 90       	lpm	r1, Z+
    51dc:	15 91       	lpm	r17, Z+
    51de:	35 91       	lpm	r19, Z+
    51e0:	65 91       	lpm	r22, Z+
    51e2:	95 91       	lpm	r25, Z+
    51e4:	05 90       	lpm	r0, Z+
    51e6:	7f e2       	ldi	r23, 0x2F	; 47
    51e8:	73 95       	inc	r23
    51ea:	e1 18       	sub	r14, r1
    51ec:	f1 0a       	sbc	r15, r17
    51ee:	43 0b       	sbc	r20, r19
    51f0:	56 0b       	sbc	r21, r22
    51f2:	c9 0b       	sbc	r28, r25
    51f4:	d0 09       	sbc	r29, r0
    51f6:	c0 f7       	brcc	.-16     	; 0x51e8 <__ftoa_engine+0x10a>
    51f8:	e1 0c       	add	r14, r1
    51fa:	f1 1e       	adc	r15, r17
    51fc:	43 1f       	adc	r20, r19
    51fe:	56 1f       	adc	r21, r22
    5200:	c9 1f       	adc	r28, r25
    5202:	d0 1d       	adc	r29, r0
    5204:	7e f4       	brtc	.+30     	; 0x5224 <__ftoa_engine+0x146>
    5206:	70 33       	cpi	r23, 0x30	; 48
    5208:	11 f4       	brne	.+4      	; 0x520e <__ftoa_engine+0x130>
    520a:	8a 95       	dec	r24
    520c:	e6 cf       	rjmp	.-52     	; 0x51da <__ftoa_engine+0xfc>
    520e:	e8 94       	clt
    5210:	01 50       	subi	r16, 0x01	; 1
    5212:	30 f0       	brcs	.+12     	; 0x5220 <__ftoa_engine+0x142>
    5214:	08 0f       	add	r16, r24
    5216:	0a f4       	brpl	.+2      	; 0x521a <__ftoa_engine+0x13c>
    5218:	00 27       	eor	r16, r16
    521a:	02 17       	cp	r16, r18
    521c:	08 f4       	brcc	.+2      	; 0x5220 <__ftoa_engine+0x142>
    521e:	20 2f       	mov	r18, r16
    5220:	23 95       	inc	r18
    5222:	02 2f       	mov	r16, r18
    5224:	7a 33       	cpi	r23, 0x3A	; 58
    5226:	28 f0       	brcs	.+10     	; 0x5232 <__ftoa_engine+0x154>
    5228:	79 e3       	ldi	r23, 0x39	; 57
    522a:	7d 93       	st	X+, r23
    522c:	2a 95       	dec	r18
    522e:	e9 f7       	brne	.-6      	; 0x522a <__ftoa_engine+0x14c>
    5230:	10 c0       	rjmp	.+32     	; 0x5252 <__ftoa_engine+0x174>
    5232:	7d 93       	st	X+, r23
    5234:	2a 95       	dec	r18
    5236:	89 f6       	brne	.-94     	; 0x51da <__ftoa_engine+0xfc>
    5238:	06 94       	lsr	r0
    523a:	97 95       	ror	r25
    523c:	67 95       	ror	r22
    523e:	37 95       	ror	r19
    5240:	17 95       	ror	r17
    5242:	17 94       	ror	r1
    5244:	e1 18       	sub	r14, r1
    5246:	f1 0a       	sbc	r15, r17
    5248:	43 0b       	sbc	r20, r19
    524a:	56 0b       	sbc	r21, r22
    524c:	c9 0b       	sbc	r28, r25
    524e:	d0 09       	sbc	r29, r0
    5250:	98 f0       	brcs	.+38     	; 0x5278 <__ftoa_engine+0x19a>
    5252:	23 95       	inc	r18
    5254:	7e 91       	ld	r23, -X
    5256:	73 95       	inc	r23
    5258:	7a 33       	cpi	r23, 0x3A	; 58
    525a:	08 f0       	brcs	.+2      	; 0x525e <__ftoa_engine+0x180>
    525c:	70 e3       	ldi	r23, 0x30	; 48
    525e:	7c 93       	st	X, r23
    5260:	20 13       	cpse	r18, r16
    5262:	b8 f7       	brcc	.-18     	; 0x5252 <__ftoa_engine+0x174>
    5264:	7e 91       	ld	r23, -X
    5266:	70 61       	ori	r23, 0x10	; 16
    5268:	7d 93       	st	X+, r23
    526a:	30 f0       	brcs	.+12     	; 0x5278 <__ftoa_engine+0x19a>
    526c:	83 95       	inc	r24
    526e:	71 e3       	ldi	r23, 0x31	; 49
    5270:	7d 93       	st	X+, r23
    5272:	70 e3       	ldi	r23, 0x30	; 48
    5274:	2a 95       	dec	r18
    5276:	e1 f7       	brne	.-8      	; 0x5270 <__ftoa_engine+0x192>
    5278:	11 24       	eor	r1, r1
    527a:	ef 90       	pop	r14
    527c:	ff 90       	pop	r15
    527e:	0f 91       	pop	r16
    5280:	1f 91       	pop	r17
    5282:	cf 91       	pop	r28
    5284:	df 91       	pop	r29
    5286:	99 27       	eor	r25, r25
    5288:	87 fd       	sbrc	r24, 7
    528a:	90 95       	com	r25
    528c:	08 95       	ret

0000528e <__prologue_saves__>:
    528e:	2f 92       	push	r2
    5290:	3f 92       	push	r3
    5292:	4f 92       	push	r4
    5294:	5f 92       	push	r5
    5296:	6f 92       	push	r6
    5298:	7f 92       	push	r7
    529a:	8f 92       	push	r8
    529c:	9f 92       	push	r9
    529e:	af 92       	push	r10
    52a0:	bf 92       	push	r11
    52a2:	cf 92       	push	r12
    52a4:	df 92       	push	r13
    52a6:	ef 92       	push	r14
    52a8:	ff 92       	push	r15
    52aa:	0f 93       	push	r16
    52ac:	1f 93       	push	r17
    52ae:	cf 93       	push	r28
    52b0:	df 93       	push	r29
    52b2:	cd b7       	in	r28, 0x3d	; 61
    52b4:	de b7       	in	r29, 0x3e	; 62
    52b6:	ca 1b       	sub	r28, r26
    52b8:	db 0b       	sbc	r29, r27
    52ba:	0f b6       	in	r0, 0x3f	; 63
    52bc:	f8 94       	cli
    52be:	de bf       	out	0x3e, r29	; 62
    52c0:	0f be       	out	0x3f, r0	; 63
    52c2:	cd bf       	out	0x3d, r28	; 61
    52c4:	09 94       	ijmp

000052c6 <__epilogue_restores__>:
    52c6:	2a 88       	ldd	r2, Y+18	; 0x12
    52c8:	39 88       	ldd	r3, Y+17	; 0x11
    52ca:	48 88       	ldd	r4, Y+16	; 0x10
    52cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    52ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    52d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    52d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    52d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    52d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    52d8:	b9 84       	ldd	r11, Y+9	; 0x09
    52da:	c8 84       	ldd	r12, Y+8	; 0x08
    52dc:	df 80       	ldd	r13, Y+7	; 0x07
    52de:	ee 80       	ldd	r14, Y+6	; 0x06
    52e0:	fd 80       	ldd	r15, Y+5	; 0x05
    52e2:	0c 81       	ldd	r16, Y+4	; 0x04
    52e4:	1b 81       	ldd	r17, Y+3	; 0x03
    52e6:	aa 81       	ldd	r26, Y+2	; 0x02
    52e8:	b9 81       	ldd	r27, Y+1	; 0x01
    52ea:	ce 0f       	add	r28, r30
    52ec:	d1 1d       	adc	r29, r1
    52ee:	0f b6       	in	r0, 0x3f	; 63
    52f0:	f8 94       	cli
    52f2:	de bf       	out	0x3e, r29	; 62
    52f4:	0f be       	out	0x3f, r0	; 63
    52f6:	cd bf       	out	0x3d, r28	; 61
    52f8:	ed 01       	movw	r28, r26
    52fa:	08 95       	ret

000052fc <_exit>:
    52fc:	f8 94       	cli

000052fe <__stop_program>:
    52fe:	ff cf       	rjmp	.-2      	; 0x52fe <__stop_program>
