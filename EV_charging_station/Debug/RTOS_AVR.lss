
RTOS_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000019a4  00001a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000644  0080007c  0080007c  00001a54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ab0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ef6  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000140a  00000000  00000000  00005dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002416  00000000  00000000  000071c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ac  00000000  00000000  000095dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000147f  00000000  00000000  00009f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031e3  00000000  00000000  0000b407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  0000e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	5d 07       	cpc	r21, r29
      56:	61 07       	cpc	r22, r17
      58:	63 07       	cpc	r22, r19
      5a:	65 07       	cpc	r22, r21
      5c:	69 07       	cpc	r22, r25
      5e:	6b 07       	cpc	r22, r27
      60:	6f 07       	cpc	r22, r31
      62:	73 07       	cpc	r23, r19

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ea       	ldi	r30, 0xA4	; 164
      78:	f9 e1       	ldi	r31, 0x19	; 25
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	26 e0       	ldi	r18, 0x06	; 6
      88:	ac e7       	ldi	r26, 0x7C	; 124
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a0 3c       	cpi	r26, 0xC0	; 192
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 05 08 	call	0x100a	; 0x100a <main>
      9a:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
      a8:	0e 94 98 03 	call	0x730	; 0x730 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
      ac:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
      b0:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
      b4:	89 2b       	or	r24, r25
      b6:	31 f4       	brne	.+12     	; 0xc4 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
      b8:	80 e8       	ldi	r24, 0x80	; 128
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <__data_end+0x1>
      c0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      c4:	20 97       	sbiw	r28, 0x00	; 0
      c6:	c9 f0       	breq	.+50     	; 0xfa <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      c8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <xNextFreeByte>
      cc:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <xNextFreeByte+0x1>
      d0:	9e 01       	movw	r18, r28
      d2:	28 0f       	add	r18, r24
      d4:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      d6:	2b 3d       	cpi	r18, 0xDB	; 219
      d8:	45 e0       	ldi	r20, 0x05	; 5
      da:	34 07       	cpc	r19, r20
      dc:	88 f4       	brcc	.+34     	; 0x100 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      de:	82 17       	cp	r24, r18
      e0:	93 07       	cpc	r25, r19
      e2:	88 f4       	brcc	.+34     	; 0x106 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
      e4:	c0 91 7c 00 	lds	r28, 0x007C	; 0x80007c <__data_end>
      e8:	d0 91 7d 00 	lds	r29, 0x007D	; 0x80007d <__data_end+0x1>
      ec:	c8 0f       	add	r28, r24
      ee:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
      f0:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <xNextFreeByte+0x1>
      f4:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <xNextFreeByte>
      f8:	08 c0       	rjmp	.+16     	; 0x10a <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
      fa:	c0 e0       	ldi	r28, 0x00	; 0
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	05 c0       	rjmp	.+10     	; 0x10a <pvPortMalloc+0x68>
     100:	c0 e0       	ldi	r28, 0x00	; 0
     102:	d0 e0       	ldi	r29, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <pvPortMalloc+0x68>
     106:	c0 e0       	ldi	r28, 0x00	; 0
     108:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     10a:	0e 94 bd 04 	call	0x97a	; 0x97a <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     10e:	ce 01       	movw	r24, r28
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	08 95       	ret

00000116 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     116:	08 95       	ret

00000118 <vListInitialise>:
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );

    traceRETURN_vListInsert();
}
     118:	fc 01       	movw	r30, r24
     11a:	03 96       	adiw	r24, 0x03	; 3
     11c:	92 83       	std	Z+2, r25	; 0x02
     11e:	81 83       	std	Z+1, r24	; 0x01
     120:	2f ef       	ldi	r18, 0xFF	; 255
     122:	3f ef       	ldi	r19, 0xFF	; 255
     124:	34 83       	std	Z+4, r19	; 0x04
     126:	23 83       	std	Z+3, r18	; 0x03
     128:	96 83       	std	Z+6, r25	; 0x06
     12a:	85 83       	std	Z+5, r24	; 0x05
     12c:	90 87       	std	Z+8, r25	; 0x08
     12e:	87 83       	std	Z+7, r24	; 0x07
     130:	10 82       	st	Z, r1
     132:	08 95       	ret

00000134 <vListInitialiseItem>:
     134:	fc 01       	movw	r30, r24
     136:	11 86       	std	Z+9, r1	; 0x09
     138:	10 86       	std	Z+8, r1	; 0x08
     13a:	08 95       	ret

0000013c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	fc 01       	movw	r30, r24
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     142:	a0 85       	ldd	r26, Z+8	; 0x08
     144:	b1 85       	ldd	r27, Z+9	; 0x09

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     146:	c2 81       	ldd	r28, Z+2	; 0x02
     148:	d3 81       	ldd	r29, Z+3	; 0x03
     14a:	84 81       	ldd	r24, Z+4	; 0x04
     14c:	95 81       	ldd	r25, Z+5	; 0x05
     14e:	9d 83       	std	Y+5, r25	; 0x05
     150:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     152:	c4 81       	ldd	r28, Z+4	; 0x04
     154:	d5 81       	ldd	r29, Z+5	; 0x05
     156:	82 81       	ldd	r24, Z+2	; 0x02
     158:	93 81       	ldd	r25, Z+3	; 0x03
     15a:	9b 83       	std	Y+3, r25	; 0x03
     15c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     15e:	11 96       	adiw	r26, 0x01	; 1
     160:	8d 91       	ld	r24, X+
     162:	9c 91       	ld	r25, X
     164:	12 97       	sbiw	r26, 0x02	; 2
     166:	e8 17       	cp	r30, r24
     168:	f9 07       	cpc	r31, r25
     16a:	31 f4       	brne	.+12     	; 0x178 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     16c:	84 81       	ldd	r24, Z+4	; 0x04
     16e:	95 81       	ldd	r25, Z+5	; 0x05
     170:	12 96       	adiw	r26, 0x02	; 2
     172:	9c 93       	st	X, r25
     174:	8e 93       	st	-X, r24
     176:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     178:	11 86       	std	Z+9, r1	; 0x09
     17a:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
     17c:	8c 91       	ld	r24, X
     17e:	81 50       	subi	r24, 0x01	; 1
     180:	8c 93       	st	X, r24

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <pxPortInitialiseStack>:
    return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     188:	31 e1       	ldi	r19, 0x11	; 17
     18a:	fc 01       	movw	r30, r24
     18c:	30 83       	st	Z, r19
     18e:	31 97       	sbiw	r30, 0x01	; 1
     190:	22 e2       	ldi	r18, 0x22	; 34
     192:	20 83       	st	Z, r18
     194:	31 97       	sbiw	r30, 0x01	; 1
     196:	a3 e3       	ldi	r26, 0x33	; 51
     198:	a0 83       	st	Z, r26
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	60 83       	st	Z, r22
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	70 83       	st	Z, r23
     1a2:	31 97       	sbiw	r30, 0x01	; 1
     1a4:	10 82       	st	Z, r1
     1a6:	31 97       	sbiw	r30, 0x01	; 1
     1a8:	60 e8       	ldi	r22, 0x80	; 128
     1aa:	60 83       	st	Z, r22
     1ac:	31 97       	sbiw	r30, 0x01	; 1
     1ae:	10 82       	st	Z, r1
     1b0:	31 97       	sbiw	r30, 0x01	; 1
     1b2:	62 e0       	ldi	r22, 0x02	; 2
     1b4:	60 83       	st	Z, r22
     1b6:	31 97       	sbiw	r30, 0x01	; 1
     1b8:	63 e0       	ldi	r22, 0x03	; 3
     1ba:	60 83       	st	Z, r22
     1bc:	31 97       	sbiw	r30, 0x01	; 1
     1be:	64 e0       	ldi	r22, 0x04	; 4
     1c0:	60 83       	st	Z, r22
     1c2:	31 97       	sbiw	r30, 0x01	; 1
     1c4:	65 e0       	ldi	r22, 0x05	; 5
     1c6:	60 83       	st	Z, r22
     1c8:	31 97       	sbiw	r30, 0x01	; 1
     1ca:	66 e0       	ldi	r22, 0x06	; 6
     1cc:	60 83       	st	Z, r22
     1ce:	31 97       	sbiw	r30, 0x01	; 1
     1d0:	67 e0       	ldi	r22, 0x07	; 7
     1d2:	60 83       	st	Z, r22
     1d4:	31 97       	sbiw	r30, 0x01	; 1
     1d6:	68 e0       	ldi	r22, 0x08	; 8
     1d8:	60 83       	st	Z, r22
     1da:	31 97       	sbiw	r30, 0x01	; 1
     1dc:	69 e0       	ldi	r22, 0x09	; 9
     1de:	60 83       	st	Z, r22
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	60 e1       	ldi	r22, 0x10	; 16
     1e4:	60 83       	st	Z, r22
     1e6:	31 97       	sbiw	r30, 0x01	; 1
     1e8:	30 83       	st	Z, r19
     1ea:	31 97       	sbiw	r30, 0x01	; 1
     1ec:	32 e1       	ldi	r19, 0x12	; 18
     1ee:	30 83       	st	Z, r19
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	33 e1       	ldi	r19, 0x13	; 19
     1f4:	30 83       	st	Z, r19
     1f6:	31 97       	sbiw	r30, 0x01	; 1
     1f8:	34 e1       	ldi	r19, 0x14	; 20
     1fa:	30 83       	st	Z, r19
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	35 e1       	ldi	r19, 0x15	; 21
     200:	30 83       	st	Z, r19
     202:	31 97       	sbiw	r30, 0x01	; 1
     204:	36 e1       	ldi	r19, 0x16	; 22
     206:	30 83       	st	Z, r19
     208:	31 97       	sbiw	r30, 0x01	; 1
     20a:	37 e1       	ldi	r19, 0x17	; 23
     20c:	30 83       	st	Z, r19
     20e:	31 97       	sbiw	r30, 0x01	; 1
     210:	38 e1       	ldi	r19, 0x18	; 24
     212:	30 83       	st	Z, r19
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	39 e1       	ldi	r19, 0x19	; 25
     218:	30 83       	st	Z, r19
     21a:	31 97       	sbiw	r30, 0x01	; 1
     21c:	30 e2       	ldi	r19, 0x20	; 32
     21e:	30 83       	st	Z, r19
     220:	31 97       	sbiw	r30, 0x01	; 1
     222:	31 e2       	ldi	r19, 0x21	; 33
     224:	30 83       	st	Z, r19
     226:	31 97       	sbiw	r30, 0x01	; 1
     228:	20 83       	st	Z, r18
     22a:	31 97       	sbiw	r30, 0x01	; 1
     22c:	23 e2       	ldi	r18, 0x23	; 35
     22e:	20 83       	st	Z, r18
     230:	31 97       	sbiw	r30, 0x01	; 1
     232:	40 83       	st	Z, r20
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	50 83       	st	Z, r21
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	26 e2       	ldi	r18, 0x26	; 38
     23c:	20 83       	st	Z, r18
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	27 e2       	ldi	r18, 0x27	; 39
     242:	20 83       	st	Z, r18
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	28 e2       	ldi	r18, 0x28	; 40
     248:	20 83       	st	Z, r18
     24a:	31 97       	sbiw	r30, 0x01	; 1
     24c:	29 e2       	ldi	r18, 0x29	; 41
     24e:	20 83       	st	Z, r18
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	20 e3       	ldi	r18, 0x30	; 48
     254:	20 83       	st	Z, r18
     256:	31 97       	sbiw	r30, 0x01	; 1
     258:	21 e3       	ldi	r18, 0x31	; 49
     25a:	20 83       	st	Z, r18
     25c:	86 97       	sbiw	r24, 0x26	; 38
     25e:	08 95       	ret

00000260 <xPortStartScheduler>:
     260:	1b bc       	out	0x2b, r1	; 43
     262:	8c e7       	ldi	r24, 0x7C	; 124
     264:	8a bd       	out	0x2a, r24	; 42
     266:	8b e0       	ldi	r24, 0x0B	; 11
     268:	8e bd       	out	0x2e, r24	; 46
     26a:	89 b7       	in	r24, 0x39	; 57
     26c:	80 61       	ori	r24, 0x10	; 16
     26e:	89 bf       	out	0x39, r24	; 57
     270:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     274:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     278:	cd 91       	ld	r28, X+
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	dd 91       	ld	r29, X+
     27e:	de bf       	out	0x3e, r29	; 62
     280:	ff 91       	pop	r31
     282:	ef 91       	pop	r30
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	bf 91       	pop	r27
     28a:	af 91       	pop	r26
     28c:	9f 91       	pop	r25
     28e:	8f 91       	pop	r24
     290:	7f 91       	pop	r23
     292:	6f 91       	pop	r22
     294:	5f 91       	pop	r21
     296:	4f 91       	pop	r20
     298:	3f 91       	pop	r19
     29a:	2f 91       	pop	r18
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	7f 90       	pop	r7
     2b2:	6f 90       	pop	r6
     2b4:	5f 90       	pop	r5
     2b6:	4f 90       	pop	r4
     2b8:	3f 90       	pop	r3
     2ba:	2f 90       	pop	r2
     2bc:	1f 90       	pop	r1
     2be:	0f 90       	pop	r0
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	0f 90       	pop	r0
     2c4:	08 95       	ret
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	08 95       	ret

000002ca <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	0f 92       	push	r0
     2d2:	1f 92       	push	r1
     2d4:	11 24       	eor	r1, r1
     2d6:	2f 92       	push	r2
     2d8:	3f 92       	push	r3
     2da:	4f 92       	push	r4
     2dc:	5f 92       	push	r5
     2de:	6f 92       	push	r6
     2e0:	7f 92       	push	r7
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	2f 93       	push	r18
     2f8:	3f 93       	push	r19
     2fa:	4f 93       	push	r20
     2fc:	5f 93       	push	r21
     2fe:	6f 93       	push	r22
     300:	7f 93       	push	r23
     302:	8f 93       	push	r24
     304:	9f 93       	push	r25
     306:	af 93       	push	r26
     308:	bf 93       	push	r27
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ef 93       	push	r30
     310:	ff 93       	push	r31
     312:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     316:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     31a:	0d b6       	in	r0, 0x3d	; 61
     31c:	0d 92       	st	X+, r0
     31e:	0e b6       	in	r0, 0x3e	; 62
     320:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     322:	0e 94 9f 05 	call	0xb3e	; 0xb3e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     326:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     32a:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     32e:	cd 91       	ld	r28, X+
     330:	cd bf       	out	0x3d, r28	; 61
     332:	dd 91       	ld	r29, X+
     334:	de bf       	out	0x3e, r29	; 62
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	bf 91       	pop	r27
     340:	af 91       	pop	r26
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	7f 91       	pop	r23
     348:	6f 91       	pop	r22
     34a:	5f 91       	pop	r21
     34c:	4f 91       	pop	r20
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	bf 90       	pop	r11
     360:	af 90       	pop	r10
     362:	9f 90       	pop	r9
     364:	8f 90       	pop	r8
     366:	7f 90       	pop	r7
     368:	6f 90       	pop	r6
     36a:	5f 90       	pop	r5
     36c:	4f 90       	pop	r4
     36e:	3f 90       	pop	r3
     370:	2f 90       	pop	r2
     372:	1f 90       	pop	r1
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0

    asm volatile ( "ret" );
     37a:	08 95       	ret

0000037c <prvResetNextTaskUnblockTime>:
    xYieldOccurred = xTaskResumeAll();

    traceRETURN_xTaskCatchUpTicks( xYieldOccurred );

    return xYieldOccurred;
}
     37c:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <pxDelayedTaskList>
     380:	f0 91 81 06 	lds	r31, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
     384:	80 81       	ld	r24, Z
     386:	81 11       	cpse	r24, r1
     388:	07 c0       	rjmp	.+14     	; 0x398 <prvResetNextTaskUnblockTime+0x1c>
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	9f ef       	ldi	r25, 0xFF	; 255
     38e:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <xNextTaskUnblockTime+0x1>
     392:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <xNextTaskUnblockTime>
     396:	08 95       	ret
     398:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <pxDelayedTaskList>
     39c:	f0 91 81 06 	lds	r31, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
     3a0:	05 80       	ldd	r0, Z+5	; 0x05
     3a2:	f6 81       	ldd	r31, Z+6	; 0x06
     3a4:	e0 2d       	mov	r30, r0
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <xNextTaskUnblockTime+0x1>
     3ae:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <xNextTaskUnblockTime>
     3b2:	08 95       	ret

000003b4 <prvCheckTasksWaitingTermination>:
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <uxDeletedTasksWaitingCleanUp>
     3c0:	88 23       	and	r24, r24
     3c2:	39 f1       	breq	.+78     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3c4:	0c e6       	ldi	r16, 0x6C	; 108
     3c6:	16 e0       	ldi	r17, 0x06	; 6
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	0f 92       	push	r0
     3ce:	d8 01       	movw	r26, r16
     3d0:	15 96       	adiw	r26, 0x05	; 5
     3d2:	ed 91       	ld	r30, X+
     3d4:	fc 91       	ld	r31, X
     3d6:	16 97       	sbiw	r26, 0x06	; 6
     3d8:	c6 81       	ldd	r28, Z+6	; 0x06
     3da:	d7 81       	ldd	r29, Z+7	; 0x07
     3dc:	ce 01       	movw	r24, r28
     3de:	02 96       	adiw	r24, 0x02	; 2
     3e0:	0e 94 9e 00 	call	0x13c	; 0x13c <uxListRemove>
     3e4:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxCurrentNumberOfTasks>
     3e8:	81 50       	subi	r24, 0x01	; 1
     3ea:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <uxCurrentNumberOfTasks>
     3ee:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <uxDeletedTasksWaitingCleanUp>
     3f2:	81 50       	subi	r24, 0x01	; 1
     3f4:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <uxDeletedTasksWaitingCleanUp>
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	8f 89       	ldd	r24, Y+23	; 0x17
     3fe:	98 8d       	ldd	r25, Y+24	; 0x18
     400:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>
     404:	ce 01       	movw	r24, r28
     406:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>
     40a:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <uxDeletedTasksWaitingCleanUp>
     40e:	81 11       	cpse	r24, r1
     410:	db cf       	rjmp	.-74     	; 0x3c8 <prvCheckTasksWaitingTermination+0x14>
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <prvIdleTask>:
     41c:	c4 e9       	ldi	r28, 0x94	; 148
     41e:	d6 e0       	ldi	r29, 0x06	; 6
     420:	0e 94 da 01 	call	0x3b4	; 0x3b4 <prvCheckTasksWaitingTermination>
     424:	88 81       	ld	r24, Y
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	d8 f3       	brcs	.-10     	; 0x420 <prvIdleTask+0x4>
     42a:	0e 94 65 01 	call	0x2ca	; 0x2ca <vPortYield>
     42e:	f8 cf       	rjmp	.-16     	; 0x420 <prvIdleTask+0x4>

00000430 <xTaskCreate>:
     430:	4f 92       	push	r4
     432:	5f 92       	push	r5
     434:	6f 92       	push	r6
     436:	7f 92       	push	r7
     438:	8f 92       	push	r8
     43a:	9f 92       	push	r9
     43c:	af 92       	push	r10
     43e:	bf 92       	push	r11
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	4c 01       	movw	r8, r24
     450:	6b 01       	movw	r12, r22
     452:	29 01       	movw	r4, r18
     454:	a4 2e       	mov	r10, r20
     456:	b1 2c       	mov	r11, r1
     458:	c5 01       	movw	r24, r10
     45a:	0e 94 51 00 	call	0xa2	; 0xa2 <pvPortMalloc>
     45e:	3c 01       	movw	r6, r24
     460:	89 2b       	or	r24, r25
     462:	09 f4       	brne	.+2      	; 0x466 <xTaskCreate+0x36>
     464:	f4 c0       	rjmp	.+488    	; 0x64e <xTaskCreate+0x21e>
     466:	86 e2       	ldi	r24, 0x26	; 38
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 51 00 	call	0xa2	; 0xa2 <pvPortMalloc>
     46e:	ec 01       	movw	r28, r24
     470:	89 2b       	or	r24, r25
     472:	81 f0       	breq	.+32     	; 0x494 <xTaskCreate+0x64>
     474:	86 e2       	ldi	r24, 0x26	; 38
     476:	de 01       	movw	r26, r28
     478:	1d 92       	st	X+, r1
     47a:	8a 95       	dec	r24
     47c:	e9 f7       	brne	.-6      	; 0x478 <xTaskCreate+0x48>
     47e:	78 8e       	std	Y+24, r7	; 0x18
     480:	6f 8a       	std	Y+23, r6	; 0x17
     482:	b1 e0       	ldi	r27, 0x01	; 1
     484:	ab 1a       	sub	r10, r27
     486:	b1 08       	sbc	r11, r1
     488:	a6 0c       	add	r10, r6
     48a:	b7 1c       	adc	r11, r7
     48c:	c1 14       	cp	r12, r1
     48e:	d1 04       	cpc	r13, r1
     490:	29 f4       	brne	.+10     	; 0x49c <xTaskCreate+0x6c>
     492:	1e c0       	rjmp	.+60     	; 0x4d0 <xTaskCreate+0xa0>
     494:	c3 01       	movw	r24, r6
     496:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>
     49a:	d9 c0       	rjmp	.+434    	; 0x64e <xTaskCreate+0x21e>
     49c:	f6 01       	movw	r30, r12
     49e:	80 81       	ld	r24, Z
     4a0:	89 8f       	std	Y+25, r24	; 0x19
     4a2:	80 81       	ld	r24, Z
     4a4:	88 23       	and	r24, r24
     4a6:	99 f0       	breq	.+38     	; 0x4ce <xTaskCreate+0x9e>
     4a8:	ae 01       	movw	r20, r28
     4aa:	46 5e       	subi	r20, 0xE6	; 230
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
     4ae:	31 96       	adiw	r30, 0x01	; 1
     4b0:	88 e0       	ldi	r24, 0x08	; 8
     4b2:	c8 0e       	add	r12, r24
     4b4:	d1 1c       	adc	r13, r1
     4b6:	cf 01       	movw	r24, r30
     4b8:	21 91       	ld	r18, Z+
     4ba:	da 01       	movw	r26, r20
     4bc:	2d 93       	st	X+, r18
     4be:	ad 01       	movw	r20, r26
     4c0:	dc 01       	movw	r26, r24
     4c2:	8c 91       	ld	r24, X
     4c4:	88 23       	and	r24, r24
     4c6:	19 f0       	breq	.+6      	; 0x4ce <xTaskCreate+0x9e>
     4c8:	ec 15       	cp	r30, r12
     4ca:	fd 05       	cpc	r31, r13
     4cc:	a1 f7       	brne	.-24     	; 0x4b6 <xTaskCreate+0x86>
     4ce:	18 a2       	std	Y+32, r1	; 0x20
     4d0:	04 30       	cpi	r16, 0x04	; 4
     4d2:	08 f0       	brcs	.+2      	; 0x4d6 <xTaskCreate+0xa6>
     4d4:	03 e0       	ldi	r16, 0x03	; 3
     4d6:	0e 8b       	std	Y+22, r16	; 0x16
     4d8:	6e 01       	movw	r12, r28
     4da:	b2 e0       	ldi	r27, 0x02	; 2
     4dc:	cb 0e       	add	r12, r27
     4de:	d1 1c       	adc	r13, r1
     4e0:	c6 01       	movw	r24, r12
     4e2:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialiseItem>
     4e6:	ce 01       	movw	r24, r28
     4e8:	0c 96       	adiw	r24, 0x0c	; 12
     4ea:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialiseItem>
     4ee:	d9 87       	std	Y+9, r29	; 0x09
     4f0:	c8 87       	std	Y+8, r28	; 0x08
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	80 1b       	sub	r24, r16
     4f8:	91 09       	sbc	r25, r1
     4fa:	9d 87       	std	Y+13, r25	; 0x0d
     4fc:	8c 87       	std	Y+12, r24	; 0x0c
     4fe:	db 8b       	std	Y+19, r29	; 0x13
     500:	ca 8b       	std	Y+18, r28	; 0x12
     502:	a2 01       	movw	r20, r4
     504:	b4 01       	movw	r22, r8
     506:	c5 01       	movw	r24, r10
     508:	0e 94 c4 00 	call	0x188	; 0x188 <pxPortInitialiseStack>
     50c:	99 83       	std	Y+1, r25	; 0x01
     50e:	88 83       	st	Y, r24
     510:	e1 14       	cp	r14, r1
     512:	f1 04       	cpc	r15, r1
     514:	09 f4       	brne	.+2      	; 0x518 <xTaskCreate+0xe8>
     516:	9d c0       	rjmp	.+314    	; 0x652 <xTaskCreate+0x222>
     518:	f7 01       	movw	r30, r14
     51a:	d1 83       	std	Z+1, r29	; 0x01
     51c:	c0 83       	st	Z, r28
     51e:	99 c0       	rjmp	.+306    	; 0x652 <xTaskCreate+0x222>
     520:	d0 93 b9 06 	sts	0x06B9, r29	; 0x8006b9 <pxCurrentTCB+0x1>
     524:	c0 93 b8 06 	sts	0x06B8, r28	; 0x8006b8 <pxCurrentTCB>
     528:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxCurrentNumberOfTasks>
     52c:	81 30       	cpi	r24, 0x01	; 1
     52e:	e9 f5       	brne	.+122    	; 0x5aa <xTaskCreate+0x17a>
     530:	84 e9       	ldi	r24, 0x94	; 148
     532:	96 e0       	ldi	r25, 0x06	; 6
     534:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
     538:	8d e9       	ldi	r24, 0x9D	; 157
     53a:	96 e0       	ldi	r25, 0x06	; 6
     53c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
     540:	86 ea       	ldi	r24, 0xA6	; 166
     542:	96 e0       	ldi	r25, 0x06	; 6
     544:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
     548:	8f ea       	ldi	r24, 0xAF	; 175
     54a:	96 e0       	ldi	r25, 0x06	; 6
     54c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
     550:	8b e8       	ldi	r24, 0x8B	; 139
     552:	96 e0       	ldi	r25, 0x06	; 6
     554:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
     558:	82 e8       	ldi	r24, 0x82	; 130
     55a:	96 e0       	ldi	r25, 0x06	; 6
     55c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
     560:	85 e7       	ldi	r24, 0x75	; 117
     562:	96 e0       	ldi	r25, 0x06	; 6
     564:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
     568:	8c e6       	ldi	r24, 0x6C	; 108
     56a:	96 e0       	ldi	r25, 0x06	; 6
     56c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
     570:	8b e8       	ldi	r24, 0x8B	; 139
     572:	96 e0       	ldi	r25, 0x06	; 6
     574:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <pxDelayedTaskList+0x1>
     578:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <pxDelayedTaskList>
     57c:	82 e8       	ldi	r24, 0x82	; 130
     57e:	96 e0       	ldi	r25, 0x06	; 6
     580:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <pxOverflowDelayedTaskList+0x1>
     584:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <pxOverflowDelayedTaskList>
     588:	10 c0       	rjmp	.+32     	; 0x5aa <xTaskCreate+0x17a>
     58a:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <xSchedulerRunning>
     58e:	81 11       	cpse	r24, r1
     590:	0c c0       	rjmp	.+24     	; 0x5aa <xTaskCreate+0x17a>
     592:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     596:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     59a:	96 89       	ldd	r25, Z+22	; 0x16
     59c:	8e 89       	ldd	r24, Y+22	; 0x16
     59e:	89 17       	cp	r24, r25
     5a0:	20 f0       	brcs	.+8      	; 0x5aa <xTaskCreate+0x17a>
     5a2:	d0 93 b9 06 	sts	0x06B9, r29	; 0x8006b9 <pxCurrentTCB+0x1>
     5a6:	c0 93 b8 06 	sts	0x06B8, r28	; 0x8006b8 <pxCurrentTCB>
     5aa:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <uxTaskNumber>
     5ae:	8f 5f       	subi	r24, 0xFF	; 255
     5b0:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <uxTaskNumber>
     5b4:	8e 89       	ldd	r24, Y+22	; 0x16
     5b6:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <uxTopReadyPriority>
     5ba:	98 17       	cp	r25, r24
     5bc:	10 f4       	brcc	.+4      	; 0x5c2 <xTaskCreate+0x192>
     5be:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxTopReadyPriority>
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	fc 01       	movw	r30, r24
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	ee 0f       	add	r30, r30
     5cc:	ff 1f       	adc	r31, r31
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	8e 0f       	add	r24, r30
     5d4:	9f 1f       	adc	r25, r31
     5d6:	fc 01       	movw	r30, r24
     5d8:	ec 56       	subi	r30, 0x6C	; 108
     5da:	f9 4f       	sbci	r31, 0xF9	; 249
     5dc:	01 80       	ldd	r0, Z+1	; 0x01
     5de:	f2 81       	ldd	r31, Z+2	; 0x02
     5e0:	e0 2d       	mov	r30, r0
     5e2:	fd 83       	std	Y+5, r31	; 0x05
     5e4:	ec 83       	std	Y+4, r30	; 0x04
     5e6:	84 81       	ldd	r24, Z+4	; 0x04
     5e8:	95 81       	ldd	r25, Z+5	; 0x05
     5ea:	9f 83       	std	Y+7, r25	; 0x07
     5ec:	8e 83       	std	Y+6, r24	; 0x06
     5ee:	a4 81       	ldd	r26, Z+4	; 0x04
     5f0:	b5 81       	ldd	r27, Z+5	; 0x05
     5f2:	13 96       	adiw	r26, 0x03	; 3
     5f4:	dc 92       	st	X, r13
     5f6:	ce 92       	st	-X, r12
     5f8:	12 97       	sbiw	r26, 0x02	; 2
     5fa:	d5 82       	std	Z+5, r13	; 0x05
     5fc:	c4 82       	std	Z+4, r12	; 0x04
     5fe:	ee 89       	ldd	r30, Y+22	; 0x16
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	cf 01       	movw	r24, r30
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	e8 0f       	add	r30, r24
     612:	f9 1f       	adc	r31, r25
     614:	ec 56       	subi	r30, 0x6C	; 108
     616:	f9 4f       	sbci	r31, 0xF9	; 249
     618:	fb 87       	std	Y+11, r31	; 0x0b
     61a:	ea 87       	std	Y+10, r30	; 0x0a
     61c:	80 81       	ld	r24, Z
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	80 83       	st	Z, r24
     622:	0f 90       	pop	r0
     624:	0f be       	out	0x3f, r0	; 63
     626:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <xSchedulerRunning>
     62a:	88 23       	and	r24, r24
     62c:	61 f0       	breq	.+24     	; 0x646 <xTaskCreate+0x216>
     62e:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     632:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     636:	96 89       	ldd	r25, Z+22	; 0x16
     638:	8e 89       	ldd	r24, Y+22	; 0x16
     63a:	98 17       	cp	r25, r24
     63c:	30 f4       	brcc	.+12     	; 0x64a <xTaskCreate+0x21a>
     63e:	0e 94 65 01 	call	0x2ca	; 0x2ca <vPortYield>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	16 c0       	rjmp	.+44     	; 0x672 <xTaskCreate+0x242>
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	14 c0       	rjmp	.+40     	; 0x672 <xTaskCreate+0x242>
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	12 c0       	rjmp	.+36     	; 0x672 <xTaskCreate+0x242>
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	10 c0       	rjmp	.+32     	; 0x672 <xTaskCreate+0x242>
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	0f 92       	push	r0
     658:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxCurrentNumberOfTasks>
     65c:	8f 5f       	subi	r24, 0xFF	; 255
     65e:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <uxCurrentNumberOfTasks>
     662:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     666:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     66a:	89 2b       	or	r24, r25
     66c:	09 f0       	breq	.+2      	; 0x670 <xTaskCreate+0x240>
     66e:	8d cf       	rjmp	.-230    	; 0x58a <xTaskCreate+0x15a>
     670:	57 cf       	rjmp	.-338    	; 0x520 <xTaskCreate+0xf0>
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	bf 90       	pop	r11
     682:	af 90       	pop	r10
     684:	9f 90       	pop	r9
     686:	8f 90       	pop	r8
     688:	7f 90       	pop	r7
     68a:	6f 90       	pop	r6
     68c:	5f 90       	pop	r5
     68e:	4f 90       	pop	r4
     690:	08 95       	ret

00000692 <vTaskStartScheduler>:
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	28 97       	sbiw	r28, 0x08	; 8
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	89 e4       	ldi	r24, 0x49	; 73
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	ee e6       	ldi	r30, 0x6E	; 110
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	de 01       	movw	r26, r28
     6b6:	12 96       	adiw	r26, 0x02	; 2
     6b8:	25 e7       	ldi	r18, 0x75	; 117
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	81 91       	ld	r24, Z+
     6be:	8d 93       	st	X+, r24
     6c0:	88 23       	and	r24, r24
     6c2:	19 f0       	breq	.+6      	; 0x6ca <vTaskStartScheduler+0x38>
     6c4:	e2 17       	cp	r30, r18
     6c6:	f3 07       	cpc	r31, r19
     6c8:	c9 f7       	brne	.-14     	; 0x6bc <vTaskStartScheduler+0x2a>
     6ca:	0f 2e       	mov	r0, r31
     6cc:	fd e5       	ldi	r31, 0x5D	; 93
     6ce:	ef 2e       	mov	r14, r31
     6d0:	f6 e0       	ldi	r31, 0x06	; 6
     6d2:	ff 2e       	mov	r15, r31
     6d4:	f0 2d       	mov	r31, r0
     6d6:	00 e0       	ldi	r16, 0x00	; 0
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	45 e5       	ldi	r20, 0x55	; 85
     6de:	be 01       	movw	r22, r28
     6e0:	6f 5f       	subi	r22, 0xFF	; 255
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	8e e0       	ldi	r24, 0x0E	; 14
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	0e 94 18 02 	call	0x430	; 0x430 <xTaskCreate>
     6ec:	88 23       	and	r24, r24
     6ee:	91 f0       	breq	.+36     	; 0x714 <vTaskStartScheduler+0x82>
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	81 f4       	brne	.+32     	; 0x714 <vTaskStartScheduler+0x82>
     6f4:	f8 94       	cli
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	9f ef       	ldi	r25, 0xFF	; 255
     6fa:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <xNextTaskUnblockTime+0x1>
     6fe:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <xNextTaskUnblockTime>
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <xSchedulerRunning>
     708:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <xTickCount+0x1>
     70c:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <xTickCount>
     710:	0e 94 30 01 	call	0x260	; 0x260 <xPortStartScheduler>
     714:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     718:	28 96       	adiw	r28, 0x08	; 8
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	08 95       	ret

00000730 <vTaskSuspendAll>:
     730:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
     734:	8f 5f       	subi	r24, 0xFF	; 255
     736:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <uxSchedulerSuspended>
     73a:	08 95       	ret

0000073c <xTaskIncrementTick>:
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
     74c:	81 11       	cpse	r24, r1
     74e:	04 c1       	rjmp	.+520    	; 0x958 <__stack+0xf9>
     750:	c0 91 68 06 	lds	r28, 0x0668	; 0x800668 <xTickCount>
     754:	d0 91 69 06 	lds	r29, 0x0669	; 0x800669 <xTickCount+0x1>
     758:	7e 01       	movw	r14, r28
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	e8 1a       	sub	r14, r24
     75e:	f8 0a       	sbc	r15, r24
     760:	f0 92 69 06 	sts	0x0669, r15	; 0x800669 <xTickCount+0x1>
     764:	e0 92 68 06 	sts	0x0668, r14	; 0x800668 <xTickCount>
     768:	e1 14       	cp	r14, r1
     76a:	f1 04       	cpc	r15, r1
     76c:	b9 f4       	brne	.+46     	; 0x79c <xTaskIncrementTick+0x60>
     76e:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <pxDelayedTaskList>
     772:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
     776:	20 91 7e 06 	lds	r18, 0x067E	; 0x80067e <pxOverflowDelayedTaskList>
     77a:	30 91 7f 06 	lds	r19, 0x067F	; 0x80067f <pxOverflowDelayedTaskList+0x1>
     77e:	30 93 81 06 	sts	0x0681, r19	; 0x800681 <pxDelayedTaskList+0x1>
     782:	20 93 80 06 	sts	0x0680, r18	; 0x800680 <pxDelayedTaskList>
     786:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <pxOverflowDelayedTaskList+0x1>
     78a:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <pxOverflowDelayedTaskList>
     78e:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <xNumOfOverflows>
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <xNumOfOverflows>
     798:	0e 94 be 01 	call	0x37c	; 0x37c <prvResetNextTaskUnblockTime>
     79c:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <xNextTaskUnblockTime>
     7a0:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <xNextTaskUnblockTime+0x1>
     7a4:	e8 16       	cp	r14, r24
     7a6:	f9 06       	cpc	r15, r25
     7a8:	10 f4       	brcc	.+4      	; 0x7ae <xTaskIncrementTick+0x72>
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	b9 c0       	rjmp	.+370    	; 0x920 <__stack+0xc1>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <pxDelayedTaskList>
     7b6:	f0 91 81 06 	lds	r31, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
     7ba:	90 81       	ld	r25, Z
     7bc:	91 11       	cpse	r25, r1
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <xTaskIncrementTick+0x92>
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	3f ef       	ldi	r19, 0xFF	; 255
     7c4:	30 93 60 06 	sts	0x0660, r19	; 0x800660 <xNextTaskUnblockTime+0x1>
     7c8:	20 93 5f 06 	sts	0x065F, r18	; 0x80065f <xNextTaskUnblockTime>
     7cc:	a9 c0       	rjmp	.+338    	; 0x920 <__stack+0xc1>
     7ce:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <pxDelayedTaskList>
     7d2:	f0 91 81 06 	lds	r31, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
     7d6:	05 80       	ldd	r0, Z+5	; 0x05
     7d8:	f6 81       	ldd	r31, Z+6	; 0x06
     7da:	e0 2d       	mov	r30, r0
     7dc:	06 80       	ldd	r0, Z+6	; 0x06
     7de:	f7 81       	ldd	r31, Z+7	; 0x07
     7e0:	e0 2d       	mov	r30, r0
     7e2:	22 81       	ldd	r18, Z+2	; 0x02
     7e4:	33 81       	ldd	r19, Z+3	; 0x03
     7e6:	e2 16       	cp	r14, r18
     7e8:	f3 06       	cpc	r15, r19
     7ea:	28 f4       	brcc	.+10     	; 0x7f6 <xTaskIncrementTick+0xba>
     7ec:	30 93 60 06 	sts	0x0660, r19	; 0x800660 <xNextTaskUnblockTime+0x1>
     7f0:	20 93 5f 06 	sts	0x065F, r18	; 0x80065f <xNextTaskUnblockTime>
     7f4:	95 c0       	rjmp	.+298    	; 0x920 <__stack+0xc1>
     7f6:	a2 85       	ldd	r26, Z+10	; 0x0a
     7f8:	b3 85       	ldd	r27, Z+11	; 0x0b
     7fa:	24 81       	ldd	r18, Z+4	; 0x04
     7fc:	35 81       	ldd	r19, Z+5	; 0x05
     7fe:	46 81       	ldd	r20, Z+6	; 0x06
     800:	57 81       	ldd	r21, Z+7	; 0x07
     802:	e9 01       	movw	r28, r18
     804:	5d 83       	std	Y+5, r21	; 0x05
     806:	4c 83       	std	Y+4, r20	; 0x04
     808:	26 81       	ldd	r18, Z+6	; 0x06
     80a:	37 81       	ldd	r19, Z+7	; 0x07
     80c:	44 81       	ldd	r20, Z+4	; 0x04
     80e:	55 81       	ldd	r21, Z+5	; 0x05
     810:	e9 01       	movw	r28, r18
     812:	5b 83       	std	Y+3, r21	; 0x03
     814:	4a 83       	std	Y+2, r20	; 0x02
     816:	af 01       	movw	r20, r30
     818:	4e 5f       	subi	r20, 0xFE	; 254
     81a:	5f 4f       	sbci	r21, 0xFF	; 255
     81c:	11 96       	adiw	r26, 0x01	; 1
     81e:	2d 91       	ld	r18, X+
     820:	3c 91       	ld	r19, X
     822:	12 97       	sbiw	r26, 0x02	; 2
     824:	24 17       	cp	r18, r20
     826:	35 07       	cpc	r19, r21
     828:	31 f4       	brne	.+12     	; 0x836 <xTaskIncrementTick+0xfa>
     82a:	26 81       	ldd	r18, Z+6	; 0x06
     82c:	37 81       	ldd	r19, Z+7	; 0x07
     82e:	12 96       	adiw	r26, 0x02	; 2
     830:	3c 93       	st	X, r19
     832:	2e 93       	st	-X, r18
     834:	11 97       	sbiw	r26, 0x01	; 1
     836:	13 86       	std	Z+11, r1	; 0x0b
     838:	12 86       	std	Z+10, r1	; 0x0a
     83a:	9c 91       	ld	r25, X
     83c:	91 50       	subi	r25, 0x01	; 1
     83e:	9c 93       	st	X, r25
     840:	a4 89       	ldd	r26, Z+20	; 0x14
     842:	b5 89       	ldd	r27, Z+21	; 0x15
     844:	10 97       	sbiw	r26, 0x00	; 0
     846:	19 f1       	breq	.+70     	; 0x88e <__stack+0x2f>
     848:	26 85       	ldd	r18, Z+14	; 0x0e
     84a:	37 85       	ldd	r19, Z+15	; 0x0f
     84c:	00 89       	ldd	r16, Z+16	; 0x10
     84e:	11 89       	ldd	r17, Z+17	; 0x11
     850:	e9 01       	movw	r28, r18
     852:	1d 83       	std	Y+5, r17	; 0x05
     854:	0c 83       	std	Y+4, r16	; 0x04
     856:	20 89       	ldd	r18, Z+16	; 0x10
     858:	31 89       	ldd	r19, Z+17	; 0x11
     85a:	06 85       	ldd	r16, Z+14	; 0x0e
     85c:	17 85       	ldd	r17, Z+15	; 0x0f
     85e:	e9 01       	movw	r28, r18
     860:	1b 83       	std	Y+3, r17	; 0x03
     862:	0a 83       	std	Y+2, r16	; 0x02
     864:	11 96       	adiw	r26, 0x01	; 1
     866:	0d 91       	ld	r16, X+
     868:	1c 91       	ld	r17, X
     86a:	12 97       	sbiw	r26, 0x02	; 2
     86c:	9f 01       	movw	r18, r30
     86e:	24 5f       	subi	r18, 0xF4	; 244
     870:	3f 4f       	sbci	r19, 0xFF	; 255
     872:	02 17       	cp	r16, r18
     874:	13 07       	cpc	r17, r19
     876:	31 f4       	brne	.+12     	; 0x884 <__stack+0x25>
     878:	20 89       	ldd	r18, Z+16	; 0x10
     87a:	31 89       	ldd	r19, Z+17	; 0x11
     87c:	12 96       	adiw	r26, 0x02	; 2
     87e:	3c 93       	st	X, r19
     880:	2e 93       	st	-X, r18
     882:	11 97       	sbiw	r26, 0x01	; 1
     884:	15 8a       	std	Z+21, r1	; 0x15
     886:	14 8a       	std	Z+20, r1	; 0x14
     888:	9c 91       	ld	r25, X
     88a:	91 50       	subi	r25, 0x01	; 1
     88c:	9c 93       	st	X, r25
     88e:	26 89       	ldd	r18, Z+22	; 0x16
     890:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <uxTopReadyPriority>
     894:	92 17       	cp	r25, r18
     896:	10 f4       	brcc	.+4      	; 0x89c <__stack+0x3d>
     898:	20 93 67 06 	sts	0x0667, r18	; 0x800667 <uxTopReadyPriority>
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	d9 01       	movw	r26, r18
     8a0:	aa 0f       	add	r26, r26
     8a2:	bb 1f       	adc	r27, r27
     8a4:	aa 0f       	add	r26, r26
     8a6:	bb 1f       	adc	r27, r27
     8a8:	aa 0f       	add	r26, r26
     8aa:	bb 1f       	adc	r27, r27
     8ac:	2a 0f       	add	r18, r26
     8ae:	3b 1f       	adc	r19, r27
     8b0:	d9 01       	movw	r26, r18
     8b2:	ac 56       	subi	r26, 0x6C	; 108
     8b4:	b9 4f       	sbci	r27, 0xF9	; 249
     8b6:	11 96       	adiw	r26, 0x01	; 1
     8b8:	0d 90       	ld	r0, X+
     8ba:	bc 91       	ld	r27, X
     8bc:	a0 2d       	mov	r26, r0
     8be:	b5 83       	std	Z+5, r27	; 0x05
     8c0:	a4 83       	std	Z+4, r26	; 0x04
     8c2:	14 96       	adiw	r26, 0x04	; 4
     8c4:	2d 91       	ld	r18, X+
     8c6:	3c 91       	ld	r19, X
     8c8:	15 97       	sbiw	r26, 0x05	; 5
     8ca:	37 83       	std	Z+7, r19	; 0x07
     8cc:	26 83       	std	Z+6, r18	; 0x06
     8ce:	14 96       	adiw	r26, 0x04	; 4
     8d0:	2d 91       	ld	r18, X+
     8d2:	3c 91       	ld	r19, X
     8d4:	15 97       	sbiw	r26, 0x05	; 5
     8d6:	e9 01       	movw	r28, r18
     8d8:	5b 83       	std	Y+3, r21	; 0x03
     8da:	4a 83       	std	Y+2, r20	; 0x02
     8dc:	15 96       	adiw	r26, 0x05	; 5
     8de:	5c 93       	st	X, r21
     8e0:	4e 93       	st	-X, r20
     8e2:	14 97       	sbiw	r26, 0x04	; 4
     8e4:	a6 89       	ldd	r26, Z+22	; 0x16
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	9d 01       	movw	r18, r26
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	22 0f       	add	r18, r18
     8f0:	33 1f       	adc	r19, r19
     8f2:	22 0f       	add	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	a2 0f       	add	r26, r18
     8f8:	b3 1f       	adc	r27, r19
     8fa:	ac 56       	subi	r26, 0x6C	; 108
     8fc:	b9 4f       	sbci	r27, 0xF9	; 249
     8fe:	b3 87       	std	Z+11, r27	; 0x0b
     900:	a2 87       	std	Z+10, r26	; 0x0a
     902:	9c 91       	ld	r25, X
     904:	9f 5f       	subi	r25, 0xFF	; 255
     906:	9c 93       	st	X, r25
     908:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     90c:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     910:	26 89       	ldd	r18, Z+22	; 0x16
     912:	56 96       	adiw	r26, 0x16	; 22
     914:	9c 91       	ld	r25, X
     916:	92 17       	cp	r25, r18
     918:	08 f0       	brcs	.+2      	; 0x91c <__stack+0xbd>
     91a:	4b cf       	rjmp	.-362    	; 0x7b2 <xTaskIncrementTick+0x76>
     91c:	86 2f       	mov	r24, r22
     91e:	49 cf       	rjmp	.-366    	; 0x7b2 <xTaskIncrementTick+0x76>
     920:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     924:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     928:	26 89       	ldd	r18, Z+22	; 0x16
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	2e 0f       	add	r18, r30
     93c:	3f 1f       	adc	r19, r31
     93e:	f9 01       	movw	r30, r18
     940:	ec 56       	subi	r30, 0x6C	; 108
     942:	f9 4f       	sbci	r31, 0xF9	; 249
     944:	90 81       	ld	r25, Z
     946:	92 30       	cpi	r25, 0x02	; 2
     948:	08 f0       	brcs	.+2      	; 0x94c <__stack+0xed>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 91 63 06 	lds	r25, 0x0663	; 0x800663 <xYieldPendings>
     950:	99 23       	and	r25, r25
     952:	61 f0       	breq	.+24     	; 0x96c <__stack+0x10d>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0a c0       	rjmp	.+20     	; 0x96c <__stack+0x10d>
     958:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <xPendedTicks>
     95c:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <xPendedTicks+0x1>
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <xPendedTicks+0x1>
     966:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <xPendedTicks>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <xTaskResumeAll>:
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	0f 92       	push	r0
     986:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
     98a:	81 50       	subi	r24, 0x01	; 1
     98c:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <uxSchedulerSuspended>
     990:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
     994:	81 11       	cpse	r24, r1
     996:	ca c0       	rjmp	.+404    	; 0xb2c <xTaskResumeAll+0x1b2>
     998:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxCurrentNumberOfTasks>
     99c:	81 11       	cpse	r24, r1
     99e:	9b c0       	rjmp	.+310    	; 0xad6 <xTaskResumeAll+0x15c>
     9a0:	c8 c0       	rjmp	.+400    	; 0xb32 <xTaskResumeAll+0x1b8>
     9a2:	db 01       	movw	r26, r22
     9a4:	15 96       	adiw	r26, 0x05	; 5
     9a6:	ed 91       	ld	r30, X+
     9a8:	fc 91       	ld	r31, X
     9aa:	16 97       	sbiw	r26, 0x06	; 6
     9ac:	06 80       	ldd	r0, Z+6	; 0x06
     9ae:	f7 81       	ldd	r31, Z+7	; 0x07
     9b0:	e0 2d       	mov	r30, r0
     9b2:	a4 89       	ldd	r26, Z+20	; 0x14
     9b4:	b5 89       	ldd	r27, Z+21	; 0x15
     9b6:	86 85       	ldd	r24, Z+14	; 0x0e
     9b8:	97 85       	ldd	r25, Z+15	; 0x0f
     9ba:	20 89       	ldd	r18, Z+16	; 0x10
     9bc:	31 89       	ldd	r19, Z+17	; 0x11
     9be:	ec 01       	movw	r28, r24
     9c0:	3d 83       	std	Y+5, r19	; 0x05
     9c2:	2c 83       	std	Y+4, r18	; 0x04
     9c4:	80 89       	ldd	r24, Z+16	; 0x10
     9c6:	91 89       	ldd	r25, Z+17	; 0x11
     9c8:	26 85       	ldd	r18, Z+14	; 0x0e
     9ca:	37 85       	ldd	r19, Z+15	; 0x0f
     9cc:	ec 01       	movw	r28, r24
     9ce:	3b 83       	std	Y+3, r19	; 0x03
     9d0:	2a 83       	std	Y+2, r18	; 0x02
     9d2:	cf 01       	movw	r24, r30
     9d4:	0c 96       	adiw	r24, 0x0c	; 12
     9d6:	11 96       	adiw	r26, 0x01	; 1
     9d8:	2d 91       	ld	r18, X+
     9da:	3c 91       	ld	r19, X
     9dc:	12 97       	sbiw	r26, 0x02	; 2
     9de:	28 17       	cp	r18, r24
     9e0:	39 07       	cpc	r19, r25
     9e2:	31 f4       	brne	.+12     	; 0x9f0 <xTaskResumeAll+0x76>
     9e4:	80 89       	ldd	r24, Z+16	; 0x10
     9e6:	91 89       	ldd	r25, Z+17	; 0x11
     9e8:	12 96       	adiw	r26, 0x02	; 2
     9ea:	9c 93       	st	X, r25
     9ec:	8e 93       	st	-X, r24
     9ee:	11 97       	sbiw	r26, 0x01	; 1
     9f0:	15 8a       	std	Z+21, r1	; 0x15
     9f2:	14 8a       	std	Z+20, r1	; 0x14
     9f4:	8c 91       	ld	r24, X
     9f6:	81 50       	subi	r24, 0x01	; 1
     9f8:	8c 93       	st	X, r24
     9fa:	a2 85       	ldd	r26, Z+10	; 0x0a
     9fc:	b3 85       	ldd	r27, Z+11	; 0x0b
     9fe:	84 81       	ldd	r24, Z+4	; 0x04
     a00:	95 81       	ldd	r25, Z+5	; 0x05
     a02:	26 81       	ldd	r18, Z+6	; 0x06
     a04:	37 81       	ldd	r19, Z+7	; 0x07
     a06:	ec 01       	movw	r28, r24
     a08:	3d 83       	std	Y+5, r19	; 0x05
     a0a:	2c 83       	std	Y+4, r18	; 0x04
     a0c:	86 81       	ldd	r24, Z+6	; 0x06
     a0e:	97 81       	ldd	r25, Z+7	; 0x07
     a10:	24 81       	ldd	r18, Z+4	; 0x04
     a12:	35 81       	ldd	r19, Z+5	; 0x05
     a14:	ec 01       	movw	r28, r24
     a16:	3b 83       	std	Y+3, r19	; 0x03
     a18:	2a 83       	std	Y+2, r18	; 0x02
     a1a:	9f 01       	movw	r18, r30
     a1c:	2e 5f       	subi	r18, 0xFE	; 254
     a1e:	3f 4f       	sbci	r19, 0xFF	; 255
     a20:	11 96       	adiw	r26, 0x01	; 1
     a22:	8d 91       	ld	r24, X+
     a24:	9c 91       	ld	r25, X
     a26:	12 97       	sbiw	r26, 0x02	; 2
     a28:	82 17       	cp	r24, r18
     a2a:	93 07       	cpc	r25, r19
     a2c:	31 f4       	brne	.+12     	; 0xa3a <xTaskResumeAll+0xc0>
     a2e:	86 81       	ldd	r24, Z+6	; 0x06
     a30:	97 81       	ldd	r25, Z+7	; 0x07
     a32:	12 96       	adiw	r26, 0x02	; 2
     a34:	9c 93       	st	X, r25
     a36:	8e 93       	st	-X, r24
     a38:	11 97       	sbiw	r26, 0x01	; 1
     a3a:	13 86       	std	Z+11, r1	; 0x0b
     a3c:	12 86       	std	Z+10, r1	; 0x0a
     a3e:	8c 91       	ld	r24, X
     a40:	81 50       	subi	r24, 0x01	; 1
     a42:	8c 93       	st	X, r24
     a44:	86 89       	ldd	r24, Z+22	; 0x16
     a46:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <uxTopReadyPriority>
     a4a:	98 17       	cp	r25, r24
     a4c:	10 f4       	brcc	.+4      	; 0xa52 <xTaskResumeAll+0xd8>
     a4e:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxTopReadyPriority>
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	dc 01       	movw	r26, r24
     a56:	aa 0f       	add	r26, r26
     a58:	bb 1f       	adc	r27, r27
     a5a:	aa 0f       	add	r26, r26
     a5c:	bb 1f       	adc	r27, r27
     a5e:	aa 0f       	add	r26, r26
     a60:	bb 1f       	adc	r27, r27
     a62:	8a 0f       	add	r24, r26
     a64:	9b 1f       	adc	r25, r27
     a66:	dc 01       	movw	r26, r24
     a68:	ac 56       	subi	r26, 0x6C	; 108
     a6a:	b9 4f       	sbci	r27, 0xF9	; 249
     a6c:	11 96       	adiw	r26, 0x01	; 1
     a6e:	0d 90       	ld	r0, X+
     a70:	bc 91       	ld	r27, X
     a72:	a0 2d       	mov	r26, r0
     a74:	b5 83       	std	Z+5, r27	; 0x05
     a76:	a4 83       	std	Z+4, r26	; 0x04
     a78:	14 96       	adiw	r26, 0x04	; 4
     a7a:	8d 91       	ld	r24, X+
     a7c:	9c 91       	ld	r25, X
     a7e:	15 97       	sbiw	r26, 0x05	; 5
     a80:	97 83       	std	Z+7, r25	; 0x07
     a82:	86 83       	std	Z+6, r24	; 0x06
     a84:	14 96       	adiw	r26, 0x04	; 4
     a86:	8d 91       	ld	r24, X+
     a88:	9c 91       	ld	r25, X
     a8a:	15 97       	sbiw	r26, 0x05	; 5
     a8c:	ec 01       	movw	r28, r24
     a8e:	3b 83       	std	Y+3, r19	; 0x03
     a90:	2a 83       	std	Y+2, r18	; 0x02
     a92:	15 96       	adiw	r26, 0x05	; 5
     a94:	3c 93       	st	X, r19
     a96:	2e 93       	st	-X, r18
     a98:	14 97       	sbiw	r26, 0x04	; 4
     a9a:	a6 89       	ldd	r26, Z+22	; 0x16
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	cd 01       	movw	r24, r26
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	88 0f       	add	r24, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	a8 0f       	add	r26, r24
     aae:	b9 1f       	adc	r27, r25
     ab0:	ac 56       	subi	r26, 0x6C	; 108
     ab2:	b9 4f       	sbci	r27, 0xF9	; 249
     ab4:	b3 87       	std	Z+11, r27	; 0x0b
     ab6:	a2 87       	std	Z+10, r26	; 0x0a
     ab8:	8c 91       	ld	r24, X
     aba:	8f 5f       	subi	r24, 0xFF	; 255
     abc:	8c 93       	st	X, r24
     abe:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     ac2:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     ac6:	96 89       	ldd	r25, Z+22	; 0x16
     ac8:	56 96       	adiw	r26, 0x16	; 22
     aca:	8c 91       	ld	r24, X
     acc:	89 17       	cp	r24, r25
     ace:	40 f4       	brcc	.+16     	; 0xae0 <xTaskResumeAll+0x166>
     ad0:	40 93 63 06 	sts	0x0663, r20	; 0x800663 <xYieldPendings>
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <xTaskResumeAll+0x166>
     ad6:	e0 e0       	ldi	r30, 0x00	; 0
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	65 e7       	ldi	r22, 0x75	; 117
     adc:	76 e0       	ldi	r23, 0x06	; 6
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	db 01       	movw	r26, r22
     ae2:	8c 91       	ld	r24, X
     ae4:	81 11       	cpse	r24, r1
     ae6:	5d cf       	rjmp	.-326    	; 0x9a2 <xTaskResumeAll+0x28>
     ae8:	ef 2b       	or	r30, r31
     aea:	11 f0       	breq	.+4      	; 0xaf0 <xTaskResumeAll+0x176>
     aec:	0e 94 be 01 	call	0x37c	; 0x37c <prvResetNextTaskUnblockTime>
     af0:	c0 91 64 06 	lds	r28, 0x0664	; 0x800664 <xPendedTicks>
     af4:	d0 91 65 06 	lds	r29, 0x0665	; 0x800665 <xPendedTicks+0x1>
     af8:	20 97       	sbiw	r28, 0x00	; 0
     afa:	61 f0       	breq	.+24     	; 0xb14 <xTaskResumeAll+0x19a>
     afc:	11 e0       	ldi	r17, 0x01	; 1
     afe:	0e 94 9e 03 	call	0x73c	; 0x73c <xTaskIncrementTick>
     b02:	81 11       	cpse	r24, r1
     b04:	10 93 63 06 	sts	0x0663, r17	; 0x800663 <xYieldPendings>
     b08:	21 97       	sbiw	r28, 0x01	; 1
     b0a:	c9 f7       	brne	.-14     	; 0xafe <xTaskResumeAll+0x184>
     b0c:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <xPendedTicks+0x1>
     b10:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <xPendedTicks>
     b14:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xYieldPendings>
     b18:	88 23       	and	r24, r24
     b1a:	51 f0       	breq	.+20     	; 0xb30 <xTaskResumeAll+0x1b6>
     b1c:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     b20:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     b24:	0e 94 65 01 	call	0x2ca	; 0x2ca <vPortYield>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <xTaskResumeAll+0x1b8>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <xTaskResumeAll+0x1b8>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	08 95       	ret

00000b3e <vTaskSwitchContext>:
#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
     b3e:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
     b42:	88 23       	and	r24, r24
     b44:	21 f0       	breq	.+8      	; 0xb4e <vTaskSwitchContext+0x10>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xYieldPendings>
     b4c:	08 95       	ret
        }
        else
        {
            xYieldPendings[ 0 ] = pdFALSE;
     b4e:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <xYieldPendings>
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
     b52:	20 91 67 06 	lds	r18, 0x0667	; 0x800667 <uxTopReadyPriority>
     b56:	82 2f       	mov	r24, r18
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	fc 01       	movw	r30, r24
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	e8 0f       	add	r30, r24
     b6a:	f9 1f       	adc	r31, r25
     b6c:	ec 56       	subi	r30, 0x6C	; 108
     b6e:	f9 4f       	sbci	r31, 0xF9	; 249
     b70:	30 81       	ld	r19, Z
     b72:	31 11       	cpse	r19, r1
     b74:	11 c0       	rjmp	.+34     	; 0xb98 <vTaskSwitchContext+0x5a>
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	82 2f       	mov	r24, r18
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	fc 01       	movw	r30, r24
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	e8 0f       	add	r30, r24
     b8c:	f9 1f       	adc	r31, r25
     b8e:	ec 56       	subi	r30, 0x6C	; 108
     b90:	f9 4f       	sbci	r31, 0xF9	; 249
     b92:	30 81       	ld	r19, Z
     b94:	33 23       	and	r19, r19
     b96:	79 f3       	breq	.-34     	; 0xb76 <vTaskSwitchContext+0x38>
     b98:	ac 01       	movw	r20, r24
     b9a:	44 0f       	add	r20, r20
     b9c:	55 1f       	adc	r21, r21
     b9e:	44 0f       	add	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	44 0f       	add	r20, r20
     ba4:	55 1f       	adc	r21, r21
     ba6:	48 0f       	add	r20, r24
     ba8:	59 1f       	adc	r21, r25
     baa:	fa 01       	movw	r30, r20
     bac:	ec 56       	subi	r30, 0x6C	; 108
     bae:	f9 4f       	sbci	r31, 0xF9	; 249
     bb0:	a1 81       	ldd	r26, Z+1	; 0x01
     bb2:	b2 81       	ldd	r27, Z+2	; 0x02
     bb4:	12 96       	adiw	r26, 0x02	; 2
     bb6:	6d 91       	ld	r22, X+
     bb8:	7c 91       	ld	r23, X
     bba:	13 97       	sbiw	r26, 0x03	; 3
     bbc:	72 83       	std	Z+2, r23	; 0x02
     bbe:	61 83       	std	Z+1, r22	; 0x01
     bc0:	49 56       	subi	r20, 0x69	; 105
     bc2:	59 4f       	sbci	r21, 0xF9	; 249
     bc4:	64 17       	cp	r22, r20
     bc6:	75 07       	cpc	r23, r21
     bc8:	79 f4       	brne	.+30     	; 0xbe8 <vTaskSwitchContext+0xaa>
     bca:	fc 01       	movw	r30, r24
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	ee 0f       	add	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	e8 0f       	add	r30, r24
     bda:	f9 1f       	adc	r31, r25
     bdc:	ec 56       	subi	r30, 0x6C	; 108
     bde:	f9 4f       	sbci	r31, 0xF9	; 249
     be0:	45 81       	ldd	r20, Z+5	; 0x05
     be2:	56 81       	ldd	r21, Z+6	; 0x06
     be4:	52 83       	std	Z+2, r21	; 0x02
     be6:	41 83       	std	Z+1, r20	; 0x01
     be8:	fc 01       	movw	r30, r24
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	8e 0f       	add	r24, r30
     bf8:	9f 1f       	adc	r25, r31
     bfa:	fc 01       	movw	r30, r24
     bfc:	ec 56       	subi	r30, 0x6C	; 108
     bfe:	f9 4f       	sbci	r31, 0xF9	; 249
     c00:	01 80       	ldd	r0, Z+1	; 0x01
     c02:	f2 81       	ldd	r31, Z+2	; 0x02
     c04:	e0 2d       	mov	r30, r0
     c06:	86 81       	ldd	r24, Z+6	; 0x06
     c08:	97 81       	ldd	r25, Z+7	; 0x07
     c0a:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <pxCurrentTCB+0x1>
     c0e:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <pxCurrentTCB>
     c12:	20 93 67 06 	sts	0x0667, r18	; 0x800667 <uxTopReadyPriority>
            traceTASK_SWITCHED_IN();

            /* Macro to inject port specific behaviour immediately after
             * switching tasks, such as setting an end of stack watchpoint
             * or reconfiguring the MPU. */
            portTASK_SWITCH_HOOK( pxCurrentTCB );
     c16:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <pxCurrentTCB>
     c1a:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
     c1e:	08 95       	ret

00000c20 <UART_Init>:
 */ 
#include "Uart.h"
#include "avr/io.h"
#define F_CPU 8000000 
void UART_Init(unsigned int baud) {
	unsigned int ubrr = (F_CPU / 16 / baud) - 1;
     c20:	9c 01       	movw	r18, r24
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	60 e2       	ldi	r22, 0x20	; 32
     c28:	71 ea       	ldi	r23, 0xA1	; 161
     c2a:	87 e0       	ldi	r24, 0x07	; 7
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 b3 09 	call	0x1366	; 0x1366 <__divmodsi4>
     c32:	21 50       	subi	r18, 0x01	; 1
     c34:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(ubrr >> 8);  // Set high byte of baud rate
     c36:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)ubrr;        // Set low byte of baud rate
     c38:	29 b9       	out	0x09, r18	; 9
	UCSRB = (1 << TXEN);                // Enable transmitter
     c3a:	88 e0       	ldi	r24, 0x08	; 8
     c3c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0); // 8-bit data, 1 stop bit
     c3e:	86 e8       	ldi	r24, 0x86	; 134
     c40:	80 bd       	out	0x20, r24	; 32
     c42:	08 95       	ret

00000c44 <UART_Transmit>:
}

// Function to send a character via UART
void UART_Transmit(char data) {
	while (!(UCSRA & (1 << UDRE)));  // Wait for the buffer to be empty
     c44:	5d 9b       	sbis	0x0b, 5	; 11
     c46:	fe cf       	rjmp	.-4      	; 0xc44 <UART_Transmit>
	UDR = data;                     // Send the character
     c48:	8c b9       	out	0x0c, r24	; 12
     c4a:	08 95       	ret

00000c4c <UART_SendString>:
}

// Function to send a string via UART
void UART_SendString(const char *str) {
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
	while (*str) {
     c52:	88 81       	ld	r24, Y
     c54:	88 23       	and	r24, r24
     c56:	31 f0       	breq	.+12     	; 0xc64 <UART_SendString+0x18>
     c58:	21 96       	adiw	r28, 0x01	; 1
		UART_Transmit(*str++);
     c5a:	0e 94 22 06 	call	0xc44	; 0xc44 <UART_Transmit>
	UDR = data;                     // Send the character
}

// Function to send a string via UART
void UART_SendString(const char *str) {
	while (*str) {
     c5e:	89 91       	ld	r24, Y+
     c60:	81 11       	cpse	r24, r1
     c62:	fb cf       	rjmp	.-10     	; 0xc5a <UART_SendString+0xe>
		UART_Transmit(*str++);
	}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <LCD_Command>:
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (data << 4));
    Proxy_SetPin(&lcdControlProxy, EN);
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
    _delay_ms(2);
}
     c6a:	cf 93       	push	r28
     c6c:	c8 2f       	mov	r28, r24
     c6e:	89 e6       	ldi	r24, 0x69	; 105
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Proxy_ReadPort>
     c76:	8f 70       	andi	r24, 0x0F	; 15
     c78:	9c 2f       	mov	r25, r28
     c7a:	90 7f       	andi	r25, 0xF0	; 240
     c7c:	68 2f       	mov	r22, r24
     c7e:	69 2b       	or	r22, r25
     c80:	89 e6       	ldi	r24, 0x69	; 105
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 97 07 	call	0xf2e	; 0xf2e <Proxy_WritePort>
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	85 e6       	ldi	r24, 0x65	; 101
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Proxy_ClearPin>
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	85 e6       	ldi	r24, 0x65	; 101
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Proxy_SetPin>
     c9c:	00 00       	nop
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	85 e6       	ldi	r24, 0x65	; 101
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Proxy_ClearPin>
     ca8:	82 e4       	ldi	r24, 0x42	; 66
     caa:	8a 95       	dec	r24
     cac:	f1 f7       	brne	.-4      	; 0xcaa <LCD_Command+0x40>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <LCD_Command+0x46>
     cb0:	89 e6       	ldi	r24, 0x69	; 105
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Proxy_ReadPort>
     cb8:	8f 70       	andi	r24, 0x0F	; 15
     cba:	90 e1       	ldi	r25, 0x10	; 16
     cbc:	c9 9f       	mul	r28, r25
     cbe:	90 01       	movw	r18, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	68 2f       	mov	r22, r24
     cc4:	62 2b       	or	r22, r18
     cc6:	89 e6       	ldi	r24, 0x69	; 105
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 97 07 	call	0xf2e	; 0xf2e <Proxy_WritePort>
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	85 e6       	ldi	r24, 0x65	; 101
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Proxy_SetPin>
     cd8:	00 00       	nop
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	85 e6       	ldi	r24, 0x65	; 101
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Proxy_ClearPin>
     ce4:	83 ef       	ldi	r24, 0xF3	; 243
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <LCD_Command+0x7e>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <LCD_Command+0x84>
     cee:	00 00       	nop
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <LCD_Init>:

void LCD_Init(void) {
    // Set LCD port direction (D4-D7 as output, RS and EN as output)
    Proxy_SetPortDirection(&lcdDataProxy, 0xF0); // Data pins D4-D7 (upper nibble)
     cf4:	60 ef       	ldi	r22, 0xF0	; 240
     cf6:	89 e6       	ldi	r24, 0x69	; 105
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 92 07 	call	0xf24	; 0xf24 <Proxy_SetPortDirection>
    Proxy_SetPortDirection(&lcdControlProxy, (1 << RS) | (1 << EN)); // RS and EN pins
     cfe:	63 e0       	ldi	r22, 0x03	; 3
     d00:	85 e6       	ldi	r24, 0x65	; 101
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 92 07 	call	0xf24	; 0xf24 <Proxy_SetPortDirection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d08:	87 e8       	ldi	r24, 0x87	; 135
     d0a:	93 e1       	ldi	r25, 0x13	; 19
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <LCD_Init+0x18>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <LCD_Init+0x1e>
     d12:	00 00       	nop

    _delay_ms(20); // LCD Power ON delay always >15ms

    LCD_Command(0x02); // Initialize LCD in 4-bit mode
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	0e 94 35 06 	call	0xc6a	; 0xc6a <LCD_Command>
    LCD_Command(0x28); // 2 lines, 5x7 matrix in 4-bit mode
     d1a:	88 e2       	ldi	r24, 0x28	; 40
     d1c:	0e 94 35 06 	call	0xc6a	; 0xc6a <LCD_Command>
    LCD_Command(0x0C); // Display ON, cursor OFF
     d20:	8c e0       	ldi	r24, 0x0C	; 12
     d22:	0e 94 35 06 	call	0xc6a	; 0xc6a <LCD_Command>
    LCD_Command(0x06); // Increment cursor (shift cursor to right)
     d26:	86 e0       	ldi	r24, 0x06	; 6
     d28:	0e 94 35 06 	call	0xc6a	; 0xc6a <LCD_Command>
    LCD_Command(0x01); // Clear display
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	0e 94 35 06 	call	0xc6a	; 0xc6a <LCD_Command>
     d32:	83 ef       	ldi	r24, 0xF3	; 243
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <LCD_Init+0x42>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <LCD_Init+0x48>
     d3c:	00 00       	nop
     d3e:	08 95       	ret

00000d40 <poll>:
void Poller__StartPolling(void) {
Timer_vidStartTimer1();
}

void Poller__StopPolling(void) {
Timer_vidStopTimer1();
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	a0 97       	sbiw	r28, 0x20	; 32
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <pollCounter>
     d5c:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <pollCounter+0x1>
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	90 93 bd 06 	sts	0x06BD, r25	; 0x8006bd <pollCounter+0x1>
     d66:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <pollCounter>
     d6a:	20 91 ba 06 	lds	r18, 0x06BA	; 0x8006ba <pollTimeCounter>
     d6e:	30 91 bb 06 	lds	r19, 0x06BB	; 0x8006bb <pollTimeCounter+0x1>
     d72:	28 17       	cp	r18, r24
     d74:	39 07       	cpc	r19, r25
     d76:	21 f5       	brne	.+72     	; 0xdc0 <poll+0x80>
     d78:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <pollCounter+0x1>
     d7c:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <pollCounter>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_READ>
     d88:	18 2f       	mov	r17, r24
     d8a:	09 2f       	mov	r16, r25
     d8c:	0e 94 80 07 	call	0xf00	; 0xf00 <ADC_GetVoltage>
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	82 e7       	ldi	r24, 0x72	; 114
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	1f 92       	push	r1
     d9e:	80 e2       	ldi	r24, 0x20	; 32
     da0:	8f 93       	push	r24
     da2:	8e 01       	movw	r16, r28
     da4:	0f 5f       	subi	r16, 0xFF	; 255
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	1f 93       	push	r17
     daa:	0f 93       	push	r16
     dac:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <snprintf>
     db0:	c8 01       	movw	r24, r16
     db2:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_SendString>
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	a0 96       	adiw	r28, 0x20	; 32
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	08 95       	ret

00000dd6 <poller_Init>:
     dd6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <Timer_vidInitTimer1>
     dda:	80 ea       	ldi	r24, 0xA0	; 160
     ddc:	96 e0       	ldi	r25, 0x06	; 6
     dde:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Timer_vidSetCallBackTimer1>
     de2:	08 95       	ret

00000de4 <Poller__StartPolling>:
     de4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Timer_vidStartTimer1>
     de8:	08 95       	ret

00000dea <poller_SetPollTime>:
}


void poller_SetPollTime(uint32 time) {

pollTimeCounter = time / time_ms;
     dea:	22 e3       	ldi	r18, 0x32	; 50
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	0e 94 91 09 	call	0x1322	; 0x1322 <__udivmodsi4>
     df6:	30 93 bb 06 	sts	0x06BB, r19	; 0x8006bb <pollTimeCounter+0x1>
     dfa:	20 93 ba 06 	sts	0x06BA, r18	; 0x8006ba <pollTimeCounter>
     dfe:	08 95       	ret

00000e00 <ADC_PRESCALER_SET>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// This function selects sampling frequency of ADC by selecting the prescaler bit
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
     e00:	96 b1       	in	r25, 0x06	; 6
     e02:	98 7f       	andi	r25, 0xF8	; 248
     e04:	96 b9       	out	0x06, r25	; 6

	switch(prescaler)
     e06:	80 31       	cpi	r24, 0x10	; 16
     e08:	b9 f0       	breq	.+46     	; 0xe38 <ADC_PRESCALER_SET+0x38>
     e0a:	38 f4       	brcc	.+14     	; 0xe1a <ADC_PRESCALER_SET+0x1a>
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	71 f0       	breq	.+28     	; 0xe2c <ADC_PRESCALER_SET+0x2c>
     e10:	88 30       	cpi	r24, 0x08	; 8
     e12:	71 f0       	breq	.+28     	; 0xe30 <ADC_PRESCALER_SET+0x30>
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	f1 f4       	brne	.+60     	; 0xe54 <ADC_PRESCALER_SET+0x54>
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <ADC_PRESCALER_SET+0x28>
     e1a:	80 34       	cpi	r24, 0x40	; 64
     e1c:	99 f0       	breq	.+38     	; 0xe44 <ADC_PRESCALER_SET+0x44>
     e1e:	80 38       	cpi	r24, 0x80	; 128
     e20:	a9 f0       	breq	.+42     	; 0xe4c <ADC_PRESCALER_SET+0x4c>
     e22:	80 32       	cpi	r24, 0x20	; 32
     e24:	b9 f4       	brne	.+46     	; 0xe54 <ADC_PRESCALER_SET+0x54>
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <ADC_PRESCALER_SET+0x3c>
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
     e28:	30 9a       	sbi	0x06, 0	; 6
			   break;
     e2a:	08 95       	ret
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
     e2c:	31 9a       	sbi	0x06, 1	; 6
			   break;
     e2e:	08 95       	ret
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
     e30:	86 b1       	in	r24, 0x06	; 6
     e32:	83 60       	ori	r24, 0x03	; 3
     e34:	86 b9       	out	0x06, r24	; 6
			   break;
     e36:	08 95       	ret
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
     e38:	32 9a       	sbi	0x06, 2	; 6
			   break;
     e3a:	08 95       	ret
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
     e3c:	86 b1       	in	r24, 0x06	; 6
     e3e:	85 60       	ori	r24, 0x05	; 5
     e40:	86 b9       	out	0x06, r24	; 6
			   break;
     e42:	08 95       	ret
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
     e44:	86 b1       	in	r24, 0x06	; 6
     e46:	86 60       	ori	r24, 0x06	; 6
     e48:	86 b9       	out	0x06, r24	; 6
			   break;
     e4a:	08 95       	ret
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
     e4c:	86 b1       	in	r24, 0x06	; 6
     e4e:	87 60       	ori	r24, 0x07	; 7
     e50:	86 b9       	out	0x06, r24	; 6
			   break;
     e52:	08 95       	ret
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
     e54:	86 b1       	in	r24, 0x06	; 6
     e56:	88 7f       	andi	r24, 0xF8	; 248
     e58:	86 b9       	out	0x06, r24	; 6
     e5a:	08 95       	ret

00000e5c <ADC_voltage_Reference>:

//This function selects the voltage reference
//by default AVCC has been selected
void ADC_voltage_Reference(uint8_t Reference_Voltage)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
     e5c:	97 b1       	in	r25, 0x07	; 7
     e5e:	9f 73       	andi	r25, 0x3F	; 63
     e60:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1<<REFS0); // Default AVCC has been set
     e62:	3e 9a       	sbi	0x07, 6	; 7


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
     e64:	81 11       	cpse	r24, r1
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <ADC_voltage_Reference+0x14>
     e68:	87 b1       	in	r24, 0x07	; 7
     e6a:	8f 73       	andi	r24, 0x3F	; 63
     e6c:	87 b9       	out	0x07, r24	; 7
     e6e:	08 95       	ret
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	11 f4       	brne	.+4      	; 0xe78 <ADC_voltage_Reference+0x1c>
     e74:	3e 9a       	sbi	0x07, 6	; 7
     e76:	08 95       	ret
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	21 f4       	brne	.+8      	; 0xe84 <ADC_voltage_Reference+0x28>
     e7c:	87 b1       	in	r24, 0x07	; 7
     e7e:	80 6c       	ori	r24, 0xC0	; 192
     e80:	87 b9       	out	0x07, r24	; 7
     e82:	08 95       	ret
	else{ADMUX |= (1<<REFS0);}
     e84:	3e 9a       	sbi	0x07, 6	; 7
     e86:	08 95       	ret

00000e88 <ADC_INIT>:
/*------------possible parameter---------
prescaler = 2,4,8,16,32,64,128
 Voltage_Reference = AREF,AVCC,INTERNAL
*/
void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
     e88:	cf 93       	push	r28
     e8a:	c6 2f       	mov	r28, r22
	2) set prescaler
	3) reference voltage select
	4) left adjust of for data register
	*/

	ADCSRA |= (1<<ADEN); // ADC Enable
     e8c:	37 9a       	sbi	0x06, 7	; 6
	ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
     e8e:	0e 94 00 07 	call	0xe00	; 0xe00 <ADC_PRESCALER_SET>
	ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
     e92:	8c 2f       	mov	r24, r28
     e94:	0e 94 2e 07 	call	0xe5c	; 0xe5c <ADC_voltage_Reference>
	ADMUX &= ~(1<<ADLAR); //left adjust off // Though bu default left adjust off // this line use for more convenient for future developer
     e98:	3d 98       	cbi	0x07, 5	; 7
}
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <ADC_READ>:


//########################################################################################
//########################################################################################
uint16_t ADC_READ(uint8_t channel)
{
     e9e:	e8 2f       	mov	r30, r24
	ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     ea0:	87 b1       	in	r24, 0x07	; 7
     ea2:	80 7e       	andi	r24, 0xE0	; 224
     ea4:	87 b9       	out	0x07, r24	; 7

	switch(channel)
     ea6:	8e 2f       	mov	r24, r30
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	91 05       	cpc	r25, r1
     eae:	f8 f4       	brcc	.+62     	; 0xeee <ADC_READ+0x50>
     eb0:	fc 01       	movw	r30, r24
     eb2:	e6 5d       	subi	r30, 0xD6	; 214
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__tablejump2__>
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
     eba:	87 b1       	in	r24, 0x07	; 7
     ebc:	80 7e       	andi	r24, 0xE0	; 224
     ebe:	87 b9       	out	0x07, r24	; 7
			   break;
     ec0:	19 c0       	rjmp	.+50     	; 0xef4 <ADC_READ+0x56>
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
     ec2:	38 9a       	sbi	0x07, 0	; 7
			   break;
     ec4:	17 c0       	rjmp	.+46     	; 0xef4 <ADC_READ+0x56>
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
     ec6:	39 9a       	sbi	0x07, 1	; 7
		       break;
     ec8:	15 c0       	rjmp	.+42     	; 0xef4 <ADC_READ+0x56>
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
     eca:	87 b1       	in	r24, 0x07	; 7
     ecc:	83 60       	ori	r24, 0x03	; 3
     ece:	87 b9       	out	0x07, r24	; 7
			   break;
     ed0:	11 c0       	rjmp	.+34     	; 0xef4 <ADC_READ+0x56>
		case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
     ed2:	3a 9a       	sbi	0x07, 2	; 7
			   break;
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <ADC_READ+0x56>
		case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
     ed6:	87 b1       	in	r24, 0x07	; 7
     ed8:	85 60       	ori	r24, 0x05	; 5
     eda:	87 b9       	out	0x07, r24	; 7
			   break;
     edc:	0b c0       	rjmp	.+22     	; 0xef4 <ADC_READ+0x56>
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
     ede:	87 b1       	in	r24, 0x07	; 7
     ee0:	86 60       	ori	r24, 0x06	; 6
     ee2:	87 b9       	out	0x07, r24	; 7
			   break;
     ee4:	07 c0       	rjmp	.+14     	; 0xef4 <ADC_READ+0x56>
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
     ee6:	87 b1       	in	r24, 0x07	; 7
     ee8:	87 60       	ori	r24, 0x07	; 7
     eea:	87 b9       	out	0x07, r24	; 7
			   break;
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <ADC_READ+0x56>
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     eee:	87 b1       	in	r24, 0x07	; 7
     ef0:	80 7e       	andi	r24, 0xE0	; 224
     ef2:	87 b9       	out	0x07, r24	; 7
	}
	ADCSRA |=(1<<ADSC); // ADC conversion start
     ef4:	36 9a       	sbi	0x06, 6	; 6

	while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
     ef6:	34 9b       	sbis	0x06, 4	; 6
     ef8:	fe cf       	rjmp	.-4      	; 0xef6 <ADC_READ+0x58>
	//uint8_t high,low;
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
     efa:	84 b1       	in	r24, 0x04	; 4
     efc:	95 b1       	in	r25, 0x05	; 5
}
     efe:	08 95       	ret

00000f00 <ADC_GetVoltage>:
float ADC_GetVoltage(uint16_t adc_value) {
    // Calculate voltage at the ADC pin
    float v_adc = (adc_value / ADC_RESOLUTION) * VREF;

    // Scale the voltage using the voltage divider ratio
    return v_adc ;
     f00:	bc 01       	movw	r22, r24
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 96 08 	call	0x112c	; 0x112c <__floatunsisf>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 ec       	ldi	r19, 0xC0	; 192
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	0e 94 24 08 	call	0x1048	; 0x1048 <__divsf3>
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 ea       	ldi	r20, 0xA0	; 160
     f1c:	50 e4       	ldi	r21, 0x40	; 64
     f1e:	0e 94 24 09 	call	0x1248	; 0x1248 <__mulsf3>
}
     f22:	08 95       	ret

00000f24 <Proxy_SetPortDirection>:
    return gpioProxy;
}

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     f24:	dc 01       	movw	r26, r24
     f26:	ed 91       	ld	r30, X+
     f28:	fc 91       	ld	r31, X
     f2a:	60 83       	st	Z, r22
     f2c:	08 95       	ret

00000f2e <Proxy_WritePort>:
}

// Write a value to the port
void Proxy_WritePort(GpioProxy *gpioProxy, uint8_t value) {
    *(gpioProxy->port) = value;
     f2e:	dc 01       	movw	r26, r24
     f30:	12 96       	adiw	r26, 0x02	; 2
     f32:	ed 91       	ld	r30, X+
     f34:	fc 91       	ld	r31, X
     f36:	13 97       	sbiw	r26, 0x03	; 3
     f38:	60 83       	st	Z, r22
     f3a:	08 95       	ret

00000f3c <Proxy_ReadPort>:
}

// Read the value of the port
uint8_t Proxy_ReadPort(GpioProxy *gpioProxy) {
    return *(gpioProxy->port);
     f3c:	dc 01       	movw	r26, r24
     f3e:	12 96       	adiw	r26, 0x02	; 2
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	13 97       	sbiw	r26, 0x03	; 3
     f46:	80 81       	ld	r24, Z
}
     f48:	08 95       	ret

00000f4a <Proxy_SetPin>:

// Set a specific pin high
void Proxy_SetPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) |= (1 << pin);
     f4a:	dc 01       	movw	r26, r24
     f4c:	12 96       	adiw	r26, 0x02	; 2
     f4e:	ed 91       	ld	r30, X+
     f50:	fc 91       	ld	r31, X
     f52:	13 97       	sbiw	r26, 0x03	; 3
     f54:	20 81       	ld	r18, Z
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <Proxy_SetPin+0x16>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	6a 95       	dec	r22
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <Proxy_SetPin+0x12>
     f64:	82 2b       	or	r24, r18
     f66:	80 83       	st	Z, r24
     f68:	08 95       	ret

00000f6a <Proxy_ClearPin>:
}

// Clear a specific pin (set it low)
void Proxy_ClearPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) &= ~(1 << pin);
     f6a:	dc 01       	movw	r26, r24
     f6c:	12 96       	adiw	r26, 0x02	; 2
     f6e:	ed 91       	ld	r30, X+
     f70:	fc 91       	ld	r31, X
     f72:	13 97       	sbiw	r26, 0x03	; 3
     f74:	20 81       	ld	r18, Z
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <Proxy_ClearPin+0x16>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	6a 95       	dec	r22
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <Proxy_ClearPin+0x12>
     f84:	80 95       	com	r24
     f86:	82 23       	and	r24, r18
     f88:	80 83       	st	Z, r24
     f8a:	08 95       	ret

00000f8c <Timer_vidInitTimer1>:
	#error "Invalid prescaler value"
	#endif
}

void Timer_vidStopTimer1(void) {
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
     f8c:	1f bc       	out	0x2f, r1	; 47
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	8e bd       	out	0x2e, r24	; 46
     f92:	89 e6       	ldi	r24, 0x69	; 105
     f94:	98 e1       	ldi	r25, 0x18	; 24
     f96:	9b bd       	out	0x2b, r25	; 43
     f98:	8a bd       	out	0x2a, r24	; 42
     f9a:	80 e1       	ldi	r24, 0x10	; 16
     f9c:	89 bf       	out	0x39, r24	; 57
     f9e:	78 94       	sei
     fa0:	08 95       	ret

00000fa2 <Timer_vidStartTimer1>:
     fa2:	8e b5       	in	r24, 0x2e	; 46
     fa4:	83 60       	ori	r24, 0x03	; 3
     fa6:	8e bd       	out	0x2e, r24	; 46
     fa8:	08 95       	ret

00000faa <Timer_vidSetCallBackTimer1>:
}

void Timer_vidSetCallBackTimer1(void (*TimerCallback)(void)) {
	if (TimerCallback != NULLPtr) {
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	21 f0       	breq	.+8      	; 0xfb6 <Timer_vidSetCallBackTimer1+0xc>
		Timer1Callback = TimerCallback;
     fae:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <Timer1Callback+0x1>
     fb2:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <Timer1Callback>
     fb6:	08 95       	ret

00000fb8 <__vector_7>:
	}
}

// ISR for Timer1 Compare Match
ISR(TIMER1_COMPA_vect) {
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	2f 93       	push	r18
     fc4:	3f 93       	push	r19
     fc6:	4f 93       	push	r20
     fc8:	5f 93       	push	r21
     fca:	6f 93       	push	r22
     fcc:	7f 93       	push	r23
     fce:	8f 93       	push	r24
     fd0:	9f 93       	push	r25
     fd2:	af 93       	push	r26
     fd4:	bf 93       	push	r27
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
	if (Timer1Callback != NULLPtr) {
     fda:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <Timer1Callback>
     fde:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <Timer1Callback+0x1>
     fe2:	30 97       	sbiw	r30, 0x00	; 0
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <__vector_7+0x30>
		(*Timer1Callback)(); // Call the user callback function
     fe6:	09 95       	icall
	}
}
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <main>:


int main(void) {

	
		LCD_Init();
    100a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Init>

		ADC_INIT(128, AREF);
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	80 e8       	ldi	r24, 0x80	; 128
    1012:	0e 94 44 07 	call	0xe88	; 0xe88 <ADC_INIT>
		UART_Init(9600);
    1016:	80 e8       	ldi	r24, 0x80	; 128
    1018:	95 e2       	ldi	r25, 0x25	; 37
    101a:	0e 94 10 06 	call	0xc20	; 0xc20 <UART_Init>

		poller_Init();
    101e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <poller_Init>
		
		Poller__StartPolling();
    1022:	0e 94 f2 06 	call	0xde4	; 0xde4 <Poller__StartPolling>
		poller_SetPollTime(50);
    1026:	82 e3       	ldi	r24, 0x32	; 50
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 f5 06 	call	0xdea	; 0xdea <poller_SetPollTime>
		
		

		//Os_Init();
		vTaskStartScheduler();
    102e:	0e 94 49 03 	call	0x692	; 0x692 <vTaskStartScheduler>

	while(1){
		// Set port direction (0 for input, 1 for output)
		 Proxy_SetPortDirection(&chargeProxy, 1);
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	81 e6       	ldi	r24, 0x61	; 97
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 92 07 	call	0xf24	; 0xf24 <Proxy_SetPortDirection>
		

		// Write a value to the port
		 Proxy_WritePort(&chargeProxy, 1);
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	81 e6       	ldi	r24, 0x61	; 97
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 97 07 	call	0xf2e	; 0xf2e <Proxy_WritePort>
    1046:	f5 cf       	rjmp	.-22     	; 0x1032 <main+0x28>

00001048 <__divsf3>:
    1048:	0e 94 38 08 	call	0x1070	; 0x1070 <__divsf3x>
    104c:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__fp_round>
    1050:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fp_pscB>
    1054:	58 f0       	brcs	.+22     	; 0x106c <__divsf3+0x24>
    1056:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__fp_pscA>
    105a:	40 f0       	brcs	.+16     	; 0x106c <__divsf3+0x24>
    105c:	29 f4       	brne	.+10     	; 0x1068 <__divsf3+0x20>
    105e:	5f 3f       	cpi	r21, 0xFF	; 255
    1060:	29 f0       	breq	.+10     	; 0x106c <__divsf3+0x24>
    1062:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_inf>
    1066:	51 11       	cpse	r21, r1
    1068:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_szero>
    106c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_nan>

00001070 <__divsf3x>:
    1070:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__fp_split3>
    1074:	68 f3       	brcs	.-38     	; 0x1050 <__divsf3+0x8>

00001076 <__divsf3_pse>:
    1076:	99 23       	and	r25, r25
    1078:	b1 f3       	breq	.-20     	; 0x1066 <__divsf3+0x1e>
    107a:	55 23       	and	r21, r21
    107c:	91 f3       	breq	.-28     	; 0x1062 <__divsf3+0x1a>
    107e:	95 1b       	sub	r25, r21
    1080:	55 0b       	sbc	r21, r21
    1082:	bb 27       	eor	r27, r27
    1084:	aa 27       	eor	r26, r26
    1086:	62 17       	cp	r22, r18
    1088:	73 07       	cpc	r23, r19
    108a:	84 07       	cpc	r24, r20
    108c:	38 f0       	brcs	.+14     	; 0x109c <__divsf3_pse+0x26>
    108e:	9f 5f       	subi	r25, 0xFF	; 255
    1090:	5f 4f       	sbci	r21, 0xFF	; 255
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	44 1f       	adc	r20, r20
    1098:	aa 1f       	adc	r26, r26
    109a:	a9 f3       	breq	.-22     	; 0x1086 <__divsf3_pse+0x10>
    109c:	35 d0       	rcall	.+106    	; 0x1108 <__divsf3_pse+0x92>
    109e:	0e 2e       	mov	r0, r30
    10a0:	3a f0       	brmi	.+14     	; 0x10b0 <__divsf3_pse+0x3a>
    10a2:	e0 e8       	ldi	r30, 0x80	; 128
    10a4:	32 d0       	rcall	.+100    	; 0x110a <__divsf3_pse+0x94>
    10a6:	91 50       	subi	r25, 0x01	; 1
    10a8:	50 40       	sbci	r21, 0x00	; 0
    10aa:	e6 95       	lsr	r30
    10ac:	00 1c       	adc	r0, r0
    10ae:	ca f7       	brpl	.-14     	; 0x10a2 <__divsf3_pse+0x2c>
    10b0:	2b d0       	rcall	.+86     	; 0x1108 <__divsf3_pse+0x92>
    10b2:	fe 2f       	mov	r31, r30
    10b4:	29 d0       	rcall	.+82     	; 0x1108 <__divsf3_pse+0x92>
    10b6:	66 0f       	add	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	88 1f       	adc	r24, r24
    10bc:	bb 1f       	adc	r27, r27
    10be:	26 17       	cp	r18, r22
    10c0:	37 07       	cpc	r19, r23
    10c2:	48 07       	cpc	r20, r24
    10c4:	ab 07       	cpc	r26, r27
    10c6:	b0 e8       	ldi	r27, 0x80	; 128
    10c8:	09 f0       	breq	.+2      	; 0x10cc <__divsf3_pse+0x56>
    10ca:	bb 0b       	sbc	r27, r27
    10cc:	80 2d       	mov	r24, r0
    10ce:	bf 01       	movw	r22, r30
    10d0:	ff 27       	eor	r31, r31
    10d2:	93 58       	subi	r25, 0x83	; 131
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255
    10d6:	3a f0       	brmi	.+14     	; 0x10e6 <__divsf3_pse+0x70>
    10d8:	9e 3f       	cpi	r25, 0xFE	; 254
    10da:	51 05       	cpc	r21, r1
    10dc:	78 f0       	brcs	.+30     	; 0x10fc <__divsf3_pse+0x86>
    10de:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_inf>
    10e2:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_szero>
    10e6:	5f 3f       	cpi	r21, 0xFF	; 255
    10e8:	e4 f3       	brlt	.-8      	; 0x10e2 <__divsf3_pse+0x6c>
    10ea:	98 3e       	cpi	r25, 0xE8	; 232
    10ec:	d4 f3       	brlt	.-12     	; 0x10e2 <__divsf3_pse+0x6c>
    10ee:	86 95       	lsr	r24
    10f0:	77 95       	ror	r23
    10f2:	67 95       	ror	r22
    10f4:	b7 95       	ror	r27
    10f6:	f7 95       	ror	r31
    10f8:	9f 5f       	subi	r25, 0xFF	; 255
    10fa:	c9 f7       	brne	.-14     	; 0x10ee <__divsf3_pse+0x78>
    10fc:	88 0f       	add	r24, r24
    10fe:	91 1d       	adc	r25, r1
    1100:	96 95       	lsr	r25
    1102:	87 95       	ror	r24
    1104:	97 f9       	bld	r25, 7
    1106:	08 95       	ret
    1108:	e1 e0       	ldi	r30, 0x01	; 1
    110a:	66 0f       	add	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	88 1f       	adc	r24, r24
    1110:	bb 1f       	adc	r27, r27
    1112:	62 17       	cp	r22, r18
    1114:	73 07       	cpc	r23, r19
    1116:	84 07       	cpc	r24, r20
    1118:	ba 07       	cpc	r27, r26
    111a:	20 f0       	brcs	.+8      	; 0x1124 <__divsf3_pse+0xae>
    111c:	62 1b       	sub	r22, r18
    111e:	73 0b       	sbc	r23, r19
    1120:	84 0b       	sbc	r24, r20
    1122:	ba 0b       	sbc	r27, r26
    1124:	ee 1f       	adc	r30, r30
    1126:	88 f7       	brcc	.-30     	; 0x110a <__divsf3_pse+0x94>
    1128:	e0 95       	com	r30
    112a:	08 95       	ret

0000112c <__floatunsisf>:
    112c:	e8 94       	clt
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <__floatsisf+0x12>

00001130 <__floatsisf>:
    1130:	97 fb       	bst	r25, 7
    1132:	3e f4       	brtc	.+14     	; 0x1142 <__floatsisf+0x12>
    1134:	90 95       	com	r25
    1136:	80 95       	com	r24
    1138:	70 95       	com	r23
    113a:	61 95       	neg	r22
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	99 23       	and	r25, r25
    1144:	a9 f0       	breq	.+42     	; 0x1170 <__floatsisf+0x40>
    1146:	f9 2f       	mov	r31, r25
    1148:	96 e9       	ldi	r25, 0x96	; 150
    114a:	bb 27       	eor	r27, r27
    114c:	93 95       	inc	r25
    114e:	f6 95       	lsr	r31
    1150:	87 95       	ror	r24
    1152:	77 95       	ror	r23
    1154:	67 95       	ror	r22
    1156:	b7 95       	ror	r27
    1158:	f1 11       	cpse	r31, r1
    115a:	f8 cf       	rjmp	.-16     	; 0x114c <__floatsisf+0x1c>
    115c:	fa f4       	brpl	.+62     	; 0x119c <__floatsisf+0x6c>
    115e:	bb 0f       	add	r27, r27
    1160:	11 f4       	brne	.+4      	; 0x1166 <__floatsisf+0x36>
    1162:	60 ff       	sbrs	r22, 0
    1164:	1b c0       	rjmp	.+54     	; 0x119c <__floatsisf+0x6c>
    1166:	6f 5f       	subi	r22, 0xFF	; 255
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	16 c0       	rjmp	.+44     	; 0x119c <__floatsisf+0x6c>
    1170:	88 23       	and	r24, r24
    1172:	11 f0       	breq	.+4      	; 0x1178 <__floatsisf+0x48>
    1174:	96 e9       	ldi	r25, 0x96	; 150
    1176:	11 c0       	rjmp	.+34     	; 0x119a <__floatsisf+0x6a>
    1178:	77 23       	and	r23, r23
    117a:	21 f0       	breq	.+8      	; 0x1184 <__floatsisf+0x54>
    117c:	9e e8       	ldi	r25, 0x8E	; 142
    117e:	87 2f       	mov	r24, r23
    1180:	76 2f       	mov	r23, r22
    1182:	05 c0       	rjmp	.+10     	; 0x118e <__floatsisf+0x5e>
    1184:	66 23       	and	r22, r22
    1186:	71 f0       	breq	.+28     	; 0x11a4 <__floatsisf+0x74>
    1188:	96 e8       	ldi	r25, 0x86	; 134
    118a:	86 2f       	mov	r24, r22
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	2a f0       	brmi	.+10     	; 0x119c <__floatsisf+0x6c>
    1192:	9a 95       	dec	r25
    1194:	66 0f       	add	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	da f7       	brpl	.-10     	; 0x1192 <__floatsisf+0x62>
    119c:	88 0f       	add	r24, r24
    119e:	96 95       	lsr	r25
    11a0:	87 95       	ror	r24
    11a2:	97 f9       	bld	r25, 7
    11a4:	08 95       	ret

000011a6 <__fp_inf>:
    11a6:	97 f9       	bld	r25, 7
    11a8:	9f 67       	ori	r25, 0x7F	; 127
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	08 95       	ret

000011b2 <__fp_nan>:
    11b2:	9f ef       	ldi	r25, 0xFF	; 255
    11b4:	80 ec       	ldi	r24, 0xC0	; 192
    11b6:	08 95       	ret

000011b8 <__fp_pscA>:
    11b8:	00 24       	eor	r0, r0
    11ba:	0a 94       	dec	r0
    11bc:	16 16       	cp	r1, r22
    11be:	17 06       	cpc	r1, r23
    11c0:	18 06       	cpc	r1, r24
    11c2:	09 06       	cpc	r0, r25
    11c4:	08 95       	ret

000011c6 <__fp_pscB>:
    11c6:	00 24       	eor	r0, r0
    11c8:	0a 94       	dec	r0
    11ca:	12 16       	cp	r1, r18
    11cc:	13 06       	cpc	r1, r19
    11ce:	14 06       	cpc	r1, r20
    11d0:	05 06       	cpc	r0, r21
    11d2:	08 95       	ret

000011d4 <__fp_round>:
    11d4:	09 2e       	mov	r0, r25
    11d6:	03 94       	inc	r0
    11d8:	00 0c       	add	r0, r0
    11da:	11 f4       	brne	.+4      	; 0x11e0 <__fp_round+0xc>
    11dc:	88 23       	and	r24, r24
    11de:	52 f0       	brmi	.+20     	; 0x11f4 <__fp_round+0x20>
    11e0:	bb 0f       	add	r27, r27
    11e2:	40 f4       	brcc	.+16     	; 0x11f4 <__fp_round+0x20>
    11e4:	bf 2b       	or	r27, r31
    11e6:	11 f4       	brne	.+4      	; 0x11ec <__fp_round+0x18>
    11e8:	60 ff       	sbrs	r22, 0
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <__fp_round+0x20>
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	08 95       	ret

000011f6 <__fp_split3>:
    11f6:	57 fd       	sbrc	r21, 7
    11f8:	90 58       	subi	r25, 0x80	; 128
    11fa:	44 0f       	add	r20, r20
    11fc:	55 1f       	adc	r21, r21
    11fe:	59 f0       	breq	.+22     	; 0x1216 <__fp_splitA+0x10>
    1200:	5f 3f       	cpi	r21, 0xFF	; 255
    1202:	71 f0       	breq	.+28     	; 0x1220 <__fp_splitA+0x1a>
    1204:	47 95       	ror	r20

00001206 <__fp_splitA>:
    1206:	88 0f       	add	r24, r24
    1208:	97 fb       	bst	r25, 7
    120a:	99 1f       	adc	r25, r25
    120c:	61 f0       	breq	.+24     	; 0x1226 <__fp_splitA+0x20>
    120e:	9f 3f       	cpi	r25, 0xFF	; 255
    1210:	79 f0       	breq	.+30     	; 0x1230 <__fp_splitA+0x2a>
    1212:	87 95       	ror	r24
    1214:	08 95       	ret
    1216:	12 16       	cp	r1, r18
    1218:	13 06       	cpc	r1, r19
    121a:	14 06       	cpc	r1, r20
    121c:	55 1f       	adc	r21, r21
    121e:	f2 cf       	rjmp	.-28     	; 0x1204 <__fp_split3+0xe>
    1220:	46 95       	lsr	r20
    1222:	f1 df       	rcall	.-30     	; 0x1206 <__fp_splitA>
    1224:	08 c0       	rjmp	.+16     	; 0x1236 <__fp_splitA+0x30>
    1226:	16 16       	cp	r1, r22
    1228:	17 06       	cpc	r1, r23
    122a:	18 06       	cpc	r1, r24
    122c:	99 1f       	adc	r25, r25
    122e:	f1 cf       	rjmp	.-30     	; 0x1212 <__fp_splitA+0xc>
    1230:	86 95       	lsr	r24
    1232:	71 05       	cpc	r23, r1
    1234:	61 05       	cpc	r22, r1
    1236:	08 94       	sec
    1238:	08 95       	ret

0000123a <__fp_zero>:
    123a:	e8 94       	clt

0000123c <__fp_szero>:
    123c:	bb 27       	eor	r27, r27
    123e:	66 27       	eor	r22, r22
    1240:	77 27       	eor	r23, r23
    1242:	cb 01       	movw	r24, r22
    1244:	97 f9       	bld	r25, 7
    1246:	08 95       	ret

00001248 <__mulsf3>:
    1248:	0e 94 37 09 	call	0x126e	; 0x126e <__mulsf3x>
    124c:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__fp_round>
    1250:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__fp_pscA>
    1254:	38 f0       	brcs	.+14     	; 0x1264 <__mulsf3+0x1c>
    1256:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fp_pscB>
    125a:	20 f0       	brcs	.+8      	; 0x1264 <__mulsf3+0x1c>
    125c:	95 23       	and	r25, r21
    125e:	11 f0       	breq	.+4      	; 0x1264 <__mulsf3+0x1c>
    1260:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_inf>
    1264:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_nan>
    1268:	11 24       	eor	r1, r1
    126a:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_szero>

0000126e <__mulsf3x>:
    126e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__fp_split3>
    1272:	70 f3       	brcs	.-36     	; 0x1250 <__mulsf3+0x8>

00001274 <__mulsf3_pse>:
    1274:	95 9f       	mul	r25, r21
    1276:	c1 f3       	breq	.-16     	; 0x1268 <__mulsf3+0x20>
    1278:	95 0f       	add	r25, r21
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	55 1f       	adc	r21, r21
    127e:	62 9f       	mul	r22, r18
    1280:	f0 01       	movw	r30, r0
    1282:	72 9f       	mul	r23, r18
    1284:	bb 27       	eor	r27, r27
    1286:	f0 0d       	add	r31, r0
    1288:	b1 1d       	adc	r27, r1
    128a:	63 9f       	mul	r22, r19
    128c:	aa 27       	eor	r26, r26
    128e:	f0 0d       	add	r31, r0
    1290:	b1 1d       	adc	r27, r1
    1292:	aa 1f       	adc	r26, r26
    1294:	64 9f       	mul	r22, r20
    1296:	66 27       	eor	r22, r22
    1298:	b0 0d       	add	r27, r0
    129a:	a1 1d       	adc	r26, r1
    129c:	66 1f       	adc	r22, r22
    129e:	82 9f       	mul	r24, r18
    12a0:	22 27       	eor	r18, r18
    12a2:	b0 0d       	add	r27, r0
    12a4:	a1 1d       	adc	r26, r1
    12a6:	62 1f       	adc	r22, r18
    12a8:	73 9f       	mul	r23, r19
    12aa:	b0 0d       	add	r27, r0
    12ac:	a1 1d       	adc	r26, r1
    12ae:	62 1f       	adc	r22, r18
    12b0:	83 9f       	mul	r24, r19
    12b2:	a0 0d       	add	r26, r0
    12b4:	61 1d       	adc	r22, r1
    12b6:	22 1f       	adc	r18, r18
    12b8:	74 9f       	mul	r23, r20
    12ba:	33 27       	eor	r19, r19
    12bc:	a0 0d       	add	r26, r0
    12be:	61 1d       	adc	r22, r1
    12c0:	23 1f       	adc	r18, r19
    12c2:	84 9f       	mul	r24, r20
    12c4:	60 0d       	add	r22, r0
    12c6:	21 1d       	adc	r18, r1
    12c8:	82 2f       	mov	r24, r18
    12ca:	76 2f       	mov	r23, r22
    12cc:	6a 2f       	mov	r22, r26
    12ce:	11 24       	eor	r1, r1
    12d0:	9f 57       	subi	r25, 0x7F	; 127
    12d2:	50 40       	sbci	r21, 0x00	; 0
    12d4:	9a f0       	brmi	.+38     	; 0x12fc <__mulsf3_pse+0x88>
    12d6:	f1 f0       	breq	.+60     	; 0x1314 <__mulsf3_pse+0xa0>
    12d8:	88 23       	and	r24, r24
    12da:	4a f0       	brmi	.+18     	; 0x12ee <__mulsf3_pse+0x7a>
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	bb 1f       	adc	r27, r27
    12e2:	66 1f       	adc	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	91 50       	subi	r25, 0x01	; 1
    12ea:	50 40       	sbci	r21, 0x00	; 0
    12ec:	a9 f7       	brne	.-22     	; 0x12d8 <__mulsf3_pse+0x64>
    12ee:	9e 3f       	cpi	r25, 0xFE	; 254
    12f0:	51 05       	cpc	r21, r1
    12f2:	80 f0       	brcs	.+32     	; 0x1314 <__mulsf3_pse+0xa0>
    12f4:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_inf>
    12f8:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_szero>
    12fc:	5f 3f       	cpi	r21, 0xFF	; 255
    12fe:	e4 f3       	brlt	.-8      	; 0x12f8 <__mulsf3_pse+0x84>
    1300:	98 3e       	cpi	r25, 0xE8	; 232
    1302:	d4 f3       	brlt	.-12     	; 0x12f8 <__mulsf3_pse+0x84>
    1304:	86 95       	lsr	r24
    1306:	77 95       	ror	r23
    1308:	67 95       	ror	r22
    130a:	b7 95       	ror	r27
    130c:	f7 95       	ror	r31
    130e:	e7 95       	ror	r30
    1310:	9f 5f       	subi	r25, 0xFF	; 255
    1312:	c1 f7       	brne	.-16     	; 0x1304 <__mulsf3_pse+0x90>
    1314:	fe 2b       	or	r31, r30
    1316:	88 0f       	add	r24, r24
    1318:	91 1d       	adc	r25, r1
    131a:	96 95       	lsr	r25
    131c:	87 95       	ror	r24
    131e:	97 f9       	bld	r25, 7
    1320:	08 95       	ret

00001322 <__udivmodsi4>:
    1322:	a1 e2       	ldi	r26, 0x21	; 33
    1324:	1a 2e       	mov	r1, r26
    1326:	aa 1b       	sub	r26, r26
    1328:	bb 1b       	sub	r27, r27
    132a:	fd 01       	movw	r30, r26
    132c:	0d c0       	rjmp	.+26     	; 0x1348 <__udivmodsi4_ep>

0000132e <__udivmodsi4_loop>:
    132e:	aa 1f       	adc	r26, r26
    1330:	bb 1f       	adc	r27, r27
    1332:	ee 1f       	adc	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	a2 17       	cp	r26, r18
    1338:	b3 07       	cpc	r27, r19
    133a:	e4 07       	cpc	r30, r20
    133c:	f5 07       	cpc	r31, r21
    133e:	20 f0       	brcs	.+8      	; 0x1348 <__udivmodsi4_ep>
    1340:	a2 1b       	sub	r26, r18
    1342:	b3 0b       	sbc	r27, r19
    1344:	e4 0b       	sbc	r30, r20
    1346:	f5 0b       	sbc	r31, r21

00001348 <__udivmodsi4_ep>:
    1348:	66 1f       	adc	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	1a 94       	dec	r1
    1352:	69 f7       	brne	.-38     	; 0x132e <__udivmodsi4_loop>
    1354:	60 95       	com	r22
    1356:	70 95       	com	r23
    1358:	80 95       	com	r24
    135a:	90 95       	com	r25
    135c:	9b 01       	movw	r18, r22
    135e:	ac 01       	movw	r20, r24
    1360:	bd 01       	movw	r22, r26
    1362:	cf 01       	movw	r24, r30
    1364:	08 95       	ret

00001366 <__divmodsi4>:
    1366:	05 2e       	mov	r0, r21
    1368:	97 fb       	bst	r25, 7
    136a:	1e f4       	brtc	.+6      	; 0x1372 <__divmodsi4+0xc>
    136c:	00 94       	com	r0
    136e:	0e 94 ca 09 	call	0x1394	; 0x1394 <__negsi2>
    1372:	57 fd       	sbrc	r21, 7
    1374:	07 d0       	rcall	.+14     	; 0x1384 <__divmodsi4_neg2>
    1376:	0e 94 91 09 	call	0x1322	; 0x1322 <__udivmodsi4>
    137a:	07 fc       	sbrc	r0, 7
    137c:	03 d0       	rcall	.+6      	; 0x1384 <__divmodsi4_neg2>
    137e:	4e f4       	brtc	.+18     	; 0x1392 <__divmodsi4_exit>
    1380:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__negsi2>

00001384 <__divmodsi4_neg2>:
    1384:	50 95       	com	r21
    1386:	40 95       	com	r20
    1388:	30 95       	com	r19
    138a:	21 95       	neg	r18
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	4f 4f       	sbci	r20, 0xFF	; 255
    1390:	5f 4f       	sbci	r21, 0xFF	; 255

00001392 <__divmodsi4_exit>:
    1392:	08 95       	ret

00001394 <__negsi2>:
    1394:	90 95       	com	r25
    1396:	80 95       	com	r24
    1398:	70 95       	com	r23
    139a:	61 95       	neg	r22
    139c:	7f 4f       	sbci	r23, 0xFF	; 255
    139e:	8f 4f       	sbci	r24, 0xFF	; 255
    13a0:	9f 4f       	sbci	r25, 0xFF	; 255
    13a2:	08 95       	ret

000013a4 <__tablejump2__>:
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	05 90       	lpm	r0, Z+
    13aa:	f4 91       	lpm	r31, Z
    13ac:	e0 2d       	mov	r30, r0
    13ae:	09 94       	ijmp

000013b0 <snprintf>:
    13b0:	ae e0       	ldi	r26, 0x0E	; 14
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ee ed       	ldi	r30, 0xDE	; 222
    13b6:	f9 e0       	ldi	r31, 0x09	; 9
    13b8:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__prologue_saves__+0x1c>
    13bc:	0d 89       	ldd	r16, Y+21	; 0x15
    13be:	1e 89       	ldd	r17, Y+22	; 0x16
    13c0:	8f 89       	ldd	r24, Y+23	; 0x17
    13c2:	98 8d       	ldd	r25, Y+24	; 0x18
    13c4:	26 e0       	ldi	r18, 0x06	; 6
    13c6:	2c 83       	std	Y+4, r18	; 0x04
    13c8:	1a 83       	std	Y+2, r17	; 0x02
    13ca:	09 83       	std	Y+1, r16	; 0x01
    13cc:	97 ff       	sbrs	r25, 7
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <snprintf+0x24>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e8       	ldi	r25, 0x80	; 128
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	9e 83       	std	Y+6, r25	; 0x06
    13d8:	8d 83       	std	Y+5, r24	; 0x05
    13da:	ae 01       	movw	r20, r28
    13dc:	45 5e       	subi	r20, 0xE5	; 229
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
    13e0:	69 8d       	ldd	r22, Y+25	; 0x19
    13e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e4:	ce 01       	movw	r24, r28
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	0e 94 08 0a 	call	0x1410	; 0x1410 <vfprintf>
    13ec:	4d 81       	ldd	r20, Y+5	; 0x05
    13ee:	5e 81       	ldd	r21, Y+6	; 0x06
    13f0:	57 fd       	sbrc	r21, 7
    13f2:	0a c0       	rjmp	.+20     	; 0x1408 <snprintf+0x58>
    13f4:	2f 81       	ldd	r18, Y+7	; 0x07
    13f6:	38 85       	ldd	r19, Y+8	; 0x08
    13f8:	42 17       	cp	r20, r18
    13fa:	53 07       	cpc	r21, r19
    13fc:	0c f4       	brge	.+2      	; 0x1400 <snprintf+0x50>
    13fe:	9a 01       	movw	r18, r20
    1400:	f8 01       	movw	r30, r16
    1402:	e2 0f       	add	r30, r18
    1404:	f3 1f       	adc	r31, r19
    1406:	10 82       	st	Z, r1
    1408:	2e 96       	adiw	r28, 0x0e	; 14
    140a:	e4 e0       	ldi	r30, 0x04	; 4
    140c:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__epilogue_restores__+0x1c>

00001410 <vfprintf>:
    1410:	ab e0       	ldi	r26, 0x0B	; 11
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ee e0       	ldi	r30, 0x0E	; 14
    1416:	fa e0       	ldi	r31, 0x0A	; 10
    1418:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__prologue_saves__>
    141c:	6c 01       	movw	r12, r24
    141e:	7b 01       	movw	r14, r22
    1420:	8a 01       	movw	r16, r20
    1422:	fc 01       	movw	r30, r24
    1424:	17 82       	std	Z+7, r1	; 0x07
    1426:	16 82       	std	Z+6, r1	; 0x06
    1428:	83 81       	ldd	r24, Z+3	; 0x03
    142a:	81 ff       	sbrs	r24, 1
    142c:	cc c1       	rjmp	.+920    	; 0x17c6 <vfprintf+0x3b6>
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	3c 01       	movw	r6, r24
    1434:	f6 01       	movw	r30, r12
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	f7 01       	movw	r30, r14
    143a:	93 fd       	sbrc	r25, 3
    143c:	85 91       	lpm	r24, Z+
    143e:	93 ff       	sbrs	r25, 3
    1440:	81 91       	ld	r24, Z+
    1442:	7f 01       	movw	r14, r30
    1444:	88 23       	and	r24, r24
    1446:	09 f4       	brne	.+2      	; 0x144a <vfprintf+0x3a>
    1448:	ba c1       	rjmp	.+884    	; 0x17be <vfprintf+0x3ae>
    144a:	85 32       	cpi	r24, 0x25	; 37
    144c:	39 f4       	brne	.+14     	; 0x145c <vfprintf+0x4c>
    144e:	93 fd       	sbrc	r25, 3
    1450:	85 91       	lpm	r24, Z+
    1452:	93 ff       	sbrs	r25, 3
    1454:	81 91       	ld	r24, Z+
    1456:	7f 01       	movw	r14, r30
    1458:	85 32       	cpi	r24, 0x25	; 37
    145a:	29 f4       	brne	.+10     	; 0x1466 <vfprintf+0x56>
    145c:	b6 01       	movw	r22, r12
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1464:	e7 cf       	rjmp	.-50     	; 0x1434 <vfprintf+0x24>
    1466:	91 2c       	mov	r9, r1
    1468:	21 2c       	mov	r2, r1
    146a:	31 2c       	mov	r3, r1
    146c:	ff e1       	ldi	r31, 0x1F	; 31
    146e:	f3 15       	cp	r31, r3
    1470:	d8 f0       	brcs	.+54     	; 0x14a8 <vfprintf+0x98>
    1472:	8b 32       	cpi	r24, 0x2B	; 43
    1474:	79 f0       	breq	.+30     	; 0x1494 <vfprintf+0x84>
    1476:	38 f4       	brcc	.+14     	; 0x1486 <vfprintf+0x76>
    1478:	80 32       	cpi	r24, 0x20	; 32
    147a:	79 f0       	breq	.+30     	; 0x149a <vfprintf+0x8a>
    147c:	83 32       	cpi	r24, 0x23	; 35
    147e:	a1 f4       	brne	.+40     	; 0x14a8 <vfprintf+0x98>
    1480:	23 2d       	mov	r18, r3
    1482:	20 61       	ori	r18, 0x10	; 16
    1484:	1d c0       	rjmp	.+58     	; 0x14c0 <vfprintf+0xb0>
    1486:	8d 32       	cpi	r24, 0x2D	; 45
    1488:	61 f0       	breq	.+24     	; 0x14a2 <vfprintf+0x92>
    148a:	80 33       	cpi	r24, 0x30	; 48
    148c:	69 f4       	brne	.+26     	; 0x14a8 <vfprintf+0x98>
    148e:	23 2d       	mov	r18, r3
    1490:	21 60       	ori	r18, 0x01	; 1
    1492:	16 c0       	rjmp	.+44     	; 0x14c0 <vfprintf+0xb0>
    1494:	83 2d       	mov	r24, r3
    1496:	82 60       	ori	r24, 0x02	; 2
    1498:	38 2e       	mov	r3, r24
    149a:	e3 2d       	mov	r30, r3
    149c:	e4 60       	ori	r30, 0x04	; 4
    149e:	3e 2e       	mov	r3, r30
    14a0:	2a c0       	rjmp	.+84     	; 0x14f6 <vfprintf+0xe6>
    14a2:	f3 2d       	mov	r31, r3
    14a4:	f8 60       	ori	r31, 0x08	; 8
    14a6:	1d c0       	rjmp	.+58     	; 0x14e2 <vfprintf+0xd2>
    14a8:	37 fc       	sbrc	r3, 7
    14aa:	2d c0       	rjmp	.+90     	; 0x1506 <vfprintf+0xf6>
    14ac:	20 ed       	ldi	r18, 0xD0	; 208
    14ae:	28 0f       	add	r18, r24
    14b0:	2a 30       	cpi	r18, 0x0A	; 10
    14b2:	40 f0       	brcs	.+16     	; 0x14c4 <vfprintf+0xb4>
    14b4:	8e 32       	cpi	r24, 0x2E	; 46
    14b6:	b9 f4       	brne	.+46     	; 0x14e6 <vfprintf+0xd6>
    14b8:	36 fc       	sbrc	r3, 6
    14ba:	81 c1       	rjmp	.+770    	; 0x17be <vfprintf+0x3ae>
    14bc:	23 2d       	mov	r18, r3
    14be:	20 64       	ori	r18, 0x40	; 64
    14c0:	32 2e       	mov	r3, r18
    14c2:	19 c0       	rjmp	.+50     	; 0x14f6 <vfprintf+0xe6>
    14c4:	36 fe       	sbrs	r3, 6
    14c6:	06 c0       	rjmp	.+12     	; 0x14d4 <vfprintf+0xc4>
    14c8:	8a e0       	ldi	r24, 0x0A	; 10
    14ca:	98 9e       	mul	r9, r24
    14cc:	20 0d       	add	r18, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	92 2e       	mov	r9, r18
    14d2:	11 c0       	rjmp	.+34     	; 0x14f6 <vfprintf+0xe6>
    14d4:	ea e0       	ldi	r30, 0x0A	; 10
    14d6:	2e 9e       	mul	r2, r30
    14d8:	20 0d       	add	r18, r0
    14da:	11 24       	eor	r1, r1
    14dc:	22 2e       	mov	r2, r18
    14de:	f3 2d       	mov	r31, r3
    14e0:	f0 62       	ori	r31, 0x20	; 32
    14e2:	3f 2e       	mov	r3, r31
    14e4:	08 c0       	rjmp	.+16     	; 0x14f6 <vfprintf+0xe6>
    14e6:	8c 36       	cpi	r24, 0x6C	; 108
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <vfprintf+0xe2>
    14ea:	83 2d       	mov	r24, r3
    14ec:	80 68       	ori	r24, 0x80	; 128
    14ee:	38 2e       	mov	r3, r24
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vfprintf+0xe6>
    14f2:	88 36       	cpi	r24, 0x68	; 104
    14f4:	41 f4       	brne	.+16     	; 0x1506 <vfprintf+0xf6>
    14f6:	f7 01       	movw	r30, r14
    14f8:	93 fd       	sbrc	r25, 3
    14fa:	85 91       	lpm	r24, Z+
    14fc:	93 ff       	sbrs	r25, 3
    14fe:	81 91       	ld	r24, Z+
    1500:	7f 01       	movw	r14, r30
    1502:	81 11       	cpse	r24, r1
    1504:	b3 cf       	rjmp	.-154    	; 0x146c <vfprintf+0x5c>
    1506:	98 2f       	mov	r25, r24
    1508:	9f 7d       	andi	r25, 0xDF	; 223
    150a:	95 54       	subi	r25, 0x45	; 69
    150c:	93 30       	cpi	r25, 0x03	; 3
    150e:	28 f4       	brcc	.+10     	; 0x151a <vfprintf+0x10a>
    1510:	0c 5f       	subi	r16, 0xFC	; 252
    1512:	1f 4f       	sbci	r17, 0xFF	; 255
    1514:	9f e3       	ldi	r25, 0x3F	; 63
    1516:	99 83       	std	Y+1, r25	; 0x01
    1518:	0d c0       	rjmp	.+26     	; 0x1534 <vfprintf+0x124>
    151a:	83 36       	cpi	r24, 0x63	; 99
    151c:	31 f0       	breq	.+12     	; 0x152a <vfprintf+0x11a>
    151e:	83 37       	cpi	r24, 0x73	; 115
    1520:	71 f0       	breq	.+28     	; 0x153e <vfprintf+0x12e>
    1522:	83 35       	cpi	r24, 0x53	; 83
    1524:	09 f0       	breq	.+2      	; 0x1528 <vfprintf+0x118>
    1526:	59 c0       	rjmp	.+178    	; 0x15da <vfprintf+0x1ca>
    1528:	21 c0       	rjmp	.+66     	; 0x156c <vfprintf+0x15c>
    152a:	f8 01       	movw	r30, r16
    152c:	80 81       	ld	r24, Z
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	0e 5f       	subi	r16, 0xFE	; 254
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
    1534:	88 24       	eor	r8, r8
    1536:	83 94       	inc	r8
    1538:	91 2c       	mov	r9, r1
    153a:	53 01       	movw	r10, r6
    153c:	13 c0       	rjmp	.+38     	; 0x1564 <vfprintf+0x154>
    153e:	28 01       	movw	r4, r16
    1540:	f2 e0       	ldi	r31, 0x02	; 2
    1542:	4f 0e       	add	r4, r31
    1544:	51 1c       	adc	r5, r1
    1546:	f8 01       	movw	r30, r16
    1548:	a0 80       	ld	r10, Z
    154a:	b1 80       	ldd	r11, Z+1	; 0x01
    154c:	36 fe       	sbrs	r3, 6
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <vfprintf+0x146>
    1550:	69 2d       	mov	r22, r9
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	02 c0       	rjmp	.+4      	; 0x155a <vfprintf+0x14a>
    1556:	6f ef       	ldi	r22, 0xFF	; 255
    1558:	7f ef       	ldi	r23, 0xFF	; 255
    155a:	c5 01       	movw	r24, r10
    155c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <strnlen>
    1560:	4c 01       	movw	r8, r24
    1562:	82 01       	movw	r16, r4
    1564:	f3 2d       	mov	r31, r3
    1566:	ff 77       	andi	r31, 0x7F	; 127
    1568:	3f 2e       	mov	r3, r31
    156a:	16 c0       	rjmp	.+44     	; 0x1598 <vfprintf+0x188>
    156c:	28 01       	movw	r4, r16
    156e:	22 e0       	ldi	r18, 0x02	; 2
    1570:	42 0e       	add	r4, r18
    1572:	51 1c       	adc	r5, r1
    1574:	f8 01       	movw	r30, r16
    1576:	a0 80       	ld	r10, Z
    1578:	b1 80       	ldd	r11, Z+1	; 0x01
    157a:	36 fe       	sbrs	r3, 6
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <vfprintf+0x174>
    157e:	69 2d       	mov	r22, r9
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <vfprintf+0x178>
    1584:	6f ef       	ldi	r22, 0xFF	; 255
    1586:	7f ef       	ldi	r23, 0xFF	; 255
    1588:	c5 01       	movw	r24, r10
    158a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <strnlen_P>
    158e:	4c 01       	movw	r8, r24
    1590:	f3 2d       	mov	r31, r3
    1592:	f0 68       	ori	r31, 0x80	; 128
    1594:	3f 2e       	mov	r3, r31
    1596:	82 01       	movw	r16, r4
    1598:	33 fc       	sbrc	r3, 3
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <vfprintf+0x1c2>
    159c:	82 2d       	mov	r24, r2
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	88 16       	cp	r8, r24
    15a2:	99 06       	cpc	r9, r25
    15a4:	b0 f4       	brcc	.+44     	; 0x15d2 <vfprintf+0x1c2>
    15a6:	b6 01       	movw	r22, r12
    15a8:	80 e2       	ldi	r24, 0x20	; 32
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    15b0:	2a 94       	dec	r2
    15b2:	f4 cf       	rjmp	.-24     	; 0x159c <vfprintf+0x18c>
    15b4:	f5 01       	movw	r30, r10
    15b6:	37 fc       	sbrc	r3, 7
    15b8:	85 91       	lpm	r24, Z+
    15ba:	37 fe       	sbrs	r3, 7
    15bc:	81 91       	ld	r24, Z+
    15be:	5f 01       	movw	r10, r30
    15c0:	b6 01       	movw	r22, r12
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    15c8:	21 10       	cpse	r2, r1
    15ca:	2a 94       	dec	r2
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	82 1a       	sub	r8, r18
    15d0:	91 08       	sbc	r9, r1
    15d2:	81 14       	cp	r8, r1
    15d4:	91 04       	cpc	r9, r1
    15d6:	71 f7       	brne	.-36     	; 0x15b4 <vfprintf+0x1a4>
    15d8:	e8 c0       	rjmp	.+464    	; 0x17aa <vfprintf+0x39a>
    15da:	84 36       	cpi	r24, 0x64	; 100
    15dc:	11 f0       	breq	.+4      	; 0x15e2 <vfprintf+0x1d2>
    15de:	89 36       	cpi	r24, 0x69	; 105
    15e0:	41 f5       	brne	.+80     	; 0x1632 <vfprintf+0x222>
    15e2:	f8 01       	movw	r30, r16
    15e4:	37 fe       	sbrs	r3, 7
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <vfprintf+0x1e6>
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	0c 5f       	subi	r16, 0xFC	; 252
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	08 c0       	rjmp	.+16     	; 0x1606 <vfprintf+0x1f6>
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	07 2e       	mov	r0, r23
    15fc:	00 0c       	add	r0, r0
    15fe:	88 0b       	sbc	r24, r24
    1600:	99 0b       	sbc	r25, r25
    1602:	0e 5f       	subi	r16, 0xFE	; 254
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	f3 2d       	mov	r31, r3
    1608:	ff 76       	andi	r31, 0x6F	; 111
    160a:	3f 2e       	mov	r3, r31
    160c:	97 ff       	sbrs	r25, 7
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <vfprintf+0x212>
    1610:	90 95       	com	r25
    1612:	80 95       	com	r24
    1614:	70 95       	com	r23
    1616:	61 95       	neg	r22
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	8f 4f       	sbci	r24, 0xFF	; 255
    161c:	9f 4f       	sbci	r25, 0xFF	; 255
    161e:	f0 68       	ori	r31, 0x80	; 128
    1620:	3f 2e       	mov	r3, r31
    1622:	2a e0       	ldi	r18, 0x0A	; 10
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	a3 01       	movw	r20, r6
    1628:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__ultoa_invert>
    162c:	88 2e       	mov	r8, r24
    162e:	86 18       	sub	r8, r6
    1630:	45 c0       	rjmp	.+138    	; 0x16bc <vfprintf+0x2ac>
    1632:	85 37       	cpi	r24, 0x75	; 117
    1634:	31 f4       	brne	.+12     	; 0x1642 <vfprintf+0x232>
    1636:	23 2d       	mov	r18, r3
    1638:	2f 7e       	andi	r18, 0xEF	; 239
    163a:	b2 2e       	mov	r11, r18
    163c:	2a e0       	ldi	r18, 0x0A	; 10
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	25 c0       	rjmp	.+74     	; 0x168c <vfprintf+0x27c>
    1642:	93 2d       	mov	r25, r3
    1644:	99 7f       	andi	r25, 0xF9	; 249
    1646:	b9 2e       	mov	r11, r25
    1648:	8f 36       	cpi	r24, 0x6F	; 111
    164a:	c1 f0       	breq	.+48     	; 0x167c <vfprintf+0x26c>
    164c:	18 f4       	brcc	.+6      	; 0x1654 <vfprintf+0x244>
    164e:	88 35       	cpi	r24, 0x58	; 88
    1650:	79 f0       	breq	.+30     	; 0x1670 <vfprintf+0x260>
    1652:	b5 c0       	rjmp	.+362    	; 0x17be <vfprintf+0x3ae>
    1654:	80 37       	cpi	r24, 0x70	; 112
    1656:	19 f0       	breq	.+6      	; 0x165e <vfprintf+0x24e>
    1658:	88 37       	cpi	r24, 0x78	; 120
    165a:	21 f0       	breq	.+8      	; 0x1664 <vfprintf+0x254>
    165c:	b0 c0       	rjmp	.+352    	; 0x17be <vfprintf+0x3ae>
    165e:	e9 2f       	mov	r30, r25
    1660:	e0 61       	ori	r30, 0x10	; 16
    1662:	be 2e       	mov	r11, r30
    1664:	b4 fe       	sbrs	r11, 4
    1666:	0d c0       	rjmp	.+26     	; 0x1682 <vfprintf+0x272>
    1668:	fb 2d       	mov	r31, r11
    166a:	f4 60       	ori	r31, 0x04	; 4
    166c:	bf 2e       	mov	r11, r31
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <vfprintf+0x272>
    1670:	34 fe       	sbrs	r3, 4
    1672:	0a c0       	rjmp	.+20     	; 0x1688 <vfprintf+0x278>
    1674:	29 2f       	mov	r18, r25
    1676:	26 60       	ori	r18, 0x06	; 6
    1678:	b2 2e       	mov	r11, r18
    167a:	06 c0       	rjmp	.+12     	; 0x1688 <vfprintf+0x278>
    167c:	28 e0       	ldi	r18, 0x08	; 8
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	05 c0       	rjmp	.+10     	; 0x168c <vfprintf+0x27c>
    1682:	20 e1       	ldi	r18, 0x10	; 16
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	02 c0       	rjmp	.+4      	; 0x168c <vfprintf+0x27c>
    1688:	20 e1       	ldi	r18, 0x10	; 16
    168a:	32 e0       	ldi	r19, 0x02	; 2
    168c:	f8 01       	movw	r30, r16
    168e:	b7 fe       	sbrs	r11, 7
    1690:	07 c0       	rjmp	.+14     	; 0x16a0 <vfprintf+0x290>
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	0c 5f       	subi	r16, 0xFC	; 252
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0x29c>
    16a0:	60 81       	ld	r22, Z
    16a2:	71 81       	ldd	r23, Z+1	; 0x01
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 5f       	subi	r16, 0xFE	; 254
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	a3 01       	movw	r20, r6
    16ae:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__ultoa_invert>
    16b2:	88 2e       	mov	r8, r24
    16b4:	86 18       	sub	r8, r6
    16b6:	fb 2d       	mov	r31, r11
    16b8:	ff 77       	andi	r31, 0x7F	; 127
    16ba:	3f 2e       	mov	r3, r31
    16bc:	36 fe       	sbrs	r3, 6
    16be:	0d c0       	rjmp	.+26     	; 0x16da <vfprintf+0x2ca>
    16c0:	23 2d       	mov	r18, r3
    16c2:	2e 7f       	andi	r18, 0xFE	; 254
    16c4:	a2 2e       	mov	r10, r18
    16c6:	89 14       	cp	r8, r9
    16c8:	58 f4       	brcc	.+22     	; 0x16e0 <vfprintf+0x2d0>
    16ca:	34 fe       	sbrs	r3, 4
    16cc:	0b c0       	rjmp	.+22     	; 0x16e4 <vfprintf+0x2d4>
    16ce:	32 fc       	sbrc	r3, 2
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <vfprintf+0x2d4>
    16d2:	83 2d       	mov	r24, r3
    16d4:	8e 7e       	andi	r24, 0xEE	; 238
    16d6:	a8 2e       	mov	r10, r24
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <vfprintf+0x2d4>
    16da:	b8 2c       	mov	r11, r8
    16dc:	a3 2c       	mov	r10, r3
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <vfprintf+0x2d6>
    16e0:	b8 2c       	mov	r11, r8
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <vfprintf+0x2d6>
    16e4:	b9 2c       	mov	r11, r9
    16e6:	a4 fe       	sbrs	r10, 4
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <vfprintf+0x2f8>
    16ea:	fe 01       	movw	r30, r28
    16ec:	e8 0d       	add	r30, r8
    16ee:	f1 1d       	adc	r31, r1
    16f0:	80 81       	ld	r24, Z
    16f2:	80 33       	cpi	r24, 0x30	; 48
    16f4:	21 f4       	brne	.+8      	; 0x16fe <vfprintf+0x2ee>
    16f6:	9a 2d       	mov	r25, r10
    16f8:	99 7e       	andi	r25, 0xE9	; 233
    16fa:	a9 2e       	mov	r10, r25
    16fc:	09 c0       	rjmp	.+18     	; 0x1710 <vfprintf+0x300>
    16fe:	a2 fe       	sbrs	r10, 2
    1700:	06 c0       	rjmp	.+12     	; 0x170e <vfprintf+0x2fe>
    1702:	b3 94       	inc	r11
    1704:	b3 94       	inc	r11
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <vfprintf+0x300>
    1708:	8a 2d       	mov	r24, r10
    170a:	86 78       	andi	r24, 0x86	; 134
    170c:	09 f0       	breq	.+2      	; 0x1710 <vfprintf+0x300>
    170e:	b3 94       	inc	r11
    1710:	a3 fc       	sbrc	r10, 3
    1712:	11 c0       	rjmp	.+34     	; 0x1736 <vfprintf+0x326>
    1714:	a0 fe       	sbrs	r10, 0
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <vfprintf+0x314>
    1718:	b2 14       	cp	r11, r2
    171a:	88 f4       	brcc	.+34     	; 0x173e <vfprintf+0x32e>
    171c:	28 0c       	add	r2, r8
    171e:	92 2c       	mov	r9, r2
    1720:	9b 18       	sub	r9, r11
    1722:	0e c0       	rjmp	.+28     	; 0x1740 <vfprintf+0x330>
    1724:	b2 14       	cp	r11, r2
    1726:	60 f4       	brcc	.+24     	; 0x1740 <vfprintf+0x330>
    1728:	b6 01       	movw	r22, r12
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1732:	b3 94       	inc	r11
    1734:	f7 cf       	rjmp	.-18     	; 0x1724 <vfprintf+0x314>
    1736:	b2 14       	cp	r11, r2
    1738:	18 f4       	brcc	.+6      	; 0x1740 <vfprintf+0x330>
    173a:	2b 18       	sub	r2, r11
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0x332>
    173e:	98 2c       	mov	r9, r8
    1740:	21 2c       	mov	r2, r1
    1742:	a4 fe       	sbrs	r10, 4
    1744:	10 c0       	rjmp	.+32     	; 0x1766 <vfprintf+0x356>
    1746:	b6 01       	movw	r22, r12
    1748:	80 e3       	ldi	r24, 0x30	; 48
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1750:	a2 fe       	sbrs	r10, 2
    1752:	17 c0       	rjmp	.+46     	; 0x1782 <vfprintf+0x372>
    1754:	a1 fc       	sbrc	r10, 1
    1756:	03 c0       	rjmp	.+6      	; 0x175e <vfprintf+0x34e>
    1758:	88 e7       	ldi	r24, 0x78	; 120
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <vfprintf+0x352>
    175e:	88 e5       	ldi	r24, 0x58	; 88
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	b6 01       	movw	r22, r12
    1764:	0c c0       	rjmp	.+24     	; 0x177e <vfprintf+0x36e>
    1766:	8a 2d       	mov	r24, r10
    1768:	86 78       	andi	r24, 0x86	; 134
    176a:	59 f0       	breq	.+22     	; 0x1782 <vfprintf+0x372>
    176c:	a1 fe       	sbrs	r10, 1
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x364>
    1770:	8b e2       	ldi	r24, 0x2B	; 43
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <vfprintf+0x366>
    1774:	80 e2       	ldi	r24, 0x20	; 32
    1776:	a7 fc       	sbrc	r10, 7
    1778:	8d e2       	ldi	r24, 0x2D	; 45
    177a:	b6 01       	movw	r22, r12
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1782:	89 14       	cp	r8, r9
    1784:	38 f4       	brcc	.+14     	; 0x1794 <vfprintf+0x384>
    1786:	b6 01       	movw	r22, r12
    1788:	80 e3       	ldi	r24, 0x30	; 48
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    1790:	9a 94       	dec	r9
    1792:	f7 cf       	rjmp	.-18     	; 0x1782 <vfprintf+0x372>
    1794:	8a 94       	dec	r8
    1796:	f3 01       	movw	r30, r6
    1798:	e8 0d       	add	r30, r8
    179a:	f1 1d       	adc	r31, r1
    179c:	80 81       	ld	r24, Z
    179e:	b6 01       	movw	r22, r12
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    17a6:	81 10       	cpse	r8, r1
    17a8:	f5 cf       	rjmp	.-22     	; 0x1794 <vfprintf+0x384>
    17aa:	22 20       	and	r2, r2
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <vfprintf+0x3a0>
    17ae:	42 ce       	rjmp	.-892    	; 0x1434 <vfprintf+0x24>
    17b0:	b6 01       	movw	r22, r12
    17b2:	80 e2       	ldi	r24, 0x20	; 32
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <fputc>
    17ba:	2a 94       	dec	r2
    17bc:	f6 cf       	rjmp	.-20     	; 0x17aa <vfprintf+0x39a>
    17be:	f6 01       	movw	r30, r12
    17c0:	86 81       	ldd	r24, Z+6	; 0x06
    17c2:	97 81       	ldd	r25, Z+7	; 0x07
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <vfprintf+0x3ba>
    17c6:	8f ef       	ldi	r24, 0xFF	; 255
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
    17ca:	2b 96       	adiw	r28, 0x0b	; 11
    17cc:	e2 e1       	ldi	r30, 0x12	; 18
    17ce:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__epilogue_restores__>

000017d2 <strnlen_P>:
    17d2:	fc 01       	movw	r30, r24
    17d4:	05 90       	lpm	r0, Z+
    17d6:	61 50       	subi	r22, 0x01	; 1
    17d8:	70 40       	sbci	r23, 0x00	; 0
    17da:	01 10       	cpse	r0, r1
    17dc:	d8 f7       	brcc	.-10     	; 0x17d4 <strnlen_P+0x2>
    17de:	80 95       	com	r24
    17e0:	90 95       	com	r25
    17e2:	8e 0f       	add	r24, r30
    17e4:	9f 1f       	adc	r25, r31
    17e6:	08 95       	ret

000017e8 <strnlen>:
    17e8:	fc 01       	movw	r30, r24
    17ea:	61 50       	subi	r22, 0x01	; 1
    17ec:	70 40       	sbci	r23, 0x00	; 0
    17ee:	01 90       	ld	r0, Z+
    17f0:	01 10       	cpse	r0, r1
    17f2:	d8 f7       	brcc	.-10     	; 0x17ea <strnlen+0x2>
    17f4:	80 95       	com	r24
    17f6:	90 95       	com	r25
    17f8:	8e 0f       	add	r24, r30
    17fa:	9f 1f       	adc	r25, r31
    17fc:	08 95       	ret

000017fe <fputc>:
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	fb 01       	movw	r30, r22
    1808:	23 81       	ldd	r18, Z+3	; 0x03
    180a:	21 fd       	sbrc	r18, 1
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <fputc+0x16>
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	9f ef       	ldi	r25, 0xFF	; 255
    1812:	2c c0       	rjmp	.+88     	; 0x186c <fputc+0x6e>
    1814:	22 ff       	sbrs	r18, 2
    1816:	16 c0       	rjmp	.+44     	; 0x1844 <fputc+0x46>
    1818:	46 81       	ldd	r20, Z+6	; 0x06
    181a:	57 81       	ldd	r21, Z+7	; 0x07
    181c:	24 81       	ldd	r18, Z+4	; 0x04
    181e:	35 81       	ldd	r19, Z+5	; 0x05
    1820:	42 17       	cp	r20, r18
    1822:	53 07       	cpc	r21, r19
    1824:	44 f4       	brge	.+16     	; 0x1836 <fputc+0x38>
    1826:	a0 81       	ld	r26, Z
    1828:	b1 81       	ldd	r27, Z+1	; 0x01
    182a:	9d 01       	movw	r18, r26
    182c:	2f 5f       	subi	r18, 0xFF	; 255
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	31 83       	std	Z+1, r19	; 0x01
    1832:	20 83       	st	Z, r18
    1834:	8c 93       	st	X, r24
    1836:	26 81       	ldd	r18, Z+6	; 0x06
    1838:	37 81       	ldd	r19, Z+7	; 0x07
    183a:	2f 5f       	subi	r18, 0xFF	; 255
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	37 83       	std	Z+7, r19	; 0x07
    1840:	26 83       	std	Z+6, r18	; 0x06
    1842:	14 c0       	rjmp	.+40     	; 0x186c <fputc+0x6e>
    1844:	8b 01       	movw	r16, r22
    1846:	ec 01       	movw	r28, r24
    1848:	fb 01       	movw	r30, r22
    184a:	00 84       	ldd	r0, Z+8	; 0x08
    184c:	f1 85       	ldd	r31, Z+9	; 0x09
    184e:	e0 2d       	mov	r30, r0
    1850:	09 95       	icall
    1852:	89 2b       	or	r24, r25
    1854:	e1 f6       	brne	.-72     	; 0x180e <fputc+0x10>
    1856:	d8 01       	movw	r26, r16
    1858:	16 96       	adiw	r26, 0x06	; 6
    185a:	8d 91       	ld	r24, X+
    185c:	9c 91       	ld	r25, X
    185e:	17 97       	sbiw	r26, 0x07	; 7
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	17 96       	adiw	r26, 0x07	; 7
    1864:	9c 93       	st	X, r25
    1866:	8e 93       	st	-X, r24
    1868:	16 97       	sbiw	r26, 0x06	; 6
    186a:	ce 01       	movw	r24, r28
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	08 95       	ret

00001876 <__ultoa_invert>:
    1876:	fa 01       	movw	r30, r20
    1878:	aa 27       	eor	r26, r26
    187a:	28 30       	cpi	r18, 0x08	; 8
    187c:	51 f1       	breq	.+84     	; 0x18d2 <__ultoa_invert+0x5c>
    187e:	20 31       	cpi	r18, 0x10	; 16
    1880:	81 f1       	breq	.+96     	; 0x18e2 <__ultoa_invert+0x6c>
    1882:	e8 94       	clt
    1884:	6f 93       	push	r22
    1886:	6e 7f       	andi	r22, 0xFE	; 254
    1888:	6e 5f       	subi	r22, 0xFE	; 254
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	8f 4f       	sbci	r24, 0xFF	; 255
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	af 4f       	sbci	r26, 0xFF	; 255
    1892:	b1 e0       	ldi	r27, 0x01	; 1
    1894:	3e d0       	rcall	.+124    	; 0x1912 <__ultoa_invert+0x9c>
    1896:	b4 e0       	ldi	r27, 0x04	; 4
    1898:	3c d0       	rcall	.+120    	; 0x1912 <__ultoa_invert+0x9c>
    189a:	67 0f       	add	r22, r23
    189c:	78 1f       	adc	r23, r24
    189e:	89 1f       	adc	r24, r25
    18a0:	9a 1f       	adc	r25, r26
    18a2:	a1 1d       	adc	r26, r1
    18a4:	68 0f       	add	r22, r24
    18a6:	79 1f       	adc	r23, r25
    18a8:	8a 1f       	adc	r24, r26
    18aa:	91 1d       	adc	r25, r1
    18ac:	a1 1d       	adc	r26, r1
    18ae:	6a 0f       	add	r22, r26
    18b0:	71 1d       	adc	r23, r1
    18b2:	81 1d       	adc	r24, r1
    18b4:	91 1d       	adc	r25, r1
    18b6:	a1 1d       	adc	r26, r1
    18b8:	20 d0       	rcall	.+64     	; 0x18fa <__ultoa_invert+0x84>
    18ba:	09 f4       	brne	.+2      	; 0x18be <__ultoa_invert+0x48>
    18bc:	68 94       	set
    18be:	3f 91       	pop	r19
    18c0:	2a e0       	ldi	r18, 0x0A	; 10
    18c2:	26 9f       	mul	r18, r22
    18c4:	11 24       	eor	r1, r1
    18c6:	30 19       	sub	r19, r0
    18c8:	30 5d       	subi	r19, 0xD0	; 208
    18ca:	31 93       	st	Z+, r19
    18cc:	de f6       	brtc	.-74     	; 0x1884 <__ultoa_invert+0xe>
    18ce:	cf 01       	movw	r24, r30
    18d0:	08 95       	ret
    18d2:	46 2f       	mov	r20, r22
    18d4:	47 70       	andi	r20, 0x07	; 7
    18d6:	40 5d       	subi	r20, 0xD0	; 208
    18d8:	41 93       	st	Z+, r20
    18da:	b3 e0       	ldi	r27, 0x03	; 3
    18dc:	0f d0       	rcall	.+30     	; 0x18fc <__ultoa_invert+0x86>
    18de:	c9 f7       	brne	.-14     	; 0x18d2 <__ultoa_invert+0x5c>
    18e0:	f6 cf       	rjmp	.-20     	; 0x18ce <__ultoa_invert+0x58>
    18e2:	46 2f       	mov	r20, r22
    18e4:	4f 70       	andi	r20, 0x0F	; 15
    18e6:	40 5d       	subi	r20, 0xD0	; 208
    18e8:	4a 33       	cpi	r20, 0x3A	; 58
    18ea:	18 f0       	brcs	.+6      	; 0x18f2 <__ultoa_invert+0x7c>
    18ec:	49 5d       	subi	r20, 0xD9	; 217
    18ee:	31 fd       	sbrc	r19, 1
    18f0:	40 52       	subi	r20, 0x20	; 32
    18f2:	41 93       	st	Z+, r20
    18f4:	02 d0       	rcall	.+4      	; 0x18fa <__ultoa_invert+0x84>
    18f6:	a9 f7       	brne	.-22     	; 0x18e2 <__ultoa_invert+0x6c>
    18f8:	ea cf       	rjmp	.-44     	; 0x18ce <__ultoa_invert+0x58>
    18fa:	b4 e0       	ldi	r27, 0x04	; 4
    18fc:	a6 95       	lsr	r26
    18fe:	97 95       	ror	r25
    1900:	87 95       	ror	r24
    1902:	77 95       	ror	r23
    1904:	67 95       	ror	r22
    1906:	ba 95       	dec	r27
    1908:	c9 f7       	brne	.-14     	; 0x18fc <__ultoa_invert+0x86>
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	61 05       	cpc	r22, r1
    190e:	71 05       	cpc	r23, r1
    1910:	08 95       	ret
    1912:	9b 01       	movw	r18, r22
    1914:	ac 01       	movw	r20, r24
    1916:	0a 2e       	mov	r0, r26
    1918:	06 94       	lsr	r0
    191a:	57 95       	ror	r21
    191c:	47 95       	ror	r20
    191e:	37 95       	ror	r19
    1920:	27 95       	ror	r18
    1922:	ba 95       	dec	r27
    1924:	c9 f7       	brne	.-14     	; 0x1918 <__ultoa_invert+0xa2>
    1926:	62 0f       	add	r22, r18
    1928:	73 1f       	adc	r23, r19
    192a:	84 1f       	adc	r24, r20
    192c:	95 1f       	adc	r25, r21
    192e:	a0 1d       	adc	r26, r0
    1930:	08 95       	ret

00001932 <__prologue_saves__>:
    1932:	2f 92       	push	r2
    1934:	3f 92       	push	r3
    1936:	4f 92       	push	r4
    1938:	5f 92       	push	r5
    193a:	6f 92       	push	r6
    193c:	7f 92       	push	r7
    193e:	8f 92       	push	r8
    1940:	9f 92       	push	r9
    1942:	af 92       	push	r10
    1944:	bf 92       	push	r11
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	ca 1b       	sub	r28, r26
    195c:	db 0b       	sbc	r29, r27
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	09 94       	ijmp

0000196a <__epilogue_restores__>:
    196a:	2a 88       	ldd	r2, Y+18	; 0x12
    196c:	39 88       	ldd	r3, Y+17	; 0x11
    196e:	48 88       	ldd	r4, Y+16	; 0x10
    1970:	5f 84       	ldd	r5, Y+15	; 0x0f
    1972:	6e 84       	ldd	r6, Y+14	; 0x0e
    1974:	7d 84       	ldd	r7, Y+13	; 0x0d
    1976:	8c 84       	ldd	r8, Y+12	; 0x0c
    1978:	9b 84       	ldd	r9, Y+11	; 0x0b
    197a:	aa 84       	ldd	r10, Y+10	; 0x0a
    197c:	b9 84       	ldd	r11, Y+9	; 0x09
    197e:	c8 84       	ldd	r12, Y+8	; 0x08
    1980:	df 80       	ldd	r13, Y+7	; 0x07
    1982:	ee 80       	ldd	r14, Y+6	; 0x06
    1984:	fd 80       	ldd	r15, Y+5	; 0x05
    1986:	0c 81       	ldd	r16, Y+4	; 0x04
    1988:	1b 81       	ldd	r17, Y+3	; 0x03
    198a:	aa 81       	ldd	r26, Y+2	; 0x02
    198c:	b9 81       	ldd	r27, Y+1	; 0x01
    198e:	ce 0f       	add	r28, r30
    1990:	d1 1d       	adc	r29, r1
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	ed 01       	movw	r28, r26
    199e:	08 95       	ret

000019a0 <_exit>:
    19a0:	f8 94       	cli

000019a2 <__stop_program>:
    19a2:	ff cf       	rjmp	.-2      	; 0x19a2 <__stop_program>
