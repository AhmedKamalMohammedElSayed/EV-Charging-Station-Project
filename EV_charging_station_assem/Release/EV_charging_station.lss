
EV_charging_station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  000054ac  00005540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006c2  00800134  00800134  00005614  2**0
                  ALLOC
  3 .stab         0000e040  00000000  00000000  00005614  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007341  00000000  00000000  00013654  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0001a995  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0001a9c8  2**2
                  CONTENTS, READONLY
  7 .avr.prop     0000002c  00000000  00000000  0001aa04  2**0
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0001aa30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  0001af16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0001b3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0001b3d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_1>
       8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_2>
       c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      10:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      14:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      18:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      1c:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__vector_7>
      20:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      24:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      28:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      34:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      3c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      44:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      4c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <notify+0x10>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
	...

000000ae <__trampolines_end>:
      ae:	00 40       	sbci	r16, 0x00	; 0
      b0:	7a 10       	cpse	r7, r10
      b2:	f3 5a       	subi	r31, 0xA3	; 163
      b4:	00 a0       	ldd	r0, Z+32	; 0x20
      b6:	72 4e       	sbci	r23, 0xE2	; 226
      b8:	18 09       	sbc	r17, r8
      ba:	00 10       	cpse	r0, r0
      bc:	a5 d4       	rcall	.+2378   	; 0xa08 <poll+0xc0>
      be:	e8 00       	.word	0x00e8	; ????
      c0:	00 e8       	ldi	r16, 0x80	; 128
      c2:	76 48       	sbci	r23, 0x86	; 134
      c4:	17 00       	.word	0x0017	; ????
      c6:	00 e4       	ldi	r16, 0x40	; 64
      c8:	0b 54       	subi	r16, 0x4B	; 75
      ca:	02 00       	.word	0x0002	; ????
      cc:	00 ca       	rjmp	.-3072   	; 0xfffff4ce <__eeprom_end+0xff7ef4ce>
      ce:	9a 3b       	cpi	r25, 0xBA	; 186
      d0:	00 00       	nop
      d2:	00 e1       	ldi	r16, 0x10	; 16
      d4:	f5 05       	cpc	r31, r5
      d6:	00 00       	nop
      d8:	80 96       	adiw	r24, 0x20	; 32
      da:	98 00       	.word	0x0098	; ????
      dc:	00 00       	nop
      de:	40 42       	sbci	r20, 0x20	; 32
      e0:	0f 00       	.word	0x000f	; ????
      e2:	00 00       	nop
      e4:	a0 86       	std	Z+8, r10	; 0x08
      e6:	01 00       	.word	0x0001	; ????
      e8:	00 00       	nop
      ea:	10 27       	eor	r17, r16
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	e8 03       	fmulsu	r22, r16
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	64 00       	.word	0x0064	; ????
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	0a 00       	.word	0x000a	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	2c 76       	andi	r18, 0x6C	; 108
     10a:	d8 88       	ldd	r13, Y+16	; 0x10
     10c:	dc 67       	ori	r29, 0x7C	; 124
     10e:	4f 08       	sbc	r4, r15
     110:	23 df       	rcall	.-442    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     112:	c1 df       	rcall	.-126    	; 0x96 <__SREG__+0x57>
     114:	ae 59       	subi	r26, 0x9E	; 158
     116:	e1 b1       	in	r30, 0x01	; 1
     118:	b7 96       	adiw	r30, 0x27	; 39
     11a:	e5 e3       	ldi	r30, 0x35	; 53
     11c:	e4 53       	subi	r30, 0x34	; 52
     11e:	c6 3a       	cpi	r28, 0xA6	; 166
     120:	e6 51       	subi	r30, 0x16	; 22
     122:	99 76       	andi	r25, 0x69	; 105
     124:	96 e8       	ldi	r25, 0x86	; 134
     126:	e6 c2       	rjmp	.+1484   	; 0x6f4 <ConfigurePins+0x4a>
     128:	84 26       	eor	r8, r20
     12a:	eb 89       	ldd	r30, Y+19	; 0x13
     12c:	8c 9b       	sbis	0x11, 4	; 17
     12e:	62 ed       	ldi	r22, 0xD2	; 210
     130:	40 7c       	andi	r20, 0xC0	; 192
     132:	6f fc       	.word	0xfc6f	; ????
     134:	ef bc       	out	0x2f, r14	; 47
     136:	9c 9f       	mul	r25, r28
     138:	40 f2       	brcs	.-112    	; 0xca <__trampolines_end+0x1c>
     13a:	ba a5       	ldd	r27, Y+42	; 0x2a
     13c:	6f a5       	ldd	r22, Y+47	; 0x2f
     13e:	f4 90       	lpm	r15, Z
     140:	05 5a       	subi	r16, 0xA5	; 165
     142:	2a f7       	brpl	.-54     	; 0x10e <__trampolines_end+0x60>
     144:	5c 93       	st	X, r21
     146:	6b 6c       	ori	r22, 0xCB	; 203
     148:	f9 67       	ori	r31, 0x79	; 121
     14a:	6d c1       	rjmp	.+730    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     14c:	1b fc       	.word	0xfc1b	; ????
     14e:	e0 e4       	ldi	r30, 0x40	; 64
     150:	0d 47       	sbci	r16, 0x7D	; 125
     152:	fe f5       	brtc	.+126    	; 0x1d2 <.do_clear_bss_loop>
     154:	20 e6       	ldi	r18, 0x60	; 96
     156:	b5 00       	.word	0x00b5	; ????
     158:	d0 ed       	ldi	r29, 0xD0	; 208
     15a:	90 2e       	mov	r9, r16
     15c:	03 00       	.word	0x0003	; ????
     15e:	94 35       	cpi	r25, 0x54	; 84
     160:	77 05       	cpc	r23, r7
     162:	00 80       	ld	r0, Z
     164:	84 1e       	adc	r8, r20
     166:	08 00       	.word	0x0008	; ????
     168:	00 20       	and	r0, r0
     16a:	4e 0a       	sbc	r4, r30
     16c:	00 00       	nop
     16e:	00 c8       	rjmp	.-4096   	; 0xfffff170 <__eeprom_end+0xff7ef170>
     170:	0c 33       	cpi	r16, 0x3C	; 60
     172:	33 33       	cpi	r19, 0x33	; 51
     174:	33 0f       	add	r19, r19
     176:	98 6e       	ori	r25, 0xE8	; 232
     178:	12 83       	std	Z+2, r17	; 0x02
     17a:	11 41       	sbci	r17, 0x11	; 17
     17c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     17e:	21 14       	cp	r2, r1
     180:	89 3b       	cpi	r24, 0xB9	; 185
     182:	e6 55       	subi	r30, 0x56	; 86
     184:	16 cf       	rjmp	.-468    	; 0xffffffb2 <__eeprom_end+0xff7effb2>
     186:	fe e6       	ldi	r31, 0x6E	; 110
     188:	db 18       	sub	r13, r11
     18a:	d1 84       	ldd	r13, Z+9	; 0x09
     18c:	4b 38       	cpi	r20, 0x8B	; 139
     18e:	1b f7       	brvc	.-58     	; 0x156 <__trampolines_end+0xa8>
     190:	7c 1d       	adc	r23, r12
     192:	90 1d       	adc	r25, r0
     194:	a4 bb       	out	0x14, r26	; 20
     196:	e4 24       	eor	r14, r4
     198:	20 32       	cpi	r18, 0x20	; 32
     19a:	84 72       	andi	r24, 0x24	; 36
     19c:	5e 22       	and	r5, r30
     19e:	81 00       	.word	0x0081	; ????
     1a0:	c9 f1       	breq	.+114    	; 0x214 <TaskDisplayRefresh+0x2e>
     1a2:	24 ec       	ldi	r18, 0xC4	; 196
     1a4:	a1 e5       	ldi	r26, 0x51	; 81
     1a6:	3d 27       	eor	r19, r29

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf e5       	ldi	r28, 0x5F	; 95
     1ae:	d8 e0       	ldi	r29, 0x08	; 8
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e6       	ldi	r26, 0x60	; 96
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	ec ea       	ldi	r30, 0xAC	; 172
     1bc:	f4 e5       	ldi	r31, 0x54	; 84
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
     1c0:	05 90       	lpm	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	a4 33       	cpi	r26, 0x34	; 52
     1c6:	b1 07       	cpc	r27, r17
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
     1ca:	27 e0       	ldi	r18, 0x07	; 7
     1cc:	a4 e3       	ldi	r26, 0x34	; 52
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
     1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
     1d4:	a6 3f       	cpi	r26, 0xF6	; 246
     1d6:	b2 07       	cpc	r27, r18
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
     1da:	0e 94 d7 24 	call	0x49ae	; 0x49ae <main>
     1de:	0c 94 54 2a 	jmp	0x54a8	; 0x54a8 <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e6 <TaskDisplayRefresh>:
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	28 97       	sbiw	r28, 0x08	; 8
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	86 9a       	sbi	0x10, 6	; 16
     1fc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <cap_percentage>
     200:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <cap_percentage+0x1>
     204:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <cap_percentage+0x2>
     208:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <cap_percentage+0x3>
     20c:	89 83       	std	Y+1, r24	; 0x01
     20e:	9a 83       	std	Y+2, r25	; 0x02
     210:	ab 83       	std	Y+3, r26	; 0x03
     212:	bc 83       	std	Y+4, r27	; 0x04
     214:	6f ef       	ldi	r22, 0xFF	; 255
     216:	7f ef       	ldi	r23, 0xFF	; 255
     218:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <stateSemaphore>
     21c:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <stateSemaphore+0x1>
     220:	0e 94 18 10 	call	0x2030	; 0x2030 <xQueueSemaphoreTake>
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	69 f4       	brne	.+26     	; 0x242 <TaskDisplayRefresh+0x5c>
     228:	10 91 35 01 	lds	r17, 0x0135	; 0x800135 <globalState>
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <stateSemaphore>
     23a:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <stateSemaphore+0x1>
     23e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <xQueueGenericSend>
     242:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     246:	81 13       	cpse	r24, r17
     248:	1d c0       	rjmp	.+58     	; 0x284 <TaskDisplayRefresh+0x9e>
     24a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     24e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     252:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_start+0x2>
     256:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_start+0x3>
     25a:	8d 83       	std	Y+5, r24	; 0x05
     25c:	9e 83       	std	Y+6, r25	; 0x06
     25e:	af 83       	std	Y+7, r26	; 0x07
     260:	b8 87       	std	Y+8, r27	; 0x08
     262:	29 81       	ldd	r18, Y+1	; 0x01
     264:	3a 81       	ldd	r19, Y+2	; 0x02
     266:	4b 81       	ldd	r20, Y+3	; 0x03
     268:	5c 81       	ldd	r21, Y+4	; 0x04
     26a:	6d 81       	ldd	r22, Y+5	; 0x05
     26c:	7e 81       	ldd	r23, Y+6	; 0x06
     26e:	8f 81       	ldd	r24, Y+7	; 0x07
     270:	98 85       	ldd	r25, Y+8	; 0x08
     272:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__cmpsf2>
     276:	81 11       	cpse	r24, r1
     278:	40 c0       	rjmp	.+128    	; 0x2fa <TaskDisplayRefresh+0x114>
     27a:	8a e5       	ldi	r24, 0x5A	; 90
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <vTaskDelay>
     282:	bb cf       	rjmp	.-138    	; 0x1fa <TaskDisplayRefresh+0x14>
     284:	0e 94 53 07 	call	0xea6	; 0xea6 <LCD_Clear>
     288:	8f e8       	ldi	r24, 0x8F	; 143
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_String>
     290:	11 30       	cpi	r17, 0x01	; 1
     292:	c9 f0       	breq	.+50     	; 0x2c6 <TaskDisplayRefresh+0xe0>
     294:	98 f0       	brcs	.+38     	; 0x2bc <TaskDisplayRefresh+0xd6>
     296:	12 30       	cpi	r17, 0x02	; 2
     298:	51 f1       	breq	.+84     	; 0x2ee <TaskDisplayRefresh+0x108>
     29a:	13 30       	cpi	r17, 0x03	; 3
     29c:	59 f1       	breq	.+86     	; 0x2f4 <TaskDisplayRefresh+0x10e>
     29e:	10 93 34 01 	sts	0x0134, r17	; 0x800134 <__data_end>
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	ab 81       	ldd	r26, Y+3	; 0x03
     2a8:	bc 81       	ldd	r27, Y+4	; 0x04
     2aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     2ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     2b2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
     2b6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
     2ba:	df cf       	rjmp	.-66     	; 0x27a <TaskDisplayRefresh+0x94>
     2bc:	86 e9       	ldi	r24, 0x96	; 150
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_String>
     2c4:	ec cf       	rjmp	.-40     	; 0x29e <TaskDisplayRefresh+0xb8>
     2c6:	8b e9       	ldi	r24, 0x9B	; 155
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_String>
     2ce:	80 ec       	ldi	r24, 0xC0	; 192
     2d0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_Command>
     2d4:	82 ea       	ldi	r24, 0xA2	; 162
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_String>
     2dc:	69 81       	ldd	r22, Y+1	; 0x01
     2de:	7a 81       	ldd	r23, Y+2	; 0x02
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	9c 81       	ldd	r25, Y+4	; 0x04
     2e4:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_Float>
     2e8:	8c ea       	ldi	r24, 0xAC	; 172
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	e9 cf       	rjmp	.-46     	; 0x2c0 <TaskDisplayRefresh+0xda>
     2ee:	8e ea       	ldi	r24, 0xAE	; 174
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	eb cf       	rjmp	.-42     	; 0x2ca <TaskDisplayRefresh+0xe4>
     2f4:	88 eb       	ldi	r24, 0xB8	; 184
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	e3 cf       	rjmp	.-58     	; 0x2c0 <TaskDisplayRefresh+0xda>
     2fa:	11 23       	and	r17, r17
     2fc:	81 f2       	breq	.-96     	; 0x29e <TaskDisplayRefresh+0xb8>
     2fe:	e7 cf       	rjmp	.-50     	; 0x2ce <TaskDisplayRefresh+0xe8>

00000300 <TaskChargingStart>:




// Task to Handle Charging Start
void TaskChargingStart(void *pvParameters) {
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	1f 92       	push	r1
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
    uint8_t event;
    for (;;) {
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
     30a:	4f ef       	ldi	r20, 0xFF	; 255
     30c:	5f ef       	ldi	r21, 0xFF	; 255
     30e:	be 01       	movw	r22, r28
     310:	6f 5f       	subi	r22, 0xFF	; 255
     312:	7f 4f       	sbci	r23, 0xFF	; 255
     314:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <buttonQueue>
     318:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <buttonQueue+0x1>
     31c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <xQueueReceive>
     320:	88 23       	and	r24, r24
     322:	99 f3       	breq	.-26     	; 0x30a <TaskChargingStart+0xa>
            if (event == START_BUTTON_EVENT) {
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	81 f7       	brne	.-32     	; 0x30a <TaskChargingStart+0xa>
                Charge_Logic();
     32a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Charge_Logic>

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     32e:	6f ef       	ldi	r22, 0xFF	; 255
     330:	7f ef       	ldi	r23, 0xFF	; 255
     332:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <stateSemaphore>
     336:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <stateSemaphore+0x1>
     33a:	0e 94 18 10 	call	0x2030	; 0x2030 <xQueueSemaphoreTake>
     33e:	81 30       	cpi	r24, 0x01	; 1
     340:	21 f7       	brne	.-56     	; 0x30a <TaskChargingStart+0xa>
                    globalState = CHARGING;
     342:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <globalState>
                    xSemaphoreGive(stateSemaphore);
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <stateSemaphore>
     354:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <stateSemaphore+0x1>
     358:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <xQueueGenericSend>
     35c:	d6 cf       	rjmp	.-84     	; 0x30a <TaskChargingStart+0xa>

0000035e <TaskStopSession>:
        }
    }
}

// Task to Handle Stop Session
void TaskStopSession(void *pvParameters) {
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	1f 92       	push	r1
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
    uint8_t event;
    for (;;) {
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
     368:	4f ef       	ldi	r20, 0xFF	; 255
     36a:	5f ef       	ldi	r21, 0xFF	; 255
     36c:	be 01       	movw	r22, r28
     36e:	6f 5f       	subi	r22, 0xFF	; 255
     370:	7f 4f       	sbci	r23, 0xFF	; 255
     372:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <buttonQueue>
     376:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <buttonQueue+0x1>
     37a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <xQueueReceive>
     37e:	88 23       	and	r24, r24
     380:	99 f3       	breq	.-26     	; 0x368 <TaskStopSession+0xa>
            if (event == STOP_BUTTON_EVENT) {
     382:	19 81       	ldd	r17, Y+1	; 0x01
     384:	12 30       	cpi	r17, 0x02	; 2
     386:	81 f7       	brne	.-32     	; 0x368 <TaskStopSession+0xa>
                Stop_Charge_Logic();
     388:	0e 94 42 05 	call	0xa84	; 0xa84 <Stop_Charge_Logic>

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     38c:	6f ef       	ldi	r22, 0xFF	; 255
     38e:	7f ef       	ldi	r23, 0xFF	; 255
     390:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <stateSemaphore>
     394:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <stateSemaphore+0x1>
     398:	0e 94 18 10 	call	0x2030	; 0x2030 <xQueueSemaphoreTake>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	21 f7       	brne	.-56     	; 0x368 <TaskStopSession+0xa>
                    globalState = DISCHARGING;
     3a0:	10 93 35 01 	sts	0x0135, r17	; 0x800135 <globalState>
                    xSemaphoreGive(stateSemaphore);
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <stateSemaphore>
     3b2:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <stateSemaphore+0x1>
     3b6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <xQueueGenericSend>
     3ba:	d6 cf       	rjmp	.-84     	; 0x368 <TaskStopSession+0xa>

000003bc <__vector_1>:
// Global variable for system state
volatile SystemState globalState = NONE; // Default state


//// Interrupt Service Routine for START Button (INT0)
ISR(INT0_vect) {
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	2f 93       	push	r18
     3c8:	3f 93       	push	r19
     3ca:	4f 93       	push	r20
     3cc:	5f 93       	push	r21
     3ce:	6f 93       	push	r22
     3d0:	7f 93       	push	r23
     3d2:	8f 93       	push	r24
     3d4:	9f 93       	push	r25
     3d6:	af 93       	push	r26
     3d8:	bf 93       	push	r27
     3da:	ef 93       	push	r30
     3dc:	ff 93       	push	r31
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <__vector_1+0x28>
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     3e8:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t event = START_BUTTON_EVENT;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendFromISR(buttonQueue, &event, &xHigherPriorityTaskWoken);
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	ae 01       	movw	r20, r28
     3f2:	4e 5f       	subi	r20, 0xFE	; 254
     3f4:	5f 4f       	sbci	r21, 0xFF	; 255
     3f6:	be 01       	movw	r22, r28
     3f8:	6f 5f       	subi	r22, 0xFF	; 255
     3fa:	7f 4f       	sbci	r23, 0xFF	; 255
     3fc:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <buttonQueue>
     400:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <buttonQueue+0x1>
     404:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xQueueGenericSendFromISR>

    if (xHigherPriorityTaskWoken) {
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	81 11       	cpse	r24, r1
        portYIELD();
     40c:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
    }
}
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	ff 91       	pop	r31
     41a:	ef 91       	pop	r30
     41c:	bf 91       	pop	r27
     41e:	af 91       	pop	r26
     420:	9f 91       	pop	r25
     422:	8f 91       	pop	r24
     424:	7f 91       	pop	r23
     426:	6f 91       	pop	r22
     428:	5f 91       	pop	r21
     42a:	4f 91       	pop	r20
     42c:	3f 91       	pop	r19
     42e:	2f 91       	pop	r18
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <__vector_2>:

// Interrupt Service Routine for STOP Button (INT1)
ISR(INT1_vect) {
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	2f 93       	push	r18
     446:	3f 93       	push	r19
     448:	4f 93       	push	r20
     44a:	5f 93       	push	r21
     44c:	6f 93       	push	r22
     44e:	7f 93       	push	r23
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	af 93       	push	r26
     456:	bf 93       	push	r27
     458:	ef 93       	push	r30
     45a:	ff 93       	push	r31
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	00 d0       	rcall	.+0      	; 0x462 <__vector_2+0x28>
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     466:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t event = STOP_BUTTON_EVENT;
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendFromISR(buttonQueue, &event, &xHigherPriorityTaskWoken);
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	ae 01       	movw	r20, r28
     470:	4e 5f       	subi	r20, 0xFE	; 254
     472:	5f 4f       	sbci	r21, 0xFF	; 255
     474:	be 01       	movw	r22, r28
     476:	6f 5f       	subi	r22, 0xFF	; 255
     478:	7f 4f       	sbci	r23, 0xFF	; 255
     47a:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <buttonQueue>
     47e:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <buttonQueue+0x1>
     482:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xQueueGenericSendFromISR>

    if (xHigherPriorityTaskWoken) {
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	81 11       	cpse	r24, r1
        portYIELD();
     48a:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
    }
}
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	bf 91       	pop	r27
     49c:	af 91       	pop	r26
     49e:	9f 91       	pop	r25
     4a0:	8f 91       	pop	r24
     4a2:	7f 91       	pop	r23
     4a4:	6f 91       	pop	r22
     4a6:	5f 91       	pop	r21
     4a8:	4f 91       	pop	r20
     4aa:	3f 91       	pop	r19
     4ac:	2f 91       	pop	r18
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <SuddenDisconnect_Task>:
// ######################### TEMPORARY TASKS ################# //
// ######################################################### //

void SuddenDisconnect_Task(void *pvParameters) {
    while (1) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     4b8:	4f ef       	ldi	r20, 0xFF	; 255
     4ba:	5f ef       	ldi	r21, 0xFF	; 255
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <ulTaskGenericNotifyTake>

        // SET FLAG
//        suddenDisconnect_flag = 1;
//        charging_state = STOP;
        PORTC |= (1 << PC7); // Set PC7 "Disconnected" to high
     4c4:	af 9a       	sbi	0x15, 7	; 21
        vTaskDelay(pdMS_TO_TICKS(2000));
     4c6:	80 ed       	ldi	r24, 0xD0	; 208
     4c8:	97 e0       	ldi	r25, 0x07	; 7
     4ca:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <vTaskDelay>
        PORTC &= ~(1 << PC7);  // Set PC7 "Disconnected" to low
     4ce:	af 98       	cbi	0x15, 7	; 21
     4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <SuddenDisconnect_Task>

000004d2 <Overcurrent_Task>:

// Overcurrent detection task
void Overcurrent_Task(void *pvParameters) {
    while (1) {
        // Wait for the overcurrent flag to be set
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     4d2:	4f ef       	ldi	r20, 0xFF	; 255
     4d4:	5f ef       	ldi	r21, 0xFF	; 255
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <ulTaskGenericNotifyTake>
//        overcurrent_flag = 1;

        // Stop Charging
//        charging_state = STOP;

        PORTC |= (1 << PC0); // Set PC0 to high
     4de:	a8 9a       	sbi	0x15, 0	; 21
        vTaskDelay(pdMS_TO_TICKS(1000));
     4e0:	88 ee       	ldi	r24, 0xE8	; 232
     4e2:	93 e0       	ldi	r25, 0x03	; 3
     4e4:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <vTaskDelay>
        PORTC &= ~(1 << PC0);  // Set PC0 to low
     4e8:	a8 98       	cbi	0x15, 0	; 21
     4ea:	f3 cf       	rjmp	.-26     	; 0x4d2 <Overcurrent_Task>

000004ec <Os_Init>:




// OS Initialization
void Os_Init(void) {
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
    // Initialize peripherals
	LCD_Init();
     4f2:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Init>
//        while (1); // Handle semaphore creation failure
//    }
//    xSemaphoreGive(lcdSemaphore);

    // Create binary semaphore for global state
    stateSemaphore = xSemaphoreCreateBinary();
     4f6:	43 e0       	ldi	r20, 0x03	; 3
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <xQueueGenericCreate>
     500:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <stateSemaphore+0x1>
     504:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <stateSemaphore>
//    if (stateSemaphore == NULL) {
//        while (1); // Handle semaphore creation failure
//    }
    xSemaphoreGive(stateSemaphore);
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <xQueueGenericSend>

    // Create the button queue
    buttonQueue = xQueueCreate(5, sizeof(uint8_t));
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <xQueueGenericCreate>
     520:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <buttonQueue+0x1>
     524:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <buttonQueue>
//    if (buttonQueue == NULL) {
//        while (1); // Handle queue creation failure
//    }

//     Create tasks
    xTaskCreate(TaskDisplayRefresh, "DisplayRefresh", 128, NULL, 4, &taskHandleDisplayRefresh);
     528:	82 ef       	ldi	r24, 0xF2	; 242
     52a:	e8 2e       	mov	r14, r24
     52c:	87 e0       	ldi	r24, 0x07	; 7
     52e:	f8 2e       	mov	r15, r24
     530:	04 e0       	ldi	r16, 0x04	; 4
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	40 e8       	ldi	r20, 0x80	; 128
     538:	6e eb       	ldi	r22, 0xBE	; 190
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	83 ef       	ldi	r24, 0xF3	; 243
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <xTaskCreate>
    xTaskCreate(TaskChargingStart, "ChargingStart", 128, NULL, 3, NULL);
     544:	f1 2c       	mov	r15, r1
     546:	e1 2c       	mov	r14, r1
     548:	03 e0       	ldi	r16, 0x03	; 3
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	40 e8       	ldi	r20, 0x80	; 128
     550:	6d ec       	ldi	r22, 0xCD	; 205
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e8       	ldi	r24, 0x80	; 128
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <xTaskCreate>
    xTaskCreate(TaskStopSession, "StopSession", 128, NULL, 3, NULL);
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	40 e8       	ldi	r20, 0x80	; 128
     562:	6b ed       	ldi	r22, 0xDB	; 219
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	8f ea       	ldi	r24, 0xAF	; 175
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <xTaskCreate>
//    xTaskCreate(prd_Buttons, "prd_Buttons", 128, NULL, 4, NULL);

    // Start the scheduler
    vTaskStartScheduler();
}
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
    xTaskCreate(TaskChargingStart, "ChargingStart", 128, NULL, 3, NULL);
    xTaskCreate(TaskStopSession, "StopSession", 128, NULL, 3, NULL);
//    xTaskCreate(prd_Buttons, "prd_Buttons", 128, NULL, 4, NULL);

    // Start the scheduler
    vTaskStartScheduler();
     574:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <vTaskStartScheduler>

00000578 <vTimer1Callback>:
#define NULLPtr ((void *)0)
static TimerHandle_t xTimer1 = NULL;
static void (*Timer1Callback)(void) = NULLPtr;

static void vTimer1Callback(TimerHandle_t xTimer) {
    if (Timer1Callback != NULLPtr) {
     578:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Timer1Callback>
     57c:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Timer1Callback+0x1>
     580:	30 97       	sbiw	r30, 0x00	; 0
     582:	09 f0       	breq	.+2      	; 0x586 <vTimer1Callback+0xe>
        (*Timer1Callback)(); // Call the user callback function
     584:	09 94       	ijmp
    }
}
     586:	08 95       	ret

00000588 <Timer_vidInitTimer1>:

// Initialize Timer1 (FreeRTOS Software Timer)
void Timer_vidInitTimer1(void) {
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
    // Create the software timer
    xTimer1 = xTimerCreate(
     58c:	0c eb       	ldi	r16, 0xBC	; 188
     58e:	12 e0       	ldi	r17, 0x02	; 2
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	41 e0       	ldi	r20, 0x01	; 1
     596:	64 e1       	ldi	r22, 0x14	; 20
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	87 ee       	ldi	r24, 0xE7	; 231
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 f6 23 	call	0x47ec	; 0x47ec <xTimerCreate>
     5a2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <xTimer1+0x1>
     5a6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <xTimer1>
        NULL,                                 // Timer ID (not used)
		vTimer1Callback                       // Callback function
    );


}
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <Timer_vidStartTimer1>:

// Start Timer1 (FreeRTOS Software Timer)
void Timer_vidStartTimer1(void) {
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
    if (xTimer1 != NULL) {
     5b4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <xTimer1>
     5b8:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <xTimer1+0x1>
     5bc:	89 2b       	or	r24, r25
     5be:	71 f0       	breq	.+28     	; 0x5dc <Timer_vidStartTimer1+0x2c>
        xTimerStart(xTimer1, 0);
     5c0:	0e 94 3d 19 	call	0x327a	; 0x327a <xTaskGetTickCount>
     5c4:	10 e0       	ldi	r17, 0x00	; 0
     5c6:	00 e0       	ldi	r16, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	ac 01       	movw	r20, r24
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <xTimer1>
     5d4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <xTimer1+0x1>
     5d8:	0e 94 2d 24 	call	0x485a	; 0x485a <xTimerGenericCommandFromTask>
    }
}
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	08 95       	ret

000005e2 <Timer_vidStopTimer1>:

// Stop Timer1 (FreeRTOS Software Timer)
void Timer_vidStopTimer1(void) {
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
    if (xTimer1 != NULL) {
     5e6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <xTimer1>
     5ea:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <xTimer1+0x1>
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	49 f0       	breq	.+18     	; 0x604 <Timer_vidStopTimer1+0x22>
        xTimerStop(xTimer1, 0);
     5f2:	10 e0       	ldi	r17, 0x00	; 0
     5f4:	00 e0       	ldi	r16, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	63 e0       	ldi	r22, 0x03	; 3
     600:	0e 94 2d 24 	call	0x485a	; 0x485a <xTimerGenericCommandFromTask>
    }
}
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	08 95       	ret

0000060a <Timer_vidSetCallBackTimer1>:

// Set the callback function for Timer1
void Timer_vidSetCallBackTimer1(void (*TimerCallback)(void)) {
    if (TimerCallback != NULLPtr) {
     60a:	00 97       	sbiw	r24, 0x00	; 0
     60c:	21 f0       	breq	.+8      	; 0x616 <Timer_vidSetCallBackTimer1+0xc>
        Timer1Callback = TimerCallback;
     60e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <Timer1Callback+0x1>
     612:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <Timer1Callback>
    }
}
     616:	08 95       	ret

00000618 <CreateGpioProxy>:

#include "Gpio.h"
#include "Gpio_Config.h"

// Create a GpioProxy for a specific port (portDir and port are pointers to the direction and data registers)
GpioProxy CreateGpioProxy(volatile uint8_t *portDir, volatile uint8_t *port) {
     618:	9b 01       	movw	r18, r22
    GpioProxy gpioProxy;
    gpioProxy.portDir = portDir;
    gpioProxy.port = port;
    return gpioProxy;
     61a:	ac 01       	movw	r20, r24
}
     61c:	c9 01       	movw	r24, r18
     61e:	ba 01       	movw	r22, r20
     620:	08 95       	ret

00000622 <Proxy_SetPortDirection>:

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     622:	dc 01       	movw	r26, r24
     624:	ed 91       	ld	r30, X+
     626:	fc 91       	ld	r31, X
     628:	60 83       	st	Z, r22
}
     62a:	08 95       	ret

0000062c <Proxy_WritePort>:

// Write a value to the port
void Proxy_WritePort(GpioProxy *gpioProxy, uint8_t value) {
    *(gpioProxy->port) = value;
     62c:	dc 01       	movw	r26, r24
     62e:	12 96       	adiw	r26, 0x02	; 2
     630:	ed 91       	ld	r30, X+
     632:	fc 91       	ld	r31, X
     634:	60 83       	st	Z, r22
}
     636:	08 95       	ret

00000638 <Proxy_ReadPort>:

// Read the value of the port
uint8_t Proxy_ReadPort(GpioProxy *gpioProxy) {
    return *(gpioProxy->port);
     638:	dc 01       	movw	r26, r24
     63a:	12 96       	adiw	r26, 0x02	; 2
     63c:	ed 91       	ld	r30, X+
     63e:	fc 91       	ld	r31, X
     640:	80 81       	ld	r24, Z
}
     642:	08 95       	ret

00000644 <Proxy_SetPin>:

// Set a specific pin high
void Proxy_SetPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) |= (1 << pin);
     644:	dc 01       	movw	r26, r24
     646:	12 96       	adiw	r26, 0x02	; 2
     648:	ed 91       	ld	r30, X+
     64a:	fc 91       	ld	r31, X
     64c:	80 81       	ld	r24, Z
     64e:	21 e0       	ldi	r18, 0x01	; 1
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	01 c0       	rjmp	.+2      	; 0x656 <Proxy_SetPin+0x12>
     654:	22 0f       	add	r18, r18
     656:	6a 95       	dec	r22
     658:	ea f7       	brpl	.-6      	; 0x654 <Proxy_SetPin+0x10>
     65a:	82 2b       	or	r24, r18
     65c:	80 83       	st	Z, r24
}
     65e:	08 95       	ret

00000660 <Proxy_ClearPin>:

// Clear a specific pin (set it low)
void Proxy_ClearPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) &= ~(1 << pin);
     660:	dc 01       	movw	r26, r24
     662:	12 96       	adiw	r26, 0x02	; 2
     664:	ed 91       	ld	r30, X+
     666:	fc 91       	ld	r31, X
     668:	20 81       	ld	r18, Z
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	01 c0       	rjmp	.+2      	; 0x672 <Proxy_ClearPin+0x12>
     670:	88 0f       	add	r24, r24
     672:	6a 95       	dec	r22
     674:	ea f7       	brpl	.-6      	; 0x670 <Proxy_ClearPin+0x10>
     676:	80 95       	com	r24
     678:	82 23       	and	r24, r18
     67a:	80 83       	st	Z, r24
}
     67c:	08 95       	ret

0000067e <Proxy_ReadPin>:

// Read the state of a specific pin
uint8_t Proxy_ReadPin(GpioProxy *gpioProxy, uint8_t pin) {
    return (*(gpioProxy->port) & (1 << pin)) >> pin;
     67e:	dc 01       	movw	r26, r24
     680:	12 96       	adiw	r26, 0x02	; 2
     682:	ed 91       	ld	r30, X+
     684:	fc 91       	ld	r31, X
     686:	20 81       	ld	r18, Z
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	06 2e       	mov	r0, r22
     68e:	02 c0       	rjmp	.+4      	; 0x694 <Proxy_ReadPin+0x16>
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <Proxy_ReadPin+0x12>
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	82 23       	and	r24, r18
     69c:	93 23       	and	r25, r19
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <Proxy_ReadPin+0x26>
     6a0:	95 95       	asr	r25
     6a2:	87 95       	ror	r24
     6a4:	6a 95       	dec	r22
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <Proxy_ReadPin+0x22>
}
     6a8:	08 95       	ret

000006aa <ConfigurePins>:

// Function to configure pins based on the pinConfigs array
void ConfigurePins(void) {
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	c4 e6       	ldi	r28, 0x64	; 100
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i < index_no; i++) {
        PinConfig *pin = &pinConfigs[i];

        // Set pin direction
        if (pin->direction == 1) {
            Proxy_SetPortDirection(pin->gpioProxy, (1 << pin->pin));  // Set as output
     6b6:	01 e0       	ldi	r16, 0x01	; 1
     6b8:	10 e0       	ldi	r17, 0x00	; 0
     6ba:	e8 81       	ld	r30, Y
     6bc:	f9 81       	ldd	r31, Y+1	; 0x01
     6be:	01 90       	ld	r0, Z+
     6c0:	f0 81       	ld	r31, Z
     6c2:	e0 2d       	mov	r30, r0

    for (i = 0; i < index_no; i++) {
        PinConfig *pin = &pinConfigs[i];

        // Set pin direction
        if (pin->direction == 1) {
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	d1 f4       	brne	.+52     	; 0x6fe <ConfigurePins+0x54>
            Proxy_SetPortDirection(pin->gpioProxy, (1 << pin->pin));  // Set as output
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	98 01       	movw	r18, r16
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <ConfigurePins+0x2a>
     6d0:	22 0f       	add	r18, r18
     6d2:	33 1f       	adc	r19, r19
     6d4:	8a 95       	dec	r24
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <ConfigurePins+0x26>
    return gpioProxy;
}

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     6d8:	20 83       	st	Z, r18
     6da:	2c 81       	ldd	r18, Y+4	; 0x04
     6dc:	6a 81       	ldd	r22, Y+2	; 0x02
     6de:	88 81       	ld	r24, Y
     6e0:	99 81       	ldd	r25, Y+1	; 0x01
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Set pin low
            }
        } else {
            // For input pins, we can enable pull-up resistors if required
            if (pin->value == 1) {
     6e2:	21 30       	cpi	r18, 0x01	; 1
     6e4:	71 f4       	brne	.+28     	; 0x702 <ConfigurePins+0x58>
                Proxy_SetPin(pin->gpioProxy, pin->pin);  // Enable pull-up resistor
     6e6:	0e 94 22 03 	call	0x644	; 0x644 <Proxy_SetPin>
     6ea:	25 96       	adiw	r28, 0x05	; 5
    uint8_t i;
	uint8_t index_no = NUM_INDECIES;

    //uint8_t numPins = sizeof(pinConfigs) / sizeof(pinConfigs[0]);

    for (i = 0; i < index_no; i++) {
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	c2 38       	cpi	r28, 0x82	; 130
     6f0:	d3 07       	cpc	r29, r19
     6f2:	19 f7       	brne	.-58     	; 0x6ba <ConfigurePins+0x10>
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Disable pull-up resistor
            }
        }
    }
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret
    return gpioProxy;
}

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     6fe:	10 82       	st	Z, r1
     700:	ec cf       	rjmp	.-40     	; 0x6da <ConfigurePins+0x30>
        } else {
            // For input pins, we can enable pull-up resistors if required
            if (pin->value == 1) {
                Proxy_SetPin(pin->gpioProxy, pin->pin);  // Enable pull-up resistor
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Disable pull-up resistor
     702:	0e 94 30 03 	call	0x660	; 0x660 <Proxy_ClearPin>
     706:	f1 cf       	rjmp	.-30     	; 0x6ea <ConfigurePins+0x40>

00000708 <ADC_PRESCALER_SET>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// This function selects sampling frequency of ADC by selecting the prescaler bit
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
     708:	96 b1       	in	r25, 0x06	; 6
     70a:	98 7f       	andi	r25, 0xF8	; 248
     70c:	96 b9       	out	0x06, r25	; 6

	switch(prescaler)
     70e:	80 31       	cpi	r24, 0x10	; 16
     710:	c1 f0       	breq	.+48     	; 0x742 <ADC_PRESCALER_SET+0x3a>
     712:	40 f4       	brcc	.+16     	; 0x724 <ADC_PRESCALER_SET+0x1c>
     714:	84 30       	cpi	r24, 0x04	; 4
     716:	79 f0       	breq	.+30     	; 0x736 <ADC_PRESCALER_SET+0x2e>
     718:	88 30       	cpi	r24, 0x08	; 8
     71a:	79 f0       	breq	.+30     	; 0x73a <ADC_PRESCALER_SET+0x32>
     71c:	82 30       	cpi	r24, 0x02	; 2
     71e:	c9 f4       	brne	.+50     	; 0x752 <ADC_PRESCALER_SET+0x4a>
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
     720:	30 9a       	sbi	0x06, 0	; 6
			   break;
     722:	08 95       	ret
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization

	switch(prescaler)
     724:	80 34       	cpi	r24, 0x40	; 64
     726:	79 f0       	breq	.+30     	; 0x746 <ADC_PRESCALER_SET+0x3e>
     728:	80 38       	cpi	r24, 0x80	; 128
     72a:	81 f0       	breq	.+32     	; 0x74c <ADC_PRESCALER_SET+0x44>
     72c:	80 32       	cpi	r24, 0x20	; 32
     72e:	89 f4       	brne	.+34     	; 0x752 <ADC_PRESCALER_SET+0x4a>
			   break;
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
			   break;
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
			   break;
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
     730:	86 b1       	in	r24, 0x06	; 6
     732:	85 60       	ori	r24, 0x05	; 5
     734:	04 c0       	rjmp	.+8      	; 0x73e <ADC_PRESCALER_SET+0x36>

	switch(prescaler)
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
			   break;
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
     736:	31 9a       	sbi	0x06, 1	; 6
			   break;
     738:	08 95       	ret
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
     73a:	86 b1       	in	r24, 0x06	; 6
     73c:	83 60       	ori	r24, 0x03	; 3
			   break;
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
			   break;
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
			   break;
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
     73e:	86 b9       	out	0x06, r24	; 6
	}

}
     740:	08 95       	ret
			   break;
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
			   break;
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
			   break;
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
     742:	32 9a       	sbi	0x06, 2	; 6
			   break;
     744:	08 95       	ret
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
			   break;
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
     746:	86 b1       	in	r24, 0x06	; 6
     748:	86 60       	ori	r24, 0x06	; 6
     74a:	f9 cf       	rjmp	.-14     	; 0x73e <ADC_PRESCALER_SET+0x36>
			   break;
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
     74c:	86 b1       	in	r24, 0x06	; 6
     74e:	87 60       	ori	r24, 0x07	; 7
     750:	f6 cf       	rjmp	.-20     	; 0x73e <ADC_PRESCALER_SET+0x36>
			   break;
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
     752:	86 b1       	in	r24, 0x06	; 6
     754:	88 7f       	andi	r24, 0xF8	; 248
     756:	f3 cf       	rjmp	.-26     	; 0x73e <ADC_PRESCALER_SET+0x36>

00000758 <ADC_voltage_Reference>:

//This function selects the voltage reference
//by default AVCC has been selected
void ADC_voltage_Reference(uint8_t Reference_Voltage)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
     758:	97 b1       	in	r25, 0x07	; 7
     75a:	9f 73       	andi	r25, 0x3F	; 63
     75c:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1<<REFS0); // Default AVCC has been set
     75e:	3e 9a       	sbi	0x07, 6	; 7


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
     760:	81 11       	cpse	r24, r1
     762:	04 c0       	rjmp	.+8      	; 0x76c <ADC_voltage_Reference+0x14>
     764:	87 b1       	in	r24, 0x07	; 7
     766:	8f 73       	andi	r24, 0x3F	; 63
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     768:	87 b9       	out	0x07, r24	; 7
     76a:	08 95       	ret
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	11 f4       	brne	.+4      	; 0x774 <ADC_voltage_Reference+0x1c>
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
	else{ADMUX |= (1<<REFS0);}
     770:	3e 9a       	sbi	0x07, 6	; 7

}
     772:	08 95       	ret
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	e1 f7       	brne	.-8      	; 0x770 <ADC_voltage_Reference+0x18>
     778:	87 b1       	in	r24, 0x07	; 7
     77a:	80 6c       	ori	r24, 0xC0	; 192
     77c:	f5 cf       	rjmp	.-22     	; 0x768 <ADC_voltage_Reference+0x10>

0000077e <ADC_INIT>:
/*------------possible parameter---------
prescaler = 2,4,8,16,32,64,128
 Voltage_Reference = AREF,AVCC,INTERNAL
*/
void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
     77e:	cf 93       	push	r28
     780:	c6 2f       	mov	r28, r22
	2) set prescaler
	3) reference voltage select
	4) left adjust of for data register
	*/

	ADCSRA |= (1<<ADEN); // ADC Enable
     782:	37 9a       	sbi	0x06, 7	; 6
	ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
     784:	0e 94 84 03 	call	0x708	; 0x708 <ADC_PRESCALER_SET>
	ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
     788:	8c 2f       	mov	r24, r28
     78a:	0e 94 ac 03 	call	0x758	; 0x758 <ADC_voltage_Reference>
	ADMUX &= ~(1<<ADLAR); //left adjust off // Though bu default left adjust off // this line use for more convenient for future developer
     78e:	3d 98       	cbi	0x07, 5	; 7
}
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <ADC_READ>:

//########################################################################################
//########################################################################################
uint16_t ADC_READ(uint8_t channel)
{
	ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     794:	97 b1       	in	r25, 0x07	; 7
     796:	90 7e       	andi	r25, 0xE0	; 224
     798:	97 b9       	out	0x07, r25	; 7

	switch(channel)
     79a:	88 30       	cpi	r24, 0x08	; 8
     79c:	30 f5       	brcc	.+76     	; 0x7ea <ADC_READ+0x56>
     79e:	e8 2f       	mov	r30, r24
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	eb 52       	subi	r30, 0x2B	; 43
     7a4:	fc 4f       	sbci	r31, 0xFC	; 252
     7a6:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__tablejump2__>
     7aa:	f5 03       	fmuls	r23, r21
     7ac:	dd 03       	fmulsu	r21, r21
     7ae:	e4 03       	fmuls	r22, r20
     7b0:	e6 03       	fmuls	r22, r22
     7b2:	ea 03       	fmulsu	r22, r18
     7b4:	ec 03       	fmulsu	r22, r20
     7b6:	ef 03       	fmulsu	r22, r23
     7b8:	f2 03       	fmuls	r23, r18
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
     7ba:	38 9a       	sbi	0x07, 0	; 7
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
	}
	ADCSRA |=(1<<ADSC); // ADC conversion start
     7bc:	36 9a       	sbi	0x06, 6	; 6

	while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
     7be:	34 9b       	sbis	0x06, 4	; 6
     7c0:	fe cf       	rjmp	.-4      	; 0x7be <ADC_READ+0x2a>
	//uint8_t high,low;
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
     7c2:	84 b1       	in	r24, 0x04	; 4
     7c4:	95 b1       	in	r25, 0x05	; 5
}
     7c6:	08 95       	ret
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
     7c8:	39 9a       	sbi	0x07, 1	; 7
		       break;
     7ca:	f8 cf       	rjmp	.-16     	; 0x7bc <ADC_READ+0x28>
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
     7cc:	87 b1       	in	r24, 0x07	; 7
     7ce:	83 60       	ori	r24, 0x03	; 3
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     7d0:	87 b9       	out	0x07, r24	; 7
     7d2:	f4 cf       	rjmp	.-24     	; 0x7bc <ADC_READ+0x28>
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
		       break;
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
			   break;
		case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
     7d4:	3a 9a       	sbi	0x07, 2	; 7
			   break;
     7d6:	f2 cf       	rjmp	.-28     	; 0x7bc <ADC_READ+0x28>
		case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
     7d8:	87 b1       	in	r24, 0x07	; 7
     7da:	85 60       	ori	r24, 0x05	; 5
     7dc:	f9 cf       	rjmp	.-14     	; 0x7d0 <ADC_READ+0x3c>
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
     7de:	87 b1       	in	r24, 0x07	; 7
     7e0:	86 60       	ori	r24, 0x06	; 6
     7e2:	f6 cf       	rjmp	.-20     	; 0x7d0 <ADC_READ+0x3c>
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
     7e4:	87 b1       	in	r24, 0x07	; 7
     7e6:	87 60       	ori	r24, 0x07	; 7
     7e8:	f3 cf       	rjmp	.-26     	; 0x7d0 <ADC_READ+0x3c>
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     7ea:	87 b1       	in	r24, 0x07	; 7
     7ec:	80 7e       	andi	r24, 0xE0	; 224
     7ee:	f0 cf       	rjmp	.-32     	; 0x7d0 <ADC_READ+0x3c>

000007f0 <ADC_GetVoltage>:
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
}
// Calculate the actual voltage from the ADC value
float ADC_GetVoltage(uint16_t adc_value) {
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	2c 97       	sbiw	r28, 0x0c	; 12
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
    // Calculate voltage at the ADC pin
    float v_adc = (adc_value / ADC_RESOLUTION) * VREF;
     804:	bc 01       	movw	r22, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <__floatunsisf>
     80e:	69 87       	std	Y+9, r22	; 0x09
     810:	7a 87       	std	Y+10, r23	; 0x0a
     812:	8b 87       	std	Y+11, r24	; 0x0b
     814:	9c 87       	std	Y+12, r25	; 0x0c
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 ec       	ldi	r19, 0xC0	; 192
     81a:	4f e7       	ldi	r20, 0x7F	; 127
     81c:	54 e4       	ldi	r21, 0x44	; 68
     81e:	69 85       	ldd	r22, Y+9	; 0x09
     820:	7a 85       	ldd	r23, Y+10	; 0x0a
     822:	8b 85       	ldd	r24, Y+11	; 0x0b
     824:	9c 85       	ldd	r25, Y+12	; 0x0c
     826:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divsf3>
     82a:	6d 83       	std	Y+5, r22	; 0x05
     82c:	7e 83       	std	Y+6, r23	; 0x06
     82e:	8f 83       	std	Y+7, r24	; 0x07
     830:	98 87       	std	Y+8, r25	; 0x08
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 ea       	ldi	r20, 0xA0	; 160
     838:	50 e4       	ldi	r21, 0x40	; 64
     83a:	6d 81       	ldd	r22, Y+5	; 0x05
     83c:	7e 81       	ldd	r23, Y+6	; 0x06
     83e:	8f 81       	ldd	r24, Y+7	; 0x07
     840:	98 85       	ldd	r25, Y+8	; 0x08
     842:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__mulsf3>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04

    // Scale the voltage using the voltage divider ratio
    return v_adc ;
     84e:	69 81       	ldd	r22, Y+1	; 0x01
     850:	7a 81       	ldd	r23, Y+2	; 0x02
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	9c 81       	ldd	r25, Y+4	; 0x04
}
     856:	2c 96       	adiw	r28, 0x0c	; 12
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <subscribe>:
 *
 * @param func Pointer to the client's callback function.
 */
void subscribe(SubscriberFunc func) {
	/* if there is space in the subscribers array and the function pointer (func) is valid.*/
    if (subscriber_count < MAX_SUBSCRIBERS && func != NULL) {
     868:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <subscriber_count>
     86c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <subscriber_count+0x1>
     870:	25 30       	cpi	r18, 0x05	; 5
     872:	31 05       	cpc	r19, r1
     874:	84 f4       	brge	.+32     	; 0x896 <subscribe+0x2e>
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	71 f0       	breq	.+28     	; 0x896 <subscribe+0x2e>
    	/* stores the function pointer in the array */
        subscribers[subscriber_count++] = func;
     87a:	a9 01       	movw	r20, r18
     87c:	4f 5f       	subi	r20, 0xFF	; 255
     87e:	5f 4f       	sbci	r21, 0xFF	; 255
     880:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <subscriber_count+0x1>
     884:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <subscriber_count>
     888:	22 0f       	add	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	f9 01       	movw	r30, r18
     88e:	e4 5c       	subi	r30, 0xC4	; 196
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	80 83       	st	Z, r24
    }
}
     896:	08 95       	ret

00000898 <notify>:

/**
 * @brief Notifies all subscribed clients by calling their callback functions.
 */
void notify(void) {
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	0c e3       	ldi	r16, 0x3C	; 60
     8a2:	11 e0       	ldi	r17, 0x01	; 1
	/* Iterates through the subscribers array. */
    for (int i = 0; i < subscriber_count; i++) {
     8a4:	d0 e0       	ldi	r29, 0x00	; 0
     8a6:	c0 e0       	ldi	r28, 0x00	; 0
     8a8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <subscriber_count>
     8ac:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <subscriber_count+0x1>
     8b0:	c8 17       	cp	r28, r24
     8b2:	d9 07       	cpc	r29, r25
     8b4:	2c f0       	brlt	.+10     	; 0x8c0 <notify+0x28>
    	/* If a valid function pointer is found, it calls the function.*/
        if (subscribers[i] != NULL) {
            subscribers[i]();
        }
    }
}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	08 95       	ret
 */
void notify(void) {
	/* Iterates through the subscribers array. */
    for (int i = 0; i < subscriber_count; i++) {
    	/* If a valid function pointer is found, it calls the function.*/
        if (subscribers[i] != NULL) {
     8c0:	d8 01       	movw	r26, r16
     8c2:	ed 91       	ld	r30, X+
     8c4:	fd 91       	ld	r31, X+
     8c6:	8d 01       	movw	r16, r26
     8c8:	30 97       	sbiw	r30, 0x00	; 0
     8ca:	09 f0       	breq	.+2      	; 0x8ce <notify+0x36>
            subscribers[i]();
     8cc:	09 95       	icall
/**
 * @brief Notifies all subscribed clients by calling their callback functions.
 */
void notify(void) {
	/* Iterates through the subscribers array. */
    for (int i = 0; i < subscriber_count; i++) {
     8ce:	21 96       	adiw	r28, 0x01	; 1
     8d0:	eb cf       	rjmp	.-42     	; 0x8a8 <notify+0x10>

000008d2 <unsubscribe>:
 *
 * @param func Pointer to the client's callback function to be removed.
 */
void unsubscribe(SubscriberFunc func) {
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
     8d2:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <subscriber_count>
     8d6:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <subscriber_count+0x1>
     8da:	ec e3       	ldi	r30, 0x3C	; 60
     8dc:	f1 e0       	ldi	r31, 0x01	; 1
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	42 17       	cp	r20, r18
     8e4:	53 07       	cpc	r21, r19
     8e6:	0c f0       	brlt	.+2      	; 0x8ea <unsubscribe+0x18>
            }
            subscribers[--subscriber_count] = NULL;
            break;
        }
    }
}
     8e8:	08 95       	ret
 * @param func Pointer to the client's callback function to be removed.
 */
void unsubscribe(SubscriberFunc func) {
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
        if (subscribers[i] == func) {
     8ea:	61 91       	ld	r22, Z+
     8ec:	71 91       	ld	r23, Z+
     8ee:	68 17       	cp	r22, r24
     8f0:	79 07       	cpc	r23, r25
     8f2:	e9 f4       	brne	.+58     	; 0x92e <unsubscribe+0x5c>
     8f4:	fa 01       	movw	r30, r20
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	e4 5c       	subi	r30, 0xC4	; 196
     8fc:	fe 4f       	sbci	r31, 0xFE	; 254
            // Remove the subscriber and shift others (remove the gaps of unsubscriber in the array)
            for (int j = i; j < subscriber_count - 1; j++) {
     8fe:	c9 01       	movw	r24, r18
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	48 17       	cp	r20, r24
     904:	59 07       	cpc	r21, r25
     906:	64 f0       	brlt	.+24     	; 0x920 <unsubscribe+0x4e>
                subscribers[j] = subscribers[j + 1];
            }
            subscribers[--subscriber_count] = NULL;
     908:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <subscriber_count+0x1>
     90c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <subscriber_count>
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	fc 01       	movw	r30, r24
     916:	e4 5c       	subi	r30, 0xC4	; 196
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	10 82       	st	Z, r1
            break;
     91e:	08 95       	ret
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
        if (subscribers[i] == func) {
            // Remove the subscriber and shift others (remove the gaps of unsubscriber in the array)
            for (int j = i; j < subscriber_count - 1; j++) {
                subscribers[j] = subscribers[j + 1];
     920:	4f 5f       	subi	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	22 81       	ldd	r18, Z+2	; 0x02
     926:	33 81       	ldd	r19, Z+3	; 0x03
     928:	21 93       	st	Z+, r18
     92a:	31 93       	st	Z+, r19
     92c:	ea cf       	rjmp	.-44     	; 0x902 <unsubscribe+0x30>
 *
 * @param func Pointer to the client's callback function to be removed.
 */
void unsubscribe(SubscriberFunc func) {
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
     92e:	4f 5f       	subi	r20, 0xFF	; 255
     930:	5f 4f       	sbci	r21, 0xFF	; 255
     932:	d7 cf       	rjmp	.-82     	; 0x8e2 <unsubscribe+0x10>

00000934 <updatePollCounter>:
		}
	}
}

void updatePollCounter(void) {
	pollCounter += 1; 
     934:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pollCounter>
     938:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <pollCounter+0x1>
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <pollCounter+0x1>
     942:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pollCounter>
}
     946:	08 95       	ret

00000948 <poll>:
uint16 static pollTimeCounter=0;

float cap_percentage = 0;


void poll(void) {
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	2c 97       	sbiw	r28, 0x0c	; 12
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
	UART_Init(9600);
     95c:	80 e8       	ldi	r24, 0x80	; 128
     95e:	95 e2       	ldi	r25, 0x25	; 37
     960:	0e 94 8a 07 	call	0xf14	; 0xf14 <UART_Init>
	updatePollCounter();
     964:	0e 94 9a 04 	call	0x934	; 0x934 <updatePollCounter>
	if ((pollCounter == pollTimeCounter)) {
     968:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <pollCounter>
     96c:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <pollCounter+0x1>
     970:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <pollTimeCounter>
     974:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <pollTimeCounter+0x1>
     978:	28 17       	cp	r18, r24
     97a:	39 07       	cpc	r19, r25
     97c:	09 f0       	breq	.+2      	; 0x980 <poll+0x38>
     97e:	5f c0       	rjmp	.+190    	; 0xa3e <poll+0xf6>
		pollCounter=0;
     980:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <pollCounter+0x1>
     984:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <pollCounter>
				float adc_voltage = 0;


//
//				 Read the ADC value from channel 0 (ADC0)
				adc_value = ADC_READ(0);
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 ca 03 	call	0x794	; 0x794 <ADC_READ>
//				 Convert ADC value to voltage
				adc_voltage = ADC_GetVoltage(adc_value);
     98e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <ADC_GetVoltage>
     992:	69 87       	std	Y+9, r22	; 0x09
     994:	7a 87       	std	Y+10, r23	; 0x0a
     996:	8b 87       	std	Y+11, r24	; 0x0b
     998:	9c 87       	std	Y+12, r25	; 0x0c
				cap_percentage = calculateChargePercentage(adc_voltage);
     99a:	69 85       	ldd	r22, Y+9	; 0x09
     99c:	7a 85       	ldd	r23, Y+10	; 0x0a
     99e:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     9a2:	0e 94 58 05 	call	0xab0	; 0xab0 <calculateChargePercentage>
     9a6:	6d 83       	std	Y+5, r22	; 0x05
     9a8:	7e 83       	std	Y+6, r23	; 0x06
     9aa:	8f 83       	std	Y+7, r24	; 0x07
     9ac:	98 87       	std	Y+8, r25	; 0x08
     9ae:	8d 81       	ldd	r24, Y+5	; 0x05
     9b0:	9e 81       	ldd	r25, Y+6	; 0x06
     9b2:	af 81       	ldd	r26, Y+7	; 0x07
     9b4:	b8 85       	ldd	r27, Y+8	; 0x08
     9b6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <cap_percentage>
     9ba:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <cap_percentage+0x1>
     9be:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <cap_percentage+0x2>
     9c2:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <cap_percentage+0x3>

				adc_OC_Check = ADC_READ(1);
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	0e 94 ca 03 	call	0x794	; 0x794 <ADC_READ>
				if (adc_OC_Check > OVERCURRENT_THRESHOLD) {
     9cc:	4a 97       	sbiw	r24, 0x1a	; 26
     9ce:	20 f0       	brcs	.+8      	; 0x9d8 <poll+0x90>
					UART_Print("Overcurrent!\r\n");
     9d0:	8e ee       	ldi	r24, 0xEE	; 238
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 a0 07 	call	0xf40	; 0xf40 <UART_Print>
					// This should notify the Overcurrent task if this condition is met
				}
				
				adc_connection_check = ADC_READ(2);
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	0e 94 ca 03 	call	0x794	; 0x794 <ADC_READ>
				if (adc_connection_check < CONNECTION_THRESHOLD) {
     9de:	84 38       	cpi	r24, 0x84	; 132
     9e0:	23 e0       	ldi	r18, 0x03	; 3
     9e2:	92 07       	cpc	r25, r18
     9e4:	30 f5       	brcc	.+76     	; 0xa32 <poll+0xea>
					UART_Print("CONNECTED!\r\n");
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	91 e0       	ldi	r25, 0x01	; 1
				} else if (adc_connection_check > CONNECTION_THRESHOLD) {
					UART_Print("NOT CONNECTED!\r\n");
     9ea:	0e 94 a0 07 	call	0xf40	; 0xf40 <UART_Print>
					// This should notify the Sudden disconnect task if 
					// this condition is met
				}
//
				// Print results to virtual terminal
				UART_Print("Charge Percentage: ");
     9ee:	8e e0       	ldi	r24, 0x0E	; 14
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 a0 07 	call	0xf40	; 0xf40 <UART_Print>
				UART_PrintFloat(cap_percentage);
     9f6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <cap_percentage>
     9fa:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <cap_percentage+0x1>
     9fe:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <cap_percentage+0x2>
     a02:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <cap_percentage+0x3>
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	9a 83       	std	Y+2, r25	; 0x02
     a0a:	ab 83       	std	Y+3, r26	; 0x03
     a0c:	bc 83       	std	Y+4, r27	; 0x04
     a0e:	69 81       	ldd	r22, Y+1	; 0x01
     a10:	7a 81       	ldd	r23, Y+2	; 0x02
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	0e 94 ac 07 	call	0xf58	; 0xf58 <UART_PrintFloat>
				UART_Print("%\r\n");
     a1a:	82 e2       	ldi	r24, 0x22	; 34
     a1c:	91 e0       	ldi	r25, 0x01	; 1
//				UART_Print("Time Remaining for Charging: ");
//				UART_PrintFloat(timeRemaining);
//				UART_Print(" seconds\r\n");
		}
	}
}
     a1e:	2c 96       	adiw	r28, 0x0c	; 12
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
				}
//
				// Print results to virtual terminal
				UART_Print("Charge Percentage: ");
				UART_PrintFloat(cap_percentage);
				UART_Print("%\r\n");
     a2e:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <UART_Print>
				}
				
				adc_connection_check = ADC_READ(2);
				if (adc_connection_check < CONNECTION_THRESHOLD) {
					UART_Print("CONNECTED!\r\n");
				} else if (adc_connection_check > CONNECTION_THRESHOLD) {
     a32:	84 38       	cpi	r24, 0x84	; 132
     a34:	93 40       	sbci	r25, 0x03	; 3
     a36:	d9 f2       	breq	.-74     	; 0x9ee <poll+0xa6>
					UART_Print("NOT CONNECTED!\r\n");
     a38:	8d ef       	ldi	r24, 0xFD	; 253
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	d6 cf       	rjmp	.-84     	; 0x9ea <poll+0xa2>
//				UART_Print("Time Remaining for Charging: ");
//				UART_PrintFloat(timeRemaining);
//				UART_Print(" seconds\r\n");
		}
	}
}
     a3e:	2c 96       	adiw	r28, 0x0c	; 12
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <poller_Init>:
void updatePollCounter(void) {
	pollCounter += 1; 
}

void poller_Init(void) {
	Timer_vidInitTimer1();
     a50:	0e 94 c4 02 	call	0x588	; 0x588 <Timer_vidInitTimer1>
	Timer_vidSetCallBackTimer1(poll);
     a54:	84 ea       	ldi	r24, 0xA4	; 164
     a56:	94 e0       	ldi	r25, 0x04	; 4
     a58:	0c 94 05 03 	jmp	0x60a	; 0x60a <Timer_vidSetCallBackTimer1>

00000a5c <Poller__StartPolling>:
}

void Poller__StartPolling(void) {
	Timer_vidStartTimer1();
     a5c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <Timer_vidStartTimer1>

00000a60 <Poller__StopPolling>:
}

void Poller__StopPolling(void) {
	Timer_vidStopTimer1();
     a60:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <Timer_vidStopTimer1>

00000a64 <poller_SetPollTime>:
}


void poller_SetPollTime(uint32 time) {

	pollTimeCounter = time / time_ms;
     a64:	24 e1       	ldi	r18, 0x14	; 20
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodsi4>
     a70:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <pollTimeCounter+0x1>
     a74:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <pollTimeCounter>

}
     a78:	08 95       	ret

00000a7a <Charge_Logic>:
#include "avr/interrupt.h"
#include <math.h>

void Charge_Logic(void) {
	// Enable an alternative functionality on PC1
	DDRC &= ~(1 << PC1);  // Set PC1 as output
     a7a:	a1 98       	cbi	0x14, 1	; 20
	PORTC &= ~(1 << PC1); // Turn on alternative indicator
     a7c:	a9 98       	cbi	0x15, 1	; 21
    // Set PC0 as output and drive it HIGH
    DDRC |= (1 << PC0);  // Set PC0 as output
     a7e:	a0 9a       	sbi	0x14, 0	; 20
    PORTC |= (1 << PC0); // Turn on charging
     a80:	a8 9a       	sbi	0x15, 0	; 21
}
     a82:	08 95       	ret

00000a84 <Stop_Charge_Logic>:

void Stop_Charge_Logic(void) {
    // Stop charging by clearing PC0
    PORTC &= ~(1 << PC0); // Turn off charging
     a84:	a8 98       	cbi	0x15, 0	; 21
    DDRC &= ~(1 << PC0);  // Optionally, set PC0 as input (optional)
     a86:	a0 98       	cbi	0x14, 0	; 20

    // Enable an alternative functionality on PC1
    DDRC |= (1 << PC1);  // Set PC1 as output
     a88:	a1 9a       	sbi	0x14, 1	; 20
    PORTC |= (1 << PC1); // Turn on alternative indicator
     a8a:	a9 9a       	sbi	0x15, 1	; 21
}
     a8c:	08 95       	ret

00000a8e <Button_Init>:



void Button_Init(void) {
    // Configure PD2 (INT0) and PD3 (INT1) as inputs
    DDRD &= ~((1 << PD2) | (1 << PD3)); // Set PD2 and PD3 as input
     a8e:	81 b3       	in	r24, 0x11	; 17
     a90:	83 7f       	andi	r24, 0xF3	; 243
     a92:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1 << PD2) | (1 << PD3);   // Enable internal pull-up resistors
     a94:	82 b3       	in	r24, 0x12	; 18
     a96:	8c 60       	ori	r24, 0x0C	; 12
     a98:	82 bb       	out	0x12, r24	; 18

    // Configure falling-edge interrupt for INT0 (PD2) and INT1 (PD3)
    MCUCR |= (1 << ISC01) | (1 << ISC11); // Falling edge triggers
     a9a:	85 b7       	in	r24, 0x35	; 53
     a9c:	8a 60       	ori	r24, 0x0A	; 10
     a9e:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~((1 << ISC00) | (1 << ISC10)); // Ensure falling edge mode
     aa0:	85 b7       	in	r24, 0x35	; 53
     aa2:	8a 7f       	andi	r24, 0xFA	; 250
     aa4:	85 bf       	out	0x35, r24	; 53

    // Enable INT0 and INT1
    GICR |= (1 << INT0) | (1 << INT1);
     aa6:	8b b7       	in	r24, 0x3b	; 59
     aa8:	80 6c       	ori	r24, 0xC0	; 192
     aaa:	8b bf       	out	0x3b, r24	; 59

    // Enable global interrupts
    sei();
     aac:	78 94       	sei
}
     aae:	08 95       	ret

00000ab0 <calculateChargePercentage>:
/**
 * @brief Calculate the charge percentage based on the current voltage.
 * @param voltage The current voltage of the capacitor.
 * @return Charge percentage (0 to 100).
 */
float calculateChargePercentage(float voltage) {
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	60 97       	sbiw	r28, 0x10	; 16
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	6d 87       	std	Y+13, r22	; 0x0d
     ac6:	7e 87       	std	Y+14, r23	; 0x0e
     ac8:	8f 87       	std	Y+15, r24	; 0x0f
     aca:	98 8b       	std	Y+16, r25	; 0x10
    if (voltage < MIN_VOLTAGE) {
     acc:	2e ea       	ldi	r18, 0xAE	; 174
     ace:	37 e4       	ldi	r19, 0x47	; 71
     ad0:	41 e2       	ldi	r20, 0x21	; 33
     ad2:	5f e3       	ldi	r21, 0x3F	; 63
     ad4:	6d 85       	ldd	r22, Y+13	; 0x0d
     ad6:	7e 85       	ldd	r23, Y+14	; 0x0e
     ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
     ada:	98 89       	ldd	r25, Y+16	; 0x10
     adc:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__cmpsf2>
     ae0:	87 fd       	sbrc	r24, 7
     ae2:	43 c0       	rjmp	.+134    	; 0xb6a <calculateChargePercentage+0xba>
        return 0.0; // Below minimum voltage
    } else if (voltage > MAX_VOLTAGE) {
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	48 e8       	ldi	r20, 0x88	; 136
     aea:	50 e4       	ldi	r21, 0x40	; 64
     aec:	6d 85       	ldd	r22, Y+13	; 0x0d
     aee:	7e 85       	ldd	r23, Y+14	; 0x0e
     af0:	8f 85       	ldd	r24, Y+15	; 0x0f
     af2:	98 89       	ldd	r25, Y+16	; 0x10
     af4:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__gesf2>
     af8:	18 16       	cp	r1, r24
     afa:	e4 f1       	brlt	.+120    	; 0xb74 <calculateChargePercentage+0xc4>
        return 100.0; // Above maximum voltage
    }
    return ((voltage - MIN_VOLTAGE) / (MAX_VOLTAGE - MIN_VOLTAGE)) * 100.0;
     afc:	2e ea       	ldi	r18, 0xAE	; 174
     afe:	37 e4       	ldi	r19, 0x47	; 71
     b00:	41 e2       	ldi	r20, 0x21	; 33
     b02:	5f e3       	ldi	r21, 0x3F	; 63
     b04:	6d 85       	ldd	r22, Y+13	; 0x0d
     b06:	7e 85       	ldd	r23, Y+14	; 0x0e
     b08:	8f 85       	ldd	r24, Y+15	; 0x0f
     b0a:	98 89       	ldd	r25, Y+16	; 0x10
     b0c:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__subsf3>
     b10:	69 87       	std	Y+9, r22	; 0x09
     b12:	7a 87       	std	Y+10, r23	; 0x0a
     b14:	8b 87       	std	Y+11, r24	; 0x0b
     b16:	9c 87       	std	Y+12, r25	; 0x0c
     b18:	24 e1       	ldi	r18, 0x14	; 20
     b1a:	3e ea       	ldi	r19, 0xAE	; 174
     b1c:	47 e6       	ldi	r20, 0x67	; 103
     b1e:	50 e4       	ldi	r21, 0x40	; 64
     b20:	69 85       	ldd	r22, Y+9	; 0x09
     b22:	7a 85       	ldd	r23, Y+10	; 0x0a
     b24:	8b 85       	ldd	r24, Y+11	; 0x0b
     b26:	9c 85       	ldd	r25, Y+12	; 0x0c
     b28:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divsf3>
     b2c:	6d 83       	std	Y+5, r22	; 0x05
     b2e:	7e 83       	std	Y+6, r23	; 0x06
     b30:	8f 83       	std	Y+7, r24	; 0x07
     b32:	98 87       	std	Y+8, r25	; 0x08
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	48 ec       	ldi	r20, 0xC8	; 200
     b3a:	52 e4       	ldi	r21, 0x42	; 66
     b3c:	6d 81       	ldd	r22, Y+5	; 0x05
     b3e:	7e 81       	ldd	r23, Y+6	; 0x06
     b40:	8f 81       	ldd	r24, Y+7	; 0x07
     b42:	98 85       	ldd	r25, Y+8	; 0x08
     b44:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__mulsf3>
     b48:	69 83       	std	Y+1, r22	; 0x01
     b4a:	7a 83       	std	Y+2, r23	; 0x02
     b4c:	8b 83       	std	Y+3, r24	; 0x03
     b4e:	9c 83       	std	Y+4, r25	; 0x04
     b50:	69 81       	ldd	r22, Y+1	; 0x01
     b52:	7a 81       	ldd	r23, Y+2	; 0x02
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
}
     b58:	60 96       	adiw	r28, 0x10	; 16
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret
 * @param voltage The current voltage of the capacitor.
 * @return Charge percentage (0 to 100).
 */
float calculateChargePercentage(float voltage) {
    if (voltage < MIN_VOLTAGE) {
        return 0.0; // Below minimum voltage
     b6a:	19 82       	std	Y+1, r1	; 0x01
     b6c:	1a 82       	std	Y+2, r1	; 0x02
     b6e:	1b 82       	std	Y+3, r1	; 0x03
     b70:	1c 82       	std	Y+4, r1	; 0x04
     b72:	ee cf       	rjmp	.-36     	; 0xb50 <calculateChargePercentage+0xa0>
    } else if (voltage > MAX_VOLTAGE) {
        return 100.0; // Above maximum voltage
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a8 ec       	ldi	r26, 0xC8	; 200
     b7a:	b2 e4       	ldi	r27, 0x42	; 66
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	9a 83       	std	Y+2, r25	; 0x02
     b80:	ab 83       	std	Y+3, r26	; 0x03
     b82:	bc 83       	std	Y+4, r27	; 0x04
     b84:	e5 cf       	rjmp	.-54     	; 0xb50 <calculateChargePercentage+0xa0>

00000b86 <calculateTimeRemaining>:
 * @param targetVoltage The target voltage to reach.
 * @param chargingCurrent The current used for charging (in amps).
 * @param capacitorValue The capacitance value of the capacitor (in farads).
 * @return Time remaining for charging (in seconds).
 */
float calculateTimeRemaining(float currentVoltage, float targetVoltage, float chargingCurrent, float capacitorValue) {
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	ac 97       	sbiw	r28, 0x2c	; 44
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	6d 8f       	std	Y+29, r22	; 0x1d
     bac:	7e 8f       	std	Y+30, r23	; 0x1e
     bae:	8f 8f       	std	Y+31, r24	; 0x1f
     bb0:	98 a3       	std	Y+32, r25	; 0x20
     bb2:	29 a3       	std	Y+33, r18	; 0x21
     bb4:	3a a3       	std	Y+34, r19	; 0x22
     bb6:	4b a3       	std	Y+35, r20	; 0x23
     bb8:	5c a3       	std	Y+36, r21	; 0x24
     bba:	ed a2       	std	Y+37, r14	; 0x25
     bbc:	fe a2       	std	Y+38, r15	; 0x26
     bbe:	0f a3       	std	Y+39, r16	; 0x27
     bc0:	18 a7       	std	Y+40, r17	; 0x28
     bc2:	a9 a6       	std	Y+41, r10	; 0x29
     bc4:	ba a6       	std	Y+42, r11	; 0x2a
     bc6:	cb a6       	std	Y+43, r12	; 0x2b
     bc8:	dc a6       	std	Y+44, r13	; 0x2c
    if (currentVoltage >= targetVoltage || chargingCurrent <= 0 || capacitorValue <= 0) {
     bca:	29 a1       	ldd	r18, Y+33	; 0x21
     bcc:	3a a1       	ldd	r19, Y+34	; 0x22
     bce:	4b a1       	ldd	r20, Y+35	; 0x23
     bd0:	5c a1       	ldd	r21, Y+36	; 0x24
     bd2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bd4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     bd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bd8:	98 a1       	ldd	r25, Y+32	; 0x20
     bda:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__gesf2>
     bde:	87 ff       	sbrs	r24, 7
     be0:	86 c0       	rjmp	.+268    	; 0xcee <calculateTimeRemaining+0x168>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	a9 01       	movw	r20, r18
     be8:	6d a1       	ldd	r22, Y+37	; 0x25
     bea:	7e a1       	ldd	r23, Y+38	; 0x26
     bec:	8f a1       	ldd	r24, Y+39	; 0x27
     bee:	98 a5       	ldd	r25, Y+40	; 0x28
     bf0:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__cmpsf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	0c f0       	brlt	.+2      	; 0xbfa <calculateTimeRemaining+0x74>
     bf8:	7a c0       	rjmp	.+244    	; 0xcee <calculateTimeRemaining+0x168>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	a9 01       	movw	r20, r18
     c00:	69 a5       	ldd	r22, Y+41	; 0x29
     c02:	7a a5       	ldd	r23, Y+42	; 0x2a
     c04:	8b a5       	ldd	r24, Y+43	; 0x2b
     c06:	9c a5       	ldd	r25, Y+44	; 0x2c
     c08:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__cmpsf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	0c f0       	brlt	.+2      	; 0xc12 <calculateTimeRemaining+0x8c>
     c10:	6e c0       	rjmp	.+220    	; 0xcee <calculateTimeRemaining+0x168>
        return 0.0; // No time remaining if already charged or invalid input
    }

    // Calculate equivalent resistance (Ohm's law)
    float resistance = MAX_VOLTAGE / chargingCurrent;
     c12:	2d a1       	ldd	r18, Y+37	; 0x25
     c14:	3e a1       	ldd	r19, Y+38	; 0x26
     c16:	4f a1       	ldd	r20, Y+39	; 0x27
     c18:	58 a5       	ldd	r21, Y+40	; 0x28
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	88 e8       	ldi	r24, 0x88	; 136
     c20:	90 e4       	ldi	r25, 0x40	; 64
     c22:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divsf3>
     c26:	69 83       	std	Y+1, r22	; 0x01
     c28:	7a 83       	std	Y+2, r23	; 0x02
     c2a:	8b 83       	std	Y+3, r24	; 0x03
     c2c:	9c 83       	std	Y+4, r25	; 0x04

    // Calculate the remaining time for charging
    float timeRemaining = -resistance * capacitorValue * log(1.0 - (targetVoltage / MAX_VOLTAGE));
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	ab 81       	ldd	r26, Y+3	; 0x03
     c34:	bc 81       	ldd	r27, Y+4	; 0x04
     c36:	b0 58       	subi	r27, 0x80	; 128
     c38:	89 8f       	std	Y+25, r24	; 0x19
     c3a:	9a 8f       	std	Y+26, r25	; 0x1a
     c3c:	ab 8f       	std	Y+27, r26	; 0x1b
     c3e:	bc 8f       	std	Y+28, r27	; 0x1c
     c40:	29 a5       	ldd	r18, Y+41	; 0x29
     c42:	3a a5       	ldd	r19, Y+42	; 0x2a
     c44:	4b a5       	ldd	r20, Y+43	; 0x2b
     c46:	5c a5       	ldd	r21, Y+44	; 0x2c
     c48:	69 8d       	ldd	r22, Y+25	; 0x19
     c4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c50:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__mulsf3>
     c54:	6d 8b       	std	Y+21, r22	; 0x15
     c56:	7e 8b       	std	Y+22, r23	; 0x16
     c58:	8f 8b       	std	Y+23, r24	; 0x17
     c5a:	98 8f       	std	Y+24, r25	; 0x18
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	48 e8       	ldi	r20, 0x88	; 136
     c62:	50 e4       	ldi	r21, 0x40	; 64
     c64:	69 a1       	ldd	r22, Y+33	; 0x21
     c66:	7a a1       	ldd	r23, Y+34	; 0x22
     c68:	8b a1       	ldd	r24, Y+35	; 0x23
     c6a:	9c a1       	ldd	r25, Y+36	; 0x24
     c6c:	0e 94 5d 25 	call	0x4aba	; 0x4aba <__divsf3>
     c70:	69 8b       	std	Y+17, r22	; 0x11
     c72:	7a 8b       	std	Y+18, r23	; 0x12
     c74:	8b 8b       	std	Y+19, r24	; 0x13
     c76:	9c 8b       	std	Y+20, r25	; 0x14
     c78:	29 89       	ldd	r18, Y+17	; 0x11
     c7a:	3a 89       	ldd	r19, Y+18	; 0x12
     c7c:	4b 89       	ldd	r20, Y+19	; 0x13
     c7e:	5c 89       	ldd	r21, Y+20	; 0x14
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e8       	ldi	r24, 0x80	; 128
     c86:	9f e3       	ldi	r25, 0x3F	; 63
     c88:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__subsf3>
     c8c:	6d 87       	std	Y+13, r22	; 0x0d
     c8e:	7e 87       	std	Y+14, r23	; 0x0e
     c90:	8f 87       	std	Y+15, r24	; 0x0f
     c92:	98 8b       	std	Y+16, r25	; 0x10
     c94:	6d 85       	ldd	r22, Y+13	; 0x0d
     c96:	7e 85       	ldd	r23, Y+14	; 0x0e
     c98:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9a:	98 89       	ldd	r25, Y+16	; 0x10
     c9c:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <log>
     ca0:	69 87       	std	Y+9, r22	; 0x09
     ca2:	7a 87       	std	Y+10, r23	; 0x0a
     ca4:	8b 87       	std	Y+11, r24	; 0x0b
     ca6:	9c 87       	std	Y+12, r25	; 0x0c
     ca8:	29 85       	ldd	r18, Y+9	; 0x09
     caa:	3a 85       	ldd	r19, Y+10	; 0x0a
     cac:	4b 85       	ldd	r20, Y+11	; 0x0b
     cae:	5c 85       	ldd	r21, Y+12	; 0x0c
     cb0:	6d 89       	ldd	r22, Y+21	; 0x15
     cb2:	7e 89       	ldd	r23, Y+22	; 0x16
     cb4:	8f 89       	ldd	r24, Y+23	; 0x17
     cb6:	98 8d       	ldd	r25, Y+24	; 0x18
     cb8:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__mulsf3>
     cbc:	6d 83       	std	Y+5, r22	; 0x05
     cbe:	7e 83       	std	Y+6, r23	; 0x06
     cc0:	8f 83       	std	Y+7, r24	; 0x07
     cc2:	98 87       	std	Y+8, r25	; 0x08
     cc4:	6d 81       	ldd	r22, Y+5	; 0x05
     cc6:	7e 81       	ldd	r23, Y+6	; 0x06
     cc8:	8f 81       	ldd	r24, Y+7	; 0x07
     cca:	98 85       	ldd	r25, Y+8	; 0x08

    return timeRemaining; // Time in seconds
}
     ccc:	ac 96       	adiw	r28, 0x2c	; 44
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	bf 90       	pop	r11
     cea:	af 90       	pop	r10
     cec:	08 95       	ret
 * @param capacitorValue The capacitance value of the capacitor (in farads).
 * @return Time remaining for charging (in seconds).
 */
float calculateTimeRemaining(float currentVoltage, float targetVoltage, float chargingCurrent, float capacitorValue) {
    if (currentVoltage >= targetVoltage || chargingCurrent <= 0 || capacitorValue <= 0) {
        return 0.0; // No time remaining if already charged or invalid input
     cee:	1d 82       	std	Y+5, r1	; 0x05
     cf0:	1e 82       	std	Y+6, r1	; 0x06
     cf2:	1f 82       	std	Y+7, r1	; 0x07
     cf4:	18 86       	std	Y+8, r1	; 0x08
     cf6:	e6 cf       	rjmp	.-52     	; 0xcc4 <calculateTimeRemaining+0x13e>

00000cf8 <LCD_Command>:

// Pin definitions
#define RS 0  // RS pin connected to Pin 0 of lcdControlProxy
#define EN 1  // EN pin connected to Pin 1 of lcdControlProxy

void LCD_Command(unsigned char cmnd) {
     cf8:	cf 93       	push	r28
     cfa:	c8 2f       	mov	r28, r24
    // Send upper nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (cmnd & 0xF0));
     cfc:	8a e8       	ldi	r24, 0x8A	; 138
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 1c 03 	call	0x638	; 0x638 <Proxy_ReadPort>
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	6c 2f       	mov	r22, r28
     d08:	60 7f       	andi	r22, 0xF0	; 240
     d0a:	68 2b       	or	r22, r24
     d0c:	8a e8       	ldi	r24, 0x8A	; 138
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 16 03 	call	0x62c	; 0x62c <Proxy_WritePort>
    Proxy_ClearPin(&lcdControlProxy, RS); // RS=0, command register
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	86 e8       	ldi	r24, 0x86	; 134
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 30 03 	call	0x660	; 0x660 <Proxy_ClearPin>
    Proxy_SetPin(&lcdControlProxy, EN);  // Enable pulse
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	86 e8       	ldi	r24, 0x86	; 134
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 22 03 	call	0x644	; 0x644 <Proxy_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d28:	8f ec       	ldi	r24, 0xCF	; 207
     d2a:	97 e0       	ldi	r25, 0x07	; 7
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <LCD_Command+0x34>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <LCD_Command+0x3a>
     d32:	00 00       	nop
    _delay_ms(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	86 e8       	ldi	r24, 0x86	; 134
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 30 03 	call	0x660	; 0x660 <Proxy_ClearPin>
//    _delay_us(200);

    // Send lower nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (cmnd << 4));
     d3e:	8a e8       	ldi	r24, 0x8A	; 138
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 1c 03 	call	0x638	; 0x638 <Proxy_ReadPort>
     d46:	8f 70       	andi	r24, 0x0F	; 15
     d48:	90 e1       	ldi	r25, 0x10	; 16
     d4a:	c9 9f       	mul	r28, r25
     d4c:	b0 01       	movw	r22, r0
     d4e:	11 24       	eor	r1, r1
     d50:	68 2b       	or	r22, r24
     d52:	8a e8       	ldi	r24, 0x8A	; 138
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 16 03 	call	0x62c	; 0x62c <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, EN);
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	86 e8       	ldi	r24, 0x86	; 134
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 22 03 	call	0x644	; 0x644 <Proxy_SetPin>
     d64:	8f ec       	ldi	r24, 0xCF	; 207
     d66:	97 e0       	ldi	r25, 0x07	; 7
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <LCD_Command+0x70>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <LCD_Command+0x76>
     d6e:	00 00       	nop
    _delay_ms(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	86 e8       	ldi	r24, 0x86	; 134
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 30 03 	call	0x660	; 0x660 <Proxy_ClearPin>
     d7a:	8f e9       	ldi	r24, 0x9F	; 159
     d7c:	9f e0       	ldi	r25, 0x0F	; 15
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <LCD_Command+0x86>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <LCD_Command+0x8c>
     d84:	00 00       	nop
    _delay_ms(2);
}
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <LCD_Char>:

void LCD_Char(unsigned char data) {
     d8a:	cf 93       	push	r28
     d8c:	c8 2f       	mov	r28, r24
    // Send upper nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (data & 0xF0));
     d8e:	8a e8       	ldi	r24, 0x8A	; 138
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 1c 03 	call	0x638	; 0x638 <Proxy_ReadPort>
     d96:	8f 70       	andi	r24, 0x0F	; 15
     d98:	6c 2f       	mov	r22, r28
     d9a:	60 7f       	andi	r22, 0xF0	; 240
     d9c:	68 2b       	or	r22, r24
     d9e:	8a e8       	ldi	r24, 0x8A	; 138
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 16 03 	call	0x62c	; 0x62c <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, RS);  // RS=1, data register
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	86 e8       	ldi	r24, 0x86	; 134
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 22 03 	call	0x644	; 0x644 <Proxy_SetPin>
    Proxy_SetPin(&lcdControlProxy, EN); // Enable pulse
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	86 e8       	ldi	r24, 0x86	; 134
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 22 03 	call	0x644	; 0x644 <Proxy_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	8a 95       	dec	r24
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <LCD_Char+0x32>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <LCD_Char+0x38>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	86 e8       	ldi	r24, 0x86	; 134
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 30 03 	call	0x660	; 0x660 <Proxy_ClearPin>
//    _delay_us(200);

    // Send lower nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (data << 4));
     dcc:	8a e8       	ldi	r24, 0x8A	; 138
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 1c 03 	call	0x638	; 0x638 <Proxy_ReadPort>
     dd4:	8f 70       	andi	r24, 0x0F	; 15
     dd6:	90 e1       	ldi	r25, 0x10	; 16
     dd8:	c9 9f       	mul	r28, r25
     dda:	b0 01       	movw	r22, r0
     ddc:	11 24       	eor	r1, r1
     dde:	68 2b       	or	r22, r24
     de0:	8a e8       	ldi	r24, 0x8A	; 138
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 16 03 	call	0x62c	; 0x62c <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, EN);
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	86 e8       	ldi	r24, 0x86	; 134
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 22 03 	call	0x644	; 0x644 <Proxy_SetPin>
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	8a 95       	dec	r24
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <LCD_Char+0x6a>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <LCD_Char+0x70>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	86 e8       	ldi	r24, 0x86	; 134
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 30 03 	call	0x660	; 0x660 <Proxy_ClearPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e04:	8f e9       	ldi	r24, 0x9F	; 159
     e06:	9f e0       	ldi	r25, 0x0F	; 15
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <LCD_Char+0x7e>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <LCD_Char+0x84>
     e0e:	00 00       	nop
    _delay_ms(2);
}
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <LCD_Init>:

void LCD_Init(void) {
    // Set LCD port direction (D4-D7 as output, RS and EN as output)
    Proxy_SetPortDirection(&lcdDataProxy, 0xF0); // Data pins D4-D7 (upper nibble)
     e14:	60 ef       	ldi	r22, 0xF0	; 240
     e16:	8a e8       	ldi	r24, 0x8A	; 138
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 11 03 	call	0x622	; 0x622 <Proxy_SetPortDirection>
    Proxy_SetPortDirection(&lcdControlProxy, (1 << RS) | (1 << EN)); // RS and EN pins
     e1e:	63 e0       	ldi	r22, 0x03	; 3
     e20:	86 e8       	ldi	r24, 0x86	; 134
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 11 03 	call	0x622	; 0x622 <Proxy_SetPortDirection>
     e28:	8f e3       	ldi	r24, 0x3F	; 63
     e2a:	9c e9       	ldi	r25, 0x9C	; 156
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <LCD_Init+0x18>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <LCD_Init+0x1e>
     e32:	00 00       	nop

    _delay_ms(20); // LCD Power ON delay always >15ms

    LCD_Command(0x02); // Initialize LCD in 4-bit mode
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_Command>
    LCD_Command(0x28); // 2 lines, 5x7 matrix in 4-bit mode
     e3a:	88 e2       	ldi	r24, 0x28	; 40
     e3c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_Command>
    LCD_Command(0x0C); // Display ON, cursor OFF
     e40:	8c e0       	ldi	r24, 0x0C	; 12
     e42:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_Command>
    LCD_Command(0x06); // Increment cursor (shift cursor to right)
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_Command>
    LCD_Command(0x01); // Clear display
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_Command>
     e52:	8f e9       	ldi	r24, 0x9F	; 159
     e54:	9f e0       	ldi	r25, 0x0F	; 15
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <LCD_Init+0x42>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <LCD_Init+0x48>
     e5c:	00 00       	nop
    _delay_ms(2);
}
     e5e:	08 95       	ret

00000e60 <LCD_String>:

void LCD_String(char *str) {
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	ec 01       	movw	r28, r24
    while (*str) {
     e66:	89 91       	ld	r24, Y+
     e68:	81 11       	cpse	r24, r1
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <LCD_String+0x12>
        LCD_Char(*str++);
    }
}
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret
    _delay_ms(2);
}

void LCD_String(char *str) {
    while (*str) {
        LCD_Char(*str++);
     e72:	0e 94 c5 06 	call	0xd8a	; 0xd8a <LCD_Char>
     e76:	f7 cf       	rjmp	.-18     	; 0xe66 <LCD_String+0x6>

00000e78 <LCD_String_xy>:
    }
}

void LCD_String_xy(char row, char pos, char *str) {
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ea 01       	movw	r28, r20
    if (row == 0 && pos < 16)
     e7e:	81 11       	cpse	r24, r1
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <LCD_String_xy+0x1c>
        LCD_Command((pos & 0x0F) | 0x80); // First row position
     e82:	86 2f       	mov	r24, r22
     e84:	80 68       	ori	r24, 0x80	; 128
        LCD_Char(*str++);
    }
}

void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
     e86:	60 31       	cpi	r22, 0x10	; 16
     e88:	58 f0       	brcs	.+22     	; 0xea0 <LCD_String_xy+0x28>
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    LCD_String(str);
     e8a:	ce 01       	movw	r24, r28
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    LCD_String(str);
     e90:	0c 94 30 07 	jmp	0xe60	; 0xe60 <LCD_String>
}

void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	c9 f7       	brne	.-14     	; 0xe8a <LCD_String_xy+0x12>
     e98:	60 31       	cpi	r22, 0x10	; 16
     e9a:	b8 f7       	brcc	.-18     	; 0xe8a <LCD_String_xy+0x12>
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
     e9c:	86 2f       	mov	r24, r22
     e9e:	80 6c       	ori	r24, 0xC0	; 192
     ea0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_Command>
     ea4:	f2 cf       	rjmp	.-28     	; 0xe8a <LCD_String_xy+0x12>

00000ea6 <LCD_Clear>:
    LCD_String(str);
}

void LCD_Clear(void) {
    LCD_Command(0x01); // Clear display
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_Command>
     eac:	8f e9       	ldi	r24, 0x9F	; 159
     eae:	9f e0       	ldi	r25, 0x0F	; 15
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <LCD_Clear+0xa>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <LCD_Clear+0x10>
     eb6:	00 00       	nop
    _delay_ms(2);
    LCD_Command(0x80); // Cursor at home position
     eb8:	80 e8       	ldi	r24, 0x80	; 128
     eba:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <LCD_Command>

00000ebe <LCD_Float>:
}

void LCD_Float(float value) {
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	2e 97       	sbiw	r28, 0x0e	; 14
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	6b 87       	std	Y+11, r22	; 0x0b
     ed8:	7c 87       	std	Y+12, r23	; 0x0c
     eda:	8d 87       	std	Y+13, r24	; 0x0d
     edc:	9e 87       	std	Y+14, r25	; 0x0e
	char buffer[10];
	dtostrf(value, 4, 2, buffer);  // Convert float to string with 2 decimal places
     ede:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	8e 01       	movw	r16, r28
     ee8:	0f 5f       	subi	r16, 0xFF	; 255
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	22 e0       	ldi	r18, 0x02	; 2
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	44 e0       	ldi	r20, 0x04	; 4
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <dtostrf>
	LCD_String(buffer);  // Display the string on the LCD
     ef8:	c8 01       	movw	r24, r16
     efa:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_String>
}
     efe:	2e 96       	adiw	r28, 0x0e	; 14
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <UART_Init>:
#include "avr/io.h"
#include <stdio.h>

#define F_CPU 8000000 
void UART_Init(unsigned int baud) {
	unsigned int ubrr = (F_CPU / 16 / baud) - 1;
     f14:	9c 01       	movw	r18, r24
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	60 e2       	ldi	r22, 0x20	; 32
     f1c:	71 ea       	ldi	r23, 0xA1	; 161
     f1e:	87 e0       	ldi	r24, 0x07	; 7
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <__divmodsi4>
     f26:	21 50       	subi	r18, 0x01	; 1
     f28:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(ubrr >> 8);  // Set high byte of baud rate
     f2a:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)ubrr;        // Set low byte of baud rate
     f2c:	29 b9       	out	0x09, r18	; 9
	UCSRB = (1 << TXEN);                // Enable transmitter
     f2e:	88 e0       	ldi	r24, 0x08	; 8
     f30:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0); // 8-bit data, 1 stop bit
     f32:	86 e8       	ldi	r24, 0x86	; 134
     f34:	80 bd       	out	0x20, r24	; 32
}
     f36:	08 95       	ret

00000f38 <UART_Transmit>:

// Function to send a character via UART
void UART_Transmit(char data) {
	while (!(UCSRA & (1 << UDRE)));  // Wait for the buffer to be empty
     f38:	5d 9b       	sbis	0x0b, 5	; 11
     f3a:	fe cf       	rjmp	.-4      	; 0xf38 <UART_Transmit>
	UDR = data;                     // Send the character
     f3c:	8c b9       	out	0x0c, r24	; 12
}
     f3e:	08 95       	ret

00000f40 <UART_Print>:



void UART_Print(const char *str) {
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	ec 01       	movw	r28, r24
    while (*str) {
     f46:	89 91       	ld	r24, Y+
     f48:	81 11       	cpse	r24, r1
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <UART_Print+0x12>
        UART_Transmit(*str++);
    }
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret



void UART_Print(const char *str) {
    while (*str) {
        UART_Transmit(*str++);
     f52:	0e 94 9c 07 	call	0xf38	; 0xf38 <UART_Transmit>
     f56:	f7 cf       	rjmp	.-18     	; 0xf46 <UART_Print+0x6>

00000f58 <UART_PrintFloat>:
    }
}


// UART Print Float Using dtostrf
void UART_PrintFloat(float value) {
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	64 97       	sbiw	r28, 0x14	; 20
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	69 8b       	std	Y+17, r22	; 0x11
     f72:	7a 8b       	std	Y+18, r23	; 0x12
     f74:	8b 8b       	std	Y+19, r24	; 0x13
     f76:	9c 8b       	std	Y+20, r25	; 0x14
    char buffer[16];
    dtostrf(value, 6, 2, buffer); // Convert float to string (width: 6, precision: 2)
     f78:	69 89       	ldd	r22, Y+17	; 0x11
     f7a:	7a 89       	ldd	r23, Y+18	; 0x12
     f7c:	8b 89       	ldd	r24, Y+19	; 0x13
     f7e:	9c 89       	ldd	r25, Y+20	; 0x14
     f80:	8e 01       	movw	r16, r28
     f82:	0f 5f       	subi	r16, 0xFF	; 255
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	22 e0       	ldi	r18, 0x02	; 2
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	46 e0       	ldi	r20, 0x06	; 6
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <dtostrf>
    UART_Print(buffer);
     f92:	c8 01       	movw	r24, r16
     f94:	0e 94 a0 07 	call	0xf40	; 0xf40 <UART_Print>
}
     f98:	64 96       	adiw	r28, 0x14	; 20
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <xCoRoutineCreate>:
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode,
                                 UBaseType_t uxPriority,
                                 UBaseType_t uxIndex )
    {
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	6c 01       	movw	r12, r24
     fbe:	16 2f       	mov	r17, r22
     fc0:	f4 2e       	mov	r15, r20

        /* Allocate the memory that will store the co-routine control block. */
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     fc2:	8a e1       	ldi	r24, 0x1A	; 26
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 3e 0b 	call	0x167c	; 0x167c <pvPortMalloc>
     fca:	ec 01       	movw	r28, r24

            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );

        if( pxCoRoutine )
     fce:	20 97       	sbiw	r28, 0x00	; 0
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <xCoRoutineCreate+0x26>
     fd2:	56 c0       	rjmp	.+172    	; 0x1080 <xCoRoutineCreate+0xd2>
        {
            /* If pxCurrentCoRoutine is NULL then this is the first co-routine to
            * be created and the co-routine data structures need initialising. */
            if( pxCurrentCoRoutine == NULL )
     fd4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pxCurrentCoRoutine>
     fd8:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <pxCurrentCoRoutine+0x1>
     fdc:	89 2b       	or	r24, r25
     fde:	21 f5       	brne	.+72     	; 0x1028 <xCoRoutineCreate+0x7a>
            {
                pxCurrentCoRoutine = pxCoRoutine;
     fe0:	d0 93 56 01 	sts	0x0156, r29	; 0x800156 <pxCurrentCoRoutine+0x1>
     fe4:	c0 93 55 01 	sts	0x0155, r28	; 0x800155 <pxCurrentCoRoutine>
    {
        UBaseType_t uxPriority;

        for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
        {
            vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     fe8:	86 e7       	ldi	r24, 0x76	; 118
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
     ff0:	8f e7       	ldi	r24, 0x7F	; 127
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
        }

        vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     ff8:	8d e6       	ldi	r24, 0x6D	; 109
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
        vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    1000:	84 e6       	ldi	r24, 0x64	; 100
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
        vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    1008:	87 e5       	ldi	r24, 0x57	; 87
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>

        /* Start with pxDelayedCoRoutineList using list1 and the
         * pxOverflowDelayedCoRoutineList using list2. */
        pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1010:	8d e6       	ldi	r24, 0x6D	; 109
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <pxDelayedCoRoutineList+0x1>
    1018:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    101c:	84 e6       	ldi	r24, 0x64	; 100
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <pxOverflowDelayedCoRoutineList+0x1>
    1024:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <pxOverflowDelayedCoRoutineList>
    1028:	11 11       	cpse	r17, r1
    102a:	11 e0       	ldi	r17, 0x01	; 1
            {
                uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
            }

            /* Fill out the co-routine control block from the function parameters. */
            pxCoRoutine->uxState = corINITIAL_STATE;
    102c:	19 8e       	std	Y+25, r1	; 0x19
    102e:	18 8e       	std	Y+24, r1	; 0x18
            pxCoRoutine->uxPriority = uxPriority;
    1030:	1e 8b       	std	Y+22, r17	; 0x16
            pxCoRoutine->uxIndex = uxIndex;
    1032:	ff 8a       	std	Y+23, r15	; 0x17
            pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    1034:	fe 01       	movw	r30, r28
    1036:	c1 92       	st	Z+, r12
    1038:	d1 92       	st	Z+, r13
    103a:	7f 01       	movw	r14, r30

            /* Initialise all the other co-routine control block parameters. */
            vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    103c:	cf 01       	movw	r24, r30
    103e:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInitialiseItem>
            vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    1042:	ce 01       	movw	r24, r28
    1044:	0c 96       	adiw	r24, 0x0c	; 12
    1046:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInitialiseItem>

            /* Set the co-routine control block as a link back from the ListItem_t.
             * This is so we can get back to the containing CRCB from a generic item
             * in a list. */
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    104a:	d9 87       	std	Y+9, r29	; 0x09
    104c:	c8 87       	std	Y+8, r28	; 0x08
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    104e:	db 8b       	std	Y+19, r29	; 0x13
    1050:	ca 8b       	std	Y+18, r28	; 0x12

            /* Event lists are always in priority order. */
            listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	81 1b       	sub	r24, r17
    1058:	91 09       	sbc	r25, r1
    105a:	9d 87       	std	Y+13, r25	; 0x0d
    105c:	8c 87       	std	Y+12, r24	; 0x0c

            /* Now the co-routine has been initialised it can be added to the ready
             * list at the correct priority. */
            prvAddCoRoutineToReadyQueue( pxCoRoutine );
    105e:	8e 89       	ldd	r24, Y+22	; 0x16
    1060:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <uxTopCoRoutineReadyPriority>
    1064:	98 17       	cp	r25, r24
    1066:	10 f4       	brcc	.+4      	; 0x106c <xCoRoutineCreate+0xbe>
    1068:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <uxTopCoRoutineReadyPriority>
    106c:	f9 e0       	ldi	r31, 0x09	; 9
    106e:	8f 9f       	mul	r24, r31
    1070:	c0 01       	movw	r24, r0
    1072:	11 24       	eor	r1, r1
    1074:	b7 01       	movw	r22, r14
    1076:	8a 58       	subi	r24, 0x8A	; 138
    1078:	9e 4f       	sbci	r25, 0xFE	; 254
    107a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsertEnd>

            xReturn = pdPASS;
    107e:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xCoRoutineCreate( xReturn );

        return xReturn;
    }
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	08 95       	ret

00001090 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

    void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay,
                                     List_t * pxEventList )
    {
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	8b 01       	movw	r16, r22

        traceENTER_vCoRoutineAddToDelayedList( xTicksToDelay, pxEventList );

        /* Calculate the time to wake - this may overflow but this is
         * not a problem. */
        xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    109a:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <xCoRoutineTickCount>
    109e:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <xCoRoutineTickCount+0x1>
    10a2:	c8 0f       	add	r28, r24
    10a4:	d9 1f       	adc	r29, r25

        /* We must remove ourselves from the ready list before adding
         * ourselves to the blocked list as the same list item is used for
         * both lists. */
        ( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    10a6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pxCurrentCoRoutine>
    10aa:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <pxCurrentCoRoutine+0x1>
    10ae:	02 96       	adiw	r24, 0x02	; 2
    10b0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    10b4:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <pxCurrentCoRoutine>
    10b8:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <pxCurrentCoRoutine+0x1>
    10bc:	fb 01       	movw	r30, r22
    10be:	d3 83       	std	Z+3, r29	; 0x03
    10c0:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xCoRoutineTickCount )
    10c2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <xCoRoutineTickCount>
    10c6:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <xCoRoutineTickCount+0x1>
    10ca:	6e 5f       	subi	r22, 0xFE	; 254
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	c8 17       	cp	r28, r24
    10d0:	d9 07       	cpc	r29, r25
    10d2:	b0 f4       	brcc	.+44     	; 0x1100 <vCoRoutineAddToDelayedList+0x70>
        {
            /* Wake time has overflowed.  Place this item in the
             * overflow list. */
            vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    10d4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <pxOverflowDelayedCoRoutineList>
    10d8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <pxOverflowDelayedCoRoutineList+0x1>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    10dc:	0e 94 bc 0b 	call	0x1778	; 0x1778 <vListInsert>
        }

        if( pxEventList )
    10e0:	01 15       	cp	r16, r1
    10e2:	11 05       	cpc	r17, r1
    10e4:	91 f0       	breq	.+36     	; 0x110a <vCoRoutineAddToDelayedList+0x7a>
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    10e6:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <pxCurrentCoRoutine>
    10ea:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <pxCurrentCoRoutine+0x1>
    10ee:	64 5f       	subi	r22, 0xF4	; 244
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	c8 01       	movw	r24, r16
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16

        if( pxEventList )
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    10fc:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <vListInsert>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1100:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <pxDelayedCoRoutineList>
    1104:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <pxDelayedCoRoutineList+0x1>
    1108:	e9 cf       	rjmp	.-46     	; 0x10dc <vCoRoutineAddToDelayedList+0x4c>
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <vCoRoutineSchedule>:
        xLastTickCount = xCoRoutineTickCount;
    }
/*-----------------------------------------------------------*/

    void vCoRoutineSchedule( void )
    {
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
        traceENTER_vCoRoutineSchedule();

        /* Only run a co-routine after prvInitialiseCoRoutineLists() has been
         * called.  prvInitialiseCoRoutineLists() is called automatically when a
         * co-routine is created. */
        if( pxDelayedCoRoutineList != NULL )
    111e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <pxDelayedCoRoutineList>
    1122:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <pxDelayedCoRoutineList+0x1>
    1126:	89 2b       	or	r24, r25
    1128:	09 f4       	brne	.+2      	; 0x112c <vCoRoutineSchedule+0x18>
    112a:	44 c0       	rjmp	.+136    	; 0x11b4 <vCoRoutineSchedule+0xa0>
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
            }
            portENABLE_INTERRUPTS();

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    112c:	99 e0       	ldi	r25, 0x09	; 9
    112e:	f9 2e       	mov	r15, r25
    static void prvCheckPendingReadyList( void )
    {
        /* Are there any co-routines waiting to get moved to the ready list?  These
         * are co-routines that have been readied by an ISR.  The ISR cannot access
         * the ready lists itself. */
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    1130:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <xPendingReadyCoRoutineList>
    1134:	81 11       	cpse	r24, r1
    1136:	44 c0       	rjmp	.+136    	; 0x11c0 <vCoRoutineSchedule+0xac>

    static void prvCheckDelayedList( void )
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    1138:	0e 94 3d 19 	call	0x327a	; 0x327a <xTaskGetTickCount>
    113c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <xLastTickCount>
    1140:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <xLastTickCount+0x1>
    1144:	82 1b       	sub	r24, r18
    1146:	93 0b       	sbc	r25, r19
    1148:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <xPassedTicks+0x1>
    114c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <xPassedTicks>
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
                    }
                }
                portENABLE_INTERRUPTS();

                prvAddCoRoutineToReadyQueue( pxCRCB );
    1150:	89 e0       	ldi	r24, 0x09	; 9
    1152:	f8 2e       	mov	r15, r24
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
    1154:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <xPassedTicks>
    1158:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <xPassedTicks+0x1>
    115c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <xCoRoutineTickCount>
    1160:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <xCoRoutineTickCount+0x1>
    1164:	21 15       	cp	r18, r1
    1166:	31 05       	cpc	r19, r1
    1168:	09 f0       	breq	.+2      	; 0x116c <vCoRoutineSchedule+0x58>
    116a:	4c c0       	rjmp	.+152    	; 0x1204 <vCoRoutineSchedule+0xf0>

                prvAddCoRoutineToReadyQueue( pxCRCB );
            }
        }

        xLastTickCount = xCoRoutineTickCount;
    116c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <xLastTickCount+0x1>
    1170:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <xLastTickCount>
    1174:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <uxTopCoRoutineReadyPriority>

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	99 e0       	ldi	r25, 0x09	; 9
    117e:	92 9f       	mul	r25, r18
    1180:	f0 01       	movw	r30, r0
    1182:	93 9f       	mul	r25, r19
    1184:	f0 0d       	add	r31, r0
    1186:	11 24       	eor	r1, r1
    1188:	ea 58       	subi	r30, 0x8A	; 138
    118a:	fe 4f       	sbci	r31, 0xFE	; 254
    118c:	40 81       	ld	r20, Z
    118e:	41 11       	cpse	r20, r1
    1190:	8d c0       	rjmp	.+282    	; 0x12ac <vCoRoutineSchedule+0x198>
            {
                if( uxTopCoRoutineReadyPriority == 0 )
    1192:	88 23       	and	r24, r24
    1194:	69 f0       	breq	.+26     	; 0x11b0 <vCoRoutineSchedule+0x9c>
                {
                    /* No more co-routines to check. */
                    return;
                }

                --uxTopCoRoutineReadyPriority;
    1196:	81 50       	subi	r24, 0x01	; 1

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	92 9f       	mul	r25, r18
    119e:	f0 01       	movw	r30, r0
    11a0:	93 9f       	mul	r25, r19
    11a2:	f0 0d       	add	r31, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	ea 58       	subi	r30, 0x8A	; 138
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	90 81       	ld	r25, Z
    11ac:	91 11       	cpse	r25, r1
    11ae:	7e c0       	rjmp	.+252    	; 0x12ac <vCoRoutineSchedule+0x198>
    11b0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <uxTopCoRoutineReadyPriority>
            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
        }

        traceRETURN_vCoRoutineSchedule();
    }
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	08 95       	ret
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
        {
            CRCB_t * pxUnblockedCRCB;

            /* The pending ready list can be accessed by an ISR. */
            portDISABLE_INTERRUPTS();
    11c0:	f8 94       	cli
            {
                pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyCoRoutineList ) );
    11c2:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <xPendingReadyCoRoutineList+0x5>
    11c6:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <xPendingReadyCoRoutineList+0x6>
    11ca:	c6 81       	ldd	r28, Z+6	; 0x06
    11cc:	d7 81       	ldd	r29, Z+7	; 0x07
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    11ce:	ce 01       	movw	r24, r28
    11d0:	0c 96       	adiw	r24, 0x0c	; 12
    11d2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>
            }
            portENABLE_INTERRUPTS();
    11d6:	78 94       	sei

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    11d8:	8e 01       	movw	r16, r28
    11da:	0e 5f       	subi	r16, 0xFE	; 254
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	c8 01       	movw	r24, r16
    11e0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    11e4:	8e 89       	ldd	r24, Y+22	; 0x16
    11e6:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <uxTopCoRoutineReadyPriority>
    11ea:	98 17       	cp	r25, r24
    11ec:	10 f4       	brcc	.+4      	; 0x11f2 <vCoRoutineSchedule+0xde>
    11ee:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <uxTopCoRoutineReadyPriority>
    11f2:	8f 9d       	mul	r24, r15
    11f4:	c0 01       	movw	r24, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	b8 01       	movw	r22, r16
    11fa:	8a 58       	subi	r24, 0x8A	; 138
    11fc:	9e 4f       	sbci	r25, 0xFE	; 254
    11fe:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsertEnd>
    1202:	96 cf       	rjmp	.-212    	; 0x1130 <vCoRoutineSchedule+0x1c>

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
        {
            xCoRoutineTickCount++;
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <xCoRoutineTickCount+0x1>
    120a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <xCoRoutineTickCount>
            xPassedTicks--;
    120e:	21 50       	subi	r18, 0x01	; 1
    1210:	31 09       	sbc	r19, r1
    1212:	30 93 4f 01 	sts	0x014F, r19	; 0x80014f <xPassedTicks+0x1>
    1216:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <xPassedTicks>

            /* If the tick count has overflowed we need to swap the ready lists. */
            if( xCoRoutineTickCount == 0 )
    121a:	89 2b       	or	r24, r25
    121c:	81 f4       	brne	.+32     	; 0x123e <vCoRoutineSchedule+0x12a>
    121e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <pxDelayedCoRoutineList>
    1222:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <pxDelayedCoRoutineList+0x1>
                List_t * pxTemp;

                /* Tick count has overflowed so we need to swap the delay lists.  If there are
                 * any items in pxDelayedCoRoutineList here then there is an error! */
                pxTemp = pxDelayedCoRoutineList;
                pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1226:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <pxOverflowDelayedCoRoutineList>
    122a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <pxOverflowDelayedCoRoutineList+0x1>
    122e:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <pxDelayedCoRoutineList+0x1>
    1232:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <pxDelayedCoRoutineList>
                pxOverflowDelayedCoRoutineList = pxTemp;
    1236:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <pxOverflowDelayedCoRoutineList+0x1>
    123a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <pxOverflowDelayedCoRoutineList>
            }

            /* See if this tick has made a timeout expire. */
            while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    123e:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <pxDelayedCoRoutineList>
    1242:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <pxDelayedCoRoutineList+0x1>
    1246:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <xCoRoutineTickCount>
    124a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <xCoRoutineTickCount+0x1>
    124e:	80 81       	ld	r24, Z
    1250:	88 23       	and	r24, r24
    1252:	09 f4       	brne	.+2      	; 0x1256 <vCoRoutineSchedule+0x142>
    1254:	7f cf       	rjmp	.-258    	; 0x1154 <vCoRoutineSchedule+0x40>
            {
                pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    1256:	05 80       	ldd	r0, Z+5	; 0x05
    1258:	f6 81       	ldd	r31, Z+6	; 0x06
    125a:	e0 2d       	mov	r30, r0
    125c:	c6 81       	ldd	r28, Z+6	; 0x06
    125e:	d7 81       	ldd	r29, Z+7	; 0x07

                if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	9b 81       	ldd	r25, Y+3	; 0x03
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	08 f4       	brcc	.+2      	; 0x126c <vCoRoutineSchedule+0x158>
    126a:	74 cf       	rjmp	.-280    	; 0x1154 <vCoRoutineSchedule+0x40>
                {
                    /* Timeout not yet expired. */
                    break;
                }

                portDISABLE_INTERRUPTS();
    126c:	f8 94       	cli
                    /* The event could have occurred just before this critical
                     *  section.  If this is the case then the generic list item will
                     *  have been moved to the pending ready list and the following
                     *  line is still valid.  Also the pvContainer parameter will have
                     *  been set to NULL so the following lines are also valid. */
                    ( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    126e:	8e 01       	movw	r16, r28
    1270:	0e 5f       	subi	r16, 0xFE	; 254
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
    1274:	c8 01       	movw	r24, r16
    1276:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>

                    /* Is the co-routine waiting on an event also? */
                    if( pxCRCB->xEventListItem.pxContainer )
    127a:	8c 89       	ldd	r24, Y+20	; 0x14
    127c:	9d 89       	ldd	r25, Y+21	; 0x15
    127e:	89 2b       	or	r24, r25
    1280:	21 f0       	breq	.+8      	; 0x128a <vCoRoutineSchedule+0x176>
                    {
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    1282:	ce 01       	movw	r24, r28
    1284:	0c 96       	adiw	r24, 0x0c	; 12
    1286:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>
                    }
                }
                portENABLE_INTERRUPTS();
    128a:	78 94       	sei

                prvAddCoRoutineToReadyQueue( pxCRCB );
    128c:	8e 89       	ldd	r24, Y+22	; 0x16
    128e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <uxTopCoRoutineReadyPriority>
    1292:	98 17       	cp	r25, r24
    1294:	10 f4       	brcc	.+4      	; 0x129a <vCoRoutineSchedule+0x186>
    1296:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <uxTopCoRoutineReadyPriority>
    129a:	8f 9d       	mul	r24, r15
    129c:	c0 01       	movw	r24, r0
    129e:	11 24       	eor	r1, r1
    12a0:	b8 01       	movw	r22, r16
    12a2:	8a 58       	subi	r24, 0x8A	; 138
    12a4:	9e 4f       	sbci	r25, 0xFE	; 254
    12a6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsertEnd>
    12aa:	c9 cf       	rjmp	.-110    	; 0x123e <vCoRoutineSchedule+0x12a>
    12ac:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <uxTopCoRoutineReadyPriority>
                --uxTopCoRoutineReadyPriority;
            }

            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    12b0:	49 e0       	ldi	r20, 0x09	; 9
    12b2:	42 9f       	mul	r20, r18
    12b4:	c0 01       	movw	r24, r0
    12b6:	43 9f       	mul	r20, r19
    12b8:	90 0d       	add	r25, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	fc 01       	movw	r30, r24
    12be:	ea 58       	subi	r30, 0x8A	; 138
    12c0:	fe 4f       	sbci	r31, 0xFE	; 254
    12c2:	a1 81       	ldd	r26, Z+1	; 0x01
    12c4:	b2 81       	ldd	r27, Z+2	; 0x02
    12c6:	12 96       	adiw	r26, 0x02	; 2
    12c8:	4d 91       	ld	r20, X+
    12ca:	5c 91       	ld	r21, X
    12cc:	52 83       	std	Z+2, r21	; 0x02
    12ce:	41 83       	std	Z+1, r20	; 0x01
    12d0:	87 58       	subi	r24, 0x87	; 135
    12d2:	9e 4f       	sbci	r25, 0xFE	; 254
    12d4:	48 17       	cp	r20, r24
    12d6:	59 07       	cpc	r21, r25
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <vCoRoutineSchedule+0x1ce>
    12da:	85 81       	ldd	r24, Z+5	; 0x05
    12dc:	96 81       	ldd	r25, Z+6	; 0x06
    12de:	92 83       	std	Z+2, r25	; 0x02
    12e0:	81 83       	std	Z+1, r24	; 0x01
    12e2:	89 e0       	ldi	r24, 0x09	; 9
    12e4:	82 9f       	mul	r24, r18
    12e6:	f0 01       	movw	r30, r0
    12e8:	83 9f       	mul	r24, r19
    12ea:	f0 0d       	add	r31, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	ea 58       	subi	r30, 0x8A	; 138
    12f0:	fe 4f       	sbci	r31, 0xFE	; 254
    12f2:	01 80       	ldd	r0, Z+1	; 0x01
    12f4:	f2 81       	ldd	r31, Z+2	; 0x02
    12f6:	e0 2d       	mov	r30, r0
    12f8:	86 81       	ldd	r24, Z+6	; 0x06
    12fa:	97 81       	ldd	r25, Z+7	; 0x07
    12fc:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <pxCurrentCoRoutine+0x1>
    1300:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <pxCurrentCoRoutine>

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    1304:	dc 01       	movw	r26, r24
    1306:	ed 91       	ld	r30, X+
    1308:	fc 91       	ld	r31, X
    130a:	11 97       	sbiw	r26, 0x01	; 1
    130c:	57 96       	adiw	r26, 0x17	; 23
    130e:	6c 91       	ld	r22, X
        }

        traceRETURN_vCoRoutineSchedule();
    }
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    131a:	09 94       	ijmp

0000131c <xCoRoutineRemoveFromEventList>:
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    }
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineRemoveFromEventList( const List_t * pxEventList )
    {
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
        traceENTER_xCoRoutineRemoveFromEventList( pxEventList );

        /* This function is called from within an interrupt.  It can only access
         * event lists and the pending ready list.  This function assumes that a
         * check has already been made to ensure pxEventList is not empty. */
        pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1324:	dc 01       	movw	r26, r24
    1326:	15 96       	adiw	r26, 0x05	; 5
    1328:	ed 91       	ld	r30, X+
    132a:	fc 91       	ld	r31, X
    132c:	c6 81       	ldd	r28, Z+6	; 0x06
    132e:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1330:	8e 01       	movw	r16, r28
    1332:	04 5f       	subi	r16, 0xF4	; 244
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	c8 01       	movw	r24, r16
    1338:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>
        vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    133c:	b8 01       	movw	r22, r16
    133e:	87 e5       	ldi	r24, 0x57	; 87
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsertEnd>

        if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    1346:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <pxCurrentCoRoutine>
    134a:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <pxCurrentCoRoutine+0x1>
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	2e 89       	ldd	r18, Y+22	; 0x16
    1352:	96 89       	ldd	r25, Z+22	; 0x16
    1354:	29 17       	cp	r18, r25
    1356:	08 f4       	brcc	.+2      	; 0x135a <xCoRoutineRemoveFromEventList+0x3e>
    1358:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xCoRoutineRemoveFromEventList( xReturn );

        return xReturn;
    }
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	08 95       	ret

00001364 <vCoRoutineResetState>:
 * scheduler.
 */
    void vCoRoutineResetState( void )
    {
        /* Lists for ready and blocked co-routines. */
        pxDelayedCoRoutineList = NULL;
    1364:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <pxDelayedCoRoutineList+0x1>
    1368:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = NULL;
    136c:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <pxOverflowDelayedCoRoutineList+0x1>
    1370:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <pxOverflowDelayedCoRoutineList>

        /* Other file private variables. */
        pxCurrentCoRoutine = NULL;
    1374:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <pxCurrentCoRoutine+0x1>
    1378:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <pxCurrentCoRoutine>
        uxTopCoRoutineReadyPriority = ( UBaseType_t ) 0U;
    137c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <uxTopCoRoutineReadyPriority>
        xCoRoutineTickCount = ( TickType_t ) 0U;
    1380:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <xCoRoutineTickCount+0x1>
    1384:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <xCoRoutineTickCount>
        xLastTickCount = ( TickType_t ) 0U;
    1388:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <xLastTickCount+0x1>
    138c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <xLastTickCount>
        xPassedTicks = ( TickType_t ) 0U;
    1390:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <xPassedTicks+0x1>
    1394:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <xPassedTicks>
    }
    1398:	08 95       	ret

0000139a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    139e:	8b e0       	ldi	r24, 0x0B	; 11
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 3e 0b 	call	0x167c	; 0x167c <pvPortMalloc>
    13a6:	ec 01       	movw	r28, r24

            if( pxEventBits != NULL )
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	31 f0       	breq	.+12     	; 0x13b8 <xEventGroupCreate+0x1e>
            {
                pxEventBits->uxEventBits = 0;
    13ac:	fc 01       	movw	r30, r24
    13ae:	11 92       	st	Z+, r1
    13b0:	11 92       	st	Z+, r1
    13b2:	cf 01       	movw	r24, r30
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    13b4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
        }
    13b8:	ce 01       	movw	r24, r28
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
    13c0:	af 92       	push	r10
    13c2:	bf 92       	push	r11
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	6c 01       	movw	r12, r24
    13d6:	7b 01       	movw	r14, r22
    13d8:	b4 2e       	mov	r11, r20
    13da:	a2 2e       	mov	r10, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
    13dc:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    13e0:	f6 01       	movw	r30, r12
    13e2:	c0 81       	ld	r28, Z
    13e4:	d1 81       	ldd	r29, Z+1	; 0x01
    13e6:	ce 01       	movw	r24, r28
    13e8:	8e 21       	and	r24, r14
    13ea:	9f 21       	and	r25, r15
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
    13ec:	a1 10       	cpse	r10, r1
    13ee:	40 c0       	rjmp	.+128    	; 0x1470 <xEventGroupWaitBits+0xb0>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    13f0:	89 2b       	or	r24, r25
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <xEventGroupWaitBits+0x36>
    13f4:	41 c0       	rjmp	.+130    	; 0x1478 <xEventGroupWaitBits+0xb8>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
    13f6:	01 15       	cp	r16, r1
    13f8:	11 05       	cpc	r17, r1
    13fa:	89 f0       	breq	.+34     	; 0x141e <xEventGroupWaitBits+0x5e>
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
        EventGroup_t * pxEventBits = xEventGroup;
        EventBits_t uxReturn, uxControlBits = 0;
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	60 e0       	ldi	r22, 0x00	; 0
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
    1400:	bb 20       	and	r11, r11
    1402:	11 f0       	breq	.+4      	; 0x1408 <xEventGroupWaitBits+0x48>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	71 e0       	ldi	r23, 0x01	; 1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
    1408:	a1 10       	cpse	r10, r1
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
    140a:	74 60       	ori	r23, 0x04	; 4
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    140c:	6e 29       	or	r22, r14
    140e:	7f 29       	or	r23, r15
    1410:	a8 01       	movw	r20, r16
    1412:	c6 01       	movw	r24, r12
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
    141a:	d0 e0       	ldi	r29, 0x00	; 0
    141c:	c0 e0       	ldi	r28, 0x00	; 0

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    141e:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
    1422:	01 2b       	or	r16, r17
    1424:	c9 f0       	breq	.+50     	; 0x1458 <xEventGroupWaitBits+0x98>
        {
            if( xAlreadyYielded == pdFALSE )
    1426:	81 11       	cpse	r24, r1
    1428:	02 c0       	rjmp	.+4      	; 0x142e <xEventGroupWaitBits+0x6e>
            {
                taskYIELD_WITHIN_API();
    142a:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
    142e:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    1432:	91 fd       	sbrc	r25, 1
    1434:	0f c0       	rjmp	.+30     	; 0x1454 <xEventGroupWaitBits+0x94>
            {
                taskENTER_CRITICAL();
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	0f 92       	push	r0
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
    143c:	f6 01       	movw	r30, r12
    143e:	80 81       	ld	r24, Z
    1440:	91 81       	ldd	r25, Z+1	; 0x01
    1442:	97 01       	movw	r18, r14
    1444:	28 23       	and	r18, r24
    1446:	39 23       	and	r19, r25
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
    1448:	a1 10       	cpse	r10, r1
    144a:	23 c0       	rjmp	.+70     	; 0x1492 <xEventGroupWaitBits+0xd2>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    144c:	23 2b       	or	r18, r19
    144e:	21 f5       	brne	.+72     	; 0x1498 <xEventGroupWaitBits+0xd8>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
                }
                taskEXIT_CRITICAL();
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1454:	ec 01       	movw	r28, r24
    1456:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
    }
    1458:	ce 01       	movw	r24, r28
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	bf 90       	pop	r11
    146c:	af 90       	pop	r10
    146e:	08 95       	ret
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1470:	e8 16       	cp	r14, r24
    1472:	f9 06       	cpc	r15, r25
    1474:	09 f0       	breq	.+2      	; 0x1478 <xEventGroupWaitBits+0xb8>
    1476:	bf cf       	rjmp	.-130    	; 0x13f6 <xEventGroupWaitBits+0x36>
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
    1478:	bb 20       	and	r11, r11
    147a:	41 f0       	breq	.+16     	; 0x148c <xEventGroupWaitBits+0xcc>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    147c:	c7 01       	movw	r24, r14
    147e:	80 95       	com	r24
    1480:	90 95       	com	r25
    1482:	8c 23       	and	r24, r28
    1484:	9d 23       	and	r25, r29
    1486:	f6 01       	movw	r30, r12
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	80 83       	st	Z, r24
            if( xWaitConditionMet != pdFALSE )
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	00 e0       	ldi	r16, 0x00	; 0
    1490:	c6 cf       	rjmp	.-116    	; 0x141e <xEventGroupWaitBits+0x5e>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1492:	e2 16       	cp	r14, r18
    1494:	f3 06       	cpc	r15, r19
    1496:	e1 f6       	brne	.-72     	; 0x1450 <xEventGroupWaitBits+0x90>

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
                    {
                        if( xClearOnExit != pdFALSE )
    1498:	bb 20       	and	r11, r11
    149a:	d1 f2       	breq	.-76     	; 0x1450 <xEventGroupWaitBits+0x90>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    149c:	e0 94       	com	r14
    149e:	f0 94       	com	r15
    14a0:	e8 22       	and	r14, r24
    14a2:	f9 22       	and	r15, r25
    14a4:	f6 01       	movw	r30, r12
    14a6:	f1 82       	std	Z+1, r15	; 0x01
    14a8:	e0 82       	st	Z, r14
    14aa:	d2 cf       	rjmp	.-92     	; 0x1450 <xEventGroupWaitBits+0x90>

000014ac <xEventGroupClearBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
    14ac:	fc 01       	movw	r30, r24
        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        taskENTER_CRITICAL();
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	0f 92       	push	r0
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
    14b4:	80 81       	ld	r24, Z
    14b6:	91 81       	ldd	r25, Z+1	; 0x01

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
    14b8:	60 95       	com	r22
    14ba:	70 95       	com	r23
    14bc:	68 23       	and	r22, r24
    14be:	79 23       	and	r23, r25
    14c0:	71 83       	std	Z+1, r23	; 0x01
    14c2:	60 83       	st	Z, r22
        }
        taskEXIT_CRITICAL();
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
    }
    14c8:	08 95       	ret

000014ca <xEventGroupGetBitsFromISR>:
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xEventGroupGetBitsFromISR( uxReturn );

        return uxReturn;
    }
    14ca:	fc 01       	movw	r30, r24
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	08 95       	ret

000014d2 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	ec 01       	movw	r28, r24
    14e4:	8b 01       	movw	r16, r22
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        pxList = &( pxEventBits->xTasksWaitingForBits );
        pxListEnd = listGET_END_MARKER( pxList );
    14e6:	7c 01       	movw	r14, r24
    14e8:	85 e0       	ldi	r24, 0x05	; 5
    14ea:	e8 0e       	add	r14, r24
    14ec:	f1 1c       	adc	r15, r1
        vTaskSuspendAll();
    14ee:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
    14f2:	ef 81       	ldd	r30, Y+7	; 0x07
    14f4:	f8 85       	ldd	r31, Y+8	; 0x08

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
    14f6:	68 81       	ld	r22, Y
    14f8:	79 81       	ldd	r23, Y+1	; 0x01
    14fa:	60 2b       	or	r22, r16
    14fc:	71 2b       	or	r23, r17
    14fe:	79 83       	std	Y+1, r23	; 0x01
    1500:	68 83       	st	Y, r22
    {
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1502:	10 e0       	ldi	r17, 0x00	; 0
    1504:	00 e0       	ldi	r16, 0x00	; 0
    1506:	68 81       	ld	r22, Y
    1508:	79 81       	ldd	r23, Y+1	; 0x01

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
    150a:	ee 15       	cp	r30, r14
    150c:	ff 05       	cpc	r31, r15
    150e:	99 f4       	brne	.+38     	; 0x1536 <xEventGroupSetBits+0x64>
                pxListItem = pxNext;
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
    1510:	00 95       	com	r16
    1512:	10 95       	com	r17
    1514:	06 23       	and	r16, r22
    1516:	17 23       	and	r17, r23
    1518:	19 83       	std	Y+1, r17	; 0x01
    151a:	08 83       	st	Y, r16
        }
        ( void ) xTaskResumeAll();
    151c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
    }
    1520:	88 81       	ld	r24, Y
    1522:	99 81       	ldd	r25, Y+1	; 0x01
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	08 95       	ret
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
            {
                pxNext = listGET_NEXT( pxListItem );
    1536:	c2 80       	ldd	r12, Z+2	; 0x02
    1538:	d3 80       	ldd	r13, Z+3	; 0x03
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    153a:	20 81       	ld	r18, Z
    153c:	31 81       	ldd	r19, Z+1	; 0x01
                xMatchFound = pdFALSE;

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    153e:	c9 01       	movw	r24, r18
    1540:	99 27       	eor	r25, r25
    1542:	ac 01       	movw	r20, r24
    1544:	46 23       	and	r20, r22
    1546:	57 23       	and	r21, r23

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1548:	32 fd       	sbrc	r19, 2
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <xEventGroupSetBits+0x82>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    154c:	45 2b       	or	r20, r21
    154e:	29 f4       	brne	.+10     	; 0x155a <xEventGroupSetBits+0x88>
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
    1550:	f6 01       	movw	r30, r12
    1552:	d9 cf       	rjmp	.-78     	; 0x1506 <xEventGroupSetBits+0x34>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1554:	84 17       	cp	r24, r20
    1556:	95 07       	cpc	r25, r21
    1558:	d9 f7       	brne	.-10     	; 0x1550 <xEventGroupSetBits+0x7e>
                }

                if( xMatchFound != pdFALSE )
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    155a:	30 ff       	sbrs	r19, 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <xEventGroupSetBits+0x90>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
    155e:	08 2b       	or	r16, r24
    1560:	19 2b       	or	r17, r25
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1562:	72 60       	ori	r23, 0x02	; 2
    1564:	cf 01       	movw	r24, r30
    1566:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <vTaskRemoveFromUnorderedEventList>
    156a:	f2 cf       	rjmp	.-28     	; 0x1550 <xEventGroupSetBits+0x7e>

0000156c <xEventGroupSync>:

    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait )
    {
    156c:	af 92       	push	r10
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	7c 01       	movw	r14, r24
    1582:	eb 01       	movw	r28, r22
    1584:	8a 01       	movw	r16, r20
    1586:	69 01       	movw	r12, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
    1588:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        {
            uxOriginalBitValue = pxEventBits->uxEventBits;
    158c:	f7 01       	movw	r30, r14
    158e:	a0 80       	ld	r10, Z
    1590:	b1 80       	ldd	r11, Z+1	; 0x01

            ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1592:	be 01       	movw	r22, r28
    1594:	c7 01       	movw	r24, r14
    1596:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <xEventGroupSetBits>

            if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    159a:	ca 29       	or	r28, r10
    159c:	db 29       	or	r29, r11
    159e:	ce 01       	movw	r24, r28
    15a0:	80 23       	and	r24, r16
    15a2:	91 23       	and	r25, r17
    15a4:	80 17       	cp	r24, r16
    15a6:	91 07       	cpc	r25, r17
    15a8:	09 f0       	breq	.+2      	; 0x15ac <xEventGroupSync+0x40>
    15aa:	3b c0       	rjmp	.+118    	; 0x1622 <xEventGroupSync+0xb6>
                /* All the rendezvous bits are now set - no need to block. */
                uxReturn = ( uxOriginalBitValue | uxBitsToSet );

                /* Rendezvous always clear the bits.  They will have been cleared
                 * already unless this is the only task in the rendezvous. */
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    15ac:	f7 01       	movw	r30, r14
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	98 01       	movw	r18, r16
    15b4:	20 95       	com	r18
    15b6:	30 95       	com	r19
    15b8:	82 23       	and	r24, r18
    15ba:	93 23       	and	r25, r19
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24

                xTicksToWait = 0;
    15c0:	d1 2c       	mov	r13, r1
    15c2:	c1 2c       	mov	r12, r1
                    uxReturn = pxEventBits->uxEventBits;
                    xTimeoutOccurred = pdTRUE;
                }
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    15c4:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
    15c8:	cd 28       	or	r12, r13
    15ca:	f9 f0       	breq	.+62     	; 0x160a <xEventGroupSync+0x9e>
        {
            if( xAlreadyYielded == pdFALSE )
    15cc:	81 11       	cpse	r24, r1
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <xEventGroupSync+0x68>
            {
                taskYIELD_WITHIN_API();
    15d0:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
    15d4:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    15d8:	91 fd       	sbrc	r25, 1
    15da:	15 c0       	rjmp	.+42     	; 0x1606 <xEventGroupSync+0x9a>
            {
                /* The task timed out, just return the current event bit value. */
                taskENTER_CRITICAL();
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	0f 92       	push	r0
                {
                    uxReturn = pxEventBits->uxEventBits;
    15e2:	f7 01       	movw	r30, r14
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01

                    /* Although the task got here because it timed out before the
                     * bits it was waiting for were set, it is possible that since it
                     * unblocked another task has set the bits.  If this is the case
                     * then it needs to clear the bits before exiting. */
                    if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    15e8:	98 01       	movw	r18, r16
    15ea:	28 23       	and	r18, r24
    15ec:	39 23       	and	r19, r25
    15ee:	20 17       	cp	r18, r16
    15f0:	31 07       	cpc	r19, r17
    15f2:	39 f4       	brne	.+14     	; 0x1602 <xEventGroupSync+0x96>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    15f4:	a8 01       	movw	r20, r16
    15f6:	40 95       	com	r20
    15f8:	50 95       	com	r21
    15fa:	48 23       	and	r20, r24
    15fc:	59 23       	and	r21, r25
    15fe:	51 83       	std	Z+1, r21	; 0x01
    1600:	40 83       	st	Z, r20
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
                /* The task unblocked because the bits were set. */
            }

            /* Control bits might be set as the task had blocked should not be
             * returned. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1606:	ec 01       	movw	r28, r24
    1608:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupSync( uxReturn );

        return uxReturn;
    }
    160a:	ce 01       	movw	r24, r28
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	bf 90       	pop	r11
    161e:	af 90       	pop	r10
    1620:	08 95       	ret

                xTicksToWait = 0;
            }
            else
            {
                if( xTicksToWait != ( TickType_t ) 0 )
    1622:	c1 14       	cp	r12, r1
    1624:	d1 04       	cpc	r13, r1
    1626:	51 f0       	breq	.+20     	; 0x163c <xEventGroupSync+0xd0>
                    traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

                    /* Store the bits that the calling task is waiting for in the
                     * task's event list item so the kernel knows when a match is
                     * found.  Then enter the blocked state. */
                    vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    1628:	a6 01       	movw	r20, r12
    162a:	b8 01       	movw	r22, r16
    162c:	75 60       	ori	r23, 0x05	; 5
    162e:	c7 01       	movw	r24, r14
    1630:	02 96       	adiw	r24, 0x02	; 2
    1632:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <vTaskPlaceOnUnorderedEventList>

                    /* This assignment is obsolete as uxReturn will get set after
                     * the task unblocks, but some compilers mistakenly generate a
                     * warning about uxReturn being returned without being set if the
                     * assignment is omitted. */
                    uxReturn = 0;
    1636:	d0 e0       	ldi	r29, 0x00	; 0
    1638:	c0 e0       	ldi	r28, 0x00	; 0
    163a:	c4 cf       	rjmp	.-120    	; 0x15c4 <xEventGroupSync+0x58>
                }
                else
                {
                    /* The rendezvous bits were not set, but no block time was
                     * specified - just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
    163c:	f7 01       	movw	r30, r14
    163e:	c0 81       	ld	r28, Z
    1640:	d1 81       	ldd	r29, Z+1	; 0x01
    1642:	c0 cf       	rjmp	.-128    	; 0x15c4 <xEventGroupSync+0x58>

00001644 <vEventGroupDelete>:
        return pxEventBits->uxEventBits;
    }
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	ec 01       	movw	r28, r24

        configASSERT( pxEventBits );

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

        vTaskSuspendAll();
    164a:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	81 11       	cpse	r24, r1
    1652:	07 c0       	rjmp	.+14     	; 0x1662 <vEventGroupDelete+0x1e>
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
            }
        }
        ( void ) xTaskResumeAll();
    1654:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
    1658:	ce 01       	movw	r24, r28
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
    165e:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <vPortFree>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	72 e0       	ldi	r23, 0x02	; 2
    1666:	8f 81       	ldd	r24, Y+7	; 0x07
    1668:	98 85       	ldd	r25, Y+8	; 0x08
    166a:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <vTaskRemoveFromUnorderedEventList>
    166e:	ef cf       	rjmp	.-34     	; 0x164e <vEventGroupDelete+0xa>

00001670 <vEventGroupSetBitsCallback>:
        traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    1670:	ba 01       	movw	r22, r20
    1672:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <xEventGroupSetBits>

00001676 <vEventGroupClearBitsCallback>:
        traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    1676:	ba 01       	movw	r22, r20
    1678:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <xEventGroupClearBits>

0000167c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	8c 01       	movw	r16, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
    1686:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
    168a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <pucAlignedHeap.1975>
    168e:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <pucAlignedHeap.1975+0x1>
    1692:	89 2b       	or	r24, r25
    1694:	31 f4       	brne	.+12     	; 0x16a2 <pvPortMalloc+0x26>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1696:	8c e8       	ldi	r24, 0x8C	; 140
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <pucAlignedHeap.1975+0x1>
    169e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <pucAlignedHeap.1975>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    16a2:	01 15       	cp	r16, r1
    16a4:	11 05       	cpc	r17, r1
    16a6:	f9 f0       	breq	.+62     	; 0x16e6 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    16a8:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <xNextFreeByte>
    16ac:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <xNextFreeByte+0x1>
    16b0:	02 0f       	add	r16, r18
    16b2:	13 1f       	adc	r17, r19
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    16b4:	0b 3d       	cpi	r16, 0xDB	; 219
    16b6:	85 e0       	ldi	r24, 0x05	; 5
    16b8:	18 07       	cpc	r17, r24
    16ba:	a8 f4       	brcc	.+42     	; 0x16e6 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    16bc:	20 17       	cp	r18, r16
    16be:	31 07       	cpc	r19, r17
    16c0:	90 f4       	brcc	.+36     	; 0x16e6 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
    16c2:	c0 91 88 01 	lds	r28, 0x0188	; 0x800188 <pucAlignedHeap.1975>
    16c6:	d0 91 89 01 	lds	r29, 0x0189	; 0x800189 <pucAlignedHeap.1975+0x1>
    16ca:	c2 0f       	add	r28, r18
    16cc:	d3 1f       	adc	r29, r19
            xNextFreeByte += xWantedSize;
    16ce:	10 93 8b 01 	sts	0x018B, r17	; 0x80018b <xNextFreeByte+0x1>
    16d2:	00 93 8a 01 	sts	0x018A, r16	; 0x80018a <xNextFreeByte>
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    16d6:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
    16da:	ce 01       	movw	r24, r28
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	08 95       	ret

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
    16e6:	d0 e0       	ldi	r29, 0x00	; 0
    16e8:	c0 e0       	ldi	r28, 0x00	; 0
    16ea:	f5 cf       	rjmp	.-22     	; 0x16d6 <pvPortMalloc+0x5a>

000016ec <vPortFree>:
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
    16ec:	08 95       	ret

000016ee <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* Only required when static memory is not cleared. */
    xNextFreeByte = ( size_t ) 0;
    16ee:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <xNextFreeByte+0x1>
    16f2:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <xNextFreeByte>
}
    16f6:	08 95       	ret

000016f8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    16f8:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <xNextFreeByte>
    16fc:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <xNextFreeByte+0x1>
}
    1700:	8b ed       	ldi	r24, 0xDB	; 219
    1702:	95 e0       	ldi	r25, 0x05	; 5
    1704:	82 1b       	sub	r24, r18
    1706:	93 0b       	sbc	r25, r19
    1708:	08 95       	ret

0000170a <vPortHeapResetState>:
    170a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <xNextFreeByte+0x1>
    170e:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <xNextFreeByte>
    1712:	08 95       	ret

00001714 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1714:	fc 01       	movw	r30, r24
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
    1716:	03 96       	adiw	r24, 0x03	; 3
    1718:	92 83       	std	Z+2, r25	; 0x02
    171a:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    171c:	2f ef       	ldi	r18, 0xFF	; 255
    171e:	3f ef       	ldi	r19, 0xFF	; 255
    1720:	34 83       	std	Z+4, r19	; 0x04
    1722:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
    1724:	96 83       	std	Z+6, r25	; 0x06
    1726:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
    1728:	90 87       	std	Z+8, r25	; 0x08
    172a:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    172c:	10 82       	st	Z, r1
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
    172e:	08 95       	ret

00001730 <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1730:	fc 01       	movw	r30, r24
    1732:	11 86       	std	Z+9, r1	; 0x09
    1734:	10 86       	std	Z+8, r1	; 0x08
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
    1736:	08 95       	ret

00001738 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	9c 01       	movw	r18, r24
    173e:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
    1740:	dc 01       	movw	r26, r24
    1742:	11 96       	adiw	r26, 0x01	; 1
    1744:	cd 91       	ld	r28, X+
    1746:	dc 91       	ld	r29, X
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1748:	d3 83       	std	Z+3, r29	; 0x03
    174a:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	95 83       	std	Z+5, r25	; 0x05
    1752:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	9d 81       	ldd	r25, Y+5	; 0x05
    1758:	dc 01       	movw	r26, r24
    175a:	13 96       	adiw	r26, 0x03	; 3
    175c:	7c 93       	st	X, r23
    175e:	6e 93       	st	-X, r22
    1760:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    1762:	7d 83       	std	Y+5, r23	; 0x05
    1764:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1766:	31 87       	std	Z+9, r19	; 0x09
    1768:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
    176a:	f9 01       	movw	r30, r18
    176c:	80 81       	ld	r24, Z
    176e:	8f 5f       	subi	r24, 0xFF	; 255
    1770:	80 83       	st	Z, r24

    traceRETURN_vListInsertEnd();
}
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	8c 01       	movw	r16, r24
    1782:	fb 01       	movw	r30, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1788:	d8 01       	movw	r26, r16
    178a:	13 96       	adiw	r26, 0x03	; 3
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    178c:	8f 3f       	cpi	r24, 0xFF	; 255
    178e:	98 07       	cpc	r25, r24
    1790:	f1 f4       	brne	.+60     	; 0x17ce <vListInsert+0x56>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1792:	e8 01       	movw	r28, r16
    1794:	af 81       	ldd	r26, Y+7	; 0x07
    1796:	b8 85       	ldd	r27, Y+8	; 0x08
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1798:	12 96       	adiw	r26, 0x02	; 2
    179a:	8d 91       	ld	r24, X+
    179c:	9c 91       	ld	r25, X
    179e:	13 97       	sbiw	r26, 0x03	; 3
    17a0:	93 83       	std	Z+3, r25	; 0x03
    17a2:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    17a4:	ec 01       	movw	r28, r24
    17a6:	fd 83       	std	Y+5, r31	; 0x05
    17a8:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    17aa:	b5 83       	std	Z+5, r27	; 0x05
    17ac:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    17ae:	13 96       	adiw	r26, 0x03	; 3
    17b0:	fc 93       	st	X, r31
    17b2:	ee 93       	st	-X, r30
    17b4:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    17b6:	11 87       	std	Z+9, r17	; 0x09
    17b8:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
    17ba:	f8 01       	movw	r30, r16
    17bc:	80 81       	ld	r24, Z
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	80 83       	st	Z, r24

    traceRETURN_vListInsert();
}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    17cc:	d9 01       	movw	r26, r18
    17ce:	12 96       	adiw	r26, 0x02	; 2
    17d0:	2d 91       	ld	r18, X+
    17d2:	3c 91       	ld	r19, X
    17d4:	13 97       	sbiw	r26, 0x03	; 3
    17d6:	e9 01       	movw	r28, r18
    17d8:	48 81       	ld	r20, Y
    17da:	59 81       	ldd	r21, Y+1	; 0x01
    17dc:	84 17       	cp	r24, r20
    17de:	95 07       	cpc	r25, r21
    17e0:	a8 f7       	brcc	.-22     	; 0x17cc <vListInsert+0x54>
    17e2:	da cf       	rjmp	.-76     	; 0x1798 <vListInsert+0x20>

000017e4 <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	fc 01       	movw	r30, r24
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    17ea:	a0 85       	ldd	r26, Z+8	; 0x08
    17ec:	b1 85       	ldd	r27, Z+9	; 0x09

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	24 81       	ldd	r18, Z+4	; 0x04
    17f4:	35 81       	ldd	r19, Z+5	; 0x05
    17f6:	ec 01       	movw	r28, r24
    17f8:	3d 83       	std	Y+5, r19	; 0x05
    17fa:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    17fc:	c4 81       	ldd	r28, Z+4	; 0x04
    17fe:	d5 81       	ldd	r29, Z+5	; 0x05
    1800:	9b 83       	std	Y+3, r25	; 0x03
    1802:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1804:	11 96       	adiw	r26, 0x01	; 1
    1806:	8d 91       	ld	r24, X+
    1808:	9c 91       	ld	r25, X
    180a:	12 97       	sbiw	r26, 0x02	; 2
    180c:	8e 17       	cp	r24, r30
    180e:	9f 07       	cpc	r25, r31
    1810:	21 f4       	brne	.+8      	; 0x181a <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1812:	12 96       	adiw	r26, 0x02	; 2
    1814:	dc 93       	st	X, r29
    1816:	ce 93       	st	-X, r28
    1818:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    181a:	11 86       	std	Z+9, r1	; 0x09
    181c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
    181e:	8c 91       	ld	r24, X
    1820:	81 50       	subi	r24, 0x01	; 1
    1822:	8c 93       	st	X, r24

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	08 95       	ret

0000182a <pxPortInitialiseStack>:
    uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
     * This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    182a:	31 e1       	ldi	r19, 0x11	; 17
    182c:	fc 01       	movw	r30, r24
    182e:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    1830:	31 97       	sbiw	r30, 0x01	; 1
    1832:	22 e2       	ldi	r18, 0x22	; 34
    1834:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    1836:	31 97       	sbiw	r30, 0x01	; 1
    1838:	a3 e3       	ldi	r26, 0x33	; 51
    183a:	a0 83       	st	Z, r26
    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
     * it on first. */
    usAddress = ( uint16_t ) pxCode;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    183c:	31 97       	sbiw	r30, 0x01	; 1
    183e:	60 83       	st	Z, r22
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1840:	31 97       	sbiw	r30, 0x01	; 1
    1842:	70 83       	st	Z, r23

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
     *  portSAVE_CONTEXT places the flags on the stack immediately after r0
     *  to ensure the interrupts get disabled as soon as possible, and so ensuring
     *  the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R0 */
    1844:	31 97       	sbiw	r30, 0x01	; 1
    1846:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    1848:	31 97       	sbiw	r30, 0x01	; 1
    184a:	60 e8       	ldi	r22, 0x80	; 128
    184c:	60 83       	st	Z, r22
    pxTopOfStack--;


    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R1 */
    184e:	31 97       	sbiw	r30, 0x01	; 1
    1850:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02; /* R2 */
    1852:	31 97       	sbiw	r30, 0x01	; 1
    1854:	62 e0       	ldi	r22, 0x02	; 2
    1856:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03; /* R3 */
    1858:	31 97       	sbiw	r30, 0x01	; 1
    185a:	63 e0       	ldi	r22, 0x03	; 3
    185c:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04; /* R4 */
    185e:	31 97       	sbiw	r30, 0x01	; 1
    1860:	64 e0       	ldi	r22, 0x04	; 4
    1862:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05; /* R5 */
    1864:	31 97       	sbiw	r30, 0x01	; 1
    1866:	65 e0       	ldi	r22, 0x05	; 5
    1868:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06; /* R6 */
    186a:	31 97       	sbiw	r30, 0x01	; 1
    186c:	66 e0       	ldi	r22, 0x06	; 6
    186e:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07; /* R7 */
    1870:	31 97       	sbiw	r30, 0x01	; 1
    1872:	67 e0       	ldi	r22, 0x07	; 7
    1874:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08; /* R8 */
    1876:	31 97       	sbiw	r30, 0x01	; 1
    1878:	68 e0       	ldi	r22, 0x08	; 8
    187a:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09; /* R9 */
    187c:	31 97       	sbiw	r30, 0x01	; 1
    187e:	69 e0       	ldi	r22, 0x09	; 9
    1880:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10; /* R10 */
    1882:	31 97       	sbiw	r30, 0x01	; 1
    1884:	60 e1       	ldi	r22, 0x10	; 16
    1886:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11; /* R11 */
    1888:	31 97       	sbiw	r30, 0x01	; 1
    188a:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12; /* R12 */
    188c:	31 97       	sbiw	r30, 0x01	; 1
    188e:	32 e1       	ldi	r19, 0x12	; 18
    1890:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13; /* R13 */
    1892:	31 97       	sbiw	r30, 0x01	; 1
    1894:	33 e1       	ldi	r19, 0x13	; 19
    1896:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14; /* R14 */
    1898:	31 97       	sbiw	r30, 0x01	; 1
    189a:	34 e1       	ldi	r19, 0x14	; 20
    189c:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15; /* R15 */
    189e:	31 97       	sbiw	r30, 0x01	; 1
    18a0:	35 e1       	ldi	r19, 0x15	; 21
    18a2:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16; /* R16 */
    18a4:	31 97       	sbiw	r30, 0x01	; 1
    18a6:	36 e1       	ldi	r19, 0x16	; 22
    18a8:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17; /* R17 */
    18aa:	31 97       	sbiw	r30, 0x01	; 1
    18ac:	37 e1       	ldi	r19, 0x17	; 23
    18ae:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18; /* R18 */
    18b0:	31 97       	sbiw	r30, 0x01	; 1
    18b2:	38 e1       	ldi	r19, 0x18	; 24
    18b4:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19; /* R19 */
    18b6:	31 97       	sbiw	r30, 0x01	; 1
    18b8:	39 e1       	ldi	r19, 0x19	; 25
    18ba:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20; /* R20 */
    18bc:	31 97       	sbiw	r30, 0x01	; 1
    18be:	30 e2       	ldi	r19, 0x20	; 32
    18c0:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21; /* R21 */
    18c2:	31 97       	sbiw	r30, 0x01	; 1
    18c4:	31 e2       	ldi	r19, 0x21	; 33
    18c6:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22; /* R22 */
    18c8:	31 97       	sbiw	r30, 0x01	; 1
    18ca:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23; /* R23 */
    18cc:	31 97       	sbiw	r30, 0x01	; 1
    18ce:	23 e2       	ldi	r18, 0x23	; 35
    18d0:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    18d2:	31 97       	sbiw	r30, 0x01	; 1
    18d4:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    18d6:	31 97       	sbiw	r30, 0x01	; 1
    18d8:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;  /* R26 X */
    18da:	31 97       	sbiw	r30, 0x01	; 1
    18dc:	26 e2       	ldi	r18, 0x26	; 38
    18de:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;  /* R27 */
    18e0:	31 97       	sbiw	r30, 0x01	; 1
    18e2:	27 e2       	ldi	r18, 0x27	; 39
    18e4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;  /* R28 Y */
    18e6:	31 97       	sbiw	r30, 0x01	; 1
    18e8:	28 e2       	ldi	r18, 0x28	; 40
    18ea:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;  /* R29 */
    18ec:	31 97       	sbiw	r30, 0x01	; 1
    18ee:	29 e2       	ldi	r18, 0x29	; 41
    18f0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;  /* R30 Z */
    18f2:	31 97       	sbiw	r30, 0x01	; 1
    18f4:	20 e3       	ldi	r18, 0x30	; 48
    18f6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x031; /* R31 */
    18f8:	31 97       	sbiw	r30, 0x01	; 1
    18fa:	21 e3       	ldi	r18, 0x31	; 49
    18fc:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    18fe:	86 97       	sbiw	r24, 0x26	; 38
    1900:	08 95       	ret

00001902 <xPortStartScheduler>:
    /* Setup compare match value for compare match A.  Interrupts are disabled
     * before this is called so we need not worry here. */
    ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    ulCompareMatch >>= 8;
    ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    OCR1AH = ucHighByte;
    1902:	1b bc       	out	0x2b, r1	; 43
    OCR1AL = ucLowByte;
    1904:	8c e7       	ldi	r24, 0x7C	; 124
    1906:	8a bd       	out	0x2a, r24	; 42

    /* Setup clock source and compare match behaviour. */
    ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    TCCR1B = ucLowByte;
    1908:	8b e0       	ldi	r24, 0x0B	; 11
    190a:	8e bd       	out	0x2e, r24	; 46

    /* Enable the interrupt - this is okay as interrupt are currently globally
     * disabled. */
    ucLowByte = TIMSK;
    190c:	89 b7       	in	r24, 0x39	; 57
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    190e:	80 61       	ori	r24, 0x10	; 16
    TIMSK = ucLowByte;
    1910:	89 bf       	out	0x39, r24	; 57
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    1912:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    1916:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    191a:	cd 91       	ld	r28, X+
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	dd 91       	ld	r29, X+
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	ff 91       	pop	r31
    1924:	ef 91       	pop	r30
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	bf 91       	pop	r27
    192c:	af 91       	pop	r26
    192e:	9f 91       	pop	r25
    1930:	8f 91       	pop	r24
    1932:	7f 91       	pop	r23
    1934:	6f 91       	pop	r22
    1936:	5f 91       	pop	r21
    1938:	4f 91       	pop	r20
    193a:	3f 91       	pop	r19
    193c:	2f 91       	pop	r18
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
    194a:	bf 90       	pop	r11
    194c:	af 90       	pop	r10
    194e:	9f 90       	pop	r9
    1950:	8f 90       	pop	r8
    1952:	7f 90       	pop	r7
    1954:	6f 90       	pop	r6
    1956:	5f 90       	pop	r5
    1958:	4f 90       	pop	r4
    195a:	3f 90       	pop	r3
    195c:	2f 90       	pop	r2
    195e:	1f 90       	pop	r1
    1960:	0f 90       	pop	r0
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
     * jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    1966:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	08 95       	ret

0000196c <vPortEndScheduler>:

void vPortEndScheduler( void )
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
     * disable the tick interrupt here. */
}
    196c:	08 95       	ret

0000196e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	0f 92       	push	r0
    1976:	1f 92       	push	r1
    1978:	11 24       	eor	r1, r1
    197a:	2f 92       	push	r2
    197c:	3f 92       	push	r3
    197e:	4f 92       	push	r4
    1980:	5f 92       	push	r5
    1982:	6f 92       	push	r6
    1984:	7f 92       	push	r7
    1986:	8f 92       	push	r8
    1988:	9f 92       	push	r9
    198a:	af 92       	push	r10
    198c:	bf 92       	push	r11
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	2f 93       	push	r18
    199c:	3f 93       	push	r19
    199e:	4f 93       	push	r20
    19a0:	5f 93       	push	r21
    19a2:	6f 93       	push	r22
    19a4:	7f 93       	push	r23
    19a6:	8f 93       	push	r24
    19a8:	9f 93       	push	r25
    19aa:	af 93       	push	r26
    19ac:	bf 93       	push	r27
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	ef 93       	push	r30
    19b4:	ff 93       	push	r31
    19b6:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    19ba:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    19be:	0d b6       	in	r0, 0x3d	; 61
    19c0:	0d 92       	st	X+, r0
    19c2:	0e b6       	in	r0, 0x3e	; 62
    19c4:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    19c6:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    19ca:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    19ce:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    19d2:	cd 91       	ld	r28, X+
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	dd 91       	ld	r29, X+
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	bf 91       	pop	r27
    19e4:	af 91       	pop	r26
    19e6:	9f 91       	pop	r25
    19e8:	8f 91       	pop	r24
    19ea:	7f 91       	pop	r23
    19ec:	6f 91       	pop	r22
    19ee:	5f 91       	pop	r21
    19f0:	4f 91       	pop	r20
    19f2:	3f 91       	pop	r19
    19f4:	2f 91       	pop	r18
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	ff 90       	pop	r15
    19fc:	ef 90       	pop	r14
    19fe:	df 90       	pop	r13
    1a00:	cf 90       	pop	r12
    1a02:	bf 90       	pop	r11
    1a04:	af 90       	pop	r10
    1a06:	9f 90       	pop	r9
    1a08:	8f 90       	pop	r8
    1a0a:	7f 90       	pop	r7
    1a0c:	6f 90       	pop	r6
    1a0e:	5f 90       	pop	r5
    1a10:	4f 90       	pop	r4
    1a12:	3f 90       	pop	r3
    1a14:	2f 90       	pop	r2
    1a16:	1f 90       	pop	r1
    1a18:	0f 90       	pop	r0
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1a1e:	08 95       	ret

00001a20 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__( ( naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1a20:	0f 92       	push	r0
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	0f 92       	push	r0
    1a28:	1f 92       	push	r1
    1a2a:	11 24       	eor	r1, r1
    1a2c:	2f 92       	push	r2
    1a2e:	3f 92       	push	r3
    1a30:	4f 92       	push	r4
    1a32:	5f 92       	push	r5
    1a34:	6f 92       	push	r6
    1a36:	7f 92       	push	r7
    1a38:	8f 92       	push	r8
    1a3a:	9f 92       	push	r9
    1a3c:	af 92       	push	r10
    1a3e:	bf 92       	push	r11
    1a40:	cf 92       	push	r12
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	2f 93       	push	r18
    1a4e:	3f 93       	push	r19
    1a50:	4f 93       	push	r20
    1a52:	5f 93       	push	r21
    1a54:	6f 93       	push	r22
    1a56:	7f 93       	push	r23
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    1a6c:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    1a70:	0d b6       	in	r0, 0x3d	; 61
    1a72:	0d 92       	st	X+, r0
    1a74:	0e b6       	in	r0, 0x3e	; 62
    1a76:	0d 92       	st	X+, r0

    if( xTaskIncrementTick() != pdFALSE )
    1a78:	0e 94 57 19 	call	0x32ae	; 0x32ae <xTaskIncrementTick>
    1a7c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1a7e:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1a82:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    1a86:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    1a8a:	cd 91       	ld	r28, X+
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	dd 91       	ld	r29, X+
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	bf 90       	pop	r11
    1abc:	af 90       	pop	r10
    1abe:	9f 90       	pop	r9
    1ac0:	8f 90       	pop	r8
    1ac2:	7f 90       	pop	r7
    1ac4:	6f 90       	pop	r6
    1ac6:	5f 90       	pop	r5
    1ac8:	4f 90       	pop	r4
    1aca:	3f 90       	pop	r3
    1acc:	2f 90       	pop	r2
    1ace:	1f 90       	pop	r1
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1ad6:	08 95       	ret

00001ad8 <__vector_7>:
 * count is incremented after the context is saved.
 */
    void TIMER1_COMPA_vect( void ) __attribute__( ( signal, naked ) );
    void TIMER1_COMPA_vect( void )
    {
        vPortYieldFromTick();
    1ad8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <vPortYieldFromTick>
        asm volatile ( "reti" );
    1adc:	18 95       	reti

00001ade <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	91 11       	cpse	r25, r1
    1af0:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    taskEXIT_CRITICAL();

    return xReturn;
}
    1af2:	08 95       	ret

00001af4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	ec 01       	movw	r28, r24
    1afe:	04 2f       	mov	r16, r20
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1b00:	1a 8d       	ldd	r17, Y+26	; 0x1a

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1b02:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1b04:	44 23       	and	r20, r20
    1b06:	c1 f0       	breq	.+48     	; 0x1b38 <prvCopyDataToQueue+0x44>
    1b08:	50 e0       	ldi	r21, 0x00	; 0
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
    1b0a:	01 11       	cpse	r16, r1
    1b0c:	1d c0       	rjmp	.+58     	; 0x1b48 <prvCopyDataToQueue+0x54>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	9b 81       	ldd	r25, Y+3	; 0x03
    1b12:	0e 94 dd 27 	call	0x4fba	; 0x4fba <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1b16:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b18:	2a 81       	ldd	r18, Y+2	; 0x02
    1b1a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b1c:	82 0f       	add	r24, r18
    1b1e:	93 2f       	mov	r25, r19
    1b20:	91 1d       	adc	r25, r1
    1b22:	9b 83       	std	Y+3, r25	; 0x03
    1b24:	8a 83       	std	Y+2, r24	; 0x02

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
    1b26:	2c 81       	ldd	r18, Y+4	; 0x04
    1b28:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2a:	82 17       	cp	r24, r18
    1b2c:	93 07       	cpc	r25, r19
    1b2e:	20 f0       	brcs	.+8      	; 0x1b38 <prvCopyDataToQueue+0x44>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
    1b30:	88 81       	ld	r24, Y
    1b32:	99 81       	ldd	r25, Y+1	; 0x01
    1b34:	9b 83       	std	Y+3, r25	; 0x03
    1b36:	8a 83       	std	Y+2, r24	; 0x02
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    1b38:	1f 5f       	subi	r17, 0xFF	; 255
    1b3a:	1a 8f       	std	Y+26, r17	; 0x1a

    return xReturn;
}
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	08 95       	ret
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1b48:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b4c:	0e 94 dd 27 	call	0x4fba	; 0x4fba <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    1b50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	91 95       	neg	r25
    1b56:	81 95       	neg	r24
    1b58:	91 09       	sbc	r25, r1
    1b5a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b5c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b5e:	28 0f       	add	r18, r24
    1b60:	39 1f       	adc	r19, r25
    1b62:	3f 83       	std	Y+7, r19	; 0x07
    1b64:	2e 83       	std	Y+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
    1b66:	48 81       	ld	r20, Y
    1b68:	59 81       	ldd	r21, Y+1	; 0x01
    1b6a:	24 17       	cp	r18, r20
    1b6c:	35 07       	cpc	r19, r21
    1b6e:	30 f4       	brcc	.+12     	; 0x1b7c <prvCopyDataToQueue+0x88>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    1b70:	2c 81       	ldd	r18, Y+4	; 0x04
    1b72:	3d 81       	ldd	r19, Y+5	; 0x05
    1b74:	82 0f       	add	r24, r18
    1b76:	93 1f       	adc	r25, r19
    1b78:	9f 83       	std	Y+7, r25	; 0x07
    1b7a:	8e 83       	std	Y+6, r24	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
    1b7c:	02 30       	cpi	r16, 0x02	; 2
    1b7e:	e1 f6       	brne	.-72     	; 0x1b38 <prvCopyDataToQueue+0x44>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1b80:	11 23       	and	r17, r17
    1b82:	d1 f2       	breq	.-76     	; 0x1b38 <prvCopyDataToQueue+0x44>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
    1b84:	11 50       	subi	r17, 0x01	; 1
    1b86:	d8 cf       	rjmp	.-80     	; 0x1b38 <prvCopyDataToQueue+0x44>

00001b88 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    1b88:	fc 01       	movw	r30, r24
    1b8a:	cb 01       	movw	r24, r22
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1b8c:	44 8d       	ldd	r20, Z+28	; 0x1c
    1b8e:	44 23       	and	r20, r20
    1b90:	a1 f0       	breq	.+40     	; 0x1bba <prvCopyDataFromQueue+0x32>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	26 81       	ldd	r18, Z+6	; 0x06
    1b96:	37 81       	ldd	r19, Z+7	; 0x07
    1b98:	24 0f       	add	r18, r20
    1b9a:	35 1f       	adc	r19, r21
    1b9c:	37 83       	std	Z+7, r19	; 0x07
    1b9e:	26 83       	std	Z+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    1ba0:	64 81       	ldd	r22, Z+4	; 0x04
    1ba2:	75 81       	ldd	r23, Z+5	; 0x05
    1ba4:	26 17       	cp	r18, r22
    1ba6:	37 07       	cpc	r19, r23
    1ba8:	20 f0       	brcs	.+8      	; 0x1bb2 <prvCopyDataFromQueue+0x2a>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    1baa:	20 81       	ld	r18, Z
    1bac:	31 81       	ldd	r19, Z+1	; 0x01
    1bae:	37 83       	std	Z+7, r19	; 0x07
    1bb0:	26 83       	std	Z+6, r18	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
    1bb2:	66 81       	ldd	r22, Z+6	; 0x06
    1bb4:	77 81       	ldd	r23, Z+7	; 0x07
    1bb6:	0c 94 dd 27 	jmp	0x4fba	; 0x4fba <memcpy>
    }
}
    1bba:	08 95       	ret

00001bbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	0f 92       	push	r0
    {
        int8_t cTxLock = pxQueue->cTxLock;
    1bce:	1e 8d       	ldd	r17, Y+30	; 0x1e
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1bd0:	7c 01       	movw	r14, r24
    1bd2:	81 e1       	ldi	r24, 0x11	; 17
    1bd4:	e8 0e       	add	r14, r24
    1bd6:	f1 1c       	adc	r15, r1
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
    1bd8:	11 16       	cp	r1, r17
    1bda:	c4 f0       	brlt	.+48     	; 0x1c0c <prvUnlockQueue+0x50>
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
        }

        pxQueue->cTxLock = queueUNLOCKED;
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	8e 8f       	std	Y+30, r24	; 0x1e
    }
    taskEXIT_CRITICAL();
    1be0:	0f 90       	pop	r0
    1be2:	0f be       	out	0x3f, r0	; 63

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	0f 92       	push	r0
    {
        int8_t cRxLock = pxQueue->cRxLock;
    1bea:	1d 8d       	ldd	r17, Y+29	; 0x1d

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1bec:	7e 01       	movw	r14, r28
    1bee:	88 e0       	ldi	r24, 0x08	; 8
    1bf0:	e8 0e       	add	r14, r24
    1bf2:	f1 1c       	adc	r15, r1
    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
    1bf4:	11 16       	cp	r1, r17
    1bf6:	ac f0       	brlt	.+42     	; 0x1c22 <prvUnlockQueue+0x66>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
    1bf8:	8f ef       	ldi	r24, 0xFF	; 255
    1bfa:	8d 8f       	std	Y+29, r24	; 0x1d
    }
    taskEXIT_CRITICAL();
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
}
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	1f 91       	pop	r17
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	08 95       	ret
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1c0c:	89 89       	ldd	r24, Y+17	; 0x11
    1c0e:	88 23       	and	r24, r24
    1c10:	29 f3       	breq	.-54     	; 0x1bdc <prvUnlockQueue+0x20>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1c12:	c7 01       	movw	r24, r14
    1c14:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    1c18:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
    1c1a:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <vTaskMissedYield>
    1c1e:	11 50       	subi	r17, 0x01	; 1
    1c20:	db cf       	rjmp	.-74     	; 0x1bd8 <prvUnlockQueue+0x1c>
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1c22:	88 85       	ldd	r24, Y+8	; 0x08
    1c24:	88 23       	and	r24, r24
    1c26:	41 f3       	breq	.-48     	; 0x1bf8 <prvUnlockQueue+0x3c>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1c28:	c7 01       	movw	r24, r14
    1c2a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    1c2e:	81 11       	cpse	r24, r1
                {
                    vTaskMissedYield();
    1c30:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <vTaskMissedYield>
    1c34:	11 50       	subi	r17, 0x01	; 1
    1c36:	de cf       	rjmp	.-68     	; 0x1bf4 <prvUnlockQueue+0x38>

00001c38 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <xQueueGenericReset+0xa>
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <xQueueGenericReset+0x88>
        ( pxQueue->uxLength >= 1U ) &&
    1c42:	fc 01       	movw	r30, r24
    1c44:	23 8d       	ldd	r18, Z+27	; 0x1b

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    1c46:	22 23       	and	r18, r18
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <xQueueGenericReset+0x14>
    1c4a:	3a c0       	rjmp	.+116    	; 0x1cc0 <xQueueGenericReset+0x88>
    1c4c:	ec 01       	movw	r28, r24
        ( pxQueue->uxLength >= 1U ) &&
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    1c4e:	44 8d       	ldd	r20, Z+28	; 0x1c
    {
        taskENTER_CRITICAL();
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	0f 92       	push	r0
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	24 9f       	mul	r18, r20
    1c5e:	e0 0d       	add	r30, r0
    1c60:	f1 1d       	adc	r31, r1
    1c62:	11 24       	eor	r1, r1
    1c64:	fd 83       	std	Y+5, r31	; 0x05
    1c66:	ec 83       	std	Y+4, r30	; 0x04
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1c68:	1a 8e       	std	Y+26, r1	; 0x1a
            pxQueue->pcWriteTo = pxQueue->pcHead;
    1c6a:	9b 83       	std	Y+3, r25	; 0x03
    1c6c:	8a 83       	std	Y+2, r24	; 0x02
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
    1c6e:	21 50       	subi	r18, 0x01	; 1
    1c70:	33 0b       	sbc	r19, r19
    1c72:	42 9f       	mul	r20, r18
    1c74:	f0 01       	movw	r30, r0
    1c76:	43 9f       	mul	r20, r19
    1c78:	f0 0d       	add	r31, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	8e 0f       	add	r24, r30
    1c7e:	9f 1f       	adc	r25, r31
    1c80:	9f 83       	std	Y+7, r25	; 0x07
    1c82:	8e 83       	std	Y+6, r24	; 0x06
            pxQueue->cRxLock = queueUNLOCKED;
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	8d 8f       	std	Y+29, r24	; 0x1d
            pxQueue->cTxLock = queueUNLOCKED;
    1c88:	8e 8f       	std	Y+30, r24	; 0x1e

            if( xNewQueue == pdFALSE )
    1c8a:	61 11       	cpse	r22, r1
    1c8c:	10 c0       	rjmp	.+32     	; 0x1cae <xQueueGenericReset+0x76>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1c8e:	88 85       	ldd	r24, Y+8	; 0x08
    1c90:	88 23       	and	r24, r24
    1c92:	39 f0       	breq	.+14     	; 0x1ca2 <xQueueGenericReset+0x6a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1c94:	ce 01       	movw	r24, r28
    1c96:	08 96       	adiw	r24, 0x08	; 8
    1c98:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    1c9c:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1c9e:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
            }
        }
        taskEXIT_CRITICAL();
    1ca2:	0f 90       	pop	r0
    1ca4:	0f be       	out	0x3f, r0	; 63
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    BaseType_t xReturn = pdPASS;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
}
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1cae:	ce 01       	movw	r24, r28
    1cb0:	08 96       	adiw	r24, 0x08	; 8
    1cb2:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	41 96       	adiw	r24, 0x11	; 17
    1cba:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
    1cbe:	f1 cf       	rjmp	.-30     	; 0x1ca2 <xQueueGenericReset+0x6a>
        }
        taskEXIT_CRITICAL();
    }
    else
    {
        xReturn = pdFAIL;
    1cc0:	80 e0       	ldi	r24, 0x00	; 0

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
    1cc2:	f2 cf       	rjmp	.-28     	; 0x1ca8 <xQueueGenericReset+0x70>

00001cc4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    1ccc:	81 11       	cpse	r24, r1
    1cce:	08 c0       	rjmp	.+16     	; 0x1ce0 <xQueueGenericCreate+0x1c>

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
        Queue_t * pxNewQueue = NULL;
    1cd0:	d0 e0       	ldi	r29, 0x00	; 0
    1cd2:	c0 e0       	ldi	r28, 0x00	; 0
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    }
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	08 95       	ret

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
    1ce0:	86 9f       	mul	r24, r22
    1ce2:	90 01       	movw	r18, r0
    1ce4:	11 24       	eor	r1, r1

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    1ce6:	21 3e       	cpi	r18, 0xE1	; 225
    1ce8:	31 05       	cpc	r19, r1
    1cea:	94 f7       	brge	.-28     	; 0x1cd0 <xQueueGenericCreate+0xc>
    1cec:	16 2f       	mov	r17, r22
    1cee:	08 2f       	mov	r16, r24
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1cf0:	c9 01       	movw	r24, r18
    1cf2:	4f 96       	adiw	r24, 0x1f	; 31
    1cf4:	0e 94 3e 0b 	call	0x167c	; 0x167c <pvPortMalloc>
    1cf8:	ec 01       	movw	r28, r24

            if( pxNewQueue != NULL )
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	49 f3       	breq	.-46     	; 0x1cd0 <xQueueGenericCreate+0xc>
{
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
    1cfe:	11 11       	cpse	r17, r1
    1d00:	09 c0       	rjmp	.+18     	; 0x1d14 <xQueueGenericCreate+0x50>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1d02:	99 83       	std	Y+1, r25	; 0x01
    1d04:	88 83       	st	Y, r24
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
    1d06:	0b 8f       	std	Y+27, r16	; 0x1b
    pxNewQueue->uxItemSize = uxItemSize;
    1d08:	1c 8f       	std	Y+28, r17	; 0x1c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <xQueueGenericReset>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    1d12:	e0 cf       	rjmp	.-64     	; 0x1cd4 <xQueueGenericCreate+0x10>
            if( pxNewQueue != NULL )
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
                pucQueueStorage += sizeof( Queue_t );
    1d14:	4f 96       	adiw	r24, 0x1f	; 31
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1d16:	99 83       	std	Y+1, r25	; 0x01
    1d18:	88 83       	st	Y, r24
    1d1a:	f5 cf       	rjmp	.-22     	; 0x1d06 <xQueueGenericCreate+0x42>

00001d1c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
    1d1c:	af 92       	push	r10
    1d1e:	bf 92       	push	r11
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ff 92       	push	r15
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <xQueueGenericSend+0x14>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <xQueueGenericSend+0x16>
    1d32:	1f 92       	push	r1
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	8c 01       	movw	r16, r24
    1d3a:	6b 01       	movw	r12, r22
    1d3c:	5d 83       	std	Y+5, r21	; 0x05
    1d3e:	4c 83       	std	Y+4, r20	; 0x04
    1d40:	f2 2e       	mov	r15, r18
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1d42:	80 e0       	ldi	r24, 0x00	; 0
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1d44:	58 01       	movw	r10, r16
    1d46:	98 e0       	ldi	r25, 0x08	; 8
    1d48:	a9 0e       	add	r10, r25
    1d4a:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	0f 92       	push	r0
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1d52:	f8 01       	movw	r30, r16
    1d54:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d56:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d58:	29 17       	cp	r18, r25
    1d5a:	18 f0       	brcs	.+6      	; 0x1d62 <xQueueGenericSend+0x46>
    1d5c:	f2 e0       	ldi	r31, 0x02	; 2
    1d5e:	ff 12       	cpse	r15, r31
    1d60:	22 c0       	rjmp	.+68     	; 0x1da6 <xQueueGenericSend+0x8a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1d62:	4f 2d       	mov	r20, r15
    1d64:	b6 01       	movw	r22, r12
    1d66:	c8 01       	movw	r24, r16
    1d68:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvCopyDataToQueue>

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	91 89       	ldd	r25, Z+17	; 0x11
    1d70:	99 23       	and	r25, r25
    1d72:	21 f0       	breq	.+8      	; 0x1d7c <xQueueGenericSend+0x60>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d74:	c8 01       	movw	r24, r16
    1d76:	41 96       	adiw	r24, 0x11	; 17
    1d78:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    1d7c:	81 11       	cpse	r24, r1
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
    1d7e:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    1d82:	0f 90       	pop	r0
    1d84:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
        }
    }
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1da6:	2c 81       	ldd	r18, Y+4	; 0x04
    1da8:	3d 81       	ldd	r19, Y+5	; 0x05
    1daa:	23 2b       	or	r18, r19
    1dac:	21 f4       	brne	.+8      	; 0x1db6 <xQueueGenericSend+0x9a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
            ( void ) xTaskResumeAll();

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	e9 cf       	rjmp	.-46     	; 0x1d88 <xQueueGenericSend+0x6c>
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
                }
                else if( xEntryTimeSet == pdFALSE )
    1db6:	81 11       	cpse	r24, r1
    1db8:	04 c0       	rjmp	.+8      	; 0x1dc2 <xQueueGenericSend+0xa6>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1dba:	ce 01       	movw	r24, r28
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1dc6:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	0f 92       	push	r0
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	85 8d       	ldd	r24, Z+29	; 0x1d
    1dd4:	8f 3f       	cpi	r24, 0xFF	; 255
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <xQueueGenericSend+0xbe>
    1dd8:	15 8e       	std	Z+29, r1	; 0x1d
    1dda:	f8 01       	movw	r30, r16
    1ddc:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dde:	8f 3f       	cpi	r24, 0xFF	; 255
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <xQueueGenericSend+0xc8>
    1de2:	16 8e       	std	Z+30, r1	; 0x1e
    1de4:	0f 90       	pop	r0
    1de6:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1de8:	be 01       	movw	r22, r28
    1dea:	6c 5f       	subi	r22, 0xFC	; 252
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255
    1dee:	ce 01       	movw	r24, r28
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <xTaskCheckForTimeOut>
    1df6:	81 11       	cpse	r24, r1
    1df8:	20 c0       	rjmp	.+64     	; 0x1e3a <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1e00:	f8 01       	movw	r30, r16
    1e02:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    1e04:	0f 90       	pop	r0
    1e06:	0f be       	out	0x3f, r0	; 63
        prvLockQueue( pxQueue );

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1e08:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e0a:	98 13       	cpse	r25, r24
    1e0c:	10 c0       	rjmp	.+32     	; 0x1e2e <xQueueGenericSend+0x112>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1e0e:	6c 81       	ldd	r22, Y+4	; 0x04
    1e10:	7d 81       	ldd	r23, Y+5	; 0x05
    1e12:	c5 01       	movw	r24, r10
    1e14:	0e 94 c4 1b 	call	0x3788	; 0x3788 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    1e18:	c8 01       	movw	r24, r16
    1e1a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    1e1e:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    1e22:	81 11       	cpse	r24, r1
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <xQueueGenericSend+0x10e>
                {
                    taskYIELD_WITHIN_API();
    1e26:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	8f cf       	rjmp	.-226    	; 0x1d4c <xQueueGenericSend+0x30>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    1e2e:	c8 01       	movw	r24, r16
    1e30:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1e34:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    1e38:	f8 cf       	rjmp	.-16     	; 0x1e2a <xQueueGenericSend+0x10e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    1e40:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    1e44:	b6 cf       	rjmp	.-148    	; 0x1db2 <xQueueGenericSend+0x96>

00001e46 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1e52:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e56:	98 17       	cp	r25, r24
    1e58:	18 f0       	brcs	.+6      	; 0x1e60 <xQueueGenericSendFromISR+0x1a>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1e5c:	22 30       	cpi	r18, 0x02	; 2
    1e5e:	d1 f4       	brne	.+52     	; 0x1e94 <xQueueGenericSendFromISR+0x4e>
    1e60:	7a 01       	movw	r14, r20
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    1e62:	1e 8d       	ldd	r17, Y+30	; 0x1e
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    1e64:	8a 8d       	ldd	r24, Y+26	; 0x1a
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1e66:	42 2f       	mov	r20, r18
    1e68:	ce 01       	movw	r24, r28
    1e6a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    1e6e:	1f 3f       	cpi	r17, 0xFF	; 255
    1e70:	b9 f4       	brne	.+46     	; 0x1ea0 <xQueueGenericSendFromISR+0x5a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1e72:	89 89       	ldd	r24, Y+17	; 0x11
    1e74:	81 11       	cpse	r24, r1
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <xQueueGenericSendFromISR+0x36>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	0c c0       	rjmp	.+24     	; 0x1e94 <xQueueGenericSendFromISR+0x4e>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	41 96       	adiw	r24, 0x11	; 17
    1e80:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    1e84:	88 23       	and	r24, r24
    1e86:	c1 f3       	breq	.-16     	; 0x1e78 <xQueueGenericSendFromISR+0x32>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    1e88:	e1 14       	cp	r14, r1
    1e8a:	f1 04       	cpc	r15, r1
    1e8c:	a9 f3       	breq	.-22     	; 0x1e78 <xQueueGenericSendFromISR+0x32>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	f7 01       	movw	r30, r14
    1e92:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
}
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    1ea0:	0e 94 4c 19 	call	0x3298	; 0x3298 <uxTaskGetNumberOfTasks>
    1ea4:	18 17       	cp	r17, r24
    1ea6:	40 f7       	brcc	.-48     	; 0x1e78 <xQueueGenericSendFromISR+0x32>
    1ea8:	1f 5f       	subi	r17, 0xFF	; 255
    1eaa:	1e 8f       	std	Y+30, r17	; 0x1e
    1eac:	e5 cf       	rjmp	.-54     	; 0x1e78 <xQueueGenericSendFromISR+0x32>

00001eae <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1eba:	8a 8d       	ldd	r24, Y+26	; 0x1a

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
    1ebc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ebe:	89 17       	cp	r24, r25
    1ec0:	20 f5       	brcc	.+72     	; 0x1f0a <xQueueGiveFromISR+0x5c>
    1ec2:	7b 01       	movw	r14, r22
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    1ec4:	1e 8d       	ldd	r17, Y+30	; 0x1e
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	8a 8f       	std	Y+26, r24	; 0x1a

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    1eca:	1f 3f       	cpi	r17, 0xFF	; 255
    1ecc:	b9 f4       	brne	.+46     	; 0x1efc <xQueueGiveFromISR+0x4e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ece:	89 89       	ldd	r24, Y+17	; 0x11
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <xQueueGiveFromISR+0x2a>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	0c c0       	rjmp	.+24     	; 0x1ef0 <xQueueGiveFromISR+0x42>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ed8:	ce 01       	movw	r24, r28
    1eda:	41 96       	adiw	r24, 0x11	; 17
    1edc:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    1ee0:	88 23       	and	r24, r24
    1ee2:	c1 f3       	breq	.-16     	; 0x1ed4 <xQueueGiveFromISR+0x26>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    1ee4:	e1 14       	cp	r14, r1
    1ee6:	f1 04       	cpc	r15, r1
    1ee8:	a9 f3       	breq	.-22     	; 0x1ed4 <xQueueGiveFromISR+0x26>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	f7 01       	movw	r30, r14
    1eee:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
}
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    1efc:	0e 94 4c 19 	call	0x3298	; 0x3298 <uxTaskGetNumberOfTasks>
    1f00:	18 17       	cp	r17, r24
    1f02:	40 f7       	brcc	.-48     	; 0x1ed4 <xQueueGiveFromISR+0x26>
    1f04:	1f 5f       	subi	r17, 0xFF	; 255
    1f06:	1e 8f       	std	Y+30, r17	; 0x1e
    1f08:	e5 cf       	rjmp	.-54     	; 0x1ed4 <xQueueGiveFromISR+0x26>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
    1f0c:	f1 cf       	rjmp	.-30     	; 0x1ef0 <xQueueGiveFromISR+0x42>

00001f0e <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
    1f0e:	af 92       	push	r10
    1f10:	bf 92       	push	r11
    1f12:	cf 92       	push	r12
    1f14:	df 92       	push	r13
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <xQueueReceive+0x14>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <xQueueReceive+0x16>
    1f24:	1f 92       	push	r1
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	8c 01       	movw	r16, r24
    1f2c:	6b 01       	movw	r12, r22
    1f2e:	5d 83       	std	Y+5, r21	; 0x05
    1f30:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    1f32:	80 e0       	ldi	r24, 0x00	; 0
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1f34:	58 01       	movw	r10, r16
    1f36:	91 e1       	ldi	r25, 0x11	; 17
    1f38:	a9 0e       	add	r10, r25
    1f3a:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1f42:	f8 01       	movw	r30, r16
    1f44:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1f46:	ff 20       	and	r15, r15
    1f48:	19 f1       	breq	.+70     	; 0x1f90 <xQueueReceive+0x82>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
    1f4a:	b6 01       	movw	r22, r12
    1f4c:	c8 01       	movw	r24, r16
    1f4e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    1f52:	fa 94       	dec	r15
    1f54:	f8 01       	movw	r30, r16
    1f56:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1f58:	80 85       	ldd	r24, Z+8	; 0x08
    1f5a:	88 23       	and	r24, r24
    1f5c:	39 f0       	breq	.+14     	; 0x1f6c <xQueueReceive+0x5e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1f5e:	c8 01       	movw	r24, r16
    1f60:	08 96       	adiw	r24, 0x08	; 8
    1f62:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    1f66:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1f68:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    1f6c:	0f 90       	pop	r0
    1f6e:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	ff 90       	pop	r15
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	bf 90       	pop	r11
    1f8c:	af 90       	pop	r10
    1f8e:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1f90:	2c 81       	ldd	r18, Y+4	; 0x04
    1f92:	3d 81       	ldd	r19, Y+5	; 0x05
    1f94:	23 2b       	or	r18, r19
    1f96:	21 f4       	brne	.+8      	; 0x1fa0 <xQueueReceive+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	e9 cf       	rjmp	.-46     	; 0x1f72 <xQueueReceive+0x64>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    1fa0:	81 11       	cpse	r24, r1
    1fa2:	04 c0       	rjmp	.+8      	; 0x1fac <xQueueReceive+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1fac:	0f 90       	pop	r0
    1fae:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1fb0:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	0f 92       	push	r0
    1fba:	f8 01       	movw	r30, r16
    1fbc:	85 8d       	ldd	r24, Z+29	; 0x1d
    1fbe:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <xQueueReceive+0xb6>
    1fc2:	15 8e       	std	Z+29, r1	; 0x1d
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1fca:	09 f4       	brne	.+2      	; 0x1fce <xQueueReceive+0xc0>
    1fcc:	16 8e       	std	Z+30, r1	; 0x1e
    1fce:	0f 90       	pop	r0
    1fd0:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1fd2:	be 01       	movw	r22, r28
    1fd4:	6c 5f       	subi	r22, 0xFC	; 252
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	ce 01       	movw	r24, r28
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <xTaskCheckForTimeOut>
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	1b c0       	rjmp	.+54     	; 0x201a <xQueueReceive+0x10c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1fe4:	c8 01       	movw	r24, r16
    1fe6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <prvIsQueueEmpty>
    1fea:	88 23       	and	r24, r24
    1fec:	81 f0       	breq	.+32     	; 0x200e <xQueueReceive+0x100>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1fee:	6c 81       	ldd	r22, Y+4	; 0x04
    1ff0:	7d 81       	ldd	r23, Y+5	; 0x05
    1ff2:	c5 01       	movw	r24, r10
    1ff4:	0e 94 c4 1b 	call	0x3788	; 0x3788 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    1ffe:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    2002:	81 11       	cpse	r24, r1
    2004:	02 c0       	rjmp	.+4      	; 0x200a <xQueueReceive+0xfc>
                {
                    taskYIELD_WITHIN_API();
    2006:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	97 cf       	rjmp	.-210    	; 0x1f3c <xQueueReceive+0x2e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
    200e:	c8 01       	movw	r24, r16
    2010:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    2014:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    2018:	f8 cf       	rjmp	.-16     	; 0x200a <xQueueReceive+0xfc>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
    201a:	c8 01       	movw	r24, r16
    201c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    2020:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2024:	c8 01       	movw	r24, r16
    2026:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <prvIsQueueEmpty>
    202a:	88 23       	and	r24, r24
    202c:	71 f3       	breq	.-36     	; 0x200a <xQueueReceive+0xfc>
    202e:	b6 cf       	rjmp	.-148    	; 0x1f9c <xQueueReceive+0x8e>

00002030 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	00 d0       	rcall	.+0      	; 0x203e <xQueueSemaphoreTake+0xe>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <xQueueSemaphoreTake+0x10>
    2040:	1f 92       	push	r1
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	8c 01       	movw	r16, r24
    2048:	7d 83       	std	Y+5, r23	; 0x05
    204a:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    204c:	90 e0       	ldi	r25, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    204e:	78 01       	movw	r14, r16
    2050:	81 e1       	ldi	r24, 0x11	; 17
    2052:	e8 0e       	add	r14, r24
    2054:	f1 1c       	adc	r15, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    205c:	f8 01       	movw	r30, r16
    205e:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    2060:	88 23       	and	r24, r24
    2062:	d9 f0       	breq	.+54     	; 0x209a <xQueueSemaphoreTake+0x6a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
    2064:	81 50       	subi	r24, 0x01	; 1
    2066:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2068:	80 85       	ldd	r24, Z+8	; 0x08
    206a:	88 23       	and	r24, r24
    206c:	39 f0       	breq	.+14     	; 0x207c <xQueueSemaphoreTake+0x4c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    206e:	c8 01       	movw	r24, r16
    2070:	08 96       	adiw	r24, 0x08	; 8
    2072:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    2076:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    2078:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    207c:	0f 90       	pop	r0
    207e:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
    2080:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    209a:	2c 81       	ldd	r18, Y+4	; 0x04
    209c:	3d 81       	ldd	r19, Y+5	; 0x05
    209e:	23 2b       	or	r18, r19
    20a0:	21 f4       	brne	.+8      	; 0x20aa <xQueueSemaphoreTake+0x7a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    20a2:	0f 90       	pop	r0
    20a4:	0f be       	out	0x3f, r0	; 63
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	ec cf       	rjmp	.-40     	; 0x2082 <xQueueSemaphoreTake+0x52>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    20aa:	91 11       	cpse	r25, r1
    20ac:	04 c0       	rjmp	.+8      	; 0x20b6 <xQueueSemaphoreTake+0x86>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    20ae:	ce 01       	movw	r24, r28
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    20ba:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	0f 92       	push	r0
    20c4:	f8 01       	movw	r30, r16
    20c6:	85 8d       	ldd	r24, Z+29	; 0x1d
    20c8:	8f 3f       	cpi	r24, 0xFF	; 255
    20ca:	09 f4       	brne	.+2      	; 0x20ce <xQueueSemaphoreTake+0x9e>
    20cc:	15 8e       	std	Z+29, r1	; 0x1d
    20ce:	f8 01       	movw	r30, r16
    20d0:	86 8d       	ldd	r24, Z+30	; 0x1e
    20d2:	8f 3f       	cpi	r24, 0xFF	; 255
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <xQueueSemaphoreTake+0xa8>
    20d6:	16 8e       	std	Z+30, r1	; 0x1e
    20d8:	0f 90       	pop	r0
    20da:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    20dc:	be 01       	movw	r22, r28
    20de:	6c 5f       	subi	r22, 0xFC	; 252
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	ce 01       	movw	r24, r28
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <xTaskCheckForTimeOut>
    20ea:	81 11       	cpse	r24, r1
    20ec:	1b c0       	rjmp	.+54     	; 0x2124 <xQueueSemaphoreTake+0xf4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    20ee:	c8 01       	movw	r24, r16
    20f0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <prvIsQueueEmpty>
    20f4:	88 23       	and	r24, r24
    20f6:	81 f0       	breq	.+32     	; 0x2118 <xQueueSemaphoreTake+0xe8>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    20f8:	6c 81       	ldd	r22, Y+4	; 0x04
    20fa:	7d 81       	ldd	r23, Y+5	; 0x05
    20fc:	c7 01       	movw	r24, r14
    20fe:	0e 94 c4 1b 	call	0x3788	; 0x3788 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    2102:	c8 01       	movw	r24, r16
    2104:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    2108:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    210c:	81 11       	cpse	r24, r1
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <xQueueSemaphoreTake+0xe4>
                {
                    taskYIELD_WITHIN_API();
    2110:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	9f cf       	rjmp	.-194    	; 0x2056 <xQueueSemaphoreTake+0x26>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    2118:	c8 01       	movw	r24, r16
    211a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    211e:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    2122:	f8 cf       	rjmp	.-16     	; 0x2114 <xQueueSemaphoreTake+0xe4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    2124:	c8 01       	movw	r24, r16
    2126:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    212a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    212e:	c8 01       	movw	r24, r16
    2130:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <prvIsQueueEmpty>
    2134:	88 23       	and	r24, r24
    2136:	71 f3       	breq	.-36     	; 0x2114 <xQueueSemaphoreTake+0xe4>
    2138:	b6 cf       	rjmp	.-148    	; 0x20a6 <xQueueSemaphoreTake+0x76>

0000213a <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
    213a:	cf 92       	push	r12
    213c:	df 92       	push	r13
    213e:	ef 92       	push	r14
    2140:	ff 92       	push	r15
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	00 d0       	rcall	.+0      	; 0x214c <xQueuePeek+0x12>
    214c:	00 d0       	rcall	.+0      	; 0x214e <xQueuePeek+0x14>
    214e:	1f 92       	push	r1
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	8c 01       	movw	r16, r24
    2156:	7b 01       	movw	r14, r22
    2158:	5d 83       	std	Y+5, r21	; 0x05
    215a:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    215c:	80 e0       	ldi	r24, 0x00	; 0
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    215e:	68 01       	movw	r12, r16
    2160:	91 e1       	ldi	r25, 0x11	; 17
    2162:	c9 0e       	add	r12, r25
    2164:	d1 1c       	adc	r13, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    216c:	f8 01       	movw	r30, r16
    216e:	92 8d       	ldd	r25, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2170:	99 23       	and	r25, r25
    2172:	21 f1       	breq	.+72     	; 0x21bc <xQueuePeek+0x82>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    2174:	c6 80       	ldd	r12, Z+6	; 0x06
    2176:	d7 80       	ldd	r13, Z+7	; 0x07

                prvCopyDataFromQueue( pxQueue, pvBuffer );
    2178:	b7 01       	movw	r22, r14
    217a:	c8 01       	movw	r24, r16
    217c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    2180:	f8 01       	movw	r30, r16
    2182:	d7 82       	std	Z+7, r13	; 0x07
    2184:	c6 82       	std	Z+6, r12	; 0x06

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2186:	81 89       	ldd	r24, Z+17	; 0x11
    2188:	88 23       	and	r24, r24
    218a:	39 f0       	breq	.+14     	; 0x219a <xQueuePeek+0x60>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    218c:	c8 01       	movw	r24, r16
    218e:	41 96       	adiw	r24, 0x11	; 17
    2190:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    2194:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
    2196:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    219a:	0f 90       	pop	r0
    219c:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
    219e:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	cf 90       	pop	r12
    21ba:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    21bc:	2c 81       	ldd	r18, Y+4	; 0x04
    21be:	3d 81       	ldd	r19, Y+5	; 0x05
    21c0:	23 2b       	or	r18, r19
    21c2:	21 f4       	brne	.+8      	; 0x21cc <xQueuePeek+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    21c4:	0f 90       	pop	r0
    21c6:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	ea cf       	rjmp	.-44     	; 0x21a0 <xQueuePeek+0x66>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    21cc:	81 11       	cpse	r24, r1
    21ce:	04 c0       	rjmp	.+8      	; 0x21d8 <xQueuePeek+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    21d0:	ce 01       	movw	r24, r28
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    21d8:	0f 90       	pop	r0
    21da:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
    21dc:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	0f 92       	push	r0
    21e6:	f8 01       	movw	r30, r16
    21e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    21ea:	8f 3f       	cpi	r24, 0xFF	; 255
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <xQueuePeek+0xb6>
    21ee:	15 8e       	std	Z+29, r1	; 0x1d
    21f0:	f8 01       	movw	r30, r16
    21f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    21f4:	8f 3f       	cpi	r24, 0xFF	; 255
    21f6:	09 f4       	brne	.+2      	; 0x21fa <xQueuePeek+0xc0>
    21f8:	16 8e       	std	Z+30, r1	; 0x1e
    21fa:	0f 90       	pop	r0
    21fc:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    21fe:	be 01       	movw	r22, r28
    2200:	6c 5f       	subi	r22, 0xFC	; 252
    2202:	7f 4f       	sbci	r23, 0xFF	; 255
    2204:	ce 01       	movw	r24, r28
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <xTaskCheckForTimeOut>
    220c:	81 11       	cpse	r24, r1
    220e:	1b c0       	rjmp	.+54     	; 0x2246 <xQueuePeek+0x10c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2210:	c8 01       	movw	r24, r16
    2212:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <prvIsQueueEmpty>
    2216:	88 23       	and	r24, r24
    2218:	81 f0       	breq	.+32     	; 0x223a <xQueuePeek+0x100>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    221a:	6c 81       	ldd	r22, Y+4	; 0x04
    221c:	7d 81       	ldd	r23, Y+5	; 0x05
    221e:	c6 01       	movw	r24, r12
    2220:	0e 94 c4 1b 	call	0x3788	; 0x3788 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    2224:	c8 01       	movw	r24, r16
    2226:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    222a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    222e:	81 11       	cpse	r24, r1
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <xQueuePeek+0xfc>
                {
                    taskYIELD_WITHIN_API();
    2232:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	96 cf       	rjmp	.-212    	; 0x2166 <xQueuePeek+0x2c>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
    223a:	c8 01       	movw	r24, r16
    223c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    2240:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    2244:	f8 cf       	rjmp	.-16     	; 0x2236 <xQueuePeek+0xfc>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
    2246:	c8 01       	movw	r24, r16
    2248:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    224c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2250:	c8 01       	movw	r24, r16
    2252:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <prvIsQueueEmpty>
    2256:	88 23       	and	r24, r24
    2258:	71 f3       	breq	.-36     	; 0x2236 <xQueuePeek+0xfc>
    225a:	b6 cf       	rjmp	.-148    	; 0x21c8 <xQueuePeek+0x8e>

0000225c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2268:	fc 01       	movw	r30, r24
    226a:	02 8d       	ldd	r16, Z+26	; 0x1a

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    226c:	00 23       	and	r16, r16
    226e:	41 f1       	breq	.+80     	; 0x22c0 <xQueueReceiveFromISR+0x64>
    2270:	7a 01       	movw	r14, r20
    2272:	ec 01       	movw	r28, r24
        {
            const int8_t cRxLock = pxQueue->cRxLock;
    2274:	15 8d       	ldd	r17, Z+29	; 0x1d

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
    2276:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    227a:	01 50       	subi	r16, 0x01	; 1
    227c:	0a 8f       	std	Y+26, r16	; 0x1a

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
    227e:	1f 3f       	cpi	r17, 0xFF	; 255
    2280:	c1 f4       	brne	.+48     	; 0x22b2 <xQueueReceiveFromISR+0x56>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2282:	88 85       	ldd	r24, Y+8	; 0x08
    2284:	81 11       	cpse	r24, r1
    2286:	02 c0       	rjmp	.+4      	; 0x228c <xQueueReceiveFromISR+0x30>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
            }

            xReturn = pdPASS;
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	0c c0       	rjmp	.+24     	; 0x22a4 <xQueueReceiveFromISR+0x48>
             * locked. */
            if( cRxLock == queueUNLOCKED )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    228c:	ce 01       	movw	r24, r28
    228e:	08 96       	adiw	r24, 0x08	; 8
    2290:	0e 94 57 1c 	call	0x38ae	; 0x38ae <xTaskRemoveFromEventList>
    2294:	88 23       	and	r24, r24
    2296:	c1 f3       	breq	.-16     	; 0x2288 <xQueueReceiveFromISR+0x2c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
    2298:	e1 14       	cp	r14, r1
    229a:	f1 04       	cpc	r15, r1
    229c:	a9 f3       	breq	.-22     	; 0x2288 <xQueueReceiveFromISR+0x2c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	f7 01       	movw	r30, r14
    22a2:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
}
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
    22b2:	0e 94 4c 19 	call	0x3298	; 0x3298 <uxTaskGetNumberOfTasks>
    22b6:	18 17       	cp	r17, r24
    22b8:	38 f7       	brcc	.-50     	; 0x2288 <xQueueReceiveFromISR+0x2c>
    22ba:	1f 5f       	subi	r17, 0xFF	; 255
    22bc:	1d 8f       	std	Y+29, r17	; 0x1d
    22be:	e4 cf       	rjmp	.-56     	; 0x2288 <xQueueReceiveFromISR+0x2c>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
    22c2:	f0 cf       	rjmp	.-32     	; 0x22a4 <xQueueReceiveFromISR+0x48>

000022c4 <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    22cc:	fc 01       	movw	r30, r24
    22ce:	22 8d       	ldd	r18, Z+26	; 0x1a
    22d0:	22 23       	and	r18, r18
    22d2:	69 f0       	breq	.+26     	; 0x22ee <xQueuePeekFromISR+0x2a>
    22d4:	ec 01       	movw	r28, r24
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    22d6:	06 81       	ldd	r16, Z+6	; 0x06
    22d8:	17 81       	ldd	r17, Z+7	; 0x07
            prvCopyDataFromQueue( pxQueue, pvBuffer );
    22da:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    22de:	1f 83       	std	Y+7, r17	; 0x07
    22e0:	0e 83       	std	Y+6, r16	; 0x06

            xReturn = pdPASS;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
}
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	08 95       	ret

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
    22f0:	f9 cf       	rjmp	.-14     	; 0x22e4 <xQueuePeekFromISR+0x20>

000022f2 <uxQueueMessagesWaiting>:

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );

    taskENTER_CRITICAL();
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	0f 92       	push	r0
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    22f8:	fc 01       	movw	r30, r24
    22fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    22fc:	0f 90       	pop	r0
    22fe:	0f be       	out	0x3f, r0	; 63

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
}
    2300:	08 95       	ret

00002302 <uxQueueSpacesAvailable>:

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	0f 92       	push	r0
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    2308:	fc 01       	movw	r30, r24
    230a:	22 8d       	ldd	r18, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    230c:	0f 90       	pop	r0
    230e:	0f be       	out	0x3f, r0	; 63

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    2310:	83 8d       	ldd	r24, Z+27	; 0x1b
    taskEXIT_CRITICAL();

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
}
    2312:	82 1b       	sub	r24, r18
    2314:	08 95       	ret

00002316 <uxQueueMessagesWaitingFromISR>:
    Queue_t * const pxQueue = xQueue;

    traceENTER_uxQueueMessagesWaitingFromISR( xQueue );

    configASSERT( pxQueue );
    uxReturn = pxQueue->uxMessagesWaiting;
    2316:	fc 01       	movw	r30, r24
    2318:	82 8d       	ldd	r24, Z+26	; 0x1a

    traceRETURN_uxQueueMessagesWaitingFromISR( uxReturn );

    return uxReturn;
}
    231a:	08 95       	ret

0000231c <vQueueDelete>:

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
    231c:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <vPortFree>

00002320 <uxQueueGetQueueItemSize>:
    traceENTER_uxQueueGetQueueItemSize( xQueue );

    traceRETURN_uxQueueGetQueueItemSize( ( ( Queue_t * ) xQueue )->uxItemSize );

    return ( ( Queue_t * ) xQueue )->uxItemSize;
}
    2320:	fc 01       	movw	r30, r24
    2322:	84 8d       	ldd	r24, Z+28	; 0x1c
    2324:	08 95       	ret

00002326 <uxQueueGetQueueLength>:
    traceENTER_uxQueueGetQueueLength( xQueue );

    traceRETURN_uxQueueGetQueueLength( ( ( Queue_t * ) xQueue )->uxLength );

    return ( ( Queue_t * ) xQueue )->uxLength;
}
    2326:	fc 01       	movw	r30, r24
    2328:	83 8d       	ldd	r24, Z+27	; 0x1b
    232a:	08 95       	ret

0000232c <xQueueIsQueueEmptyFromISR>:

    traceENTER_xQueueIsQueueEmptyFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    232c:	fc 01       	movw	r30, r24
    232e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	91 11       	cpse	r25, r1
    2334:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueEmptyFromISR( xReturn );

    return xReturn;
}
    2336:	08 95       	ret

00002338 <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2338:	fc 01       	movw	r30, r24

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    233a:	92 8d       	ldd	r25, Z+26	; 0x1a
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	23 8d       	ldd	r18, Z+27	; 0x1b
    2340:	29 13       	cpse	r18, r25
    2342:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
}
    2344:	08 95       	ret

00002346 <xQueueCRSend>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSend( QueueHandle_t xQueue,
                             const void * pvItemToQueue,
                             TickType_t xTicksToWait )
    {
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	ec 01       	movw	r28, r24
        traceENTER_xQueueCRSend( xQueue, pvItemToQueue, xTicksToWait );

        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    234c:	f8 94       	cli

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2354:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2356:	9b 8d       	ldd	r25, Y+27	; 0x1b
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    235c:	89 13       	cpse	r24, r25
    235e:	11 c0       	rjmp	.+34     	; 0x2382 <xQueueCRSend+0x3c>
            {
                /* The queue is full - do we want to block or just leave without
                 * posting? */
                if( xTicksToWait > ( TickType_t ) 0 )
    2360:	41 15       	cp	r20, r1
    2362:	51 05       	cpc	r21, r1
    2364:	59 f0       	breq	.+22     	; 0x237c <xQueueCRSend+0x36>
                {
                    /* As this is called from a coroutine we cannot block directly, but
                     * return indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    2366:	be 01       	movw	r22, r28
    2368:	68 5f       	subi	r22, 0xF8	; 248
    236a:	7f 4f       	sbci	r23, 0xFF	; 255
    236c:	ca 01       	movw	r24, r20
    236e:	0e 94 48 08 	call	0x1090	; 0x1090 <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    2372:	78 94       	sei
                    return errQUEUE_BLOCKED;
    2374:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    }
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    237c:	78 94       	sei
                    return errQUEUE_FULL;
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	fa cf       	rjmp	.-12     	; 0x2376 <xQueueCRSend+0x30>
                }
            }
        }
        portENABLE_INTERRUPTS();
    2382:	78 94       	sei

        portDISABLE_INTERRUPTS();
    2384:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2386:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2388:	89 17       	cp	r24, r25
    238a:	90 f4       	brcc	.+36     	; 0x23b0 <xQueueCRSend+0x6a>
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	ce 01       	movw	r24, r28
    2390:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvCopyDataToQueue>
                xReturn = pdPASS;

                /* Were any co-routines waiting for data to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2394:	89 89       	ldd	r24, Y+17	; 0x11
    2396:	81 11       	cpse	r24, r1
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <xQueueCRSend+0x5a>
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
                xReturn = pdPASS;
    239a:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = errQUEUE_FULL;
            }
        }
        portENABLE_INTERRUPTS();
    239c:	78 94       	sei

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    239e:	eb cf       	rjmp	.-42     	; 0x2376 <xQueueCRSend+0x30>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    23a0:	ce 01       	movw	r24, r28
    23a2:	41 96       	adiw	r24, 0x11	; 17
    23a4:	0e 94 8e 09 	call	0x131c	; 0x131c <xCoRoutineRemoveFromEventList>
    23a8:	88 23       	and	r24, r24
    23aa:	b9 f3       	breq	.-18     	; 0x239a <xQueueCRSend+0x54>
                    {
                        /* The co-routine waiting has a higher priority so record
                         * that a yield might be appropriate. */
                        xReturn = errQUEUE_YIELD;
    23ac:	8b ef       	ldi	r24, 0xFB	; 251
    23ae:	f6 cf       	rjmp	.-20     	; 0x239c <xQueueCRSend+0x56>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = errQUEUE_FULL;
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	f4 cf       	rjmp	.-24     	; 0x239c <xQueueCRSend+0x56>

000023b4 <xQueueCRReceive>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
                                void * pvBuffer,
                                TickType_t xTicksToWait )
    {
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	ec 01       	movw	r28, r24
    23ba:	fb 01       	movw	r30, r22
        traceENTER_xQueueCRReceive( xQueue, pvBuffer, xTicksToWait );

        /* If the queue is already empty we may have to block.  A critical section
         * is required to prevent an interrupt adding something to the queue
         * between the check to see if the queue is empty and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    23bc:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    23be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23c0:	81 11       	cpse	r24, r1
    23c2:	11 c0       	rjmp	.+34     	; 0x23e6 <xQueueCRReceive+0x32>
            {
                /* There are no messages in the queue, do we want to block or just
                 * leave with nothing? */
                if( xTicksToWait > ( TickType_t ) 0 )
    23c4:	41 15       	cp	r20, r1
    23c6:	51 05       	cpc	r21, r1
    23c8:	59 f0       	breq	.+22     	; 0x23e0 <xQueueCRReceive+0x2c>
                {
                    /* As this is a co-routine we cannot block directly, but return
                     * indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    23ca:	be 01       	movw	r22, r28
    23cc:	6f 5e       	subi	r22, 0xEF	; 239
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255
    23d0:	ca 01       	movw	r24, r20
    23d2:	0e 94 48 08 	call	0x1090	; 0x1090 <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    23d6:	78 94       	sei
                    return errQUEUE_BLOCKED;
    23d8:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    }
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    23e0:	78 94       	sei
                    return errQUEUE_FULL;
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	fa cf       	rjmp	.-12     	; 0x23da <xQueueCRReceive+0x26>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portENABLE_INTERRUPTS();
    23e6:	78 94       	sei

        portDISABLE_INTERRUPTS();
    23e8:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    23ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23ec:	88 23       	and	r24, r24
    23ee:	39 f1       	breq	.+78     	; 0x243e <xQueueCRReceive+0x8a>
            {
                /* Data is available from the queue. */
                pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    23f0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	2e 81       	ldd	r18, Y+6	; 0x06
    23f6:	3f 81       	ldd	r19, Y+7	; 0x07
    23f8:	24 0f       	add	r18, r20
    23fa:	35 1f       	adc	r19, r21
    23fc:	3f 83       	std	Y+7, r19	; 0x07
    23fe:	2e 83       	std	Y+6, r18	; 0x06

                if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    2400:	8c 81       	ldd	r24, Y+4	; 0x04
    2402:	9d 81       	ldd	r25, Y+5	; 0x05
    2404:	28 17       	cp	r18, r24
    2406:	39 07       	cpc	r19, r25
    2408:	20 f0       	brcs	.+8      	; 0x2412 <xQueueCRReceive+0x5e>
                {
                    pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    240a:	88 81       	ld	r24, Y
    240c:	99 81       	ldd	r25, Y+1	; 0x01
    240e:	9f 83       	std	Y+7, r25	; 0x07
    2410:	8e 83       	std	Y+6, r24	; 0x06
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --( pxQueue->uxMessagesWaiting );
    2412:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2414:	91 50       	subi	r25, 0x01	; 1
    2416:	9a 8f       	std	Y+26, r25	; 0x1a
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2418:	6e 81       	ldd	r22, Y+6	; 0x06
    241a:	7f 81       	ldd	r23, Y+7	; 0x07
    241c:	cf 01       	movw	r24, r30
    241e:	0e 94 dd 27 	call	0x4fba	; 0x4fba <memcpy>

                xReturn = pdPASS;

                /* Were any co-routines waiting for space to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2422:	88 85       	ldd	r24, Y+8	; 0x08
    2424:	81 11       	cpse	r24, r1
    2426:	03 c0       	rjmp	.+6      	; 0x242e <xQueueCRReceive+0x7a>
                }

                --( pxQueue->uxMessagesWaiting );
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

                xReturn = pdPASS;
    2428:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        portENABLE_INTERRUPTS();
    242a:	78 94       	sei

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    242c:	d6 cf       	rjmp	.-84     	; 0x23da <xQueueCRReceive+0x26>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    242e:	ce 01       	movw	r24, r28
    2430:	08 96       	adiw	r24, 0x08	; 8
    2432:	0e 94 8e 09 	call	0x131c	; 0x131c <xCoRoutineRemoveFromEventList>
    2436:	88 23       	and	r24, r24
    2438:	b9 f3       	breq	.-18     	; 0x2428 <xQueueCRReceive+0x74>
                    {
                        xReturn = errQUEUE_YIELD;
    243a:	8b ef       	ldi	r24, 0xFB	; 251
    243c:	f6 cf       	rjmp	.-20     	; 0x242a <xQueueCRReceive+0x76>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = pdFAIL;
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	f4 cf       	rjmp	.-24     	; 0x242a <xQueueCRReceive+0x76>

00002442 <xQueueCRSendFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
                                    const void * pvItemToQueue,
                                    BaseType_t xCoRoutinePreviouslyWoken )
    {
    2442:	1f 93       	push	r17
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	ec 01       	movw	r28, r24
    244a:	14 2f       	mov	r17, r20

        traceENTER_xQueueCRSendFromISR( xQueue, pvItemToQueue, xCoRoutinePreviouslyWoken );

        /* Cannot block within an ISR so if there is no space on the queue then
         * exit without doing anything. */
        if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    244c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    244e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2450:	98 17       	cp	r25, r24
    2452:	88 f4       	brcc	.+34     	; 0x2476 <xQueueCRSendFromISR+0x34>
        {
            prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	ce 01       	movw	r24, r28
    2458:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvCopyDataToQueue>

            /* We only want to wake one co-routine per ISR, so check that a
             * co-routine has not already been woken. */
            if( xCoRoutinePreviouslyWoken == pdFALSE )
    245c:	11 11       	cpse	r17, r1
    245e:	0b c0       	rjmp	.+22     	; 0x2476 <xQueueCRSendFromISR+0x34>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2460:	89 89       	ldd	r24, Y+17	; 0x11
    2462:	88 23       	and	r24, r24
    2464:	41 f0       	breq	.+16     	; 0x2476 <xQueueCRSendFromISR+0x34>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2466:	ce 01       	movw	r24, r28
    2468:	41 96       	adiw	r24, 0x11	; 17
    246a:	0e 94 8e 09 	call	0x131c	; 0x131c <xCoRoutineRemoveFromEventList>
    246e:	11 e0       	ldi	r17, 0x01	; 1
    2470:	81 11       	cpse	r24, r1
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <xQueueCRSendFromISR+0x34>
    2474:	10 e0       	ldi	r17, 0x00	; 0
        }

        traceRETURN_xQueueCRSendFromISR( xCoRoutinePreviouslyWoken );

        return xCoRoutinePreviouslyWoken;
    }
    2476:	81 2f       	mov	r24, r17
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	08 95       	ret

00002480 <xQueueCRReceiveFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
                                       void * pvBuffer,
                                       BaseType_t * pxCoRoutineWoken )
    {
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	ec 01       	movw	r28, r24

        traceENTER_xQueueCRReceiveFromISR( xQueue, pvBuffer, pxCoRoutineWoken );

        /* We cannot block from an ISR, so check there is data available. If
         * not then just leave without doing anything. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    248a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    248c:	88 23       	and	r24, r24
    248e:	91 f1       	breq	.+100    	; 0x24f4 <xQueueCRReceiveFromISR+0x74>
        {
            /* Copy the data from the queue. */
            pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    2490:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	ae 81       	ldd	r26, Y+6	; 0x06
    2496:	bf 81       	ldd	r27, Y+7	; 0x07
    2498:	a2 0f       	add	r26, r18
    249a:	b3 1f       	adc	r27, r19
    249c:	bf 83       	std	Y+7, r27	; 0x07
    249e:	ae 83       	std	Y+6, r26	; 0x06

            if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	9d 81       	ldd	r25, Y+5	; 0x05
    24a4:	a8 17       	cp	r26, r24
    24a6:	b9 07       	cpc	r27, r25
    24a8:	20 f0       	brcs	.+8      	; 0x24b2 <xQueueCRReceiveFromISR+0x32>
            {
                pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    24aa:	88 81       	ld	r24, Y
    24ac:	99 81       	ldd	r25, Y+1	; 0x01
    24ae:	9f 83       	std	Y+7, r25	; 0x07
    24b0:	8e 83       	std	Y+6, r24	; 0x06
    24b2:	8a 01       	movw	r16, r20
    24b4:	cb 01       	movw	r24, r22
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            --( pxQueue->uxMessagesWaiting );
    24b6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    24b8:	41 50       	subi	r20, 0x01	; 1
    24ba:	4a 8f       	std	Y+26, r20	; 0x1a
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    24bc:	6e 81       	ldd	r22, Y+6	; 0x06
    24be:	7f 81       	ldd	r23, Y+7	; 0x07
    24c0:	a9 01       	movw	r20, r18
    24c2:	0e 94 dd 27 	call	0x4fba	; 0x4fba <memcpy>

            if( ( *pxCoRoutineWoken ) == pdFALSE )
    24c6:	f8 01       	movw	r30, r16
    24c8:	80 81       	ld	r24, Z
    24ca:	88 23       	and	r24, r24
    24cc:	31 f0       	breq	.+12     	; 0x24da <xQueueCRReceiveFromISR+0x5a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    }
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	08 95       	ret
            --( pxQueue->uxMessagesWaiting );
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

            if( ( *pxCoRoutineWoken ) == pdFALSE )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    24da:	88 85       	ldd	r24, Y+8	; 0x08
    24dc:	88 23       	and	r24, r24
    24de:	b9 f3       	breq	.-18     	; 0x24ce <xQueueCRReceiveFromISR+0x4e>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    24e0:	ce 01       	movw	r24, r28
    24e2:	08 96       	adiw	r24, 0x08	; 8
    24e4:	0e 94 8e 09 	call	0x131c	; 0x131c <xCoRoutineRemoveFromEventList>
    24e8:	88 23       	and	r24, r24
    24ea:	89 f3       	breq	.-30     	; 0x24ce <xQueueCRReceiveFromISR+0x4e>
                    {
                        *pxCoRoutineWoken = pdTRUE;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	f8 01       	movw	r30, r16
    24f0:	80 83       	st	Z, r24
    24f2:	ee cf       	rjmp	.-36     	; 0x24d0 <xQueueCRReceiveFromISR+0x50>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    24f4:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    24f6:	ec cf       	rjmp	.-40     	; 0x24d0 <xQueueCRReceiveFromISR+0x50>

000024f8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	0f 92       	push	r0
    2504:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2506:	8f 3f       	cpi	r24, 0xFF	; 255
    2508:	09 f4       	brne	.+2      	; 0x250c <vQueueWaitForMessageRestricted+0x14>
    250a:	1d 8e       	std	Y+29, r1	; 0x1d
    250c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    250e:	8f 3f       	cpi	r24, 0xFF	; 255
    2510:	09 f4       	brne	.+2      	; 0x2514 <vQueueWaitForMessageRestricted+0x1c>
    2512:	1e 8e       	std	Y+30, r1	; 0x1e
    2514:	0f 90       	pop	r0
    2516:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2518:	8a 8d       	ldd	r24, Y+26	; 0x1a
    251a:	81 11       	cpse	r24, r1
    251c:	04 c0       	rjmp	.+8      	; 0x2526 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    251e:	ce 01       	movw	r24, r28
    2520:	41 96       	adiw	r24, 0x11	; 17
    2522:	0e 94 18 1c 	call	0x3830	; 0x3830 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    2526:	ce 01       	movw	r24, r28

        traceRETURN_vQueueWaitForMessageRestricted();
    }
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    252c:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <prvUnlockQueue>

00002530 <prvBytesInBuffer>:
    return xTail;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    2530:	fc 01       	movw	r30, r24
    /* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    2532:	44 81       	ldd	r20, Z+4	; 0x04
    2534:	55 81       	ldd	r21, Z+5	; 0x05
    2536:	22 81       	ldd	r18, Z+2	; 0x02
    2538:	33 81       	ldd	r19, Z+3	; 0x03
    253a:	24 0f       	add	r18, r20
    253c:	35 1f       	adc	r19, r21
    xCount -= pxStreamBuffer->xTail;
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	b9 01       	movw	r22, r18
    2544:	68 1b       	sub	r22, r24
    2546:	79 0b       	sbc	r23, r25
    2548:	cb 01       	movw	r24, r22

    if( xCount >= pxStreamBuffer->xLength )
    254a:	64 17       	cp	r22, r20
    254c:	75 07       	cpc	r23, r21
    254e:	10 f0       	brcs	.+4      	; 0x2554 <prvBytesInBuffer+0x24>
    {
        xCount -= pxStreamBuffer->xLength;
    2550:	84 1b       	sub	r24, r20
    2552:	95 0b       	sbc	r25, r21
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
}
    2554:	08 95       	ret

00002556 <prvWriteBytesToBuffer>:

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount,
                                     size_t xHead )
{
    2556:	af 92       	push	r10
    2558:	bf 92       	push	r11
    255a:	cf 92       	push	r12
    255c:	df 92       	push	r13
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	6c 01       	movw	r12, r24
    256c:	5b 01       	movw	r10, r22
    256e:	7a 01       	movw	r14, r20
    2570:	e9 01       	movw	r28, r18
    configASSERT( xCount > ( size_t ) 0 );

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
    2572:	fc 01       	movw	r30, r24
    2574:	04 81       	ldd	r16, Z+4	; 0x04
    2576:	15 81       	ldd	r17, Z+5	; 0x05
    2578:	02 1b       	sub	r16, r18
    257a:	13 0b       	sbc	r17, r19
    257c:	40 17       	cp	r20, r16
    257e:	51 07       	cpc	r21, r17
    2580:	08 f4       	brcc	.+2      	; 0x2584 <prvWriteBytesToBuffer+0x2e>
    2582:	8a 01       	movw	r16, r20

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength );
    2584:	f6 01       	movw	r30, r12
    2586:	84 85       	ldd	r24, Z+12	; 0x0c
    2588:	95 85       	ldd	r25, Z+13	; 0x0d
    258a:	a8 01       	movw	r20, r16
    258c:	b5 01       	movw	r22, r10
    258e:	8c 0f       	add	r24, r28
    2590:	9d 1f       	adc	r25, r29
    2592:	0e 94 dd 27 	call	0x4fba	; 0x4fba <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    2596:	0e 15       	cp	r16, r14
    2598:	1f 05       	cpc	r17, r15
    259a:	58 f4       	brcc	.+22     	; 0x25b2 <prvWriteBytesToBuffer+0x5c>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength );
    259c:	a7 01       	movw	r20, r14
    259e:	40 1b       	sub	r20, r16
    25a0:	51 0b       	sbc	r21, r17
    25a2:	b5 01       	movw	r22, r10
    25a4:	60 0f       	add	r22, r16
    25a6:	71 1f       	adc	r23, r17
    25a8:	f6 01       	movw	r30, r12
    25aa:	84 85       	ldd	r24, Z+12	; 0x0c
    25ac:	95 85       	ldd	r25, Z+13	; 0x0d
    25ae:	0e 94 dd 27 	call	0x4fba	; 0x4fba <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xHead += xCount;
    25b2:	ce 01       	movw	r24, r28
    25b4:	8e 0d       	add	r24, r14
    25b6:	9f 1d       	adc	r25, r15

    if( xHead >= pxStreamBuffer->xLength )
    25b8:	f6 01       	movw	r30, r12
    25ba:	24 81       	ldd	r18, Z+4	; 0x04
    25bc:	35 81       	ldd	r19, Z+5	; 0x05
    25be:	82 17       	cp	r24, r18
    25c0:	93 07       	cpc	r25, r19
    25c2:	10 f0       	brcs	.+4      	; 0x25c8 <prvWriteBytesToBuffer+0x72>
    {
        xHead -= pxStreamBuffer->xLength;
    25c4:	82 1b       	sub	r24, r18
    25c6:	93 0b       	sbc	r25, r19
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xHead;
}
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	bf 90       	pop	r11
    25da:	af 90       	pop	r10
    25dc:	08 95       	ret

000025de <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
    25de:	af 92       	push	r10
    25e0:	bf 92       	push	r11
    25e2:	cf 92       	push	r12
    25e4:	df 92       	push	r13
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <prvWriteMessageToBuffer+0x16>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	6c 01       	movw	r12, r24
    25fa:	5b 01       	movw	r10, r22
    25fc:	7a 01       	movw	r14, r20
    size_t xNextHead = pxStreamBuffer->xHead;
    25fe:	fc 01       	movw	r30, r24
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    configMESSAGE_BUFFER_LENGTH_TYPE xMessageLength;

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2604:	46 85       	ldd	r20, Z+14	; 0x0e
    2606:	40 ff       	sbrs	r20, 0
    2608:	28 c0       	rjmp	.+80     	; 0x265a <prvWriteMessageToBuffer+0x7c>
    {
        /* This is a message buffer, as opposed to a stream buffer. */

        /* Convert xDataLengthBytes to the message length type. */
        xMessageLength = ( configMESSAGE_BUFFER_LENGTH_TYPE ) xDataLengthBytes;
    260a:	fa 82       	std	Y+2, r15	; 0x02
    260c:	e9 82       	std	Y+1, r14	; 0x01

        /* Ensure the data length given fits within configMESSAGE_BUFFER_LENGTH_TYPE. */
        configASSERT( ( size_t ) xMessageLength == xDataLengthBytes );

        if( xSpace >= xRequiredSpace )
    260e:	20 17       	cp	r18, r16
    2610:	31 07       	cpc	r19, r17
    2612:	40 f1       	brcs	.+80     	; 0x2664 <prvWriteMessageToBuffer+0x86>
        {
            /* There is enough space to write both the message length and the message
             * itself into the buffer.  Start by writing the length of the data, the data
             * itself will be written later in this function. */
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
    2614:	9c 01       	movw	r18, r24
    2616:	42 e0       	ldi	r20, 0x02	; 2
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	be 01       	movw	r22, r28
    261c:	6f 5f       	subi	r22, 0xFF	; 255
    261e:	7f 4f       	sbci	r23, 0xFF	; 255
    2620:	c6 01       	movw	r24, r12
    2622:	0e 94 ab 12 	call	0x2556	; 0x2556 <prvWriteBytesToBuffer>
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    }

    if( xDataLengthBytes != ( size_t ) 0 )
    2626:	e1 14       	cp	r14, r1
    2628:	f1 04       	cpc	r15, r1
    262a:	49 f0       	breq	.+18     	; 0x263e <prvWriteMessageToBuffer+0x60>
    {
        /* Write the data to the buffer. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead );
    262c:	9c 01       	movw	r18, r24
    262e:	a7 01       	movw	r20, r14
    2630:	b5 01       	movw	r22, r10
    2632:	c6 01       	movw	r24, r12
    2634:	0e 94 ab 12 	call	0x2556	; 0x2556 <prvWriteBytesToBuffer>
    2638:	f6 01       	movw	r30, r12
    263a:	93 83       	std	Z+3, r25	; 0x03
    263c:	82 83       	std	Z+2, r24	; 0x02
    }

    return xDataLengthBytes;
}
    263e:	c7 01       	movw	r24, r14
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	ff 90       	pop	r15
    264e:	ef 90       	pop	r14
    2650:	df 90       	pop	r13
    2652:	cf 90       	pop	r12
    2654:	bf 90       	pop	r11
    2656:	af 90       	pop	r10
    2658:	08 95       	ret
    else
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    265a:	2e 15       	cp	r18, r14
    265c:	3f 05       	cpc	r19, r15
    265e:	18 f7       	brcc	.-58     	; 0x2626 <prvWriteMessageToBuffer+0x48>
    2660:	79 01       	movw	r14, r18
    2662:	e1 cf       	rjmp	.-62     	; 0x2626 <prvWriteMessageToBuffer+0x48>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
        }
        else
        {
            /* Not enough space, so do not write data to the buffer. */
            xDataLengthBytes = 0;
    2664:	f1 2c       	mov	r15, r1
    2666:	e1 2c       	mov	r14, r1
    2668:	ea cf       	rjmp	.-44     	; 0x263e <prvWriteMessageToBuffer+0x60>

0000266a <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xCount,
                                      size_t xTail )
{
    266a:	af 92       	push	r10
    266c:	bf 92       	push	r11
    266e:	cf 92       	push	r12
    2670:	df 92       	push	r13
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	6c 01       	movw	r12, r24
    2680:	5b 01       	movw	r10, r22
    2682:	7a 01       	movw	r14, r20
    2684:	e9 01       	movw	r28, r18
    configASSERT( xCount != ( size_t ) 0 );

    /* Calculate the number of bytes that can be read - which may be
     * less than the number wanted if the data wraps around to the start of
     * the buffer. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
    2686:	fc 01       	movw	r30, r24
    2688:	04 81       	ldd	r16, Z+4	; 0x04
    268a:	15 81       	ldd	r17, Z+5	; 0x05
    268c:	02 1b       	sub	r16, r18
    268e:	13 0b       	sbc	r17, r19
    2690:	40 17       	cp	r20, r16
    2692:	51 07       	cpc	r21, r17
    2694:	08 f4       	brcc	.+2      	; 0x2698 <prvReadBytesFromBuffer+0x2e>
    2696:	8a 01       	movw	r16, r20

    /* Obtain the number of bytes it is possible to obtain in the first
     * read.  Asserts check bounds of read and write. */
    configASSERT( xFirstLength <= xCount );
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength );
    2698:	f6 01       	movw	r30, r12
    269a:	64 85       	ldd	r22, Z+12	; 0x0c
    269c:	75 85       	ldd	r23, Z+13	; 0x0d
    269e:	6c 0f       	add	r22, r28
    26a0:	7d 1f       	adc	r23, r29
    26a2:	a8 01       	movw	r20, r16
    26a4:	c5 01       	movw	r24, r10
    26a6:	0e 94 dd 27 	call	0x4fba	; 0x4fba <memcpy>

    /* If the total number of wanted bytes is greater than the number
     * that could be read in the first read... */
    if( xCount > xFirstLength )
    26aa:	0e 15       	cp	r16, r14
    26ac:	1f 05       	cpc	r17, r15
    26ae:	58 f4       	brcc	.+22     	; 0x26c6 <prvReadBytesFromBuffer+0x5c>
    {
        /* ...then read the remaining bytes from the start of the buffer. */
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength );
    26b0:	a7 01       	movw	r20, r14
    26b2:	40 1b       	sub	r20, r16
    26b4:	51 0b       	sbc	r21, r17
    26b6:	f6 01       	movw	r30, r12
    26b8:	64 85       	ldd	r22, Z+12	; 0x0c
    26ba:	75 85       	ldd	r23, Z+13	; 0x0d
    26bc:	c5 01       	movw	r24, r10
    26be:	80 0f       	add	r24, r16
    26c0:	91 1f       	adc	r25, r17
    26c2:	0e 94 dd 27 	call	0x4fba	; 0x4fba <memcpy>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Move the tail pointer to effectively remove the data read from the buffer. */
    xTail += xCount;
    26c6:	ce 01       	movw	r24, r28
    26c8:	8e 0d       	add	r24, r14
    26ca:	9f 1d       	adc	r25, r15

    if( xTail >= pxStreamBuffer->xLength )
    26cc:	f6 01       	movw	r30, r12
    26ce:	24 81       	ldd	r18, Z+4	; 0x04
    26d0:	35 81       	ldd	r19, Z+5	; 0x05
    26d2:	82 17       	cp	r24, r18
    26d4:	93 07       	cpc	r25, r19
    26d6:	10 f0       	brcs	.+4      	; 0x26dc <prvReadBytesFromBuffer+0x72>
    {
        xTail -= pxStreamBuffer->xLength;
    26d8:	82 1b       	sub	r24, r18
    26da:	93 0b       	sbc	r25, r19
    }

    return xTail;
}
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	df 90       	pop	r13
    26ea:	cf 90       	pop	r12
    26ec:	bf 90       	pop	r11
    26ee:	af 90       	pop	r10
    26f0:	08 95       	ret

000026f2 <prvReadMessageFromBuffer>:

static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable )
{
    26f2:	af 92       	push	r10
    26f4:	bf 92       	push	r11
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	00 d0       	rcall	.+0      	; 0x2708 <prvReadMessageFromBuffer+0x16>
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	7c 01       	movw	r14, r24
    270e:	5b 01       	movw	r10, r22
    2710:	6a 01       	movw	r12, r20
    2712:	89 01       	movw	r16, r18
    size_t xCount, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
    size_t xNextTail = pxStreamBuffer->xTail;
    2714:	fc 01       	movw	r30, r24
    2716:	20 81       	ld	r18, Z
    2718:	31 81       	ldd	r19, Z+1	; 0x01

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    271a:	86 85       	ldd	r24, Z+14	; 0x0e
    271c:	80 ff       	sbrs	r24, 0
    271e:	12 c0       	rjmp	.+36     	; 0x2744 <prvReadMessageFromBuffer+0x52>
    {
        /* A discrete message is being received.  First receive the length
         * of the message. */
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
    2720:	42 e0       	ldi	r20, 0x02	; 2
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	be 01       	movw	r22, r28
    2726:	6f 5f       	subi	r22, 0xFF	; 255
    2728:	7f 4f       	sbci	r23, 0xFF	; 255
    272a:	c7 01       	movw	r24, r14
    272c:	0e 94 35 13 	call	0x266a	; 0x266a <prvReadBytesFromBuffer>
    2730:	9c 01       	movw	r18, r24
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2736:	02 50       	subi	r16, 0x02	; 2
    2738:	11 09       	sbc	r17, r1

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    273a:	c8 16       	cp	r12, r24
    273c:	d9 06       	cpc	r13, r25
    273e:	f8 f4       	brcc	.+62     	; 0x277e <prvReadMessageFromBuffer+0x8c>
        {
            /* The user has provided insufficient space to read the message. */
            xNextMessageLength = 0;
    2740:	d1 2c       	mov	r13, r1
    2742:	c1 2c       	mov	r12, r1
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
    2744:	c0 16       	cp	r12, r16
    2746:	d1 06       	cpc	r13, r17
    2748:	08 f4       	brcc	.+2      	; 0x274c <prvReadMessageFromBuffer+0x5a>
    274a:	86 01       	movw	r16, r12

    if( xCount != ( size_t ) 0 )
    274c:	01 15       	cp	r16, r1
    274e:	11 05       	cpc	r17, r1
    2750:	41 f0       	breq	.+16     	; 0x2762 <prvReadMessageFromBuffer+0x70>
    {
        /* Read the actual data and update the tail to mark the data as officially consumed. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail );
    2752:	a8 01       	movw	r20, r16
    2754:	b5 01       	movw	r22, r10
    2756:	c7 01       	movw	r24, r14
    2758:	0e 94 35 13 	call	0x266a	; 0x266a <prvReadBytesFromBuffer>
    275c:	f7 01       	movw	r30, r14
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24
    }

    return xCount;
}
    2762:	c8 01       	movw	r24, r16
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	cf 90       	pop	r12
    2778:	bf 90       	pop	r11
    277a:	af 90       	pop	r10
    277c:	08 95       	ret
    277e:	6c 01       	movw	r12, r24
    2780:	e1 cf       	rjmp	.-62     	; 0x2744 <prvReadMessageFromBuffer+0x52>

00002782 <xStreamBufferGenericCreate>:
    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xStreamBufferType,
                                                     StreamBufferCallbackFunction_t pxSendCompletedCallback,
                                                     StreamBufferCallbackFunction_t pxReceiveCompletedCallback )
    {
    2782:	ef 92       	push	r14
    2784:	ff 92       	push	r15
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	ec 01       	movw	r28, r24
    278e:	7b 01       	movw	r14, r22
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    2790:	11 e0       	ldi	r17, 0x01	; 1

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
    2792:	41 30       	cpi	r20, 0x01	; 1
    2794:	21 f0       	breq	.+8      	; 0x279e <xStreamBufferGenericCreate+0x1c>
            configASSERT( xBufferSizeBytes > 0 );
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
    2796:	10 e0       	ldi	r17, 0x00	; 0
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
        }
        else if( xStreamBufferType == sbTYPE_STREAM_BATCHING_BUFFER )
    2798:	42 30       	cpi	r20, 0x02	; 2
    279a:	09 f4       	brne	.+2      	; 0x279e <xStreamBufferGenericCreate+0x1c>
        {
            /* Is a batching buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_BATCHING_BUFFER;
    279c:	14 e0       	ldi	r17, 0x04	; 4

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
    279e:	e1 14       	cp	r14, r1
    27a0:	f1 04       	cpc	r15, r1
    27a2:	19 f4       	brne	.+6      	; 0x27aa <xStreamBufferGenericCreate+0x28>
        {
            xTriggerLevelBytes = ( size_t ) 1;
    27a4:	ee 24       	eor	r14, r14
    27a6:	e3 94       	inc	r14
    27a8:	f1 2c       	mov	r15, r1
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
        }
        else
        {
            pvAllocatedMemory = NULL;
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	e0 e0       	ldi	r30, 0x00	; 0
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
    27ae:	cf 3e       	cpi	r28, 0xEF	; 239
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	d8 07       	cpc	r29, r24
    27b4:	b8 f4       	brcc	.+46     	; 0x27e4 <xStreamBufferGenericCreate+0x62>
        {
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
    27b6:	ce 01       	movw	r24, r28
    27b8:	41 96       	adiw	r24, 0x11	; 17
    27ba:	0e 94 3e 0b 	call	0x167c	; 0x167c <pvPortMalloc>
    27be:	fc 01       	movw	r30, r24
        else
        {
            pvAllocatedMemory = NULL;
        }

        if( pvAllocatedMemory != NULL )
    27c0:	89 2b       	or	r24, r25
    27c2:	81 f0       	breq	.+32     	; 0x27e4 <xStreamBufferGenericCreate+0x62>
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    27c4:	8c e0       	ldi	r24, 0x0C	; 12
    27c6:	df 01       	movw	r26, r30
    27c8:	1d 92       	st	X+, r1
    27ca:	8a 95       	dec	r24
    27cc:	e9 f7       	brne	.-6      	; 0x27c8 <xStreamBufferGenericCreate+0x46>
        if( pvAllocatedMemory != NULL )
        {
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */
    27ce:	cf 01       	movw	r24, r30
    27d0:	40 96       	adiw	r24, 0x10	; 16
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    27d2:	95 87       	std	Z+13, r25	; 0x0d
    27d4:	84 87       	std	Z+12, r24	; 0x0c
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
        {
            xBufferSizeBytes++;
    27d6:	21 96       	adiw	r28, 0x01	; 1
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    27d8:	d5 83       	std	Z+5, r29	; 0x05
    27da:	c4 83       	std	Z+4, r28	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    27dc:	f7 82       	std	Z+7, r15	; 0x07
    27de:	e6 82       	std	Z+6, r14	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    27e0:	16 87       	std	Z+14, r17	; 0x0e
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    27e2:	17 86       	std	Z+15, r1	; 0x0f

        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        return ( StreamBufferHandle_t ) pvAllocatedMemory;
    }
    27e4:	cf 01       	movw	r24, r30
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	08 95       	ret

000027f2 <vStreamBufferDelete>:

    configASSERT( pxStreamBuffer );

    traceSTREAM_BUFFER_DELETE( xStreamBuffer );

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    27f2:	fc 01       	movw	r30, r24
    27f4:	26 85       	ldd	r18, Z+14	; 0x0e
    27f6:	21 ff       	sbrs	r18, 1
    {
        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
        {
            /* Both the structure and the buffer were allocated using a single call
            * to pvPortMalloc(), hence only one call to vPortFree() is required. */
            vPortFree( ( void * ) pxStreamBuffer );
    27f8:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <vPortFree>
    }
    else
    {
        /* The structure and buffer were not allocated dynamically and cannot be
         * freed - just scrub the structure so future use will assert. */
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    27fc:	20 e1       	ldi	r18, 0x10	; 16
    27fe:	11 92       	st	Z+, r1
    2800:	2a 95       	dec	r18
    2802:	e9 f7       	brne	.-6      	; 0x27fe <vStreamBufferDelete+0xc>
    }

    traceRETURN_vStreamBufferDelete();
}
    2804:	08 95       	ret

00002806 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    2806:	fc 01       	movw	r30, r24
        uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
    }
    #endif

    /* Can only reset a message buffer if there are no tasks blocked on it. */
    taskENTER_CRITICAL();
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	0f 92       	push	r0
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    280e:	80 85       	ldd	r24, Z+8	; 0x08
    2810:	91 85       	ldd	r25, Z+9	; 0x09
    2812:	89 2b       	or	r24, r25
    2814:	b1 f4       	brne	.+44     	; 0x2842 <xStreamBufferReset+0x3c>
    2816:	82 85       	ldd	r24, Z+10	; 0x0a
    2818:	93 85       	ldd	r25, Z+11	; 0x0b
    281a:	89 2b       	or	r24, r25
    281c:	91 f4       	brne	.+36     	; 0x2842 <xStreamBufferReset+0x3c>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    281e:	86 81       	ldd	r24, Z+6	; 0x06
    2820:	97 81       	ldd	r25, Z+7	; 0x07
    2822:	24 81       	ldd	r18, Z+4	; 0x04
    2824:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    2826:	4c e0       	ldi	r20, 0x0C	; 12
    2828:	df 01       	movw	r26, r30
    282a:	1d 92       	st	X+, r1
    282c:	4a 95       	dec	r20
    282e:	e9 f7       	brne	.-6      	; 0x282a <xStreamBufferReset+0x24>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    2830:	35 83       	std	Z+5, r19	; 0x05
    2832:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2834:	97 83       	std	Z+7, r25	; 0x07
    2836:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    2838:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET( xStreamBuffer );

            xReturn = pdPASS;
    283a:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    283c:	0f 90       	pop	r0
    283e:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xStreamBufferReset( xReturn );

    return xReturn;
}
    2840:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	fb cf       	rjmp	.-10     	; 0x283c <xStreamBufferReset+0x36>

00002846 <xStreamBufferResetFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    2846:	fc 01       	movw	r30, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    2848:	80 85       	ldd	r24, Z+8	; 0x08
    284a:	91 85       	ldd	r25, Z+9	; 0x09
    284c:	89 2b       	or	r24, r25
    284e:	a1 f4       	brne	.+40     	; 0x2878 <xStreamBufferResetFromISR+0x32>
    2850:	82 85       	ldd	r24, Z+10	; 0x0a
    2852:	93 85       	ldd	r25, Z+11	; 0x0b
    2854:	89 2b       	or	r24, r25
    2856:	81 f4       	brne	.+32     	; 0x2878 <xStreamBufferResetFromISR+0x32>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    2858:	86 81       	ldd	r24, Z+6	; 0x06
    285a:	97 81       	ldd	r25, Z+7	; 0x07
    285c:	24 81       	ldd	r18, Z+4	; 0x04
    285e:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    2860:	4c e0       	ldi	r20, 0x0C	; 12
    2862:	df 01       	movw	r26, r30
    2864:	1d 92       	st	X+, r1
    2866:	4a 95       	dec	r20
    2868:	e9 f7       	brne	.-6      	; 0x2864 <xStreamBufferResetFromISR+0x1e>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    286a:	35 83       	std	Z+5, r19	; 0x05
    286c:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    286e:	97 83       	std	Z+7, r25	; 0x07
    2870:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    2872:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET_FROM_ISR( xStreamBuffer );

            xReturn = pdPASS;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    2878:	80 e0       	ldi	r24, 0x00	; 0
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferResetFromISR( xReturn );

    return xReturn;
}
    287a:	08 95       	ret

0000287c <xStreamBufferSetTriggerLevel>:
    traceENTER_xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );

    configASSERT( pxStreamBuffer );

    /* It is not valid for the trigger level to be 0. */
    if( xTriggerLevel == ( size_t ) 0 )
    287c:	61 15       	cp	r22, r1
    287e:	71 05       	cpc	r23, r1
    2880:	11 f4       	brne	.+4      	; 0x2886 <xStreamBufferSetTriggerLevel+0xa>
    {
        xTriggerLevel = ( size_t ) 1;
    2882:	61 e0       	ldi	r22, 0x01	; 1
    2884:	70 e0       	ldi	r23, 0x00	; 0
    }

    /* The trigger level is the number of bytes that must be in the stream
     * buffer before a task that is waiting for data is unblocked. */
    if( xTriggerLevel < pxStreamBuffer->xLength )
    2886:	fc 01       	movw	r30, r24
    2888:	24 81       	ldd	r18, Z+4	; 0x04
    288a:	35 81       	ldd	r19, Z+5	; 0x05
    288c:	62 17       	cp	r22, r18
    288e:	73 07       	cpc	r23, r19
    2890:	20 f4       	brcc	.+8      	; 0x289a <xStreamBufferSetTriggerLevel+0x1e>
    {
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    2892:	77 83       	std	Z+7, r23	; 0x07
    2894:	66 83       	std	Z+6, r22	; 0x06
        xReturn = pdPASS;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	08 95       	ret
    }
    else
    {
        xReturn = pdFALSE;
    289a:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferSetTriggerLevel( xReturn );

    return xReturn;
}
    289c:	08 95       	ret

0000289e <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    289e:	fc 01       	movw	r30, r24
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    28a0:	24 81       	ldd	r18, Z+4	; 0x04
    28a2:	35 81       	ldd	r19, Z+5	; 0x05
    /* The code below reads xTail and then xHead.  This is safe if the stream
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
        xSpace -= pxStreamBuffer->xHead;
    28ac:	42 81       	ldd	r20, Z+2	; 0x02
    28ae:	53 81       	ldd	r21, Z+3	; 0x03
    } while( xOriginalTail != pxStreamBuffer->xTail );
    28b0:	a0 81       	ld	r26, Z
    28b2:	b1 81       	ldd	r27, Z+1	; 0x01
    28b4:	a8 17       	cp	r26, r24
    28b6:	b9 07       	cpc	r27, r25
    28b8:	a9 f7       	brne	.-22     	; 0x28a4 <xStreamBufferSpacesAvailable+0x6>

    xSpace -= ( size_t ) 1;
    28ba:	c9 01       	movw	r24, r18
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	86 0f       	add	r24, r22
    28c0:	97 1f       	adc	r25, r23
    28c2:	84 1b       	sub	r24, r20
    28c4:	95 0b       	sbc	r25, r21

    if( xSpace >= pxStreamBuffer->xLength )
    28c6:	82 17       	cp	r24, r18
    28c8:	93 07       	cpc	r25, r19
    28ca:	10 f0       	brcs	.+4      	; 0x28d0 <xStreamBufferSpacesAvailable+0x32>
    {
        xSpace -= pxStreamBuffer->xLength;
    28cc:	82 1b       	sub	r24, r18
    28ce:	93 0b       	sbc	r25, r19
    }

    traceRETURN_xStreamBufferSpacesAvailable( xSpace );

    return xSpace;
}
    28d0:	08 95       	ret

000028d2 <xStreamBufferBytesAvailable>:

    traceENTER_xStreamBufferBytesAvailable( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    28d2:	0c 94 98 12 	jmp	0x2530	; 0x2530 <prvBytesInBuffer>

000028d6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    28d6:	2f 92       	push	r2
    28d8:	3f 92       	push	r3
    28da:	4f 92       	push	r4
    28dc:	5f 92       	push	r5
    28de:	6f 92       	push	r6
    28e0:	7f 92       	push	r7
    28e2:	8f 92       	push	r8
    28e4:	9f 92       	push	r9
    28e6:	af 92       	push	r10
    28e8:	bf 92       	push	r11
    28ea:	cf 92       	push	r12
    28ec:	df 92       	push	r13
    28ee:	ef 92       	push	r14
    28f0:	ff 92       	push	r15
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <xStreamBufferSend+0x26>
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <xStreamBufferSend+0x28>
    28fe:	1f 92       	push	r1
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	5c 01       	movw	r10, r24
    2906:	1b 01       	movw	r2, r22
    2908:	2a 01       	movw	r4, r20
    290a:	3d 83       	std	Y+5, r19	; 0x05
    290c:	2c 83       	std	Y+4, r18	; 0x04
    configASSERT( pvTxData );
    configASSERT( pxStreamBuffer );

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    290e:	fc 01       	movw	r30, r24
    2910:	84 81       	ldd	r24, Z+4	; 0x04
    2912:	95 81       	ldd	r25, Z+5	; 0x05
    2914:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2916:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2918:	4a 01       	movw	r8, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    291a:	20 ff       	sbrs	r18, 0
    291c:	54 c0       	rjmp	.+168    	; 0x29c6 <xStreamBufferSend+0xf0>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    291e:	f2 e0       	ldi	r31, 0x02	; 2
    2920:	8f 0e       	add	r8, r31
    2922:	91 1c       	adc	r9, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    2924:	88 15       	cp	r24, r8
    2926:	99 05       	cpc	r25, r9
    2928:	10 f4       	brcc	.+4      	; 0x292e <xStreamBufferSend+0x58>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    292a:	1d 82       	std	Y+5, r1	; 0x05
    292c:	1c 82       	std	Y+4, r1	; 0x04
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	9d 81       	ldd	r25, Y+5	; 0x05
    2932:	89 2b       	or	r24, r25
    2934:	09 f0       	breq	.+2      	; 0x2938 <xStreamBufferSend+0x62>
    2936:	4d c0       	rjmp	.+154    	; 0x29d2 <xStreamBufferSend+0xfc>
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2938:	c5 01       	movw	r24, r10
    293a:	0e 94 4f 14 	call	0x289e	; 0x289e <xStreamBufferSpacesAvailable>
    293e:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2940:	84 01       	movw	r16, r8
    2942:	93 01       	movw	r18, r6
    2944:	a2 01       	movw	r20, r4
    2946:	b1 01       	movw	r22, r2
    2948:	c5 01       	movw	r24, r10
    294a:	0e 94 ef 12 	call	0x25de	; 0x25de <prvWriteMessageToBuffer>
    294e:	4c 01       	movw	r8, r24

    if( xReturn > ( size_t ) 0 )
    2950:	89 2b       	or	r24, r25
    2952:	01 f1       	breq	.+64     	; 0x2994 <xStreamBufferSend+0xbe>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2954:	c5 01       	movw	r24, r10
    2956:	0e 94 98 12 	call	0x2530	; 0x2530 <prvBytesInBuffer>
    295a:	f5 01       	movw	r30, r10
    295c:	26 81       	ldd	r18, Z+6	; 0x06
    295e:	37 81       	ldd	r19, Z+7	; 0x07
    2960:	82 17       	cp	r24, r18
    2962:	93 07       	cpc	r25, r19
    2964:	b8 f0       	brcs	.+46     	; 0x2994 <xStreamBufferSend+0xbe>
        {
            prvSEND_COMPLETED( pxStreamBuffer );
    2966:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
    296a:	f5 01       	movw	r30, r10
    296c:	80 85       	ldd	r24, Z+8	; 0x08
    296e:	91 85       	ldd	r25, Z+9	; 0x09
    2970:	89 2b       	or	r24, r25
    2972:	71 f0       	breq	.+28     	; 0x2990 <xStreamBufferSend+0xba>
    2974:	80 85       	ldd	r24, Z+8	; 0x08
    2976:	91 85       	ldd	r25, Z+9	; 0x09
    2978:	f1 2c       	mov	r15, r1
    297a:	e1 2c       	mov	r14, r1
    297c:	00 e0       	ldi	r16, 0x00	; 0
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	a9 01       	movw	r20, r18
    2984:	67 85       	ldd	r22, Z+15	; 0x0f
    2986:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <xTaskGenericNotify>
    298a:	f5 01       	movw	r30, r10
    298c:	11 86       	std	Z+9, r1	; 0x09
    298e:	10 86       	std	Z+8, r1	; 0x08
    2990:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    }

    traceRETURN_xStreamBufferSend( xReturn );

    return xReturn;
}
    2994:	c4 01       	movw	r24, r8
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	ef 90       	pop	r14
    29ac:	df 90       	pop	r13
    29ae:	cf 90       	pop	r12
    29b0:	bf 90       	pop	r11
    29b2:	af 90       	pop	r10
    29b4:	9f 90       	pop	r9
    29b6:	8f 90       	pop	r8
    29b8:	7f 90       	pop	r7
    29ba:	6f 90       	pop	r6
    29bc:	5f 90       	pop	r5
    29be:	4f 90       	pop	r4
    29c0:	3f 90       	pop	r3
    29c2:	2f 90       	pop	r2
    29c4:	08 95       	ret
    29c6:	84 17       	cp	r24, r20
    29c8:	95 07       	cpc	r25, r21
    29ca:	08 f0       	brcs	.+2      	; 0x29ce <xStreamBufferSend+0xf8>
    29cc:	b0 cf       	rjmp	.-160    	; 0x292e <xStreamBufferSend+0x58>
    29ce:	4c 01       	movw	r8, r24
    29d0:	ae cf       	rjmp	.-164    	; 0x292e <xStreamBufferSend+0x58>
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    {
        vTaskSetTimeOutState( &xTimeOut );
    29d2:	ce 01       	movw	r24, r28
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    29e0:	c5 01       	movw	r24, r10
    29e2:	0e 94 4f 14 	call	0x289e	; 0x289e <xStreamBufferSpacesAvailable>
    29e6:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    29e8:	88 15       	cp	r24, r8
    29ea:	99 05       	cpc	r25, r9
    29ec:	58 f5       	brcc	.+86     	; 0x2a44 <xStreamBufferSend+0x16e>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    29ee:	f5 01       	movw	r30, r10
    29f0:	67 85       	ldd	r22, Z+15	; 0x0f
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	0e 94 cd 21 	call	0x439a	; 0x439a <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    29fa:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <xTaskGetCurrentTaskHandle>
    29fe:	f5 01       	movw	r30, r10
    2a00:	93 87       	std	Z+11, r25	; 0x0b
    2a02:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2a08:	cc 80       	ldd	r12, Y+4	; 0x04
    2a0a:	dd 80       	ldd	r13, Y+5	; 0x05
    2a0c:	f1 2c       	mov	r15, r1
    2a0e:	e1 2c       	mov	r14, r1
    2a10:	00 e0       	ldi	r16, 0x00	; 0
    2a12:	10 e0       	ldi	r17, 0x00	; 0
    2a14:	98 01       	movw	r18, r16
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	ba 01       	movw	r22, r20
    2a1c:	87 85       	ldd	r24, Z+15	; 0x0f
    2a1e:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2a22:	f5 01       	movw	r30, r10
    2a24:	13 86       	std	Z+11, r1	; 0x0b
    2a26:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2a28:	be 01       	movw	r22, r28
    2a2a:	6c 5f       	subi	r22, 0xFC	; 252
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <xTaskCheckForTimeOut>
    2a36:	88 23       	and	r24, r24
    2a38:	81 f2       	breq	.-96     	; 0x29da <xStreamBufferSend+0x104>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2a3a:	61 14       	cp	r6, r1
    2a3c:	71 04       	cpc	r7, r1
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <xStreamBufferSend+0x16c>
    2a40:	7b cf       	rjmp	.-266    	; 0x2938 <xStreamBufferSend+0x62>
    2a42:	7e cf       	rjmp	.-260    	; 0x2940 <xStreamBufferSend+0x6a>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2a44:	0f 90       	pop	r0
    2a46:	0f be       	out	0x3f, r0	; 63
                    break;
    2a48:	f8 cf       	rjmp	.-16     	; 0x2a3a <xStreamBufferSend+0x164>

00002a4a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2a4a:	af 92       	push	r10
    2a4c:	bf 92       	push	r11
    2a4e:	cf 92       	push	r12
    2a50:	df 92       	push	r13
    2a52:	ef 92       	push	r14
    2a54:	ff 92       	push	r15
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	ec 01       	movw	r28, r24
    2a60:	5b 01       	movw	r10, r22
    2a62:	7a 01       	movw	r14, r20
    2a64:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2a66:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2a68:	8a 01       	movw	r16, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2a6a:	80 ff       	sbrs	r24, 0
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <xStreamBufferSendFromISR+0x28>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2a6e:	0e 5f       	subi	r16, 0xFE	; 254
    2a70:	1f 4f       	sbci	r17, 0xFF	; 255
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2a72:	ce 01       	movw	r24, r28
    2a74:	0e 94 4f 14 	call	0x289e	; 0x289e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2a78:	9c 01       	movw	r18, r24
    2a7a:	a7 01       	movw	r20, r14
    2a7c:	b5 01       	movw	r22, r10
    2a7e:	ce 01       	movw	r24, r28
    2a80:	0e 94 ef 12 	call	0x25de	; 0x25de <prvWriteMessageToBuffer>
    2a84:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    2a86:	89 2b       	or	r24, r25
    2a88:	c9 f0       	breq	.+50     	; 0x2abc <xStreamBufferSendFromISR+0x72>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	0e 94 98 12 	call	0x2530	; 0x2530 <prvBytesInBuffer>
    2a90:	2e 81       	ldd	r18, Y+6	; 0x06
    2a92:	3f 81       	ldd	r19, Y+7	; 0x07
    2a94:	82 17       	cp	r24, r18
    2a96:	93 07       	cpc	r25, r19
    2a98:	88 f0       	brcs	.+34     	; 0x2abc <xStreamBufferSendFromISR+0x72>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2a9a:	88 85       	ldd	r24, Y+8	; 0x08
    2a9c:	99 85       	ldd	r25, Y+9	; 0x09
    2a9e:	89 2b       	or	r24, r25
    2aa0:	69 f0       	breq	.+26     	; 0x2abc <xStreamBufferSendFromISR+0x72>
    2aa2:	88 85       	ldd	r24, Y+8	; 0x08
    2aa4:	99 85       	ldd	r25, Y+9	; 0x09
    2aa6:	f1 2c       	mov	r15, r1
    2aa8:	e1 2c       	mov	r14, r1
    2aaa:	00 e0       	ldi	r16, 0x00	; 0
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	a9 01       	movw	r20, r18
    2ab2:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ab4:	0e 94 19 20 	call	0x4032	; 0x4032 <xTaskGenericNotifyFromISR>
    2ab8:	19 86       	std	Y+9, r1	; 0x09
    2aba:	18 86       	std	Y+8, r1	; 0x08

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
    traceRETURN_xStreamBufferSendFromISR( xReturn );

    return xReturn;
}
    2abc:	c5 01       	movw	r24, r10
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	ff 90       	pop	r15
    2ac8:	ef 90       	pop	r14
    2aca:	df 90       	pop	r13
    2acc:	cf 90       	pop	r12
    2ace:	bf 90       	pop	r11
    2ad0:	af 90       	pop	r10
    2ad2:	08 95       	ret

00002ad4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2ad4:	6f 92       	push	r6
    2ad6:	7f 92       	push	r7
    2ad8:	8f 92       	push	r8
    2ada:	9f 92       	push	r9
    2adc:	af 92       	push	r10
    2ade:	bf 92       	push	r11
    2ae0:	cf 92       	push	r12
    2ae2:	df 92       	push	r13
    2ae4:	ef 92       	push	r14
    2ae6:	ff 92       	push	r15
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	ec 01       	movw	r28, r24
    2af2:	4b 01       	movw	r8, r22
    2af4:	3a 01       	movw	r6, r20
    2af6:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2af8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2afa:	80 fd       	sbrc	r24, 0
    2afc:	47 c0       	rjmp	.+142    	; 0x2b8c <xStreamBufferReceive+0xb8>
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2afe:	b1 2c       	mov	r11, r1
    2b00:	a1 2c       	mov	r10, r1
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_BATCHING_BUFFER ) != ( uint8_t ) 0 )
    2b02:	82 ff       	sbrs	r24, 2
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <xStreamBufferReceive+0x36>
    {
        /* Force task to block if the batching buffer contains less bytes than
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    2b06:	ae 80       	ldd	r10, Y+6	; 0x06
    2b08:	bf 80       	ldd	r11, Y+7	; 0x07
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2b0a:	c1 14       	cp	r12, r1
    2b0c:	d1 04       	cpc	r13, r1
    2b0e:	29 f1       	breq	.+74     	; 0x2b5a <xStreamBufferReceive+0x86>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2b16:	ce 01       	movw	r24, r28
    2b18:	0e 94 98 12 	call	0x2530	; 0x2530 <prvBytesInBuffer>
    2b1c:	8c 01       	movw	r16, r24
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. If this function was invoked by a stream batch buffer read
             * then xBytesToStoreMessageLength will be xTriggerLevelBytes value
             * for the buffer.*/
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2b1e:	a8 16       	cp	r10, r24
    2b20:	b9 06       	cpc	r11, r25
    2b22:	48 f0       	brcs	.+18     	; 0x2b36 <xStreamBufferReceive+0x62>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    2b24:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	0e 94 cd 21 	call	0x439a	; 0x439a <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2b2e:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <xTaskGetCurrentTaskHandle>
    2b32:	99 87       	std	Y+9, r25	; 0x09
    2b34:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2b36:	0f 90       	pop	r0
    2b38:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2b3a:	a0 16       	cp	r10, r16
    2b3c:	b1 06       	cpc	r11, r17
    2b3e:	50 f1       	brcs	.+84     	; 0x2b94 <xStreamBufferReceive+0xc0>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2b40:	f1 2c       	mov	r15, r1
    2b42:	e1 2c       	mov	r14, r1
    2b44:	00 e0       	ldi	r16, 0x00	; 0
    2b46:	10 e0       	ldi	r17, 0x00	; 0
    2b48:	98 01       	movw	r18, r16
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	ba 01       	movw	r22, r20
    2b50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b52:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2b56:	19 86       	std	Y+9, r1	; 0x09
    2b58:	18 86       	std	Y+8, r1	; 0x08
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	0e 94 98 12 	call	0x2530	; 0x2530 <prvBytesInBuffer>
    2b60:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2b62:	a8 16       	cp	r10, r24
    2b64:	b9 06       	cpc	r11, r25
    2b66:	b0 f0       	brcs	.+44     	; 0x2b94 <xStreamBufferReceive+0xc0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2b68:	b1 2c       	mov	r11, r1
    2b6a:	a1 2c       	mov	r10, r1
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
}
    2b6c:	c5 01       	movw	r24, r10
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	ff 90       	pop	r15
    2b78:	ef 90       	pop	r14
    2b7a:	df 90       	pop	r13
    2b7c:	cf 90       	pop	r12
    2b7e:	bf 90       	pop	r11
    2b80:	af 90       	pop	r10
    2b82:	9f 90       	pop	r9
    2b84:	8f 90       	pop	r8
    2b86:	7f 90       	pop	r7
    2b88:	6f 90       	pop	r6
    2b8a:	08 95       	ret
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	a8 2e       	mov	r10, r24
    2b90:	b1 2c       	mov	r11, r1
    2b92:	bb cf       	rjmp	.-138    	; 0x2b0a <xStreamBufferReceive+0x36>
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    2b94:	98 01       	movw	r18, r16
    2b96:	a3 01       	movw	r20, r6
    2b98:	b4 01       	movw	r22, r8
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <prvReadMessageFromBuffer>
    2ba0:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2ba2:	89 2b       	or	r24, r25
    2ba4:	09 f3       	breq	.-62     	; 0x2b68 <xStreamBufferReceive+0x94>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            prvRECEIVE_COMPLETED( xStreamBuffer );
    2ba6:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
    2baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bac:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bae:	89 2b       	or	r24, r25
    2bb0:	69 f0       	breq	.+26     	; 0x2bcc <xStreamBufferReceive+0xf8>
    2bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bb6:	f1 2c       	mov	r15, r1
    2bb8:	e1 2c       	mov	r14, r1
    2bba:	00 e0       	ldi	r16, 0x00	; 0
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	a9 01       	movw	r20, r18
    2bc2:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bc4:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <xTaskGenericNotify>
    2bc8:	1b 86       	std	Y+11, r1	; 0x0b
    2bca:	1a 86       	std	Y+10, r1	; 0x0a
    2bcc:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
    2bd0:	cd cf       	rjmp	.-102    	; 0x2b6c <xStreamBufferReceive+0x98>

00002bd2 <xStreamBufferNextMessageLengthBytes>:
}
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    2bd2:	0f 93       	push	r16
    2bd4:	1f 93       	push	r17
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <xStreamBufferNextMessageLengthBytes+0xa>
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    traceENTER_xStreamBufferNextMessageLengthBytes( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2be0:	fc 01       	movw	r30, r24
    2be2:	26 85       	ldd	r18, Z+14	; 0x0e
    2be4:	20 fd       	sbrc	r18, 0
    2be6:	09 c0       	rjmp	.+18     	; 0x2bfa <xStreamBufferNextMessageLengthBytes+0x28>
            xReturn = 0;
        }
    }
    else
    {
        xReturn = 0;
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	1f 91       	pop	r17
    2bf6:	0f 91       	pop	r16
    2bf8:	08 95       	ret
    2bfa:	8c 01       	movw	r16, r24
    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2bfc:	0e 94 98 12 	call	0x2530	; 0x2530 <prvBytesInBuffer>

        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    2c00:	03 97       	sbiw	r24, 0x03	; 3
    2c02:	90 f3       	brcs	.-28     	; 0x2be8 <xStreamBufferNextMessageLengthBytes+0x16>
        {
            /* The number of bytes available is greater than the number of bytes
             * required to hold the length of the next message, so another message
             * is available. */
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
    2c04:	f8 01       	movw	r30, r16
    2c06:	20 81       	ld	r18, Z
    2c08:	31 81       	ldd	r19, Z+1	; 0x01
    2c0a:	42 e0       	ldi	r20, 0x02	; 2
    2c0c:	50 e0       	ldi	r21, 0x00	; 0
    2c0e:	be 01       	movw	r22, r28
    2c10:	6f 5f       	subi	r22, 0xFF	; 255
    2c12:	7f 4f       	sbci	r23, 0xFF	; 255
    2c14:	c8 01       	movw	r24, r16
    2c16:	0e 94 35 13 	call	0x266a	; 0x266a <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	9a 81       	ldd	r25, Y+2	; 0x02
        xReturn = 0;
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
    2c1e:	e6 cf       	rjmp	.-52     	; 0x2bec <xStreamBufferNextMessageLengthBytes+0x1a>

00002c20 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    2c20:	af 92       	push	r10
    2c22:	bf 92       	push	r11
    2c24:	cf 92       	push	r12
    2c26:	df 92       	push	r13
    2c28:	ef 92       	push	r14
    2c2a:	ff 92       	push	r15
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	ec 01       	movw	r28, r24
    2c36:	5b 01       	movw	r10, r22
    2c38:	7a 01       	movw	r14, r20
    2c3a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2c3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2c3e:	10 e0       	ldi	r17, 0x00	; 0
    2c40:	00 e0       	ldi	r16, 0x00	; 0
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2c42:	80 ff       	sbrs	r24, 0
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <xStreamBufferReceiveFromISR+0x2a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2c46:	02 e0       	ldi	r16, 0x02	; 2
    2c48:	10 e0       	ldi	r17, 0x00	; 0
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	0e 94 98 12 	call	0x2530	; 0x2530 <prvBytesInBuffer>
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2c50:	08 17       	cp	r16, r24
    2c52:	19 07       	cpc	r17, r25
    2c54:	70 f0       	brcs	.+28     	; 0x2c72 <xStreamBufferReceiveFromISR+0x52>
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2c56:	b1 2c       	mov	r11, r1
    2c58:	a1 2c       	mov	r10, r1

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
}
    2c5a:	c5 01       	movw	r24, r10
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	ff 90       	pop	r15
    2c66:	ef 90       	pop	r14
    2c68:	df 90       	pop	r13
    2c6a:	cf 90       	pop	r12
    2c6c:	bf 90       	pop	r11
    2c6e:	af 90       	pop	r10
    2c70:	08 95       	ret
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    2c72:	9c 01       	movw	r18, r24
    2c74:	a7 01       	movw	r20, r14
    2c76:	b5 01       	movw	r22, r10
    2c78:	ce 01       	movw	r24, r28
    2c7a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <prvReadMessageFromBuffer>
    2c7e:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2c80:	89 2b       	or	r24, r25
    2c82:	49 f3       	breq	.-46     	; 0x2c56 <xStreamBufferReceiveFromISR+0x36>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2c84:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c86:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c88:	89 2b       	or	r24, r25
    2c8a:	39 f3       	breq	.-50     	; 0x2c5a <xStreamBufferReceiveFromISR+0x3a>
    2c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c90:	f1 2c       	mov	r15, r1
    2c92:	e1 2c       	mov	r14, r1
    2c94:	00 e0       	ldi	r16, 0x00	; 0
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	a9 01       	movw	r20, r18
    2c9c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c9e:	0e 94 19 20 	call	0x4032	; 0x4032 <xTaskGenericNotifyFromISR>
    2ca2:	1b 86       	std	Y+11, r1	; 0x0b
    2ca4:	1a 86       	std	Y+10, r1	; 0x0a
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
    2ca6:	d9 cf       	rjmp	.-78     	; 0x2c5a <xStreamBufferReceiveFromISR+0x3a>

00002ca8 <xStreamBufferIsEmpty>:
    traceENTER_xStreamBufferIsEmpty( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* True if no bytes are available. */
    xTail = pxStreamBuffer->xTail;
    2ca8:	fc 01       	movw	r30, r24
    2caa:	20 81       	ld	r18, Z
    2cac:	31 81       	ldd	r19, Z+1	; 0x01

    if( pxStreamBuffer->xHead == xTail )
    2cae:	42 81       	ldd	r20, Z+2	; 0x02
    2cb0:	53 81       	ldd	r21, Z+3	; 0x03
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	42 17       	cp	r20, r18
    2cb6:	53 07       	cpc	r21, r19
    2cb8:	09 f0       	breq	.+2      	; 0x2cbc <xStreamBufferIsEmpty+0x14>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsEmpty( xReturn );

    return xReturn;
}
    2cbc:	08 95       	ret

00002cbe <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2cc6:	d0 e0       	ldi	r29, 0x00	; 0
    2cc8:	c0 e0       	ldi	r28, 0x00	; 0

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2cca:	20 ff       	sbrs	r18, 0
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <xStreamBufferIsFull+0x14>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2cce:	c2 e0       	ldi	r28, 0x02	; 2
    2cd0:	d0 e0       	ldi	r29, 0x00	; 0
    {
        xBytesToStoreMessageLength = 0;
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    2cd2:	0e 94 4f 14 	call	0x289e	; 0x289e <xStreamBufferSpacesAvailable>
    2cd6:	21 e0       	ldi	r18, 0x01	; 1
    2cd8:	c8 17       	cp	r28, r24
    2cda:	d9 07       	cpc	r29, r25
    2cdc:	08 f4       	brcc	.+2      	; 0x2ce0 <xStreamBufferIsFull+0x22>
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsFull( xReturn );

    return xReturn;
}
    2ce0:	82 2f       	mov	r24, r18
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
    2ce6:	08 95       	ret

00002ce8 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
    2ce8:	cf 92       	push	r12
    2cea:	df 92       	push	r13
    2cec:	ef 92       	push	r14
    2cee:	ff 92       	push	r15
    2cf0:	0f 93       	push	r16
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	20 85       	ldd	r18, Z+8	; 0x08
    2cfa:	31 85       	ldd	r19, Z+9	; 0x09
    2cfc:	23 2b       	or	r18, r19
    2cfe:	c1 f0       	breq	.+48     	; 0x2d30 <xStreamBufferSendCompletedFromISR+0x48>
    2d00:	6b 01       	movw	r12, r22
    2d02:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    2d04:	80 85       	ldd	r24, Z+8	; 0x08
    2d06:	91 85       	ldd	r25, Z+9	; 0x09
    2d08:	f1 2c       	mov	r15, r1
    2d0a:	e1 2c       	mov	r14, r1
    2d0c:	00 e0       	ldi	r16, 0x00	; 0
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	a9 01       	movw	r20, r18
    2d14:	67 85       	ldd	r22, Z+15	; 0x0f
    2d16:	0e 94 19 20 	call	0x4032	; 0x4032 <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    2d1a:	19 86       	std	Y+9, r1	; 0x09
    2d1c:	18 86       	std	Y+8, r1	; 0x08
            xReturn = pdTRUE;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
}
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	0f 91       	pop	r16
    2d26:	ff 90       	pop	r15
    2d28:	ef 90       	pop	r14
    2d2a:	df 90       	pop	r13
    2d2c:	cf 90       	pop	r12
    2d2e:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
    2d32:	f6 cf       	rjmp	.-20     	; 0x2d20 <xStreamBufferSendCompletedFromISR+0x38>

00002d34 <xStreamBufferReceiveCompletedFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
    2d34:	cf 92       	push	r12
    2d36:	df 92       	push	r13
    2d38:	ef 92       	push	r14
    2d3a:	ff 92       	push	r15
    2d3c:	0f 93       	push	r16
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    2d42:	fc 01       	movw	r30, r24
    2d44:	22 85       	ldd	r18, Z+10	; 0x0a
    2d46:	33 85       	ldd	r19, Z+11	; 0x0b
    2d48:	23 2b       	or	r18, r19
    2d4a:	c1 f0       	breq	.+48     	; 0x2d7c <xStreamBufferReceiveCompletedFromISR+0x48>
    2d4c:	6b 01       	movw	r12, r22
    2d4e:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    2d50:	82 85       	ldd	r24, Z+10	; 0x0a
    2d52:	93 85       	ldd	r25, Z+11	; 0x0b
    2d54:	f1 2c       	mov	r15, r1
    2d56:	e1 2c       	mov	r14, r1
    2d58:	00 e0       	ldi	r16, 0x00	; 0
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	a9 01       	movw	r20, r18
    2d60:	67 85       	ldd	r22, Z+15	; 0x0f
    2d62:	0e 94 19 20 	call	0x4032	; 0x4032 <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    2d66:	1b 86       	std	Y+11, r1	; 0x0b
    2d68:	1a 86       	std	Y+10, r1	; 0x0a
            xReturn = pdTRUE;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
}
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	df 90       	pop	r13
    2d78:	cf 90       	pop	r12
    2d7a:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
    2d7e:	f6 cf       	rjmp	.-20     	; 0x2d6c <xStreamBufferReceiveCompletedFromISR+0x38>

00002d80 <uxStreamBufferGetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer );

    traceRETURN_uxStreamBufferGetStreamBufferNotificationIndex( pxStreamBuffer->uxNotificationIndex );

    return pxStreamBuffer->uxNotificationIndex;
}
    2d80:	fc 01       	movw	r30, r24
    2d82:	87 85       	ldd	r24, Z+15	; 0x0f
    2d84:	08 95       	ret

00002d86 <vStreamBufferSetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );

    /* Check that the task notification index is valid. */
    configASSERT( uxNotificationIndex < configTASK_NOTIFICATION_ARRAY_ENTRIES );

    pxStreamBuffer->uxNotificationIndex = uxNotificationIndex;
    2d86:	fc 01       	movw	r30, r24
    2d88:	67 87       	std	Z+15, r22	; 0x0f

    traceRETURN_vStreamBufferSetStreamBufferNotificationIndex();
}
    2d8a:	08 95       	ret

00002d8c <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2d8c:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <pxDelayedTaskList>
    2d90:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <pxDelayedTaskList+0x1>
    2d94:	80 81       	ld	r24, Z
    2d96:	81 11       	cpse	r24, r1
    2d98:	07 c0       	rjmp	.+14     	; 0x2da8 <prvResetNextTaskUnblockTime+0x1c>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
    2d9a:	8f ef       	ldi	r24, 0xFF	; 255
    2d9c:	9f ef       	ldi	r25, 0xFF	; 255
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    2d9e:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <xNextTaskUnblockTime+0x1>
    2da2:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <xNextTaskUnblockTime>
    }
}
    2da6:	08 95       	ret
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    2da8:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <pxDelayedTaskList>
    2dac:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <pxDelayedTaskList+0x1>
    2db0:	05 80       	ldd	r0, Z+5	; 0x05
    2db2:	f6 81       	ldd	r31, Z+6	; 0x06
    2db4:	e0 2d       	mov	r30, r0
    2db6:	80 81       	ld	r24, Z
    2db8:	91 81       	ldd	r25, Z+1	; 0x01
    2dba:	f1 cf       	rjmp	.-30     	; 0x2d9e <prvResetNextTaskUnblockTime+0x12>

00002dbc <prvAddCurrentTaskToDelayedList.isra.2>:
    }

#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
    2dbc:	cf 92       	push	r12
    2dbe:	df 92       	push	r13
    2dc0:	ef 92       	push	r14
    2dc2:	ff 92       	push	r15
    2dc4:	0f 93       	push	r16
    2dc6:	1f 93       	push	r17
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	ec 01       	movw	r28, r24
                                            const BaseType_t xCanBlockIndefinitely )
{
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    2dce:	c0 90 74 07 	lds	r12, 0x0774	; 0x800774 <xTickCount>
    2dd2:	d0 90 75 07 	lds	r13, 0x0775	; 0x800775 <xTickCount+0x1>
    List_t * const pxDelayedList = pxDelayedTaskList;
    2dd6:	00 91 8c 07 	lds	r16, 0x078C	; 0x80078c <pxDelayedTaskList>
    2dda:	10 91 8d 07 	lds	r17, 0x078D	; 0x80078d <pxDelayedTaskList+0x1>
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
    2dde:	e0 90 8a 07 	lds	r14, 0x078A	; 0x80078a <pxOverflowDelayedTaskList>
    2de2:	f0 90 8b 07 	lds	r15, 0x078B	; 0x80078b <pxOverflowDelayedTaskList+0x1>
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2de6:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    2dea:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    2dee:	02 96       	adiw	r24, 0x02	; 2
    2df0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
    2df4:	cc 0d       	add	r28, r12
    2df6:	dd 1d       	adc	r29, r13

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2df8:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    2dfc:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    2e00:	d3 83       	std	Z+3, r29	; 0x03
    2e02:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2e04:	60 91 c4 07 	lds	r22, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    2e08:	70 91 c5 07 	lds	r23, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    2e0c:	6e 5f       	subi	r22, 0xFE	; 254
    2e0e:	7f 4f       	sbci	r23, 0xFF	; 255
        xTimeToWake = xConstTickCount + xTicksToWait;

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );

        if( xTimeToWake < xConstTickCount )
    2e10:	cc 15       	cp	r28, r12
    2e12:	dd 05       	cpc	r29, r13
    2e14:	58 f4       	brcc	.+22     	; 0x2e2c <prvAddCurrentTaskToDelayedList.isra.2+0x70>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2e16:	c7 01       	movw	r24, r14

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	ff 90       	pop	r15
    2e22:	ef 90       	pop	r14
    2e24:	df 90       	pop	r13
    2e26:	cf 90       	pop	r12

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2e28:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <vListInsert>
        }
        else
        {
            traceMOVED_TASK_TO_DELAYED_LIST();
            /* The wake time has not overflowed, so the current block list is used. */
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2e2c:	c8 01       	movw	r24, r16
    2e2e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <vListInsert>

            /* If the task entering the blocked state was placed at the head of the
             * list of blocked tasks then xNextTaskUnblockTime needs to be updated
             * too. */
            if( xTimeToWake < xNextTaskUnblockTime )
    2e32:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <xNextTaskUnblockTime>
    2e36:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <xNextTaskUnblockTime+0x1>
    2e3a:	c8 17       	cp	r28, r24
    2e3c:	d9 07       	cpc	r29, r25
    2e3e:	20 f4       	brcc	.+8      	; 0x2e48 <prvAddCurrentTaskToDelayedList.isra.2+0x8c>
            {
                xNextTaskUnblockTime = xTimeToWake;
    2e40:	d0 93 6c 07 	sts	0x076C, r29	; 0x80076c <xNextTaskUnblockTime+0x1>
    2e44:	c0 93 6b 07 	sts	0x076B, r28	; 0x80076b <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	ff 90       	pop	r15
    2e52:	ef 90       	pop	r14
    2e54:	df 90       	pop	r13
    2e56:	cf 90       	pop	r12
    2e58:	08 95       	ret

00002e5a <prvCheckTasksWaitingTermination>:
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2e5e:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <uxDeletedTasksWaitingCleanUp>
    2e62:	81 11       	cpse	r24, r1
    2e64:	03 c0       	rjmp	.+6      	; 0x2e6c <prvCheckTasksWaitingTermination+0x12>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	0f 92       	push	r0
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2e72:	e0 91 7d 07 	lds	r30, 0x077D	; 0x80077d <xTasksWaitingTermination+0x5>
    2e76:	f0 91 7e 07 	lds	r31, 0x077E	; 0x80077e <xTasksWaitingTermination+0x6>
    2e7a:	c6 81       	ldd	r28, Z+6	; 0x06
    2e7c:	d7 81       	ldd	r29, Z+7	; 0x07
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2e7e:	ce 01       	movw	r24, r28
    2e80:	02 96       	adiw	r24, 0x02	; 2
    2e82:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>
                        --uxCurrentNumberOfTasks;
    2e86:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <uxCurrentNumberOfTasks>
    2e8a:	81 50       	subi	r24, 0x01	; 1
    2e8c:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <uxCurrentNumberOfTasks>
                        --uxDeletedTasksWaitingCleanUp;
    2e90:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <uxDeletedTasksWaitingCleanUp>
    2e94:	81 50       	subi	r24, 0x01	; 1
    2e96:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <uxDeletedTasksWaitingCleanUp>
                    }
                }
                taskEXIT_CRITICAL();
    2e9a:	0f 90       	pop	r0
    2e9c:	0f be       	out	0x3f, r0	; 63

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    2e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vPortFree>
            vPortFree( pxTCB );
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vPortFree>
    2eac:	d8 cf       	rjmp	.-80     	; 0x2e5e <prvCheckTasksWaitingTermination+0x4>

00002eae <prvIdleTask>:

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
    2eae:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
    2eb2:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <pxReadyTasksLists>
    2eb6:	82 30       	cpi	r24, 0x02	; 2
    2eb8:	d0 f3       	brcs	.-12     	; 0x2eae <prvIdleTask>
            {
                taskYIELD();
    2eba:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
    2ebe:	f7 cf       	rjmp	.-18     	; 0x2eae <prvIdleTask>

00002ec0 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
    2ec0:	4f 92       	push	r4
    2ec2:	5f 92       	push	r5
    2ec4:	6f 92       	push	r6
    2ec6:	7f 92       	push	r7
    2ec8:	8f 92       	push	r8
    2eca:	9f 92       	push	r9
    2ecc:	af 92       	push	r10
    2ece:	bf 92       	push	r11
    2ed0:	cf 92       	push	r12
    2ed2:	df 92       	push	r13
    2ed4:	ef 92       	push	r14
    2ed6:	ff 92       	push	r15
    2ed8:	0f 93       	push	r16
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	4c 01       	movw	r8, r24
    2ee0:	5b 01       	movw	r10, r22
    2ee2:	29 01       	movw	r4, r18

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
    2ee4:	c4 2e       	mov	r12, r20
    2ee6:	d1 2c       	mov	r13, r1
    2ee8:	c6 01       	movw	r24, r12
    2eea:	0e 94 3e 0b 	call	0x167c	; 0x167c <pvPortMalloc>
    2eee:	3c 01       	movw	r6, r24

            if( pxStack != NULL )
    2ef0:	89 2b       	or	r24, r25
    2ef2:	09 f4       	brne	.+2      	; 0x2ef6 <xTaskCreate+0x36>
    2ef4:	c9 c0       	rjmp	.+402    	; 0x3088 <xTaskCreate+0x1c8>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    2ef6:	86 e2       	ldi	r24, 0x26	; 38
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	0e 94 3e 0b 	call	0x167c	; 0x167c <pvPortMalloc>
    2efe:	ec 01       	movw	r28, r24

                if( pxNewTCB != NULL )
    2f00:	89 2b       	or	r24, r25
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <xTaskCreate+0x46>
    2f04:	be c0       	rjmp	.+380    	; 0x3082 <xTaskCreate+0x1c2>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
    2f06:	86 e2       	ldi	r24, 0x26	; 38
    2f08:	de 01       	movw	r26, r28
    2f0a:	1d 92       	st	X+, r1
    2f0c:	8a 95       	dec	r24
    2f0e:	e9 f7       	brne	.-6      	; 0x2f0a <xTaskCreate+0x4a>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
    2f10:	78 8e       	std	Y+24, r7	; 0x18
    2f12:	6f 8a       	std	Y+23, r6	; 0x17
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
    2f14:	b1 e0       	ldi	r27, 0x01	; 1
    2f16:	cb 1a       	sub	r12, r27
    2f18:	d1 08       	sbc	r13, r1
    2f1a:	c6 0c       	add	r12, r6
    2f1c:	d7 1c       	adc	r13, r7
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    2f1e:	a1 14       	cp	r10, r1
    2f20:	b1 04       	cpc	r11, r1
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <xTaskCreate+0x66>
    2f24:	c2 c0       	rjmp	.+388    	; 0x30aa <xTaskCreate+0x1ea>
    2f26:	04 30       	cpi	r16, 0x04	; 4
    2f28:	08 f0       	brcs	.+2      	; 0x2f2c <xTaskCreate+0x6c>
    2f2a:	03 e0       	ldi	r16, 0x03	; 3
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
    2f2c:	0e 8b       	std	Y+22, r16	; 0x16
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2f2e:	5e 01       	movw	r10, r28
    2f30:	b2 e0       	ldi	r27, 0x02	; 2
    2f32:	ab 0e       	add	r10, r27
    2f34:	b1 1c       	adc	r11, r1
    2f36:	c5 01       	movw	r24, r10
    2f38:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	0c 96       	adiw	r24, 0x0c	; 12
    2f40:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2f44:	d9 87       	std	Y+9, r29	; 0x09
    2f46:	c8 87       	std	Y+8, r28	; 0x08

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
    2f48:	84 e0       	ldi	r24, 0x04	; 4
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	80 1b       	sub	r24, r16
    2f4e:	91 09       	sbc	r25, r1
    2f50:	9d 87       	std	Y+13, r25	; 0x0d
    2f52:	8c 87       	std	Y+12, r24	; 0x0c
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2f54:	db 8b       	std	Y+19, r29	; 0x13
    2f56:	ca 8b       	std	Y+18, r28	; 0x12
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2f58:	a2 01       	movw	r20, r4
    2f5a:	b4 01       	movw	r22, r8
    2f5c:	c6 01       	movw	r24, r12
    2f5e:	0e 94 15 0c 	call	0x182a	; 0x182a <pxPortInitialiseStack>
    2f62:	99 83       	std	Y+1, r25	; 0x01
    2f64:	88 83       	st	Y, r24
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
    2f66:	e1 14       	cp	r14, r1
    2f68:	f1 04       	cpc	r15, r1
    2f6a:	19 f0       	breq	.+6      	; 0x2f72 <xTaskCreate+0xb2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2f6c:	f7 01       	movw	r30, r14
    2f6e:	d1 83       	std	Z+1, r29	; 0x01
    2f70:	c0 83       	st	Z, r28

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	0f 92       	push	r0
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
    2f78:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <uxCurrentNumberOfTasks>
    2f7c:	8f 5f       	subi	r24, 0xFF	; 255
    2f7e:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <uxCurrentNumberOfTasks>

            if( pxCurrentTCB == NULL )
    2f82:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    2f86:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    2f8a:	89 2b       	or	r24, r25
    2f8c:	09 f0       	breq	.+2      	; 0x2f90 <xTaskCreate+0xd0>
    2f8e:	a3 c0       	rjmp	.+326    	; 0x30d6 <xTaskCreate+0x216>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
    2f90:	d0 93 c5 07 	sts	0x07C5, r29	; 0x8007c5 <pxCurrentTCB+0x1>
    2f94:	c0 93 c4 07 	sts	0x07C4, r28	; 0x8007c4 <pxCurrentTCB>

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2f98:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <uxCurrentNumberOfTasks>
    2f9c:	81 30       	cpi	r24, 0x01	; 1
    2f9e:	61 f5       	brne	.+88     	; 0x2ff8 <xTaskCreate+0x138>
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    2fa0:	80 ea       	ldi	r24, 0xA0	; 160
    2fa2:	97 e0       	ldi	r25, 0x07	; 7
    2fa4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
    2fa8:	89 ea       	ldi	r24, 0xA9	; 169
    2faa:	97 e0       	ldi	r25, 0x07	; 7
    2fac:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
    2fb0:	82 eb       	ldi	r24, 0xB2	; 178
    2fb2:	97 e0       	ldi	r25, 0x07	; 7
    2fb4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
    2fb8:	8b eb       	ldi	r24, 0xBB	; 187
    2fba:	97 e0       	ldi	r25, 0x07	; 7
    2fbc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
    }

    vListInitialise( &xDelayedTaskList1 );
    2fc0:	87 e9       	ldi	r24, 0x97	; 151
    2fc2:	97 e0       	ldi	r25, 0x07	; 7
    2fc4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
    2fc8:	8e e8       	ldi	r24, 0x8E	; 142
    2fca:	97 e0       	ldi	r25, 0x07	; 7
    2fcc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
    vListInitialise( &xPendingReadyList );
    2fd0:	81 e8       	ldi	r24, 0x81	; 129
    2fd2:	97 e0       	ldi	r25, 0x07	; 7
    2fd4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
    2fd8:	88 e7       	ldi	r24, 0x78	; 120
    2fda:	97 e0       	ldi	r25, 0x07	; 7
    2fdc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
    2fe0:	87 e9       	ldi	r24, 0x97	; 151
    2fe2:	97 e0       	ldi	r25, 0x07	; 7
    2fe4:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <pxDelayedTaskList+0x1>
    2fe8:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <pxDelayedTaskList>
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2fec:	8e e8       	ldi	r24, 0x8E	; 142
    2fee:	97 e0       	ldi	r25, 0x07	; 7
    2ff0:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <pxOverflowDelayedTaskList+0x1>
    2ff4:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <pxOverflowDelayedTaskList>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
    2ff8:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <uxTaskNumber>
    2ffc:	8f 5f       	subi	r24, 0xFF	; 255
    2ffe:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <uxTaskNumber>
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
    3002:	ae 89       	ldd	r26, Y+22	; 0x16
    3004:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxTopReadyPriority>
    3008:	8a 17       	cp	r24, r26
    300a:	10 f4       	brcc	.+4      	; 0x3010 <xTaskCreate+0x150>
    300c:	a0 93 73 07 	sts	0x0773, r26	; 0x800773 <uxTopReadyPriority>
    3010:	29 e0       	ldi	r18, 0x09	; 9
    3012:	2a 9f       	mul	r18, r26
    3014:	d0 01       	movw	r26, r0
    3016:	11 24       	eor	r1, r1
    3018:	a0 56       	subi	r26, 0x60	; 96
    301a:	b8 4f       	sbci	r27, 0xF8	; 248
    301c:	11 96       	adiw	r26, 0x01	; 1
    301e:	0d 90       	ld	r0, X+
    3020:	bc 91       	ld	r27, X
    3022:	a0 2d       	mov	r26, r0
    3024:	bd 83       	std	Y+5, r27	; 0x05
    3026:	ac 83       	std	Y+4, r26	; 0x04
    3028:	14 96       	adiw	r26, 0x04	; 4
    302a:	8d 91       	ld	r24, X+
    302c:	9c 91       	ld	r25, X
    302e:	15 97       	sbiw	r26, 0x05	; 5
    3030:	9f 83       	std	Y+7, r25	; 0x07
    3032:	8e 83       	std	Y+6, r24	; 0x06
    3034:	14 96       	adiw	r26, 0x04	; 4
    3036:	8d 91       	ld	r24, X+
    3038:	9c 91       	ld	r25, X
    303a:	15 97       	sbiw	r26, 0x05	; 5
    303c:	fc 01       	movw	r30, r24
    303e:	b3 82       	std	Z+3, r11	; 0x03
    3040:	a2 82       	std	Z+2, r10	; 0x02
    3042:	15 96       	adiw	r26, 0x05	; 5
    3044:	bc 92       	st	X, r11
    3046:	ae 92       	st	-X, r10
    3048:	14 97       	sbiw	r26, 0x04	; 4
    304a:	9e 89       	ldd	r25, Y+22	; 0x16
    304c:	92 9f       	mul	r25, r18
    304e:	f0 01       	movw	r30, r0
    3050:	11 24       	eor	r1, r1
    3052:	e0 56       	subi	r30, 0x60	; 96
    3054:	f8 4f       	sbci	r31, 0xF8	; 248
    3056:	fb 87       	std	Y+11, r31	; 0x0b
    3058:	ea 87       	std	Y+10, r30	; 0x0a
    305a:	80 81       	ld	r24, Z
    305c:	8f 5f       	subi	r24, 0xFF	; 255
    305e:	80 83       	st	Z, r24

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
    3060:	0f 90       	pop	r0
    3062:	0f be       	out	0x3f, r0	; 63

        if( xSchedulerRunning != pdFALSE )
    3064:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <xSchedulerRunning>
    3068:	88 23       	and	r24, r24
    306a:	49 f0       	breq	.+18     	; 0x307e <xTaskCreate+0x1be>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
    306c:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3070:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3074:	86 89       	ldd	r24, Z+22	; 0x16
    3076:	89 17       	cp	r24, r25
    3078:	10 f4       	brcc	.+4      	; 0x307e <xTaskCreate+0x1be>
    307a:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
    307e:	81 e0       	ldi	r24, 0x01	; 1
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    3080:	04 c0       	rjmp	.+8      	; 0x308a <xTaskCreate+0x1ca>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
    3082:	c3 01       	movw	r24, r6
    3084:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vPortFree>
            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3088:	8f ef       	ldi	r24, 0xFF	; 255
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    }
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	af 90       	pop	r10
    309c:	9f 90       	pop	r9
    309e:	8f 90       	pop	r8
    30a0:	7f 90       	pop	r7
    30a2:	6f 90       	pop	r6
    30a4:	5f 90       	pop	r5
    30a6:	4f 90       	pop	r4
    30a8:	08 95       	ret
    30aa:	f5 01       	movw	r30, r10
    30ac:	ae 01       	movw	r20, r28
    30ae:	47 5e       	subi	r20, 0xE7	; 231
    30b0:	5f 4f       	sbci	r21, 0xFF	; 255
    30b2:	c5 01       	movw	r24, r10
    30b4:	08 96       	adiw	r24, 0x08	; 8
    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    30b6:	21 91       	ld	r18, Z+
    30b8:	da 01       	movw	r26, r20
    30ba:	2d 93       	st	X+, r18
    30bc:	ad 01       	movw	r20, r26

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
    30be:	9f 01       	movw	r18, r30
    30c0:	21 50       	subi	r18, 0x01	; 1
    30c2:	31 09       	sbc	r19, r1
    30c4:	d9 01       	movw	r26, r18
    30c6:	2c 91       	ld	r18, X
    30c8:	22 23       	and	r18, r18
    30ca:	19 f0       	breq	.+6      	; 0x30d2 <xTaskCreate+0x212>
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    30cc:	e8 17       	cp	r30, r24
    30ce:	f9 07       	cpc	r31, r25
    30d0:	91 f7       	brne	.-28     	; 0x30b6 <xTaskCreate+0x1f6>
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
    30d2:	18 a2       	std	Y+32, r1	; 0x20
    30d4:	28 cf       	rjmp	.-432    	; 0x2f26 <xTaskCreate+0x66>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
    30d6:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <xSchedulerRunning>
    30da:	81 11       	cpse	r24, r1
    30dc:	8d cf       	rjmp	.-230    	; 0x2ff8 <xTaskCreate+0x138>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    30de:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    30e2:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    30e6:	9e 89       	ldd	r25, Y+22	; 0x16
    30e8:	86 89       	ldd	r24, Z+22	; 0x16
    30ea:	98 17       	cp	r25, r24
    30ec:	08 f4       	brcc	.+2      	; 0x30f0 <xTaskCreate+0x230>
    30ee:	84 cf       	rjmp	.-248    	; 0x2ff8 <xTaskCreate+0x138>
                    {
                        pxCurrentTCB = pxNewTCB;
    30f0:	d0 93 c5 07 	sts	0x07C5, r29	; 0x8007c5 <pxCurrentTCB+0x1>
    30f4:	c0 93 c4 07 	sts	0x07C4, r28	; 0x8007c4 <pxCurrentTCB>
    30f8:	7f cf       	rjmp	.-258    	; 0x2ff8 <xTaskCreate+0x138>

000030fa <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
    30fa:	0f 93       	push	r16
    30fc:	1f 93       	push	r17
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	ec 01       	movw	r28, r24
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	0f 92       	push	r0
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    310a:	89 2b       	or	r24, r25
    310c:	21 f4       	brne	.+8      	; 0x3116 <vTaskDelete+0x1c>
    310e:	c0 91 c4 07 	lds	r28, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3112:	d0 91 c5 07 	lds	r29, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3116:	8e 01       	movw	r16, r28
    3118:	0e 5f       	subi	r16, 0xFE	; 254
    311a:	1f 4f       	sbci	r17, 0xFF	; 255
    311c:	c8 01       	movw	r24, r16
    311e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3122:	8c 89       	ldd	r24, Y+20	; 0x14
    3124:	9d 89       	ldd	r25, Y+21	; 0x15
    3126:	89 2b       	or	r24, r25
    3128:	21 f0       	breq	.+8      	; 0x3132 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    312a:	ce 01       	movw	r24, r28
    312c:	0c 96       	adiw	r24, 0x0c	; 12
    312e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
    3132:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <uxTaskNumber>
    3136:	8f 5f       	subi	r24, 0xFF	; 255
    3138:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <uxTaskNumber>

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
    313c:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3140:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
    3144:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <xSchedulerRunning>
    3148:	22 23       	and	r18, r18
    314a:	59 f1       	breq	.+86     	; 0x31a2 <vTaskDelete+0xa8>
    314c:	8c 17       	cp	r24, r28
    314e:	9d 07       	cpc	r25, r29
    3150:	41 f5       	brne	.+80     	; 0x31a2 <vTaskDelete+0xa8>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    3152:	b8 01       	movw	r22, r16
    3154:	88 e7       	ldi	r24, 0x78	; 120
    3156:	97 e0       	ldi	r25, 0x07	; 7
    3158:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
    315c:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <uxDeletedTasksWaitingCleanUp>
    3160:	8f 5f       	subi	r24, 0xFF	; 255
    3162:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <uxDeletedTasksWaitingCleanUp>
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
    3166:	81 e0       	ldi	r24, 0x01	; 1
                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
            }
        }
        taskEXIT_CRITICAL();
    3168:	0f 90       	pop	r0
    316a:	0f be       	out	0x3f, r0	; 63

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
    316c:	81 30       	cpi	r24, 0x01	; 1
    316e:	39 f0       	breq	.+14     	; 0x317e <vTaskDelete+0x84>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    3170:	8f 89       	ldd	r24, Y+23	; 0x17
    3172:	98 8d       	ldd	r25, Y+24	; 0x18
    3174:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vPortFree>
            vPortFree( pxTCB );
    3178:	ce 01       	movw	r24, r28
    317a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vPortFree>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
    317e:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <xSchedulerRunning>
    3182:	88 23       	and	r24, r24
    3184:	49 f0       	breq	.+18     	; 0x3198 <vTaskDelete+0x9e>
            {
                if( pxTCB == pxCurrentTCB )
    3186:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    318a:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    318e:	8c 17       	cp	r24, r28
    3190:	9d 07       	cpc	r25, r29
    3192:	11 f4       	brne	.+4      	; 0x3198 <vTaskDelete+0x9e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
                    taskYIELD_WITHIN_API();
    3194:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
    31a2:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <uxCurrentNumberOfTasks>
    31a6:	81 50       	subi	r24, 0x01	; 1
    31a8:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <uxCurrentNumberOfTasks>
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
    31ac:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <prvResetNextTaskUnblockTime>
#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	da cf       	rjmp	.-76     	; 0x3168 <vTaskDelete+0x6e>

000031b4 <vTaskStartScheduler>:
}

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    31b4:	ef 92       	push	r14
    31b6:	ff 92       	push	r15
    31b8:	0f 93       	push	r16
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	28 97       	sbiw	r28, 0x08	; 8
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	a6 e2       	ldi	r26, 0x26	; 38
    31d0:	b1 e0       	ldi	r27, 0x01	; 1
    31d2:	fe 01       	movw	r30, r28
    31d4:	31 96       	adiw	r30, 0x01	; 1
    31d6:	2e e2       	ldi	r18, 0x2E	; 46
    31d8:	31 e0       	ldi	r19, 0x01	; 1
    31da:	bf 01       	movw	r22, r30
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
    31dc:	8d 91       	ld	r24, X+
    31de:	81 93       	st	Z+, r24

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
    31e0:	88 23       	and	r24, r24
    31e2:	19 f0       	breq	.+6      	; 0x31ea <vTaskStartScheduler+0x36>
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    31e4:	2a 17       	cp	r18, r26
    31e6:	3b 07       	cpc	r19, r27
    31e8:	c9 f7       	brne	.-14     	; 0x31dc <vTaskStartScheduler+0x28>
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
    31ea:	89 e6       	ldi	r24, 0x69	; 105
    31ec:	e8 2e       	mov	r14, r24
    31ee:	87 e0       	ldi	r24, 0x07	; 7
    31f0:	f8 2e       	mov	r15, r24
    31f2:	00 e0       	ldi	r16, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	45 e5       	ldi	r20, 0x55	; 85
    31fa:	87 e5       	ldi	r24, 0x57	; 87
    31fc:	97 e1       	ldi	r25, 0x17	; 23
    31fe:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <xTaskCreate>
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
    3202:	88 23       	and	r24, r24
    3204:	a9 f0       	breq	.+42     	; 0x3230 <vTaskStartScheduler+0x7c>

    xReturn = prvCreateIdleTasks();

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
    3206:	81 30       	cpi	r24, 0x01	; 1
    3208:	99 f4       	brne	.+38     	; 0x3230 <vTaskStartScheduler+0x7c>
        {
            xReturn = xTimerCreateTimerTask();
    320a:	0e 94 d7 23 	call	0x47ae	; 0x47ae <xTimerCreateTimerTask>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
    320e:	81 30       	cpi	r24, 0x01	; 1
    3210:	79 f4       	brne	.+30     	; 0x3230 <vTaskStartScheduler+0x7c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
    3212:	f8 94       	cli
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
    3214:	2f ef       	ldi	r18, 0xFF	; 255
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	30 93 6c 07 	sts	0x076C, r19	; 0x80076c <xNextTaskUnblockTime+0x1>
    321c:	20 93 6b 07 	sts	0x076B, r18	; 0x80076b <xNextTaskUnblockTime>
        xSchedulerRunning = pdTRUE;
    3220:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <xSchedulerRunning>
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    3224:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <xTickCount+0x1>
    3228:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <xTickCount>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
    322c:	0e 94 81 0c 	call	0x1902	; 0x1902 <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
    3230:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <uxTopUsedPriority>

    traceRETURN_vTaskStartScheduler();
}
    3234:	28 96       	adiw	r28, 0x08	; 8
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	f8 94       	cli
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	cd bf       	out	0x3d, r28	; 61
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	0f 91       	pop	r16
    3246:	ff 90       	pop	r15
    3248:	ef 90       	pop	r14
    324a:	08 95       	ret

0000324c <vTaskEndScheduler>:
        BaseType_t xCoreID;

        #if ( configUSE_TIMERS == 1 )
        {
            /* Delete the timer task created by the kernel. */
            vTaskDelete( xTimerGetTimerDaemonTaskHandle() );
    324c:	0e 94 87 24 	call	0x490e	; 0x490e <xTimerGetTimerDaemonTaskHandle>
    3250:	0e 94 7d 18 	call	0x30fa	; 0x30fa <vTaskDelete>
        #endif /* #if ( configUSE_TIMERS == 1 ) */

        /* Delete Idle tasks created by the kernel.*/
        for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
        {
            vTaskDelete( xIdleTaskHandles[ xCoreID ] );
    3254:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <xIdleTaskHandles>
    3258:	90 91 6a 07 	lds	r25, 0x076A	; 0x80076a <xIdleTaskHandles+0x1>
    325c:	0e 94 7d 18 	call	0x30fa	; 0x30fa <vTaskDelete>

        /* Idle task is responsible for reclaiming the resources of the tasks in
         * xTasksWaitingTermination list. Since the idle task is now deleted and
         * no longer going to run, we need to reclaim resources of all the tasks
         * in the xTasksWaitingTermination list. */
        prvCheckTasksWaitingTermination();
    3260:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <prvCheckTasksWaitingTermination>
    #endif /* #if ( INCLUDE_vTaskDelete == 1 ) */

    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    3264:	f8 94       	cli
    xSchedulerRunning = pdFALSE;
    3266:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <xSchedulerRunning>

    /* This function must be called from a task and the application is
     * responsible for deleting that task after the scheduler is stopped. */
    vPortEndScheduler();
    326a:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <vPortEndScheduler>

0000326e <vTaskSuspendAll>:
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
    326e:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxSchedulerSuspended>
    3272:	8f 5f       	subi	r24, 0xFF	; 255
    3274:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <uxSchedulerSuspended>
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
    3278:	08 95       	ret

0000327a <xTaskGetTickCount>:
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	0f 92       	push	r0
    {
        xTicks = xTickCount;
    3280:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xTickCount>
    3284:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xTickCount+0x1>
    }
    portTICK_TYPE_EXIT_CRITICAL();
    3288:	0f 90       	pop	r0
    328a:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
}
    328c:	08 95       	ret

0000328e <xTaskGetTickCountFromISR>:
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    {
        xReturn = xTickCount;
    328e:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xTickCount>
    3292:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xTickCount+0x1>
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
}
    3296:	08 95       	ret

00003298 <uxTaskGetNumberOfTasks>:

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
    3298:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <uxCurrentNumberOfTasks>
}
    329c:	08 95       	ret

0000329e <pcTaskGetName>:

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	21 f4       	brne	.+8      	; 0x32aa <pcTaskGetName+0xc>
    32a2:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    32a6:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    configASSERT( pxTCB );

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
}
    32aa:	49 96       	adiw	r24, 0x19	; 25
    32ac:	08 95       	ret

000032ae <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    32ae:	cf 92       	push	r12
    32b0:	df 92       	push	r13
    32b2:	ef 92       	push	r14
    32b4:	ff 92       	push	r15
    32b6:	0f 93       	push	r16
    32b8:	1f 93       	push	r17
    32ba:	cf 93       	push	r28
    32bc:	df 93       	push	r29

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    32be:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxSchedulerSuspended>
    32c2:	81 11       	cpse	r24, r1
    32c4:	e5 c0       	rjmp	.+458    	; 0x3490 <xTaskIncrementTick+0x1e2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    32c6:	c0 91 74 07 	lds	r28, 0x0774	; 0x800774 <xTickCount>
    32ca:	d0 91 75 07 	lds	r29, 0x0775	; 0x800775 <xTickCount+0x1>
    32ce:	6e 01       	movw	r12, r28
    32d0:	8f ef       	ldi	r24, 0xFF	; 255
    32d2:	c8 1a       	sub	r12, r24
    32d4:	d8 0a       	sbc	r13, r24

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
    32d6:	d0 92 75 07 	sts	0x0775, r13	; 0x800775 <xTickCount+0x1>
    32da:	c0 92 74 07 	sts	0x0774, r12	; 0x800774 <xTickCount>

        if( xConstTickCount == ( TickType_t ) 0U )
    32de:	c1 14       	cp	r12, r1
    32e0:	d1 04       	cpc	r13, r1
    32e2:	b9 f4       	brne	.+46     	; 0x3312 <xTaskIncrementTick+0x64>
        {
            taskSWITCH_DELAYED_LISTS();
    32e4:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <pxDelayedTaskList>
    32e8:	90 91 8d 07 	lds	r25, 0x078D	; 0x80078d <pxDelayedTaskList+0x1>
    32ec:	20 91 8a 07 	lds	r18, 0x078A	; 0x80078a <pxOverflowDelayedTaskList>
    32f0:	30 91 8b 07 	lds	r19, 0x078B	; 0x80078b <pxOverflowDelayedTaskList+0x1>
    32f4:	30 93 8d 07 	sts	0x078D, r19	; 0x80078d <pxDelayedTaskList+0x1>
    32f8:	20 93 8c 07 	sts	0x078C, r18	; 0x80078c <pxDelayedTaskList>
    32fc:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <pxOverflowDelayedTaskList+0x1>
    3300:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <pxOverflowDelayedTaskList>
    3304:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <xNumOfOverflows>
    3308:	8f 5f       	subi	r24, 0xFF	; 255
    330a:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xNumOfOverflows>
    330e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
    3312:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <xNextTaskUnblockTime>
    3316:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <xNextTaskUnblockTime+0x1>
    331a:	c8 16       	cp	r12, r24
    331c:	d9 06       	cpc	r13, r25
    331e:	e8 f4       	brcc	.+58     	; 0x335a <xTaskIncrementTick+0xac>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    3320:	80 e0       	ldi	r24, 0x00	; 0
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
    3322:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3326:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    332a:	e6 89       	ldd	r30, Z+22	; 0x16
    332c:	d9 e0       	ldi	r29, 0x09	; 9
    332e:	ed 9f       	mul	r30, r29
    3330:	f0 01       	movw	r30, r0
    3332:	11 24       	eor	r1, r1
    3334:	e0 56       	subi	r30, 0x60	; 96
    3336:	f8 4f       	sbci	r31, 0xF8	; 248
    3338:	90 81       	ld	r25, Z
    333a:	92 30       	cpi	r25, 0x02	; 2
    333c:	08 f0       	brcs	.+2      	; 0x3340 <xTaskIncrementTick+0x92>
                {
                    xSwitchRequired = pdTRUE;
    333e:	81 e0       	ldi	r24, 0x01	; 1
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
    3340:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <xYieldPendings>
    3344:	91 11       	cpse	r25, r1
                {
                    xSwitchRequired = pdTRUE;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
}
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	ff 90       	pop	r15
    3352:	ef 90       	pop	r14
    3354:	df 90       	pop	r13
    3356:	cf 90       	pop	r12
    3358:	08 95       	ret

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    335a:	80 e0       	ldi	r24, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    335c:	69 e0       	ldi	r22, 0x09	; 9
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    335e:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <pxDelayedTaskList>
    3362:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <pxDelayedTaskList+0x1>
    3366:	90 81       	ld	r25, Z
    3368:	91 11       	cpse	r25, r1
    336a:	07 c0       	rjmp	.+14     	; 0x337a <xTaskIncrementTick+0xcc>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
    336c:	2f ef       	ldi	r18, 0xFF	; 255
    336e:	3f ef       	ldi	r19, 0xFF	; 255
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
    3370:	30 93 6c 07 	sts	0x076C, r19	; 0x80076c <xNextTaskUnblockTime+0x1>
    3374:	20 93 6b 07 	sts	0x076B, r18	; 0x80076b <xNextTaskUnblockTime>
    3378:	d4 cf       	rjmp	.-88     	; 0x3322 <xTaskIncrementTick+0x74>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    337a:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <pxDelayedTaskList>
    337e:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <pxDelayedTaskList+0x1>
    3382:	05 80       	ldd	r0, Z+5	; 0x05
    3384:	f6 81       	ldd	r31, Z+6	; 0x06
    3386:	e0 2d       	mov	r30, r0
    3388:	06 80       	ldd	r0, Z+6	; 0x06
    338a:	f7 81       	ldd	r31, Z+7	; 0x07
    338c:	e0 2d       	mov	r30, r0
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    338e:	22 81       	ldd	r18, Z+2	; 0x02
    3390:	33 81       	ldd	r19, Z+3	; 0x03

                    if( xConstTickCount < xItemValue )
    3392:	c2 16       	cp	r12, r18
    3394:	d3 06       	cpc	r13, r19
    3396:	60 f3       	brcs	.-40     	; 0x3370 <xTaskIncrementTick+0xc2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    3398:	c2 85       	ldd	r28, Z+10	; 0x0a
    339a:	d3 85       	ldd	r29, Z+11	; 0x0b
    339c:	24 81       	ldd	r18, Z+4	; 0x04
    339e:	35 81       	ldd	r19, Z+5	; 0x05
    33a0:	46 81       	ldd	r20, Z+6	; 0x06
    33a2:	57 81       	ldd	r21, Z+7	; 0x07
    33a4:	d9 01       	movw	r26, r18
    33a6:	15 96       	adiw	r26, 0x05	; 5
    33a8:	5c 93       	st	X, r21
    33aa:	4e 93       	st	-X, r20
    33ac:	14 97       	sbiw	r26, 0x04	; 4
    33ae:	46 81       	ldd	r20, Z+6	; 0x06
    33b0:	57 81       	ldd	r21, Z+7	; 0x07
    33b2:	da 01       	movw	r26, r20
    33b4:	13 96       	adiw	r26, 0x03	; 3
    33b6:	3c 93       	st	X, r19
    33b8:	2e 93       	st	-X, r18
    33ba:	12 97       	sbiw	r26, 0x02	; 2
    33bc:	9f 01       	movw	r18, r30
    33be:	2e 5f       	subi	r18, 0xFE	; 254
    33c0:	3f 4f       	sbci	r19, 0xFF	; 255
    33c2:	09 81       	ldd	r16, Y+1	; 0x01
    33c4:	1a 81       	ldd	r17, Y+2	; 0x02
    33c6:	02 17       	cp	r16, r18
    33c8:	13 07       	cpc	r17, r19
    33ca:	11 f4       	brne	.+4      	; 0x33d0 <xTaskIncrementTick+0x122>
    33cc:	5a 83       	std	Y+2, r21	; 0x02
    33ce:	49 83       	std	Y+1, r20	; 0x01
    33d0:	13 86       	std	Z+11, r1	; 0x0b
    33d2:	12 86       	std	Z+10, r1	; 0x0a
    33d4:	98 81       	ld	r25, Y
    33d6:	91 50       	subi	r25, 0x01	; 1
    33d8:	98 83       	st	Y, r25

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    33da:	a4 89       	ldd	r26, Z+20	; 0x14
    33dc:	b5 89       	ldd	r27, Z+21	; 0x15
    33de:	10 97       	sbiw	r26, 0x00	; 0
    33e0:	f9 f0       	breq	.+62     	; 0x3420 <xTaskIncrementTick+0x172>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    33e2:	46 85       	ldd	r20, Z+14	; 0x0e
    33e4:	57 85       	ldd	r21, Z+15	; 0x0f
    33e6:	00 89       	ldd	r16, Z+16	; 0x10
    33e8:	11 89       	ldd	r17, Z+17	; 0x11
    33ea:	ea 01       	movw	r28, r20
    33ec:	1d 83       	std	Y+5, r17	; 0x05
    33ee:	0c 83       	std	Y+4, r16	; 0x04
    33f0:	00 89       	ldd	r16, Z+16	; 0x10
    33f2:	11 89       	ldd	r17, Z+17	; 0x11
    33f4:	e8 01       	movw	r28, r16
    33f6:	5b 83       	std	Y+3, r21	; 0x03
    33f8:	4a 83       	std	Y+2, r20	; 0x02
    33fa:	11 96       	adiw	r26, 0x01	; 1
    33fc:	ed 90       	ld	r14, X+
    33fe:	fc 90       	ld	r15, X
    3400:	12 97       	sbiw	r26, 0x02	; 2
    3402:	af 01       	movw	r20, r30
    3404:	44 5f       	subi	r20, 0xF4	; 244
    3406:	5f 4f       	sbci	r21, 0xFF	; 255
    3408:	e4 16       	cp	r14, r20
    340a:	f5 06       	cpc	r15, r21
    340c:	21 f4       	brne	.+8      	; 0x3416 <xTaskIncrementTick+0x168>
    340e:	12 96       	adiw	r26, 0x02	; 2
    3410:	1c 93       	st	X, r17
    3412:	0e 93       	st	-X, r16
    3414:	11 97       	sbiw	r26, 0x01	; 1
    3416:	15 8a       	std	Z+21, r1	; 0x15
    3418:	14 8a       	std	Z+20, r1	; 0x14
    341a:	9c 91       	ld	r25, X
    341c:	91 50       	subi	r25, 0x01	; 1
    341e:	9c 93       	st	X, r25
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    3420:	a6 89       	ldd	r26, Z+22	; 0x16
    3422:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <uxTopReadyPriority>
    3426:	9a 17       	cp	r25, r26
    3428:	10 f4       	brcc	.+4      	; 0x342e <xTaskIncrementTick+0x180>
    342a:	a0 93 73 07 	sts	0x0773, r26	; 0x800773 <uxTopReadyPriority>
    342e:	6a 9f       	mul	r22, r26
    3430:	d0 01       	movw	r26, r0
    3432:	11 24       	eor	r1, r1
    3434:	a0 56       	subi	r26, 0x60	; 96
    3436:	b8 4f       	sbci	r27, 0xF8	; 248
    3438:	11 96       	adiw	r26, 0x01	; 1
    343a:	0d 90       	ld	r0, X+
    343c:	bc 91       	ld	r27, X
    343e:	a0 2d       	mov	r26, r0
    3440:	b5 83       	std	Z+5, r27	; 0x05
    3442:	a4 83       	std	Z+4, r26	; 0x04
    3444:	14 96       	adiw	r26, 0x04	; 4
    3446:	4d 91       	ld	r20, X+
    3448:	5c 91       	ld	r21, X
    344a:	15 97       	sbiw	r26, 0x05	; 5
    344c:	57 83       	std	Z+7, r21	; 0x07
    344e:	46 83       	std	Z+6, r20	; 0x06
    3450:	14 96       	adiw	r26, 0x04	; 4
    3452:	4d 91       	ld	r20, X+
    3454:	5c 91       	ld	r21, X
    3456:	15 97       	sbiw	r26, 0x05	; 5
    3458:	ea 01       	movw	r28, r20
    345a:	3b 83       	std	Y+3, r19	; 0x03
    345c:	2a 83       	std	Y+2, r18	; 0x02
    345e:	15 96       	adiw	r26, 0x05	; 5
    3460:	3c 93       	st	X, r19
    3462:	2e 93       	st	-X, r18
    3464:	14 97       	sbiw	r26, 0x04	; 4
    3466:	26 89       	ldd	r18, Z+22	; 0x16
    3468:	26 9f       	mul	r18, r22
    346a:	d0 01       	movw	r26, r0
    346c:	11 24       	eor	r1, r1
    346e:	a0 56       	subi	r26, 0x60	; 96
    3470:	b8 4f       	sbci	r27, 0xF8	; 248
    3472:	b3 87       	std	Z+11, r27	; 0x0b
    3474:	a2 87       	std	Z+10, r26	; 0x0a
    3476:	9c 91       	ld	r25, X
    3478:	9f 5f       	subi	r25, 0xFF	; 255
    347a:	9c 93       	st	X, r25
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    347c:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3480:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3484:	96 89       	ldd	r25, Z+22	; 0x16
    3486:	92 17       	cp	r25, r18
    3488:	08 f0       	brcs	.+2      	; 0x348c <xTaskIncrementTick+0x1de>
    348a:	69 cf       	rjmp	.-302    	; 0x335e <xTaskIncrementTick+0xb0>
                            {
                                xSwitchRequired = pdTRUE;
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	67 cf       	rjmp	.-306    	; 0x335e <xTaskIncrementTick+0xb0>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
    3490:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xPendedTicks>
    3494:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <xPendedTicks+0x1>
    3498:	01 96       	adiw	r24, 0x01	; 1
    349a:	90 93 71 07 	sts	0x0771, r25	; 0x800771 <xPendedTicks+0x1>
    349e:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <xPendedTicks>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    34a2:	80 e0       	ldi	r24, 0x00	; 0
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
    34a4:	51 cf       	rjmp	.-350    	; 0x3348 <xTaskIncrementTick+0x9a>

000034a6 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    34a6:	ef 92       	push	r14
    34a8:	ff 92       	push	r15
    34aa:	0f 93       	push	r16
    34ac:	1f 93       	push	r17
    34ae:	cf 93       	push	r28
    34b0:	df 93       	push	r29
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	0f 92       	push	r0

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
    34b8:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxSchedulerSuspended>
    34bc:	81 50       	subi	r24, 0x01	; 1
    34be:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <uxSchedulerSuspended>
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    34c2:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxSchedulerSuspended>
    34c6:	88 23       	and	r24, r24
    34c8:	51 f0       	breq	.+20     	; 0x34de <xTaskResumeAll+0x38>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    BaseType_t xAlreadyYielded = pdFALSE;
    34ca:	80 e0       	ldi	r24, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    34cc:	0f 90       	pop	r0
    34ce:	0f be       	out	0x3f, r0	; 63
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
}
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	1f 91       	pop	r17
    34d6:	0f 91       	pop	r16
    34d8:	ff 90       	pop	r15
    34da:	ef 90       	pop	r14
    34dc:	08 95       	ret
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    34de:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <uxCurrentNumberOfTasks>
    34e2:	88 23       	and	r24, r24
    34e4:	91 f3       	breq	.-28     	; 0x34ca <xTaskResumeAll+0x24>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    34e6:	e0 90 86 07 	lds	r14, 0x0786	; 0x800786 <xPendingReadyList+0x5>
    34ea:	f0 90 87 07 	lds	r15, 0x0787	; 0x800787 <xPendingReadyList+0x6>
#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	e0 e0       	ldi	r30, 0x00	; 0
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
                        prvAddTaskToReadyList( pxTCB );
    34f2:	39 e0       	ldi	r19, 0x09	; 9
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    34f4:	41 e0       	ldi	r20, 0x01	; 1
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    34f6:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <xPendingReadyList>
    34fa:	81 11       	cpse	r24, r1
    34fc:	22 c0       	rjmp	.+68     	; 0x3542 <xTaskResumeAll+0x9c>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
    34fe:	ef 2b       	or	r30, r31
    3500:	11 f0       	breq	.+4      	; 0x3506 <xTaskResumeAll+0x60>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
    3502:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    3506:	c0 91 70 07 	lds	r28, 0x0770	; 0x800770 <xPendedTicks>
    350a:	d0 91 71 07 	lds	r29, 0x0771	; 0x800771 <xPendedTicks+0x1>

                        if( xPendedCounts > ( TickType_t ) 0U )
    350e:	20 97       	sbiw	r28, 0x00	; 0
    3510:	61 f0       	breq	.+24     	; 0x352a <xTaskResumeAll+0x84>
                            {
                                if( xTaskIncrementTick() != pdFALSE )
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    3512:	11 e0       	ldi	r17, 0x01	; 1

                        if( xPendedCounts > ( TickType_t ) 0U )
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
    3514:	0e 94 57 19 	call	0x32ae	; 0x32ae <xTaskIncrementTick>
    3518:	81 11       	cpse	r24, r1
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    351a:	10 93 6f 07 	sts	0x076F, r17	; 0x80076f <xYieldPendings>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
    351e:	21 97       	sbiw	r28, 0x01	; 1
                            } while( xPendedCounts > ( TickType_t ) 0U );
    3520:	c9 f7       	brne	.-14     	; 0x3514 <xTaskResumeAll+0x6e>

                            xPendedTicks = 0;
    3522:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <xPendedTicks+0x1>
    3526:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <xPendedTicks>
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
    352a:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <xYieldPendings>
    352e:	88 23       	and	r24, r24
    3530:	61 f2       	breq	.-104    	; 0x34ca <xTaskResumeAll+0x24>
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
    3532:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3536:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    353a:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	c5 cf       	rjmp	.-118    	; 0x34cc <xTaskResumeAll+0x26>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3542:	d7 01       	movw	r26, r14
    3544:	16 96       	adiw	r26, 0x06	; 6
    3546:	ed 91       	ld	r30, X+
    3548:	fc 91       	ld	r31, X
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    354a:	a4 89       	ldd	r26, Z+20	; 0x14
    354c:	b5 89       	ldd	r27, Z+21	; 0x15
    354e:	66 85       	ldd	r22, Z+14	; 0x0e
    3550:	77 85       	ldd	r23, Z+15	; 0x0f
    3552:	80 89       	ldd	r24, Z+16	; 0x10
    3554:	91 89       	ldd	r25, Z+17	; 0x11
    3556:	eb 01       	movw	r28, r22
    3558:	9d 83       	std	Y+5, r25	; 0x05
    355a:	8c 83       	std	Y+4, r24	; 0x04
    355c:	80 89       	ldd	r24, Z+16	; 0x10
    355e:	91 89       	ldd	r25, Z+17	; 0x11
    3560:	ec 01       	movw	r28, r24
    3562:	7b 83       	std	Y+3, r23	; 0x03
    3564:	6a 83       	std	Y+2, r22	; 0x02
    3566:	bf 01       	movw	r22, r30
    3568:	64 5f       	subi	r22, 0xF4	; 244
    356a:	7f 4f       	sbci	r23, 0xFF	; 255
    356c:	11 96       	adiw	r26, 0x01	; 1
    356e:	0d 91       	ld	r16, X+
    3570:	1c 91       	ld	r17, X
    3572:	12 97       	sbiw	r26, 0x02	; 2
    3574:	06 17       	cp	r16, r22
    3576:	17 07       	cpc	r17, r23
    3578:	21 f4       	brne	.+8      	; 0x3582 <xTaskResumeAll+0xdc>
    357a:	12 96       	adiw	r26, 0x02	; 2
    357c:	9c 93       	st	X, r25
    357e:	8e 93       	st	-X, r24
    3580:	11 97       	sbiw	r26, 0x01	; 1
    3582:	15 8a       	std	Z+21, r1	; 0x15
    3584:	14 8a       	std	Z+20, r1	; 0x14
    3586:	8c 91       	ld	r24, X
    3588:	81 50       	subi	r24, 0x01	; 1
    358a:	8c 93       	st	X, r24
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    358c:	a2 85       	ldd	r26, Z+10	; 0x0a
    358e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3590:	84 81       	ldd	r24, Z+4	; 0x04
    3592:	95 81       	ldd	r25, Z+5	; 0x05
    3594:	66 81       	ldd	r22, Z+6	; 0x06
    3596:	77 81       	ldd	r23, Z+7	; 0x07
    3598:	ec 01       	movw	r28, r24
    359a:	7d 83       	std	Y+5, r23	; 0x05
    359c:	6c 83       	std	Y+4, r22	; 0x04
    359e:	66 81       	ldd	r22, Z+6	; 0x06
    35a0:	77 81       	ldd	r23, Z+7	; 0x07
    35a2:	eb 01       	movw	r28, r22
    35a4:	9b 83       	std	Y+3, r25	; 0x03
    35a6:	8a 83       	std	Y+2, r24	; 0x02
    35a8:	cf 01       	movw	r24, r30
    35aa:	02 96       	adiw	r24, 0x02	; 2
    35ac:	11 96       	adiw	r26, 0x01	; 1
    35ae:	0d 91       	ld	r16, X+
    35b0:	1c 91       	ld	r17, X
    35b2:	12 97       	sbiw	r26, 0x02	; 2
    35b4:	08 17       	cp	r16, r24
    35b6:	19 07       	cpc	r17, r25
    35b8:	21 f4       	brne	.+8      	; 0x35c2 <xTaskResumeAll+0x11c>
    35ba:	12 96       	adiw	r26, 0x02	; 2
    35bc:	7c 93       	st	X, r23
    35be:	6e 93       	st	-X, r22
    35c0:	11 97       	sbiw	r26, 0x01	; 1
    35c2:	13 86       	std	Z+11, r1	; 0x0b
    35c4:	12 86       	std	Z+10, r1	; 0x0a
    35c6:	2c 91       	ld	r18, X
    35c8:	21 50       	subi	r18, 0x01	; 1
    35ca:	2c 93       	st	X, r18
                        prvAddTaskToReadyList( pxTCB );
    35cc:	a6 89       	ldd	r26, Z+22	; 0x16
    35ce:	20 91 73 07 	lds	r18, 0x0773	; 0x800773 <uxTopReadyPriority>
    35d2:	2a 17       	cp	r18, r26
    35d4:	10 f4       	brcc	.+4      	; 0x35da <xTaskResumeAll+0x134>
    35d6:	a0 93 73 07 	sts	0x0773, r26	; 0x800773 <uxTopReadyPriority>
    35da:	3a 9f       	mul	r19, r26
    35dc:	d0 01       	movw	r26, r0
    35de:	11 24       	eor	r1, r1
    35e0:	a0 56       	subi	r26, 0x60	; 96
    35e2:	b8 4f       	sbci	r27, 0xF8	; 248
    35e4:	11 96       	adiw	r26, 0x01	; 1
    35e6:	0d 90       	ld	r0, X+
    35e8:	bc 91       	ld	r27, X
    35ea:	a0 2d       	mov	r26, r0
    35ec:	b5 83       	std	Z+5, r27	; 0x05
    35ee:	a4 83       	std	Z+4, r26	; 0x04
    35f0:	14 96       	adiw	r26, 0x04	; 4
    35f2:	6d 91       	ld	r22, X+
    35f4:	7c 91       	ld	r23, X
    35f6:	15 97       	sbiw	r26, 0x05	; 5
    35f8:	77 83       	std	Z+7, r23	; 0x07
    35fa:	66 83       	std	Z+6, r22	; 0x06
    35fc:	14 96       	adiw	r26, 0x04	; 4
    35fe:	6d 91       	ld	r22, X+
    3600:	7c 91       	ld	r23, X
    3602:	15 97       	sbiw	r26, 0x05	; 5
    3604:	eb 01       	movw	r28, r22
    3606:	9b 83       	std	Y+3, r25	; 0x03
    3608:	8a 83       	std	Y+2, r24	; 0x02
    360a:	15 96       	adiw	r26, 0x05	; 5
    360c:	9c 93       	st	X, r25
    360e:	8e 93       	st	-X, r24
    3610:	14 97       	sbiw	r26, 0x04	; 4
    3612:	96 89       	ldd	r25, Z+22	; 0x16
    3614:	93 9f       	mul	r25, r19
    3616:	d0 01       	movw	r26, r0
    3618:	11 24       	eor	r1, r1
    361a:	a0 56       	subi	r26, 0x60	; 96
    361c:	b8 4f       	sbci	r27, 0xF8	; 248
    361e:	b3 87       	std	Z+11, r27	; 0x0b
    3620:	a2 87       	std	Z+10, r26	; 0x0a
    3622:	8c 91       	ld	r24, X
    3624:	8f 5f       	subi	r24, 0xFF	; 255
    3626:	8c 93       	st	X, r24

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    3628:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    362c:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3630:	56 96       	adiw	r26, 0x16	; 22
    3632:	8c 91       	ld	r24, X
    3634:	89 17       	cp	r24, r25
    3636:	08 f0       	brcs	.+2      	; 0x363a <xTaskResumeAll+0x194>
    3638:	5e cf       	rjmp	.-324    	; 0x34f6 <xTaskResumeAll+0x50>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    363a:	40 93 6f 07 	sts	0x076F, r20	; 0x80076f <xYieldPendings>
    363e:	5b cf       	rjmp	.-330    	; 0x34f6 <xTaskResumeAll+0x50>

00003640 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
    3640:	0f 93       	push	r16
    3642:	1f 93       	push	r17
    3644:	cf 93       	push	r28
    3646:	df 93       	push	r29
    3648:	ec 01       	movw	r28, r24
    364a:	8b 01       	movw	r16, r22
        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
        configASSERT( ( xTimeIncrement > 0U ) );

        vTaskSuspendAll();
    364c:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
    3650:	20 91 74 07 	lds	r18, 0x0774	; 0x800774 <xTickCount>
    3654:	30 91 75 07 	lds	r19, 0x0775	; 0x800775 <xTickCount+0x1>

            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3658:	48 81       	ld	r20, Y
    365a:	59 81       	ldd	r21, Y+1	; 0x01
    365c:	ca 01       	movw	r24, r20
    365e:	80 0f       	add	r24, r16
    3660:	91 1f       	adc	r25, r17
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
    3662:	99 83       	std	Y+1, r25	; 0x01
    3664:	88 83       	st	Y, r24
            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

            if( xConstTickCount < *pxPreviousWakeTime )
    3666:	24 17       	cp	r18, r20
    3668:	35 07       	cpc	r19, r21
    366a:	80 f4       	brcc	.+32     	; 0x368c <xTaskDelayUntil+0x4c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    366c:	84 17       	cp	r24, r20
    366e:	95 07       	cpc	r25, r21
    3670:	80 f0       	brcs	.+32     	; 0x3692 <xTaskDelayUntil+0x52>

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    3672:	c0 e0       	ldi	r28, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3674:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    3678:	81 11       	cpse	r24, r1
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <xTaskDelayUntil+0x40>
        {
            taskYIELD_WITHIN_API();
    367c:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );

        return xShouldDelay;
    }
    3680:	8c 2f       	mov	r24, r28
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	1f 91       	pop	r17
    3688:	0f 91       	pop	r16
    368a:	08 95       	ret
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    368c:	84 17       	cp	r24, r20
    368e:	95 07       	cpc	r25, r21
    3690:	18 f0       	brcs	.+6      	; 0x3698 <xTaskDelayUntil+0x58>
    3692:	28 17       	cp	r18, r24
    3694:	39 07       	cpc	r19, r25
    3696:	68 f7       	brcc	.-38     	; 0x3672 <xTaskDelayUntil+0x32>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    3698:	82 1b       	sub	r24, r18
    369a:	93 0b       	sbc	r25, r19
    369c:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <prvAddCurrentTaskToDelayedList.isra.2>
    36a0:	c1 e0       	ldi	r28, 0x01	; 1
    36a2:	e8 cf       	rjmp	.-48     	; 0x3674 <xTaskDelayUntil+0x34>

000036a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
    36a4:	cf 93       	push	r28
    36a6:	df 93       	push	r29
    36a8:	ec 01       	movw	r28, r24
        BaseType_t xAlreadyYielded = pdFALSE;

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
    36aa:	89 2b       	or	r24, r25
    36ac:	29 f4       	brne	.+10     	; 0x36b8 <vTaskDelay+0x14>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
        {
            taskYIELD_WITHIN_API();
    36ae:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
    36b2:	df 91       	pop	r29
    36b4:	cf 91       	pop	r28
    36b6:	08 95       	ret
        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
        {
            vTaskSuspendAll();
    36b8:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    36bc:	ce 01       	movw	r24, r28
    36be:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <prvAddCurrentTaskToDelayedList.isra.2>
            }
            xAlreadyYielded = xTaskResumeAll();
    36c2:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    36c6:	88 23       	and	r24, r24
    36c8:	91 f3       	breq	.-28     	; 0x36ae <vTaskDelay+0xa>
    36ca:	f3 cf       	rjmp	.-26     	; 0x36b2 <vTaskDelay+0xe>

000036cc <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	ec 01       	movw	r28, r24
     * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
    configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );

    /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
    vTaskSuspendAll();
    36d2:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>

    /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
    taskENTER_CRITICAL();
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	0f 92       	push	r0
    {
        xPendedTicks += xTicksToCatchUp;
    36dc:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xPendedTicks>
    36e0:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <xPendedTicks+0x1>
    36e4:	8c 0f       	add	r24, r28
    36e6:	9d 1f       	adc	r25, r29
    36e8:	90 93 71 07 	sts	0x0771, r25	; 0x800771 <xPendedTicks+0x1>
    36ec:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <xPendedTicks>
    }
    taskEXIT_CRITICAL();
    36f0:	0f 90       	pop	r0
    36f2:	0f be       	out	0x3f, r0	; 63
    xYieldOccurred = xTaskResumeAll();

    traceRETURN_xTaskCatchUpTicks( xYieldOccurred );

    return xYieldOccurred;
}
    36f4:	df 91       	pop	r29
    36f6:	cf 91       	pop	r28
    taskENTER_CRITICAL();
    {
        xPendedTicks += xTicksToCatchUp;
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();
    36f8:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <xTaskResumeAll>

000036fc <vTaskSwitchContext>:
#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
    36fc:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxSchedulerSuspended>
    3700:	88 23       	and	r24, r24
    3702:	21 f0       	breq	.+8      	; 0x370c <vTaskSwitchContext+0x10>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <xYieldPendings>
    370a:	08 95       	ret
        }
        else
        {
            xYieldPendings[ 0 ] = pdFALSE;
    370c:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <xYieldPendings>
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    3710:	20 91 73 07 	lds	r18, 0x0773	; 0x800773 <uxTopReadyPriority>
    3714:	89 e0       	ldi	r24, 0x09	; 9
    3716:	42 2f       	mov	r20, r18
    3718:	50 e0       	ldi	r21, 0x00	; 0
    371a:	84 9f       	mul	r24, r20
    371c:	f0 01       	movw	r30, r0
    371e:	85 9f       	mul	r24, r21
    3720:	f0 0d       	add	r31, r0
    3722:	11 24       	eor	r1, r1
    3724:	e0 56       	subi	r30, 0x60	; 96
    3726:	f8 4f       	sbci	r31, 0xF8	; 248
    3728:	90 81       	ld	r25, Z
    372a:	99 23       	and	r25, r25
    372c:	59 f1       	breq	.+86     	; 0x3784 <vTaskSwitchContext+0x88>
    372e:	a1 81       	ldd	r26, Z+1	; 0x01
    3730:	b2 81       	ldd	r27, Z+2	; 0x02
    3732:	12 96       	adiw	r26, 0x02	; 2
    3734:	6d 91       	ld	r22, X+
    3736:	7c 91       	ld	r23, X
    3738:	72 83       	std	Z+2, r23	; 0x02
    373a:	61 83       	std	Z+1, r22	; 0x01
    373c:	28 9f       	mul	r18, r24
    373e:	c0 01       	movw	r24, r0
    3740:	11 24       	eor	r1, r1
    3742:	8d 55       	subi	r24, 0x5D	; 93
    3744:	98 4f       	sbci	r25, 0xF8	; 248
    3746:	68 17       	cp	r22, r24
    3748:	79 07       	cpc	r23, r25
    374a:	21 f4       	brne	.+8      	; 0x3754 <vTaskSwitchContext+0x58>
    374c:	85 81       	ldd	r24, Z+5	; 0x05
    374e:	96 81       	ldd	r25, Z+6	; 0x06
    3750:	92 83       	std	Z+2, r25	; 0x02
    3752:	81 83       	std	Z+1, r24	; 0x01
    3754:	89 e0       	ldi	r24, 0x09	; 9
    3756:	84 9f       	mul	r24, r20
    3758:	f0 01       	movw	r30, r0
    375a:	85 9f       	mul	r24, r21
    375c:	f0 0d       	add	r31, r0
    375e:	11 24       	eor	r1, r1
    3760:	e0 56       	subi	r30, 0x60	; 96
    3762:	f8 4f       	sbci	r31, 0xF8	; 248
    3764:	01 80       	ldd	r0, Z+1	; 0x01
    3766:	f2 81       	ldd	r31, Z+2	; 0x02
    3768:	e0 2d       	mov	r30, r0
    376a:	86 81       	ldd	r24, Z+6	; 0x06
    376c:	97 81       	ldd	r25, Z+7	; 0x07
    376e:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <pxCurrentTCB+0x1>
    3772:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <pxCurrentTCB>
    3776:	20 93 73 07 	sts	0x0773, r18	; 0x800773 <uxTopReadyPriority>
            traceTASK_SWITCHED_IN();

            /* Macro to inject port specific behaviour immediately after
             * switching tasks, such as setting an end of stack watchpoint
             * or reconfiguring the MPU. */
            portTASK_SWITCH_HOOK( pxCurrentTCB );
    377a:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    377e:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
    3782:	08 95       	ret
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    3784:	21 50       	subi	r18, 0x01	; 1
    3786:	c7 cf       	rjmp	.-114    	; 0x3716 <vTaskSwitchContext+0x1a>

00003788 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	eb 01       	movw	r28, r22
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    378e:	60 91 c4 07 	lds	r22, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3792:	70 91 c5 07 	lds	r23, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3796:	64 5f       	subi	r22, 0xF4	; 244
    3798:	7f 4f       	sbci	r23, 0xFF	; 255
    379a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    379e:	ce 01       	movw	r24, r28

    traceRETURN_vTaskPlaceOnEventList();
}
    37a0:	df 91       	pop	r29
    37a2:	cf 91       	pop	r28
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    37a4:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <prvAddCurrentTaskToDelayedList.isra.2>

000037a8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	fc 01       	movw	r30, r24
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    37ae:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    37b2:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    37b6:	70 68       	ori	r23, 0x80	; 128
    37b8:	1d 96       	adiw	r26, 0x0d	; 13
    37ba:	7c 93       	st	X, r23
    37bc:	6e 93       	st	-X, r22
    37be:	1c 97       	sbiw	r26, 0x0c	; 12
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    37c0:	a1 81       	ldd	r26, Z+1	; 0x01
    37c2:	b2 81       	ldd	r27, Z+2	; 0x02
    37c4:	c0 91 c4 07 	lds	r28, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    37c8:	d0 91 c5 07 	lds	r29, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    37cc:	bf 87       	std	Y+15, r27	; 0x0f
    37ce:	ae 87       	std	Y+14, r26	; 0x0e
    37d0:	c0 91 c4 07 	lds	r28, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    37d4:	d0 91 c5 07 	lds	r29, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    37d8:	14 96       	adiw	r26, 0x04	; 4
    37da:	8d 91       	ld	r24, X+
    37dc:	9c 91       	ld	r25, X
    37de:	15 97       	sbiw	r26, 0x05	; 5
    37e0:	99 8b       	std	Y+17, r25	; 0x11
    37e2:	88 8b       	std	Y+16, r24	; 0x10
    37e4:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    37e8:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    37ec:	14 96       	adiw	r26, 0x04	; 4
    37ee:	cd 91       	ld	r28, X+
    37f0:	dc 91       	ld	r29, X
    37f2:	15 97       	sbiw	r26, 0x05	; 5
    37f4:	24 5f       	subi	r18, 0xF4	; 244
    37f6:	3f 4f       	sbci	r19, 0xFF	; 255
    37f8:	3b 83       	std	Y+3, r19	; 0x03
    37fa:	2a 83       	std	Y+2, r18	; 0x02
    37fc:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3800:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3804:	24 5f       	subi	r18, 0xF4	; 244
    3806:	3f 4f       	sbci	r19, 0xFF	; 255
    3808:	15 96       	adiw	r26, 0x05	; 5
    380a:	3c 93       	st	X, r19
    380c:	2e 93       	st	-X, r18
    380e:	14 97       	sbiw	r26, 0x04	; 4
    3810:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3814:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3818:	55 96       	adiw	r26, 0x15	; 21
    381a:	fc 93       	st	X, r31
    381c:	ee 93       	st	-X, r30
    381e:	54 97       	sbiw	r26, 0x14	; 20
    3820:	90 81       	ld	r25, Z
    3822:	9f 5f       	subi	r25, 0xFF	; 255
    3824:	90 83       	st	Z, r25

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3826:	ca 01       	movw	r24, r20

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    382c:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <prvAddCurrentTaskToDelayedList.isra.2>

00003830 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
    3830:	cf 93       	push	r28
    3832:	df 93       	push	r29
    3834:	fc 01       	movw	r30, r24

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3836:	a1 81       	ldd	r26, Z+1	; 0x01
    3838:	b2 81       	ldd	r27, Z+2	; 0x02
    383a:	c0 91 c4 07 	lds	r28, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    383e:	d0 91 c5 07 	lds	r29, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3842:	bf 87       	std	Y+15, r27	; 0x0f
    3844:	ae 87       	std	Y+14, r26	; 0x0e
    3846:	c0 91 c4 07 	lds	r28, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    384a:	d0 91 c5 07 	lds	r29, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    384e:	14 96       	adiw	r26, 0x04	; 4
    3850:	8d 91       	ld	r24, X+
    3852:	9c 91       	ld	r25, X
    3854:	15 97       	sbiw	r26, 0x05	; 5
    3856:	99 8b       	std	Y+17, r25	; 0x11
    3858:	88 8b       	std	Y+16, r24	; 0x10
    385a:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    385e:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3862:	14 96       	adiw	r26, 0x04	; 4
    3864:	cd 91       	ld	r28, X+
    3866:	dc 91       	ld	r29, X
    3868:	15 97       	sbiw	r26, 0x05	; 5
    386a:	24 5f       	subi	r18, 0xF4	; 244
    386c:	3f 4f       	sbci	r19, 0xFF	; 255
    386e:	3b 83       	std	Y+3, r19	; 0x03
    3870:	2a 83       	std	Y+2, r18	; 0x02
    3872:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3876:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    387a:	24 5f       	subi	r18, 0xF4	; 244
    387c:	3f 4f       	sbci	r19, 0xFF	; 255
    387e:	15 96       	adiw	r26, 0x05	; 5
    3880:	3c 93       	st	X, r19
    3882:	2e 93       	st	-X, r18
    3884:	14 97       	sbiw	r26, 0x04	; 4
    3886:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    388a:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    388e:	55 96       	adiw	r26, 0x15	; 21
    3890:	fc 93       	st	X, r31
    3892:	ee 93       	st	-X, r30
    3894:	54 97       	sbiw	r26, 0x14	; 20
    3896:	90 81       	ld	r25, Z
    3898:	9f 5f       	subi	r25, 0xFF	; 255
    389a:	90 83       	st	Z, r25

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
    389c:	44 23       	and	r20, r20
    389e:	11 f0       	breq	.+4      	; 0x38a4 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
    38a0:	6f ef       	ldi	r22, 0xFF	; 255
    38a2:	7f ef       	ldi	r23, 0xFF	; 255
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    38a4:	cb 01       	movw	r24, r22

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
    38a6:	df 91       	pop	r29
    38a8:	cf 91       	pop	r28
        {
            xTicksToWait = portMAX_DELAY;
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    38aa:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <prvAddCurrentTaskToDelayedList.isra.2>

000038ae <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    38b2:	dc 01       	movw	r26, r24
    38b4:	15 96       	adiw	r26, 0x05	; 5
    38b6:	ed 91       	ld	r30, X+
    38b8:	fc 91       	ld	r31, X
    38ba:	06 80       	ldd	r0, Z+6	; 0x06
    38bc:	f7 81       	ldd	r31, Z+7	; 0x07
    38be:	e0 2d       	mov	r30, r0
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    38c0:	a4 89       	ldd	r26, Z+20	; 0x14
    38c2:	b5 89       	ldd	r27, Z+21	; 0x15
    38c4:	86 85       	ldd	r24, Z+14	; 0x0e
    38c6:	97 85       	ldd	r25, Z+15	; 0x0f
    38c8:	20 89       	ldd	r18, Z+16	; 0x10
    38ca:	31 89       	ldd	r19, Z+17	; 0x11
    38cc:	ec 01       	movw	r28, r24
    38ce:	3d 83       	std	Y+5, r19	; 0x05
    38d0:	2c 83       	std	Y+4, r18	; 0x04
    38d2:	c0 89       	ldd	r28, Z+16	; 0x10
    38d4:	d1 89       	ldd	r29, Z+17	; 0x11
    38d6:	9b 83       	std	Y+3, r25	; 0x03
    38d8:	8a 83       	std	Y+2, r24	; 0x02
    38da:	cf 01       	movw	r24, r30
    38dc:	0c 96       	adiw	r24, 0x0c	; 12
    38de:	11 96       	adiw	r26, 0x01	; 1
    38e0:	2d 91       	ld	r18, X+
    38e2:	3c 91       	ld	r19, X
    38e4:	12 97       	sbiw	r26, 0x02	; 2
    38e6:	28 17       	cp	r18, r24
    38e8:	39 07       	cpc	r19, r25
    38ea:	21 f4       	brne	.+8      	; 0x38f4 <xTaskRemoveFromEventList+0x46>
    38ec:	12 96       	adiw	r26, 0x02	; 2
    38ee:	dc 93       	st	X, r29
    38f0:	ce 93       	st	-X, r28
    38f2:	11 97       	sbiw	r26, 0x01	; 1
    38f4:	15 8a       	std	Z+21, r1	; 0x15
    38f6:	14 8a       	std	Z+20, r1	; 0x14
    38f8:	2c 91       	ld	r18, X
    38fa:	21 50       	subi	r18, 0x01	; 1
    38fc:	2c 93       	st	X, r18

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    38fe:	20 91 68 07 	lds	r18, 0x0768	; 0x800768 <uxSchedulerSuspended>
    3902:	21 11       	cpse	r18, r1
    3904:	57 c0       	rjmp	.+174    	; 0x39b4 <xTaskRemoveFromEventList+0x106>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    3906:	a2 85       	ldd	r26, Z+10	; 0x0a
    3908:	b3 85       	ldd	r27, Z+11	; 0x0b
    390a:	84 81       	ldd	r24, Z+4	; 0x04
    390c:	95 81       	ldd	r25, Z+5	; 0x05
    390e:	26 81       	ldd	r18, Z+6	; 0x06
    3910:	37 81       	ldd	r19, Z+7	; 0x07
    3912:	ec 01       	movw	r28, r24
    3914:	3d 83       	std	Y+5, r19	; 0x05
    3916:	2c 83       	std	Y+4, r18	; 0x04
    3918:	c6 81       	ldd	r28, Z+6	; 0x06
    391a:	d7 81       	ldd	r29, Z+7	; 0x07
    391c:	9b 83       	std	Y+3, r25	; 0x03
    391e:	8a 83       	std	Y+2, r24	; 0x02
    3920:	cf 01       	movw	r24, r30
    3922:	02 96       	adiw	r24, 0x02	; 2
    3924:	11 96       	adiw	r26, 0x01	; 1
    3926:	2d 91       	ld	r18, X+
    3928:	3c 91       	ld	r19, X
    392a:	12 97       	sbiw	r26, 0x02	; 2
    392c:	28 17       	cp	r18, r24
    392e:	39 07       	cpc	r19, r25
    3930:	21 f4       	brne	.+8      	; 0x393a <xTaskRemoveFromEventList+0x8c>
    3932:	12 96       	adiw	r26, 0x02	; 2
    3934:	dc 93       	st	X, r29
    3936:	ce 93       	st	-X, r28
    3938:	11 97       	sbiw	r26, 0x01	; 1
    393a:	13 86       	std	Z+11, r1	; 0x0b
    393c:	12 86       	std	Z+10, r1	; 0x0a
    393e:	2c 91       	ld	r18, X
    3940:	21 50       	subi	r18, 0x01	; 1
    3942:	2c 93       	st	X, r18
        prvAddTaskToReadyList( pxUnblockedTCB );
    3944:	c6 89       	ldd	r28, Z+22	; 0x16
    3946:	20 91 73 07 	lds	r18, 0x0773	; 0x800773 <uxTopReadyPriority>
    394a:	2c 17       	cp	r18, r28
    394c:	10 f4       	brcc	.+4      	; 0x3952 <xTaskRemoveFromEventList+0xa4>
    394e:	c0 93 73 07 	sts	0x0773, r28	; 0x800773 <uxTopReadyPriority>
    3952:	29 e0       	ldi	r18, 0x09	; 9
    3954:	2c 9f       	mul	r18, r28
    3956:	e0 01       	movw	r28, r0
    3958:	11 24       	eor	r1, r1
    395a:	c0 56       	subi	r28, 0x60	; 96
    395c:	d8 4f       	sbci	r29, 0xF8	; 248
    395e:	09 80       	ldd	r0, Y+1	; 0x01
    3960:	da 81       	ldd	r29, Y+2	; 0x02
    3962:	c0 2d       	mov	r28, r0
    3964:	d5 83       	std	Z+5, r29	; 0x05
    3966:	c4 83       	std	Z+4, r28	; 0x04
    3968:	4c 81       	ldd	r20, Y+4	; 0x04
    396a:	5d 81       	ldd	r21, Y+5	; 0x05
    396c:	57 83       	std	Z+7, r21	; 0x07
    396e:	46 83       	std	Z+6, r20	; 0x06
    3970:	ac 81       	ldd	r26, Y+4	; 0x04
    3972:	bd 81       	ldd	r27, Y+5	; 0x05
    3974:	13 96       	adiw	r26, 0x03	; 3
    3976:	9c 93       	st	X, r25
    3978:	8e 93       	st	-X, r24
    397a:	12 97       	sbiw	r26, 0x02	; 2
    397c:	9d 83       	std	Y+5, r25	; 0x05
    397e:	8c 83       	std	Y+4, r24	; 0x04
    3980:	a6 89       	ldd	r26, Z+22	; 0x16
    3982:	a2 9f       	mul	r26, r18
    3984:	d0 01       	movw	r26, r0
    3986:	11 24       	eor	r1, r1
    3988:	a0 56       	subi	r26, 0x60	; 96
    398a:	b8 4f       	sbci	r27, 0xF8	; 248
    398c:	b3 87       	std	Z+11, r27	; 0x0b
    398e:	a2 87       	std	Z+10, r26	; 0x0a
    3990:	8c 91       	ld	r24, X
    3992:	8f 5f       	subi	r24, 0xFF	; 255
    3994:	8c 93       	st	X, r24
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3996:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    399a:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    399e:	96 89       	ldd	r25, Z+22	; 0x16
    39a0:	56 96       	adiw	r26, 0x16	; 22
    39a2:	8c 91       	ld	r24, X
    39a4:	89 17       	cp	r24, r25
    39a6:	30 f5       	brcc	.+76     	; 0x39f4 <xTaskRemoveFromEventList+0x146>
             * it should force a context switch now. */
            xReturn = pdTRUE;

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <xYieldPendings>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
}
    39ae:	df 91       	pop	r29
    39b0:	cf 91       	pop	r28
    39b2:	08 95       	ret
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    39b4:	a0 91 82 07 	lds	r26, 0x0782	; 0x800782 <xPendingReadyList+0x1>
    39b8:	b0 91 83 07 	lds	r27, 0x0783	; 0x800783 <xPendingReadyList+0x2>
    39bc:	b7 87       	std	Z+15, r27	; 0x0f
    39be:	a6 87       	std	Z+14, r26	; 0x0e
    39c0:	14 96       	adiw	r26, 0x04	; 4
    39c2:	2d 91       	ld	r18, X+
    39c4:	3c 91       	ld	r19, X
    39c6:	15 97       	sbiw	r26, 0x05	; 5
    39c8:	31 8b       	std	Z+17, r19	; 0x11
    39ca:	20 8b       	std	Z+16, r18	; 0x10
    39cc:	14 96       	adiw	r26, 0x04	; 4
    39ce:	cd 91       	ld	r28, X+
    39d0:	dc 91       	ld	r29, X
    39d2:	15 97       	sbiw	r26, 0x05	; 5
    39d4:	9b 83       	std	Y+3, r25	; 0x03
    39d6:	8a 83       	std	Y+2, r24	; 0x02
    39d8:	15 96       	adiw	r26, 0x05	; 5
    39da:	9c 93       	st	X, r25
    39dc:	8e 93       	st	-X, r24
    39de:	14 97       	sbiw	r26, 0x04	; 4
    39e0:	81 e8       	ldi	r24, 0x81	; 129
    39e2:	97 e0       	ldi	r25, 0x07	; 7
    39e4:	95 8b       	std	Z+21, r25	; 0x15
    39e6:	84 8b       	std	Z+20, r24	; 0x14
    39e8:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <xPendingReadyList>
    39ec:	8f 5f       	subi	r24, 0xFF	; 255
    39ee:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <xPendingReadyList>
    39f2:	d1 cf       	rjmp	.-94     	; 0x3996 <xTaskRemoveFromEventList+0xe8>
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    39f4:	80 e0       	ldi	r24, 0x00	; 0
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
    39f6:	db cf       	rjmp	.-74     	; 0x39ae <xTaskRemoveFromEventList+0x100>

000039f8 <vTaskRemoveFromUnorderedEventList>:
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
    39f8:	cf 93       	push	r28
    39fa:	df 93       	push	r29
    39fc:	dc 01       	movw	r26, r24
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    39fe:	70 68       	ori	r23, 0x80	; 128
    3a00:	11 96       	adiw	r26, 0x01	; 1
    3a02:	7c 93       	st	X, r23
    3a04:	6e 93       	st	-X, r22
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
    3a06:	16 96       	adiw	r26, 0x06	; 6
    3a08:	ed 91       	ld	r30, X+
    3a0a:	fc 91       	ld	r31, X
    3a0c:	17 97       	sbiw	r26, 0x07	; 7
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( pxEventListItem );
    3a0e:	18 96       	adiw	r26, 0x08	; 8
    3a10:	4d 91       	ld	r20, X+
    3a12:	5c 91       	ld	r21, X
    3a14:	19 97       	sbiw	r26, 0x09	; 9
    3a16:	12 96       	adiw	r26, 0x02	; 2
    3a18:	2d 91       	ld	r18, X+
    3a1a:	3c 91       	ld	r19, X
    3a1c:	13 97       	sbiw	r26, 0x03	; 3
    3a1e:	14 96       	adiw	r26, 0x04	; 4
    3a20:	8d 91       	ld	r24, X+
    3a22:	9c 91       	ld	r25, X
    3a24:	15 97       	sbiw	r26, 0x05	; 5
    3a26:	e9 01       	movw	r28, r18
    3a28:	9d 83       	std	Y+5, r25	; 0x05
    3a2a:	8c 83       	std	Y+4, r24	; 0x04
    3a2c:	14 96       	adiw	r26, 0x04	; 4
    3a2e:	8d 91       	ld	r24, X+
    3a30:	9c 91       	ld	r25, X
    3a32:	15 97       	sbiw	r26, 0x05	; 5
    3a34:	ec 01       	movw	r28, r24
    3a36:	3b 83       	std	Y+3, r19	; 0x03
    3a38:	2a 83       	std	Y+2, r18	; 0x02
    3a3a:	ea 01       	movw	r28, r20
    3a3c:	29 81       	ldd	r18, Y+1	; 0x01
    3a3e:	3a 81       	ldd	r19, Y+2	; 0x02
    3a40:	2a 17       	cp	r18, r26
    3a42:	3b 07       	cpc	r19, r27
    3a44:	11 f4       	brne	.+4      	; 0x3a4a <vTaskRemoveFromUnorderedEventList+0x52>
    3a46:	9a 83       	std	Y+2, r25	; 0x02
    3a48:	89 83       	std	Y+1, r24	; 0x01
    3a4a:	19 96       	adiw	r26, 0x09	; 9
    3a4c:	1c 92       	st	X, r1
    3a4e:	1e 92       	st	-X, r1
    3a50:	18 97       	sbiw	r26, 0x08	; 8
    3a52:	da 01       	movw	r26, r20
    3a54:	8c 91       	ld	r24, X
    3a56:	81 50       	subi	r24, 0x01	; 1
    3a58:	8c 93       	st	X, r24
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    3a5a:	a2 85       	ldd	r26, Z+10	; 0x0a
    3a5c:	b3 85       	ldd	r27, Z+11	; 0x0b
    3a5e:	84 81       	ldd	r24, Z+4	; 0x04
    3a60:	95 81       	ldd	r25, Z+5	; 0x05
    3a62:	26 81       	ldd	r18, Z+6	; 0x06
    3a64:	37 81       	ldd	r19, Z+7	; 0x07
    3a66:	ec 01       	movw	r28, r24
    3a68:	3d 83       	std	Y+5, r19	; 0x05
    3a6a:	2c 83       	std	Y+4, r18	; 0x04
    3a6c:	c6 81       	ldd	r28, Z+6	; 0x06
    3a6e:	d7 81       	ldd	r29, Z+7	; 0x07
    3a70:	9b 83       	std	Y+3, r25	; 0x03
    3a72:	8a 83       	std	Y+2, r24	; 0x02
    3a74:	cf 01       	movw	r24, r30
    3a76:	02 96       	adiw	r24, 0x02	; 2
    3a78:	11 96       	adiw	r26, 0x01	; 1
    3a7a:	2d 91       	ld	r18, X+
    3a7c:	3c 91       	ld	r19, X
    3a7e:	12 97       	sbiw	r26, 0x02	; 2
    3a80:	28 17       	cp	r18, r24
    3a82:	39 07       	cpc	r19, r25
    3a84:	21 f4       	brne	.+8      	; 0x3a8e <vTaskRemoveFromUnorderedEventList+0x96>
    3a86:	12 96       	adiw	r26, 0x02	; 2
    3a88:	dc 93       	st	X, r29
    3a8a:	ce 93       	st	-X, r28
    3a8c:	11 97       	sbiw	r26, 0x01	; 1
    3a8e:	13 86       	std	Z+11, r1	; 0x0b
    3a90:	12 86       	std	Z+10, r1	; 0x0a
    3a92:	2c 91       	ld	r18, X
    3a94:	21 50       	subi	r18, 0x01	; 1
    3a96:	2c 93       	st	X, r18
    prvAddTaskToReadyList( pxUnblockedTCB );
    3a98:	c6 89       	ldd	r28, Z+22	; 0x16
    3a9a:	20 91 73 07 	lds	r18, 0x0773	; 0x800773 <uxTopReadyPriority>
    3a9e:	2c 17       	cp	r18, r28
    3aa0:	10 f4       	brcc	.+4      	; 0x3aa6 <vTaskRemoveFromUnorderedEventList+0xae>
    3aa2:	c0 93 73 07 	sts	0x0773, r28	; 0x800773 <uxTopReadyPriority>
    3aa6:	49 e0       	ldi	r20, 0x09	; 9
    3aa8:	4c 9f       	mul	r20, r28
    3aaa:	e0 01       	movw	r28, r0
    3aac:	11 24       	eor	r1, r1
    3aae:	c0 56       	subi	r28, 0x60	; 96
    3ab0:	d8 4f       	sbci	r29, 0xF8	; 248
    3ab2:	09 80       	ldd	r0, Y+1	; 0x01
    3ab4:	da 81       	ldd	r29, Y+2	; 0x02
    3ab6:	c0 2d       	mov	r28, r0
    3ab8:	d5 83       	std	Z+5, r29	; 0x05
    3aba:	c4 83       	std	Z+4, r28	; 0x04
    3abc:	2c 81       	ldd	r18, Y+4	; 0x04
    3abe:	3d 81       	ldd	r19, Y+5	; 0x05
    3ac0:	37 83       	std	Z+7, r19	; 0x07
    3ac2:	26 83       	std	Z+6, r18	; 0x06
    3ac4:	2c 81       	ldd	r18, Y+4	; 0x04
    3ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    3ac8:	d9 01       	movw	r26, r18
    3aca:	13 96       	adiw	r26, 0x03	; 3
    3acc:	9c 93       	st	X, r25
    3ace:	8e 93       	st	-X, r24
    3ad0:	12 97       	sbiw	r26, 0x02	; 2
    3ad2:	9d 83       	std	Y+5, r25	; 0x05
    3ad4:	8c 83       	std	Y+4, r24	; 0x04
    3ad6:	96 89       	ldd	r25, Z+22	; 0x16
    3ad8:	94 9f       	mul	r25, r20
    3ada:	d0 01       	movw	r26, r0
    3adc:	11 24       	eor	r1, r1
    3ade:	a0 56       	subi	r26, 0x60	; 96
    3ae0:	b8 4f       	sbci	r27, 0xF8	; 248
    3ae2:	b3 87       	std	Z+11, r27	; 0x0b
    3ae4:	a2 87       	std	Z+10, r26	; 0x0a
    3ae6:	8c 91       	ld	r24, X
    3ae8:	8f 5f       	subi	r24, 0xFF	; 255
    3aea:	8c 93       	st	X, r24

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3aec:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3af0:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3af4:	86 89       	ldd	r24, Z+22	; 0x16
    3af6:	89 17       	cp	r24, r25
    3af8:	18 f4       	brcc	.+6      	; 0x3b00 <vTaskRemoveFromUnorderedEventList+0x108>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <xYieldPendings>
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	08 95       	ret

00003b06 <vTaskSetTimeOutState>:
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
    taskENTER_CRITICAL();
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	0f 92       	push	r0
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
    3b0c:	20 91 6e 07 	lds	r18, 0x076E	; 0x80076e <xNumOfOverflows>
    3b10:	fc 01       	movw	r30, r24
    3b12:	20 83       	st	Z, r18
        pxTimeOut->xTimeOnEntering = xTickCount;
    3b14:	20 91 74 07 	lds	r18, 0x0774	; 0x800774 <xTickCount>
    3b18:	30 91 75 07 	lds	r19, 0x0775	; 0x800775 <xTickCount+0x1>
    3b1c:	32 83       	std	Z+2, r19	; 0x02
    3b1e:	21 83       	std	Z+1, r18	; 0x01
    }
    taskEXIT_CRITICAL();
    3b20:	0f 90       	pop	r0
    3b22:	0f be       	out	0x3f, r0	; 63

    traceRETURN_vTaskSetTimeOutState();
}
    3b24:	08 95       	ret

00003b26 <vTaskInternalSetTimeOutState>:
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    3b26:	20 91 6e 07 	lds	r18, 0x076E	; 0x80076e <xNumOfOverflows>
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    3b2e:	20 91 74 07 	lds	r18, 0x0774	; 0x800774 <xTickCount>
    3b32:	30 91 75 07 	lds	r19, 0x0775	; 0x800775 <xTickCount+0x1>
    3b36:	32 83       	std	Z+2, r19	; 0x02
    3b38:	21 83       	std	Z+1, r18	; 0x01

    traceRETURN_vTaskInternalSetTimeOutState();
}
    3b3a:	08 95       	ret

00003b3c <xTaskCheckForTimeOut>:
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	f8 94       	cli
    3b40:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    3b42:	20 91 74 07 	lds	r18, 0x0774	; 0x800774 <xTickCount>
    3b46:	30 91 75 07 	lds	r19, 0x0775	; 0x800775 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	11 96       	adiw	r26, 0x01	; 1
    3b4e:	4d 91       	ld	r20, X+
    3b50:	5c 91       	ld	r21, X
    3b52:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
    3b54:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <xNumOfOverflows>
    3b58:	fc 91       	ld	r31, X
    3b5a:	fe 17       	cp	r31, r30
    3b5c:	51 f0       	breq	.+20     	; 0x3b72 <xTaskCheckForTimeOut+0x36>
    3b5e:	24 17       	cp	r18, r20
    3b60:	35 07       	cpc	r19, r21
    3b62:	38 f0       	brcs	.+14     	; 0x3b72 <xTaskCheckForTimeOut+0x36>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    3b64:	fb 01       	movw	r30, r22
    3b66:	11 82       	std	Z+1, r1	; 0x01
    3b68:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    3b6c:	0f 90       	pop	r0
    3b6e:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
}
    3b70:	08 95       	ret

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3b72:	24 1b       	sub	r18, r20
    3b74:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait )
    3b76:	db 01       	movw	r26, r22
    3b78:	4d 91       	ld	r20, X+
    3b7a:	5c 91       	ld	r21, X
    3b7c:	24 17       	cp	r18, r20
    3b7e:	35 07       	cpc	r19, r21
    3b80:	88 f7       	brcc	.-30     	; 0x3b64 <xTaskCheckForTimeOut+0x28>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    3b82:	42 1b       	sub	r20, r18
    3b84:	53 0b       	sbc	r21, r19
    3b86:	fb 01       	movw	r30, r22
    3b88:	51 83       	std	Z+1, r21	; 0x01
    3b8a:	40 83       	st	Z, r20
            vTaskInternalSetTimeOutState( pxTimeOut );
    3b8c:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	ec cf       	rjmp	.-40     	; 0x3b6c <xTaskCheckForTimeOut+0x30>

00003b94 <vTaskMissedYield>:
void vTaskMissedYield( void )
{
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <xYieldPendings>

    traceRETURN_vTaskMissedYield();
}
    3b9a:	08 95       	ret

00003b9c <xTaskGetCurrentTaskHandle>:
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
    3b9c:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3ba0:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
        }
    3ba4:	08 95       	ret

00003ba6 <xTaskGetCurrentTaskHandleForCore>:
    {
        TaskHandle_t xReturn = NULL;

        traceENTER_xTaskGetCurrentTaskHandleForCore( xCoreID );

        if( taskVALID_CORE_ID( xCoreID ) != pdFALSE )
    3ba6:	81 11       	cpse	r24, r1
    3ba8:	05 c0       	rjmp	.+10     	; 0x3bb4 <xTaskGetCurrentTaskHandleForCore+0xe>
        {
            #if ( configNUMBER_OF_CORES == 1 )
                xReturn = pxCurrentTCB;
    3baa:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3bae:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3bb2:	08 95       	ret
        }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    TaskHandle_t xTaskGetCurrentTaskHandleForCore( BaseType_t xCoreID )
    {
        TaskHandle_t xReturn = NULL;
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTaskGetCurrentTaskHandleForCore( xReturn );

        return xReturn;
    }
    3bb8:	08 95       	ret

00003bba <xTaskGetSchedulerState>:
    {
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
    3bba:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <xSchedulerRunning>
    3bbe:	88 23       	and	r24, r24
    3bc0:	31 f0       	breq	.+12     	; 0x3bce <xTaskGetSchedulerState+0x14>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3bc2:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxSchedulerSuspended>
    3bc6:	88 23       	and	r24, r24
    3bc8:	21 f0       	breq	.+8      	; 0x3bd2 <xTaskGetSchedulerState+0x18>
                {
                    xReturn = taskSCHEDULER_RUNNING;
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
    3bca:	80 e0       	ldi	r24, 0x00	; 0
    3bcc:	08 95       	ret

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	08 95       	ret
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
                {
                    xReturn = taskSCHEDULER_RUNNING;
    3bd2:	82 e0       	ldi	r24, 0x02	; 2
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
    }
    3bd4:	08 95       	ret

00003bd6 <uxTaskResetEventItemValue>:
{
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    3bd6:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3bda:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3bde:	84 85       	ldd	r24, Z+12	; 0x0c
    3be0:	95 85       	ldd	r25, Z+13	; 0x0d

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
    3be2:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3be6:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3bea:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3bee:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3bf2:	56 96       	adiw	r26, 0x16	; 22
    3bf4:	4c 91       	ld	r20, X
    3bf6:	24 e0       	ldi	r18, 0x04	; 4
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	24 1b       	sub	r18, r20
    3bfc:	31 09       	sbc	r19, r1
    3bfe:	35 87       	std	Z+13, r19	; 0x0d
    3c00:	24 87       	std	Z+12, r18	; 0x0c

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
}
    3c02:	08 95       	ret

00003c04 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
    3c04:	cf 92       	push	r12
    3c06:	df 92       	push	r13
    3c08:	ef 92       	push	r14
    3c0a:	ff 92       	push	r15
    3c0c:	0f 93       	push	r16
    3c0e:	1f 93       	push	r17
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	c8 2f       	mov	r28, r24
    3c16:	e6 2e       	mov	r14, r22
    3c18:	6a 01       	movw	r12, r20

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    3c1a:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	f8 94       	cli
    3c22:	0f 92       	push	r0
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
    3c24:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3c28:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3c2c:	d0 e0       	ldi	r29, 0x00	; 0
    3c2e:	8e 01       	movw	r16, r28
    3c30:	00 0f       	add	r16, r16
    3c32:	11 1f       	adc	r17, r17
    3c34:	00 0f       	add	r16, r16
    3c36:	11 1f       	adc	r17, r17
    3c38:	e0 0f       	add	r30, r16
    3c3a:	f1 1f       	adc	r31, r17
    3c3c:	81 a1       	ldd	r24, Z+33	; 0x21
    3c3e:	92 a1       	ldd	r25, Z+34	; 0x22
    3c40:	a3 a1       	ldd	r26, Z+35	; 0x23
    3c42:	b4 a1       	ldd	r27, Z+36	; 0x24
    3c44:	89 2b       	or	r24, r25
    3c46:	8a 2b       	or	r24, r26
    3c48:	8b 2b       	or	r24, r27
    3c4a:	69 f4       	brne	.+26     	; 0x3c66 <ulTaskGenericNotifyTake+0x62>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    3c4c:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3c50:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3c54:	ec 0f       	add	r30, r28
    3c56:	fd 1f       	adc	r31, r29
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    3c5c:	ff 24       	eor	r15, r15
    3c5e:	f3 94       	inc	r15
    3c60:	c1 14       	cp	r12, r1
    3c62:	d1 04       	cpc	r13, r1
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <ulTaskGenericNotifyTake+0x64>
    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
    3c66:	f1 2c       	mov	r15, r1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3c68:	0f 90       	pop	r0
    3c6a:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    3c6c:	21 e0       	ldi	r18, 0x01	; 1
    3c6e:	f2 12       	cpse	r15, r18
    3c70:	03 c0       	rjmp	.+6      	; 0x3c78 <ulTaskGenericNotifyTake+0x74>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3c72:	c6 01       	movw	r24, r12
    3c74:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3c78:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    3c7c:	91 e0       	ldi	r25, 0x01	; 1
    3c7e:	f9 12       	cpse	r15, r25
    3c80:	04 c0       	rjmp	.+8      	; 0x3c8a <ulTaskGenericNotifyTake+0x86>
    3c82:	81 11       	cpse	r24, r1
    3c84:	02 c0       	rjmp	.+4      	; 0x3c8a <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
    3c86:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	f8 94       	cli
    3c8e:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    3c90:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3c94:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3c98:	e0 0f       	add	r30, r16
    3c9a:	f1 1f       	adc	r31, r17
    3c9c:	61 a1       	ldd	r22, Z+33	; 0x21
    3c9e:	72 a1       	ldd	r23, Z+34	; 0x22
    3ca0:	83 a1       	ldd	r24, Z+35	; 0x23
    3ca2:	94 a1       	ldd	r25, Z+36	; 0x24

            if( ulReturn != 0U )
    3ca4:	61 15       	cp	r22, r1
    3ca6:	71 05       	cpc	r23, r1
    3ca8:	81 05       	cpc	r24, r1
    3caa:	91 05       	cpc	r25, r1
    3cac:	69 f0       	breq	.+26     	; 0x3cc8 <ulTaskGenericNotifyTake+0xc4>
            {
                if( xClearCountOnExit != pdFALSE )
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3cae:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3cb2:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3cb6:	02 0f       	add	r16, r18
    3cb8:	13 1f       	adc	r17, r19
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];

            if( ulReturn != 0U )
            {
                if( xClearCountOnExit != pdFALSE )
    3cba:	ee 20       	and	r14, r14
    3cbc:	b9 f0       	breq	.+46     	; 0x3cec <ulTaskGenericNotifyTake+0xe8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3cbe:	f8 01       	movw	r30, r16
    3cc0:	11 a2       	std	Z+33, r1	; 0x21
    3cc2:	12 a2       	std	Z+34, r1	; 0x22
    3cc4:	13 a2       	std	Z+35, r1	; 0x23
    3cc6:	14 a2       	std	Z+36, r1	; 0x24
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    3cc8:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3ccc:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3cd0:	c2 0f       	add	r28, r18
    3cd2:	d3 1f       	adc	r29, r19
    3cd4:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    3cd6:	0f 90       	pop	r0
    3cd8:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
    }
    3cda:	df 91       	pop	r29
    3cdc:	cf 91       	pop	r28
    3cde:	1f 91       	pop	r17
    3ce0:	0f 91       	pop	r16
    3ce2:	ff 90       	pop	r15
    3ce4:	ef 90       	pop	r14
    3ce6:	df 90       	pop	r13
    3ce8:	cf 90       	pop	r12
    3cea:	08 95       	ret
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
    3cec:	6b 01       	movw	r12, r22
    3cee:	7c 01       	movw	r14, r24
    3cf0:	f1 e0       	ldi	r31, 0x01	; 1
    3cf2:	cf 1a       	sub	r12, r31
    3cf4:	d1 08       	sbc	r13, r1
    3cf6:	e1 08       	sbc	r14, r1
    3cf8:	f1 08       	sbc	r15, r1
    3cfa:	f8 01       	movw	r30, r16
    3cfc:	c1 a2       	std	Z+33, r12	; 0x21
    3cfe:	d2 a2       	std	Z+34, r13	; 0x22
    3d00:	e3 a2       	std	Z+35, r14	; 0x23
    3d02:	f4 a2       	std	Z+36, r15	; 0x24
    3d04:	e1 cf       	rjmp	.-62     	; 0x3cc8 <ulTaskGenericNotifyTake+0xc4>

00003d06 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
    3d06:	4f 92       	push	r4
    3d08:	5f 92       	push	r5
    3d0a:	6f 92       	push	r6
    3d0c:	7f 92       	push	r7
    3d0e:	8f 92       	push	r8
    3d10:	9f 92       	push	r9
    3d12:	af 92       	push	r10
    3d14:	bf 92       	push	r11
    3d16:	cf 92       	push	r12
    3d18:	df 92       	push	r13
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	c8 2f       	mov	r28, r24
    3d28:	2a 01       	movw	r4, r20
    3d2a:	3b 01       	movw	r6, r22
    3d2c:	48 01       	movw	r8, r16
    3d2e:	59 01       	movw	r10, r18

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    3d30:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	0f 92       	push	r0
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    3d3a:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3d3e:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3d42:	d0 e0       	ldi	r29, 0x00	; 0
    3d44:	ec 0f       	add	r30, r28
    3d46:	fd 1f       	adc	r31, r29
    3d48:	85 a1       	ldd	r24, Z+37	; 0x25
    3d4a:	82 30       	cpi	r24, 0x02	; 2
    3d4c:	39 f1       	breq	.+78     	; 0x3d9c <xTaskGenericNotifyWait+0x96>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
    3d4e:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3d52:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3d56:	ce 01       	movw	r24, r28
    3d58:	88 0f       	add	r24, r24
    3d5a:	99 1f       	adc	r25, r25
    3d5c:	88 0f       	add	r24, r24
    3d5e:	99 1f       	adc	r25, r25
    3d60:	e8 0f       	add	r30, r24
    3d62:	f9 1f       	adc	r31, r25
    3d64:	81 a1       	ldd	r24, Z+33	; 0x21
    3d66:	92 a1       	ldd	r25, Z+34	; 0x22
    3d68:	a3 a1       	ldd	r26, Z+35	; 0x23
    3d6a:	b4 a1       	ldd	r27, Z+36	; 0x24
    3d6c:	40 94       	com	r4
    3d6e:	50 94       	com	r5
    3d70:	60 94       	com	r6
    3d72:	70 94       	com	r7
    3d74:	84 21       	and	r24, r4
    3d76:	95 21       	and	r25, r5
    3d78:	a6 21       	and	r26, r6
    3d7a:	b7 21       	and	r27, r7
    3d7c:	81 a3       	std	Z+33, r24	; 0x21
    3d7e:	92 a3       	std	Z+34, r25	; 0x22
    3d80:	a3 a3       	std	Z+35, r26	; 0x23
    3d82:	b4 a3       	std	Z+36, r27	; 0x24

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    3d84:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3d88:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3d8c:	ec 0f       	add	r30, r28
    3d8e:	fd 1f       	adc	r31, r29
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    3d94:	11 e0       	ldi	r17, 0x01	; 1
    3d96:	c1 14       	cp	r12, r1
    3d98:	d1 04       	cpc	r13, r1
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <xTaskGenericNotifyWait+0x98>
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
    3d9c:	10 e0       	ldi	r17, 0x00	; 0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3d9e:	0f 90       	pop	r0
    3da0:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    3da2:	11 30       	cpi	r17, 0x01	; 1
    3da4:	19 f4       	brne	.+6      	; 0x3dac <xTaskGenericNotifyWait+0xa6>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3da6:	c6 01       	movw	r24, r12
    3da8:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3dac:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    3db0:	11 30       	cpi	r17, 0x01	; 1
    3db2:	21 f4       	brne	.+8      	; 0x3dbc <xTaskGenericNotifyWait+0xb6>
    3db4:	81 11       	cpse	r24, r1
    3db6:	02 c0       	rjmp	.+4      	; 0x3dbc <xTaskGenericNotifyWait+0xb6>
        {
            taskYIELD_WITHIN_API();
    3db8:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3dbc:	0f b6       	in	r0, 0x3f	; 63
    3dbe:	f8 94       	cli
    3dc0:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
    3dc2:	e1 14       	cp	r14, r1
    3dc4:	f1 04       	cpc	r15, r1
    3dc6:	a1 f0       	breq	.+40     	; 0x3df0 <xTaskGenericNotifyWait+0xea>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    3dc8:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3dcc:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3dd0:	ce 01       	movw	r24, r28
    3dd2:	88 0f       	add	r24, r24
    3dd4:	99 1f       	adc	r25, r25
    3dd6:	88 0f       	add	r24, r24
    3dd8:	99 1f       	adc	r25, r25
    3dda:	e8 0f       	add	r30, r24
    3ddc:	f9 1f       	adc	r31, r25
    3dde:	81 a1       	ldd	r24, Z+33	; 0x21
    3de0:	92 a1       	ldd	r25, Z+34	; 0x22
    3de2:	a3 a1       	ldd	r26, Z+35	; 0x23
    3de4:	b4 a1       	ldd	r27, Z+36	; 0x24
    3de6:	f7 01       	movw	r30, r14
    3de8:	80 83       	st	Z, r24
    3dea:	91 83       	std	Z+1, r25	; 0x01
    3dec:	a2 83       	std	Z+2, r26	; 0x02
    3dee:	b3 83       	std	Z+3, r27	; 0x03

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    3df0:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3df4:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3df8:	ec 0f       	add	r30, r28
    3dfa:	fd 1f       	adc	r31, r29
    3dfc:	85 a1       	ldd	r24, Z+37	; 0x25
    3dfe:	82 30       	cpi	r24, 0x02	; 2
    3e00:	b1 f5       	brne	.+108    	; 0x3e6e <xTaskGenericNotifyWait+0x168>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
    3e02:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3e06:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3e0a:	ce 01       	movw	r24, r28
    3e0c:	88 0f       	add	r24, r24
    3e0e:	99 1f       	adc	r25, r25
    3e10:	88 0f       	add	r24, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	e8 0f       	add	r30, r24
    3e16:	f9 1f       	adc	r31, r25
    3e18:	81 a1       	ldd	r24, Z+33	; 0x21
    3e1a:	92 a1       	ldd	r25, Z+34	; 0x22
    3e1c:	a3 a1       	ldd	r26, Z+35	; 0x23
    3e1e:	b4 a1       	ldd	r27, Z+36	; 0x24
    3e20:	80 94       	com	r8
    3e22:	90 94       	com	r9
    3e24:	a0 94       	com	r10
    3e26:	b0 94       	com	r11
    3e28:	88 21       	and	r24, r8
    3e2a:	99 21       	and	r25, r9
    3e2c:	aa 21       	and	r26, r10
    3e2e:	bb 21       	and	r27, r11
    3e30:	81 a3       	std	Z+33, r24	; 0x21
    3e32:	92 a3       	std	Z+34, r25	; 0x22
    3e34:	a3 a3       	std	Z+35, r26	; 0x23
    3e36:	b4 a3       	std	Z+36, r27	; 0x24
                xReturn = pdTRUE;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    3e3a:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    3e3e:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    3e42:	c2 0f       	add	r28, r18
    3e44:	d3 1f       	adc	r29, r19
    3e46:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    3e48:	0f 90       	pop	r0
    3e4a:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
    }
    3e4c:	df 91       	pop	r29
    3e4e:	cf 91       	pop	r28
    3e50:	1f 91       	pop	r17
    3e52:	0f 91       	pop	r16
    3e54:	ff 90       	pop	r15
    3e56:	ef 90       	pop	r14
    3e58:	df 90       	pop	r13
    3e5a:	cf 90       	pop	r12
    3e5c:	bf 90       	pop	r11
    3e5e:	af 90       	pop	r10
    3e60:	9f 90       	pop	r9
    3e62:	8f 90       	pop	r8
    3e64:	7f 90       	pop	r7
    3e66:	6f 90       	pop	r6
    3e68:	5f 90       	pop	r5
    3e6a:	4f 90       	pop	r4
    3e6c:	08 95       	ret
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	e4 cf       	rjmp	.-56     	; 0x3e3a <xTaskGenericNotifyWait+0x134>

00003e72 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
    3e72:	8f 92       	push	r8
    3e74:	9f 92       	push	r9
    3e76:	af 92       	push	r10
    3e78:	bf 92       	push	r11
    3e7a:	cf 92       	push	r12
    3e7c:	df 92       	push	r13
    3e7e:	ef 92       	push	r14
    3e80:	ff 92       	push	r15
    3e82:	0f 93       	push	r16
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	dc 01       	movw	r26, r24

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;

        taskENTER_CRITICAL();
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	f8 94       	cli
    3e8e:	0f 92       	push	r0
    3e90:	70 e0       	ldi	r23, 0x00	; 0
        {
            if( pulPreviousNotificationValue != NULL )
    3e92:	e1 14       	cp	r14, r1
    3e94:	f1 04       	cpc	r15, r1
    3e96:	81 f0       	breq	.+32     	; 0x3eb8 <xTaskGenericNotify+0x46>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    3e98:	fb 01       	movw	r30, r22
    3e9a:	ee 0f       	add	r30, r30
    3e9c:	ff 1f       	adc	r31, r31
    3e9e:	ee 0f       	add	r30, r30
    3ea0:	ff 1f       	adc	r31, r31
    3ea2:	e8 0f       	add	r30, r24
    3ea4:	f9 1f       	adc	r31, r25
    3ea6:	81 a0       	ldd	r8, Z+33	; 0x21
    3ea8:	92 a0       	ldd	r9, Z+34	; 0x22
    3eaa:	a3 a0       	ldd	r10, Z+35	; 0x23
    3eac:	b4 a0       	ldd	r11, Z+36	; 0x24
    3eae:	e7 01       	movw	r28, r14
    3eb0:	88 82       	st	Y, r8
    3eb2:	99 82       	std	Y+1, r9	; 0x01
    3eb4:	aa 82       	std	Y+2, r10	; 0x02
    3eb6:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    3eb8:	fd 01       	movw	r30, r26
    3eba:	e6 0f       	add	r30, r22
    3ebc:	f7 1f       	adc	r31, r23
    3ebe:	85 a1       	ldd	r24, Z+37	; 0x25

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    3ec0:	92 e0       	ldi	r25, 0x02	; 2
    3ec2:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    3ec4:	02 30       	cpi	r16, 0x02	; 2
    3ec6:	e1 f1       	breq	.+120    	; 0x3f40 <xTaskGenericNotify+0xce>
    3ec8:	a0 f4       	brcc	.+40     	; 0x3ef2 <xTaskGenericNotify+0x80>
    3eca:	01 30       	cpi	r16, 0x01	; 1
    3ecc:	29 f1       	breq	.+74     	; 0x3f18 <xTaskGenericNotify+0xa6>

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    3ece:	81 30       	cpi	r24, 0x01	; 1
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <xTaskGenericNotify+0x62>
    3ed2:	4a c0       	rjmp	.+148    	; 0x3f68 <xTaskGenericNotify+0xf6>
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    3ed6:	0f 90       	pop	r0
    3ed8:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
    }
    3eda:	df 91       	pop	r29
    3edc:	cf 91       	pop	r28
    3ede:	0f 91       	pop	r16
    3ee0:	ff 90       	pop	r15
    3ee2:	ef 90       	pop	r14
    3ee4:	df 90       	pop	r13
    3ee6:	cf 90       	pop	r12
    3ee8:	bf 90       	pop	r11
    3eea:	af 90       	pop	r10
    3eec:	9f 90       	pop	r9
    3eee:	8f 90       	pop	r8
    3ef0:	08 95       	ret

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    3ef2:	03 30       	cpi	r16, 0x03	; 3
    3ef4:	29 f0       	breq	.+10     	; 0x3f00 <xTaskGenericNotify+0x8e>
    3ef6:	04 30       	cpi	r16, 0x04	; 4
    3ef8:	51 f7       	brne	.-44     	; 0x3ece <xTaskGenericNotify+0x5c>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    3efa:	82 30       	cpi	r24, 0x02	; 2
    3efc:	09 f4       	brne	.+2      	; 0x3f00 <xTaskGenericNotify+0x8e>
    3efe:	97 c0       	rjmp	.+302    	; 0x402e <xTaskGenericNotify+0x1bc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    3f00:	66 0f       	add	r22, r22
    3f02:	77 1f       	adc	r23, r23
    3f04:	66 0f       	add	r22, r22
    3f06:	77 1f       	adc	r23, r23
    3f08:	fd 01       	movw	r30, r26
    3f0a:	e6 0f       	add	r30, r22
    3f0c:	f7 1f       	adc	r31, r23
    3f0e:	21 a3       	std	Z+33, r18	; 0x21
    3f10:	32 a3       	std	Z+34, r19	; 0x22
    3f12:	43 a3       	std	Z+35, r20	; 0x23
    3f14:	54 a3       	std	Z+36, r21	; 0x24
    3f16:	db cf       	rjmp	.-74     	; 0x3ece <xTaskGenericNotify+0x5c>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    3f18:	66 0f       	add	r22, r22
    3f1a:	77 1f       	adc	r23, r23
    3f1c:	66 0f       	add	r22, r22
    3f1e:	77 1f       	adc	r23, r23
    3f20:	fd 01       	movw	r30, r26
    3f22:	e6 0f       	add	r30, r22
    3f24:	f7 1f       	adc	r31, r23
    3f26:	c1 a0       	ldd	r12, Z+33	; 0x21
    3f28:	d2 a0       	ldd	r13, Z+34	; 0x22
    3f2a:	e3 a0       	ldd	r14, Z+35	; 0x23
    3f2c:	f4 a0       	ldd	r15, Z+36	; 0x24
    3f2e:	c2 2a       	or	r12, r18
    3f30:	d3 2a       	or	r13, r19
    3f32:	e4 2a       	or	r14, r20
    3f34:	f5 2a       	or	r15, r21
    3f36:	c1 a2       	std	Z+33, r12	; 0x21
    3f38:	d2 a2       	std	Z+34, r13	; 0x22
    3f3a:	e3 a2       	std	Z+35, r14	; 0x23
    3f3c:	f4 a2       	std	Z+36, r15	; 0x24
                    break;
    3f3e:	c7 cf       	rjmp	.-114    	; 0x3ece <xTaskGenericNotify+0x5c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    3f40:	66 0f       	add	r22, r22
    3f42:	77 1f       	adc	r23, r23
    3f44:	66 0f       	add	r22, r22
    3f46:	77 1f       	adc	r23, r23
    3f48:	fd 01       	movw	r30, r26
    3f4a:	e6 0f       	add	r30, r22
    3f4c:	f7 1f       	adc	r31, r23
    3f4e:	41 a1       	ldd	r20, Z+33	; 0x21
    3f50:	52 a1       	ldd	r21, Z+34	; 0x22
    3f52:	63 a1       	ldd	r22, Z+35	; 0x23
    3f54:	74 a1       	ldd	r23, Z+36	; 0x24
    3f56:	4f 5f       	subi	r20, 0xFF	; 255
    3f58:	5f 4f       	sbci	r21, 0xFF	; 255
    3f5a:	6f 4f       	sbci	r22, 0xFF	; 255
    3f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5e:	41 a3       	std	Z+33, r20	; 0x21
    3f60:	52 a3       	std	Z+34, r21	; 0x22
    3f62:	63 a3       	std	Z+35, r22	; 0x23
    3f64:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    3f66:	b3 cf       	rjmp	.-154    	; 0x3ece <xTaskGenericNotify+0x5c>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    3f68:	1a 96       	adiw	r26, 0x0a	; 10
    3f6a:	ed 91       	ld	r30, X+
    3f6c:	fc 91       	ld	r31, X
    3f6e:	1b 97       	sbiw	r26, 0x0b	; 11
    3f70:	14 96       	adiw	r26, 0x04	; 4
    3f72:	8d 91       	ld	r24, X+
    3f74:	9c 91       	ld	r25, X
    3f76:	15 97       	sbiw	r26, 0x05	; 5
    3f78:	16 96       	adiw	r26, 0x06	; 6
    3f7a:	2d 91       	ld	r18, X+
    3f7c:	3c 91       	ld	r19, X
    3f7e:	17 97       	sbiw	r26, 0x07	; 7
    3f80:	ec 01       	movw	r28, r24
    3f82:	3d 83       	std	Y+5, r19	; 0x05
    3f84:	2c 83       	std	Y+4, r18	; 0x04
    3f86:	16 96       	adiw	r26, 0x06	; 6
    3f88:	cd 91       	ld	r28, X+
    3f8a:	dc 91       	ld	r29, X
    3f8c:	17 97       	sbiw	r26, 0x07	; 7
    3f8e:	9b 83       	std	Y+3, r25	; 0x03
    3f90:	8a 83       	std	Y+2, r24	; 0x02
    3f92:	9d 01       	movw	r18, r26
    3f94:	2e 5f       	subi	r18, 0xFE	; 254
    3f96:	3f 4f       	sbci	r19, 0xFF	; 255
    3f98:	81 81       	ldd	r24, Z+1	; 0x01
    3f9a:	92 81       	ldd	r25, Z+2	; 0x02
    3f9c:	82 17       	cp	r24, r18
    3f9e:	93 07       	cpc	r25, r19
    3fa0:	11 f4       	brne	.+4      	; 0x3fa6 <xTaskGenericNotify+0x134>
    3fa2:	d2 83       	std	Z+2, r29	; 0x02
    3fa4:	c1 83       	std	Z+1, r28	; 0x01
    3fa6:	1b 96       	adiw	r26, 0x0b	; 11
    3fa8:	1c 92       	st	X, r1
    3faa:	1e 92       	st	-X, r1
    3fac:	1a 97       	sbiw	r26, 0x0a	; 10
    3fae:	80 81       	ld	r24, Z
    3fb0:	81 50       	subi	r24, 0x01	; 1
    3fb2:	80 83       	st	Z, r24
                prvAddTaskToReadyList( pxTCB );
    3fb4:	56 96       	adiw	r26, 0x16	; 22
    3fb6:	cc 91       	ld	r28, X
    3fb8:	56 97       	sbiw	r26, 0x16	; 22
    3fba:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxTopReadyPriority>
    3fbe:	8c 17       	cp	r24, r28
    3fc0:	10 f4       	brcc	.+4      	; 0x3fc6 <xTaskGenericNotify+0x154>
    3fc2:	c0 93 73 07 	sts	0x0773, r28	; 0x800773 <uxTopReadyPriority>
    3fc6:	49 e0       	ldi	r20, 0x09	; 9
    3fc8:	4c 9f       	mul	r20, r28
    3fca:	e0 01       	movw	r28, r0
    3fcc:	11 24       	eor	r1, r1
    3fce:	c0 56       	subi	r28, 0x60	; 96
    3fd0:	d8 4f       	sbci	r29, 0xF8	; 248
    3fd2:	09 80       	ldd	r0, Y+1	; 0x01
    3fd4:	da 81       	ldd	r29, Y+2	; 0x02
    3fd6:	c0 2d       	mov	r28, r0
    3fd8:	15 96       	adiw	r26, 0x05	; 5
    3fda:	dc 93       	st	X, r29
    3fdc:	ce 93       	st	-X, r28
    3fde:	14 97       	sbiw	r26, 0x04	; 4
    3fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    3fe4:	17 96       	adiw	r26, 0x07	; 7
    3fe6:	9c 93       	st	X, r25
    3fe8:	8e 93       	st	-X, r24
    3fea:	16 97       	sbiw	r26, 0x06	; 6
    3fec:	8c 81       	ldd	r24, Y+4	; 0x04
    3fee:	9d 81       	ldd	r25, Y+5	; 0x05
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	33 83       	std	Z+3, r19	; 0x03
    3ff4:	22 83       	std	Z+2, r18	; 0x02
    3ff6:	3d 83       	std	Y+5, r19	; 0x05
    3ff8:	2c 83       	std	Y+4, r18	; 0x04
    3ffa:	56 96       	adiw	r26, 0x16	; 22
    3ffc:	9c 91       	ld	r25, X
    3ffe:	56 97       	sbiw	r26, 0x16	; 22
    4000:	94 9f       	mul	r25, r20
    4002:	f0 01       	movw	r30, r0
    4004:	11 24       	eor	r1, r1
    4006:	e0 56       	subi	r30, 0x60	; 96
    4008:	f8 4f       	sbci	r31, 0xF8	; 248
    400a:	1b 96       	adiw	r26, 0x0b	; 11
    400c:	fc 93       	st	X, r31
    400e:	ee 93       	st	-X, r30
    4010:	1a 97       	sbiw	r26, 0x0a	; 10
    4012:	80 81       	ld	r24, Z
    4014:	8f 5f       	subi	r24, 0xFF	; 255
    4016:	80 83       	st	Z, r24
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
    4018:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    401c:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    4020:	86 89       	ldd	r24, Z+22	; 0x16
    4022:	89 17       	cp	r24, r25
    4024:	08 f0       	brcs	.+2      	; 0x4028 <xTaskGenericNotify+0x1b6>
    4026:	56 cf       	rjmp	.-340    	; 0x3ed4 <xTaskGenericNotify+0x62>
    4028:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
    402c:	53 cf       	rjmp	.-346    	; 0x3ed4 <xTaskGenericNotify+0x62>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	52 cf       	rjmp	.-348    	; 0x3ed6 <xTaskGenericNotify+0x64>

00004032 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    4032:	8f 92       	push	r8
    4034:	9f 92       	push	r9
    4036:	af 92       	push	r10
    4038:	bf 92       	push	r11
    403a:	cf 92       	push	r12
    403c:	df 92       	push	r13
    403e:	ef 92       	push	r14
    4040:	ff 92       	push	r15
    4042:	0f 93       	push	r16
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
    4048:	dc 01       	movw	r26, r24
    404a:	70 e0       	ldi	r23, 0x00	; 0
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            if( pulPreviousNotificationValue != NULL )
    404c:	e1 14       	cp	r14, r1
    404e:	f1 04       	cpc	r15, r1
    4050:	81 f0       	breq	.+32     	; 0x4072 <xTaskGenericNotifyFromISR+0x40>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    4052:	fb 01       	movw	r30, r22
    4054:	ee 0f       	add	r30, r30
    4056:	ff 1f       	adc	r31, r31
    4058:	ee 0f       	add	r30, r30
    405a:	ff 1f       	adc	r31, r31
    405c:	e8 0f       	add	r30, r24
    405e:	f9 1f       	adc	r31, r25
    4060:	81 a0       	ldd	r8, Z+33	; 0x21
    4062:	92 a0       	ldd	r9, Z+34	; 0x22
    4064:	a3 a0       	ldd	r10, Z+35	; 0x23
    4066:	b4 a0       	ldd	r11, Z+36	; 0x24
    4068:	e7 01       	movw	r28, r14
    406a:	88 82       	st	Y, r8
    406c:	99 82       	std	Y+1, r9	; 0x01
    406e:	aa 82       	std	Y+2, r10	; 0x02
    4070:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    4072:	fd 01       	movw	r30, r26
    4074:	e6 0f       	add	r30, r22
    4076:	f7 1f       	adc	r31, r23
    4078:	85 a1       	ldd	r24, Z+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    407a:	92 e0       	ldi	r25, 0x02	; 2
    407c:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    407e:	02 30       	cpi	r16, 0x02	; 2
    4080:	d1 f1       	breq	.+116    	; 0x40f6 <xTaskGenericNotifyFromISR+0xc4>
    4082:	90 f4       	brcc	.+36     	; 0x40a8 <xTaskGenericNotifyFromISR+0x76>
    4084:	01 30       	cpi	r16, 0x01	; 1
    4086:	19 f1       	breq	.+70     	; 0x40ce <xTaskGenericNotifyFromISR+0x9c>

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4088:	81 30       	cpi	r24, 0x01	; 1
    408a:	09 f4       	brne	.+2      	; 0x408e <xTaskGenericNotifyFromISR+0x5c>
    408c:	48 c0       	rjmp	.+144    	; 0x411e <xTaskGenericNotifyFromISR+0xec>
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    408e:	81 e0       	ldi	r24, 0x01	; 1
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    }
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
    4094:	0f 91       	pop	r16
    4096:	ff 90       	pop	r15
    4098:	ef 90       	pop	r14
    409a:	df 90       	pop	r13
    409c:	cf 90       	pop	r12
    409e:	bf 90       	pop	r11
    40a0:	af 90       	pop	r10
    40a2:	9f 90       	pop	r9
    40a4:	8f 90       	pop	r8
    40a6:	08 95       	ret
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    40a8:	03 30       	cpi	r16, 0x03	; 3
    40aa:	29 f0       	breq	.+10     	; 0x40b6 <xTaskGenericNotifyFromISR+0x84>
    40ac:	04 30       	cpi	r16, 0x04	; 4
    40ae:	61 f7       	brne	.-40     	; 0x4088 <xTaskGenericNotifyFromISR+0x56>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    40b0:	82 30       	cpi	r24, 0x02	; 2
    40b2:	09 f4       	brne	.+2      	; 0x40b6 <xTaskGenericNotifyFromISR+0x84>
    40b4:	c5 c0       	rjmp	.+394    	; 0x4240 <xTaskGenericNotifyFromISR+0x20e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    40b6:	66 0f       	add	r22, r22
    40b8:	77 1f       	adc	r23, r23
    40ba:	66 0f       	add	r22, r22
    40bc:	77 1f       	adc	r23, r23
    40be:	fd 01       	movw	r30, r26
    40c0:	e6 0f       	add	r30, r22
    40c2:	f7 1f       	adc	r31, r23
    40c4:	21 a3       	std	Z+33, r18	; 0x21
    40c6:	32 a3       	std	Z+34, r19	; 0x22
    40c8:	43 a3       	std	Z+35, r20	; 0x23
    40ca:	54 a3       	std	Z+36, r21	; 0x24
    40cc:	dd cf       	rjmp	.-70     	; 0x4088 <xTaskGenericNotifyFromISR+0x56>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    40ce:	66 0f       	add	r22, r22
    40d0:	77 1f       	adc	r23, r23
    40d2:	66 0f       	add	r22, r22
    40d4:	77 1f       	adc	r23, r23
    40d6:	fd 01       	movw	r30, r26
    40d8:	e6 0f       	add	r30, r22
    40da:	f7 1f       	adc	r31, r23
    40dc:	81 a0       	ldd	r8, Z+33	; 0x21
    40de:	92 a0       	ldd	r9, Z+34	; 0x22
    40e0:	a3 a0       	ldd	r10, Z+35	; 0x23
    40e2:	b4 a0       	ldd	r11, Z+36	; 0x24
    40e4:	82 2a       	or	r8, r18
    40e6:	93 2a       	or	r9, r19
    40e8:	a4 2a       	or	r10, r20
    40ea:	b5 2a       	or	r11, r21
    40ec:	81 a2       	std	Z+33, r8	; 0x21
    40ee:	92 a2       	std	Z+34, r9	; 0x22
    40f0:	a3 a2       	std	Z+35, r10	; 0x23
    40f2:	b4 a2       	std	Z+36, r11	; 0x24
                    break;
    40f4:	c9 cf       	rjmp	.-110    	; 0x4088 <xTaskGenericNotifyFromISR+0x56>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    40f6:	66 0f       	add	r22, r22
    40f8:	77 1f       	adc	r23, r23
    40fa:	66 0f       	add	r22, r22
    40fc:	77 1f       	adc	r23, r23
    40fe:	fd 01       	movw	r30, r26
    4100:	e6 0f       	add	r30, r22
    4102:	f7 1f       	adc	r31, r23
    4104:	41 a1       	ldd	r20, Z+33	; 0x21
    4106:	52 a1       	ldd	r21, Z+34	; 0x22
    4108:	63 a1       	ldd	r22, Z+35	; 0x23
    410a:	74 a1       	ldd	r23, Z+36	; 0x24
    410c:	4f 5f       	subi	r20, 0xFF	; 255
    410e:	5f 4f       	sbci	r21, 0xFF	; 255
    4110:	6f 4f       	sbci	r22, 0xFF	; 255
    4112:	7f 4f       	sbci	r23, 0xFF	; 255
    4114:	41 a3       	std	Z+33, r20	; 0x21
    4116:	52 a3       	std	Z+34, r21	; 0x22
    4118:	63 a3       	std	Z+35, r22	; 0x23
    411a:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    411c:	b5 cf       	rjmp	.-150    	; 0x4088 <xTaskGenericNotifyFromISR+0x56>
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    411e:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxSchedulerSuspended>
    4122:	81 11       	cpse	r24, r1
    4124:	6b c0       	rjmp	.+214    	; 0x41fc <xTaskGenericNotifyFromISR+0x1ca>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    4126:	1a 96       	adiw	r26, 0x0a	; 10
    4128:	ed 91       	ld	r30, X+
    412a:	fc 91       	ld	r31, X
    412c:	1b 97       	sbiw	r26, 0x0b	; 11
    412e:	14 96       	adiw	r26, 0x04	; 4
    4130:	8d 91       	ld	r24, X+
    4132:	9c 91       	ld	r25, X
    4134:	15 97       	sbiw	r26, 0x05	; 5
    4136:	16 96       	adiw	r26, 0x06	; 6
    4138:	2d 91       	ld	r18, X+
    413a:	3c 91       	ld	r19, X
    413c:	17 97       	sbiw	r26, 0x07	; 7
    413e:	ec 01       	movw	r28, r24
    4140:	3d 83       	std	Y+5, r19	; 0x05
    4142:	2c 83       	std	Y+4, r18	; 0x04
    4144:	16 96       	adiw	r26, 0x06	; 6
    4146:	cd 91       	ld	r28, X+
    4148:	dc 91       	ld	r29, X
    414a:	17 97       	sbiw	r26, 0x07	; 7
    414c:	9b 83       	std	Y+3, r25	; 0x03
    414e:	8a 83       	std	Y+2, r24	; 0x02
    4150:	9d 01       	movw	r18, r26
    4152:	2e 5f       	subi	r18, 0xFE	; 254
    4154:	3f 4f       	sbci	r19, 0xFF	; 255
    4156:	81 81       	ldd	r24, Z+1	; 0x01
    4158:	92 81       	ldd	r25, Z+2	; 0x02
    415a:	82 17       	cp	r24, r18
    415c:	93 07       	cpc	r25, r19
    415e:	11 f4       	brne	.+4      	; 0x4164 <xTaskGenericNotifyFromISR+0x132>
    4160:	d2 83       	std	Z+2, r29	; 0x02
    4162:	c1 83       	std	Z+1, r28	; 0x01
    4164:	1b 96       	adiw	r26, 0x0b	; 11
    4166:	1c 92       	st	X, r1
    4168:	1e 92       	st	-X, r1
    416a:	1a 97       	sbiw	r26, 0x0a	; 10
    416c:	80 81       	ld	r24, Z
    416e:	81 50       	subi	r24, 0x01	; 1
    4170:	80 83       	st	Z, r24
                    prvAddTaskToReadyList( pxTCB );
    4172:	56 96       	adiw	r26, 0x16	; 22
    4174:	cc 91       	ld	r28, X
    4176:	56 97       	sbiw	r26, 0x16	; 22
    4178:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxTopReadyPriority>
    417c:	8c 17       	cp	r24, r28
    417e:	10 f4       	brcc	.+4      	; 0x4184 <xTaskGenericNotifyFromISR+0x152>
    4180:	c0 93 73 07 	sts	0x0773, r28	; 0x800773 <uxTopReadyPriority>
    4184:	89 e0       	ldi	r24, 0x09	; 9
    4186:	8c 9f       	mul	r24, r28
    4188:	e0 01       	movw	r28, r0
    418a:	11 24       	eor	r1, r1
    418c:	c0 56       	subi	r28, 0x60	; 96
    418e:	d8 4f       	sbci	r29, 0xF8	; 248
    4190:	09 80       	ldd	r0, Y+1	; 0x01
    4192:	da 81       	ldd	r29, Y+2	; 0x02
    4194:	c0 2d       	mov	r28, r0
    4196:	15 96       	adiw	r26, 0x05	; 5
    4198:	dc 93       	st	X, r29
    419a:	ce 93       	st	-X, r28
    419c:	14 97       	sbiw	r26, 0x04	; 4
    419e:	4c 81       	ldd	r20, Y+4	; 0x04
    41a0:	5d 81       	ldd	r21, Y+5	; 0x05
    41a2:	17 96       	adiw	r26, 0x07	; 7
    41a4:	5c 93       	st	X, r21
    41a6:	4e 93       	st	-X, r20
    41a8:	16 97       	sbiw	r26, 0x06	; 6
    41aa:	ec 81       	ldd	r30, Y+4	; 0x04
    41ac:	fd 81       	ldd	r31, Y+5	; 0x05
    41ae:	33 83       	std	Z+3, r19	; 0x03
    41b0:	22 83       	std	Z+2, r18	; 0x02
    41b2:	3d 83       	std	Y+5, r19	; 0x05
    41b4:	2c 83       	std	Y+4, r18	; 0x04
    41b6:	56 96       	adiw	r26, 0x16	; 22
    41b8:	ec 91       	ld	r30, X
    41ba:	56 97       	sbiw	r26, 0x16	; 22
    41bc:	e8 9f       	mul	r30, r24
    41be:	f0 01       	movw	r30, r0
    41c0:	11 24       	eor	r1, r1
    41c2:	e0 56       	subi	r30, 0x60	; 96
    41c4:	f8 4f       	sbci	r31, 0xF8	; 248
    41c6:	1b 96       	adiw	r26, 0x0b	; 11
    41c8:	fc 93       	st	X, r31
    41ca:	ee 93       	st	-X, r30
    41cc:	1a 97       	sbiw	r26, 0x0a	; 10
    41ce:	80 81       	ld	r24, Z
    41d0:	8f 5f       	subi	r24, 0xFF	; 255
    41d2:	80 83       	st	Z, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    41d4:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    41d8:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    41dc:	56 96       	adiw	r26, 0x16	; 22
    41de:	9c 91       	ld	r25, X
    41e0:	86 89       	ldd	r24, Z+22	; 0x16
    41e2:	89 17       	cp	r24, r25
    41e4:	08 f0       	brcs	.+2      	; 0x41e8 <xTaskGenericNotifyFromISR+0x1b6>
    41e6:	53 cf       	rjmp	.-346    	; 0x408e <xTaskGenericNotifyFromISR+0x5c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    41e8:	c1 14       	cp	r12, r1
    41ea:	d1 04       	cpc	r13, r1
    41ec:	19 f0       	breq	.+6      	; 0x41f4 <xTaskGenericNotifyFromISR+0x1c2>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	f6 01       	movw	r30, r12
    41f2:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <xYieldPendings>
    41fa:	4a cf       	rjmp	.-364    	; 0x4090 <xTaskGenericNotifyFromISR+0x5e>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    41fc:	e0 91 82 07 	lds	r30, 0x0782	; 0x800782 <xPendingReadyList+0x1>
    4200:	f0 91 83 07 	lds	r31, 0x0783	; 0x800783 <xPendingReadyList+0x2>
    4204:	1f 96       	adiw	r26, 0x0f	; 15
    4206:	fc 93       	st	X, r31
    4208:	ee 93       	st	-X, r30
    420a:	1e 97       	sbiw	r26, 0x0e	; 14
    420c:	84 81       	ldd	r24, Z+4	; 0x04
    420e:	95 81       	ldd	r25, Z+5	; 0x05
    4210:	51 96       	adiw	r26, 0x11	; 17
    4212:	9c 93       	st	X, r25
    4214:	8e 93       	st	-X, r24
    4216:	50 97       	sbiw	r26, 0x10	; 16
    4218:	c4 81       	ldd	r28, Z+4	; 0x04
    421a:	d5 81       	ldd	r29, Z+5	; 0x05
    421c:	cd 01       	movw	r24, r26
    421e:	0c 96       	adiw	r24, 0x0c	; 12
    4220:	9b 83       	std	Y+3, r25	; 0x03
    4222:	8a 83       	std	Y+2, r24	; 0x02
    4224:	95 83       	std	Z+5, r25	; 0x05
    4226:	84 83       	std	Z+4, r24	; 0x04
    4228:	81 e8       	ldi	r24, 0x81	; 129
    422a:	97 e0       	ldi	r25, 0x07	; 7
    422c:	55 96       	adiw	r26, 0x15	; 21
    422e:	9c 93       	st	X, r25
    4230:	8e 93       	st	-X, r24
    4232:	54 97       	sbiw	r26, 0x14	; 20
    4234:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <xPendingReadyList>
    4238:	8f 5f       	subi	r24, 0xFF	; 255
    423a:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <xPendingReadyList>
    423e:	ca cf       	rjmp	.-108    	; 0x41d4 <xTaskGenericNotifyFromISR+0x1a2>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    4240:	80 e0       	ldi	r24, 0x00	; 0
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    4242:	26 cf       	rjmp	.-436    	; 0x4090 <xTaskGenericNotifyFromISR+0x5e>

00004244 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
    4244:	0f 93       	push	r16
    4246:	1f 93       	push	r17
    4248:	cf 93       	push	r28
    424a:	df 93       	push	r29
    424c:	fc 01       	movw	r30, r24
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    424e:	a6 2f       	mov	r26, r22
    4250:	b0 e0       	ldi	r27, 0x00	; 0
    4252:	ec 01       	movw	r28, r24
    4254:	ca 0f       	add	r28, r26
    4256:	db 1f       	adc	r29, r27
    4258:	8d a1       	ldd	r24, Y+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    425a:	92 e0       	ldi	r25, 0x02	; 2
    425c:	9d a3       	std	Y+37, r25	; 0x25

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    425e:	aa 0f       	add	r26, r26
    4260:	bb 1f       	adc	r27, r27
    4262:	aa 0f       	add	r26, r26
    4264:	bb 1f       	adc	r27, r27
    4266:	ae 0f       	add	r26, r30
    4268:	bf 1f       	adc	r27, r31
    426a:	91 96       	adiw	r26, 0x21	; 33
    426c:	0d 91       	ld	r16, X+
    426e:	1d 91       	ld	r17, X+
    4270:	2d 91       	ld	r18, X+
    4272:	3c 91       	ld	r19, X
    4274:	94 97       	sbiw	r26, 0x24	; 36
    4276:	0f 5f       	subi	r16, 0xFF	; 255
    4278:	1f 4f       	sbci	r17, 0xFF	; 255
    427a:	2f 4f       	sbci	r18, 0xFF	; 255
    427c:	3f 4f       	sbci	r19, 0xFF	; 255
    427e:	91 96       	adiw	r26, 0x21	; 33
    4280:	0d 93       	st	X+, r16
    4282:	1d 93       	st	X+, r17
    4284:	2d 93       	st	X+, r18
    4286:	3c 93       	st	X, r19
    4288:	94 97       	sbiw	r26, 0x24	; 36

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    428a:	81 30       	cpi	r24, 0x01	; 1
    428c:	09 f0       	breq	.+2      	; 0x4290 <vTaskGenericNotifyGiveFromISR+0x4c>
    428e:	5e c0       	rjmp	.+188    	; 0x434c <vTaskGenericNotifyGiveFromISR+0x108>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    4290:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxSchedulerSuspended>
    4294:	81 11       	cpse	r24, r1
    4296:	5f c0       	rjmp	.+190    	; 0x4356 <vTaskGenericNotifyGiveFromISR+0x112>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    4298:	a2 85       	ldd	r26, Z+10	; 0x0a
    429a:	b3 85       	ldd	r27, Z+11	; 0x0b
    429c:	84 81       	ldd	r24, Z+4	; 0x04
    429e:	95 81       	ldd	r25, Z+5	; 0x05
    42a0:	26 81       	ldd	r18, Z+6	; 0x06
    42a2:	37 81       	ldd	r19, Z+7	; 0x07
    42a4:	ec 01       	movw	r28, r24
    42a6:	3d 83       	std	Y+5, r19	; 0x05
    42a8:	2c 83       	std	Y+4, r18	; 0x04
    42aa:	c6 81       	ldd	r28, Z+6	; 0x06
    42ac:	d7 81       	ldd	r29, Z+7	; 0x07
    42ae:	9b 83       	std	Y+3, r25	; 0x03
    42b0:	8a 83       	std	Y+2, r24	; 0x02
    42b2:	cf 01       	movw	r24, r30
    42b4:	02 96       	adiw	r24, 0x02	; 2
    42b6:	11 96       	adiw	r26, 0x01	; 1
    42b8:	2d 91       	ld	r18, X+
    42ba:	3c 91       	ld	r19, X
    42bc:	12 97       	sbiw	r26, 0x02	; 2
    42be:	28 17       	cp	r18, r24
    42c0:	39 07       	cpc	r19, r25
    42c2:	21 f4       	brne	.+8      	; 0x42cc <vTaskGenericNotifyGiveFromISR+0x88>
    42c4:	12 96       	adiw	r26, 0x02	; 2
    42c6:	dc 93       	st	X, r29
    42c8:	ce 93       	st	-X, r28
    42ca:	11 97       	sbiw	r26, 0x01	; 1
    42cc:	13 86       	std	Z+11, r1	; 0x0b
    42ce:	12 86       	std	Z+10, r1	; 0x0a
    42d0:	2c 91       	ld	r18, X
    42d2:	21 50       	subi	r18, 0x01	; 1
    42d4:	2c 93       	st	X, r18
                    prvAddTaskToReadyList( pxTCB );
    42d6:	c6 89       	ldd	r28, Z+22	; 0x16
    42d8:	20 91 73 07 	lds	r18, 0x0773	; 0x800773 <uxTopReadyPriority>
    42dc:	2c 17       	cp	r18, r28
    42de:	10 f4       	brcc	.+4      	; 0x42e4 <vTaskGenericNotifyGiveFromISR+0xa0>
    42e0:	c0 93 73 07 	sts	0x0773, r28	; 0x800773 <uxTopReadyPriority>
    42e4:	29 e0       	ldi	r18, 0x09	; 9
    42e6:	2c 9f       	mul	r18, r28
    42e8:	e0 01       	movw	r28, r0
    42ea:	11 24       	eor	r1, r1
    42ec:	c0 56       	subi	r28, 0x60	; 96
    42ee:	d8 4f       	sbci	r29, 0xF8	; 248
    42f0:	09 80       	ldd	r0, Y+1	; 0x01
    42f2:	da 81       	ldd	r29, Y+2	; 0x02
    42f4:	c0 2d       	mov	r28, r0
    42f6:	d5 83       	std	Z+5, r29	; 0x05
    42f8:	c4 83       	std	Z+4, r28	; 0x04
    42fa:	6c 81       	ldd	r22, Y+4	; 0x04
    42fc:	7d 81       	ldd	r23, Y+5	; 0x05
    42fe:	77 83       	std	Z+7, r23	; 0x07
    4300:	66 83       	std	Z+6, r22	; 0x06
    4302:	ac 81       	ldd	r26, Y+4	; 0x04
    4304:	bd 81       	ldd	r27, Y+5	; 0x05
    4306:	13 96       	adiw	r26, 0x03	; 3
    4308:	9c 93       	st	X, r25
    430a:	8e 93       	st	-X, r24
    430c:	12 97       	sbiw	r26, 0x02	; 2
    430e:	9d 83       	std	Y+5, r25	; 0x05
    4310:	8c 83       	std	Y+4, r24	; 0x04
    4312:	a6 89       	ldd	r26, Z+22	; 0x16
    4314:	a2 9f       	mul	r26, r18
    4316:	d0 01       	movw	r26, r0
    4318:	11 24       	eor	r1, r1
    431a:	a0 56       	subi	r26, 0x60	; 96
    431c:	b8 4f       	sbci	r27, 0xF8	; 248
    431e:	b3 87       	std	Z+11, r27	; 0x0b
    4320:	a2 87       	std	Z+10, r26	; 0x0a
    4322:	8c 91       	ld	r24, X
    4324:	8f 5f       	subi	r24, 0xFF	; 255
    4326:	8c 93       	st	X, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4328:	a0 91 c4 07 	lds	r26, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    432c:	b0 91 c5 07 	lds	r27, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>
    4330:	96 89       	ldd	r25, Z+22	; 0x16
    4332:	56 96       	adiw	r26, 0x16	; 22
    4334:	8c 91       	ld	r24, X
    4336:	89 17       	cp	r24, r25
    4338:	48 f4       	brcc	.+18     	; 0x434c <vTaskGenericNotifyGiveFromISR+0x108>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    433a:	41 15       	cp	r20, r1
    433c:	51 05       	cpc	r21, r1
    433e:	19 f0       	breq	.+6      	; 0x4346 <vTaskGenericNotifyGiveFromISR+0x102>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    4340:	81 e0       	ldi	r24, 0x01	; 1
    4342:	fa 01       	movw	r30, r20
    4344:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <xYieldPendings>
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
    434c:	df 91       	pop	r29
    434e:	cf 91       	pop	r28
    4350:	1f 91       	pop	r17
    4352:	0f 91       	pop	r16
    4354:	08 95       	ret
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4356:	a0 91 82 07 	lds	r26, 0x0782	; 0x800782 <xPendingReadyList+0x1>
    435a:	b0 91 83 07 	lds	r27, 0x0783	; 0x800783 <xPendingReadyList+0x2>
    435e:	b7 87       	std	Z+15, r27	; 0x0f
    4360:	a6 87       	std	Z+14, r26	; 0x0e
    4362:	14 96       	adiw	r26, 0x04	; 4
    4364:	8d 91       	ld	r24, X+
    4366:	9c 91       	ld	r25, X
    4368:	15 97       	sbiw	r26, 0x05	; 5
    436a:	91 8b       	std	Z+17, r25	; 0x11
    436c:	80 8b       	std	Z+16, r24	; 0x10
    436e:	14 96       	adiw	r26, 0x04	; 4
    4370:	cd 91       	ld	r28, X+
    4372:	dc 91       	ld	r29, X
    4374:	15 97       	sbiw	r26, 0x05	; 5
    4376:	cf 01       	movw	r24, r30
    4378:	0c 96       	adiw	r24, 0x0c	; 12
    437a:	9b 83       	std	Y+3, r25	; 0x03
    437c:	8a 83       	std	Y+2, r24	; 0x02
    437e:	15 96       	adiw	r26, 0x05	; 5
    4380:	9c 93       	st	X, r25
    4382:	8e 93       	st	-X, r24
    4384:	14 97       	sbiw	r26, 0x04	; 4
    4386:	81 e8       	ldi	r24, 0x81	; 129
    4388:	97 e0       	ldi	r25, 0x07	; 7
    438a:	95 8b       	std	Z+21, r25	; 0x15
    438c:	84 8b       	std	Z+20, r24	; 0x14
    438e:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <xPendingReadyList>
    4392:	8f 5f       	subi	r24, 0xFF	; 255
    4394:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <xPendingReadyList>
    4398:	c7 cf       	rjmp	.-114    	; 0x4328 <vTaskGenericNotifyGiveFromISR+0xe4>

0000439a <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    439a:	00 97       	sbiw	r24, 0x00	; 0
    439c:	21 f4       	brne	.+8      	; 0x43a6 <xTaskGenericNotifyStateClear+0xc>
    439e:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    43a2:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    43ac:	fc 01       	movw	r30, r24
    43ae:	e6 0f       	add	r30, r22
    43b0:	f1 1d       	adc	r31, r1
    43b2:	85 a1       	ldd	r24, Z+37	; 0x25
    43b4:	82 30       	cpi	r24, 0x02	; 2
    43b6:	29 f4       	brne	.+10     	; 0x43c2 <xTaskGenericNotifyStateClear+0x28>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    43b8:	15 a2       	std	Z+37, r1	; 0x25
                xReturn = pdPASS;
    43ba:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        taskEXIT_CRITICAL();
    43bc:	0f 90       	pop	r0
    43be:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyStateClear( xReturn );

        return xReturn;
    }
    43c0:	08 95       	ret
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
                xReturn = pdPASS;
            }
            else
            {
                xReturn = pdFAIL;
    43c2:	80 e0       	ldi	r24, 0x00	; 0
    43c4:	fb cf       	rjmp	.-10     	; 0x43bc <xTaskGenericNotifyStateClear+0x22>

000043c6 <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
    43c6:	cf 92       	push	r12
    43c8:	df 92       	push	r13
    43ca:	ef 92       	push	r14
    43cc:	ff 92       	push	r15

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    43ce:	00 97       	sbiw	r24, 0x00	; 0
    43d0:	21 f4       	brne	.+8      	; 0x43da <ulTaskGenericNotifyValueClear+0x14>
    43d2:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxCurrentTCB>
    43d6:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    43da:	0f b6       	in	r0, 0x3f	; 63
    43dc:	f8 94       	cli
    43de:	0f 92       	push	r0
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
    43e0:	74 e0       	ldi	r23, 0x04	; 4
    43e2:	67 9f       	mul	r22, r23
    43e4:	f0 01       	movw	r30, r0
    43e6:	11 24       	eor	r1, r1
    43e8:	e8 0f       	add	r30, r24
    43ea:	f9 1f       	adc	r31, r25
    43ec:	61 a1       	ldd	r22, Z+33	; 0x21
    43ee:	72 a1       	ldd	r23, Z+34	; 0x22
    43f0:	83 a1       	ldd	r24, Z+35	; 0x23
    43f2:	94 a1       	ldd	r25, Z+36	; 0x24
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
    43f4:	c1 a0       	ldd	r12, Z+33	; 0x21
    43f6:	d2 a0       	ldd	r13, Z+34	; 0x22
    43f8:	e3 a0       	ldd	r14, Z+35	; 0x23
    43fa:	f4 a0       	ldd	r15, Z+36	; 0x24
    43fc:	20 95       	com	r18
    43fe:	30 95       	com	r19
    4400:	40 95       	com	r20
    4402:	50 95       	com	r21
    4404:	c2 22       	and	r12, r18
    4406:	d3 22       	and	r13, r19
    4408:	e4 22       	and	r14, r20
    440a:	f5 22       	and	r15, r21
    440c:	c1 a2       	std	Z+33, r12	; 0x21
    440e:	d2 a2       	std	Z+34, r13	; 0x22
    4410:	e3 a2       	std	Z+35, r14	; 0x23
    4412:	f4 a2       	std	Z+36, r15	; 0x24
        }
        taskEXIT_CRITICAL();
    4414:	0f 90       	pop	r0
    4416:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyValueClear( ulReturn );

        return ulReturn;
    }
    4418:	ff 90       	pop	r15
    441a:	ef 90       	pop	r14
    441c:	df 90       	pop	r13
    441e:	cf 90       	pop	r12
    4420:	08 95       	ret

00004422 <vTaskResetState>:
    BaseType_t xCoreID;

    /* Task control block. */
    #if ( configNUMBER_OF_CORES == 1 )
    {
        pxCurrentTCB = NULL;
    4422:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <pxCurrentTCB+0x1>
    4426:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <pxCurrentTCB>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
    442a:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <uxDeletedTasksWaitingCleanUp>
        FreeRTOS_errno = 0;
    }
    #endif /* #if ( configUSE_POSIX_ERRNO == 1 ) */

    /* Other file private variables. */
    uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
    442e:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <uxCurrentNumberOfTasks>
    xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    4432:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <xTickCount+0x1>
    4436:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <xTickCount>
    uxTopReadyPriority = tskIDLE_PRIORITY;
    443a:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <uxTopReadyPriority>
    xSchedulerRunning = pdFALSE;
    443e:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <xSchedulerRunning>
    xPendedTicks = ( TickType_t ) 0U;
    4442:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <xPendedTicks+0x1>
    4446:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <xPendedTicks>

    for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
    {
        xYieldPendings[ xCoreID ] = pdFALSE;
    444a:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <xYieldPendings>
    }

    xNumOfOverflows = ( BaseType_t ) 0;
    444e:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <xNumOfOverflows>
    uxTaskNumber = ( UBaseType_t ) 0U;
    4452:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <uxTaskNumber>
    xNextTaskUnblockTime = ( TickType_t ) 0U;
    4456:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <xNextTaskUnblockTime+0x1>
    445a:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <xNextTaskUnblockTime>

    uxSchedulerSuspended = ( UBaseType_t ) 0U;
    445e:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <uxSchedulerSuspended>
            ulTaskSwitchedInTime[ xCoreID ] = 0U;
            ulTotalRunTime[ xCoreID ] = 0U;
        }
    }
    #endif /* #if ( configGENERATE_RUN_TIME_STATS == 1 ) */
}
    4462:	08 95       	ret

00004464 <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    4464:	0f b6       	in	r0, 0x3f	; 63
    4466:	f8 94       	cli
    4468:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    446a:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <xTimerQueue>
    446e:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <xTimerQueue+0x1>
    4472:	89 2b       	or	r24, r25
    4474:	e9 f4       	brne	.+58     	; 0x44b0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    4476:	89 ed       	ldi	r24, 0xD9	; 217
    4478:	97 e0       	ldi	r25, 0x07	; 7
    447a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    447e:	80 ed       	ldi	r24, 0xD0	; 208
    4480:	97 e0       	ldi	r25, 0x07	; 7
    4482:	0e 94 8a 0b 	call	0x1714	; 0x1714 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    4486:	89 ed       	ldi	r24, 0xD9	; 217
    4488:	97 e0       	ldi	r25, 0x07	; 7
    448a:	90 93 cf 07 	sts	0x07CF, r25	; 0x8007cf <pxCurrentTimerList+0x1>
    448e:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    4492:	80 ed       	ldi	r24, 0xD0	; 208
    4494:	97 e0       	ldi	r25, 0x07	; 7
    4496:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <pxOverflowTimerList+0x1>
    449a:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <pxOverflowTimerList>

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
    449e:	40 e0       	ldi	r20, 0x00	; 0
    44a0:	65 e0       	ldi	r22, 0x05	; 5
    44a2:	8a e0       	ldi	r24, 0x0A	; 10
    44a4:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <xQueueGenericCreate>
    44a8:	90 93 cb 07 	sts	0x07CB, r25	; 0x8007cb <xTimerQueue+0x1>
    44ac:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    44b0:	0f 90       	pop	r0
    44b2:	0f be       	out	0x3f, r0	; 63
    }
    44b4:	08 95       	ret

000044b6 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    44b6:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    44b8:	73 83       	std	Z+3, r23	; 0x03
    44ba:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    44bc:	91 87       	std	Z+9, r25	; 0x09
    44be:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    44c0:	46 17       	cp	r20, r22
    44c2:	57 07       	cpc	r21, r23
    44c4:	90 f0       	brcs	.+36     	; 0x44ea <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    44c6:	42 1b       	sub	r20, r18
    44c8:	53 0b       	sbc	r21, r19
    44ca:	84 85       	ldd	r24, Z+12	; 0x0c
    44cc:	95 85       	ldd	r25, Z+13	; 0x0d
    44ce:	48 17       	cp	r20, r24
    44d0:	59 07       	cpc	r21, r25
    44d2:	c8 f4       	brcc	.+50     	; 0x4506 <prvInsertTimerInActiveList+0x50>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    44d4:	bf 01       	movw	r22, r30
    44d6:	6e 5f       	subi	r22, 0xFE	; 254
    44d8:	7f 4f       	sbci	r23, 0xFF	; 255
    44da:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <pxOverflowTimerList>
    44de:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <pxOverflowTimerList+0x1>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    44e2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    44ea:	42 17       	cp	r20, r18
    44ec:	53 07       	cpc	r21, r19
    44ee:	18 f4       	brcc	.+6      	; 0x44f6 <prvInsertTimerInActiveList+0x40>
    44f0:	62 17       	cp	r22, r18
    44f2:	73 07       	cpc	r23, r19
    44f4:	40 f4       	brcc	.+16     	; 0x4506 <prvInsertTimerInActiveList+0x50>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    44f6:	bf 01       	movw	r22, r30
    44f8:	6e 5f       	subi	r22, 0xFE	; 254
    44fa:	7f 4f       	sbci	r23, 0xFF	; 255
    44fc:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <pxCurrentTimerList>
    4500:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <pxCurrentTimerList+0x1>
    4504:	ee cf       	rjmp	.-36     	; 0x44e2 <prvInsertTimerInActiveList+0x2c>
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    4506:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    4508:	08 95       	ret

0000450a <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    450a:	ef 92       	push	r14
    450c:	ff 92       	push	r15
    450e:	0f 93       	push	r16
    4510:	1f 93       	push	r17
    4512:	cf 93       	push	r28
    4514:	df 93       	push	r29
    4516:	ec 01       	movw	r28, r24
    4518:	8b 01       	movw	r16, r22
    451a:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    451c:	6c 85       	ldd	r22, Y+12	; 0x0c
    451e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4520:	60 0f       	add	r22, r16
    4522:	71 1f       	adc	r23, r17
    4524:	98 01       	movw	r18, r16
    4526:	a7 01       	movw	r20, r14
    4528:	ce 01       	movw	r24, r28
    452a:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <prvInsertTimerInActiveList>
    452e:	81 11       	cpse	r24, r1
    4530:	07 c0       	rjmp	.+14     	; 0x4540 <prvReloadTimer+0x36>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    4532:	df 91       	pop	r29
    4534:	cf 91       	pop	r28
    4536:	1f 91       	pop	r17
    4538:	0f 91       	pop	r16
    453a:	ff 90       	pop	r15
    453c:	ef 90       	pop	r14
    453e:	08 95       	ret
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    4540:	8c 85       	ldd	r24, Y+12	; 0x0c
    4542:	9d 85       	ldd	r25, Y+13	; 0x0d
    4544:	08 0f       	add	r16, r24
    4546:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4548:	e8 89       	ldd	r30, Y+16	; 0x10
    454a:	f9 89       	ldd	r31, Y+17	; 0x11
    454c:	ce 01       	movw	r24, r28
    454e:	09 95       	icall
    4550:	e5 cf       	rjmp	.-54     	; 0x451c <prvReloadTimer+0x12>

00004552 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    4552:	ef 92       	push	r14
    4554:	ff 92       	push	r15
    4556:	0f 93       	push	r16
    4558:	1f 93       	push	r17
    455a:	cf 93       	push	r28
    455c:	df 93       	push	r29
    455e:	8c 01       	movw	r16, r24
    4560:	7b 01       	movw	r14, r22
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4562:	e0 91 ce 07 	lds	r30, 0x07CE	; 0x8007ce <pxCurrentTimerList>
    4566:	f0 91 cf 07 	lds	r31, 0x07CF	; 0x8007cf <pxCurrentTimerList+0x1>
    456a:	05 80       	ldd	r0, Z+5	; 0x05
    456c:	f6 81       	ldd	r31, Z+6	; 0x06
    456e:	e0 2d       	mov	r30, r0
    4570:	c6 81       	ldd	r28, Z+6	; 0x06
    4572:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4574:	ce 01       	movw	r24, r28
    4576:	02 96       	adiw	r24, 0x02	; 2
    4578:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    457c:	8a 89       	ldd	r24, Y+18	; 0x12
    457e:	82 ff       	sbrs	r24, 2
    4580:	0f c0       	rjmp	.+30     	; 0x45a0 <prvProcessExpiredTimer+0x4e>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    4582:	a7 01       	movw	r20, r14
    4584:	b8 01       	movw	r22, r16
    4586:	ce 01       	movw	r24, r28
    4588:	0e 94 85 22 	call	0x450a	; 0x450a <prvReloadTimer>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    458c:	e8 89       	ldd	r30, Y+16	; 0x10
    458e:	f9 89       	ldd	r31, Y+17	; 0x11
    4590:	ce 01       	movw	r24, r28
    }
    4592:	df 91       	pop	r29
    4594:	cf 91       	pop	r28
    4596:	1f 91       	pop	r17
    4598:	0f 91       	pop	r16
    459a:	ff 90       	pop	r15
    459c:	ef 90       	pop	r14
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    459e:	09 94       	ijmp
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    45a0:	8e 7f       	andi	r24, 0xFE	; 254
    45a2:	8a 8b       	std	Y+18, r24	; 0x12
    45a4:	f3 cf       	rjmp	.-26     	; 0x458c <prvProcessExpiredTimer+0x3a>

000045a6 <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    45a6:	e0 91 ce 07 	lds	r30, 0x07CE	; 0x8007ce <pxCurrentTimerList>
    45aa:	f0 91 cf 07 	lds	r31, 0x07CF	; 0x8007cf <pxCurrentTimerList+0x1>
    45ae:	80 81       	ld	r24, Z
    45b0:	81 11       	cpse	r24, r1
    45b2:	0d c0       	rjmp	.+26     	; 0x45ce <prvSwitchTimerLists+0x28>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    45b4:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <pxOverflowTimerList>
    45b8:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <pxOverflowTimerList+0x1>
    45bc:	90 93 cf 07 	sts	0x07CF, r25	; 0x8007cf <pxCurrentTimerList+0x1>
    45c0:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    45c4:	f0 93 cd 07 	sts	0x07CD, r31	; 0x8007cd <pxOverflowTimerList+0x1>
    45c8:	e0 93 cc 07 	sts	0x07CC, r30	; 0x8007cc <pxOverflowTimerList>
    }
    45cc:	08 95       	ret
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    45ce:	05 80       	ldd	r0, Z+5	; 0x05
    45d0:	f6 81       	ldd	r31, Z+6	; 0x06
    45d2:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    45d4:	6f ef       	ldi	r22, 0xFF	; 255
    45d6:	7f ef       	ldi	r23, 0xFF	; 255
    45d8:	80 81       	ld	r24, Z
    45da:	91 81       	ldd	r25, Z+1	; 0x01
    45dc:	0e 94 a9 22 	call	0x4552	; 0x4552 <prvProcessExpiredTimer>
    45e0:	e2 cf       	rjmp	.-60     	; 0x45a6 <prvSwitchTimerLists>

000045e2 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    45e2:	cf 93       	push	r28
    45e4:	df 93       	push	r29
    45e6:	00 d0       	rcall	.+0      	; 0x45e8 <prvTimerTask+0x6>
    45e8:	00 d0       	rcall	.+0      	; 0x45ea <prvTimerTask+0x8>
    45ea:	1f 92       	push	r1
    45ec:	cd b7       	in	r28, 0x3d	; 61
    45ee:	de b7       	in	r29, 0x3e	; 62
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
    45f0:	85 e0       	ldi	r24, 0x05	; 5
    45f2:	b8 2e       	mov	r11, r24
    45f4:	ce 01       	movw	r24, r28
    45f6:	01 96       	adiw	r24, 0x01	; 1
    45f8:	7c 01       	movw	r14, r24
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    45fa:	e0 91 ce 07 	lds	r30, 0x07CE	; 0x8007ce <pxCurrentTimerList>
    45fe:	f0 91 cf 07 	lds	r31, 0x07CF	; 0x8007cf <pxCurrentTimerList+0x1>
    4602:	a0 80       	ld	r10, Z
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    4604:	10 e0       	ldi	r17, 0x00	; 0
    4606:	00 e0       	ldi	r16, 0x00	; 0
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );

        if( *pxListWasEmpty == pdFALSE )
    4608:	aa 20       	and	r10, r10
    460a:	29 f0       	breq	.+10     	; 0x4616 <prvTimerTask+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    460c:	05 80       	ldd	r0, Z+5	; 0x05
    460e:	f6 81       	ldd	r31, Z+6	; 0x06
    4610:	e0 2d       	mov	r30, r0
    4612:	00 81       	ld	r16, Z
    4614:	11 81       	ldd	r17, Z+1	; 0x01
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    4616:	0e 94 37 19 	call	0x326e	; 0x326e <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
    461a:	0e 94 3d 19 	call	0x327a	; 0x327a <xTaskGetTickCount>
    461e:	6c 01       	movw	r12, r24

        if( xTimeNow < xLastTime )
    4620:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xLastTime.2269>
    4624:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xLastTime.2269+0x1>
    4628:	c8 16       	cp	r12, r24
    462a:	d9 06       	cpc	r13, r25
    462c:	08 f0       	brcs	.+2      	; 0x4630 <prvTimerTask+0x4e>
    462e:	4f c0       	rjmp	.+158    	; 0x46ce <prvTimerTask+0xec>
        {
            prvSwitchTimerLists();
    4630:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    4634:	d0 92 c7 07 	sts	0x07C7, r13	; 0x8007c7 <xLastTime.2269+0x1>
    4638:	c0 92 c6 07 	sts	0x07C6, r12	; 0x8007c6 <xLastTime.2269>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    463c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
    4640:	d7 01       	movw	r26, r14
    4642:	eb 2d       	mov	r30, r11
    4644:	1d 92       	st	X+, r1
    4646:	ea 95       	dec	r30
    4648:	e9 f7       	brne	.-6      	; 0x4644 <prvTimerTask+0x62>
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    464a:	50 e0       	ldi	r21, 0x00	; 0
    464c:	40 e0       	ldi	r20, 0x00	; 0
    464e:	b7 01       	movw	r22, r14
    4650:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <xTimerQueue>
    4654:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <xTimerQueue+0x1>
    4658:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <xQueueReceive>
    465c:	88 23       	and	r24, r24
    465e:	69 f2       	breq	.-102    	; 0x45fa <prvTimerTask+0x18>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4660:	89 81       	ldd	r24, Y+1	; 0x01
    4662:	87 fd       	sbrc	r24, 7
    4664:	f2 cf       	rjmp	.-28     	; 0x464a <prvTimerTask+0x68>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4666:	0c 81       	ldd	r16, Y+4	; 0x04
    4668:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    466a:	d8 01       	movw	r26, r16
    466c:	1a 96       	adiw	r26, 0x0a	; 10
    466e:	8d 91       	ld	r24, X+
    4670:	9c 91       	ld	r25, X
    4672:	89 2b       	or	r24, r25
    4674:	21 f0       	breq	.+8      	; 0x467e <prvTimerTask+0x9c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4676:	c8 01       	movw	r24, r16
    4678:	02 96       	adiw	r24, 0x02	; 2
    467a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <uxListRemove>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
    467e:	0e 94 3d 19 	call	0x327a	; 0x327a <xTaskGetTickCount>
    4682:	6c 01       	movw	r12, r24

        if( xTimeNow < xLastTime )
    4684:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xLastTime.2269>
    4688:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xLastTime.2269+0x1>
    468c:	c8 16       	cp	r12, r24
    468e:	d9 06       	cpc	r13, r25
    4690:	10 f4       	brcc	.+4      	; 0x4696 <prvTimerTask+0xb4>
        {
            prvSwitchTimerLists();
    4692:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    4696:	d0 92 c7 07 	sts	0x07C7, r13	; 0x8007c7 <xLastTime.2269+0x1>
    469a:	c0 92 c6 07 	sts	0x07C6, r12	; 0x8007c6 <xLastTime.2269>
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
    469e:	e9 81       	ldd	r30, Y+1	; 0x01
    46a0:	e1 50       	subi	r30, 0x01	; 1
    46a2:	e9 30       	cpi	r30, 0x09	; 9
    46a4:	90 f6       	brcc	.-92     	; 0x464a <prvTimerTask+0x68>
    46a6:	0e 2e       	mov	r0, r30
    46a8:	00 0c       	add	r0, r0
    46aa:	ff 0b       	sbc	r31, r31
    46ac:	e2 5a       	subi	r30, 0xA2	; 162
    46ae:	fc 4d       	sbci	r31, 0xDC	; 220
    46b0:	d8 01       	movw	r26, r16
    46b2:	52 96       	adiw	r26, 0x12	; 18
    46b4:	8c 91       	ld	r24, X
    46b6:	52 97       	sbiw	r26, 0x12	; 18
    46b8:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__tablejump2__>
    46bc:	8f 23       	and	r24, r31
    46be:	8f 23       	and	r24, r31
    46c0:	d3 23       	and	r29, r19
    46c2:	bb 23       	and	r27, r27
    46c4:	cd 23       	and	r28, r29
    46c6:	8f 23       	and	r24, r31
    46c8:	8f 23       	and	r24, r31
    46ca:	d3 23       	and	r29, r19
    46cc:	bb 23       	and	r27, r27
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    46ce:	d0 92 c7 07 	sts	0x07C7, r13	; 0x8007c7 <xLastTime.2269+0x1>
    46d2:	c0 92 c6 07 	sts	0x07C6, r12	; 0x8007c6 <xLastTime.2269>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    46d6:	aa 20       	and	r10, r10
    46d8:	51 f0       	breq	.+20     	; 0x46ee <prvTimerTask+0x10c>
    46da:	c0 16       	cp	r12, r16
    46dc:	d1 06       	cpc	r13, r17
    46de:	70 f0       	brcs	.+28     	; 0x46fc <prvTimerTask+0x11a>
                {
                    ( void ) xTaskResumeAll();
    46e0:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    46e4:	b6 01       	movw	r22, r12
    46e6:	c8 01       	movw	r24, r16
    46e8:	0e 94 a9 22 	call	0x4552	; 0x4552 <prvProcessExpiredTimer>
    46ec:	a9 cf       	rjmp	.-174    	; 0x4640 <prvTimerTask+0x5e>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    46ee:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxOverflowTimerList>
    46f2:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxOverflowTimerList+0x1>
    46f6:	41 e0       	ldi	r20, 0x01	; 1
    46f8:	80 81       	ld	r24, Z
    46fa:	81 11       	cpse	r24, r1
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    46fc:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    46fe:	b8 01       	movw	r22, r16
    4700:	6c 19       	sub	r22, r12
    4702:	7d 09       	sbc	r23, r13
    4704:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <xTimerQueue>
    4708:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <xTimerQueue+0x1>
    470c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    4710:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <xTaskResumeAll>
    4714:	81 11       	cpse	r24, r1
    4716:	94 cf       	rjmp	.-216    	; 0x4640 <prvTimerTask+0x5e>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        taskYIELD_WITHIN_API();
    4718:	0e 94 b7 0c 	call	0x196e	; 0x196e <vPortYield>
    471c:	91 cf       	rjmp	.-222    	; 0x4640 <prvTimerTask+0x5e>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    471e:	81 60       	ori	r24, 0x01	; 1
    4720:	f8 01       	movw	r30, r16
    4722:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    4724:	2a 81       	ldd	r18, Y+2	; 0x02
    4726:	3b 81       	ldd	r19, Y+3	; 0x03
    4728:	64 85       	ldd	r22, Z+12	; 0x0c
    472a:	75 85       	ldd	r23, Z+13	; 0x0d
    472c:	62 0f       	add	r22, r18
    472e:	73 1f       	adc	r23, r19
    4730:	a6 01       	movw	r20, r12
    4732:	c8 01       	movw	r24, r16
    4734:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <prvInsertTimerInActiveList>
    4738:	88 23       	and	r24, r24
    473a:	09 f4       	brne	.+2      	; 0x473e <prvTimerTask+0x15c>
    473c:	86 cf       	rjmp	.-244    	; 0x464a <prvTimerTask+0x68>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    473e:	d8 01       	movw	r26, r16
    4740:	52 96       	adiw	r26, 0x12	; 18
    4742:	8c 91       	ld	r24, X
    4744:	52 97       	sbiw	r26, 0x12	; 18
    4746:	82 ff       	sbrs	r24, 2
    4748:	12 c0       	rjmp	.+36     	; 0x476e <prvTimerTask+0x18c>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    474a:	6a 81       	ldd	r22, Y+2	; 0x02
    474c:	7b 81       	ldd	r23, Y+3	; 0x03
    474e:	1c 96       	adiw	r26, 0x0c	; 12
    4750:	8d 91       	ld	r24, X+
    4752:	9c 91       	ld	r25, X
    4754:	68 0f       	add	r22, r24
    4756:	79 1f       	adc	r23, r25
    4758:	a6 01       	movw	r20, r12
    475a:	c8 01       	movw	r24, r16
    475c:	0e 94 85 22 	call	0x450a	; 0x450a <prvReloadTimer>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4760:	d8 01       	movw	r26, r16
    4762:	50 96       	adiw	r26, 0x10	; 16
    4764:	ed 91       	ld	r30, X+
    4766:	fc 91       	ld	r31, X
    4768:	c8 01       	movw	r24, r16
    476a:	09 95       	icall
    476c:	6e cf       	rjmp	.-292    	; 0x464a <prvTimerTask+0x68>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    476e:	8e 7f       	andi	r24, 0xFE	; 254
    4770:	f8 01       	movw	r30, r16
    4772:	82 8b       	std	Z+18, r24	; 0x12
    4774:	f5 cf       	rjmp	.-22     	; 0x4760 <prvTimerTask+0x17e>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    4776:	81 60       	ori	r24, 0x01	; 1
    4778:	52 96       	adiw	r26, 0x12	; 18
    477a:	8c 93       	st	X, r24
    477c:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    477e:	6a 81       	ldd	r22, Y+2	; 0x02
    4780:	7b 81       	ldd	r23, Y+3	; 0x03
    4782:	1d 96       	adiw	r26, 0x0d	; 13
    4784:	7c 93       	st	X, r23
    4786:	6e 93       	st	-X, r22
    4788:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    478a:	6c 0d       	add	r22, r12
    478c:	7d 1d       	adc	r23, r13
    478e:	96 01       	movw	r18, r12
    4790:	a6 01       	movw	r20, r12
    4792:	c8 01       	movw	r24, r16
    4794:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <prvInsertTimerInActiveList>
    4798:	58 cf       	rjmp	.-336    	; 0x464a <prvTimerTask+0x68>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    479a:	81 fd       	sbrc	r24, 1
    479c:	04 c0       	rjmp	.+8      	; 0x47a6 <prvTimerTask+0x1c4>
                            {
                                vPortFree( pxTimer );
    479e:	c8 01       	movw	r24, r16
    47a0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vPortFree>
    47a4:	52 cf       	rjmp	.-348    	; 0x464a <prvTimerTask+0x68>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    47a6:	8e 7f       	andi	r24, 0xFE	; 254
    47a8:	f8 01       	movw	r30, r16
    47aa:	82 8b       	std	Z+18, r24	; 0x12
    47ac:	4e cf       	rjmp	.-356    	; 0x464a <prvTimerTask+0x68>

000047ae <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    47ae:	ef 92       	push	r14
    47b0:	ff 92       	push	r15
    47b2:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    47b4:	0e 94 32 22 	call	0x4464	; 0x4464 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    47b8:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <xTimerQueue>
    47bc:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <xTimerQueue+0x1>
    47c0:	89 2b       	or	r24, r25
    47c2:	91 f0       	breq	.+36     	; 0x47e8 <xTimerCreateTimerTask+0x3a>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    47c4:	88 ec       	ldi	r24, 0xC8	; 200
    47c6:	e8 2e       	mov	r14, r24
    47c8:	87 e0       	ldi	r24, 0x07	; 7
    47ca:	f8 2e       	mov	r15, r24
    47cc:	02 e0       	ldi	r16, 0x02	; 2
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	20 e0       	ldi	r18, 0x00	; 0
    47d2:	40 e8       	ldi	r20, 0x80	; 128
    47d4:	6b e2       	ldi	r22, 0x2B	; 43
    47d6:	71 e0       	ldi	r23, 0x01	; 1
    47d8:	81 ef       	ldi	r24, 0xF1	; 241
    47da:	92 e2       	ldi	r25, 0x22	; 34
    47dc:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <xTaskCreate>
        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
    }
    47e0:	0f 91       	pop	r16
    47e2:	ff 90       	pop	r15
    47e4:	ef 90       	pop	r14
    47e6:	08 95       	ret
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    47e8:	80 e0       	ldi	r24, 0x00	; 0

        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
    47ea:	fa cf       	rjmp	.-12     	; 0x47e0 <xTimerCreateTimerTask+0x32>

000047ec <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    47ec:	8f 92       	push	r8
    47ee:	9f 92       	push	r9
    47f0:	af 92       	push	r10
    47f2:	bf 92       	push	r11
    47f4:	cf 92       	push	r12
    47f6:	df 92       	push	r13
    47f8:	ff 92       	push	r15
    47fa:	0f 93       	push	r16
    47fc:	1f 93       	push	r17
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	4c 01       	movw	r8, r24
    4804:	5b 01       	movw	r10, r22
    4806:	f4 2e       	mov	r15, r20
    4808:	69 01       	movw	r12, r18
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    480a:	83 e1       	ldi	r24, 0x13	; 19
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 3e 0b 	call	0x167c	; 0x167c <pvPortMalloc>
    4812:	ec 01       	movw	r28, r24

            if( pxNewTimer != NULL )
    4814:	89 2b       	or	r24, r25
    4816:	a1 f0       	breq	.+40     	; 0x4840 <xTimerCreate+0x54>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    4818:	1a 8a       	std	Y+18, r1	; 0x12
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    481a:	0e 94 32 22 	call	0x4464	; 0x4464 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    481e:	99 82       	std	Y+1, r9	; 0x01
    4820:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    4822:	bd 86       	std	Y+13, r11	; 0x0d
    4824:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    4826:	df 86       	std	Y+15, r13	; 0x0f
    4828:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    482a:	19 8b       	std	Y+17, r17	; 0x11
    482c:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    482e:	ce 01       	movw	r24, r28
    4830:	02 96       	adiw	r24, 0x02	; 2
    4832:	0e 94 98 0b 	call	0x1730	; 0x1730 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    4836:	ff 20       	and	r15, r15
    4838:	19 f0       	breq	.+6      	; 0x4840 <xTimerCreate+0x54>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
    483a:	8a 89       	ldd	r24, Y+18	; 0x12
    483c:	84 60       	ori	r24, 0x04	; 4
    483e:	8a 8b       	std	Y+18, r24	; 0x12
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
        }
    4840:	ce 01       	movw	r24, r28
    4842:	df 91       	pop	r29
    4844:	cf 91       	pop	r28
    4846:	1f 91       	pop	r17
    4848:	0f 91       	pop	r16
    484a:	ff 90       	pop	r15
    484c:	df 90       	pop	r13
    484e:	cf 90       	pop	r12
    4850:	bf 90       	pop	r11
    4852:	af 90       	pop	r10
    4854:	9f 90       	pop	r9
    4856:	8f 90       	pop	r8
    4858:	08 95       	ret

0000485a <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
    485a:	0f 93       	push	r16
    485c:	1f 93       	push	r17
    485e:	cf 93       	push	r28
    4860:	df 93       	push	r29
    4862:	00 d0       	rcall	.+0      	; 0x4864 <xTimerGenericCommandFromTask+0xa>
    4864:	00 d0       	rcall	.+0      	; 0x4866 <xTimerGenericCommandFromTask+0xc>
    4866:	1f 92       	push	r1
    4868:	cd b7       	in	r28, 0x3d	; 61
    486a:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    486c:	20 91 ca 07 	lds	r18, 0x07CA	; 0x8007ca <xTimerQueue>
    4870:	30 91 cb 07 	lds	r19, 0x07CB	; 0x8007cb <xTimerQueue+0x1>
    4874:	23 2b       	or	r18, r19
    4876:	59 f4       	brne	.+22     	; 0x488e <xTimerGenericCommandFromTask+0x34>
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    4878:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
    }
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	df 91       	pop	r29
    4886:	cf 91       	pop	r28
    4888:	1f 91       	pop	r17
    488a:	0f 91       	pop	r16
    488c:	08 95       	ret
        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    488e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4890:	5b 83       	std	Y+3, r21	; 0x03
    4892:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    4894:	9d 83       	std	Y+5, r25	; 0x05
    4896:	8c 83       	std	Y+4, r24	; 0x04

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4898:	66 30       	cpi	r22, 0x06	; 6
    489a:	74 f7       	brge	.-36     	; 0x4878 <xTimerGenericCommandFromTask+0x1e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    489c:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <xTaskGetSchedulerState>
    48a0:	e0 91 ca 07 	lds	r30, 0x07CA	; 0x8007ca <xTimerQueue>
    48a4:	f0 91 cb 07 	lds	r31, 0x07CB	; 0x8007cb <xTimerQueue+0x1>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	a8 01       	movw	r20, r16

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    48ac:	82 30       	cpi	r24, 0x02	; 2
    48ae:	11 f0       	breq	.+4      	; 0x48b4 <xTimerGenericCommandFromTask+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    48b0:	50 e0       	ldi	r21, 0x00	; 0
    48b2:	40 e0       	ldi	r20, 0x00	; 0
    48b4:	be 01       	movw	r22, r28
    48b6:	6f 5f       	subi	r22, 0xFF	; 255
    48b8:	7f 4f       	sbci	r23, 0xFF	; 255
    48ba:	cf 01       	movw	r24, r30
    48bc:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <xQueueGenericSend>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
    48c0:	dc cf       	rjmp	.-72     	; 0x487a <xTimerGenericCommandFromTask+0x20>

000048c2 <xTimerGenericCommandFromISR>:
    BaseType_t xTimerGenericCommandFromISR( TimerHandle_t xTimer,
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
    48c2:	cf 93       	push	r28
    48c4:	df 93       	push	r29
    48c6:	00 d0       	rcall	.+0      	; 0x48c8 <xTimerGenericCommandFromISR+0x6>
    48c8:	00 d0       	rcall	.+0      	; 0x48ca <xTimerGenericCommandFromISR+0x8>
    48ca:	1f 92       	push	r1
    48cc:	cd b7       	in	r28, 0x3d	; 61
    48ce:	de b7       	in	r29, 0x3e	; 62
    48d0:	fc 01       	movw	r30, r24

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    48d2:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <xTimerQueue>
    48d6:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <xTimerQueue+0x1>
    48da:	00 97       	sbiw	r24, 0x00	; 0
    48dc:	49 f4       	brne	.+18     	; 0x48f0 <xTimerGenericCommandFromISR+0x2e>
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    48de:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
    }
    48e0:	0f 90       	pop	r0
    48e2:	0f 90       	pop	r0
    48e4:	0f 90       	pop	r0
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
    48ea:	df 91       	pop	r29
    48ec:	cf 91       	pop	r28
    48ee:	08 95       	ret
        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    48f0:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    48f2:	5b 83       	std	Y+3, r21	; 0x03
    48f4:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    48f6:	fd 83       	std	Y+5, r31	; 0x05
    48f8:	ec 83       	std	Y+4, r30	; 0x04

            configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
    48fa:	66 30       	cpi	r22, 0x06	; 6
    48fc:	84 f3       	brlt	.-32     	; 0x48de <xTimerGenericCommandFromISR+0x1c>
    48fe:	a9 01       	movw	r20, r18
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	be 01       	movw	r22, r28
    4904:	6f 5f       	subi	r22, 0xFF	; 255
    4906:	7f 4f       	sbci	r23, 0xFF	; 255
    4908:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xQueueGenericSendFromISR>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
    490c:	e9 cf       	rjmp	.-46     	; 0x48e0 <xTimerGenericCommandFromISR+0x1e>

0000490e <xTimerGetTimerDaemonTaskHandle>:
        configASSERT( ( xTimerTaskHandle != NULL ) );

        traceRETURN_xTimerGetTimerDaemonTaskHandle( xTimerTaskHandle );

        return xTimerTaskHandle;
    }
    490e:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <xTimerTaskHandle>
    4912:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <xTimerTaskHandle+0x1>
    4916:	08 95       	ret

00004918 <xTimerGetPeriod>:
        configASSERT( xTimer );

        traceRETURN_xTimerGetPeriod( pxTimer->xTimerPeriodInTicks );

        return pxTimer->xTimerPeriodInTicks;
    }
    4918:	fc 01       	movw	r30, r24
    491a:	84 85       	ldd	r24, Z+12	; 0x0c
    491c:	95 85       	ldd	r25, Z+13	; 0x0d
    491e:	08 95       	ret

00004920 <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

    void vTimerSetReloadMode( TimerHandle_t xTimer,
                              const BaseType_t xAutoReload )
    {
    4920:	fc 01       	movw	r30, r24
        Timer_t * pxTimer = xTimer;

        traceENTER_vTimerSetReloadMode( xTimer, xAutoReload );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
    4922:	0f b6       	in	r0, 0x3f	; 63
    4924:	f8 94       	cli
    4926:	0f 92       	push	r0
    4928:	92 89       	ldd	r25, Z+18	; 0x12
        {
            if( xAutoReload != pdFALSE )
    492a:	66 23       	and	r22, r22
    492c:	29 f0       	breq	.+10     	; 0x4938 <vTimerSetReloadMode+0x18>
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
    492e:	94 60       	ori	r25, 0x04	; 4
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
    4930:	92 8b       	std	Z+18, r25	; 0x12
            }
        }
        taskEXIT_CRITICAL();
    4932:	0f 90       	pop	r0
    4934:	0f be       	out	0x3f, r0	; 63

        traceRETURN_vTimerSetReloadMode();
    }
    4936:	08 95       	ret
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
    4938:	9b 7f       	andi	r25, 0xFB	; 251
    493a:	fa cf       	rjmp	.-12     	; 0x4930 <vTimerSetReloadMode+0x10>

0000493c <xTimerGetReloadMode>:
        BaseType_t xReturn;

        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	f8 94       	cli
    4940:	0f 92       	push	r0
            {
                /* Is an auto-reload timer. */
                xReturn = pdTRUE;
            }
        }
        taskEXIT_CRITICAL();
    4942:	0f 90       	pop	r0
    4944:	0f be       	out	0x3f, r0	; 63
        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0U )
    4946:	fc 01       	movw	r30, r24
    4948:	82 89       	ldd	r24, Z+18	; 0x12
        taskEXIT_CRITICAL();

        traceRETURN_xTimerGetReloadMode( xReturn );

        return xReturn;
    }
    494a:	82 fb       	bst	r24, 2
    494c:	88 27       	eor	r24, r24
    494e:	80 f9       	bld	r24, 0
    4950:	08 95       	ret

00004952 <uxTimerGetReloadMode>:
    {
        UBaseType_t uxReturn;

        traceENTER_uxTimerGetReloadMode( xTimer );

        uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
    4952:	0c 94 9e 24 	jmp	0x493c	; 0x493c <xTimerGetReloadMode>

00004956 <xTimerGetExpiryTime>:
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );

        traceRETURN_xTimerGetExpiryTime( xReturn );

        return xReturn;
    }
    4956:	fc 01       	movw	r30, r24
    4958:	82 81       	ldd	r24, Z+2	; 0x02
    495a:	93 81       	ldd	r25, Z+3	; 0x03
    495c:	08 95       	ret

0000495e <pcTimerGetName>:
        configASSERT( xTimer );

        traceRETURN_pcTimerGetName( pxTimer->pcTimerName );

        return pxTimer->pcTimerName;
    }
    495e:	fc 01       	movw	r30, r24
    4960:	80 81       	ld	r24, Z
    4962:	91 81       	ldd	r25, Z+1	; 0x01
    4964:	08 95       	ret

00004966 <xTimerIsTimerActive>:
        traceENTER_xTimerIsTimerActive( xTimer );

        configASSERT( xTimer );

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
    4966:	0f b6       	in	r0, 0x3f	; 63
    4968:	f8 94       	cli
    496a:	0f 92       	push	r0
            else
            {
                xReturn = pdTRUE;
            }
        }
        taskEXIT_CRITICAL();
    496c:	0f 90       	pop	r0
    496e:	0f be       	out	0x3f, r0	; 63
        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0U )
            {
                xReturn = pdFALSE;
    4970:	fc 01       	movw	r30, r24
    4972:	82 89       	ldd	r24, Z+18	; 0x12
        taskEXIT_CRITICAL();

        traceRETURN_xTimerIsTimerActive( xReturn );

        return xReturn;
    }
    4974:	81 70       	andi	r24, 0x01	; 1
    4976:	08 95       	ret

00004978 <pvTimerGetTimerID>:

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    4978:	0f b6       	in	r0, 0x3f	; 63
    497a:	f8 94       	cli
    497c:	0f 92       	push	r0
        {
            pvReturn = pxTimer->pvTimerID;
        }
        taskEXIT_CRITICAL();
    497e:	0f 90       	pop	r0
    4980:	0f be       	out	0x3f, r0	; 63

        traceRETURN_pvTimerGetTimerID( pvReturn );

        return pvReturn;
    }
    4982:	fc 01       	movw	r30, r24
    4984:	86 85       	ldd	r24, Z+14	; 0x0e
    4986:	97 85       	ldd	r25, Z+15	; 0x0f
    4988:	08 95       	ret

0000498a <vTimerSetTimerID>:

        traceENTER_vTimerSetTimerID( xTimer, pvNewID );

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    498a:	0f b6       	in	r0, 0x3f	; 63
    498c:	f8 94       	cli
    498e:	0f 92       	push	r0
        {
            pxTimer->pvTimerID = pvNewID;
    4990:	fc 01       	movw	r30, r24
    4992:	77 87       	std	Z+15, r23	; 0x0f
    4994:	66 87       	std	Z+14, r22	; 0x0e
        }
        taskEXIT_CRITICAL();
    4996:	0f 90       	pop	r0
    4998:	0f be       	out	0x3f, r0	; 63

        traceRETURN_vTimerSetTimerID();
    }
    499a:	08 95       	ret

0000499c <vTimerResetState>:
 * This function must be called by the application before restarting the
 * scheduler.
 */
    void vTimerResetState( void )
    {
        xTimerQueue = NULL;
    499c:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <xTimerQueue+0x1>
    49a0:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <xTimerQueue>
        xTimerTaskHandle = NULL;
    49a4:	10 92 c9 07 	sts	0x07C9, r1	; 0x8007c9 <xTimerTaskHandle+0x1>
    49a8:	10 92 c8 07 	sts	0x07C8, r1	; 0x8007c8 <xTimerTaskHandle>
    }
    49ac:	08 95       	ret

000049ae <main>:


int main(void) {

	// Initialize buttons for interrupts
		Button_Init();
    49ae:	0e 94 47 05 	call	0xa8e	; 0xa8e <Button_Init>
//		LCD_Init();

		DDRD |= (1 << PD6);
    49b2:	8e 9a       	sbi	0x11, 6	; 17

		ADC_INIT(128, AREF);
    49b4:	60 e0       	ldi	r22, 0x00	; 0
    49b6:	80 e8       	ldi	r24, 0x80	; 128
    49b8:	0e 94 bf 03 	call	0x77e	; 0x77e <ADC_INIT>

		poller_Init();
    49bc:	0e 94 28 05 	call	0xa50	; 0xa50 <poller_Init>

		poller_SetPollTime(50);
    49c0:	62 e3       	ldi	r22, 0x32	; 50
    49c2:	70 e0       	ldi	r23, 0x00	; 0
    49c4:	80 e0       	ldi	r24, 0x00	; 0
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	0e 94 32 05 	call	0xa64	; 0xa64 <poller_SetPollTime>
		Poller__StartPolling();
    49cc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <Poller__StartPolling>

		

		Os_Init();
    49d0:	0e 94 76 02 	call	0x4ec	; 0x4ec <Os_Init>
    49d4:	ff cf       	rjmp	.-2      	; 0x49d4 <main+0x26>

000049d6 <__subsf3>:
    49d6:	50 58       	subi	r21, 0x80	; 128

000049d8 <__addsf3>:
    49d8:	bb 27       	eor	r27, r27
    49da:	aa 27       	eor	r26, r26
    49dc:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__addsf3x>
    49e0:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <__fp_round>
    49e4:	0e 94 39 26 	call	0x4c72	; 0x4c72 <__fp_pscA>
    49e8:	38 f0       	brcs	.+14     	; 0x49f8 <__addsf3+0x20>
    49ea:	0e 94 40 26 	call	0x4c80	; 0x4c80 <__fp_pscB>
    49ee:	20 f0       	brcs	.+8      	; 0x49f8 <__addsf3+0x20>
    49f0:	39 f4       	brne	.+14     	; 0x4a00 <__addsf3+0x28>
    49f2:	9f 3f       	cpi	r25, 0xFF	; 255
    49f4:	19 f4       	brne	.+6      	; 0x49fc <__addsf3+0x24>
    49f6:	26 f4       	brtc	.+8      	; 0x4a00 <__addsf3+0x28>
    49f8:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__fp_nan>
    49fc:	0e f4       	brtc	.+2      	; 0x4a00 <__addsf3+0x28>
    49fe:	e0 95       	com	r30
    4a00:	e7 fb       	bst	r30, 7
    4a02:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <__fp_inf>

00004a06 <__addsf3x>:
    4a06:	e9 2f       	mov	r30, r25
    4a08:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__fp_split3>
    4a0c:	58 f3       	brcs	.-42     	; 0x49e4 <__addsf3+0xc>
    4a0e:	ba 17       	cp	r27, r26
    4a10:	62 07       	cpc	r22, r18
    4a12:	73 07       	cpc	r23, r19
    4a14:	84 07       	cpc	r24, r20
    4a16:	95 07       	cpc	r25, r21
    4a18:	20 f0       	brcs	.+8      	; 0x4a22 <__addsf3x+0x1c>
    4a1a:	79 f4       	brne	.+30     	; 0x4a3a <__addsf3x+0x34>
    4a1c:	a6 f5       	brtc	.+104    	; 0x4a86 <__addsf3x+0x80>
    4a1e:	0c 94 7a 26 	jmp	0x4cf4	; 0x4cf4 <__fp_zero>
    4a22:	0e f4       	brtc	.+2      	; 0x4a26 <__addsf3x+0x20>
    4a24:	e0 95       	com	r30
    4a26:	0b 2e       	mov	r0, r27
    4a28:	ba 2f       	mov	r27, r26
    4a2a:	a0 2d       	mov	r26, r0
    4a2c:	0b 01       	movw	r0, r22
    4a2e:	b9 01       	movw	r22, r18
    4a30:	90 01       	movw	r18, r0
    4a32:	0c 01       	movw	r0, r24
    4a34:	ca 01       	movw	r24, r20
    4a36:	a0 01       	movw	r20, r0
    4a38:	11 24       	eor	r1, r1
    4a3a:	ff 27       	eor	r31, r31
    4a3c:	59 1b       	sub	r21, r25
    4a3e:	99 f0       	breq	.+38     	; 0x4a66 <__addsf3x+0x60>
    4a40:	59 3f       	cpi	r21, 0xF9	; 249
    4a42:	50 f4       	brcc	.+20     	; 0x4a58 <__addsf3x+0x52>
    4a44:	50 3e       	cpi	r21, 0xE0	; 224
    4a46:	68 f1       	brcs	.+90     	; 0x4aa2 <__addsf3x+0x9c>
    4a48:	1a 16       	cp	r1, r26
    4a4a:	f0 40       	sbci	r31, 0x00	; 0
    4a4c:	a2 2f       	mov	r26, r18
    4a4e:	23 2f       	mov	r18, r19
    4a50:	34 2f       	mov	r19, r20
    4a52:	44 27       	eor	r20, r20
    4a54:	58 5f       	subi	r21, 0xF8	; 248
    4a56:	f3 cf       	rjmp	.-26     	; 0x4a3e <__addsf3x+0x38>
    4a58:	46 95       	lsr	r20
    4a5a:	37 95       	ror	r19
    4a5c:	27 95       	ror	r18
    4a5e:	a7 95       	ror	r26
    4a60:	f0 40       	sbci	r31, 0x00	; 0
    4a62:	53 95       	inc	r21
    4a64:	c9 f7       	brne	.-14     	; 0x4a58 <__addsf3x+0x52>
    4a66:	7e f4       	brtc	.+30     	; 0x4a86 <__addsf3x+0x80>
    4a68:	1f 16       	cp	r1, r31
    4a6a:	ba 0b       	sbc	r27, r26
    4a6c:	62 0b       	sbc	r22, r18
    4a6e:	73 0b       	sbc	r23, r19
    4a70:	84 0b       	sbc	r24, r20
    4a72:	ba f0       	brmi	.+46     	; 0x4aa2 <__addsf3x+0x9c>
    4a74:	91 50       	subi	r25, 0x01	; 1
    4a76:	a1 f0       	breq	.+40     	; 0x4aa0 <__addsf3x+0x9a>
    4a78:	ff 0f       	add	r31, r31
    4a7a:	bb 1f       	adc	r27, r27
    4a7c:	66 1f       	adc	r22, r22
    4a7e:	77 1f       	adc	r23, r23
    4a80:	88 1f       	adc	r24, r24
    4a82:	c2 f7       	brpl	.-16     	; 0x4a74 <__addsf3x+0x6e>
    4a84:	0e c0       	rjmp	.+28     	; 0x4aa2 <__addsf3x+0x9c>
    4a86:	ba 0f       	add	r27, r26
    4a88:	62 1f       	adc	r22, r18
    4a8a:	73 1f       	adc	r23, r19
    4a8c:	84 1f       	adc	r24, r20
    4a8e:	48 f4       	brcc	.+18     	; 0x4aa2 <__addsf3x+0x9c>
    4a90:	87 95       	ror	r24
    4a92:	77 95       	ror	r23
    4a94:	67 95       	ror	r22
    4a96:	b7 95       	ror	r27
    4a98:	f7 95       	ror	r31
    4a9a:	9e 3f       	cpi	r25, 0xFE	; 254
    4a9c:	08 f0       	brcs	.+2      	; 0x4aa0 <__addsf3x+0x9a>
    4a9e:	b0 cf       	rjmp	.-160    	; 0x4a00 <__addsf3+0x28>
    4aa0:	93 95       	inc	r25
    4aa2:	88 0f       	add	r24, r24
    4aa4:	08 f0       	brcs	.+2      	; 0x4aa8 <__addsf3x+0xa2>
    4aa6:	99 27       	eor	r25, r25
    4aa8:	ee 0f       	add	r30, r30
    4aaa:	97 95       	ror	r25
    4aac:	87 95       	ror	r24
    4aae:	08 95       	ret

00004ab0 <__cmpsf2>:
    4ab0:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__fp_cmp>
    4ab4:	08 f4       	brcc	.+2      	; 0x4ab8 <__cmpsf2+0x8>
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	08 95       	ret

00004aba <__divsf3>:
    4aba:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__divsf3x>
    4abe:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <__fp_round>
    4ac2:	0e 94 40 26 	call	0x4c80	; 0x4c80 <__fp_pscB>
    4ac6:	58 f0       	brcs	.+22     	; 0x4ade <__divsf3+0x24>
    4ac8:	0e 94 39 26 	call	0x4c72	; 0x4c72 <__fp_pscA>
    4acc:	40 f0       	brcs	.+16     	; 0x4ade <__divsf3+0x24>
    4ace:	29 f4       	brne	.+10     	; 0x4ada <__divsf3+0x20>
    4ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    4ad2:	29 f0       	breq	.+10     	; 0x4ade <__divsf3+0x24>
    4ad4:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <__fp_inf>
    4ad8:	51 11       	cpse	r21, r1
    4ada:	0c 94 7b 26 	jmp	0x4cf6	; 0x4cf6 <__fp_szero>
    4ade:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__fp_nan>

00004ae2 <__divsf3x>:
    4ae2:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__fp_split3>
    4ae6:	68 f3       	brcs	.-38     	; 0x4ac2 <__divsf3+0x8>

00004ae8 <__divsf3_pse>:
    4ae8:	99 23       	and	r25, r25
    4aea:	b1 f3       	breq	.-20     	; 0x4ad8 <__divsf3+0x1e>
    4aec:	55 23       	and	r21, r21
    4aee:	91 f3       	breq	.-28     	; 0x4ad4 <__divsf3+0x1a>
    4af0:	95 1b       	sub	r25, r21
    4af2:	55 0b       	sbc	r21, r21
    4af4:	bb 27       	eor	r27, r27
    4af6:	aa 27       	eor	r26, r26
    4af8:	62 17       	cp	r22, r18
    4afa:	73 07       	cpc	r23, r19
    4afc:	84 07       	cpc	r24, r20
    4afe:	38 f0       	brcs	.+14     	; 0x4b0e <__divsf3_pse+0x26>
    4b00:	9f 5f       	subi	r25, 0xFF	; 255
    4b02:	5f 4f       	sbci	r21, 0xFF	; 255
    4b04:	22 0f       	add	r18, r18
    4b06:	33 1f       	adc	r19, r19
    4b08:	44 1f       	adc	r20, r20
    4b0a:	aa 1f       	adc	r26, r26
    4b0c:	a9 f3       	breq	.-22     	; 0x4af8 <__divsf3_pse+0x10>
    4b0e:	35 d0       	rcall	.+106    	; 0x4b7a <__divsf3_pse+0x92>
    4b10:	0e 2e       	mov	r0, r30
    4b12:	3a f0       	brmi	.+14     	; 0x4b22 <__divsf3_pse+0x3a>
    4b14:	e0 e8       	ldi	r30, 0x80	; 128
    4b16:	32 d0       	rcall	.+100    	; 0x4b7c <__divsf3_pse+0x94>
    4b18:	91 50       	subi	r25, 0x01	; 1
    4b1a:	50 40       	sbci	r21, 0x00	; 0
    4b1c:	e6 95       	lsr	r30
    4b1e:	00 1c       	adc	r0, r0
    4b20:	ca f7       	brpl	.-14     	; 0x4b14 <__divsf3_pse+0x2c>
    4b22:	2b d0       	rcall	.+86     	; 0x4b7a <__divsf3_pse+0x92>
    4b24:	fe 2f       	mov	r31, r30
    4b26:	29 d0       	rcall	.+82     	; 0x4b7a <__divsf3_pse+0x92>
    4b28:	66 0f       	add	r22, r22
    4b2a:	77 1f       	adc	r23, r23
    4b2c:	88 1f       	adc	r24, r24
    4b2e:	bb 1f       	adc	r27, r27
    4b30:	26 17       	cp	r18, r22
    4b32:	37 07       	cpc	r19, r23
    4b34:	48 07       	cpc	r20, r24
    4b36:	ab 07       	cpc	r26, r27
    4b38:	b0 e8       	ldi	r27, 0x80	; 128
    4b3a:	09 f0       	breq	.+2      	; 0x4b3e <__divsf3_pse+0x56>
    4b3c:	bb 0b       	sbc	r27, r27
    4b3e:	80 2d       	mov	r24, r0
    4b40:	bf 01       	movw	r22, r30
    4b42:	ff 27       	eor	r31, r31
    4b44:	93 58       	subi	r25, 0x83	; 131
    4b46:	5f 4f       	sbci	r21, 0xFF	; 255
    4b48:	3a f0       	brmi	.+14     	; 0x4b58 <__divsf3_pse+0x70>
    4b4a:	9e 3f       	cpi	r25, 0xFE	; 254
    4b4c:	51 05       	cpc	r21, r1
    4b4e:	78 f0       	brcs	.+30     	; 0x4b6e <__divsf3_pse+0x86>
    4b50:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <__fp_inf>
    4b54:	0c 94 7b 26 	jmp	0x4cf6	; 0x4cf6 <__fp_szero>
    4b58:	5f 3f       	cpi	r21, 0xFF	; 255
    4b5a:	e4 f3       	brlt	.-8      	; 0x4b54 <__divsf3_pse+0x6c>
    4b5c:	98 3e       	cpi	r25, 0xE8	; 232
    4b5e:	d4 f3       	brlt	.-12     	; 0x4b54 <__divsf3_pse+0x6c>
    4b60:	86 95       	lsr	r24
    4b62:	77 95       	ror	r23
    4b64:	67 95       	ror	r22
    4b66:	b7 95       	ror	r27
    4b68:	f7 95       	ror	r31
    4b6a:	9f 5f       	subi	r25, 0xFF	; 255
    4b6c:	c9 f7       	brne	.-14     	; 0x4b60 <__divsf3_pse+0x78>
    4b6e:	88 0f       	add	r24, r24
    4b70:	91 1d       	adc	r25, r1
    4b72:	96 95       	lsr	r25
    4b74:	87 95       	ror	r24
    4b76:	97 f9       	bld	r25, 7
    4b78:	08 95       	ret
    4b7a:	e1 e0       	ldi	r30, 0x01	; 1
    4b7c:	66 0f       	add	r22, r22
    4b7e:	77 1f       	adc	r23, r23
    4b80:	88 1f       	adc	r24, r24
    4b82:	bb 1f       	adc	r27, r27
    4b84:	62 17       	cp	r22, r18
    4b86:	73 07       	cpc	r23, r19
    4b88:	84 07       	cpc	r24, r20
    4b8a:	ba 07       	cpc	r27, r26
    4b8c:	20 f0       	brcs	.+8      	; 0x4b96 <__divsf3_pse+0xae>
    4b8e:	62 1b       	sub	r22, r18
    4b90:	73 0b       	sbc	r23, r19
    4b92:	84 0b       	sbc	r24, r20
    4b94:	ba 0b       	sbc	r27, r26
    4b96:	ee 1f       	adc	r30, r30
    4b98:	88 f7       	brcc	.-30     	; 0x4b7c <__divsf3_pse+0x94>
    4b9a:	e0 95       	com	r30
    4b9c:	08 95       	ret

00004b9e <__floatunsisf>:
    4b9e:	e8 94       	clt
    4ba0:	09 c0       	rjmp	.+18     	; 0x4bb4 <__floatsisf+0x12>

00004ba2 <__floatsisf>:
    4ba2:	97 fb       	bst	r25, 7
    4ba4:	3e f4       	brtc	.+14     	; 0x4bb4 <__floatsisf+0x12>
    4ba6:	90 95       	com	r25
    4ba8:	80 95       	com	r24
    4baa:	70 95       	com	r23
    4bac:	61 95       	neg	r22
    4bae:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    4bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bb4:	99 23       	and	r25, r25
    4bb6:	a9 f0       	breq	.+42     	; 0x4be2 <__floatsisf+0x40>
    4bb8:	f9 2f       	mov	r31, r25
    4bba:	96 e9       	ldi	r25, 0x96	; 150
    4bbc:	bb 27       	eor	r27, r27
    4bbe:	93 95       	inc	r25
    4bc0:	f6 95       	lsr	r31
    4bc2:	87 95       	ror	r24
    4bc4:	77 95       	ror	r23
    4bc6:	67 95       	ror	r22
    4bc8:	b7 95       	ror	r27
    4bca:	f1 11       	cpse	r31, r1
    4bcc:	f8 cf       	rjmp	.-16     	; 0x4bbe <__floatsisf+0x1c>
    4bce:	fa f4       	brpl	.+62     	; 0x4c0e <__floatsisf+0x6c>
    4bd0:	bb 0f       	add	r27, r27
    4bd2:	11 f4       	brne	.+4      	; 0x4bd8 <__floatsisf+0x36>
    4bd4:	60 ff       	sbrs	r22, 0
    4bd6:	1b c0       	rjmp	.+54     	; 0x4c0e <__floatsisf+0x6c>
    4bd8:	6f 5f       	subi	r22, 0xFF	; 255
    4bda:	7f 4f       	sbci	r23, 0xFF	; 255
    4bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    4bde:	9f 4f       	sbci	r25, 0xFF	; 255
    4be0:	16 c0       	rjmp	.+44     	; 0x4c0e <__floatsisf+0x6c>
    4be2:	88 23       	and	r24, r24
    4be4:	11 f0       	breq	.+4      	; 0x4bea <__floatsisf+0x48>
    4be6:	96 e9       	ldi	r25, 0x96	; 150
    4be8:	11 c0       	rjmp	.+34     	; 0x4c0c <__floatsisf+0x6a>
    4bea:	77 23       	and	r23, r23
    4bec:	21 f0       	breq	.+8      	; 0x4bf6 <__floatsisf+0x54>
    4bee:	9e e8       	ldi	r25, 0x8E	; 142
    4bf0:	87 2f       	mov	r24, r23
    4bf2:	76 2f       	mov	r23, r22
    4bf4:	05 c0       	rjmp	.+10     	; 0x4c00 <__floatsisf+0x5e>
    4bf6:	66 23       	and	r22, r22
    4bf8:	71 f0       	breq	.+28     	; 0x4c16 <__floatsisf+0x74>
    4bfa:	96 e8       	ldi	r25, 0x86	; 134
    4bfc:	86 2f       	mov	r24, r22
    4bfe:	70 e0       	ldi	r23, 0x00	; 0
    4c00:	60 e0       	ldi	r22, 0x00	; 0
    4c02:	2a f0       	brmi	.+10     	; 0x4c0e <__floatsisf+0x6c>
    4c04:	9a 95       	dec	r25
    4c06:	66 0f       	add	r22, r22
    4c08:	77 1f       	adc	r23, r23
    4c0a:	88 1f       	adc	r24, r24
    4c0c:	da f7       	brpl	.-10     	; 0x4c04 <__floatsisf+0x62>
    4c0e:	88 0f       	add	r24, r24
    4c10:	96 95       	lsr	r25
    4c12:	87 95       	ror	r24
    4c14:	97 f9       	bld	r25, 7
    4c16:	08 95       	ret

00004c18 <__fp_cmp>:
    4c18:	99 0f       	add	r25, r25
    4c1a:	00 08       	sbc	r0, r0
    4c1c:	55 0f       	add	r21, r21
    4c1e:	aa 0b       	sbc	r26, r26
    4c20:	e0 e8       	ldi	r30, 0x80	; 128
    4c22:	fe ef       	ldi	r31, 0xFE	; 254
    4c24:	16 16       	cp	r1, r22
    4c26:	17 06       	cpc	r1, r23
    4c28:	e8 07       	cpc	r30, r24
    4c2a:	f9 07       	cpc	r31, r25
    4c2c:	c0 f0       	brcs	.+48     	; 0x4c5e <__fp_cmp+0x46>
    4c2e:	12 16       	cp	r1, r18
    4c30:	13 06       	cpc	r1, r19
    4c32:	e4 07       	cpc	r30, r20
    4c34:	f5 07       	cpc	r31, r21
    4c36:	98 f0       	brcs	.+38     	; 0x4c5e <__fp_cmp+0x46>
    4c38:	62 1b       	sub	r22, r18
    4c3a:	73 0b       	sbc	r23, r19
    4c3c:	84 0b       	sbc	r24, r20
    4c3e:	95 0b       	sbc	r25, r21
    4c40:	39 f4       	brne	.+14     	; 0x4c50 <__fp_cmp+0x38>
    4c42:	0a 26       	eor	r0, r26
    4c44:	61 f0       	breq	.+24     	; 0x4c5e <__fp_cmp+0x46>
    4c46:	23 2b       	or	r18, r19
    4c48:	24 2b       	or	r18, r20
    4c4a:	25 2b       	or	r18, r21
    4c4c:	21 f4       	brne	.+8      	; 0x4c56 <__fp_cmp+0x3e>
    4c4e:	08 95       	ret
    4c50:	0a 26       	eor	r0, r26
    4c52:	09 f4       	brne	.+2      	; 0x4c56 <__fp_cmp+0x3e>
    4c54:	a1 40       	sbci	r26, 0x01	; 1
    4c56:	a6 95       	lsr	r26
    4c58:	8f ef       	ldi	r24, 0xFF	; 255
    4c5a:	81 1d       	adc	r24, r1
    4c5c:	81 1d       	adc	r24, r1
    4c5e:	08 95       	ret

00004c60 <__fp_inf>:
    4c60:	97 f9       	bld	r25, 7
    4c62:	9f 67       	ori	r25, 0x7F	; 127
    4c64:	80 e8       	ldi	r24, 0x80	; 128
    4c66:	70 e0       	ldi	r23, 0x00	; 0
    4c68:	60 e0       	ldi	r22, 0x00	; 0
    4c6a:	08 95       	ret

00004c6c <__fp_nan>:
    4c6c:	9f ef       	ldi	r25, 0xFF	; 255
    4c6e:	80 ec       	ldi	r24, 0xC0	; 192
    4c70:	08 95       	ret

00004c72 <__fp_pscA>:
    4c72:	00 24       	eor	r0, r0
    4c74:	0a 94       	dec	r0
    4c76:	16 16       	cp	r1, r22
    4c78:	17 06       	cpc	r1, r23
    4c7a:	18 06       	cpc	r1, r24
    4c7c:	09 06       	cpc	r0, r25
    4c7e:	08 95       	ret

00004c80 <__fp_pscB>:
    4c80:	00 24       	eor	r0, r0
    4c82:	0a 94       	dec	r0
    4c84:	12 16       	cp	r1, r18
    4c86:	13 06       	cpc	r1, r19
    4c88:	14 06       	cpc	r1, r20
    4c8a:	05 06       	cpc	r0, r21
    4c8c:	08 95       	ret

00004c8e <__fp_round>:
    4c8e:	09 2e       	mov	r0, r25
    4c90:	03 94       	inc	r0
    4c92:	00 0c       	add	r0, r0
    4c94:	11 f4       	brne	.+4      	; 0x4c9a <__fp_round+0xc>
    4c96:	88 23       	and	r24, r24
    4c98:	52 f0       	brmi	.+20     	; 0x4cae <__fp_round+0x20>
    4c9a:	bb 0f       	add	r27, r27
    4c9c:	40 f4       	brcc	.+16     	; 0x4cae <__fp_round+0x20>
    4c9e:	bf 2b       	or	r27, r31
    4ca0:	11 f4       	brne	.+4      	; 0x4ca6 <__fp_round+0x18>
    4ca2:	60 ff       	sbrs	r22, 0
    4ca4:	04 c0       	rjmp	.+8      	; 0x4cae <__fp_round+0x20>
    4ca6:	6f 5f       	subi	r22, 0xFF	; 255
    4ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    4caa:	8f 4f       	sbci	r24, 0xFF	; 255
    4cac:	9f 4f       	sbci	r25, 0xFF	; 255
    4cae:	08 95       	ret

00004cb0 <__fp_split3>:
    4cb0:	57 fd       	sbrc	r21, 7
    4cb2:	90 58       	subi	r25, 0x80	; 128
    4cb4:	44 0f       	add	r20, r20
    4cb6:	55 1f       	adc	r21, r21
    4cb8:	59 f0       	breq	.+22     	; 0x4cd0 <__fp_splitA+0x10>
    4cba:	5f 3f       	cpi	r21, 0xFF	; 255
    4cbc:	71 f0       	breq	.+28     	; 0x4cda <__fp_splitA+0x1a>
    4cbe:	47 95       	ror	r20

00004cc0 <__fp_splitA>:
    4cc0:	88 0f       	add	r24, r24
    4cc2:	97 fb       	bst	r25, 7
    4cc4:	99 1f       	adc	r25, r25
    4cc6:	61 f0       	breq	.+24     	; 0x4ce0 <__fp_splitA+0x20>
    4cc8:	9f 3f       	cpi	r25, 0xFF	; 255
    4cca:	79 f0       	breq	.+30     	; 0x4cea <__fp_splitA+0x2a>
    4ccc:	87 95       	ror	r24
    4cce:	08 95       	ret
    4cd0:	12 16       	cp	r1, r18
    4cd2:	13 06       	cpc	r1, r19
    4cd4:	14 06       	cpc	r1, r20
    4cd6:	55 1f       	adc	r21, r21
    4cd8:	f2 cf       	rjmp	.-28     	; 0x4cbe <__fp_split3+0xe>
    4cda:	46 95       	lsr	r20
    4cdc:	f1 df       	rcall	.-30     	; 0x4cc0 <__fp_splitA>
    4cde:	08 c0       	rjmp	.+16     	; 0x4cf0 <__fp_splitA+0x30>
    4ce0:	16 16       	cp	r1, r22
    4ce2:	17 06       	cpc	r1, r23
    4ce4:	18 06       	cpc	r1, r24
    4ce6:	99 1f       	adc	r25, r25
    4ce8:	f1 cf       	rjmp	.-30     	; 0x4ccc <__fp_splitA+0xc>
    4cea:	86 95       	lsr	r24
    4cec:	71 05       	cpc	r23, r1
    4cee:	61 05       	cpc	r22, r1
    4cf0:	08 94       	sec
    4cf2:	08 95       	ret

00004cf4 <__fp_zero>:
    4cf4:	e8 94       	clt

00004cf6 <__fp_szero>:
    4cf6:	bb 27       	eor	r27, r27
    4cf8:	66 27       	eor	r22, r22
    4cfa:	77 27       	eor	r23, r23
    4cfc:	cb 01       	movw	r24, r22
    4cfe:	97 f9       	bld	r25, 7
    4d00:	08 95       	ret

00004d02 <__gesf2>:
    4d02:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__fp_cmp>
    4d06:	08 f4       	brcc	.+2      	; 0x4d0a <__gesf2+0x8>
    4d08:	8f ef       	ldi	r24, 0xFF	; 255
    4d0a:	08 95       	ret
    4d0c:	16 f0       	brts	.+4      	; 0x4d12 <__gesf2+0x10>
    4d0e:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__fp_mpack>
    4d12:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__fp_nan>
    4d16:	68 94       	set
    4d18:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <__fp_inf>

00004d1c <log>:
    4d1c:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__fp_splitA>
    4d20:	a8 f3       	brcs	.-22     	; 0x4d0c <__gesf2+0xa>
    4d22:	99 23       	and	r25, r25
    4d24:	c1 f3       	breq	.-16     	; 0x4d16 <__gesf2+0x14>
    4d26:	ae f3       	brts	.-22     	; 0x4d12 <__gesf2+0x10>
    4d28:	df 93       	push	r29
    4d2a:	cf 93       	push	r28
    4d2c:	1f 93       	push	r17
    4d2e:	0f 93       	push	r16
    4d30:	ff 92       	push	r15
    4d32:	c9 2f       	mov	r28, r25
    4d34:	dd 27       	eor	r29, r29
    4d36:	88 23       	and	r24, r24
    4d38:	2a f0       	brmi	.+10     	; 0x4d44 <log+0x28>
    4d3a:	21 97       	sbiw	r28, 0x01	; 1
    4d3c:	66 0f       	add	r22, r22
    4d3e:	77 1f       	adc	r23, r23
    4d40:	88 1f       	adc	r24, r24
    4d42:	da f7       	brpl	.-10     	; 0x4d3a <log+0x1e>
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	40 e8       	ldi	r20, 0x80	; 128
    4d4a:	5f eb       	ldi	r21, 0xBF	; 191
    4d4c:	9f e3       	ldi	r25, 0x3F	; 63
    4d4e:	88 39       	cpi	r24, 0x98	; 152
    4d50:	20 f0       	brcs	.+8      	; 0x4d5a <log+0x3e>
    4d52:	80 3e       	cpi	r24, 0xE0	; 224
    4d54:	38 f0       	brcs	.+14     	; 0x4d64 <log+0x48>
    4d56:	21 96       	adiw	r28, 0x01	; 1
    4d58:	8f 77       	andi	r24, 0x7F	; 127
    4d5a:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <__addsf3>
    4d5e:	e4 e5       	ldi	r30, 0x54	; 84
    4d60:	f0 e0       	ldi	r31, 0x00	; 0
    4d62:	04 c0       	rjmp	.+8      	; 0x4d6c <log+0x50>
    4d64:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <__addsf3>
    4d68:	e1 e8       	ldi	r30, 0x81	; 129
    4d6a:	f0 e0       	ldi	r31, 0x00	; 0
    4d6c:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__fp_powser>
    4d70:	8b 01       	movw	r16, r22
    4d72:	be 01       	movw	r22, r28
    4d74:	ec 01       	movw	r28, r24
    4d76:	fb 2e       	mov	r15, r27
    4d78:	6f 57       	subi	r22, 0x7F	; 127
    4d7a:	71 09       	sbc	r23, r1
    4d7c:	75 95       	asr	r23
    4d7e:	77 1f       	adc	r23, r23
    4d80:	88 0b       	sbc	r24, r24
    4d82:	99 0b       	sbc	r25, r25
    4d84:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <__floatsisf>
    4d88:	28 e1       	ldi	r18, 0x18	; 24
    4d8a:	32 e7       	ldi	r19, 0x72	; 114
    4d8c:	41 e3       	ldi	r20, 0x31	; 49
    4d8e:	5f e3       	ldi	r21, 0x3F	; 63
    4d90:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3x>
    4d94:	af 2d       	mov	r26, r15
    4d96:	98 01       	movw	r18, r16
    4d98:	ae 01       	movw	r20, r28
    4d9a:	ff 90       	pop	r15
    4d9c:	0f 91       	pop	r16
    4d9e:	1f 91       	pop	r17
    4da0:	cf 91       	pop	r28
    4da2:	df 91       	pop	r29
    4da4:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__addsf3x>
    4da8:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <__fp_round>

00004dac <__mulsf3>:
    4dac:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3x>
    4db0:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <__fp_round>
    4db4:	0e 94 39 26 	call	0x4c72	; 0x4c72 <__fp_pscA>
    4db8:	38 f0       	brcs	.+14     	; 0x4dc8 <__mulsf3+0x1c>
    4dba:	0e 94 40 26 	call	0x4c80	; 0x4c80 <__fp_pscB>
    4dbe:	20 f0       	brcs	.+8      	; 0x4dc8 <__mulsf3+0x1c>
    4dc0:	95 23       	and	r25, r21
    4dc2:	11 f0       	breq	.+4      	; 0x4dc8 <__mulsf3+0x1c>
    4dc4:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <__fp_inf>
    4dc8:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__fp_nan>
    4dcc:	11 24       	eor	r1, r1
    4dce:	0c 94 7b 26 	jmp	0x4cf6	; 0x4cf6 <__fp_szero>

00004dd2 <__mulsf3x>:
    4dd2:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <__fp_split3>
    4dd6:	70 f3       	brcs	.-36     	; 0x4db4 <__mulsf3+0x8>

00004dd8 <__mulsf3_pse>:
    4dd8:	95 9f       	mul	r25, r21
    4dda:	c1 f3       	breq	.-16     	; 0x4dcc <__mulsf3+0x20>
    4ddc:	95 0f       	add	r25, r21
    4dde:	50 e0       	ldi	r21, 0x00	; 0
    4de0:	55 1f       	adc	r21, r21
    4de2:	62 9f       	mul	r22, r18
    4de4:	f0 01       	movw	r30, r0
    4de6:	72 9f       	mul	r23, r18
    4de8:	bb 27       	eor	r27, r27
    4dea:	f0 0d       	add	r31, r0
    4dec:	b1 1d       	adc	r27, r1
    4dee:	63 9f       	mul	r22, r19
    4df0:	aa 27       	eor	r26, r26
    4df2:	f0 0d       	add	r31, r0
    4df4:	b1 1d       	adc	r27, r1
    4df6:	aa 1f       	adc	r26, r26
    4df8:	64 9f       	mul	r22, r20
    4dfa:	66 27       	eor	r22, r22
    4dfc:	b0 0d       	add	r27, r0
    4dfe:	a1 1d       	adc	r26, r1
    4e00:	66 1f       	adc	r22, r22
    4e02:	82 9f       	mul	r24, r18
    4e04:	22 27       	eor	r18, r18
    4e06:	b0 0d       	add	r27, r0
    4e08:	a1 1d       	adc	r26, r1
    4e0a:	62 1f       	adc	r22, r18
    4e0c:	73 9f       	mul	r23, r19
    4e0e:	b0 0d       	add	r27, r0
    4e10:	a1 1d       	adc	r26, r1
    4e12:	62 1f       	adc	r22, r18
    4e14:	83 9f       	mul	r24, r19
    4e16:	a0 0d       	add	r26, r0
    4e18:	61 1d       	adc	r22, r1
    4e1a:	22 1f       	adc	r18, r18
    4e1c:	74 9f       	mul	r23, r20
    4e1e:	33 27       	eor	r19, r19
    4e20:	a0 0d       	add	r26, r0
    4e22:	61 1d       	adc	r22, r1
    4e24:	23 1f       	adc	r18, r19
    4e26:	84 9f       	mul	r24, r20
    4e28:	60 0d       	add	r22, r0
    4e2a:	21 1d       	adc	r18, r1
    4e2c:	82 2f       	mov	r24, r18
    4e2e:	76 2f       	mov	r23, r22
    4e30:	6a 2f       	mov	r22, r26
    4e32:	11 24       	eor	r1, r1
    4e34:	9f 57       	subi	r25, 0x7F	; 127
    4e36:	50 40       	sbci	r21, 0x00	; 0
    4e38:	9a f0       	brmi	.+38     	; 0x4e60 <__mulsf3_pse+0x88>
    4e3a:	f1 f0       	breq	.+60     	; 0x4e78 <__mulsf3_pse+0xa0>
    4e3c:	88 23       	and	r24, r24
    4e3e:	4a f0       	brmi	.+18     	; 0x4e52 <__mulsf3_pse+0x7a>
    4e40:	ee 0f       	add	r30, r30
    4e42:	ff 1f       	adc	r31, r31
    4e44:	bb 1f       	adc	r27, r27
    4e46:	66 1f       	adc	r22, r22
    4e48:	77 1f       	adc	r23, r23
    4e4a:	88 1f       	adc	r24, r24
    4e4c:	91 50       	subi	r25, 0x01	; 1
    4e4e:	50 40       	sbci	r21, 0x00	; 0
    4e50:	a9 f7       	brne	.-22     	; 0x4e3c <__mulsf3_pse+0x64>
    4e52:	9e 3f       	cpi	r25, 0xFE	; 254
    4e54:	51 05       	cpc	r21, r1
    4e56:	80 f0       	brcs	.+32     	; 0x4e78 <__mulsf3_pse+0xa0>
    4e58:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <__fp_inf>
    4e5c:	0c 94 7b 26 	jmp	0x4cf6	; 0x4cf6 <__fp_szero>
    4e60:	5f 3f       	cpi	r21, 0xFF	; 255
    4e62:	e4 f3       	brlt	.-8      	; 0x4e5c <__mulsf3_pse+0x84>
    4e64:	98 3e       	cpi	r25, 0xE8	; 232
    4e66:	d4 f3       	brlt	.-12     	; 0x4e5c <__mulsf3_pse+0x84>
    4e68:	86 95       	lsr	r24
    4e6a:	77 95       	ror	r23
    4e6c:	67 95       	ror	r22
    4e6e:	b7 95       	ror	r27
    4e70:	f7 95       	ror	r31
    4e72:	e7 95       	ror	r30
    4e74:	9f 5f       	subi	r25, 0xFF	; 255
    4e76:	c1 f7       	brne	.-16     	; 0x4e68 <__mulsf3_pse+0x90>
    4e78:	fe 2b       	or	r31, r30
    4e7a:	88 0f       	add	r24, r24
    4e7c:	91 1d       	adc	r25, r1
    4e7e:	96 95       	lsr	r25
    4e80:	87 95       	ror	r24
    4e82:	97 f9       	bld	r25, 7
    4e84:	08 95       	ret

00004e86 <__fp_mpack>:
    4e86:	9f 3f       	cpi	r25, 0xFF	; 255
    4e88:	31 f0       	breq	.+12     	; 0x4e96 <__fp_mpack_finite+0xc>

00004e8a <__fp_mpack_finite>:
    4e8a:	91 50       	subi	r25, 0x01	; 1
    4e8c:	20 f4       	brcc	.+8      	; 0x4e96 <__fp_mpack_finite+0xc>
    4e8e:	87 95       	ror	r24
    4e90:	77 95       	ror	r23
    4e92:	67 95       	ror	r22
    4e94:	b7 95       	ror	r27
    4e96:	88 0f       	add	r24, r24
    4e98:	91 1d       	adc	r25, r1
    4e9a:	96 95       	lsr	r25
    4e9c:	87 95       	ror	r24
    4e9e:	97 f9       	bld	r25, 7
    4ea0:	08 95       	ret

00004ea2 <__fp_powser>:
    4ea2:	df 93       	push	r29
    4ea4:	cf 93       	push	r28
    4ea6:	1f 93       	push	r17
    4ea8:	0f 93       	push	r16
    4eaa:	ff 92       	push	r15
    4eac:	ef 92       	push	r14
    4eae:	df 92       	push	r13
    4eb0:	7b 01       	movw	r14, r22
    4eb2:	8c 01       	movw	r16, r24
    4eb4:	68 94       	set
    4eb6:	06 c0       	rjmp	.+12     	; 0x4ec4 <__fp_powser+0x22>
    4eb8:	da 2e       	mov	r13, r26
    4eba:	ef 01       	movw	r28, r30
    4ebc:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3x>
    4ec0:	fe 01       	movw	r30, r28
    4ec2:	e8 94       	clt
    4ec4:	a5 91       	lpm	r26, Z+
    4ec6:	25 91       	lpm	r18, Z+
    4ec8:	35 91       	lpm	r19, Z+
    4eca:	45 91       	lpm	r20, Z+
    4ecc:	55 91       	lpm	r21, Z+
    4ece:	a6 f3       	brts	.-24     	; 0x4eb8 <__fp_powser+0x16>
    4ed0:	ef 01       	movw	r28, r30
    4ed2:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__addsf3x>
    4ed6:	fe 01       	movw	r30, r28
    4ed8:	97 01       	movw	r18, r14
    4eda:	a8 01       	movw	r20, r16
    4edc:	da 94       	dec	r13
    4ede:	69 f7       	brne	.-38     	; 0x4eba <__fp_powser+0x18>
    4ee0:	df 90       	pop	r13
    4ee2:	ef 90       	pop	r14
    4ee4:	ff 90       	pop	r15
    4ee6:	0f 91       	pop	r16
    4ee8:	1f 91       	pop	r17
    4eea:	cf 91       	pop	r28
    4eec:	df 91       	pop	r29
    4eee:	08 95       	ret

00004ef0 <__udivmodsi4>:
    4ef0:	a1 e2       	ldi	r26, 0x21	; 33
    4ef2:	1a 2e       	mov	r1, r26
    4ef4:	aa 1b       	sub	r26, r26
    4ef6:	bb 1b       	sub	r27, r27
    4ef8:	fd 01       	movw	r30, r26
    4efa:	0d c0       	rjmp	.+26     	; 0x4f16 <__udivmodsi4_ep>

00004efc <__udivmodsi4_loop>:
    4efc:	aa 1f       	adc	r26, r26
    4efe:	bb 1f       	adc	r27, r27
    4f00:	ee 1f       	adc	r30, r30
    4f02:	ff 1f       	adc	r31, r31
    4f04:	a2 17       	cp	r26, r18
    4f06:	b3 07       	cpc	r27, r19
    4f08:	e4 07       	cpc	r30, r20
    4f0a:	f5 07       	cpc	r31, r21
    4f0c:	20 f0       	brcs	.+8      	; 0x4f16 <__udivmodsi4_ep>
    4f0e:	a2 1b       	sub	r26, r18
    4f10:	b3 0b       	sbc	r27, r19
    4f12:	e4 0b       	sbc	r30, r20
    4f14:	f5 0b       	sbc	r31, r21

00004f16 <__udivmodsi4_ep>:
    4f16:	66 1f       	adc	r22, r22
    4f18:	77 1f       	adc	r23, r23
    4f1a:	88 1f       	adc	r24, r24
    4f1c:	99 1f       	adc	r25, r25
    4f1e:	1a 94       	dec	r1
    4f20:	69 f7       	brne	.-38     	; 0x4efc <__udivmodsi4_loop>
    4f22:	60 95       	com	r22
    4f24:	70 95       	com	r23
    4f26:	80 95       	com	r24
    4f28:	90 95       	com	r25
    4f2a:	9b 01       	movw	r18, r22
    4f2c:	ac 01       	movw	r20, r24
    4f2e:	bd 01       	movw	r22, r26
    4f30:	cf 01       	movw	r24, r30
    4f32:	08 95       	ret

00004f34 <__divmodsi4>:
    4f34:	05 2e       	mov	r0, r21
    4f36:	97 fb       	bst	r25, 7
    4f38:	1e f4       	brtc	.+6      	; 0x4f40 <__divmodsi4+0xc>
    4f3a:	00 94       	com	r0
    4f3c:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <__negsi2>
    4f40:	57 fd       	sbrc	r21, 7
    4f42:	07 d0       	rcall	.+14     	; 0x4f52 <__divmodsi4_neg2>
    4f44:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodsi4>
    4f48:	07 fc       	sbrc	r0, 7
    4f4a:	03 d0       	rcall	.+6      	; 0x4f52 <__divmodsi4_neg2>
    4f4c:	4e f4       	brtc	.+18     	; 0x4f60 <__divmodsi4_exit>
    4f4e:	0c 94 b1 27 	jmp	0x4f62	; 0x4f62 <__negsi2>

00004f52 <__divmodsi4_neg2>:
    4f52:	50 95       	com	r21
    4f54:	40 95       	com	r20
    4f56:	30 95       	com	r19
    4f58:	21 95       	neg	r18
    4f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f5c:	4f 4f       	sbci	r20, 0xFF	; 255
    4f5e:	5f 4f       	sbci	r21, 0xFF	; 255

00004f60 <__divmodsi4_exit>:
    4f60:	08 95       	ret

00004f62 <__negsi2>:
    4f62:	90 95       	com	r25
    4f64:	80 95       	com	r24
    4f66:	70 95       	com	r23
    4f68:	61 95       	neg	r22
    4f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f6c:	8f 4f       	sbci	r24, 0xFF	; 255
    4f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f70:	08 95       	ret

00004f72 <__tablejump2__>:
    4f72:	ee 0f       	add	r30, r30
    4f74:	ff 1f       	adc	r31, r31
    4f76:	05 90       	lpm	r0, Z+
    4f78:	f4 91       	lpm	r31, Z
    4f7a:	e0 2d       	mov	r30, r0
    4f7c:	09 94       	ijmp

00004f7e <dtostrf>:
    4f7e:	ef 92       	push	r14
    4f80:	0f 93       	push	r16
    4f82:	1f 93       	push	r17
    4f84:	cf 93       	push	r28
    4f86:	df 93       	push	r29
    4f88:	e8 01       	movw	r28, r16
    4f8a:	34 e0       	ldi	r19, 0x04	; 4
    4f8c:	47 fd       	sbrc	r20, 7
    4f8e:	34 e1       	ldi	r19, 0x14	; 20
    4f90:	04 2e       	mov	r0, r20
    4f92:	00 0c       	add	r0, r0
    4f94:	55 0b       	sbc	r21, r21
    4f96:	57 ff       	sbrs	r21, 7
    4f98:	03 c0       	rjmp	.+6      	; 0x4fa0 <dtostrf+0x22>
    4f9a:	51 95       	neg	r21
    4f9c:	41 95       	neg	r20
    4f9e:	51 09       	sbc	r21, r1
    4fa0:	e3 2e       	mov	r14, r19
    4fa2:	02 2f       	mov	r16, r18
    4fa4:	24 2f       	mov	r18, r20
    4fa6:	ae 01       	movw	r20, r28
    4fa8:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <dtoa_prf>
    4fac:	ce 01       	movw	r24, r28
    4fae:	df 91       	pop	r29
    4fb0:	cf 91       	pop	r28
    4fb2:	1f 91       	pop	r17
    4fb4:	0f 91       	pop	r16
    4fb6:	ef 90       	pop	r14
    4fb8:	08 95       	ret

00004fba <memcpy>:
    4fba:	fb 01       	movw	r30, r22
    4fbc:	dc 01       	movw	r26, r24
    4fbe:	02 c0       	rjmp	.+4      	; 0x4fc4 <memcpy+0xa>
    4fc0:	01 90       	ld	r0, Z+
    4fc2:	0d 92       	st	X+, r0
    4fc4:	41 50       	subi	r20, 0x01	; 1
    4fc6:	50 40       	sbci	r21, 0x00	; 0
    4fc8:	d8 f7       	brcc	.-10     	; 0x4fc0 <memcpy+0x6>
    4fca:	08 95       	ret

00004fcc <dtoa_prf>:
    4fcc:	a9 e0       	ldi	r26, 0x09	; 9
    4fce:	b0 e0       	ldi	r27, 0x00	; 0
    4fd0:	ec ee       	ldi	r30, 0xEC	; 236
    4fd2:	f7 e2       	ldi	r31, 0x27	; 39
    4fd4:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <__prologue_saves__+0xc>
    4fd8:	6a 01       	movw	r12, r20
    4fda:	f2 2e       	mov	r15, r18
    4fdc:	b0 2e       	mov	r11, r16
    4fde:	10 2f       	mov	r17, r16
    4fe0:	fb e3       	ldi	r31, 0x3B	; 59
    4fe2:	af 2e       	mov	r10, r31
    4fe4:	a0 16       	cp	r10, r16
    4fe6:	08 f4       	brcc	.+2      	; 0x4fea <dtoa_prf+0x1e>
    4fe8:	1b e3       	ldi	r17, 0x3B	; 59
    4fea:	1f 5f       	subi	r17, 0xFF	; 255
    4fec:	01 2f       	mov	r16, r17
    4fee:	27 e0       	ldi	r18, 0x07	; 7
    4ff0:	ae 01       	movw	r20, r28
    4ff2:	4f 5f       	subi	r20, 0xFF	; 255
    4ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ff6:	0e 94 45 29 	call	0x528a	; 0x528a <__ftoa_engine>
    4ffa:	bc 01       	movw	r22, r24
    4ffc:	89 81       	ldd	r24, Y+1	; 0x01
    4ffe:	98 2f       	mov	r25, r24
    5000:	99 70       	andi	r25, 0x09	; 9
    5002:	91 30       	cpi	r25, 0x01	; 1
    5004:	09 f4       	brne	.+2      	; 0x5008 <dtoa_prf+0x3c>
    5006:	3f c0       	rjmp	.+126    	; 0x5086 <dtoa_prf+0xba>
    5008:	9b e2       	ldi	r25, 0x2B	; 43
    500a:	e1 fc       	sbrc	r14, 1
    500c:	04 c0       	rjmp	.+8      	; 0x5016 <dtoa_prf+0x4a>
    500e:	9e 2d       	mov	r25, r14
    5010:	91 70       	andi	r25, 0x01	; 1
    5012:	e0 fc       	sbrc	r14, 0
    5014:	3a c0       	rjmp	.+116    	; 0x508a <dtoa_prf+0xbe>
    5016:	5e 2d       	mov	r21, r14
    5018:	50 71       	andi	r21, 0x10	; 16
    501a:	e8 2f       	mov	r30, r24
    501c:	e8 70       	andi	r30, 0x08	; 8
    501e:	83 ff       	sbrs	r24, 3
    5020:	46 c0       	rjmp	.+140    	; 0x50ae <dtoa_prf+0xe2>
    5022:	84 e0       	ldi	r24, 0x04	; 4
    5024:	91 11       	cpse	r25, r1
    5026:	01 c0       	rjmp	.+2      	; 0x502a <dtoa_prf+0x5e>
    5028:	83 e0       	ldi	r24, 0x03	; 3
    502a:	ef 2d       	mov	r30, r15
    502c:	e8 1b       	sub	r30, r24
    502e:	8f 15       	cp	r24, r15
    5030:	08 f0       	brcs	.+2      	; 0x5034 <dtoa_prf+0x68>
    5032:	e0 e0       	ldi	r30, 0x00	; 0
    5034:	d6 01       	movw	r26, r12
    5036:	8e 2f       	mov	r24, r30
    5038:	20 e2       	ldi	r18, 0x20	; 32
    503a:	55 23       	and	r21, r21
    503c:	51 f1       	breq	.+84     	; 0x5092 <dtoa_prf+0xc6>
    503e:	99 23       	and	r25, r25
    5040:	29 f0       	breq	.+10     	; 0x504c <dtoa_prf+0x80>
    5042:	d6 01       	movw	r26, r12
    5044:	9c 93       	st	X, r25
    5046:	c6 01       	movw	r24, r12
    5048:	01 96       	adiw	r24, 0x01	; 1
    504a:	6c 01       	movw	r12, r24
    504c:	96 01       	movw	r18, r12
    504e:	2d 5f       	subi	r18, 0xFD	; 253
    5050:	3f 4f       	sbci	r19, 0xFF	; 255
    5052:	e2 fe       	sbrs	r14, 2
    5054:	24 c0       	rjmp	.+72     	; 0x509e <dtoa_prf+0xd2>
    5056:	8e e4       	ldi	r24, 0x4E	; 78
    5058:	d6 01       	movw	r26, r12
    505a:	8c 93       	st	X, r24
    505c:	91 e4       	ldi	r25, 0x41	; 65
    505e:	11 96       	adiw	r26, 0x01	; 1
    5060:	9c 93       	st	X, r25
    5062:	11 97       	sbiw	r26, 0x01	; 1
    5064:	12 96       	adiw	r26, 0x02	; 2
    5066:	8c 93       	st	X, r24
    5068:	d9 01       	movw	r26, r18
    506a:	8e 2f       	mov	r24, r30
    506c:	90 e2       	ldi	r25, 0x20	; 32
    506e:	81 11       	cpse	r24, r1
    5070:	1b c0       	rjmp	.+54     	; 0x50a8 <dtoa_prf+0xdc>
    5072:	e2 0f       	add	r30, r18
    5074:	f3 2f       	mov	r31, r19
    5076:	f1 1d       	adc	r31, r1
    5078:	10 82       	st	Z, r1
    507a:	8e ef       	ldi	r24, 0xFE	; 254
    507c:	9f ef       	ldi	r25, 0xFF	; 255
    507e:	29 96       	adiw	r28, 0x09	; 9
    5080:	ec e0       	ldi	r30, 0x0C	; 12
    5082:	0c 94 3f 2a 	jmp	0x547e	; 0x547e <__epilogue_restores__+0xc>
    5086:	9d e2       	ldi	r25, 0x2D	; 45
    5088:	c6 cf       	rjmp	.-116    	; 0x5016 <dtoa_prf+0x4a>
    508a:	90 e2       	ldi	r25, 0x20	; 32
    508c:	c4 cf       	rjmp	.-120    	; 0x5016 <dtoa_prf+0x4a>
    508e:	2d 93       	st	X+, r18
    5090:	81 50       	subi	r24, 0x01	; 1
    5092:	81 11       	cpse	r24, r1
    5094:	fc cf       	rjmp	.-8      	; 0x508e <dtoa_prf+0xc2>
    5096:	ce 0e       	add	r12, r30
    5098:	d1 1c       	adc	r13, r1
    509a:	e0 e0       	ldi	r30, 0x00	; 0
    509c:	d0 cf       	rjmp	.-96     	; 0x503e <dtoa_prf+0x72>
    509e:	8e e6       	ldi	r24, 0x6E	; 110
    50a0:	d6 01       	movw	r26, r12
    50a2:	8c 93       	st	X, r24
    50a4:	91 e6       	ldi	r25, 0x61	; 97
    50a6:	db cf       	rjmp	.-74     	; 0x505e <dtoa_prf+0x92>
    50a8:	9d 93       	st	X+, r25
    50aa:	81 50       	subi	r24, 0x01	; 1
    50ac:	e0 cf       	rjmp	.-64     	; 0x506e <dtoa_prf+0xa2>
    50ae:	48 2f       	mov	r20, r24
    50b0:	44 70       	andi	r20, 0x04	; 4
    50b2:	82 ff       	sbrs	r24, 2
    50b4:	3d c0       	rjmp	.+122    	; 0x5130 <dtoa_prf+0x164>
    50b6:	84 e0       	ldi	r24, 0x04	; 4
    50b8:	91 11       	cpse	r25, r1
    50ba:	01 c0       	rjmp	.+2      	; 0x50be <dtoa_prf+0xf2>
    50bc:	83 e0       	ldi	r24, 0x03	; 3
    50be:	8f 15       	cp	r24, r15
    50c0:	10 f4       	brcc	.+4      	; 0x50c6 <dtoa_prf+0xfa>
    50c2:	ef 2d       	mov	r30, r15
    50c4:	e8 1b       	sub	r30, r24
    50c6:	d6 01       	movw	r26, r12
    50c8:	8e 2f       	mov	r24, r30
    50ca:	20 e2       	ldi	r18, 0x20	; 32
    50cc:	55 23       	and	r21, r21
    50ce:	09 f1       	breq	.+66     	; 0x5112 <dtoa_prf+0x146>
    50d0:	99 23       	and	r25, r25
    50d2:	29 f0       	breq	.+10     	; 0x50de <dtoa_prf+0x112>
    50d4:	d6 01       	movw	r26, r12
    50d6:	9c 93       	st	X, r25
    50d8:	c6 01       	movw	r24, r12
    50da:	01 96       	adiw	r24, 0x01	; 1
    50dc:	6c 01       	movw	r12, r24
    50de:	96 01       	movw	r18, r12
    50e0:	2d 5f       	subi	r18, 0xFD	; 253
    50e2:	3f 4f       	sbci	r19, 0xFF	; 255
    50e4:	e2 fe       	sbrs	r14, 2
    50e6:	1b c0       	rjmp	.+54     	; 0x511e <dtoa_prf+0x152>
    50e8:	89 e4       	ldi	r24, 0x49	; 73
    50ea:	d6 01       	movw	r26, r12
    50ec:	8c 93       	st	X, r24
    50ee:	8e e4       	ldi	r24, 0x4E	; 78
    50f0:	11 96       	adiw	r26, 0x01	; 1
    50f2:	8c 93       	st	X, r24
    50f4:	11 97       	sbiw	r26, 0x01	; 1
    50f6:	86 e4       	ldi	r24, 0x46	; 70
    50f8:	12 96       	adiw	r26, 0x02	; 2
    50fa:	8c 93       	st	X, r24
    50fc:	d9 01       	movw	r26, r18
    50fe:	8e 2f       	mov	r24, r30
    5100:	90 e2       	ldi	r25, 0x20	; 32
    5102:	88 23       	and	r24, r24
    5104:	09 f4       	brne	.+2      	; 0x5108 <dtoa_prf+0x13c>
    5106:	b5 cf       	rjmp	.-150    	; 0x5072 <dtoa_prf+0xa6>
    5108:	9d 93       	st	X+, r25
    510a:	81 50       	subi	r24, 0x01	; 1
    510c:	fa cf       	rjmp	.-12     	; 0x5102 <dtoa_prf+0x136>
    510e:	2d 93       	st	X+, r18
    5110:	81 50       	subi	r24, 0x01	; 1
    5112:	81 11       	cpse	r24, r1
    5114:	fc cf       	rjmp	.-8      	; 0x510e <dtoa_prf+0x142>
    5116:	ce 0e       	add	r12, r30
    5118:	d1 1c       	adc	r13, r1
    511a:	e0 e0       	ldi	r30, 0x00	; 0
    511c:	d9 cf       	rjmp	.-78     	; 0x50d0 <dtoa_prf+0x104>
    511e:	89 e6       	ldi	r24, 0x69	; 105
    5120:	d6 01       	movw	r26, r12
    5122:	8c 93       	st	X, r24
    5124:	8e e6       	ldi	r24, 0x6E	; 110
    5126:	11 96       	adiw	r26, 0x01	; 1
    5128:	8c 93       	st	X, r24
    512a:	11 97       	sbiw	r26, 0x01	; 1
    512c:	86 e6       	ldi	r24, 0x66	; 102
    512e:	e4 cf       	rjmp	.-56     	; 0x50f8 <dtoa_prf+0x12c>
    5130:	9b 01       	movw	r18, r22
    5132:	77 ff       	sbrs	r23, 7
    5134:	02 c0       	rjmp	.+4      	; 0x513a <dtoa_prf+0x16e>
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	a1 e0       	ldi	r26, 0x01	; 1
    513c:	b0 e0       	ldi	r27, 0x00	; 0
    513e:	91 11       	cpse	r25, r1
    5140:	02 c0       	rjmp	.+4      	; 0x5146 <dtoa_prf+0x17a>
    5142:	b0 e0       	ldi	r27, 0x00	; 0
    5144:	a0 e0       	ldi	r26, 0x00	; 0
    5146:	f9 01       	movw	r30, r18
    5148:	31 96       	adiw	r30, 0x01	; 1
    514a:	ae 0f       	add	r26, r30
    514c:	bf 1f       	adc	r27, r31
    514e:	8b 2c       	mov	r8, r11
    5150:	91 2c       	mov	r9, r1
    5152:	bb 20       	and	r11, r11
    5154:	09 f4       	brne	.+2      	; 0x5158 <dtoa_prf+0x18c>
    5156:	61 c0       	rjmp	.+194    	; 0x521a <dtoa_prf+0x24e>
    5158:	54 01       	movw	r10, r8
    515a:	ef ef       	ldi	r30, 0xFF	; 255
    515c:	ae 1a       	sub	r10, r30
    515e:	be 0a       	sbc	r11, r30
    5160:	aa 0d       	add	r26, r10
    5162:	bb 1d       	adc	r27, r11
    5164:	fa 16       	cp	r15, r26
    5166:	1b 06       	cpc	r1, r27
    5168:	19 f0       	breq	.+6      	; 0x5170 <dtoa_prf+0x1a4>
    516a:	14 f0       	brlt	.+4      	; 0x5170 <dtoa_prf+0x1a4>
    516c:	4f 2d       	mov	r20, r15
    516e:	4a 1b       	sub	r20, r26
    5170:	51 11       	cpse	r21, r1
    5172:	88 c0       	rjmp	.+272    	; 0x5284 <dtoa_prf+0x2b8>
    5174:	e3 fc       	sbrc	r14, 3
    5176:	59 c0       	rjmp	.+178    	; 0x522a <dtoa_prf+0x25e>
    5178:	76 01       	movw	r14, r12
    517a:	a4 2f       	mov	r26, r20
    517c:	b0 e2       	ldi	r27, 0x20	; 32
    517e:	a1 11       	cpse	r26, r1
    5180:	4f c0       	rjmp	.+158    	; 0x5220 <dtoa_prf+0x254>
    5182:	c4 0e       	add	r12, r20
    5184:	d1 1c       	adc	r13, r1
    5186:	99 23       	and	r25, r25
    5188:	09 f4       	brne	.+2      	; 0x518c <dtoa_prf+0x1c0>
    518a:	5b c0       	rjmp	.+182    	; 0x5242 <dtoa_prf+0x276>
    518c:	40 e0       	ldi	r20, 0x00	; 0
    518e:	d6 01       	movw	r26, r12
    5190:	11 96       	adiw	r26, 0x01	; 1
    5192:	f6 01       	movw	r30, r12
    5194:	90 83       	st	Z, r25
    5196:	6d 01       	movw	r12, r26
    5198:	55 23       	and	r21, r21
    519a:	09 f4       	brne	.+2      	; 0x519e <dtoa_prf+0x1d2>
    519c:	48 c0       	rjmp	.+144    	; 0x522e <dtoa_prf+0x262>
    519e:	01 2f       	mov	r16, r17
    51a0:	06 0f       	add	r16, r22
    51a2:	9a 81       	ldd	r25, Y+2	; 0x02
    51a4:	58 2f       	mov	r21, r24
    51a6:	50 71       	andi	r21, 0x10	; 16
    51a8:	84 ff       	sbrs	r24, 4
    51aa:	03 c0       	rjmp	.+6      	; 0x51b2 <dtoa_prf+0x1e6>
    51ac:	91 33       	cpi	r25, 0x31	; 49
    51ae:	09 f4       	brne	.+2      	; 0x51b2 <dtoa_prf+0x1e6>
    51b0:	01 50       	subi	r16, 0x01	; 1
    51b2:	10 16       	cp	r1, r16
    51b4:	0c f0       	brlt	.+2      	; 0x51b8 <dtoa_prf+0x1ec>
    51b6:	47 c0       	rjmp	.+142    	; 0x5246 <dtoa_prf+0x27a>
    51b8:	09 30       	cpi	r16, 0x09	; 9
    51ba:	08 f0       	brcs	.+2      	; 0x51be <dtoa_prf+0x1f2>
    51bc:	08 e0       	ldi	r16, 0x08	; 8
    51be:	ee e2       	ldi	r30, 0x2E	; 46
    51c0:	fe 2e       	mov	r15, r30
    51c2:	5b 01       	movw	r10, r22
    51c4:	a0 1a       	sub	r10, r16
    51c6:	b1 08       	sbc	r11, r1
    51c8:	85 01       	movw	r16, r10
    51ca:	91 94       	neg	r9
    51cc:	81 94       	neg	r8
    51ce:	91 08       	sbc	r9, r1
    51d0:	2f 3f       	cpi	r18, 0xFF	; 255
    51d2:	32 07       	cpc	r19, r18
    51d4:	29 f4       	brne	.+10     	; 0x51e0 <dtoa_prf+0x214>
    51d6:	d6 01       	movw	r26, r12
    51d8:	fc 92       	st	X, r15
    51da:	f6 01       	movw	r30, r12
    51dc:	31 96       	adiw	r30, 0x01	; 1
    51de:	6f 01       	movw	r12, r30
    51e0:	62 17       	cp	r22, r18
    51e2:	73 07       	cpc	r23, r19
    51e4:	94 f1       	brlt	.+100    	; 0x524a <dtoa_prf+0x27e>
    51e6:	02 17       	cp	r16, r18
    51e8:	13 07       	cpc	r17, r19
    51ea:	7c f5       	brge	.+94     	; 0x524a <dtoa_prf+0x27e>
    51ec:	db 01       	movw	r26, r22
    51ee:	a2 1b       	sub	r26, r18
    51f0:	b3 0b       	sbc	r27, r19
    51f2:	aa 24       	eor	r10, r10
    51f4:	a3 94       	inc	r10
    51f6:	b1 2c       	mov	r11, r1
    51f8:	ac 0e       	add	r10, r28
    51fa:	bd 1e       	adc	r11, r29
    51fc:	aa 0d       	add	r26, r10
    51fe:	bb 1d       	adc	r27, r11
    5200:	11 96       	adiw	r26, 0x01	; 1
    5202:	8c 91       	ld	r24, X
    5204:	21 50       	subi	r18, 0x01	; 1
    5206:	31 09       	sbc	r19, r1
    5208:	d6 01       	movw	r26, r12
    520a:	11 96       	adiw	r26, 0x01	; 1
    520c:	28 15       	cp	r18, r8
    520e:	39 05       	cpc	r19, r9
    5210:	f4 f0       	brlt	.+60     	; 0x524e <dtoa_prf+0x282>
    5212:	f6 01       	movw	r30, r12
    5214:	80 83       	st	Z, r24
    5216:	6d 01       	movw	r12, r26
    5218:	db cf       	rjmp	.-74     	; 0x51d0 <dtoa_prf+0x204>
    521a:	b1 2c       	mov	r11, r1
    521c:	a1 2c       	mov	r10, r1
    521e:	a0 cf       	rjmp	.-192    	; 0x5160 <dtoa_prf+0x194>
    5220:	f7 01       	movw	r30, r14
    5222:	b1 93       	st	Z+, r27
    5224:	7f 01       	movw	r14, r30
    5226:	a1 50       	subi	r26, 0x01	; 1
    5228:	aa cf       	rjmp	.-172    	; 0x517e <dtoa_prf+0x1b2>
    522a:	91 11       	cpse	r25, r1
    522c:	b0 cf       	rjmp	.-160    	; 0x518e <dtoa_prf+0x1c2>
    522e:	d6 01       	movw	r26, r12
    5230:	94 2f       	mov	r25, r20
    5232:	50 e3       	ldi	r21, 0x30	; 48
    5234:	02 c0       	rjmp	.+4      	; 0x523a <dtoa_prf+0x26e>
    5236:	5d 93       	st	X+, r21
    5238:	91 50       	subi	r25, 0x01	; 1
    523a:	91 11       	cpse	r25, r1
    523c:	fc cf       	rjmp	.-8      	; 0x5236 <dtoa_prf+0x26a>
    523e:	c4 0e       	add	r12, r20
    5240:	d1 1c       	adc	r13, r1
    5242:	40 e0       	ldi	r20, 0x00	; 0
    5244:	ac cf       	rjmp	.-168    	; 0x519e <dtoa_prf+0x1d2>
    5246:	01 e0       	ldi	r16, 0x01	; 1
    5248:	ba cf       	rjmp	.-140    	; 0x51be <dtoa_prf+0x1f2>
    524a:	80 e3       	ldi	r24, 0x30	; 48
    524c:	db cf       	rjmp	.-74     	; 0x5204 <dtoa_prf+0x238>
    524e:	62 17       	cp	r22, r18
    5250:	73 07       	cpc	r23, r19
    5252:	31 f4       	brne	.+12     	; 0x5260 <dtoa_prf+0x294>
    5254:	96 33       	cpi	r25, 0x36	; 54
    5256:	88 f4       	brcc	.+34     	; 0x527a <dtoa_prf+0x2ae>
    5258:	95 33       	cpi	r25, 0x35	; 53
    525a:	11 f4       	brne	.+4      	; 0x5260 <dtoa_prf+0x294>
    525c:	55 23       	and	r21, r21
    525e:	69 f0       	breq	.+26     	; 0x527a <dtoa_prf+0x2ae>
    5260:	f6 01       	movw	r30, r12
    5262:	80 83       	st	Z, r24
    5264:	fd 01       	movw	r30, r26
    5266:	84 2f       	mov	r24, r20
    5268:	90 e2       	ldi	r25, 0x20	; 32
    526a:	81 11       	cpse	r24, r1
    526c:	08 c0       	rjmp	.+16     	; 0x527e <dtoa_prf+0x2b2>
    526e:	a4 0f       	add	r26, r20
    5270:	b1 1d       	adc	r27, r1
    5272:	1c 92       	st	X, r1
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	80 e0       	ldi	r24, 0x00	; 0
    5278:	02 cf       	rjmp	.-508    	; 0x507e <dtoa_prf+0xb2>
    527a:	81 e3       	ldi	r24, 0x31	; 49
    527c:	f1 cf       	rjmp	.-30     	; 0x5260 <dtoa_prf+0x294>
    527e:	91 93       	st	Z+, r25
    5280:	81 50       	subi	r24, 0x01	; 1
    5282:	f3 cf       	rjmp	.-26     	; 0x526a <dtoa_prf+0x29e>
    5284:	91 11       	cpse	r25, r1
    5286:	83 cf       	rjmp	.-250    	; 0x518e <dtoa_prf+0x1c2>
    5288:	8a cf       	rjmp	.-236    	; 0x519e <dtoa_prf+0x1d2>

0000528a <__ftoa_engine>:
    528a:	28 30       	cpi	r18, 0x08	; 8
    528c:	08 f0       	brcs	.+2      	; 0x5290 <__ftoa_engine+0x6>
    528e:	27 e0       	ldi	r18, 0x07	; 7
    5290:	33 27       	eor	r19, r19
    5292:	da 01       	movw	r26, r20
    5294:	99 0f       	add	r25, r25
    5296:	31 1d       	adc	r19, r1
    5298:	87 fd       	sbrc	r24, 7
    529a:	91 60       	ori	r25, 0x01	; 1
    529c:	00 96       	adiw	r24, 0x00	; 0
    529e:	61 05       	cpc	r22, r1
    52a0:	71 05       	cpc	r23, r1
    52a2:	39 f4       	brne	.+14     	; 0x52b2 <__ftoa_engine+0x28>
    52a4:	32 60       	ori	r19, 0x02	; 2
    52a6:	2e 5f       	subi	r18, 0xFE	; 254
    52a8:	3d 93       	st	X+, r19
    52aa:	30 e3       	ldi	r19, 0x30	; 48
    52ac:	2a 95       	dec	r18
    52ae:	e1 f7       	brne	.-8      	; 0x52a8 <__ftoa_engine+0x1e>
    52b0:	08 95       	ret
    52b2:	9f 3f       	cpi	r25, 0xFF	; 255
    52b4:	30 f0       	brcs	.+12     	; 0x52c2 <__ftoa_engine+0x38>
    52b6:	80 38       	cpi	r24, 0x80	; 128
    52b8:	71 05       	cpc	r23, r1
    52ba:	61 05       	cpc	r22, r1
    52bc:	09 f0       	breq	.+2      	; 0x52c0 <__ftoa_engine+0x36>
    52be:	3c 5f       	subi	r19, 0xFC	; 252
    52c0:	3c 5f       	subi	r19, 0xFC	; 252
    52c2:	3d 93       	st	X+, r19
    52c4:	91 30       	cpi	r25, 0x01	; 1
    52c6:	08 f0       	brcs	.+2      	; 0x52ca <__ftoa_engine+0x40>
    52c8:	80 68       	ori	r24, 0x80	; 128
    52ca:	91 1d       	adc	r25, r1
    52cc:	df 93       	push	r29
    52ce:	cf 93       	push	r28
    52d0:	1f 93       	push	r17
    52d2:	0f 93       	push	r16
    52d4:	ff 92       	push	r15
    52d6:	ef 92       	push	r14
    52d8:	19 2f       	mov	r17, r25
    52da:	98 7f       	andi	r25, 0xF8	; 248
    52dc:	96 95       	lsr	r25
    52de:	e9 2f       	mov	r30, r25
    52e0:	96 95       	lsr	r25
    52e2:	96 95       	lsr	r25
    52e4:	e9 0f       	add	r30, r25
    52e6:	ff 27       	eor	r31, r31
    52e8:	e8 5f       	subi	r30, 0xF8	; 248
    52ea:	fe 4f       	sbci	r31, 0xFE	; 254
    52ec:	99 27       	eor	r25, r25
    52ee:	33 27       	eor	r19, r19
    52f0:	ee 24       	eor	r14, r14
    52f2:	ff 24       	eor	r15, r15
    52f4:	a7 01       	movw	r20, r14
    52f6:	e7 01       	movw	r28, r14
    52f8:	05 90       	lpm	r0, Z+
    52fa:	08 94       	sec
    52fc:	07 94       	ror	r0
    52fe:	28 f4       	brcc	.+10     	; 0x530a <__ftoa_engine+0x80>
    5300:	36 0f       	add	r19, r22
    5302:	e7 1e       	adc	r14, r23
    5304:	f8 1e       	adc	r15, r24
    5306:	49 1f       	adc	r20, r25
    5308:	51 1d       	adc	r21, r1
    530a:	66 0f       	add	r22, r22
    530c:	77 1f       	adc	r23, r23
    530e:	88 1f       	adc	r24, r24
    5310:	99 1f       	adc	r25, r25
    5312:	06 94       	lsr	r0
    5314:	a1 f7       	brne	.-24     	; 0x52fe <__ftoa_engine+0x74>
    5316:	05 90       	lpm	r0, Z+
    5318:	07 94       	ror	r0
    531a:	28 f4       	brcc	.+10     	; 0x5326 <__ftoa_engine+0x9c>
    531c:	e7 0e       	add	r14, r23
    531e:	f8 1e       	adc	r15, r24
    5320:	49 1f       	adc	r20, r25
    5322:	56 1f       	adc	r21, r22
    5324:	c1 1d       	adc	r28, r1
    5326:	77 0f       	add	r23, r23
    5328:	88 1f       	adc	r24, r24
    532a:	99 1f       	adc	r25, r25
    532c:	66 1f       	adc	r22, r22
    532e:	06 94       	lsr	r0
    5330:	a1 f7       	brne	.-24     	; 0x531a <__ftoa_engine+0x90>
    5332:	05 90       	lpm	r0, Z+
    5334:	07 94       	ror	r0
    5336:	28 f4       	brcc	.+10     	; 0x5342 <__ftoa_engine+0xb8>
    5338:	f8 0e       	add	r15, r24
    533a:	49 1f       	adc	r20, r25
    533c:	56 1f       	adc	r21, r22
    533e:	c7 1f       	adc	r28, r23
    5340:	d1 1d       	adc	r29, r1
    5342:	88 0f       	add	r24, r24
    5344:	99 1f       	adc	r25, r25
    5346:	66 1f       	adc	r22, r22
    5348:	77 1f       	adc	r23, r23
    534a:	06 94       	lsr	r0
    534c:	a1 f7       	brne	.-24     	; 0x5336 <__ftoa_engine+0xac>
    534e:	05 90       	lpm	r0, Z+
    5350:	07 94       	ror	r0
    5352:	20 f4       	brcc	.+8      	; 0x535c <__ftoa_engine+0xd2>
    5354:	49 0f       	add	r20, r25
    5356:	56 1f       	adc	r21, r22
    5358:	c7 1f       	adc	r28, r23
    535a:	d8 1f       	adc	r29, r24
    535c:	99 0f       	add	r25, r25
    535e:	66 1f       	adc	r22, r22
    5360:	77 1f       	adc	r23, r23
    5362:	88 1f       	adc	r24, r24
    5364:	06 94       	lsr	r0
    5366:	a9 f7       	brne	.-22     	; 0x5352 <__ftoa_engine+0xc8>
    5368:	84 91       	lpm	r24, Z
    536a:	10 95       	com	r17
    536c:	17 70       	andi	r17, 0x07	; 7
    536e:	41 f0       	breq	.+16     	; 0x5380 <__ftoa_engine+0xf6>
    5370:	d6 95       	lsr	r29
    5372:	c7 95       	ror	r28
    5374:	57 95       	ror	r21
    5376:	47 95       	ror	r20
    5378:	f7 94       	ror	r15
    537a:	e7 94       	ror	r14
    537c:	1a 95       	dec	r17
    537e:	c1 f7       	brne	.-16     	; 0x5370 <__ftoa_engine+0xe6>
    5380:	ee ea       	ldi	r30, 0xAE	; 174
    5382:	f0 e0       	ldi	r31, 0x00	; 0
    5384:	68 94       	set
    5386:	15 90       	lpm	r1, Z+
    5388:	15 91       	lpm	r17, Z+
    538a:	35 91       	lpm	r19, Z+
    538c:	65 91       	lpm	r22, Z+
    538e:	95 91       	lpm	r25, Z+
    5390:	05 90       	lpm	r0, Z+
    5392:	7f e2       	ldi	r23, 0x2F	; 47
    5394:	73 95       	inc	r23
    5396:	e1 18       	sub	r14, r1
    5398:	f1 0a       	sbc	r15, r17
    539a:	43 0b       	sbc	r20, r19
    539c:	56 0b       	sbc	r21, r22
    539e:	c9 0b       	sbc	r28, r25
    53a0:	d0 09       	sbc	r29, r0
    53a2:	c0 f7       	brcc	.-16     	; 0x5394 <__ftoa_engine+0x10a>
    53a4:	e1 0c       	add	r14, r1
    53a6:	f1 1e       	adc	r15, r17
    53a8:	43 1f       	adc	r20, r19
    53aa:	56 1f       	adc	r21, r22
    53ac:	c9 1f       	adc	r28, r25
    53ae:	d0 1d       	adc	r29, r0
    53b0:	7e f4       	brtc	.+30     	; 0x53d0 <__ftoa_engine+0x146>
    53b2:	70 33       	cpi	r23, 0x30	; 48
    53b4:	11 f4       	brne	.+4      	; 0x53ba <__ftoa_engine+0x130>
    53b6:	8a 95       	dec	r24
    53b8:	e6 cf       	rjmp	.-52     	; 0x5386 <__ftoa_engine+0xfc>
    53ba:	e8 94       	clt
    53bc:	01 50       	subi	r16, 0x01	; 1
    53be:	30 f0       	brcs	.+12     	; 0x53cc <__ftoa_engine+0x142>
    53c0:	08 0f       	add	r16, r24
    53c2:	0a f4       	brpl	.+2      	; 0x53c6 <__ftoa_engine+0x13c>
    53c4:	00 27       	eor	r16, r16
    53c6:	02 17       	cp	r16, r18
    53c8:	08 f4       	brcc	.+2      	; 0x53cc <__ftoa_engine+0x142>
    53ca:	20 2f       	mov	r18, r16
    53cc:	23 95       	inc	r18
    53ce:	02 2f       	mov	r16, r18
    53d0:	7a 33       	cpi	r23, 0x3A	; 58
    53d2:	28 f0       	brcs	.+10     	; 0x53de <__ftoa_engine+0x154>
    53d4:	79 e3       	ldi	r23, 0x39	; 57
    53d6:	7d 93       	st	X+, r23
    53d8:	2a 95       	dec	r18
    53da:	e9 f7       	brne	.-6      	; 0x53d6 <__ftoa_engine+0x14c>
    53dc:	10 c0       	rjmp	.+32     	; 0x53fe <__ftoa_engine+0x174>
    53de:	7d 93       	st	X+, r23
    53e0:	2a 95       	dec	r18
    53e2:	89 f6       	brne	.-94     	; 0x5386 <__ftoa_engine+0xfc>
    53e4:	06 94       	lsr	r0
    53e6:	97 95       	ror	r25
    53e8:	67 95       	ror	r22
    53ea:	37 95       	ror	r19
    53ec:	17 95       	ror	r17
    53ee:	17 94       	ror	r1
    53f0:	e1 18       	sub	r14, r1
    53f2:	f1 0a       	sbc	r15, r17
    53f4:	43 0b       	sbc	r20, r19
    53f6:	56 0b       	sbc	r21, r22
    53f8:	c9 0b       	sbc	r28, r25
    53fa:	d0 09       	sbc	r29, r0
    53fc:	98 f0       	brcs	.+38     	; 0x5424 <__ftoa_engine+0x19a>
    53fe:	23 95       	inc	r18
    5400:	7e 91       	ld	r23, -X
    5402:	73 95       	inc	r23
    5404:	7a 33       	cpi	r23, 0x3A	; 58
    5406:	08 f0       	brcs	.+2      	; 0x540a <__ftoa_engine+0x180>
    5408:	70 e3       	ldi	r23, 0x30	; 48
    540a:	7c 93       	st	X, r23
    540c:	20 13       	cpse	r18, r16
    540e:	b8 f7       	brcc	.-18     	; 0x53fe <__ftoa_engine+0x174>
    5410:	7e 91       	ld	r23, -X
    5412:	70 61       	ori	r23, 0x10	; 16
    5414:	7d 93       	st	X+, r23
    5416:	30 f0       	brcs	.+12     	; 0x5424 <__ftoa_engine+0x19a>
    5418:	83 95       	inc	r24
    541a:	71 e3       	ldi	r23, 0x31	; 49
    541c:	7d 93       	st	X+, r23
    541e:	70 e3       	ldi	r23, 0x30	; 48
    5420:	2a 95       	dec	r18
    5422:	e1 f7       	brne	.-8      	; 0x541c <__ftoa_engine+0x192>
    5424:	11 24       	eor	r1, r1
    5426:	ef 90       	pop	r14
    5428:	ff 90       	pop	r15
    542a:	0f 91       	pop	r16
    542c:	1f 91       	pop	r17
    542e:	cf 91       	pop	r28
    5430:	df 91       	pop	r29
    5432:	99 27       	eor	r25, r25
    5434:	87 fd       	sbrc	r24, 7
    5436:	90 95       	com	r25
    5438:	08 95       	ret

0000543a <__prologue_saves__>:
    543a:	2f 92       	push	r2
    543c:	3f 92       	push	r3
    543e:	4f 92       	push	r4
    5440:	5f 92       	push	r5
    5442:	6f 92       	push	r6
    5444:	7f 92       	push	r7
    5446:	8f 92       	push	r8
    5448:	9f 92       	push	r9
    544a:	af 92       	push	r10
    544c:	bf 92       	push	r11
    544e:	cf 92       	push	r12
    5450:	df 92       	push	r13
    5452:	ef 92       	push	r14
    5454:	ff 92       	push	r15
    5456:	0f 93       	push	r16
    5458:	1f 93       	push	r17
    545a:	cf 93       	push	r28
    545c:	df 93       	push	r29
    545e:	cd b7       	in	r28, 0x3d	; 61
    5460:	de b7       	in	r29, 0x3e	; 62
    5462:	ca 1b       	sub	r28, r26
    5464:	db 0b       	sbc	r29, r27
    5466:	0f b6       	in	r0, 0x3f	; 63
    5468:	f8 94       	cli
    546a:	de bf       	out	0x3e, r29	; 62
    546c:	0f be       	out	0x3f, r0	; 63
    546e:	cd bf       	out	0x3d, r28	; 61
    5470:	09 94       	ijmp

00005472 <__epilogue_restores__>:
    5472:	2a 88       	ldd	r2, Y+18	; 0x12
    5474:	39 88       	ldd	r3, Y+17	; 0x11
    5476:	48 88       	ldd	r4, Y+16	; 0x10
    5478:	5f 84       	ldd	r5, Y+15	; 0x0f
    547a:	6e 84       	ldd	r6, Y+14	; 0x0e
    547c:	7d 84       	ldd	r7, Y+13	; 0x0d
    547e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5480:	9b 84       	ldd	r9, Y+11	; 0x0b
    5482:	aa 84       	ldd	r10, Y+10	; 0x0a
    5484:	b9 84       	ldd	r11, Y+9	; 0x09
    5486:	c8 84       	ldd	r12, Y+8	; 0x08
    5488:	df 80       	ldd	r13, Y+7	; 0x07
    548a:	ee 80       	ldd	r14, Y+6	; 0x06
    548c:	fd 80       	ldd	r15, Y+5	; 0x05
    548e:	0c 81       	ldd	r16, Y+4	; 0x04
    5490:	1b 81       	ldd	r17, Y+3	; 0x03
    5492:	aa 81       	ldd	r26, Y+2	; 0x02
    5494:	b9 81       	ldd	r27, Y+1	; 0x01
    5496:	ce 0f       	add	r28, r30
    5498:	d1 1d       	adc	r29, r1
    549a:	0f b6       	in	r0, 0x3f	; 63
    549c:	f8 94       	cli
    549e:	de bf       	out	0x3e, r29	; 62
    54a0:	0f be       	out	0x3f, r0	; 63
    54a2:	cd bf       	out	0x3d, r28	; 61
    54a4:	ed 01       	movw	r28, r26
    54a6:	08 95       	ret

000054a8 <_exit>:
    54a8:	f8 94       	cli

000054aa <__stop_program>:
    54aa:	ff cf       	rjmp	.-2      	; 0x54aa <__stop_program>
