
EV_charging_station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000565e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  0000565e  000056f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006cc  00800144  00800144  000057d6  2**0
                  ALLOC
  3 .stab         0000e3e8  00000000  00000000  000057d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007697  00000000  00000000  00013bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0001b257  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0001b288  2**2
                  CONTENTS, READONLY
  7 .avr.prop     0000002c  00000000  00000000  0001b2c4  2**0
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0001b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  0001b7d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0001bc79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0001bc93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_1>
       8:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_2>
       c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      10:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      14:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      18:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      1c:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__vector_7>
      20:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      24:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      28:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      34:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      3c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      44:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      4c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <ADC_PRESCALER_SET+0x30>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
	...

000000ae <__trampolines_end>:
      ae:	00 40       	sbci	r16, 0x00	; 0
      b0:	7a 10       	cpse	r7, r10
      b2:	f3 5a       	subi	r31, 0xA3	; 163
      b4:	00 a0       	ldd	r0, Z+32	; 0x20
      b6:	72 4e       	sbci	r23, 0xE2	; 226
      b8:	18 09       	sbc	r17, r8
      ba:	00 10       	cpse	r0, r0
      bc:	a5 d4       	rcall	.+2378   	; 0xa08 <notify>
      be:	e8 00       	.word	0x00e8	; ????
      c0:	00 e8       	ldi	r16, 0x80	; 128
      c2:	76 48       	sbci	r23, 0x86	; 134
      c4:	17 00       	.word	0x0017	; ????
      c6:	00 e4       	ldi	r16, 0x40	; 64
      c8:	0b 54       	subi	r16, 0x4B	; 75
      ca:	02 00       	.word	0x0002	; ????
      cc:	00 ca       	rjmp	.-3072   	; 0xfffff4ce <__eeprom_end+0xff7ef4ce>
      ce:	9a 3b       	cpi	r25, 0xBA	; 186
      d0:	00 00       	nop
      d2:	00 e1       	ldi	r16, 0x10	; 16
      d4:	f5 05       	cpc	r31, r5
      d6:	00 00       	nop
      d8:	80 96       	adiw	r24, 0x20	; 32
      da:	98 00       	.word	0x0098	; ????
      dc:	00 00       	nop
      de:	40 42       	sbci	r20, 0x20	; 32
      e0:	0f 00       	.word	0x000f	; ????
      e2:	00 00       	nop
      e4:	a0 86       	std	Z+8, r10	; 0x08
      e6:	01 00       	.word	0x0001	; ????
      e8:	00 00       	nop
      ea:	10 27       	eor	r17, r16
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	e8 03       	fmulsu	r22, r16
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	64 00       	.word	0x0064	; ????
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	0a 00       	.word	0x000a	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	2c 76       	andi	r18, 0x6C	; 108
     10a:	d8 88       	ldd	r13, Y+16	; 0x10
     10c:	dc 67       	ori	r29, 0x7C	; 124
     10e:	4f 08       	sbc	r4, r15
     110:	23 df       	rcall	.-442    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     112:	c1 df       	rcall	.-126    	; 0x96 <__SREG__+0x57>
     114:	ae 59       	subi	r26, 0x9E	; 158
     116:	e1 b1       	in	r30, 0x01	; 1
     118:	b7 96       	adiw	r30, 0x27	; 39
     11a:	e5 e3       	ldi	r30, 0x35	; 53
     11c:	e4 53       	subi	r30, 0x34	; 52
     11e:	c6 3a       	cpi	r28, 0xA6	; 166
     120:	e6 51       	subi	r30, 0x16	; 22
     122:	99 76       	andi	r25, 0x69	; 105
     124:	96 e8       	ldi	r25, 0x86	; 134
     126:	e6 c2       	rjmp	.+1484   	; 0x6f4 <vTimer1Callback+0xc>
     128:	84 26       	eor	r8, r20
     12a:	eb 89       	ldd	r30, Y+19	; 0x13
     12c:	8c 9b       	sbis	0x11, 4	; 17
     12e:	62 ed       	ldi	r22, 0xD2	; 210
     130:	40 7c       	andi	r20, 0xC0	; 192
     132:	6f fc       	.word	0xfc6f	; ????
     134:	ef bc       	out	0x2f, r14	; 47
     136:	9c 9f       	mul	r25, r28
     138:	40 f2       	brcs	.-112    	; 0xca <__trampolines_end+0x1c>
     13a:	ba a5       	ldd	r27, Y+42	; 0x2a
     13c:	6f a5       	ldd	r22, Y+47	; 0x2f
     13e:	f4 90       	lpm	r15, Z
     140:	05 5a       	subi	r16, 0xA5	; 165
     142:	2a f7       	brpl	.-54     	; 0x10e <__trampolines_end+0x60>
     144:	5c 93       	st	X, r21
     146:	6b 6c       	ori	r22, 0xCB	; 203
     148:	f9 67       	ori	r31, 0x79	; 121
     14a:	6d c1       	rjmp	.+730    	; 0x426 <TaskChargingStart+0x12>
     14c:	1b fc       	.word	0xfc1b	; ????
     14e:	e0 e4       	ldi	r30, 0x40	; 64
     150:	0d 47       	sbci	r16, 0x7D	; 125
     152:	fe f5       	brtc	.+126    	; 0x1d2 <.do_clear_bss_loop>
     154:	20 e6       	ldi	r18, 0x60	; 96
     156:	b5 00       	.word	0x00b5	; ????
     158:	d0 ed       	ldi	r29, 0xD0	; 208
     15a:	90 2e       	mov	r9, r16
     15c:	03 00       	.word	0x0003	; ????
     15e:	94 35       	cpi	r25, 0x54	; 84
     160:	77 05       	cpc	r23, r7
     162:	00 80       	ld	r0, Z
     164:	84 1e       	adc	r8, r20
     166:	08 00       	.word	0x0008	; ????
     168:	00 20       	and	r0, r0
     16a:	4e 0a       	sbc	r4, r30
     16c:	00 00       	nop
     16e:	00 c8       	rjmp	.-4096   	; 0xfffff170 <__eeprom_end+0xff7ef170>
     170:	0c 33       	cpi	r16, 0x3C	; 60
     172:	33 33       	cpi	r19, 0x33	; 51
     174:	33 0f       	add	r19, r19
     176:	98 6e       	ori	r25, 0xE8	; 232
     178:	12 83       	std	Z+2, r17	; 0x02
     17a:	11 41       	sbci	r17, 0x11	; 17
     17c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     17e:	21 14       	cp	r2, r1
     180:	89 3b       	cpi	r24, 0xB9	; 185
     182:	e6 55       	subi	r30, 0x56	; 86
     184:	16 cf       	rjmp	.-468    	; 0xffffffb2 <__eeprom_end+0xff7effb2>
     186:	fe e6       	ldi	r31, 0x6E	; 110
     188:	db 18       	sub	r13, r11
     18a:	d1 84       	ldd	r13, Z+9	; 0x09
     18c:	4b 38       	cpi	r20, 0x8B	; 139
     18e:	1b f7       	brvc	.-58     	; 0x156 <__trampolines_end+0xa8>
     190:	7c 1d       	adc	r23, r12
     192:	90 1d       	adc	r25, r0
     194:	a4 bb       	out	0x14, r26	; 20
     196:	e4 24       	eor	r14, r4
     198:	20 32       	cpi	r18, 0x20	; 32
     19a:	84 72       	andi	r24, 0x24	; 36
     19c:	5e 22       	and	r5, r30
     19e:	81 00       	.word	0x0081	; ????
     1a0:	c9 f1       	breq	.+114    	; 0x214 <TaskDisplayRefresh+0x2e>
     1a2:	24 ec       	ldi	r18, 0xC4	; 196
     1a4:	a1 e5       	ldi	r26, 0x51	; 81
     1a6:	3d 27       	eor	r19, r29

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf e5       	ldi	r28, 0x5F	; 95
     1ae:	d8 e0       	ldi	r29, 0x08	; 8
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e6       	ldi	r26, 0x60	; 96
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	ee e5       	ldi	r30, 0x5E	; 94
     1bc:	f6 e5       	ldi	r31, 0x56	; 86
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
     1c0:	05 90       	lpm	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	a4 34       	cpi	r26, 0x44	; 68
     1c6:	b1 07       	cpc	r27, r17
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
     1ca:	28 e0       	ldi	r18, 0x08	; 8
     1cc:	a4 e4       	ldi	r26, 0x44	; 68
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
     1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
     1d4:	a0 31       	cpi	r26, 0x10	; 16
     1d6:	b2 07       	cpc	r27, r18
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
     1da:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <main>
     1de:	0c 94 2d 2b 	jmp	0x565a	; 0x565a <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e6 <TaskDisplayRefresh>:
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	2a 97       	sbiw	r28, 0x0a	; 10
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	0e 94 16 1a 	call	0x342c	; 0x342c <xTaskGetTickCount>
     1fe:	9a 87       	std	Y+10, r25	; 0x0a
     200:	89 87       	std	Y+9, r24	; 0x09
     202:	00 e4       	ldi	r16, 0x40	; 64
     204:	8e 9a       	sbi	0x11, 6	; 17
     206:	82 b3       	in	r24, 0x12	; 18
     208:	80 27       	eor	r24, r16
     20a:	82 bb       	out	0x12, r24	; 18
     20c:	0e 94 2c 08 	call	0x1058	; 0x1058 <LCD_Clear>
     210:	8b e8       	ldi	r24, 0x8B	; 139
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 09 08 	call	0x1012	; 0x1012 <LCD_String>
     218:	6a e0       	ldi	r22, 0x0A	; 10
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     220:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     224:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xQueueSemaphoreTake>
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <TaskDisplayRefresh+0x60>
     22c:	10 91 46 01 	lds	r17, 0x0146	; 0x800146 <globalState>
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     23e:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     242:	0e 94 67 0f 	call	0x1ece	; 0x1ece <xQueueGenericSend>
     246:	12 30       	cpi	r17, 0x02	; 2
     248:	31 f1       	breq	.+76     	; 0x296 <TaskDisplayRefresh+0xb0>
     24a:	68 f4       	brcc	.+26     	; 0x266 <TaskDisplayRefresh+0x80>
     24c:	11 23       	and	r17, r17
     24e:	f1 f0       	breq	.+60     	; 0x28c <TaskDisplayRefresh+0xa6>
     250:	87 e9       	ldi	r24, 0x97	; 151
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	11 30       	cpi	r17, 0x01	; 1
     256:	e1 f0       	breq	.+56     	; 0x290 <TaskDisplayRefresh+0xaa>
     258:	64 e6       	ldi	r22, 0x64	; 100
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	ce 01       	movw	r24, r28
     25e:	09 96       	adiw	r24, 0x09	; 9
     260:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <xTaskDelayUntil>
     264:	cf cf       	rjmp	.-98     	; 0x204 <TaskDisplayRefresh+0x1e>
     266:	13 30       	cpi	r17, 0x03	; 3
     268:	b1 f1       	breq	.+108    	; 0x2d6 <TaskDisplayRefresh+0xf0>
     26a:	14 30       	cpi	r17, 0x04	; 4
     26c:	a9 f7       	brne	.-22     	; 0x258 <TaskDisplayRefresh+0x72>
     26e:	81 eb       	ldi	r24, 0xB1	; 177
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 09 08 	call	0x1012	; 0x1012 <LCD_String>
     276:	80 ec       	ldi	r24, 0xC0	; 192
     278:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
     27c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <is_overcurrent>
     280:	88 23       	and	r24, r24
     282:	09 f4       	brne	.+2      	; 0x286 <TaskDisplayRefresh+0xa0>
     284:	44 c0       	rjmp	.+136    	; 0x30e <TaskDisplayRefresh+0x128>
     286:	87 eb       	ldi	r24, 0xB7	; 183
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <TaskDisplayRefresh+0xaa>
     28c:	82 e9       	ldi	r24, 0x92	; 146
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 09 08 	call	0x1012	; 0x1012 <LCD_String>
     294:	e1 cf       	rjmp	.-62     	; 0x258 <TaskDisplayRefresh+0x72>
     296:	8d e9       	ldi	r24, 0x9D	; 157
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 09 08 	call	0x1012	; 0x1012 <LCD_String>
     29e:	80 ec       	ldi	r24, 0xC0	; 192
     2a0:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
     2a4:	8b e2       	ldi	r24, 0x2B	; 43
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 09 08 	call	0x1012	; 0x1012 <LCD_String>
     2ac:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cap_percentage>
     2b0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cap_percentage+0x1>
     2b4:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <cap_percentage+0x2>
     2b8:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <cap_percentage+0x3>
     2bc:	8d 83       	std	Y+5, r24	; 0x05
     2be:	9e 83       	std	Y+6, r25	; 0x06
     2c0:	af 83       	std	Y+7, r26	; 0x07
     2c2:	b8 87       	std	Y+8, r27	; 0x08
     2c4:	6d 81       	ldd	r22, Y+5	; 0x05
     2c6:	7e 81       	ldd	r23, Y+6	; 0x06
     2c8:	8f 81       	ldd	r24, Y+7	; 0x07
     2ca:	98 85       	ldd	r25, Y+8	; 0x08
     2cc:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_Float>
     2d0:	84 ea       	ldi	r24, 0xA4	; 164
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	dd cf       	rjmp	.-70     	; 0x290 <TaskDisplayRefresh+0xaa>
     2d6:	87 ea       	ldi	r24, 0xA7	; 167
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 09 08 	call	0x1012	; 0x1012 <LCD_String>
     2de:	80 ec       	ldi	r24, 0xC0	; 192
     2e0:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
     2e4:	8b e2       	ldi	r24, 0x2B	; 43
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 09 08 	call	0x1012	; 0x1012 <LCD_String>
     2ec:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cap_percentage>
     2f0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cap_percentage+0x1>
     2f4:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <cap_percentage+0x2>
     2f8:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <cap_percentage+0x3>
     2fc:	89 83       	std	Y+1, r24	; 0x01
     2fe:	9a 83       	std	Y+2, r25	; 0x02
     300:	ab 83       	std	Y+3, r26	; 0x03
     302:	bc 83       	std	Y+4, r27	; 0x04
     304:	69 81       	ldd	r22, Y+1	; 0x01
     306:	7a 81       	ldd	r23, Y+2	; 0x02
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	df cf       	rjmp	.-66     	; 0x2cc <TaskDisplayRefresh+0xe6>
     30e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <is_sudden_disconnect>
     312:	88 23       	and	r24, r24
     314:	09 f4       	brne	.+2      	; 0x318 <TaskDisplayRefresh+0x132>
     316:	a0 cf       	rjmp	.-192    	; 0x258 <TaskDisplayRefresh+0x72>
     318:	84 ec       	ldi	r24, 0xC4	; 196
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	b9 cf       	rjmp	.-142    	; 0x290 <TaskDisplayRefresh+0xaa>

0000031e <VehicleCheckTask>:




void VehicleCheckTask(void *pvParameters) {
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     31e:	4f ef       	ldi	r20, 0xFF	; 255
     320:	5f ef       	ldi	r21, 0xFF	; 255
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <ulTaskGenericNotifyTake>
    
    static uint16_t adc_OC_Check_value = 0;
    static uint16_t adc_connection_check = 0;
    
    while (1) {
        SystemState local_state = globalState;
     32a:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <globalState>
        
        adc_connection_check = ADC_READ(VEHICLE_CONNECTION_CHECK_PIN);
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	0e 94 82 04 	call	0x904	; 0x904 <ADC_READ>
     334:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
     338:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
        adc_OC_Check_value = ADC_READ(VEHICLE_OVERCURRENT_CHECK_PIN);
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	0e 94 82 04 	call	0x904	; 0x904 <ADC_READ>


        // Check if the ADC value is above the threshold
        if (adc_connection_check < CONNECTION_THRESHOLD) {
     342:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     346:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
     34a:	84 38       	cpi	r24, 0x84	; 132
     34c:	23 e0       	ldi	r18, 0x03	; 3
     34e:	92 07       	cpc	r25, r18
     350:	38 f5       	brcc	.+78     	; 0x3a0 <VehicleCheckTask+0x82>
            is_connected = 1;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <is_connected>
            if ((globalState == IDLE)) {
     358:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
     35c:	81 11       	cpse	r24, r1
     35e:	01 c0       	rjmp	.+2      	; 0x362 <VehicleCheckTask+0x44>
                
                local_state = READY;
     360:	c1 e0       	ldi	r28, 0x01	; 1
            } else if ( globalState != FAULT_DETECTION){ 
                local_state = IDLE;
            }
        }

        if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     362:	6f ef       	ldi	r22, 0xFF	; 255
     364:	7f ef       	ldi	r23, 0xFF	; 255
     366:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     36a:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     36e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xQueueSemaphoreTake>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	81 f4       	brne	.+32     	; 0x396 <VehicleCheckTask+0x78>
            if (globalState != local_state) {
     376:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
     37a:	8c 13       	cpse	r24, r28
                
                globalState = local_state;
     37c:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <globalState>
                
            }
            xSemaphoreGive(stateSemaphore);
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     38e:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     392:	0e 94 67 0f 	call	0x1ece	; 0x1ece <xQueueGenericSend>
        }

        // vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(VEHICLE_CHECK_PERIOD));
        vTaskDelay(pdMS_TO_TICKS(200));
     396:	88 ec       	ldi	r24, 0xC8	; 200
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 2b 1c 	call	0x3856	; 0x3856 <vTaskDelay>
    // TickType_t xLastWakeTime = xTaskGetTickCount(); 
    
    static uint16_t adc_OC_Check_value = 0;
    static uint16_t adc_connection_check = 0;
    
    while (1) {
     39e:	c5 cf       	rjmp	.-118    	; 0x32a <VehicleCheckTask+0xc>
            if ((globalState == IDLE)) {
                
                local_state = READY;
                
            }
        } else if (adc_connection_check > CONNECTION_THRESHOLD){
     3a0:	84 38       	cpi	r24, 0x84	; 132
     3a2:	93 40       	sbci	r25, 0x03	; 3
     3a4:	f1 f2       	breq	.-68     	; 0x362 <VehicleCheckTask+0x44>
            is_connected = 0;
     3a6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <is_connected>
            if ((globalState == CHARGING)) {    
     3aa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	29 f4       	brne	.+10     	; 0x3bc <VehicleCheckTask+0x9e>
                // charging_state = STOP;
                // xTaskNotifyGive(xSuddenDisconnect_Task_Handle);
                is_sudden_disconnect = 1;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <is_sudden_disconnect>
                local_state = FAULT_DETECTION;
     3b8:	c4 e0       	ldi	r28, 0x04	; 4
     3ba:	d3 cf       	rjmp	.-90     	; 0x362 <VehicleCheckTask+0x44>
            } else if ( globalState != FAULT_DETECTION){ 
     3bc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
     3c0:	84 30       	cpi	r24, 0x04	; 4
     3c2:	79 f2       	breq	.-98     	; 0x362 <VehicleCheckTask+0x44>
                local_state = IDLE;
     3c4:	c0 e0       	ldi	r28, 0x00	; 0
     3c6:	cd cf       	rjmp	.-102    	; 0x362 <VehicleCheckTask+0x44>

000003c8 <Overcurrent_Task>:
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

        is_overcurrent = 1;
        
        if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
            globalState = FAULT_DETECTION;
     3c8:	c4 e0       	ldi	r28, 0x04	; 4

// Overcurrent detection task
void Overcurrent_Task(void *pvParameters) {
    while (1) {
        // Wait for the overcurrent flag to be set
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     3ca:	4f ef       	ldi	r20, 0xFF	; 255
     3cc:	5f ef       	ldi	r21, 0xFF	; 255
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <ulTaskGenericNotifyTake>

        is_overcurrent = 1;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <is_overcurrent>
        
        if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     3dc:	6f ef       	ldi	r22, 0xFF	; 255
     3de:	7f ef       	ldi	r23, 0xFF	; 255
     3e0:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     3e4:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     3e8:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xQueueSemaphoreTake>
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	69 f4       	brne	.+26     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
            globalState = FAULT_DETECTION;
     3f0:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <globalState>
            xSemaphoreGive(stateSemaphore);
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     402:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     406:	0e 94 67 0f 	call	0x1ece	; 0x1ece <xQueueGenericSend>
        }
        // PORTC |= (1 << PC0); // Set PC0 to high
        vTaskDelay(pdMS_TO_TICKS(1000));
     40a:	88 ee       	ldi	r24, 0xE8	; 232
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	0e 94 2b 1c 	call	0x3856	; 0x3856 <vTaskDelay>

// Overcurrent detection task
void Overcurrent_Task(void *pvParameters) {
    while (1) {
        // Wait for the overcurrent flag to be set
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     412:	db cf       	rjmp	.-74     	; 0x3ca <Overcurrent_Task+0x2>

00000414 <TaskChargingStart>:




// Task to Handle Charging Start
void TaskChargingStart(void *pvParameters) {
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	1f 92       	push	r1
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
                    
                } else if (globalState == READY || globalState == DISCHARGING) {
                    Charge_Logic();

                    if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
                        globalState = CHARGING;
     41e:	12 e0       	ldi	r17, 0x02	; 2

// Task to Handle Charging Start
void TaskChargingStart(void *pvParameters) {
    uint8_t event;
    for (;;) {
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
     420:	4f ef       	ldi	r20, 0xFF	; 255
     422:	5f ef       	ldi	r21, 0xFF	; 255
     424:	be 01       	movw	r22, r28
     426:	6f 5f       	subi	r22, 0xFF	; 255
     428:	7f 4f       	sbci	r23, 0xFF	; 255
     42a:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <buttonQueue>
     42e:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <buttonQueue+0x1>
     432:	0e 94 60 10 	call	0x20c0	; 0x20c0 <xQueueReceive>
     436:	88 23       	and	r24, r24
     438:	99 f3       	breq	.-26     	; 0x420 <TaskChargingStart+0xc>
            if (event == START_BUTTON_EVENT) {
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	81 f7       	brne	.-32     	; 0x420 <TaskChargingStart+0xc>
                if (globalState == FAULT_DETECTION) {
     440:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
     444:	84 30       	cpi	r24, 0x04	; 4
     446:	e1 f4       	brne	.+56     	; 0x480 <TaskChargingStart+0x6c>
                    is_overcurrent = 0;
     448:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <is_overcurrent>
                    is_sudden_disconnect = 0;
     44c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <is_sudden_disconnect>
                    if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     450:	6f ef       	ldi	r22, 0xFF	; 255
     452:	7f ef       	ldi	r23, 0xFF	; 255
     454:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     458:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     45c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xQueueSemaphoreTake>
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	f1 f6       	brne	.-68     	; 0x420 <TaskChargingStart+0xc>
                        globalState = IDLE;
     464:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <globalState>
                } else if (globalState == READY || globalState == DISCHARGING) {
                    Charge_Logic();

                    if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
                        globalState = CHARGING;
                        xSemaphoreGive(stateSemaphore);
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     476:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     47a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <xQueueGenericSend>
     47e:	d0 cf       	rjmp	.-96     	; 0x420 <TaskChargingStart+0xc>
                    if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
                        globalState = IDLE;
                        xSemaphoreGive(stateSemaphore);
                    }
                    
                } else if (globalState == READY || globalState == DISCHARGING) {
     480:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	21 f0       	breq	.+8      	; 0x490 <TaskChargingStart+0x7c>
     488:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
     48c:	83 30       	cpi	r24, 0x03	; 3
     48e:	41 f6       	brne	.-112    	; 0x420 <TaskChargingStart+0xc>
                    Charge_Logic();
     490:	0e 94 16 06 	call	0xc2c	; 0xc2c <Charge_Logic>

                    if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     494:	6f ef       	ldi	r22, 0xFF	; 255
     496:	7f ef       	ldi	r23, 0xFF	; 255
     498:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     49c:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     4a0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xQueueSemaphoreTake>
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	09 f0       	breq	.+2      	; 0x4aa <TaskChargingStart+0x96>
     4a8:	bb cf       	rjmp	.-138    	; 0x420 <TaskChargingStart+0xc>
                        globalState = CHARGING;
     4aa:	10 93 46 01 	sts	0x0146, r17	; 0x800146 <globalState>
     4ae:	dc cf       	rjmp	.-72     	; 0x468 <TaskChargingStart+0x54>

000004b0 <TaskStopSession>:
        }
    }
}

// Task to Handle Stop Session
void TaskStopSession(void *pvParameters) {
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	1f 92       	push	r1
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
            if (event == STOP_BUTTON_EVENT) {
                Stop_Charge_Logic();

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
                    globalState = DISCHARGING;
     4ba:	13 e0       	ldi	r17, 0x03	; 3

// Task to Handle Stop Session
void TaskStopSession(void *pvParameters) {
    uint8_t event;
    for (;;) {
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
     4bc:	4f ef       	ldi	r20, 0xFF	; 255
     4be:	5f ef       	ldi	r21, 0xFF	; 255
     4c0:	be 01       	movw	r22, r28
     4c2:	6f 5f       	subi	r22, 0xFF	; 255
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <buttonQueue>
     4ca:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <buttonQueue+0x1>
     4ce:	0e 94 60 10 	call	0x20c0	; 0x20c0 <xQueueReceive>
     4d2:	88 23       	and	r24, r24
     4d4:	99 f3       	breq	.-26     	; 0x4bc <TaskStopSession+0xc>
            if (event == STOP_BUTTON_EVENT) {
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	82 30       	cpi	r24, 0x02	; 2
     4da:	81 f7       	brne	.-32     	; 0x4bc <TaskStopSession+0xc>
                Stop_Charge_Logic();
     4dc:	0e 94 1b 06 	call	0xc36	; 0xc36 <Stop_Charge_Logic>

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     4e0:	6f ef       	ldi	r22, 0xFF	; 255
     4e2:	7f ef       	ldi	r23, 0xFF	; 255
     4e4:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     4e8:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     4ec:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xQueueSemaphoreTake>
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	21 f7       	brne	.-56     	; 0x4bc <TaskStopSession+0xc>
                    globalState = DISCHARGING;
     4f4:	10 93 46 01 	sts	0x0146, r17	; 0x800146 <globalState>
                    xSemaphoreGive(stateSemaphore);
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     506:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     50a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <xQueueGenericSend>
     50e:	d6 cf       	rjmp	.-84     	; 0x4bc <TaskStopSession+0xc>

00000510 <__vector_1>:
volatile SystemState globalState = IDLE; // Default state




ISR(INT0_vect) {
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	00 d0       	rcall	.+0      	; 0x538 <__vector_1+0x28>
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     53c:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t event = START_BUTTON_EVENT;
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendFromISR(buttonQueue, &event, &xHigherPriorityTaskWoken);
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	ae 01       	movw	r20, r28
     546:	4e 5f       	subi	r20, 0xFE	; 254
     548:	5f 4f       	sbci	r21, 0xFF	; 255
     54a:	be 01       	movw	r22, r28
     54c:	6f 5f       	subi	r22, 0xFF	; 255
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <buttonQueue>
     554:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <buttonQueue+0x1>
     558:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xQueueGenericSendFromISR>

    if (xHigherPriorityTaskWoken) {
     55c:	8a 81       	ldd	r24, Y+2	; 0x02
     55e:	81 11       	cpse	r24, r1
        portYIELD();
     560:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
    }
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	ff 91       	pop	r31
     56e:	ef 91       	pop	r30
     570:	bf 91       	pop	r27
     572:	af 91       	pop	r26
     574:	9f 91       	pop	r25
     576:	8f 91       	pop	r24
     578:	7f 91       	pop	r23
     57a:	6f 91       	pop	r22
     57c:	5f 91       	pop	r21
     57e:	4f 91       	pop	r20
     580:	3f 91       	pop	r19
     582:	2f 91       	pop	r18
     584:	0f 90       	pop	r0
     586:	0f be       	out	0x3f, r0	; 63
     588:	0f 90       	pop	r0
     58a:	1f 90       	pop	r1
     58c:	18 95       	reti

0000058e <__vector_2>:

// Interrupt Service Routine for STOP Button (INT1)
ISR(INT1_vect) {
     58e:	1f 92       	push	r1
     590:	0f 92       	push	r0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <__vector_2+0x28>
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     5ba:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t event = STOP_BUTTON_EVENT;
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendFromISR(buttonQueue, &event, &xHigherPriorityTaskWoken);
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	ae 01       	movw	r20, r28
     5c4:	4e 5f       	subi	r20, 0xFE	; 254
     5c6:	5f 4f       	sbci	r21, 0xFF	; 255
     5c8:	be 01       	movw	r22, r28
     5ca:	6f 5f       	subi	r22, 0xFF	; 255
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <buttonQueue>
     5d2:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <buttonQueue+0x1>
     5d6:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xQueueGenericSendFromISR>

    if (xHigherPriorityTaskWoken) {
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	81 11       	cpse	r24, r1
        portYIELD();
     5de:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
    }
}
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	ff 91       	pop	r31
     5ec:	ef 91       	pop	r30
     5ee:	bf 91       	pop	r27
     5f0:	af 91       	pop	r26
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	7f 91       	pop	r23
     5f8:	6f 91       	pop	r22
     5fa:	5f 91       	pop	r21
     5fc:	4f 91       	pop	r20
     5fe:	3f 91       	pop	r19
     600:	2f 91       	pop	r18
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <SuddenDisconnect_Task>:
// ######################### TEMPORARY TASKS ################# //
// ######################################################### //

void SuddenDisconnect_Task(void *pvParameters) {
    while (1) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     60c:	4f ef       	ldi	r20, 0xFF	; 255
     60e:	5f ef       	ldi	r21, 0xFF	; 255
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <ulTaskGenericNotifyTake>

        PORTC |= (1 << PC7); // Set PC7 "Disconnected" to high
     618:	af 9a       	sbi	0x15, 7	; 21
        vTaskDelay(pdMS_TO_TICKS(2000));
     61a:	80 ed       	ldi	r24, 0xD0	; 208
     61c:	97 e0       	ldi	r25, 0x07	; 7
     61e:	0e 94 2b 1c 	call	0x3856	; 0x3856 <vTaskDelay>
        PORTC &= ~(1 << PC7);  // Set PC7 "Disconnected" to low
     622:	af 98       	cbi	0x15, 7	; 21
     624:	f3 cf       	rjmp	.-26     	; 0x60c <SuddenDisconnect_Task>

00000626 <Os_Init>:




// OS Initialization
void Os_Init(void) {
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
    // Initialize peripherals
	LCD_Init();
     62c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_Init>



    // Create binary semaphore for global state
    stateSemaphore = xSemaphoreCreateBinary();
     630:	43 e0       	ldi	r20, 0x03	; 3
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xQueueGenericCreate>
     63a:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <stateSemaphore+0x1>
     63e:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <stateSemaphore>

    xSemaphoreGive(stateSemaphore);
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <xQueueGenericSend>

    // Create the button queue
    buttonQueue = xQueueCreate(5, sizeof(uint8_t));
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	85 e0       	ldi	r24, 0x05	; 5
     656:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xQueueGenericCreate>
     65a:	90 93 fb 07 	sts	0x07FB, r25	; 0x8007fb <buttonQueue+0x1>
     65e:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <buttonQueue>

//     Create tasks
    xTaskCreate(TaskDisplayRefresh, "DisplayRefresh", 128, NULL, 4, &taskHandleDisplayRefresh);
     662:	8c e0       	ldi	r24, 0x0C	; 12
     664:	e8 2e       	mov	r14, r24
     666:	88 e0       	ldi	r24, 0x08	; 8
     668:	f8 2e       	mov	r15, r24
     66a:	04 e0       	ldi	r16, 0x04	; 4
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	40 e8       	ldi	r20, 0x80	; 128
     672:	66 ed       	ldi	r22, 0xD6	; 214
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	83 ef       	ldi	r24, 0xF3	; 243
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 39 18 	call	0x3072	; 0x3072 <xTaskCreate>
    xTaskCreate(TaskChargingStart, "ChargingStart", 128, NULL, 2, NULL);
     67e:	f1 2c       	mov	r15, r1
     680:	e1 2c       	mov	r14, r1
     682:	02 e0       	ldi	r16, 0x02	; 2
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	40 e8       	ldi	r20, 0x80	; 128
     68a:	65 ee       	ldi	r22, 0xE5	; 229
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	8a e0       	ldi	r24, 0x0A	; 10
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 39 18 	call	0x3072	; 0x3072 <xTaskCreate>
    xTaskCreate(TaskStopSession, "StopSession", 128, NULL, 2, NULL);
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	40 e8       	ldi	r20, 0x80	; 128
     69c:	63 ef       	ldi	r22, 0xF3	; 243
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	88 e5       	ldi	r24, 0x58	; 88
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	0e 94 39 18 	call	0x3072	; 0x3072 <xTaskCreate>
    xTaskCreate(VehicleCheckTask, "VehicleCheck", 128, NULL, 2, &VehicleCheckTaskHandle);
     6a8:	96 ef       	ldi	r25, 0xF6	; 246
     6aa:	e9 2e       	mov	r14, r25
     6ac:	97 e0       	ldi	r25, 0x07	; 7
     6ae:	f9 2e       	mov	r15, r25
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	40 e8       	ldi	r20, 0x80	; 128
     6b6:	6f ef       	ldi	r22, 0xFF	; 255
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	8f e8       	ldi	r24, 0x8F	; 143
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 39 18 	call	0x3072	; 0x3072 <xTaskCreate>
    xTaskCreate(Overcurrent_Task, "Overcurrent Task", 128, NULL, 4, &Overcurrent_TaskHandle);
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	e2 2e       	mov	r14, r18
     6c6:	28 e0       	ldi	r18, 0x08	; 8
     6c8:	f2 2e       	mov	r15, r18
     6ca:	04 e0       	ldi	r16, 0x04	; 4
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	40 e8       	ldi	r20, 0x80	; 128
     6d2:	6c e0       	ldi	r22, 0x0C	; 12
     6d4:	71 e0       	ldi	r23, 0x01	; 1
     6d6:	84 ee       	ldi	r24, 0xE4	; 228
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 39 18 	call	0x3072	; 0x3072 <xTaskCreate>
    
//    xTaskCreate(prd_Buttons, "prd_Buttons", 128, NULL, 4, NULL);

    // Start the scheduler
    vTaskStartScheduler();
}
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
    xTaskCreate(Overcurrent_Task, "Overcurrent Task", 128, NULL, 4, &Overcurrent_TaskHandle);
    
//    xTaskCreate(prd_Buttons, "prd_Buttons", 128, NULL, 4, NULL);

    // Start the scheduler
    vTaskStartScheduler();
     6e4:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <vTaskStartScheduler>

000006e8 <vTimer1Callback>:
#define NULLPtr ((void *)0)
static TimerHandle_t xTimer1 = NULL;
static void (*Timer1Callback)(void) = NULLPtr;

static void vTimer1Callback(TimerHandle_t xTimer) {
    if (Timer1Callback != NULLPtr) {
     6e8:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Timer1Callback>
     6ec:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Timer1Callback+0x1>
     6f0:	30 97       	sbiw	r30, 0x00	; 0
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <vTimer1Callback+0xe>
        (*Timer1Callback)(); // Call the user callback function
     6f4:	09 94       	ijmp
    }
}
     6f6:	08 95       	ret

000006f8 <Timer_vidInitTimer1>:

// Initialize Timer1 (FreeRTOS Software Timer)
void Timer_vidInitTimer1(void) {
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
    // Create the software timer
    xTimer1 = xTimerCreate(
     6fc:	04 e7       	ldi	r16, 0x74	; 116
     6fe:	13 e0       	ldi	r17, 0x03	; 3
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	41 e0       	ldi	r20, 0x01	; 1
     706:	64 e1       	ldi	r22, 0x14	; 20
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	8d e1       	ldi	r24, 0x1D	; 29
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 cf 24 	call	0x499e	; 0x499e <xTimerCreate>
     712:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <xTimer1+0x1>
     716:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <xTimer1>
        NULL,                                 // Timer ID (not used)
		vTimer1Callback                       // Callback function
    );


}
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	08 95       	ret

00000720 <Timer_vidStartTimer1>:

// Start Timer1 (FreeRTOS Software Timer)
void Timer_vidStartTimer1(void) {
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
    if (xTimer1 != NULL) {
     724:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <xTimer1>
     728:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <xTimer1+0x1>
     72c:	89 2b       	or	r24, r25
     72e:	71 f0       	breq	.+28     	; 0x74c <Timer_vidStartTimer1+0x2c>
        xTimerStart(xTimer1, 0);
     730:	0e 94 16 1a 	call	0x342c	; 0x342c <xTaskGetTickCount>
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	00 e0       	ldi	r16, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	ac 01       	movw	r20, r24
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <xTimer1>
     744:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <xTimer1+0x1>
     748:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <xTimerGenericCommandFromTask>
    }
}
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <Timer_vidStopTimer1>:

// Stop Timer1 (FreeRTOS Software Timer)
void Timer_vidStopTimer1(void) {
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
    if (xTimer1 != NULL) {
     756:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <xTimer1>
     75a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <xTimer1+0x1>
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	49 f0       	breq	.+18     	; 0x774 <Timer_vidStopTimer1+0x22>
        xTimerStop(xTimer1, 0);
     762:	10 e0       	ldi	r17, 0x00	; 0
     764:	00 e0       	ldi	r16, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	63 e0       	ldi	r22, 0x03	; 3
     770:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <xTimerGenericCommandFromTask>
    }
}
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	08 95       	ret

0000077a <Timer_vidSetCallBackTimer1>:

// Set the callback function for Timer1
void Timer_vidSetCallBackTimer1(void (*TimerCallback)(void)) {
    if (TimerCallback != NULLPtr) {
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	21 f0       	breq	.+8      	; 0x786 <Timer_vidSetCallBackTimer1+0xc>
        Timer1Callback = TimerCallback;
     77e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <Timer1Callback+0x1>
     782:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <Timer1Callback>
    }
}
     786:	08 95       	ret

00000788 <CreateGpioProxy>:

#include "Gpio.h"
#include "Gpio_Config.h"

// Create a GpioProxy for a specific port (portDir and port are pointers to the direction and data registers)
GpioProxy CreateGpioProxy(volatile uint8_t *portDir, volatile uint8_t *port) {
     788:	9b 01       	movw	r18, r22
    GpioProxy gpioProxy;
    gpioProxy.portDir = portDir;
    gpioProxy.port = port;
    return gpioProxy;
     78a:	ac 01       	movw	r20, r24
}
     78c:	c9 01       	movw	r24, r18
     78e:	ba 01       	movw	r22, r20
     790:	08 95       	ret

00000792 <Proxy_SetPortDirection>:

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     792:	dc 01       	movw	r26, r24
     794:	ed 91       	ld	r30, X+
     796:	fc 91       	ld	r31, X
     798:	60 83       	st	Z, r22
}
     79a:	08 95       	ret

0000079c <Proxy_WritePort>:

// Write a value to the port
void Proxy_WritePort(GpioProxy *gpioProxy, uint8_t value) {
    *(gpioProxy->port) = value;
     79c:	dc 01       	movw	r26, r24
     79e:	12 96       	adiw	r26, 0x02	; 2
     7a0:	ed 91       	ld	r30, X+
     7a2:	fc 91       	ld	r31, X
     7a4:	60 83       	st	Z, r22
}
     7a6:	08 95       	ret

000007a8 <Proxy_ReadPort>:

// Read the value of the port
uint8_t Proxy_ReadPort(GpioProxy *gpioProxy) {
    return *(gpioProxy->port);
     7a8:	dc 01       	movw	r26, r24
     7aa:	12 96       	adiw	r26, 0x02	; 2
     7ac:	ed 91       	ld	r30, X+
     7ae:	fc 91       	ld	r31, X
     7b0:	80 81       	ld	r24, Z
}
     7b2:	08 95       	ret

000007b4 <Proxy_SetPin>:

// Set a specific pin high
void Proxy_SetPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) |= (1 << pin);
     7b4:	dc 01       	movw	r26, r24
     7b6:	12 96       	adiw	r26, 0x02	; 2
     7b8:	ed 91       	ld	r30, X+
     7ba:	fc 91       	ld	r31, X
     7bc:	80 81       	ld	r24, Z
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <Proxy_SetPin+0x12>
     7c4:	22 0f       	add	r18, r18
     7c6:	6a 95       	dec	r22
     7c8:	ea f7       	brpl	.-6      	; 0x7c4 <Proxy_SetPin+0x10>
     7ca:	82 2b       	or	r24, r18
     7cc:	80 83       	st	Z, r24
}
     7ce:	08 95       	ret

000007d0 <Proxy_ClearPin>:

// Clear a specific pin (set it low)
void Proxy_ClearPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) &= ~(1 << pin);
     7d0:	dc 01       	movw	r26, r24
     7d2:	12 96       	adiw	r26, 0x02	; 2
     7d4:	ed 91       	ld	r30, X+
     7d6:	fc 91       	ld	r31, X
     7d8:	20 81       	ld	r18, Z
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <Proxy_ClearPin+0x12>
     7e0:	88 0f       	add	r24, r24
     7e2:	6a 95       	dec	r22
     7e4:	ea f7       	brpl	.-6      	; 0x7e0 <Proxy_ClearPin+0x10>
     7e6:	80 95       	com	r24
     7e8:	82 23       	and	r24, r18
     7ea:	80 83       	st	Z, r24
}
     7ec:	08 95       	ret

000007ee <Proxy_ReadPin>:

// Read the state of a specific pin
uint8_t Proxy_ReadPin(GpioProxy *gpioProxy, uint8_t pin) {
    return (*(gpioProxy->port) & (1 << pin)) >> pin;
     7ee:	dc 01       	movw	r26, r24
     7f0:	12 96       	adiw	r26, 0x02	; 2
     7f2:	ed 91       	ld	r30, X+
     7f4:	fc 91       	ld	r31, X
     7f6:	20 81       	ld	r18, Z
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	06 2e       	mov	r0, r22
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	0a 94       	dec	r0
     806:	e2 f7       	brpl	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	82 23       	and	r24, r18
     80c:	93 23       	and	r25, r19
     80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     810:	95 95       	asr	r25
     812:	87 95       	ror	r24
     814:	6a 95       	dec	r22
     816:	e2 f7       	brpl	.-8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
}
     818:	08 95       	ret

0000081a <ConfigurePins>:

// Function to configure pins based on the pinConfigs array
void ConfigurePins(void) {
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	c0 e6       	ldi	r28, 0x60	; 96
     824:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i < index_no; i++) {
        PinConfig *pin = &pinConfigs[i];

        // Set pin direction
        if (pin->direction == 1) {
            Proxy_SetPortDirection(pin->gpioProxy, (1 << pin->pin));  // Set as output
     826:	01 e0       	ldi	r16, 0x01	; 1
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	e8 81       	ld	r30, Y
     82c:	f9 81       	ldd	r31, Y+1	; 0x01
     82e:	01 90       	ld	r0, Z+
     830:	f0 81       	ld	r31, Z
     832:	e0 2d       	mov	r30, r0

    for (i = 0; i < index_no; i++) {
        PinConfig *pin = &pinConfigs[i];

        // Set pin direction
        if (pin->direction == 1) {
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	d1 f4       	brne	.+52     	; 0x86e <__stack+0xf>
            Proxy_SetPortDirection(pin->gpioProxy, (1 << pin->pin));  // Set as output
     83a:	8a 81       	ldd	r24, Y+2	; 0x02
     83c:	98 01       	movw	r18, r16
     83e:	02 c0       	rjmp	.+4      	; 0x844 <ConfigurePins+0x2a>
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	8a 95       	dec	r24
     846:	e2 f7       	brpl	.-8      	; 0x840 <ConfigurePins+0x26>
    return gpioProxy;
}

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     848:	20 83       	st	Z, r18
     84a:	2c 81       	ldd	r18, Y+4	; 0x04
     84c:	6a 81       	ldd	r22, Y+2	; 0x02
     84e:	88 81       	ld	r24, Y
     850:	99 81       	ldd	r25, Y+1	; 0x01
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Set pin low
            }
        } else {
            // For input pins, we can enable pull-up resistors if required
            if (pin->value == 1) {
     852:	21 30       	cpi	r18, 0x01	; 1
     854:	71 f4       	brne	.+28     	; 0x872 <__stack+0x13>
                Proxy_SetPin(pin->gpioProxy, pin->pin);  // Enable pull-up resistor
     856:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Proxy_SetPin>
     85a:	25 96       	adiw	r28, 0x05	; 5
    uint8_t i;
	uint8_t index_no = NUM_INDECIES;

    //uint8_t numPins = sizeof(pinConfigs) / sizeof(pinConfigs[0]);

    for (i = 0; i < index_no; i++) {
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	ce 37       	cpi	r28, 0x7E	; 126
     860:	d3 07       	cpc	r29, r19
     862:	19 f7       	brne	.-58     	; 0x82a <ConfigurePins+0x10>
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Disable pull-up resistor
            }
        }
    }
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	08 95       	ret
    return gpioProxy;
}

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     86e:	10 82       	st	Z, r1
     870:	ec cf       	rjmp	.-40     	; 0x84a <ConfigurePins+0x30>
        } else {
            // For input pins, we can enable pull-up resistors if required
            if (pin->value == 1) {
                Proxy_SetPin(pin->gpioProxy, pin->pin);  // Enable pull-up resistor
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Disable pull-up resistor
     872:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Proxy_ClearPin>
     876:	f1 cf       	rjmp	.-30     	; 0x85a <ConfigurePins+0x40>

00000878 <ADC_PRESCALER_SET>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// This function selects sampling frequency of ADC by selecting the prescaler bit
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
     878:	96 b1       	in	r25, 0x06	; 6
     87a:	98 7f       	andi	r25, 0xF8	; 248
     87c:	96 b9       	out	0x06, r25	; 6

	switch(prescaler)
     87e:	80 31       	cpi	r24, 0x10	; 16
     880:	c1 f0       	breq	.+48     	; 0x8b2 <ADC_PRESCALER_SET+0x3a>
     882:	40 f4       	brcc	.+16     	; 0x894 <ADC_PRESCALER_SET+0x1c>
     884:	84 30       	cpi	r24, 0x04	; 4
     886:	79 f0       	breq	.+30     	; 0x8a6 <ADC_PRESCALER_SET+0x2e>
     888:	88 30       	cpi	r24, 0x08	; 8
     88a:	79 f0       	breq	.+30     	; 0x8aa <ADC_PRESCALER_SET+0x32>
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	c9 f4       	brne	.+50     	; 0x8c2 <ADC_PRESCALER_SET+0x4a>
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
     890:	30 9a       	sbi	0x06, 0	; 6
			   break;
     892:	08 95       	ret
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization

	switch(prescaler)
     894:	80 34       	cpi	r24, 0x40	; 64
     896:	79 f0       	breq	.+30     	; 0x8b6 <ADC_PRESCALER_SET+0x3e>
     898:	80 38       	cpi	r24, 0x80	; 128
     89a:	81 f0       	breq	.+32     	; 0x8bc <ADC_PRESCALER_SET+0x44>
     89c:	80 32       	cpi	r24, 0x20	; 32
     89e:	89 f4       	brne	.+34     	; 0x8c2 <ADC_PRESCALER_SET+0x4a>
			   break;
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
			   break;
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
			   break;
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
     8a0:	86 b1       	in	r24, 0x06	; 6
     8a2:	85 60       	ori	r24, 0x05	; 5
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <ADC_PRESCALER_SET+0x36>

	switch(prescaler)
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
			   break;
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
     8a6:	31 9a       	sbi	0x06, 1	; 6
			   break;
     8a8:	08 95       	ret
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
     8aa:	86 b1       	in	r24, 0x06	; 6
     8ac:	83 60       	ori	r24, 0x03	; 3
			   break;
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
			   break;
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
			   break;
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
     8ae:	86 b9       	out	0x06, r24	; 6
	}

}
     8b0:	08 95       	ret
			   break;
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
			   break;
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
			   break;
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
     8b2:	32 9a       	sbi	0x06, 2	; 6
			   break;
     8b4:	08 95       	ret
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
			   break;
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
     8b6:	86 b1       	in	r24, 0x06	; 6
     8b8:	86 60       	ori	r24, 0x06	; 6
     8ba:	f9 cf       	rjmp	.-14     	; 0x8ae <ADC_PRESCALER_SET+0x36>
			   break;
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
     8bc:	86 b1       	in	r24, 0x06	; 6
     8be:	87 60       	ori	r24, 0x07	; 7
     8c0:	f6 cf       	rjmp	.-20     	; 0x8ae <ADC_PRESCALER_SET+0x36>
			   break;
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
     8c2:	86 b1       	in	r24, 0x06	; 6
     8c4:	88 7f       	andi	r24, 0xF8	; 248
     8c6:	f3 cf       	rjmp	.-26     	; 0x8ae <ADC_PRESCALER_SET+0x36>

000008c8 <ADC_voltage_Reference>:

//This function selects the voltage reference
//by default AVCC has been selected
void ADC_voltage_Reference(uint8_t Reference_Voltage)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
     8c8:	97 b1       	in	r25, 0x07	; 7
     8ca:	9f 73       	andi	r25, 0x3F	; 63
     8cc:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1<<REFS0); // Default AVCC has been set
     8ce:	3e 9a       	sbi	0x07, 6	; 7


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
     8d0:	81 11       	cpse	r24, r1
     8d2:	04 c0       	rjmp	.+8      	; 0x8dc <ADC_voltage_Reference+0x14>
     8d4:	87 b1       	in	r24, 0x07	; 7
     8d6:	8f 73       	andi	r24, 0x3F	; 63
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     8d8:	87 b9       	out	0x07, r24	; 7
     8da:	08 95       	ret
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	11 f4       	brne	.+4      	; 0x8e4 <ADC_voltage_Reference+0x1c>
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
	else{ADMUX |= (1<<REFS0);}
     8e0:	3e 9a       	sbi	0x07, 6	; 7

}
     8e2:	08 95       	ret
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     8e4:	83 30       	cpi	r24, 0x03	; 3
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <ADC_voltage_Reference+0x18>
     8e8:	87 b1       	in	r24, 0x07	; 7
     8ea:	80 6c       	ori	r24, 0xC0	; 192
     8ec:	f5 cf       	rjmp	.-22     	; 0x8d8 <ADC_voltage_Reference+0x10>

000008ee <ADC_INIT>:
/*------------possible parameter---------
prescaler = 2,4,8,16,32,64,128
 Voltage_Reference = AREF,AVCC,INTERNAL
*/
void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
     8ee:	cf 93       	push	r28
     8f0:	c6 2f       	mov	r28, r22
	2) set prescaler
	3) reference voltage select
	4) left adjust of for data register
	*/

	ADCSRA |= (1<<ADEN); // ADC Enable
     8f2:	37 9a       	sbi	0x06, 7	; 6
	ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
     8f4:	0e 94 3c 04 	call	0x878	; 0x878 <ADC_PRESCALER_SET>
	ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
     8f8:	8c 2f       	mov	r24, r28
     8fa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <ADC_voltage_Reference>
	ADMUX &= ~(1<<ADLAR); //left adjust off // Though bu default left adjust off // this line use for more convenient for future developer
     8fe:	3d 98       	cbi	0x07, 5	; 7
}
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <ADC_READ>:

//########################################################################################
//########################################################################################
uint16_t ADC_READ(uint8_t channel)
{
	ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     904:	97 b1       	in	r25, 0x07	; 7
     906:	90 7e       	andi	r25, 0xE0	; 224
     908:	97 b9       	out	0x07, r25	; 7

	switch(channel)
     90a:	88 30       	cpi	r24, 0x08	; 8
     90c:	30 f5       	brcc	.+76     	; 0x95a <ADC_READ+0x56>
     90e:	e8 2f       	mov	r30, r24
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	e3 57       	subi	r30, 0x73	; 115
     914:	fb 4f       	sbci	r31, 0xFB	; 251
     916:	0c 94 92 28 	jmp	0x5124	; 0x5124 <__tablejump2__>
     91a:	ad 04       	cpc	r10, r13
     91c:	95 04       	cpc	r9, r5
     91e:	9c 04       	cpc	r9, r12
     920:	9e 04       	cpc	r9, r14
     922:	a2 04       	cpc	r10, r2
     924:	a4 04       	cpc	r10, r4
     926:	a7 04       	cpc	r10, r7
     928:	aa 04       	cpc	r10, r10
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
     92a:	38 9a       	sbi	0x07, 0	; 7
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
	}
	ADCSRA |=(1<<ADSC); // ADC conversion start
     92c:	36 9a       	sbi	0x06, 6	; 6

	while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
     92e:	34 9b       	sbis	0x06, 4	; 6
     930:	fe cf       	rjmp	.-4      	; 0x92e <ADC_READ+0x2a>
	//uint8_t high,low;
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
     932:	84 b1       	in	r24, 0x04	; 4
     934:	95 b1       	in	r25, 0x05	; 5
}
     936:	08 95       	ret
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
     938:	39 9a       	sbi	0x07, 1	; 7
		       break;
     93a:	f8 cf       	rjmp	.-16     	; 0x92c <ADC_READ+0x28>
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
     93c:	87 b1       	in	r24, 0x07	; 7
     93e:	83 60       	ori	r24, 0x03	; 3
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     940:	87 b9       	out	0x07, r24	; 7
     942:	f4 cf       	rjmp	.-24     	; 0x92c <ADC_READ+0x28>
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
		       break;
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
			   break;
		case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
     944:	3a 9a       	sbi	0x07, 2	; 7
			   break;
     946:	f2 cf       	rjmp	.-28     	; 0x92c <ADC_READ+0x28>
		case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
     948:	87 b1       	in	r24, 0x07	; 7
     94a:	85 60       	ori	r24, 0x05	; 5
     94c:	f9 cf       	rjmp	.-14     	; 0x940 <ADC_READ+0x3c>
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
     94e:	87 b1       	in	r24, 0x07	; 7
     950:	86 60       	ori	r24, 0x06	; 6
     952:	f6 cf       	rjmp	.-20     	; 0x940 <ADC_READ+0x3c>
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
     954:	87 b1       	in	r24, 0x07	; 7
     956:	87 60       	ori	r24, 0x07	; 7
     958:	f3 cf       	rjmp	.-26     	; 0x940 <ADC_READ+0x3c>
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     95a:	87 b1       	in	r24, 0x07	; 7
     95c:	80 7e       	andi	r24, 0xE0	; 224
     95e:	f0 cf       	rjmp	.-32     	; 0x940 <ADC_READ+0x3c>

00000960 <ADC_GetVoltage>:
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
}
// Calculate the actual voltage from the ADC value
float ADC_GetVoltage(uint16_t adc_value) {
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	2c 97       	sbiw	r28, 0x0c	; 12
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
    // Calculate voltage at the ADC pin
    float v_adc = (adc_value / ADC_RESOLUTION) * VREF;
     974:	bc 01       	movw	r22, r24
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__floatunsisf>
     97e:	69 87       	std	Y+9, r22	; 0x09
     980:	7a 87       	std	Y+10, r23	; 0x0a
     982:	8b 87       	std	Y+11, r24	; 0x0b
     984:	9c 87       	std	Y+12, r25	; 0x0c
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 ec       	ldi	r19, 0xC0	; 192
     98a:	4f e7       	ldi	r20, 0x7F	; 127
     98c:	54 e4       	ldi	r21, 0x44	; 68
     98e:	69 85       	ldd	r22, Y+9	; 0x09
     990:	7a 85       	ldd	r23, Y+10	; 0x0a
     992:	8b 85       	ldd	r24, Y+11	; 0x0b
     994:	9c 85       	ldd	r25, Y+12	; 0x0c
     996:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__divsf3>
     99a:	6d 83       	std	Y+5, r22	; 0x05
     99c:	7e 83       	std	Y+6, r23	; 0x06
     99e:	8f 83       	std	Y+7, r24	; 0x07
     9a0:	98 87       	std	Y+8, r25	; 0x08
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 ea       	ldi	r20, 0xA0	; 160
     9a8:	50 e4       	ldi	r21, 0x40	; 64
     9aa:	6d 81       	ldd	r22, Y+5	; 0x05
     9ac:	7e 81       	ldd	r23, Y+6	; 0x06
     9ae:	8f 81       	ldd	r24, Y+7	; 0x07
     9b0:	98 85       	ldd	r25, Y+8	; 0x08
     9b2:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__mulsf3>
     9b6:	69 83       	std	Y+1, r22	; 0x01
     9b8:	7a 83       	std	Y+2, r23	; 0x02
     9ba:	8b 83       	std	Y+3, r24	; 0x03
     9bc:	9c 83       	std	Y+4, r25	; 0x04

    // Scale the voltage using the voltage divider ratio
    return v_adc ;
     9be:	69 81       	ldd	r22, Y+1	; 0x01
     9c0:	7a 81       	ldd	r23, Y+2	; 0x02
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	9c 81       	ldd	r25, Y+4	; 0x04
}
     9c6:	2c 96       	adiw	r28, 0x0c	; 12
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <subscribe>:
 *
 * @param func Pointer to the client's callback function.
 */
void subscribe(SubscriberFunc func) {
	/* if there is space in the subscribers array and the function pointer (func) is valid.*/
    if (subscriber_count < MAX_SUBSCRIBERS && func != NULL) {
     9d8:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <subscriber_count>
     9dc:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <subscriber_count+0x1>
     9e0:	25 30       	cpi	r18, 0x05	; 5
     9e2:	31 05       	cpc	r19, r1
     9e4:	84 f4       	brge	.+32     	; 0xa06 <subscribe+0x2e>
     9e6:	00 97       	sbiw	r24, 0x00	; 0
     9e8:	71 f0       	breq	.+28     	; 0xa06 <subscribe+0x2e>
    	/* stores the function pointer in the array */
        subscribers[subscriber_count++] = func;
     9ea:	a9 01       	movw	r20, r18
     9ec:	4f 5f       	subi	r20, 0xFF	; 255
     9ee:	5f 4f       	sbci	r21, 0xFF	; 255
     9f0:	50 93 4f 01 	sts	0x014F, r21	; 0x80014f <subscriber_count+0x1>
     9f4:	40 93 4e 01 	sts	0x014E, r20	; 0x80014e <subscriber_count>
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	f9 01       	movw	r30, r18
     9fe:	e0 5b       	subi	r30, 0xB0	; 176
     a00:	fe 4f       	sbci	r31, 0xFE	; 254
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	80 83       	st	Z, r24
    }
}
     a06:	08 95       	ret

00000a08 <notify>:

/**
 * @brief Notifies all subscribed clients by calling their callback functions.
 */
void notify(void) {
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	00 e5       	ldi	r16, 0x50	; 80
     a12:	11 e0       	ldi	r17, 0x01	; 1
	/* Iterates through the subscribers array. */
    for (int i = 0; i < subscriber_count; i++) {
     a14:	d0 e0       	ldi	r29, 0x00	; 0
     a16:	c0 e0       	ldi	r28, 0x00	; 0
     a18:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <subscriber_count>
     a1c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <subscriber_count+0x1>
     a20:	c8 17       	cp	r28, r24
     a22:	d9 07       	cpc	r29, r25
     a24:	2c f0       	brlt	.+10     	; 0xa30 <notify+0x28>
    	/* If a valid function pointer is found, it calls the function.*/
        if (subscribers[i] != NULL) {
            subscribers[i]();
        }
    }
}
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret
 */
void notify(void) {
	/* Iterates through the subscribers array. */
    for (int i = 0; i < subscriber_count; i++) {
    	/* If a valid function pointer is found, it calls the function.*/
        if (subscribers[i] != NULL) {
     a30:	d8 01       	movw	r26, r16
     a32:	ed 91       	ld	r30, X+
     a34:	fd 91       	ld	r31, X+
     a36:	8d 01       	movw	r16, r26
     a38:	30 97       	sbiw	r30, 0x00	; 0
     a3a:	09 f0       	breq	.+2      	; 0xa3e <notify+0x36>
            subscribers[i]();
     a3c:	09 95       	icall
/**
 * @brief Notifies all subscribed clients by calling their callback functions.
 */
void notify(void) {
	/* Iterates through the subscribers array. */
    for (int i = 0; i < subscriber_count; i++) {
     a3e:	21 96       	adiw	r28, 0x01	; 1
     a40:	eb cf       	rjmp	.-42     	; 0xa18 <notify+0x10>

00000a42 <unsubscribe>:
 *
 * @param func Pointer to the client's callback function to be removed.
 */
void unsubscribe(SubscriberFunc func) {
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
     a42:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <subscriber_count>
     a46:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <subscriber_count+0x1>
     a4a:	e0 e5       	ldi	r30, 0x50	; 80
     a4c:	f1 e0       	ldi	r31, 0x01	; 1
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	42 17       	cp	r20, r18
     a54:	53 07       	cpc	r21, r19
     a56:	0c f0       	brlt	.+2      	; 0xa5a <unsubscribe+0x18>
            }
            subscribers[--subscriber_count] = NULL;
            break;
        }
    }
}
     a58:	08 95       	ret
 * @param func Pointer to the client's callback function to be removed.
 */
void unsubscribe(SubscriberFunc func) {
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
        if (subscribers[i] == func) {
     a5a:	61 91       	ld	r22, Z+
     a5c:	71 91       	ld	r23, Z+
     a5e:	68 17       	cp	r22, r24
     a60:	79 07       	cpc	r23, r25
     a62:	e9 f4       	brne	.+58     	; 0xa9e <unsubscribe+0x5c>
     a64:	fa 01       	movw	r30, r20
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	e0 5b       	subi	r30, 0xB0	; 176
     a6c:	fe 4f       	sbci	r31, 0xFE	; 254
            // Remove the subscriber and shift others (remove the gaps of unsubscriber in the array)
            for (int j = i; j < subscriber_count - 1; j++) {
     a6e:	c9 01       	movw	r24, r18
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	48 17       	cp	r20, r24
     a74:	59 07       	cpc	r21, r25
     a76:	64 f0       	brlt	.+24     	; 0xa90 <unsubscribe+0x4e>
                subscribers[j] = subscribers[j + 1];
            }
            subscribers[--subscriber_count] = NULL;
     a78:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <subscriber_count+0x1>
     a7c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <subscriber_count>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	fc 01       	movw	r30, r24
     a86:	e0 5b       	subi	r30, 0xB0	; 176
     a88:	fe 4f       	sbci	r31, 0xFE	; 254
     a8a:	11 82       	std	Z+1, r1	; 0x01
     a8c:	10 82       	st	Z, r1
            break;
     a8e:	08 95       	ret
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
        if (subscribers[i] == func) {
            // Remove the subscriber and shift others (remove the gaps of unsubscriber in the array)
            for (int j = i; j < subscriber_count - 1; j++) {
                subscribers[j] = subscribers[j + 1];
     a90:	4f 5f       	subi	r20, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	22 81       	ldd	r18, Z+2	; 0x02
     a96:	33 81       	ldd	r19, Z+3	; 0x03
     a98:	21 93       	st	Z+, r18
     a9a:	31 93       	st	Z+, r19
     a9c:	ea cf       	rjmp	.-44     	; 0xa72 <unsubscribe+0x30>
 *
 * @param func Pointer to the client's callback function to be removed.
 */
void unsubscribe(SubscriberFunc func) {
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
     a9e:	4f 5f       	subi	r20, 0xFF	; 255
     aa0:	5f 4f       	sbci	r21, 0xFF	; 255
     aa2:	d7 cf       	rjmp	.-82     	; 0xa52 <unsubscribe+0x10>

00000aa4 <updatePollCounter>:
		}
	}
}

void updatePollCounter(void) {
	pollCounter += 1; 
     aa4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <pollCounter>
     aa8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <pollCounter+0x1>
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <pollCounter+0x1>
     ab2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <pollCounter>
}
     ab6:	08 95       	ret

00000ab8 <poll>:
uint16 static pollTimeCounter=0;

float cap_percentage = 0;


void poll(void) {
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	2c 97       	sbiw	r28, 0x0c	; 12
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
	UART_Init(9600);
     ad6:	80 e8       	ldi	r24, 0x80	; 128
     ad8:	95 e2       	ldi	r25, 0x25	; 37
     ada:	0e 94 63 08 	call	0x10c6	; 0x10c6 <UART_Init>
	updatePollCounter();
     ade:	0e 94 52 05 	call	0xaa4	; 0xaa4 <updatePollCounter>
	if ((pollCounter == pollTimeCounter)) {
     ae2:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <pollCounter>
     ae6:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <pollCounter+0x1>
     aea:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <pollTimeCounter>
     aee:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <pollTimeCounter+0x1>
     af2:	28 17       	cp	r18, r24
     af4:	39 07       	cpc	r19, r25
     af6:	09 f0       	breq	.+2      	; 0xafa <poll+0x42>
     af8:	76 c0       	rjmp	.+236    	; 0xbe6 <poll+0x12e>
		pollCounter=0;
     afa:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <pollCounter+0x1>
     afe:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <pollCounter>
				float adc_voltage = 0;


//
//				 Read the ADC value from channel 0 (ADC0)
				adc_value = ADC_READ(0);
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	0e 94 82 04 	call	0x904	; 0x904 <ADC_READ>
//				 Convert ADC value to voltage
				adc_voltage = ADC_GetVoltage(adc_value);
     b08:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_GetVoltage>
     b0c:	69 87       	std	Y+9, r22	; 0x09
     b0e:	7a 87       	std	Y+10, r23	; 0x0a
     b10:	8b 87       	std	Y+11, r24	; 0x0b
     b12:	9c 87       	std	Y+12, r25	; 0x0c
				cap_percentage = calculateChargePercentage(adc_voltage);
     b14:	69 85       	ldd	r22, Y+9	; 0x09
     b16:	7a 85       	ldd	r23, Y+10	; 0x0a
     b18:	8b 85       	ldd	r24, Y+11	; 0x0b
     b1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b1c:	0e 94 31 06 	call	0xc62	; 0xc62 <calculateChargePercentage>
     b20:	6d 83       	std	Y+5, r22	; 0x05
     b22:	7e 83       	std	Y+6, r23	; 0x06
     b24:	8f 83       	std	Y+7, r24	; 0x07
     b26:	98 87       	std	Y+8, r25	; 0x08
     b28:	8d 81       	ldd	r24, Y+5	; 0x05
     b2a:	9e 81       	ldd	r25, Y+6	; 0x06
     b2c:	af 81       	ldd	r26, Y+7	; 0x07
     b2e:	b8 85       	ldd	r27, Y+8	; 0x08
     b30:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <cap_percentage>
     b34:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <cap_percentage+0x1>
     b38:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <cap_percentage+0x2>
     b3c:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <cap_percentage+0x3>


				adc_connection_check = ADC_READ(VEHICLE_CONNECTION_CHECK_PIN);
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	0e 94 82 04 	call	0x904	; 0x904 <ADC_READ>
     b46:	6c 01       	movw	r12, r24

				adc_OC_Check_value = ADC_READ(VEHICLE_OVERCURRENT_CHECK_PIN);
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	0e 94 82 04 	call	0x904	; 0x904 <ADC_READ>

				if ((adc_OC_Check_value > OVERCURRENT_THRESHOLD)){
     b4e:	4a 97       	sbiw	r24, 0x1a	; 26
     b50:	68 f0       	brcs	.+26     	; 0xb6c <poll+0xb4>
					xTaskNotifyGive(Overcurrent_TaskHandle);
     b52:	f1 2c       	mov	r15, r1
     b54:	e1 2c       	mov	r14, r1
     b56:	02 e0       	ldi	r16, 0x02	; 2
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	a9 01       	movw	r20, r18
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <Overcurrent_TaskHandle>
     b64:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <Overcurrent_TaskHandle+0x1>
     b68:	0e 94 12 20 	call	0x4024	; 0x4024 <xTaskGenericNotify>
				}

				if ((adc_connection_check < CONNECTION_THRESHOLD) && (is_connected == 0)){
     b6c:	84 e8       	ldi	r24, 0x84	; 132
     b6e:	c8 16       	cp	r12, r24
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	d8 06       	cpc	r13, r24
     b74:	88 f4       	brcc	.+34     	; 0xb98 <poll+0xe0>
     b76:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <is_connected>
     b7a:	81 11       	cpse	r24, r1
     b7c:	0d c0       	rjmp	.+26     	; 0xb98 <poll+0xe0>
					xTaskNotifyGive(VehicleCheckTaskHandle);
     b7e:	f1 2c       	mov	r15, r1
     b80:	e1 2c       	mov	r14, r1
     b82:	02 e0       	ldi	r16, 0x02	; 2
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	a9 01       	movw	r20, r18
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <VehicleCheckTaskHandle>
     b90:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <VehicleCheckTaskHandle+0x1>
     b94:	0e 94 12 20 	call	0x4024	; 0x4024 <xTaskGenericNotify>
				// 	xTaskNotifyGive(SuddenDisconnect_TaskHandle);

				// }

				// Print results to virtual terminal
				UART_Print("Charge Percentage: ");
     b98:	84 e2       	ldi	r24, 0x24	; 36
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <UART_Print>
				UART_PrintFloat(cap_percentage);
     ba0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cap_percentage>
     ba4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cap_percentage+0x1>
     ba8:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <cap_percentage+0x2>
     bac:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <cap_percentage+0x3>
     bb0:	89 83       	std	Y+1, r24	; 0x01
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	ab 83       	std	Y+3, r26	; 0x03
     bb6:	bc 83       	std	Y+4, r27	; 0x04
     bb8:	69 81       	ldd	r22, Y+1	; 0x01
     bba:	7a 81       	ldd	r23, Y+2	; 0x02
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	9c 81       	ldd	r25, Y+4	; 0x04
     bc0:	0e 94 85 08 	call	0x110a	; 0x110a <UART_PrintFloat>
				UART_Print("%\r\n");
     bc4:	88 e3       	ldi	r24, 0x38	; 56
     bc6:	91 e0       	ldi	r25, 0x01	; 1


		}
	}
}
     bc8:	2c 96       	adiw	r28, 0x0c	; 12
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
				// }

				// Print results to virtual terminal
				UART_Print("Charge Percentage: ");
				UART_PrintFloat(cap_percentage);
				UART_Print("%\r\n");
     be2:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <UART_Print>


		}
	}
}
     be6:	2c 96       	adiw	r28, 0x0c	; 12
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	08 95       	ret

00000c02 <poller_Init>:
void updatePollCounter(void) {
	pollCounter += 1; 
}

void poller_Init(void) {
	Timer_vidInitTimer1();
     c02:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <Timer_vidInitTimer1>
	Timer_vidSetCallBackTimer1(poll);
     c06:	8c e5       	ldi	r24, 0x5C	; 92
     c08:	95 e0       	ldi	r25, 0x05	; 5
     c0a:	0c 94 bd 03 	jmp	0x77a	; 0x77a <Timer_vidSetCallBackTimer1>

00000c0e <Poller__StartPolling>:
}

void Poller__StartPolling(void) {
	Timer_vidStartTimer1();
     c0e:	0c 94 90 03 	jmp	0x720	; 0x720 <Timer_vidStartTimer1>

00000c12 <Poller__StopPolling>:
}

void Poller__StopPolling(void) {
	Timer_vidStopTimer1();
     c12:	0c 94 a9 03 	jmp	0x752	; 0x752 <Timer_vidStopTimer1>

00000c16 <poller_SetPollTime>:
}


void poller_SetPollTime(uint32 time) {

	pollTimeCounter = time / time_ms;
     c16:	24 e1       	ldi	r18, 0x14	; 20
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	0e 94 51 28 	call	0x50a2	; 0x50a2 <__udivmodsi4>
     c22:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <pollTimeCounter+0x1>
     c26:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <pollTimeCounter>

}
     c2a:	08 95       	ret

00000c2c <Charge_Logic>:
#include "avr/interrupt.h"
#include <math.h>

void Charge_Logic(void) {
	// Enable an alternative functionality on PC1
	DDRC &= ~(1 << PC1);  // Set PC1 as output
     c2c:	a1 98       	cbi	0x14, 1	; 20
	PORTC &= ~(1 << PC1); // Turn on alternative indicator
     c2e:	a9 98       	cbi	0x15, 1	; 21
    // Set PC0 as output and drive it HIGH
    DDRC |= (1 << PC0);  // Set PC0 as output
     c30:	a0 9a       	sbi	0x14, 0	; 20
    PORTC |= (1 << PC0); // Turn on charging
     c32:	a8 9a       	sbi	0x15, 0	; 21
}
     c34:	08 95       	ret

00000c36 <Stop_Charge_Logic>:

void Stop_Charge_Logic(void) {
    // Stop charging by clearing PC0
    PORTC &= ~(1 << PC0); // Turn off charging
     c36:	a8 98       	cbi	0x15, 0	; 21
    DDRC &= ~(1 << PC0);  // Optionally, set PC0 as input (optional)
     c38:	a0 98       	cbi	0x14, 0	; 20

    // Enable an alternative functionality on PC1
    DDRC |= (1 << PC1);  // Set PC1 as output
     c3a:	a1 9a       	sbi	0x14, 1	; 20
    PORTC |= (1 << PC1); // Turn on alternative indicator
     c3c:	a9 9a       	sbi	0x15, 1	; 21
}
     c3e:	08 95       	ret

00000c40 <Button_Init>:



void Button_Init(void) {
    // Configure PD2 (INT0) and PD3 (INT1) as inputs
    DDRD &= ~((1 << PD2) | (1 << PD3)); // Set PD2 and PD3 as input
     c40:	81 b3       	in	r24, 0x11	; 17
     c42:	83 7f       	andi	r24, 0xF3	; 243
     c44:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1 << PD2) | (1 << PD3);   // Enable internal pull-up resistors
     c46:	82 b3       	in	r24, 0x12	; 18
     c48:	8c 60       	ori	r24, 0x0C	; 12
     c4a:	82 bb       	out	0x12, r24	; 18

    // Configure falling-edge interrupt for INT0 (PD2) and INT1 (PD3)
    MCUCR |= (1 << ISC01) | (1 << ISC11); // Falling edge triggers
     c4c:	85 b7       	in	r24, 0x35	; 53
     c4e:	8a 60       	ori	r24, 0x0A	; 10
     c50:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~((1 << ISC00) | (1 << ISC10)); // Ensure falling edge mode
     c52:	85 b7       	in	r24, 0x35	; 53
     c54:	8a 7f       	andi	r24, 0xFA	; 250
     c56:	85 bf       	out	0x35, r24	; 53

    // Enable INT0 and INT1
    GICR |= (1 << INT0) | (1 << INT1);
     c58:	8b b7       	in	r24, 0x3b	; 59
     c5a:	80 6c       	ori	r24, 0xC0	; 192
     c5c:	8b bf       	out	0x3b, r24	; 59

    // Enable global interrupts
    sei();
     c5e:	78 94       	sei
}
     c60:	08 95       	ret

00000c62 <calculateChargePercentage>:
/**
 * @brief Calculate the charge percentage based on the current voltage.
 * @param voltage The current voltage of the capacitor.
 * @return Charge percentage (0 to 100).
 */
float calculateChargePercentage(float voltage) {
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	60 97       	sbiw	r28, 0x10	; 16
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	6d 87       	std	Y+13, r22	; 0x0d
     c78:	7e 87       	std	Y+14, r23	; 0x0e
     c7a:	8f 87       	std	Y+15, r24	; 0x0f
     c7c:	98 8b       	std	Y+16, r25	; 0x10
    if (voltage < MIN_VOLTAGE) {
     c7e:	2e ea       	ldi	r18, 0xAE	; 174
     c80:	37 e4       	ldi	r19, 0x47	; 71
     c82:	41 e2       	ldi	r20, 0x21	; 33
     c84:	5f e3       	ldi	r21, 0x3F	; 63
     c86:	6d 85       	ldd	r22, Y+13	; 0x0d
     c88:	7e 85       	ldd	r23, Y+14	; 0x0e
     c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8c:	98 89       	ldd	r25, Y+16	; 0x10
     c8e:	0e 94 31 26 	call	0x4c62	; 0x4c62 <__cmpsf2>
     c92:	87 fd       	sbrc	r24, 7
     c94:	43 c0       	rjmp	.+134    	; 0xd1c <calculateChargePercentage+0xba>
        return 0.0; // Below minimum voltage
    } else if (voltage > MAX_VOLTAGE) {
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	48 e8       	ldi	r20, 0x88	; 136
     c9c:	50 e4       	ldi	r21, 0x40	; 64
     c9e:	6d 85       	ldd	r22, Y+13	; 0x0d
     ca0:	7e 85       	ldd	r23, Y+14	; 0x0e
     ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca4:	98 89       	ldd	r25, Y+16	; 0x10
     ca6:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__gesf2>
     caa:	18 16       	cp	r1, r24
     cac:	e4 f1       	brlt	.+120    	; 0xd26 <calculateChargePercentage+0xc4>
        return 100.0; // Above maximum voltage
    }
    return ((voltage - MIN_VOLTAGE) / (MAX_VOLTAGE - MIN_VOLTAGE)) * 100.0;
     cae:	2e ea       	ldi	r18, 0xAE	; 174
     cb0:	37 e4       	ldi	r19, 0x47	; 71
     cb2:	41 e2       	ldi	r20, 0x21	; 33
     cb4:	5f e3       	ldi	r21, 0x3F	; 63
     cb6:	6d 85       	ldd	r22, Y+13	; 0x0d
     cb8:	7e 85       	ldd	r23, Y+14	; 0x0e
     cba:	8f 85       	ldd	r24, Y+15	; 0x0f
     cbc:	98 89       	ldd	r25, Y+16	; 0x10
     cbe:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <__subsf3>
     cc2:	69 87       	std	Y+9, r22	; 0x09
     cc4:	7a 87       	std	Y+10, r23	; 0x0a
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	24 e1       	ldi	r18, 0x14	; 20
     ccc:	3e ea       	ldi	r19, 0xAE	; 174
     cce:	47 e6       	ldi	r20, 0x67	; 103
     cd0:	50 e4       	ldi	r21, 0x40	; 64
     cd2:	69 85       	ldd	r22, Y+9	; 0x09
     cd4:	7a 85       	ldd	r23, Y+10	; 0x0a
     cd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     cd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cda:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__divsf3>
     cde:	6d 83       	std	Y+5, r22	; 0x05
     ce0:	7e 83       	std	Y+6, r23	; 0x06
     ce2:	8f 83       	std	Y+7, r24	; 0x07
     ce4:	98 87       	std	Y+8, r25	; 0x08
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	48 ec       	ldi	r20, 0xC8	; 200
     cec:	52 e4       	ldi	r21, 0x42	; 66
     cee:	6d 81       	ldd	r22, Y+5	; 0x05
     cf0:	7e 81       	ldd	r23, Y+6	; 0x06
     cf2:	8f 81       	ldd	r24, Y+7	; 0x07
     cf4:	98 85       	ldd	r25, Y+8	; 0x08
     cf6:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__mulsf3>
     cfa:	69 83       	std	Y+1, r22	; 0x01
     cfc:	7a 83       	std	Y+2, r23	; 0x02
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	9c 83       	std	Y+4, r25	; 0x04
     d02:	69 81       	ldd	r22, Y+1	; 0x01
     d04:	7a 81       	ldd	r23, Y+2	; 0x02
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
}
     d0a:	60 96       	adiw	r28, 0x10	; 16
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret
 * @param voltage The current voltage of the capacitor.
 * @return Charge percentage (0 to 100).
 */
float calculateChargePercentage(float voltage) {
    if (voltage < MIN_VOLTAGE) {
        return 0.0; // Below minimum voltage
     d1c:	19 82       	std	Y+1, r1	; 0x01
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	1b 82       	std	Y+3, r1	; 0x03
     d22:	1c 82       	std	Y+4, r1	; 0x04
     d24:	ee cf       	rjmp	.-36     	; 0xd02 <calculateChargePercentage+0xa0>
    } else if (voltage > MAX_VOLTAGE) {
        return 100.0; // Above maximum voltage
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a8 ec       	ldi	r26, 0xC8	; 200
     d2c:	b2 e4       	ldi	r27, 0x42	; 66
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	ab 83       	std	Y+3, r26	; 0x03
     d34:	bc 83       	std	Y+4, r27	; 0x04
     d36:	e5 cf       	rjmp	.-54     	; 0xd02 <calculateChargePercentage+0xa0>

00000d38 <calculateTimeRemaining>:
 * @param targetVoltage The target voltage to reach.
 * @param chargingCurrent The current used for charging (in amps).
 * @param capacitorValue The capacitance value of the capacitor (in farads).
 * @return Time remaining for charging (in seconds).
 */
float calculateTimeRemaining(float currentVoltage, float targetVoltage, float chargingCurrent, float capacitorValue) {
     d38:	af 92       	push	r10
     d3a:	bf 92       	push	r11
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	ac 97       	sbiw	r28, 0x2c	; 44
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	6d 8f       	std	Y+29, r22	; 0x1d
     d5e:	7e 8f       	std	Y+30, r23	; 0x1e
     d60:	8f 8f       	std	Y+31, r24	; 0x1f
     d62:	98 a3       	std	Y+32, r25	; 0x20
     d64:	29 a3       	std	Y+33, r18	; 0x21
     d66:	3a a3       	std	Y+34, r19	; 0x22
     d68:	4b a3       	std	Y+35, r20	; 0x23
     d6a:	5c a3       	std	Y+36, r21	; 0x24
     d6c:	ed a2       	std	Y+37, r14	; 0x25
     d6e:	fe a2       	std	Y+38, r15	; 0x26
     d70:	0f a3       	std	Y+39, r16	; 0x27
     d72:	18 a7       	std	Y+40, r17	; 0x28
     d74:	a9 a6       	std	Y+41, r10	; 0x29
     d76:	ba a6       	std	Y+42, r11	; 0x2a
     d78:	cb a6       	std	Y+43, r12	; 0x2b
     d7a:	dc a6       	std	Y+44, r13	; 0x2c
    if (currentVoltage >= targetVoltage || chargingCurrent <= 0 || capacitorValue <= 0) {
     d7c:	29 a1       	ldd	r18, Y+33	; 0x21
     d7e:	3a a1       	ldd	r19, Y+34	; 0x22
     d80:	4b a1       	ldd	r20, Y+35	; 0x23
     d82:	5c a1       	ldd	r21, Y+36	; 0x24
     d84:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d86:	7e 8d       	ldd	r23, Y+30	; 0x1e
     d88:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d8a:	98 a1       	ldd	r25, Y+32	; 0x20
     d8c:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__gesf2>
     d90:	87 ff       	sbrs	r24, 7
     d92:	86 c0       	rjmp	.+268    	; 0xea0 <calculateTimeRemaining+0x168>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	a9 01       	movw	r20, r18
     d9a:	6d a1       	ldd	r22, Y+37	; 0x25
     d9c:	7e a1       	ldd	r23, Y+38	; 0x26
     d9e:	8f a1       	ldd	r24, Y+39	; 0x27
     da0:	98 a5       	ldd	r25, Y+40	; 0x28
     da2:	0e 94 31 26 	call	0x4c62	; 0x4c62 <__cmpsf2>
     da6:	18 16       	cp	r1, r24
     da8:	0c f0       	brlt	.+2      	; 0xdac <calculateTimeRemaining+0x74>
     daa:	7a c0       	rjmp	.+244    	; 0xea0 <calculateTimeRemaining+0x168>
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	a9 01       	movw	r20, r18
     db2:	69 a5       	ldd	r22, Y+41	; 0x29
     db4:	7a a5       	ldd	r23, Y+42	; 0x2a
     db6:	8b a5       	ldd	r24, Y+43	; 0x2b
     db8:	9c a5       	ldd	r25, Y+44	; 0x2c
     dba:	0e 94 31 26 	call	0x4c62	; 0x4c62 <__cmpsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	0c f0       	brlt	.+2      	; 0xdc4 <calculateTimeRemaining+0x8c>
     dc2:	6e c0       	rjmp	.+220    	; 0xea0 <calculateTimeRemaining+0x168>
        return 0.0; // No time remaining if already charged or invalid input
    }

    // Calculate equivalent resistance (Ohm's law)
    float resistance = MAX_VOLTAGE / chargingCurrent;
     dc4:	2d a1       	ldd	r18, Y+37	; 0x25
     dc6:	3e a1       	ldd	r19, Y+38	; 0x26
     dc8:	4f a1       	ldd	r20, Y+39	; 0x27
     dca:	58 a5       	ldd	r21, Y+40	; 0x28
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	88 e8       	ldi	r24, 0x88	; 136
     dd2:	90 e4       	ldi	r25, 0x40	; 64
     dd4:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__divsf3>
     dd8:	69 83       	std	Y+1, r22	; 0x01
     dda:	7a 83       	std	Y+2, r23	; 0x02
     ddc:	8b 83       	std	Y+3, r24	; 0x03
     dde:	9c 83       	std	Y+4, r25	; 0x04

    // Calculate the remaining time for charging
    float timeRemaining = -resistance * capacitorValue * log(1.0 - (targetVoltage / MAX_VOLTAGE));
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	ab 81       	ldd	r26, Y+3	; 0x03
     de6:	bc 81       	ldd	r27, Y+4	; 0x04
     de8:	b0 58       	subi	r27, 0x80	; 128
     dea:	89 8f       	std	Y+25, r24	; 0x19
     dec:	9a 8f       	std	Y+26, r25	; 0x1a
     dee:	ab 8f       	std	Y+27, r26	; 0x1b
     df0:	bc 8f       	std	Y+28, r27	; 0x1c
     df2:	29 a5       	ldd	r18, Y+41	; 0x29
     df4:	3a a5       	ldd	r19, Y+42	; 0x2a
     df6:	4b a5       	ldd	r20, Y+43	; 0x2b
     df8:	5c a5       	ldd	r21, Y+44	; 0x2c
     dfa:	69 8d       	ldd	r22, Y+25	; 0x19
     dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e02:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__mulsf3>
     e06:	6d 8b       	std	Y+21, r22	; 0x15
     e08:	7e 8b       	std	Y+22, r23	; 0x16
     e0a:	8f 8b       	std	Y+23, r24	; 0x17
     e0c:	98 8f       	std	Y+24, r25	; 0x18
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	48 e8       	ldi	r20, 0x88	; 136
     e14:	50 e4       	ldi	r21, 0x40	; 64
     e16:	69 a1       	ldd	r22, Y+33	; 0x21
     e18:	7a a1       	ldd	r23, Y+34	; 0x22
     e1a:	8b a1       	ldd	r24, Y+35	; 0x23
     e1c:	9c a1       	ldd	r25, Y+36	; 0x24
     e1e:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__divsf3>
     e22:	69 8b       	std	Y+17, r22	; 0x11
     e24:	7a 8b       	std	Y+18, r23	; 0x12
     e26:	8b 8b       	std	Y+19, r24	; 0x13
     e28:	9c 8b       	std	Y+20, r25	; 0x14
     e2a:	29 89       	ldd	r18, Y+17	; 0x11
     e2c:	3a 89       	ldd	r19, Y+18	; 0x12
     e2e:	4b 89       	ldd	r20, Y+19	; 0x13
     e30:	5c 89       	ldd	r21, Y+20	; 0x14
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	80 e8       	ldi	r24, 0x80	; 128
     e38:	9f e3       	ldi	r25, 0x3F	; 63
     e3a:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <__subsf3>
     e3e:	6d 87       	std	Y+13, r22	; 0x0d
     e40:	7e 87       	std	Y+14, r23	; 0x0e
     e42:	8f 87       	std	Y+15, r24	; 0x0f
     e44:	98 8b       	std	Y+16, r25	; 0x10
     e46:	6d 85       	ldd	r22, Y+13	; 0x0d
     e48:	7e 85       	ldd	r23, Y+14	; 0x0e
     e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4c:	98 89       	ldd	r25, Y+16	; 0x10
     e4e:	0e 94 67 27 	call	0x4ece	; 0x4ece <log>
     e52:	69 87       	std	Y+9, r22	; 0x09
     e54:	7a 87       	std	Y+10, r23	; 0x0a
     e56:	8b 87       	std	Y+11, r24	; 0x0b
     e58:	9c 87       	std	Y+12, r25	; 0x0c
     e5a:	29 85       	ldd	r18, Y+9	; 0x09
     e5c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e5e:	4b 85       	ldd	r20, Y+11	; 0x0b
     e60:	5c 85       	ldd	r21, Y+12	; 0x0c
     e62:	6d 89       	ldd	r22, Y+21	; 0x15
     e64:	7e 89       	ldd	r23, Y+22	; 0x16
     e66:	8f 89       	ldd	r24, Y+23	; 0x17
     e68:	98 8d       	ldd	r25, Y+24	; 0x18
     e6a:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__mulsf3>
     e6e:	6d 83       	std	Y+5, r22	; 0x05
     e70:	7e 83       	std	Y+6, r23	; 0x06
     e72:	8f 83       	std	Y+7, r24	; 0x07
     e74:	98 87       	std	Y+8, r25	; 0x08
     e76:	6d 81       	ldd	r22, Y+5	; 0x05
     e78:	7e 81       	ldd	r23, Y+6	; 0x06
     e7a:	8f 81       	ldd	r24, Y+7	; 0x07
     e7c:	98 85       	ldd	r25, Y+8	; 0x08

    return timeRemaining; // Time in seconds
}
     e7e:	ac 96       	adiw	r28, 0x2c	; 44
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	08 95       	ret
 * @param capacitorValue The capacitance value of the capacitor (in farads).
 * @return Time remaining for charging (in seconds).
 */
float calculateTimeRemaining(float currentVoltage, float targetVoltage, float chargingCurrent, float capacitorValue) {
    if (currentVoltage >= targetVoltage || chargingCurrent <= 0 || capacitorValue <= 0) {
        return 0.0; // No time remaining if already charged or invalid input
     ea0:	1d 82       	std	Y+5, r1	; 0x05
     ea2:	1e 82       	std	Y+6, r1	; 0x06
     ea4:	1f 82       	std	Y+7, r1	; 0x07
     ea6:	18 86       	std	Y+8, r1	; 0x08
     ea8:	e6 cf       	rjmp	.-52     	; 0xe76 <calculateTimeRemaining+0x13e>

00000eaa <LCD_Command>:

// Pin definitions
#define RS 0  // RS pin connected to Pin 0 of lcdControlProxy
#define EN 1  // EN pin connected to Pin 1 of lcdControlProxy

void LCD_Command(unsigned char cmnd) {
     eaa:	cf 93       	push	r28
     eac:	c8 2f       	mov	r28, r24
    // Send upper nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (cmnd & 0xF0));
     eae:	86 e8       	ldi	r24, 0x86	; 134
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Proxy_ReadPort>
     eb6:	8f 70       	andi	r24, 0x0F	; 15
     eb8:	6c 2f       	mov	r22, r28
     eba:	60 7f       	andi	r22, 0xF0	; 240
     ebc:	68 2b       	or	r22, r24
     ebe:	86 e8       	ldi	r24, 0x86	; 134
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 ce 03 	call	0x79c	; 0x79c <Proxy_WritePort>
    Proxy_ClearPin(&lcdControlProxy, RS); // RS=0, command register
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	82 e8       	ldi	r24, 0x82	; 130
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Proxy_ClearPin>
    Proxy_SetPin(&lcdControlProxy, EN);  // Enable pulse
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	82 e8       	ldi	r24, 0x82	; 130
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Proxy_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eda:	8f ec       	ldi	r24, 0xCF	; 207
     edc:	97 e0       	ldi	r25, 0x07	; 7
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <LCD_Command+0x34>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <LCD_Command+0x3a>
     ee4:	00 00       	nop
    _delay_ms(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	82 e8       	ldi	r24, 0x82	; 130
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Proxy_ClearPin>
//    _delay_us(200);

    // Send lower nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (cmnd << 4));
     ef0:	86 e8       	ldi	r24, 0x86	; 134
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Proxy_ReadPort>
     ef8:	8f 70       	andi	r24, 0x0F	; 15
     efa:	90 e1       	ldi	r25, 0x10	; 16
     efc:	c9 9f       	mul	r28, r25
     efe:	b0 01       	movw	r22, r0
     f00:	11 24       	eor	r1, r1
     f02:	68 2b       	or	r22, r24
     f04:	86 e8       	ldi	r24, 0x86	; 134
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 ce 03 	call	0x79c	; 0x79c <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, EN);
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	82 e8       	ldi	r24, 0x82	; 130
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Proxy_SetPin>
     f16:	8f ec       	ldi	r24, 0xCF	; 207
     f18:	97 e0       	ldi	r25, 0x07	; 7
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <LCD_Command+0x70>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <LCD_Command+0x76>
     f20:	00 00       	nop
    _delay_ms(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	82 e8       	ldi	r24, 0x82	; 130
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Proxy_ClearPin>
     f2c:	8f e9       	ldi	r24, 0x9F	; 159
     f2e:	9f e0       	ldi	r25, 0x0F	; 15
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <LCD_Command+0x86>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <LCD_Command+0x8c>
     f36:	00 00       	nop
    _delay_ms(2);
}
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <LCD_Char>:

void LCD_Char(unsigned char data) {
     f3c:	cf 93       	push	r28
     f3e:	c8 2f       	mov	r28, r24
    // Send upper nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (data & 0xF0));
     f40:	86 e8       	ldi	r24, 0x86	; 134
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Proxy_ReadPort>
     f48:	8f 70       	andi	r24, 0x0F	; 15
     f4a:	6c 2f       	mov	r22, r28
     f4c:	60 7f       	andi	r22, 0xF0	; 240
     f4e:	68 2b       	or	r22, r24
     f50:	86 e8       	ldi	r24, 0x86	; 134
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 ce 03 	call	0x79c	; 0x79c <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, RS);  // RS=1, data register
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	82 e8       	ldi	r24, 0x82	; 130
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Proxy_SetPin>
    Proxy_SetPin(&lcdControlProxy, EN); // Enable pulse
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	82 e8       	ldi	r24, 0x82	; 130
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Proxy_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	8a 95       	dec	r24
     f70:	f1 f7       	brne	.-4      	; 0xf6e <LCD_Char+0x32>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <LCD_Char+0x38>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	82 e8       	ldi	r24, 0x82	; 130
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Proxy_ClearPin>
//    _delay_us(200);

    // Send lower nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (data << 4));
     f7e:	86 e8       	ldi	r24, 0x86	; 134
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Proxy_ReadPort>
     f86:	8f 70       	andi	r24, 0x0F	; 15
     f88:	90 e1       	ldi	r25, 0x10	; 16
     f8a:	c9 9f       	mul	r28, r25
     f8c:	b0 01       	movw	r22, r0
     f8e:	11 24       	eor	r1, r1
     f90:	68 2b       	or	r22, r24
     f92:	86 e8       	ldi	r24, 0x86	; 134
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 ce 03 	call	0x79c	; 0x79c <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, EN);
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	82 e8       	ldi	r24, 0x82	; 130
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Proxy_SetPin>
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	8a 95       	dec	r24
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <LCD_Char+0x6a>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <LCD_Char+0x70>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	82 e8       	ldi	r24, 0x82	; 130
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Proxy_ClearPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fb6:	8f e9       	ldi	r24, 0x9F	; 159
     fb8:	9f e0       	ldi	r25, 0x0F	; 15
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <LCD_Char+0x7e>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <LCD_Char+0x84>
     fc0:	00 00       	nop
    _delay_ms(2);
}
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <LCD_Init>:

void LCD_Init(void) {
    // Set LCD port direction (D4-D7 as output, RS and EN as output)
    Proxy_SetPortDirection(&lcdDataProxy, 0xF0); // Data pins D4-D7 (upper nibble)
     fc6:	60 ef       	ldi	r22, 0xF0	; 240
     fc8:	86 e8       	ldi	r24, 0x86	; 134
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 c9 03 	call	0x792	; 0x792 <Proxy_SetPortDirection>
    Proxy_SetPortDirection(&lcdControlProxy, (1 << RS) | (1 << EN)); // RS and EN pins
     fd0:	63 e0       	ldi	r22, 0x03	; 3
     fd2:	82 e8       	ldi	r24, 0x82	; 130
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 c9 03 	call	0x792	; 0x792 <Proxy_SetPortDirection>
     fda:	8f e3       	ldi	r24, 0x3F	; 63
     fdc:	9c e9       	ldi	r25, 0x9C	; 156
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <LCD_Init+0x18>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <LCD_Init+0x1e>
     fe4:	00 00       	nop

    _delay_ms(20); // LCD Power ON delay always >15ms

    LCD_Command(0x02); // Initialize LCD in 4-bit mode
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
    LCD_Command(0x28); // 2 lines, 5x7 matrix in 4-bit mode
     fec:	88 e2       	ldi	r24, 0x28	; 40
     fee:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
    LCD_Command(0x0C); // Display ON, cursor OFF
     ff2:	8c e0       	ldi	r24, 0x0C	; 12
     ff4:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
    LCD_Command(0x06); // Increment cursor (shift cursor to right)
     ff8:	86 e0       	ldi	r24, 0x06	; 6
     ffa:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
    LCD_Command(0x01); // Clear display
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
    1004:	8f e9       	ldi	r24, 0x9F	; 159
    1006:	9f e0       	ldi	r25, 0x0F	; 15
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <LCD_Init+0x42>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <LCD_Init+0x48>
    100e:	00 00       	nop
    _delay_ms(2);
}
    1010:	08 95       	ret

00001012 <LCD_String>:

void LCD_String(char *str) {
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
    while (*str) {
    1018:	89 91       	ld	r24, Y+
    101a:	81 11       	cpse	r24, r1
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <LCD_String+0x12>
        LCD_Char(*str++);
    }
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret
    _delay_ms(2);
}

void LCD_String(char *str) {
    while (*str) {
        LCD_Char(*str++);
    1024:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LCD_Char>
    1028:	f7 cf       	rjmp	.-18     	; 0x1018 <LCD_String+0x6>

0000102a <LCD_String_xy>:
    }
}

void LCD_String_xy(char row, char pos, char *str) {
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ea 01       	movw	r28, r20
    if (row == 0 && pos < 16)
    1030:	81 11       	cpse	r24, r1
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <LCD_String_xy+0x1c>
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    1034:	86 2f       	mov	r24, r22
    1036:	80 68       	ori	r24, 0x80	; 128
        LCD_Char(*str++);
    }
}

void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
    1038:	60 31       	cpi	r22, 0x10	; 16
    103a:	58 f0       	brcs	.+22     	; 0x1052 <LCD_String_xy+0x28>
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    LCD_String(str);
    103c:	ce 01       	movw	r24, r28
}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    LCD_String(str);
    1042:	0c 94 09 08 	jmp	0x1012	; 0x1012 <LCD_String>
}

void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	c9 f7       	brne	.-14     	; 0x103c <LCD_String_xy+0x12>
    104a:	60 31       	cpi	r22, 0x10	; 16
    104c:	b8 f7       	brcc	.-18     	; 0x103c <LCD_String_xy+0x12>
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    104e:	86 2f       	mov	r24, r22
    1050:	80 6c       	ori	r24, 0xC0	; 192
    1052:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
    1056:	f2 cf       	rjmp	.-28     	; 0x103c <LCD_String_xy+0x12>

00001058 <LCD_Clear>:
    LCD_String(str);
}

void LCD_Clear(void) {
    LCD_Command(0x01); // Clear display
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 55 07 	call	0xeaa	; 0xeaa <LCD_Command>
    105e:	8f e9       	ldi	r24, 0x9F	; 159
    1060:	9f e0       	ldi	r25, 0x0F	; 15
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <LCD_Clear+0xa>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <LCD_Clear+0x10>
    1068:	00 00       	nop
    _delay_ms(2);
    LCD_Command(0x80); // Cursor at home position
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <LCD_Command>

00001070 <LCD_Float>:
}

void LCD_Float(float value) {
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	2e 97       	sbiw	r28, 0x0e	; 14
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	6b 87       	std	Y+11, r22	; 0x0b
    108a:	7c 87       	std	Y+12, r23	; 0x0c
    108c:	8d 87       	std	Y+13, r24	; 0x0d
    108e:	9e 87       	std	Y+14, r25	; 0x0e
	char buffer[10];
	dtostrf(value, 4, 2, buffer);  // Convert float to string with 2 decimal places
    1090:	6b 85       	ldd	r22, Y+11	; 0x0b
    1092:	7c 85       	ldd	r23, Y+12	; 0x0c
    1094:	8d 85       	ldd	r24, Y+13	; 0x0d
    1096:	9e 85       	ldd	r25, Y+14	; 0x0e
    1098:	8e 01       	movw	r16, r28
    109a:	0f 5f       	subi	r16, 0xFF	; 255
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	22 e0       	ldi	r18, 0x02	; 2
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	44 e0       	ldi	r20, 0x04	; 4
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	0e 94 98 28 	call	0x5130	; 0x5130 <dtostrf>
	LCD_String(buffer);  // Display the string on the LCD
    10aa:	c8 01       	movw	r24, r16
    10ac:	0e 94 09 08 	call	0x1012	; 0x1012 <LCD_String>
}
    10b0:	2e 96       	adiw	r28, 0x0e	; 14
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <UART_Init>:
#include "avr/io.h"
#include <stdio.h>

#define F_CPU 8000000 
void UART_Init(unsigned int baud) {
	unsigned int ubrr = (F_CPU / 16 / baud) - 1;
    10c6:	9c 01       	movw	r18, r24
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	60 e2       	ldi	r22, 0x20	; 32
    10ce:	71 ea       	ldi	r23, 0xA1	; 161
    10d0:	87 e0       	ldi	r24, 0x07	; 7
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 73 28 	call	0x50e6	; 0x50e6 <__divmodsi4>
    10d8:	21 50       	subi	r18, 0x01	; 1
    10da:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(ubrr >> 8);  // Set high byte of baud rate
    10dc:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)ubrr;        // Set low byte of baud rate
    10de:	29 b9       	out	0x09, r18	; 9
	UCSRB = (1 << TXEN);                // Enable transmitter
    10e0:	88 e0       	ldi	r24, 0x08	; 8
    10e2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0); // 8-bit data, 1 stop bit
    10e4:	86 e8       	ldi	r24, 0x86	; 134
    10e6:	80 bd       	out	0x20, r24	; 32
}
    10e8:	08 95       	ret

000010ea <UART_Transmit>:

// Function to send a character via UART
void UART_Transmit(char data) {
	while (!(UCSRA & (1 << UDRE)));  // Wait for the buffer to be empty
    10ea:	5d 9b       	sbis	0x0b, 5	; 11
    10ec:	fe cf       	rjmp	.-4      	; 0x10ea <UART_Transmit>
	UDR = data;                     // Send the character
    10ee:	8c b9       	out	0x0c, r24	; 12
}
    10f0:	08 95       	ret

000010f2 <UART_Print>:



void UART_Print(const char *str) {
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
    while (*str) {
    10f8:	89 91       	ld	r24, Y+
    10fa:	81 11       	cpse	r24, r1
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <UART_Print+0x12>
        UART_Transmit(*str++);
    }
}
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret



void UART_Print(const char *str) {
    while (*str) {
        UART_Transmit(*str++);
    1104:	0e 94 75 08 	call	0x10ea	; 0x10ea <UART_Transmit>
    1108:	f7 cf       	rjmp	.-18     	; 0x10f8 <UART_Print+0x6>

0000110a <UART_PrintFloat>:
    }
}


// UART Print Float Using dtostrf
void UART_PrintFloat(float value) {
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	64 97       	sbiw	r28, 0x14	; 20
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	69 8b       	std	Y+17, r22	; 0x11
    1124:	7a 8b       	std	Y+18, r23	; 0x12
    1126:	8b 8b       	std	Y+19, r24	; 0x13
    1128:	9c 8b       	std	Y+20, r25	; 0x14
    char buffer[16];
    dtostrf(value, 6, 2, buffer); // Convert float to string (width: 6, precision: 2)
    112a:	69 89       	ldd	r22, Y+17	; 0x11
    112c:	7a 89       	ldd	r23, Y+18	; 0x12
    112e:	8b 89       	ldd	r24, Y+19	; 0x13
    1130:	9c 89       	ldd	r25, Y+20	; 0x14
    1132:	8e 01       	movw	r16, r28
    1134:	0f 5f       	subi	r16, 0xFF	; 255
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	22 e0       	ldi	r18, 0x02	; 2
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	46 e0       	ldi	r20, 0x06	; 6
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	0e 94 98 28 	call	0x5130	; 0x5130 <dtostrf>
    UART_Print(buffer);
    1144:	c8 01       	movw	r24, r16
    1146:	0e 94 79 08 	call	0x10f2	; 0x10f2 <UART_Print>
}
    114a:	64 96       	adiw	r28, 0x14	; 20
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	08 95       	ret

00001160 <xCoRoutineCreate>:
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode,
                                 UBaseType_t uxPriority,
                                 UBaseType_t uxIndex )
    {
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	6c 01       	movw	r12, r24
    1170:	16 2f       	mov	r17, r22
    1172:	f4 2e       	mov	r15, r20

        /* Allocate the memory that will store the co-routine control block. */
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
    1174:	8a e1       	ldi	r24, 0x1A	; 26
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 17 0c 	call	0x182e	; 0x182e <pvPortMalloc>
    117c:	ec 01       	movw	r28, r24

            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    117e:	8f ef       	ldi	r24, 0xFF	; 255
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );

        if( pxCoRoutine )
    1180:	20 97       	sbiw	r28, 0x00	; 0
    1182:	09 f4       	brne	.+2      	; 0x1186 <xCoRoutineCreate+0x26>
    1184:	56 c0       	rjmp	.+172    	; 0x1232 <xCoRoutineCreate+0xd2>
        {
            /* If pxCurrentCoRoutine is NULL then this is the first co-routine to
            * be created and the co-routine data structures need initialising. */
            if( pxCurrentCoRoutine == NULL )
    1186:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    118a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    118e:	89 2b       	or	r24, r25
    1190:	21 f5       	brne	.+72     	; 0x11da <xCoRoutineCreate+0x7a>
            {
                pxCurrentCoRoutine = pxCoRoutine;
    1192:	d0 93 6a 01 	sts	0x016A, r29	; 0x80016a <pxCurrentCoRoutine+0x1>
    1196:	c0 93 69 01 	sts	0x0169, r28	; 0x800169 <pxCurrentCoRoutine>
    {
        UBaseType_t uxPriority;

        for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
        {
            vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    119a:	8a e8       	ldi	r24, 0x8A	; 138
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
    11a2:	83 e9       	ldi	r24, 0x93	; 147
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
        }

        vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
    11aa:	81 e8       	ldi	r24, 0x81	; 129
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
        vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    11b2:	88 e7       	ldi	r24, 0x78	; 120
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
        vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    11ba:	8b e6       	ldi	r24, 0x6B	; 107
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>

        /* Start with pxDelayedCoRoutineList using list1 and the
         * pxOverflowDelayedCoRoutineList using list2. */
        pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    11c2:	81 e8       	ldi	r24, 0x81	; 129
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <pxDelayedCoRoutineList+0x1>
    11ca:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    11ce:	88 e7       	ldi	r24, 0x78	; 120
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
    11d6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <pxOverflowDelayedCoRoutineList>
    11da:	11 11       	cpse	r17, r1
    11dc:	11 e0       	ldi	r17, 0x01	; 1
            {
                uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
            }

            /* Fill out the co-routine control block from the function parameters. */
            pxCoRoutine->uxState = corINITIAL_STATE;
    11de:	19 8e       	std	Y+25, r1	; 0x19
    11e0:	18 8e       	std	Y+24, r1	; 0x18
            pxCoRoutine->uxPriority = uxPriority;
    11e2:	1e 8b       	std	Y+22, r17	; 0x16
            pxCoRoutine->uxIndex = uxIndex;
    11e4:	ff 8a       	std	Y+23, r15	; 0x17
            pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    11e6:	fe 01       	movw	r30, r28
    11e8:	c1 92       	st	Z+, r12
    11ea:	d1 92       	st	Z+, r13
    11ec:	7f 01       	movw	r14, r30

            /* Initialise all the other co-routine control block parameters. */
            vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    11ee:	cf 01       	movw	r24, r30
    11f0:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <vListInitialiseItem>
            vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    11f4:	ce 01       	movw	r24, r28
    11f6:	0c 96       	adiw	r24, 0x0c	; 12
    11f8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <vListInitialiseItem>

            /* Set the co-routine control block as a link back from the ListItem_t.
             * This is so we can get back to the containing CRCB from a generic item
             * in a list. */
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    11fc:	d9 87       	std	Y+9, r29	; 0x09
    11fe:	c8 87       	std	Y+8, r28	; 0x08
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    1200:	db 8b       	std	Y+19, r29	; 0x13
    1202:	ca 8b       	std	Y+18, r28	; 0x12

            /* Event lists are always in priority order. */
            listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	81 1b       	sub	r24, r17
    120a:	91 09       	sbc	r25, r1
    120c:	9d 87       	std	Y+13, r25	; 0x0d
    120e:	8c 87       	std	Y+12, r24	; 0x0c

            /* Now the co-routine has been initialised it can be added to the ready
             * list at the correct priority. */
            prvAddCoRoutineToReadyQueue( pxCoRoutine );
    1210:	8e 89       	ldd	r24, Y+22	; 0x16
    1212:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <uxTopCoRoutineReadyPriority>
    1216:	98 17       	cp	r25, r24
    1218:	10 f4       	brcc	.+4      	; 0x121e <xCoRoutineCreate+0xbe>
    121a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
    121e:	f9 e0       	ldi	r31, 0x09	; 9
    1220:	8f 9f       	mul	r24, r31
    1222:	c0 01       	movw	r24, r0
    1224:	11 24       	eor	r1, r1
    1226:	b7 01       	movw	r22, r14
    1228:	86 57       	subi	r24, 0x76	; 118
    122a:	9e 4f       	sbci	r25, 0xFE	; 254
    122c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <vListInsertEnd>

            xReturn = pdPASS;
    1230:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xCoRoutineCreate( xReturn );

        return xReturn;
    }
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	08 95       	ret

00001242 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

    void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay,
                                     List_t * pxEventList )
    {
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	8b 01       	movw	r16, r22

        traceENTER_vCoRoutineAddToDelayedList( xTicksToDelay, pxEventList );

        /* Calculate the time to wake - this may overflow but this is
         * not a problem. */
        xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    124c:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <xCoRoutineTickCount>
    1250:	d0 91 67 01 	lds	r29, 0x0167	; 0x800167 <xCoRoutineTickCount+0x1>
    1254:	c8 0f       	add	r28, r24
    1256:	d9 1f       	adc	r29, r25

        /* We must remove ourselves from the ready list before adding
         * ourselves to the blocked list as the same list item is used for
         * both lists. */
        ( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1258:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    125c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    1260:	02 96       	adiw	r24, 0x02	; 2
    1262:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    1266:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    126a:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    126e:	fb 01       	movw	r30, r22
    1270:	d3 83       	std	Z+3, r29	; 0x03
    1272:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xCoRoutineTickCount )
    1274:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <xCoRoutineTickCount>
    1278:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <xCoRoutineTickCount+0x1>
    127c:	6e 5f       	subi	r22, 0xFE	; 254
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	c8 17       	cp	r28, r24
    1282:	d9 07       	cpc	r29, r25
    1284:	b0 f4       	brcc	.+44     	; 0x12b2 <vCoRoutineAddToDelayedList+0x70>
        {
            /* Wake time has overflowed.  Place this item in the
             * overflow list. */
            vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1286:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <pxOverflowDelayedCoRoutineList>
    128a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    128e:	0e 94 95 0c 	call	0x192a	; 0x192a <vListInsert>
        }

        if( pxEventList )
    1292:	01 15       	cp	r16, r1
    1294:	11 05       	cpc	r17, r1
    1296:	91 f0       	breq	.+36     	; 0x12bc <vCoRoutineAddToDelayedList+0x7a>
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    1298:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    129c:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    12a0:	64 5f       	subi	r22, 0xF4	; 244
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	c8 01       	movw	r24, r16
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16

        if( pxEventList )
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    12ae:	0c 94 95 0c 	jmp	0x192a	; 0x192a <vListInsert>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    12b2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <pxDelayedCoRoutineList>
    12b6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <pxDelayedCoRoutineList+0x1>
    12ba:	e9 cf       	rjmp	.-46     	; 0x128e <vCoRoutineAddToDelayedList+0x4c>
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	08 95       	ret

000012c6 <vCoRoutineSchedule>:
        xLastTickCount = xCoRoutineTickCount;
    }
/*-----------------------------------------------------------*/

    void vCoRoutineSchedule( void )
    {
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
        traceENTER_vCoRoutineSchedule();

        /* Only run a co-routine after prvInitialiseCoRoutineLists() has been
         * called.  prvInitialiseCoRoutineLists() is called automatically when a
         * co-routine is created. */
        if( pxDelayedCoRoutineList != NULL )
    12d0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <pxDelayedCoRoutineList>
    12d4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <pxDelayedCoRoutineList+0x1>
    12d8:	89 2b       	or	r24, r25
    12da:	09 f4       	brne	.+2      	; 0x12de <vCoRoutineSchedule+0x18>
    12dc:	44 c0       	rjmp	.+136    	; 0x1366 <vCoRoutineSchedule+0xa0>
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
            }
            portENABLE_INTERRUPTS();

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    12de:	99 e0       	ldi	r25, 0x09	; 9
    12e0:	f9 2e       	mov	r15, r25
    static void prvCheckPendingReadyList( void )
    {
        /* Are there any co-routines waiting to get moved to the ready list?  These
         * are co-routines that have been readied by an ISR.  The ISR cannot access
         * the ready lists itself. */
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    12e2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <xPendingReadyCoRoutineList>
    12e6:	81 11       	cpse	r24, r1
    12e8:	44 c0       	rjmp	.+136    	; 0x1372 <vCoRoutineSchedule+0xac>

    static void prvCheckDelayedList( void )
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    12ea:	0e 94 16 1a 	call	0x342c	; 0x342c <xTaskGetTickCount>
    12ee:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <xLastTickCount>
    12f2:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <xLastTickCount+0x1>
    12f6:	82 1b       	sub	r24, r18
    12f8:	93 0b       	sbc	r25, r19
    12fa:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <xPassedTicks+0x1>
    12fe:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <xPassedTicks>
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
                    }
                }
                portENABLE_INTERRUPTS();

                prvAddCoRoutineToReadyQueue( pxCRCB );
    1302:	89 e0       	ldi	r24, 0x09	; 9
    1304:	f8 2e       	mov	r15, r24
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
    1306:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <xPassedTicks>
    130a:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <xPassedTicks+0x1>
    130e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <xCoRoutineTickCount>
    1312:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <xCoRoutineTickCount+0x1>
    1316:	21 15       	cp	r18, r1
    1318:	31 05       	cpc	r19, r1
    131a:	09 f0       	breq	.+2      	; 0x131e <vCoRoutineSchedule+0x58>
    131c:	4c c0       	rjmp	.+152    	; 0x13b6 <vCoRoutineSchedule+0xf0>

                prvAddCoRoutineToReadyQueue( pxCRCB );
            }
        }

        xLastTickCount = xCoRoutineTickCount;
    131e:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <xLastTickCount+0x1>
    1322:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <xLastTickCount>
    1326:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <uxTopCoRoutineReadyPriority>

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	99 e0       	ldi	r25, 0x09	; 9
    1330:	92 9f       	mul	r25, r18
    1332:	f0 01       	movw	r30, r0
    1334:	93 9f       	mul	r25, r19
    1336:	f0 0d       	add	r31, r0
    1338:	11 24       	eor	r1, r1
    133a:	e6 57       	subi	r30, 0x76	; 118
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	40 81       	ld	r20, Z
    1340:	41 11       	cpse	r20, r1
    1342:	8d c0       	rjmp	.+282    	; 0x145e <vCoRoutineSchedule+0x198>
            {
                if( uxTopCoRoutineReadyPriority == 0 )
    1344:	88 23       	and	r24, r24
    1346:	69 f0       	breq	.+26     	; 0x1362 <vCoRoutineSchedule+0x9c>
                {
                    /* No more co-routines to check. */
                    return;
                }

                --uxTopCoRoutineReadyPriority;
    1348:	81 50       	subi	r24, 0x01	; 1

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	92 9f       	mul	r25, r18
    1350:	f0 01       	movw	r30, r0
    1352:	93 9f       	mul	r25, r19
    1354:	f0 0d       	add	r31, r0
    1356:	11 24       	eor	r1, r1
    1358:	e6 57       	subi	r30, 0x76	; 118
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	90 81       	ld	r25, Z
    135e:	91 11       	cpse	r25, r1
    1360:	7e c0       	rjmp	.+252    	; 0x145e <vCoRoutineSchedule+0x198>
    1362:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
        }

        traceRETURN_vCoRoutineSchedule();
    }
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	08 95       	ret
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
        {
            CRCB_t * pxUnblockedCRCB;

            /* The pending ready list can be accessed by an ISR. */
            portDISABLE_INTERRUPTS();
    1372:	f8 94       	cli
            {
                pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyCoRoutineList ) );
    1374:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <xPendingReadyCoRoutineList+0x5>
    1378:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <xPendingReadyCoRoutineList+0x6>
    137c:	c6 81       	ldd	r28, Z+6	; 0x06
    137e:	d7 81       	ldd	r29, Z+7	; 0x07
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1380:	ce 01       	movw	r24, r28
    1382:	0c 96       	adiw	r24, 0x0c	; 12
    1384:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>
            }
            portENABLE_INTERRUPTS();
    1388:	78 94       	sei

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    138a:	8e 01       	movw	r16, r28
    138c:	0e 5f       	subi	r16, 0xFE	; 254
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	c8 01       	movw	r24, r16
    1392:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    1396:	8e 89       	ldd	r24, Y+22	; 0x16
    1398:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <uxTopCoRoutineReadyPriority>
    139c:	98 17       	cp	r25, r24
    139e:	10 f4       	brcc	.+4      	; 0x13a4 <vCoRoutineSchedule+0xde>
    13a0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
    13a4:	8f 9d       	mul	r24, r15
    13a6:	c0 01       	movw	r24, r0
    13a8:	11 24       	eor	r1, r1
    13aa:	b8 01       	movw	r22, r16
    13ac:	86 57       	subi	r24, 0x76	; 118
    13ae:	9e 4f       	sbci	r25, 0xFE	; 254
    13b0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <vListInsertEnd>
    13b4:	96 cf       	rjmp	.-212    	; 0x12e2 <vCoRoutineSchedule+0x1c>

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
        {
            xCoRoutineTickCount++;
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <xCoRoutineTickCount+0x1>
    13bc:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <xCoRoutineTickCount>
            xPassedTicks--;
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	31 09       	sbc	r19, r1
    13c4:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <xPassedTicks+0x1>
    13c8:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <xPassedTicks>

            /* If the tick count has overflowed we need to swap the ready lists. */
            if( xCoRoutineTickCount == 0 )
    13cc:	89 2b       	or	r24, r25
    13ce:	81 f4       	brne	.+32     	; 0x13f0 <vCoRoutineSchedule+0x12a>
    13d0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <pxDelayedCoRoutineList>
    13d4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <pxDelayedCoRoutineList+0x1>
                List_t * pxTemp;

                /* Tick count has overflowed so we need to swap the delay lists.  If there are
                 * any items in pxDelayedCoRoutineList here then there is an error! */
                pxTemp = pxDelayedCoRoutineList;
                pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    13d8:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <pxOverflowDelayedCoRoutineList>
    13dc:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
    13e0:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <pxDelayedCoRoutineList+0x1>
    13e4:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <pxDelayedCoRoutineList>
                pxOverflowDelayedCoRoutineList = pxTemp;
    13e8:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
    13ec:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <pxOverflowDelayedCoRoutineList>
            }

            /* See if this tick has made a timeout expire. */
            while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    13f0:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <pxDelayedCoRoutineList>
    13f4:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <pxDelayedCoRoutineList+0x1>
    13f8:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <xCoRoutineTickCount>
    13fc:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <xCoRoutineTickCount+0x1>
    1400:	80 81       	ld	r24, Z
    1402:	88 23       	and	r24, r24
    1404:	09 f4       	brne	.+2      	; 0x1408 <vCoRoutineSchedule+0x142>
    1406:	7f cf       	rjmp	.-258    	; 0x1306 <vCoRoutineSchedule+0x40>
            {
                pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    1408:	05 80       	ldd	r0, Z+5	; 0x05
    140a:	f6 81       	ldd	r31, Z+6	; 0x06
    140c:	e0 2d       	mov	r30, r0
    140e:	c6 81       	ldd	r28, Z+6	; 0x06
    1410:	d7 81       	ldd	r29, Z+7	; 0x07

                if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	28 17       	cp	r18, r24
    1418:	39 07       	cpc	r19, r25
    141a:	08 f4       	brcc	.+2      	; 0x141e <vCoRoutineSchedule+0x158>
    141c:	74 cf       	rjmp	.-280    	; 0x1306 <vCoRoutineSchedule+0x40>
                {
                    /* Timeout not yet expired. */
                    break;
                }

                portDISABLE_INTERRUPTS();
    141e:	f8 94       	cli
                    /* The event could have occurred just before this critical
                     *  section.  If this is the case then the generic list item will
                     *  have been moved to the pending ready list and the following
                     *  line is still valid.  Also the pvContainer parameter will have
                     *  been set to NULL so the following lines are also valid. */
                    ( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    1420:	8e 01       	movw	r16, r28
    1422:	0e 5f       	subi	r16, 0xFE	; 254
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	c8 01       	movw	r24, r16
    1428:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>

                    /* Is the co-routine waiting on an event also? */
                    if( pxCRCB->xEventListItem.pxContainer )
    142c:	8c 89       	ldd	r24, Y+20	; 0x14
    142e:	9d 89       	ldd	r25, Y+21	; 0x15
    1430:	89 2b       	or	r24, r25
    1432:	21 f0       	breq	.+8      	; 0x143c <vCoRoutineSchedule+0x176>
                    {
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    1434:	ce 01       	movw	r24, r28
    1436:	0c 96       	adiw	r24, 0x0c	; 12
    1438:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>
                    }
                }
                portENABLE_INTERRUPTS();
    143c:	78 94       	sei

                prvAddCoRoutineToReadyQueue( pxCRCB );
    143e:	8e 89       	ldd	r24, Y+22	; 0x16
    1440:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <uxTopCoRoutineReadyPriority>
    1444:	98 17       	cp	r25, r24
    1446:	10 f4       	brcc	.+4      	; 0x144c <vCoRoutineSchedule+0x186>
    1448:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
    144c:	8f 9d       	mul	r24, r15
    144e:	c0 01       	movw	r24, r0
    1450:	11 24       	eor	r1, r1
    1452:	b8 01       	movw	r22, r16
    1454:	86 57       	subi	r24, 0x76	; 118
    1456:	9e 4f       	sbci	r25, 0xFE	; 254
    1458:	0e 94 75 0c 	call	0x18ea	; 0x18ea <vListInsertEnd>
    145c:	c9 cf       	rjmp	.-110    	; 0x13f0 <vCoRoutineSchedule+0x12a>
    145e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
                --uxTopCoRoutineReadyPriority;
            }

            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    1462:	49 e0       	ldi	r20, 0x09	; 9
    1464:	42 9f       	mul	r20, r18
    1466:	c0 01       	movw	r24, r0
    1468:	43 9f       	mul	r20, r19
    146a:	90 0d       	add	r25, r0
    146c:	11 24       	eor	r1, r1
    146e:	fc 01       	movw	r30, r24
    1470:	e6 57       	subi	r30, 0x76	; 118
    1472:	fe 4f       	sbci	r31, 0xFE	; 254
    1474:	a1 81       	ldd	r26, Z+1	; 0x01
    1476:	b2 81       	ldd	r27, Z+2	; 0x02
    1478:	12 96       	adiw	r26, 0x02	; 2
    147a:	4d 91       	ld	r20, X+
    147c:	5c 91       	ld	r21, X
    147e:	52 83       	std	Z+2, r21	; 0x02
    1480:	41 83       	std	Z+1, r20	; 0x01
    1482:	83 57       	subi	r24, 0x73	; 115
    1484:	9e 4f       	sbci	r25, 0xFE	; 254
    1486:	48 17       	cp	r20, r24
    1488:	59 07       	cpc	r21, r25
    148a:	21 f4       	brne	.+8      	; 0x1494 <vCoRoutineSchedule+0x1ce>
    148c:	85 81       	ldd	r24, Z+5	; 0x05
    148e:	96 81       	ldd	r25, Z+6	; 0x06
    1490:	92 83       	std	Z+2, r25	; 0x02
    1492:	81 83       	std	Z+1, r24	; 0x01
    1494:	89 e0       	ldi	r24, 0x09	; 9
    1496:	82 9f       	mul	r24, r18
    1498:	f0 01       	movw	r30, r0
    149a:	83 9f       	mul	r24, r19
    149c:	f0 0d       	add	r31, r0
    149e:	11 24       	eor	r1, r1
    14a0:	e6 57       	subi	r30, 0x76	; 118
    14a2:	fe 4f       	sbci	r31, 0xFE	; 254
    14a4:	01 80       	ldd	r0, Z+1	; 0x01
    14a6:	f2 81       	ldd	r31, Z+2	; 0x02
    14a8:	e0 2d       	mov	r30, r0
    14aa:	86 81       	ldd	r24, Z+6	; 0x06
    14ac:	97 81       	ldd	r25, Z+7	; 0x07
    14ae:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <pxCurrentCoRoutine+0x1>
    14b2:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <pxCurrentCoRoutine>

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    14b6:	dc 01       	movw	r26, r24
    14b8:	ed 91       	ld	r30, X+
    14ba:	fc 91       	ld	r31, X
    14bc:	11 97       	sbiw	r26, 0x01	; 1
    14be:	57 96       	adiw	r26, 0x17	; 23
    14c0:	6c 91       	ld	r22, X
        }

        traceRETURN_vCoRoutineSchedule();
    }
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    14cc:	09 94       	ijmp

000014ce <xCoRoutineRemoveFromEventList>:
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    }
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineRemoveFromEventList( const List_t * pxEventList )
    {
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
        traceENTER_xCoRoutineRemoveFromEventList( pxEventList );

        /* This function is called from within an interrupt.  It can only access
         * event lists and the pending ready list.  This function assumes that a
         * check has already been made to ensure pxEventList is not empty. */
        pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    14d6:	dc 01       	movw	r26, r24
    14d8:	15 96       	adiw	r26, 0x05	; 5
    14da:	ed 91       	ld	r30, X+
    14dc:	fc 91       	ld	r31, X
    14de:	c6 81       	ldd	r28, Z+6	; 0x06
    14e0:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    14e2:	8e 01       	movw	r16, r28
    14e4:	04 5f       	subi	r16, 0xF4	; 244
    14e6:	1f 4f       	sbci	r17, 0xFF	; 255
    14e8:	c8 01       	movw	r24, r16
    14ea:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>
        vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    14ee:	b8 01       	movw	r22, r16
    14f0:	8b e6       	ldi	r24, 0x6B	; 107
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <vListInsertEnd>

        if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    14f8:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    14fc:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	2e 89       	ldd	r18, Y+22	; 0x16
    1504:	96 89       	ldd	r25, Z+22	; 0x16
    1506:	29 17       	cp	r18, r25
    1508:	08 f4       	brcc	.+2      	; 0x150c <xCoRoutineRemoveFromEventList+0x3e>
    150a:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xCoRoutineRemoveFromEventList( xReturn );

        return xReturn;
    }
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <vCoRoutineResetState>:
 * scheduler.
 */
    void vCoRoutineResetState( void )
    {
        /* Lists for ready and blocked co-routines. */
        pxDelayedCoRoutineList = NULL;
    1516:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <pxDelayedCoRoutineList+0x1>
    151a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = NULL;
    151e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
    1522:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <pxOverflowDelayedCoRoutineList>

        /* Other file private variables. */
        pxCurrentCoRoutine = NULL;
    1526:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <pxCurrentCoRoutine+0x1>
    152a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <pxCurrentCoRoutine>
        uxTopCoRoutineReadyPriority = ( UBaseType_t ) 0U;
    152e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <uxTopCoRoutineReadyPriority>
        xCoRoutineTickCount = ( TickType_t ) 0U;
    1532:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <xCoRoutineTickCount+0x1>
    1536:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <xCoRoutineTickCount>
        xLastTickCount = ( TickType_t ) 0U;
    153a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <xLastTickCount+0x1>
    153e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <xLastTickCount>
        xPassedTicks = ( TickType_t ) 0U;
    1542:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <xPassedTicks+0x1>
    1546:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <xPassedTicks>
    }
    154a:	08 95       	ret

0000154c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    1550:	8b e0       	ldi	r24, 0x0B	; 11
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 17 0c 	call	0x182e	; 0x182e <pvPortMalloc>
    1558:	ec 01       	movw	r28, r24

            if( pxEventBits != NULL )
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	31 f0       	breq	.+12     	; 0x156a <xEventGroupCreate+0x1e>
            {
                pxEventBits->uxEventBits = 0;
    155e:	fc 01       	movw	r30, r24
    1560:	11 92       	st	Z+, r1
    1562:	11 92       	st	Z+, r1
    1564:	cf 01       	movw	r24, r30
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    1566:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
        }
    156a:	ce 01       	movw	r24, r28
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
    1572:	af 92       	push	r10
    1574:	bf 92       	push	r11
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	6c 01       	movw	r12, r24
    1588:	7b 01       	movw	r14, r22
    158a:	b4 2e       	mov	r11, r20
    158c:	a2 2e       	mov	r10, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
    158e:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    1592:	f6 01       	movw	r30, r12
    1594:	c0 81       	ld	r28, Z
    1596:	d1 81       	ldd	r29, Z+1	; 0x01
    1598:	ce 01       	movw	r24, r28
    159a:	8e 21       	and	r24, r14
    159c:	9f 21       	and	r25, r15
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
    159e:	a1 10       	cpse	r10, r1
    15a0:	40 c0       	rjmp	.+128    	; 0x1622 <xEventGroupWaitBits+0xb0>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    15a2:	89 2b       	or	r24, r25
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <xEventGroupWaitBits+0x36>
    15a6:	41 c0       	rjmp	.+130    	; 0x162a <xEventGroupWaitBits+0xb8>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
    15a8:	01 15       	cp	r16, r1
    15aa:	11 05       	cpc	r17, r1
    15ac:	89 f0       	breq	.+34     	; 0x15d0 <xEventGroupWaitBits+0x5e>
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
        EventGroup_t * pxEventBits = xEventGroup;
        EventBits_t uxReturn, uxControlBits = 0;
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	60 e0       	ldi	r22, 0x00	; 0
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
    15b2:	bb 20       	and	r11, r11
    15b4:	11 f0       	breq	.+4      	; 0x15ba <xEventGroupWaitBits+0x48>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	71 e0       	ldi	r23, 0x01	; 1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
    15ba:	a1 10       	cpse	r10, r1
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
    15bc:	74 60       	ori	r23, 0x04	; 4
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    15be:	6e 29       	or	r22, r14
    15c0:	7f 29       	or	r23, r15
    15c2:	a8 01       	movw	r20, r16
    15c4:	c6 01       	movw	r24, r12
    15c6:	02 96       	adiw	r24, 0x02	; 2
    15c8:	0e 94 ad 1c 	call	0x395a	; 0x395a <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
    15cc:	d0 e0       	ldi	r29, 0x00	; 0
    15ce:	c0 e0       	ldi	r28, 0x00	; 0

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    15d0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
    15d4:	01 2b       	or	r16, r17
    15d6:	c9 f0       	breq	.+50     	; 0x160a <xEventGroupWaitBits+0x98>
        {
            if( xAlreadyYielded == pdFALSE )
    15d8:	81 11       	cpse	r24, r1
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <xEventGroupWaitBits+0x6e>
            {
                taskYIELD_WITHIN_API();
    15dc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
    15e0:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    15e4:	91 fd       	sbrc	r25, 1
    15e6:	0f c0       	rjmp	.+30     	; 0x1606 <xEventGroupWaitBits+0x94>
            {
                taskENTER_CRITICAL();
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	0f 92       	push	r0
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
    15ee:	f6 01       	movw	r30, r12
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	97 01       	movw	r18, r14
    15f6:	28 23       	and	r18, r24
    15f8:	39 23       	and	r19, r25
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
    15fa:	a1 10       	cpse	r10, r1
    15fc:	23 c0       	rjmp	.+70     	; 0x1644 <xEventGroupWaitBits+0xd2>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    15fe:	23 2b       	or	r18, r19
    1600:	21 f5       	brne	.+72     	; 0x164a <xEventGroupWaitBits+0xd8>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
                }
                taskEXIT_CRITICAL();
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1606:	ec 01       	movw	r28, r24
    1608:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
    }
    160a:	ce 01       	movw	r24, r28
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	bf 90       	pop	r11
    161e:	af 90       	pop	r10
    1620:	08 95       	ret
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1622:	e8 16       	cp	r14, r24
    1624:	f9 06       	cpc	r15, r25
    1626:	09 f0       	breq	.+2      	; 0x162a <xEventGroupWaitBits+0xb8>
    1628:	bf cf       	rjmp	.-130    	; 0x15a8 <xEventGroupWaitBits+0x36>
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
    162a:	bb 20       	and	r11, r11
    162c:	41 f0       	breq	.+16     	; 0x163e <xEventGroupWaitBits+0xcc>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    162e:	c7 01       	movw	r24, r14
    1630:	80 95       	com	r24
    1632:	90 95       	com	r25
    1634:	8c 23       	and	r24, r28
    1636:	9d 23       	and	r25, r29
    1638:	f6 01       	movw	r30, r12
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
            if( xWaitConditionMet != pdFALSE )
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	00 e0       	ldi	r16, 0x00	; 0
    1642:	c6 cf       	rjmp	.-116    	; 0x15d0 <xEventGroupWaitBits+0x5e>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1644:	e2 16       	cp	r14, r18
    1646:	f3 06       	cpc	r15, r19
    1648:	e1 f6       	brne	.-72     	; 0x1602 <xEventGroupWaitBits+0x90>

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
                    {
                        if( xClearOnExit != pdFALSE )
    164a:	bb 20       	and	r11, r11
    164c:	d1 f2       	breq	.-76     	; 0x1602 <xEventGroupWaitBits+0x90>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    164e:	e0 94       	com	r14
    1650:	f0 94       	com	r15
    1652:	e8 22       	and	r14, r24
    1654:	f9 22       	and	r15, r25
    1656:	f6 01       	movw	r30, r12
    1658:	f1 82       	std	Z+1, r15	; 0x01
    165a:	e0 82       	st	Z, r14
    165c:	d2 cf       	rjmp	.-92     	; 0x1602 <xEventGroupWaitBits+0x90>

0000165e <xEventGroupClearBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
    165e:	fc 01       	movw	r30, r24
        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        taskENTER_CRITICAL();
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	0f 92       	push	r0
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
    166a:	60 95       	com	r22
    166c:	70 95       	com	r23
    166e:	68 23       	and	r22, r24
    1670:	79 23       	and	r23, r25
    1672:	71 83       	std	Z+1, r23	; 0x01
    1674:	60 83       	st	Z, r22
        }
        taskEXIT_CRITICAL();
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
    }
    167a:	08 95       	ret

0000167c <xEventGroupGetBitsFromISR>:
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xEventGroupGetBitsFromISR( uxReturn );

        return uxReturn;
    }
    167c:	fc 01       	movw	r30, r24
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	08 95       	ret

00001684 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
    1684:	cf 92       	push	r12
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	ec 01       	movw	r28, r24
    1696:	8b 01       	movw	r16, r22
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        pxList = &( pxEventBits->xTasksWaitingForBits );
        pxListEnd = listGET_END_MARKER( pxList );
    1698:	7c 01       	movw	r14, r24
    169a:	85 e0       	ldi	r24, 0x05	; 5
    169c:	e8 0e       	add	r14, r24
    169e:	f1 1c       	adc	r15, r1
        vTaskSuspendAll();
    16a0:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
    16a4:	ef 81       	ldd	r30, Y+7	; 0x07
    16a6:	f8 85       	ldd	r31, Y+8	; 0x08

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
    16a8:	68 81       	ld	r22, Y
    16aa:	79 81       	ldd	r23, Y+1	; 0x01
    16ac:	60 2b       	or	r22, r16
    16ae:	71 2b       	or	r23, r17
    16b0:	79 83       	std	Y+1, r23	; 0x01
    16b2:	68 83       	st	Y, r22
    {
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    16b4:	10 e0       	ldi	r17, 0x00	; 0
    16b6:	00 e0       	ldi	r16, 0x00	; 0
    16b8:	68 81       	ld	r22, Y
    16ba:	79 81       	ldd	r23, Y+1	; 0x01

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
    16bc:	ee 15       	cp	r30, r14
    16be:	ff 05       	cpc	r31, r15
    16c0:	99 f4       	brne	.+38     	; 0x16e8 <xEventGroupSetBits+0x64>
                pxListItem = pxNext;
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
    16c2:	00 95       	com	r16
    16c4:	10 95       	com	r17
    16c6:	06 23       	and	r16, r22
    16c8:	17 23       	and	r17, r23
    16ca:	19 83       	std	Y+1, r17	; 0x01
    16cc:	08 83       	st	Y, r16
        }
        ( void ) xTaskResumeAll();
    16ce:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
    }
    16d2:	88 81       	ld	r24, Y
    16d4:	99 81       	ldd	r25, Y+1	; 0x01
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	08 95       	ret
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
            {
                pxNext = listGET_NEXT( pxListItem );
    16e8:	c2 80       	ldd	r12, Z+2	; 0x02
    16ea:	d3 80       	ldd	r13, Z+3	; 0x03
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    16ec:	20 81       	ld	r18, Z
    16ee:	31 81       	ldd	r19, Z+1	; 0x01
                xMatchFound = pdFALSE;

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    16f0:	c9 01       	movw	r24, r18
    16f2:	99 27       	eor	r25, r25
    16f4:	ac 01       	movw	r20, r24
    16f6:	46 23       	and	r20, r22
    16f8:	57 23       	and	r21, r23

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    16fa:	32 fd       	sbrc	r19, 2
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <xEventGroupSetBits+0x82>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    16fe:	45 2b       	or	r20, r21
    1700:	29 f4       	brne	.+10     	; 0x170c <xEventGroupSetBits+0x88>
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
    1702:	f6 01       	movw	r30, r12
    1704:	d9 cf       	rjmp	.-78     	; 0x16b8 <xEventGroupSetBits+0x34>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1706:	84 17       	cp	r24, r20
    1708:	95 07       	cpc	r25, r21
    170a:	d9 f7       	brne	.-10     	; 0x1702 <xEventGroupSetBits+0x7e>
                }

                if( xMatchFound != pdFALSE )
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    170c:	30 ff       	sbrs	r19, 0
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <xEventGroupSetBits+0x90>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
    1710:	08 2b       	or	r16, r24
    1712:	19 2b       	or	r17, r25
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1714:	72 60       	ori	r23, 0x02	; 2
    1716:	cf 01       	movw	r24, r30
    1718:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <vTaskRemoveFromUnorderedEventList>
    171c:	f2 cf       	rjmp	.-28     	; 0x1702 <xEventGroupSetBits+0x7e>

0000171e <xEventGroupSync>:

    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait )
    {
    171e:	af 92       	push	r10
    1720:	bf 92       	push	r11
    1722:	cf 92       	push	r12
    1724:	df 92       	push	r13
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	7c 01       	movw	r14, r24
    1734:	eb 01       	movw	r28, r22
    1736:	8a 01       	movw	r16, r20
    1738:	69 01       	movw	r12, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
    173a:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        {
            uxOriginalBitValue = pxEventBits->uxEventBits;
    173e:	f7 01       	movw	r30, r14
    1740:	a0 80       	ld	r10, Z
    1742:	b1 80       	ldd	r11, Z+1	; 0x01

            ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1744:	be 01       	movw	r22, r28
    1746:	c7 01       	movw	r24, r14
    1748:	0e 94 42 0b 	call	0x1684	; 0x1684 <xEventGroupSetBits>

            if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    174c:	ca 29       	or	r28, r10
    174e:	db 29       	or	r29, r11
    1750:	ce 01       	movw	r24, r28
    1752:	80 23       	and	r24, r16
    1754:	91 23       	and	r25, r17
    1756:	80 17       	cp	r24, r16
    1758:	91 07       	cpc	r25, r17
    175a:	09 f0       	breq	.+2      	; 0x175e <xEventGroupSync+0x40>
    175c:	3b c0       	rjmp	.+118    	; 0x17d4 <xEventGroupSync+0xb6>
                /* All the rendezvous bits are now set - no need to block. */
                uxReturn = ( uxOriginalBitValue | uxBitsToSet );

                /* Rendezvous always clear the bits.  They will have been cleared
                 * already unless this is the only task in the rendezvous. */
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    175e:	f7 01       	movw	r30, r14
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	98 01       	movw	r18, r16
    1766:	20 95       	com	r18
    1768:	30 95       	com	r19
    176a:	82 23       	and	r24, r18
    176c:	93 23       	and	r25, r19
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24

                xTicksToWait = 0;
    1772:	d1 2c       	mov	r13, r1
    1774:	c1 2c       	mov	r12, r1
                    uxReturn = pxEventBits->uxEventBits;
                    xTimeoutOccurred = pdTRUE;
                }
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    1776:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
    177a:	cd 28       	or	r12, r13
    177c:	f9 f0       	breq	.+62     	; 0x17bc <xEventGroupSync+0x9e>
        {
            if( xAlreadyYielded == pdFALSE )
    177e:	81 11       	cpse	r24, r1
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <xEventGroupSync+0x68>
            {
                taskYIELD_WITHIN_API();
    1782:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
    1786:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    178a:	91 fd       	sbrc	r25, 1
    178c:	15 c0       	rjmp	.+42     	; 0x17b8 <xEventGroupSync+0x9a>
            {
                /* The task timed out, just return the current event bit value. */
                taskENTER_CRITICAL();
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	0f 92       	push	r0
                {
                    uxReturn = pxEventBits->uxEventBits;
    1794:	f7 01       	movw	r30, r14
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01

                    /* Although the task got here because it timed out before the
                     * bits it was waiting for were set, it is possible that since it
                     * unblocked another task has set the bits.  If this is the case
                     * then it needs to clear the bits before exiting. */
                    if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    179a:	98 01       	movw	r18, r16
    179c:	28 23       	and	r18, r24
    179e:	39 23       	and	r19, r25
    17a0:	20 17       	cp	r18, r16
    17a2:	31 07       	cpc	r19, r17
    17a4:	39 f4       	brne	.+14     	; 0x17b4 <xEventGroupSync+0x96>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    17a6:	a8 01       	movw	r20, r16
    17a8:	40 95       	com	r20
    17aa:	50 95       	com	r21
    17ac:	48 23       	and	r20, r24
    17ae:	59 23       	and	r21, r25
    17b0:	51 83       	std	Z+1, r21	; 0x01
    17b2:	40 83       	st	Z, r20
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
                /* The task unblocked because the bits were set. */
            }

            /* Control bits might be set as the task had blocked should not be
             * returned. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    17b8:	ec 01       	movw	r28, r24
    17ba:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupSync( uxReturn );

        return uxReturn;
    }
    17bc:	ce 01       	movw	r24, r28
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	df 90       	pop	r13
    17cc:	cf 90       	pop	r12
    17ce:	bf 90       	pop	r11
    17d0:	af 90       	pop	r10
    17d2:	08 95       	ret

                xTicksToWait = 0;
            }
            else
            {
                if( xTicksToWait != ( TickType_t ) 0 )
    17d4:	c1 14       	cp	r12, r1
    17d6:	d1 04       	cpc	r13, r1
    17d8:	51 f0       	breq	.+20     	; 0x17ee <xEventGroupSync+0xd0>
                    traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

                    /* Store the bits that the calling task is waiting for in the
                     * task's event list item so the kernel knows when a match is
                     * found.  Then enter the blocked state. */
                    vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    17da:	a6 01       	movw	r20, r12
    17dc:	b8 01       	movw	r22, r16
    17de:	75 60       	ori	r23, 0x05	; 5
    17e0:	c7 01       	movw	r24, r14
    17e2:	02 96       	adiw	r24, 0x02	; 2
    17e4:	0e 94 ad 1c 	call	0x395a	; 0x395a <vTaskPlaceOnUnorderedEventList>

                    /* This assignment is obsolete as uxReturn will get set after
                     * the task unblocks, but some compilers mistakenly generate a
                     * warning about uxReturn being returned without being set if the
                     * assignment is omitted. */
                    uxReturn = 0;
    17e8:	d0 e0       	ldi	r29, 0x00	; 0
    17ea:	c0 e0       	ldi	r28, 0x00	; 0
    17ec:	c4 cf       	rjmp	.-120    	; 0x1776 <xEventGroupSync+0x58>
                }
                else
                {
                    /* The rendezvous bits were not set, but no block time was
                     * specified - just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
    17ee:	f7 01       	movw	r30, r14
    17f0:	c0 81       	ld	r28, Z
    17f2:	d1 81       	ldd	r29, Z+1	; 0x01
    17f4:	c0 cf       	rjmp	.-128    	; 0x1776 <xEventGroupSync+0x58>

000017f6 <vEventGroupDelete>:
        return pxEventBits->uxEventBits;
    }
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	ec 01       	movw	r28, r24

        configASSERT( pxEventBits );

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

        vTaskSuspendAll();
    17fc:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	81 11       	cpse	r24, r1
    1804:	07 c0       	rjmp	.+14     	; 0x1814 <vEventGroupDelete+0x1e>
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
            }
        }
        ( void ) xTaskResumeAll();
    1806:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
    180a:	ce 01       	movw	r24, r28
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
    1810:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <vPortFree>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	72 e0       	ldi	r23, 0x02	; 2
    1818:	8f 81       	ldd	r24, Y+7	; 0x07
    181a:	98 85       	ldd	r25, Y+8	; 0x08
    181c:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <vTaskRemoveFromUnorderedEventList>
    1820:	ef cf       	rjmp	.-34     	; 0x1800 <vEventGroupDelete+0xa>

00001822 <vEventGroupSetBitsCallback>:
        traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    1822:	ba 01       	movw	r22, r20
    1824:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <xEventGroupSetBits>

00001828 <vEventGroupClearBitsCallback>:
        traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    1828:	ba 01       	movw	r22, r20
    182a:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <xEventGroupClearBits>

0000182e <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	8c 01       	movw	r16, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
    1838:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
    183c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <pucAlignedHeap.1975>
    1840:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <pucAlignedHeap.1975+0x1>
    1844:	89 2b       	or	r24, r25
    1846:	31 f4       	brne	.+12     	; 0x1854 <pvPortMalloc+0x26>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1848:	80 ea       	ldi	r24, 0xA0	; 160
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <pucAlignedHeap.1975+0x1>
    1850:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <pucAlignedHeap.1975>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    1854:	01 15       	cp	r16, r1
    1856:	11 05       	cpc	r17, r1
    1858:	f9 f0       	breq	.+62     	; 0x1898 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    185a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <xNextFreeByte>
    185e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <xNextFreeByte+0x1>
    1862:	02 0f       	add	r16, r18
    1864:	13 1f       	adc	r17, r19
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    1866:	0b 3d       	cpi	r16, 0xDB	; 219
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	18 07       	cpc	r17, r24
    186c:	a8 f4       	brcc	.+42     	; 0x1898 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    186e:	20 17       	cp	r18, r16
    1870:	31 07       	cpc	r19, r17
    1872:	90 f4       	brcc	.+36     	; 0x1898 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
    1874:	c0 91 9c 01 	lds	r28, 0x019C	; 0x80019c <pucAlignedHeap.1975>
    1878:	d0 91 9d 01 	lds	r29, 0x019D	; 0x80019d <pucAlignedHeap.1975+0x1>
    187c:	c2 0f       	add	r28, r18
    187e:	d3 1f       	adc	r29, r19
            xNextFreeByte += xWantedSize;
    1880:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <xNextFreeByte+0x1>
    1884:	00 93 9e 01 	sts	0x019E, r16	; 0x80019e <xNextFreeByte>
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1888:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
    188c:	ce 01       	movw	r24, r28
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	08 95       	ret

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
    1898:	d0 e0       	ldi	r29, 0x00	; 0
    189a:	c0 e0       	ldi	r28, 0x00	; 0
    189c:	f5 cf       	rjmp	.-22     	; 0x1888 <pvPortMalloc+0x5a>

0000189e <vPortFree>:
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
    189e:	08 95       	ret

000018a0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* Only required when static memory is not cleared. */
    xNextFreeByte = ( size_t ) 0;
    18a0:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <xNextFreeByte+0x1>
    18a4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <xNextFreeByte>
}
    18a8:	08 95       	ret

000018aa <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    18aa:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <xNextFreeByte>
    18ae:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <xNextFreeByte+0x1>
}
    18b2:	8b ed       	ldi	r24, 0xDB	; 219
    18b4:	95 e0       	ldi	r25, 0x05	; 5
    18b6:	82 1b       	sub	r24, r18
    18b8:	93 0b       	sbc	r25, r19
    18ba:	08 95       	ret

000018bc <vPortHeapResetState>:
    18bc:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <xNextFreeByte+0x1>
    18c0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <xNextFreeByte>
    18c4:	08 95       	ret

000018c6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    18c6:	fc 01       	movw	r30, r24
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
    18c8:	03 96       	adiw	r24, 0x03	; 3
    18ca:	92 83       	std	Z+2, r25	; 0x02
    18cc:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    18ce:	2f ef       	ldi	r18, 0xFF	; 255
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	34 83       	std	Z+4, r19	; 0x04
    18d4:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
    18d6:	96 83       	std	Z+6, r25	; 0x06
    18d8:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
    18da:	90 87       	std	Z+8, r25	; 0x08
    18dc:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    18de:	10 82       	st	Z, r1
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
    18e0:	08 95       	ret

000018e2 <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    18e2:	fc 01       	movw	r30, r24
    18e4:	11 86       	std	Z+9, r1	; 0x09
    18e6:	10 86       	std	Z+8, r1	; 0x08
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
    18e8:	08 95       	ret

000018ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	9c 01       	movw	r18, r24
    18f0:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
    18f2:	dc 01       	movw	r26, r24
    18f4:	11 96       	adiw	r26, 0x01	; 1
    18f6:	cd 91       	ld	r28, X+
    18f8:	dc 91       	ld	r29, X
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    18fa:	d3 83       	std	Z+3, r29	; 0x03
    18fc:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	95 83       	std	Z+5, r25	; 0x05
    1904:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	dc 01       	movw	r26, r24
    190c:	13 96       	adiw	r26, 0x03	; 3
    190e:	7c 93       	st	X, r23
    1910:	6e 93       	st	-X, r22
    1912:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    1914:	7d 83       	std	Y+5, r23	; 0x05
    1916:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1918:	31 87       	std	Z+9, r19	; 0x09
    191a:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
    191c:	f9 01       	movw	r30, r18
    191e:	80 81       	ld	r24, Z
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	80 83       	st	Z, r24

    traceRETURN_vListInsertEnd();
}
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	08 95       	ret

0000192a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	8c 01       	movw	r16, r24
    1934:	fb 01       	movw	r30, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    193a:	d8 01       	movw	r26, r16
    193c:	13 96       	adiw	r26, 0x03	; 3
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    193e:	8f 3f       	cpi	r24, 0xFF	; 255
    1940:	98 07       	cpc	r25, r24
    1942:	f1 f4       	brne	.+60     	; 0x1980 <vListInsert+0x56>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1944:	e8 01       	movw	r28, r16
    1946:	af 81       	ldd	r26, Y+7	; 0x07
    1948:	b8 85       	ldd	r27, Y+8	; 0x08
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    194a:	12 96       	adiw	r26, 0x02	; 2
    194c:	8d 91       	ld	r24, X+
    194e:	9c 91       	ld	r25, X
    1950:	13 97       	sbiw	r26, 0x03	; 3
    1952:	93 83       	std	Z+3, r25	; 0x03
    1954:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1956:	ec 01       	movw	r28, r24
    1958:	fd 83       	std	Y+5, r31	; 0x05
    195a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    195c:	b5 83       	std	Z+5, r27	; 0x05
    195e:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    1960:	13 96       	adiw	r26, 0x03	; 3
    1962:	fc 93       	st	X, r31
    1964:	ee 93       	st	-X, r30
    1966:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1968:	11 87       	std	Z+9, r17	; 0x09
    196a:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
    196c:	f8 01       	movw	r30, r16
    196e:	80 81       	ld	r24, Z
    1970:	8f 5f       	subi	r24, 0xFF	; 255
    1972:	80 83       	st	Z, r24

    traceRETURN_vListInsert();
}
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	08 95       	ret
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    197e:	d9 01       	movw	r26, r18
    1980:	12 96       	adiw	r26, 0x02	; 2
    1982:	2d 91       	ld	r18, X+
    1984:	3c 91       	ld	r19, X
    1986:	13 97       	sbiw	r26, 0x03	; 3
    1988:	e9 01       	movw	r28, r18
    198a:	48 81       	ld	r20, Y
    198c:	59 81       	ldd	r21, Y+1	; 0x01
    198e:	84 17       	cp	r24, r20
    1990:	95 07       	cpc	r25, r21
    1992:	a8 f7       	brcc	.-22     	; 0x197e <vListInsert+0x54>
    1994:	da cf       	rjmp	.-76     	; 0x194a <vListInsert+0x20>

00001996 <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	fc 01       	movw	r30, r24
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    199c:	a0 85       	ldd	r26, Z+8	; 0x08
    199e:	b1 85       	ldd	r27, Z+9	; 0x09

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	24 81       	ldd	r18, Z+4	; 0x04
    19a6:	35 81       	ldd	r19, Z+5	; 0x05
    19a8:	ec 01       	movw	r28, r24
    19aa:	3d 83       	std	Y+5, r19	; 0x05
    19ac:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    19ae:	c4 81       	ldd	r28, Z+4	; 0x04
    19b0:	d5 81       	ldd	r29, Z+5	; 0x05
    19b2:	9b 83       	std	Y+3, r25	; 0x03
    19b4:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	8d 91       	ld	r24, X+
    19ba:	9c 91       	ld	r25, X
    19bc:	12 97       	sbiw	r26, 0x02	; 2
    19be:	8e 17       	cp	r24, r30
    19c0:	9f 07       	cpc	r25, r31
    19c2:	21 f4       	brne	.+8      	; 0x19cc <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    19c4:	12 96       	adiw	r26, 0x02	; 2
    19c6:	dc 93       	st	X, r29
    19c8:	ce 93       	st	-X, r28
    19ca:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    19cc:	11 86       	std	Z+9, r1	; 0x09
    19ce:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
    19d0:	8c 91       	ld	r24, X
    19d2:	81 50       	subi	r24, 0x01	; 1
    19d4:	8c 93       	st	X, r24

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <pxPortInitialiseStack>:
    uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
     * This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    19dc:	31 e1       	ldi	r19, 0x11	; 17
    19de:	fc 01       	movw	r30, r24
    19e0:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    19e2:	31 97       	sbiw	r30, 0x01	; 1
    19e4:	22 e2       	ldi	r18, 0x22	; 34
    19e6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    19e8:	31 97       	sbiw	r30, 0x01	; 1
    19ea:	a3 e3       	ldi	r26, 0x33	; 51
    19ec:	a0 83       	st	Z, r26
    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
     * it on first. */
    usAddress = ( uint16_t ) pxCode;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    19ee:	31 97       	sbiw	r30, 0x01	; 1
    19f0:	60 83       	st	Z, r22
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    19f2:	31 97       	sbiw	r30, 0x01	; 1
    19f4:	70 83       	st	Z, r23

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
     *  portSAVE_CONTEXT places the flags on the stack immediately after r0
     *  to ensure the interrupts get disabled as soon as possible, and so ensuring
     *  the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R0 */
    19f6:	31 97       	sbiw	r30, 0x01	; 1
    19f8:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    19fa:	31 97       	sbiw	r30, 0x01	; 1
    19fc:	60 e8       	ldi	r22, 0x80	; 128
    19fe:	60 83       	st	Z, r22
    pxTopOfStack--;


    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R1 */
    1a00:	31 97       	sbiw	r30, 0x01	; 1
    1a02:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02; /* R2 */
    1a04:	31 97       	sbiw	r30, 0x01	; 1
    1a06:	62 e0       	ldi	r22, 0x02	; 2
    1a08:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03; /* R3 */
    1a0a:	31 97       	sbiw	r30, 0x01	; 1
    1a0c:	63 e0       	ldi	r22, 0x03	; 3
    1a0e:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04; /* R4 */
    1a10:	31 97       	sbiw	r30, 0x01	; 1
    1a12:	64 e0       	ldi	r22, 0x04	; 4
    1a14:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05; /* R5 */
    1a16:	31 97       	sbiw	r30, 0x01	; 1
    1a18:	65 e0       	ldi	r22, 0x05	; 5
    1a1a:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06; /* R6 */
    1a1c:	31 97       	sbiw	r30, 0x01	; 1
    1a1e:	66 e0       	ldi	r22, 0x06	; 6
    1a20:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07; /* R7 */
    1a22:	31 97       	sbiw	r30, 0x01	; 1
    1a24:	67 e0       	ldi	r22, 0x07	; 7
    1a26:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08; /* R8 */
    1a28:	31 97       	sbiw	r30, 0x01	; 1
    1a2a:	68 e0       	ldi	r22, 0x08	; 8
    1a2c:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09; /* R9 */
    1a2e:	31 97       	sbiw	r30, 0x01	; 1
    1a30:	69 e0       	ldi	r22, 0x09	; 9
    1a32:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10; /* R10 */
    1a34:	31 97       	sbiw	r30, 0x01	; 1
    1a36:	60 e1       	ldi	r22, 0x10	; 16
    1a38:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11; /* R11 */
    1a3a:	31 97       	sbiw	r30, 0x01	; 1
    1a3c:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12; /* R12 */
    1a3e:	31 97       	sbiw	r30, 0x01	; 1
    1a40:	32 e1       	ldi	r19, 0x12	; 18
    1a42:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13; /* R13 */
    1a44:	31 97       	sbiw	r30, 0x01	; 1
    1a46:	33 e1       	ldi	r19, 0x13	; 19
    1a48:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14; /* R14 */
    1a4a:	31 97       	sbiw	r30, 0x01	; 1
    1a4c:	34 e1       	ldi	r19, 0x14	; 20
    1a4e:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15; /* R15 */
    1a50:	31 97       	sbiw	r30, 0x01	; 1
    1a52:	35 e1       	ldi	r19, 0x15	; 21
    1a54:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16; /* R16 */
    1a56:	31 97       	sbiw	r30, 0x01	; 1
    1a58:	36 e1       	ldi	r19, 0x16	; 22
    1a5a:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17; /* R17 */
    1a5c:	31 97       	sbiw	r30, 0x01	; 1
    1a5e:	37 e1       	ldi	r19, 0x17	; 23
    1a60:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18; /* R18 */
    1a62:	31 97       	sbiw	r30, 0x01	; 1
    1a64:	38 e1       	ldi	r19, 0x18	; 24
    1a66:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19; /* R19 */
    1a68:	31 97       	sbiw	r30, 0x01	; 1
    1a6a:	39 e1       	ldi	r19, 0x19	; 25
    1a6c:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20; /* R20 */
    1a6e:	31 97       	sbiw	r30, 0x01	; 1
    1a70:	30 e2       	ldi	r19, 0x20	; 32
    1a72:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21; /* R21 */
    1a74:	31 97       	sbiw	r30, 0x01	; 1
    1a76:	31 e2       	ldi	r19, 0x21	; 33
    1a78:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22; /* R22 */
    1a7a:	31 97       	sbiw	r30, 0x01	; 1
    1a7c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23; /* R23 */
    1a7e:	31 97       	sbiw	r30, 0x01	; 1
    1a80:	23 e2       	ldi	r18, 0x23	; 35
    1a82:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1a84:	31 97       	sbiw	r30, 0x01	; 1
    1a86:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1a88:	31 97       	sbiw	r30, 0x01	; 1
    1a8a:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;  /* R26 X */
    1a8c:	31 97       	sbiw	r30, 0x01	; 1
    1a8e:	26 e2       	ldi	r18, 0x26	; 38
    1a90:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;  /* R27 */
    1a92:	31 97       	sbiw	r30, 0x01	; 1
    1a94:	27 e2       	ldi	r18, 0x27	; 39
    1a96:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;  /* R28 Y */
    1a98:	31 97       	sbiw	r30, 0x01	; 1
    1a9a:	28 e2       	ldi	r18, 0x28	; 40
    1a9c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;  /* R29 */
    1a9e:	31 97       	sbiw	r30, 0x01	; 1
    1aa0:	29 e2       	ldi	r18, 0x29	; 41
    1aa2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;  /* R30 Z */
    1aa4:	31 97       	sbiw	r30, 0x01	; 1
    1aa6:	20 e3       	ldi	r18, 0x30	; 48
    1aa8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x031; /* R31 */
    1aaa:	31 97       	sbiw	r30, 0x01	; 1
    1aac:	21 e3       	ldi	r18, 0x31	; 49
    1aae:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    1ab0:	86 97       	sbiw	r24, 0x26	; 38
    1ab2:	08 95       	ret

00001ab4 <xPortStartScheduler>:
    /* Setup compare match value for compare match A.  Interrupts are disabled
     * before this is called so we need not worry here. */
    ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    ulCompareMatch >>= 8;
    ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    OCR1AH = ucHighByte;
    1ab4:	1b bc       	out	0x2b, r1	; 43
    OCR1AL = ucLowByte;
    1ab6:	8c e7       	ldi	r24, 0x7C	; 124
    1ab8:	8a bd       	out	0x2a, r24	; 42

    /* Setup clock source and compare match behaviour. */
    ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    TCCR1B = ucLowByte;
    1aba:	8b e0       	ldi	r24, 0x0B	; 11
    1abc:	8e bd       	out	0x2e, r24	; 46

    /* Enable the interrupt - this is okay as interrupt are currently globally
     * disabled. */
    ucLowByte = TIMSK;
    1abe:	89 b7       	in	r24, 0x39	; 57
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1ac0:	80 61       	ori	r24, 0x10	; 16
    TIMSK = ucLowByte;
    1ac2:	89 bf       	out	0x39, r24	; 57
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    1ac4:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1ac8:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1acc:	cd 91       	ld	r28, X+
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	dd 91       	ld	r29, X+
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	ff 91       	pop	r31
    1ad6:	ef 91       	pop	r30
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	bf 91       	pop	r27
    1ade:	af 91       	pop	r26
    1ae0:	9f 91       	pop	r25
    1ae2:	8f 91       	pop	r24
    1ae4:	7f 91       	pop	r23
    1ae6:	6f 91       	pop	r22
    1ae8:	5f 91       	pop	r21
    1aea:	4f 91       	pop	r20
    1aec:	3f 91       	pop	r19
    1aee:	2f 91       	pop	r18
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	8f 90       	pop	r8
    1b04:	7f 90       	pop	r7
    1b06:	6f 90       	pop	r6
    1b08:	5f 90       	pop	r5
    1b0a:	4f 90       	pop	r4
    1b0c:	3f 90       	pop	r3
    1b0e:	2f 90       	pop	r2
    1b10:	1f 90       	pop	r1
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
     * jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    1b18:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	08 95       	ret

00001b1e <vPortEndScheduler>:

void vPortEndScheduler( void )
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
     * disable the tick interrupt here. */
}
    1b1e:	08 95       	ret

00001b20 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1b20:	0f 92       	push	r0
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	0f 92       	push	r0
    1b28:	1f 92       	push	r1
    1b2a:	11 24       	eor	r1, r1
    1b2c:	2f 92       	push	r2
    1b2e:	3f 92       	push	r3
    1b30:	4f 92       	push	r4
    1b32:	5f 92       	push	r5
    1b34:	6f 92       	push	r6
    1b36:	7f 92       	push	r7
    1b38:	8f 92       	push	r8
    1b3a:	9f 92       	push	r9
    1b3c:	af 92       	push	r10
    1b3e:	bf 92       	push	r11
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	2f 93       	push	r18
    1b4e:	3f 93       	push	r19
    1b50:	4f 93       	push	r20
    1b52:	5f 93       	push	r21
    1b54:	6f 93       	push	r22
    1b56:	7f 93       	push	r23
    1b58:	8f 93       	push	r24
    1b5a:	9f 93       	push	r25
    1b5c:	af 93       	push	r26
    1b5e:	bf 93       	push	r27
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ef 93       	push	r30
    1b66:	ff 93       	push	r31
    1b68:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1b6c:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1b70:	0d b6       	in	r0, 0x3d	; 61
    1b72:	0d 92       	st	X+, r0
    1b74:	0e b6       	in	r0, 0x3e	; 62
    1b76:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1b78:	0e 94 57 1c 	call	0x38ae	; 0x38ae <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1b7c:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1b80:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1b84:	cd 91       	ld	r28, X+
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	dd 91       	ld	r29, X+
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	ff 91       	pop	r31
    1b8e:	ef 91       	pop	r30
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	bf 91       	pop	r27
    1b96:	af 91       	pop	r26
    1b98:	9f 91       	pop	r25
    1b9a:	8f 91       	pop	r24
    1b9c:	7f 91       	pop	r23
    1b9e:	6f 91       	pop	r22
    1ba0:	5f 91       	pop	r21
    1ba2:	4f 91       	pop	r20
    1ba4:	3f 91       	pop	r19
    1ba6:	2f 91       	pop	r18
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	9f 90       	pop	r9
    1bba:	8f 90       	pop	r8
    1bbc:	7f 90       	pop	r7
    1bbe:	6f 90       	pop	r6
    1bc0:	5f 90       	pop	r5
    1bc2:	4f 90       	pop	r4
    1bc4:	3f 90       	pop	r3
    1bc6:	2f 90       	pop	r2
    1bc8:	1f 90       	pop	r1
    1bca:	0f 90       	pop	r0
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1bd0:	08 95       	ret

00001bd2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__( ( naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1bd2:	0f 92       	push	r0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	0f 92       	push	r0
    1bda:	1f 92       	push	r1
    1bdc:	11 24       	eor	r1, r1
    1bde:	2f 92       	push	r2
    1be0:	3f 92       	push	r3
    1be2:	4f 92       	push	r4
    1be4:	5f 92       	push	r5
    1be6:	6f 92       	push	r6
    1be8:	7f 92       	push	r7
    1bea:	8f 92       	push	r8
    1bec:	9f 92       	push	r9
    1bee:	af 92       	push	r10
    1bf0:	bf 92       	push	r11
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	2f 93       	push	r18
    1c00:	3f 93       	push	r19
    1c02:	4f 93       	push	r20
    1c04:	5f 93       	push	r21
    1c06:	6f 93       	push	r22
    1c08:	7f 93       	push	r23
    1c0a:	8f 93       	push	r24
    1c0c:	9f 93       	push	r25
    1c0e:	af 93       	push	r26
    1c10:	bf 93       	push	r27
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	ef 93       	push	r30
    1c18:	ff 93       	push	r31
    1c1a:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1c1e:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1c22:	0d b6       	in	r0, 0x3d	; 61
    1c24:	0d 92       	st	X+, r0
    1c26:	0e b6       	in	r0, 0x3e	; 62
    1c28:	0d 92       	st	X+, r0

    if( xTaskIncrementTick() != pdFALSE )
    1c2a:	0e 94 30 1a 	call	0x3460	; 0x3460 <xTaskIncrementTick>
    1c2e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1c30:	0e 94 57 1c 	call	0x38ae	; 0x38ae <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1c34:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1c38:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1c3c:	cd 91       	ld	r28, X+
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	dd 91       	ld	r29, X+
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	ff 91       	pop	r31
    1c46:	ef 91       	pop	r30
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	bf 91       	pop	r27
    1c4e:	af 91       	pop	r26
    1c50:	9f 91       	pop	r25
    1c52:	8f 91       	pop	r24
    1c54:	7f 91       	pop	r23
    1c56:	6f 91       	pop	r22
    1c58:	5f 91       	pop	r21
    1c5a:	4f 91       	pop	r20
    1c5c:	3f 91       	pop	r19
    1c5e:	2f 91       	pop	r18
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	9f 90       	pop	r9
    1c72:	8f 90       	pop	r8
    1c74:	7f 90       	pop	r7
    1c76:	6f 90       	pop	r6
    1c78:	5f 90       	pop	r5
    1c7a:	4f 90       	pop	r4
    1c7c:	3f 90       	pop	r3
    1c7e:	2f 90       	pop	r2
    1c80:	1f 90       	pop	r1
    1c82:	0f 90       	pop	r0
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1c88:	08 95       	ret

00001c8a <__vector_7>:
 * count is incremented after the context is saved.
 */
    void TIMER1_COMPA_vect( void ) __attribute__( ( signal, naked ) );
    void TIMER1_COMPA_vect( void )
    {
        vPortYieldFromTick();
    1c8a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <vPortYieldFromTick>
        asm volatile ( "reti" );
    1c8e:	18 95       	reti

00001c90 <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1c96:	fc 01       	movw	r30, r24
    1c98:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    1c9a:	0f 90       	pop	r0
    1c9c:	0f be       	out	0x3f, r0	; 63
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	91 11       	cpse	r25, r1
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    taskEXIT_CRITICAL();

    return xReturn;
}
    1ca4:	08 95       	ret

00001ca6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	ec 01       	movw	r28, r24
    1cb0:	04 2f       	mov	r16, r20
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1cb2:	1a 8d       	ldd	r17, Y+26	; 0x1a

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1cb4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1cb6:	44 23       	and	r20, r20
    1cb8:	c1 f0       	breq	.+48     	; 0x1cea <prvCopyDataToQueue+0x44>
    1cba:	50 e0       	ldi	r21, 0x00	; 0
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
    1cbc:	01 11       	cpse	r16, r1
    1cbe:	1d c0       	rjmp	.+58     	; 0x1cfa <prvCopyDataToQueue+0x54>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	0e 94 b6 28 	call	0x516c	; 0x516c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1cc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cca:	2a 81       	ldd	r18, Y+2	; 0x02
    1ccc:	3b 81       	ldd	r19, Y+3	; 0x03
    1cce:	82 0f       	add	r24, r18
    1cd0:	93 2f       	mov	r25, r19
    1cd2:	91 1d       	adc	r25, r1
    1cd4:	9b 83       	std	Y+3, r25	; 0x03
    1cd6:	8a 83       	std	Y+2, r24	; 0x02

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
    1cd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cda:	3d 81       	ldd	r19, Y+5	; 0x05
    1cdc:	82 17       	cp	r24, r18
    1cde:	93 07       	cpc	r25, r19
    1ce0:	20 f0       	brcs	.+8      	; 0x1cea <prvCopyDataToQueue+0x44>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
    1ce2:	88 81       	ld	r24, Y
    1ce4:	99 81       	ldd	r25, Y+1	; 0x01
    1ce6:	9b 83       	std	Y+3, r25	; 0x03
    1ce8:	8a 83       	std	Y+2, r24	; 0x02
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    1cea:	1f 5f       	subi	r17, 0xFF	; 255
    1cec:	1a 8f       	std	Y+26, r17	; 0x1a

    return xReturn;
}
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfe:	0e 94 b6 28 	call	0x516c	; 0x516c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    1d02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	91 95       	neg	r25
    1d08:	81 95       	neg	r24
    1d0a:	91 09       	sbc	r25, r1
    1d0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d10:	28 0f       	add	r18, r24
    1d12:	39 1f       	adc	r19, r25
    1d14:	3f 83       	std	Y+7, r19	; 0x07
    1d16:	2e 83       	std	Y+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
    1d18:	48 81       	ld	r20, Y
    1d1a:	59 81       	ldd	r21, Y+1	; 0x01
    1d1c:	24 17       	cp	r18, r20
    1d1e:	35 07       	cpc	r19, r21
    1d20:	30 f4       	brcc	.+12     	; 0x1d2e <prvCopyDataToQueue+0x88>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    1d22:	2c 81       	ldd	r18, Y+4	; 0x04
    1d24:	3d 81       	ldd	r19, Y+5	; 0x05
    1d26:	82 0f       	add	r24, r18
    1d28:	93 1f       	adc	r25, r19
    1d2a:	9f 83       	std	Y+7, r25	; 0x07
    1d2c:	8e 83       	std	Y+6, r24	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
    1d2e:	02 30       	cpi	r16, 0x02	; 2
    1d30:	e1 f6       	brne	.-72     	; 0x1cea <prvCopyDataToQueue+0x44>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1d32:	11 23       	and	r17, r17
    1d34:	d1 f2       	breq	.-76     	; 0x1cea <prvCopyDataToQueue+0x44>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
    1d36:	11 50       	subi	r17, 0x01	; 1
    1d38:	d8 cf       	rjmp	.-80     	; 0x1cea <prvCopyDataToQueue+0x44>

00001d3a <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	cb 01       	movw	r24, r22
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1d3e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d40:	44 23       	and	r20, r20
    1d42:	a1 f0       	breq	.+40     	; 0x1d6c <prvCopyDataFromQueue+0x32>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	26 81       	ldd	r18, Z+6	; 0x06
    1d48:	37 81       	ldd	r19, Z+7	; 0x07
    1d4a:	24 0f       	add	r18, r20
    1d4c:	35 1f       	adc	r19, r21
    1d4e:	37 83       	std	Z+7, r19	; 0x07
    1d50:	26 83       	std	Z+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    1d52:	64 81       	ldd	r22, Z+4	; 0x04
    1d54:	75 81       	ldd	r23, Z+5	; 0x05
    1d56:	26 17       	cp	r18, r22
    1d58:	37 07       	cpc	r19, r23
    1d5a:	20 f0       	brcs	.+8      	; 0x1d64 <prvCopyDataFromQueue+0x2a>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    1d5c:	20 81       	ld	r18, Z
    1d5e:	31 81       	ldd	r19, Z+1	; 0x01
    1d60:	37 83       	std	Z+7, r19	; 0x07
    1d62:	26 83       	std	Z+6, r18	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
    1d64:	66 81       	ldd	r22, Z+6	; 0x06
    1d66:	77 81       	ldd	r23, Z+7	; 0x07
    1d68:	0c 94 b6 28 	jmp	0x516c	; 0x516c <memcpy>
    }
}
    1d6c:	08 95       	ret

00001d6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	ec 01       	movw	r28, r24

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	0f 92       	push	r0
    {
        int8_t cTxLock = pxQueue->cTxLock;
    1d80:	1e 8d       	ldd	r17, Y+30	; 0x1e
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d82:	7c 01       	movw	r14, r24
    1d84:	81 e1       	ldi	r24, 0x11	; 17
    1d86:	e8 0e       	add	r14, r24
    1d88:	f1 1c       	adc	r15, r1
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
    1d8a:	11 16       	cp	r1, r17
    1d8c:	c4 f0       	brlt	.+48     	; 0x1dbe <prvUnlockQueue+0x50>
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
        }

        pxQueue->cTxLock = queueUNLOCKED;
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	8e 8f       	std	Y+30, r24	; 0x1e
    }
    taskEXIT_CRITICAL();
    1d92:	0f 90       	pop	r0
    1d94:	0f be       	out	0x3f, r0	; 63

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	0f 92       	push	r0
    {
        int8_t cRxLock = pxQueue->cRxLock;
    1d9c:	1d 8d       	ldd	r17, Y+29	; 0x1d

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1d9e:	7e 01       	movw	r14, r28
    1da0:	88 e0       	ldi	r24, 0x08	; 8
    1da2:	e8 0e       	add	r14, r24
    1da4:	f1 1c       	adc	r15, r1
    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
    1da6:	11 16       	cp	r1, r17
    1da8:	ac f0       	brlt	.+42     	; 0x1dd4 <prvUnlockQueue+0x66>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
    1daa:	8f ef       	ldi	r24, 0xFF	; 255
    1dac:	8d 8f       	std	Y+29, r24	; 0x1d
    }
    taskEXIT_CRITICAL();
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
}
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	08 95       	ret
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1dbe:	89 89       	ldd	r24, Y+17	; 0x11
    1dc0:	88 23       	and	r24, r24
    1dc2:	29 f3       	breq	.-54     	; 0x1d8e <prvUnlockQueue+0x20>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1dc4:	c7 01       	movw	r24, r14
    1dc6:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    1dca:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
    1dcc:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <vTaskMissedYield>
    1dd0:	11 50       	subi	r17, 0x01	; 1
    1dd2:	db cf       	rjmp	.-74     	; 0x1d8a <prvUnlockQueue+0x1c>
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1dd4:	88 85       	ldd	r24, Y+8	; 0x08
    1dd6:	88 23       	and	r24, r24
    1dd8:	41 f3       	breq	.-48     	; 0x1daa <prvUnlockQueue+0x3c>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1dda:	c7 01       	movw	r24, r14
    1ddc:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    1de0:	81 11       	cpse	r24, r1
                {
                    vTaskMissedYield();
    1de2:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <vTaskMissedYield>
    1de6:	11 50       	subi	r17, 0x01	; 1
    1de8:	de cf       	rjmp	.-68     	; 0x1da6 <prvUnlockQueue+0x38>

00001dea <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <xQueueGenericReset+0xa>
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <xQueueGenericReset+0x88>
        ( pxQueue->uxLength >= 1U ) &&
    1df4:	fc 01       	movw	r30, r24
    1df6:	23 8d       	ldd	r18, Z+27	; 0x1b

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    1df8:	22 23       	and	r18, r18
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <xQueueGenericReset+0x14>
    1dfc:	3a c0       	rjmp	.+116    	; 0x1e72 <xQueueGenericReset+0x88>
    1dfe:	ec 01       	movw	r28, r24
        ( pxQueue->uxLength >= 1U ) &&
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    1e00:	44 8d       	ldd	r20, Z+28	; 0x1c
    {
        taskENTER_CRITICAL();
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	0f 92       	push	r0
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	24 9f       	mul	r18, r20
    1e10:	e0 0d       	add	r30, r0
    1e12:	f1 1d       	adc	r31, r1
    1e14:	11 24       	eor	r1, r1
    1e16:	fd 83       	std	Y+5, r31	; 0x05
    1e18:	ec 83       	std	Y+4, r30	; 0x04
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1e1a:	1a 8e       	std	Y+26, r1	; 0x1a
            pxQueue->pcWriteTo = pxQueue->pcHead;
    1e1c:	9b 83       	std	Y+3, r25	; 0x03
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
    1e20:	21 50       	subi	r18, 0x01	; 1
    1e22:	33 0b       	sbc	r19, r19
    1e24:	42 9f       	mul	r20, r18
    1e26:	f0 01       	movw	r30, r0
    1e28:	43 9f       	mul	r20, r19
    1e2a:	f0 0d       	add	r31, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	8e 0f       	add	r24, r30
    1e30:	9f 1f       	adc	r25, r31
    1e32:	9f 83       	std	Y+7, r25	; 0x07
    1e34:	8e 83       	std	Y+6, r24	; 0x06
            pxQueue->cRxLock = queueUNLOCKED;
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	8d 8f       	std	Y+29, r24	; 0x1d
            pxQueue->cTxLock = queueUNLOCKED;
    1e3a:	8e 8f       	std	Y+30, r24	; 0x1e

            if( xNewQueue == pdFALSE )
    1e3c:	61 11       	cpse	r22, r1
    1e3e:	10 c0       	rjmp	.+32     	; 0x1e60 <xQueueGenericReset+0x76>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1e40:	88 85       	ldd	r24, Y+8	; 0x08
    1e42:	88 23       	and	r24, r24
    1e44:	39 f0       	breq	.+14     	; 0x1e54 <xQueueGenericReset+0x6a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1e46:	ce 01       	movw	r24, r28
    1e48:	08 96       	adiw	r24, 0x08	; 8
    1e4a:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    1e4e:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1e50:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
            }
        }
        taskEXIT_CRITICAL();
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    BaseType_t xReturn = pdPASS;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1e60:	ce 01       	movw	r24, r28
    1e62:	08 96       	adiw	r24, 0x08	; 8
    1e64:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1e68:	ce 01       	movw	r24, r28
    1e6a:	41 96       	adiw	r24, 0x11	; 17
    1e6c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
    1e70:	f1 cf       	rjmp	.-30     	; 0x1e54 <xQueueGenericReset+0x6a>
        }
        taskEXIT_CRITICAL();
    }
    else
    {
        xReturn = pdFAIL;
    1e72:	80 e0       	ldi	r24, 0x00	; 0

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
    1e74:	f2 cf       	rjmp	.-28     	; 0x1e5a <xQueueGenericReset+0x70>

00001e76 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    1e7e:	81 11       	cpse	r24, r1
    1e80:	08 c0       	rjmp	.+16     	; 0x1e92 <xQueueGenericCreate+0x1c>

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
        Queue_t * pxNewQueue = NULL;
    1e82:	d0 e0       	ldi	r29, 0x00	; 0
    1e84:	c0 e0       	ldi	r28, 0x00	; 0
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    }
    1e86:	ce 01       	movw	r24, r28
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	08 95       	ret

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
    1e92:	86 9f       	mul	r24, r22
    1e94:	90 01       	movw	r18, r0
    1e96:	11 24       	eor	r1, r1

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    1e98:	21 3e       	cpi	r18, 0xE1	; 225
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	94 f7       	brge	.-28     	; 0x1e82 <xQueueGenericCreate+0xc>
    1e9e:	16 2f       	mov	r17, r22
    1ea0:	08 2f       	mov	r16, r24
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1ea2:	c9 01       	movw	r24, r18
    1ea4:	4f 96       	adiw	r24, 0x1f	; 31
    1ea6:	0e 94 17 0c 	call	0x182e	; 0x182e <pvPortMalloc>
    1eaa:	ec 01       	movw	r28, r24

            if( pxNewQueue != NULL )
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	49 f3       	breq	.-46     	; 0x1e82 <xQueueGenericCreate+0xc>
{
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
    1eb0:	11 11       	cpse	r17, r1
    1eb2:	09 c0       	rjmp	.+18     	; 0x1ec6 <xQueueGenericCreate+0x50>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1eb4:	99 83       	std	Y+1, r25	; 0x01
    1eb6:	88 83       	st	Y, r24
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
    1eb8:	0b 8f       	std	Y+27, r16	; 0x1b
    pxNewQueue->uxItemSize = uxItemSize;
    1eba:	1c 8f       	std	Y+28, r17	; 0x1c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xQueueGenericReset>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    1ec4:	e0 cf       	rjmp	.-64     	; 0x1e86 <xQueueGenericCreate+0x10>
            if( pxNewQueue != NULL )
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
                pucQueueStorage += sizeof( Queue_t );
    1ec6:	4f 96       	adiw	r24, 0x1f	; 31
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1ec8:	99 83       	std	Y+1, r25	; 0x01
    1eca:	88 83       	st	Y, r24
    1ecc:	f5 cf       	rjmp	.-22     	; 0x1eb8 <xQueueGenericCreate+0x42>

00001ece <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
    1ece:	af 92       	push	r10
    1ed0:	bf 92       	push	r11
    1ed2:	cf 92       	push	r12
    1ed4:	df 92       	push	r13
    1ed6:	ff 92       	push	r15
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <xQueueGenericSend+0x14>
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <xQueueGenericSend+0x16>
    1ee4:	1f 92       	push	r1
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	8c 01       	movw	r16, r24
    1eec:	6b 01       	movw	r12, r22
    1eee:	5d 83       	std	Y+5, r21	; 0x05
    1ef0:	4c 83       	std	Y+4, r20	; 0x04
    1ef2:	f2 2e       	mov	r15, r18
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1ef6:	58 01       	movw	r10, r16
    1ef8:	98 e0       	ldi	r25, 0x08	; 8
    1efa:	a9 0e       	add	r10, r25
    1efc:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	0f 92       	push	r0
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f04:	f8 01       	movw	r30, r16
    1f06:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f08:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f0a:	29 17       	cp	r18, r25
    1f0c:	18 f0       	brcs	.+6      	; 0x1f14 <xQueueGenericSend+0x46>
    1f0e:	f2 e0       	ldi	r31, 0x02	; 2
    1f10:	ff 12       	cpse	r15, r31
    1f12:	22 c0       	rjmp	.+68     	; 0x1f58 <xQueueGenericSend+0x8a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1f14:	4f 2d       	mov	r20, r15
    1f16:	b6 01       	movw	r22, r12
    1f18:	c8 01       	movw	r24, r16
    1f1a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <prvCopyDataToQueue>

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f1e:	f8 01       	movw	r30, r16
    1f20:	91 89       	ldd	r25, Z+17	; 0x11
    1f22:	99 23       	and	r25, r25
    1f24:	21 f0       	breq	.+8      	; 0x1f2e <xQueueGenericSend+0x60>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1f26:	c8 01       	movw	r24, r16
    1f28:	41 96       	adiw	r24, 0x11	; 17
    1f2a:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    1f2e:	81 11       	cpse	r24, r1
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
    1f30:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
        }
    }
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	ff 90       	pop	r15
    1f4e:	df 90       	pop	r13
    1f50:	cf 90       	pop	r12
    1f52:	bf 90       	pop	r11
    1f54:	af 90       	pop	r10
    1f56:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1f58:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5c:	23 2b       	or	r18, r19
    1f5e:	21 f4       	brne	.+8      	; 0x1f68 <xQueueGenericSend+0x9a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
            ( void ) xTaskResumeAll();

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	e9 cf       	rjmp	.-46     	; 0x1f3a <xQueueGenericSend+0x6c>
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
                }
                else if( xEntryTimeSet == pdFALSE )
    1f68:	81 11       	cpse	r24, r1
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <xQueueGenericSend+0xa6>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1f74:	0f 90       	pop	r0
    1f76:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1f78:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	0f 92       	push	r0
    1f82:	f8 01       	movw	r30, r16
    1f84:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f86:	8f 3f       	cpi	r24, 0xFF	; 255
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <xQueueGenericSend+0xbe>
    1f8a:	15 8e       	std	Z+29, r1	; 0x1d
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f90:	8f 3f       	cpi	r24, 0xFF	; 255
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <xQueueGenericSend+0xc8>
    1f94:	16 8e       	std	Z+30, r1	; 0x1e
    1f96:	0f 90       	pop	r0
    1f98:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1f9a:	be 01       	movw	r22, r28
    1f9c:	6c 5f       	subi	r22, 0xFC	; 252
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	0e 94 77 1e 	call	0x3cee	; 0x3cee <xTaskCheckForTimeOut>
    1fa8:	81 11       	cpse	r24, r1
    1faa:	20 c0       	rjmp	.+64     	; 0x1fec <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    1fb6:	0f 90       	pop	r0
    1fb8:	0f be       	out	0x3f, r0	; 63
        prvLockQueue( pxQueue );

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1fba:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fbc:	98 13       	cpse	r25, r24
    1fbe:	10 c0       	rjmp	.+32     	; 0x1fe0 <xQueueGenericSend+0x112>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1fc0:	6c 81       	ldd	r22, Y+4	; 0x04
    1fc2:	7d 81       	ldd	r23, Y+5	; 0x05
    1fc4:	c5 01       	movw	r24, r10
    1fc6:	0e 94 9d 1c 	call	0x393a	; 0x393a <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    1fca:	c8 01       	movw	r24, r16
    1fcc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    1fd0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <xQueueGenericSend+0x10e>
                {
                    taskYIELD_WITHIN_API();
    1fd8:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8f cf       	rjmp	.-226    	; 0x1efe <xQueueGenericSend+0x30>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1fe6:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    1fea:	f8 cf       	rjmp	.-16     	; 0x1fdc <xQueueGenericSend+0x10e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    1fec:	c8 01       	movw	r24, r16
    1fee:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    1ff2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    1ff6:	b6 cf       	rjmp	.-148    	; 0x1f64 <xQueueGenericSend+0x96>

00001ff8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
    1ff8:	ef 92       	push	r14
    1ffa:	ff 92       	push	r15
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2004:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2008:	98 17       	cp	r25, r24
    200a:	18 f0       	brcs	.+6      	; 0x2012 <xQueueGenericSendFromISR+0x1a>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    200c:	80 e0       	ldi	r24, 0x00	; 0
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    200e:	22 30       	cpi	r18, 0x02	; 2
    2010:	d1 f4       	brne	.+52     	; 0x2046 <xQueueGenericSendFromISR+0x4e>
    2012:	7a 01       	movw	r14, r20
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    2014:	1e 8d       	ldd	r17, Y+30	; 0x1e
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    2016:	8a 8d       	ldd	r24, Y+26	; 0x1a
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2018:	42 2f       	mov	r20, r18
    201a:	ce 01       	movw	r24, r28
    201c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    2020:	1f 3f       	cpi	r17, 0xFF	; 255
    2022:	b9 f4       	brne	.+46     	; 0x2052 <xQueueGenericSendFromISR+0x5a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2024:	89 89       	ldd	r24, Y+17	; 0x11
    2026:	81 11       	cpse	r24, r1
    2028:	02 c0       	rjmp	.+4      	; 0x202e <xQueueGenericSendFromISR+0x36>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	0c c0       	rjmp	.+24     	; 0x2046 <xQueueGenericSendFromISR+0x4e>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    202e:	ce 01       	movw	r24, r28
    2030:	41 96       	adiw	r24, 0x11	; 17
    2032:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    2036:	88 23       	and	r24, r24
    2038:	c1 f3       	breq	.-16     	; 0x202a <xQueueGenericSendFromISR+0x32>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    203a:	e1 14       	cp	r14, r1
    203c:	f1 04       	cpc	r15, r1
    203e:	a9 f3       	breq	.-22     	; 0x202a <xQueueGenericSendFromISR+0x32>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	f7 01       	movw	r30, r14
    2044:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
}
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    2052:	0e 94 25 1a 	call	0x344a	; 0x344a <uxTaskGetNumberOfTasks>
    2056:	18 17       	cp	r17, r24
    2058:	40 f7       	brcc	.-48     	; 0x202a <xQueueGenericSendFromISR+0x32>
    205a:	1f 5f       	subi	r17, 0xFF	; 255
    205c:	1e 8f       	std	Y+30, r17	; 0x1e
    205e:	e5 cf       	rjmp	.-54     	; 0x202a <xQueueGenericSendFromISR+0x32>

00002060 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
    2060:	ef 92       	push	r14
    2062:	ff 92       	push	r15
    2064:	1f 93       	push	r17
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    206c:	8a 8d       	ldd	r24, Y+26	; 0x1a

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
    206e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2070:	89 17       	cp	r24, r25
    2072:	20 f5       	brcc	.+72     	; 0x20bc <xQueueGiveFromISR+0x5c>
    2074:	7b 01       	movw	r14, r22
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    2076:	1e 8d       	ldd	r17, Y+30	; 0x1e
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	8a 8f       	std	Y+26, r24	; 0x1a

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    207c:	1f 3f       	cpi	r17, 0xFF	; 255
    207e:	b9 f4       	brne	.+46     	; 0x20ae <xQueueGiveFromISR+0x4e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2080:	89 89       	ldd	r24, Y+17	; 0x11
    2082:	81 11       	cpse	r24, r1
    2084:	02 c0       	rjmp	.+4      	; 0x208a <xQueueGiveFromISR+0x2a>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	0c c0       	rjmp	.+24     	; 0x20a2 <xQueueGiveFromISR+0x42>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    208a:	ce 01       	movw	r24, r28
    208c:	41 96       	adiw	r24, 0x11	; 17
    208e:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    2092:	88 23       	and	r24, r24
    2094:	c1 f3       	breq	.-16     	; 0x2086 <xQueueGiveFromISR+0x26>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    2096:	e1 14       	cp	r14, r1
    2098:	f1 04       	cpc	r15, r1
    209a:	a9 f3       	breq	.-22     	; 0x2086 <xQueueGiveFromISR+0x26>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	f7 01       	movw	r30, r14
    20a0:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
}
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    20ae:	0e 94 25 1a 	call	0x344a	; 0x344a <uxTaskGetNumberOfTasks>
    20b2:	18 17       	cp	r17, r24
    20b4:	40 f7       	brcc	.-48     	; 0x2086 <xQueueGiveFromISR+0x26>
    20b6:	1f 5f       	subi	r17, 0xFF	; 255
    20b8:	1e 8f       	std	Y+30, r17	; 0x1e
    20ba:	e5 cf       	rjmp	.-54     	; 0x2086 <xQueueGiveFromISR+0x26>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
    20be:	f1 cf       	rjmp	.-30     	; 0x20a2 <xQueueGiveFromISR+0x42>

000020c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
    20c0:	af 92       	push	r10
    20c2:	bf 92       	push	r11
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <xQueueReceive+0x14>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <xQueueReceive+0x16>
    20d6:	1f 92       	push	r1
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	8c 01       	movw	r16, r24
    20de:	6b 01       	movw	r12, r22
    20e0:	5d 83       	std	Y+5, r21	; 0x05
    20e2:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    20e4:	80 e0       	ldi	r24, 0x00	; 0
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    20e6:	58 01       	movw	r10, r16
    20e8:	91 e1       	ldi	r25, 0x11	; 17
    20ea:	a9 0e       	add	r10, r25
    20ec:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    20f4:	f8 01       	movw	r30, r16
    20f6:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    20f8:	ff 20       	and	r15, r15
    20fa:	19 f1       	breq	.+70     	; 0x2142 <xQueueReceive+0x82>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
    20fc:	b6 01       	movw	r22, r12
    20fe:	c8 01       	movw	r24, r16
    2100:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    2104:	fa 94       	dec	r15
    2106:	f8 01       	movw	r30, r16
    2108:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    210a:	80 85       	ldd	r24, Z+8	; 0x08
    210c:	88 23       	and	r24, r24
    210e:	39 f0       	breq	.+14     	; 0x211e <xQueueReceive+0x5e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2110:	c8 01       	movw	r24, r16
    2112:	08 96       	adiw	r24, 0x08	; 8
    2114:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    2118:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    211a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    211e:	0f 90       	pop	r0
    2120:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
    2122:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	ff 90       	pop	r15
    2138:	df 90       	pop	r13
    213a:	cf 90       	pop	r12
    213c:	bf 90       	pop	r11
    213e:	af 90       	pop	r10
    2140:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	23 2b       	or	r18, r19
    2148:	21 f4       	brne	.+8      	; 0x2152 <xQueueReceive+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    214a:	0f 90       	pop	r0
    214c:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	e9 cf       	rjmp	.-46     	; 0x2124 <xQueueReceive+0x64>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    2152:	81 11       	cpse	r24, r1
    2154:	04 c0       	rjmp	.+8      	; 0x215e <xQueueReceive+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    2156:	ce 01       	movw	r24, r28
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    215e:	0f 90       	pop	r0
    2160:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    2162:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	0f 92       	push	r0
    216c:	f8 01       	movw	r30, r16
    216e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2170:	8f 3f       	cpi	r24, 0xFF	; 255
    2172:	09 f4       	brne	.+2      	; 0x2176 <xQueueReceive+0xb6>
    2174:	15 8e       	std	Z+29, r1	; 0x1d
    2176:	f8 01       	movw	r30, r16
    2178:	86 8d       	ldd	r24, Z+30	; 0x1e
    217a:	8f 3f       	cpi	r24, 0xFF	; 255
    217c:	09 f4       	brne	.+2      	; 0x2180 <xQueueReceive+0xc0>
    217e:	16 8e       	std	Z+30, r1	; 0x1e
    2180:	0f 90       	pop	r0
    2182:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2184:	be 01       	movw	r22, r28
    2186:	6c 5f       	subi	r22, 0xFC	; 252
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	ce 01       	movw	r24, r28
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	0e 94 77 1e 	call	0x3cee	; 0x3cee <xTaskCheckForTimeOut>
    2192:	81 11       	cpse	r24, r1
    2194:	1b c0       	rjmp	.+54     	; 0x21cc <xQueueReceive+0x10c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2196:	c8 01       	movw	r24, r16
    2198:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <prvIsQueueEmpty>
    219c:	88 23       	and	r24, r24
    219e:	81 f0       	breq	.+32     	; 0x21c0 <xQueueReceive+0x100>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    21a0:	6c 81       	ldd	r22, Y+4	; 0x04
    21a2:	7d 81       	ldd	r23, Y+5	; 0x05
    21a4:	c5 01       	movw	r24, r10
    21a6:	0e 94 9d 1c 	call	0x393a	; 0x393a <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    21aa:	c8 01       	movw	r24, r16
    21ac:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    21b0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    21b4:	81 11       	cpse	r24, r1
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <xQueueReceive+0xfc>
                {
                    taskYIELD_WITHIN_API();
    21b8:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	97 cf       	rjmp	.-210    	; 0x20ee <xQueueReceive+0x2e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
    21c0:	c8 01       	movw	r24, r16
    21c2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    21c6:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    21ca:	f8 cf       	rjmp	.-16     	; 0x21bc <xQueueReceive+0xfc>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
    21cc:	c8 01       	movw	r24, r16
    21ce:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    21d2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    21d6:	c8 01       	movw	r24, r16
    21d8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <prvIsQueueEmpty>
    21dc:	88 23       	and	r24, r24
    21de:	71 f3       	breq	.-36     	; 0x21bc <xQueueReceive+0xfc>
    21e0:	b6 cf       	rjmp	.-148    	; 0x214e <xQueueReceive+0x8e>

000021e2 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    21e2:	ef 92       	push	r14
    21e4:	ff 92       	push	r15
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <xQueueSemaphoreTake+0xe>
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <xQueueSemaphoreTake+0x10>
    21f2:	1f 92       	push	r1
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	8c 01       	movw	r16, r24
    21fa:	7d 83       	std	Y+5, r23	; 0x05
    21fc:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    21fe:	90 e0       	ldi	r25, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2200:	78 01       	movw	r14, r16
    2202:	81 e1       	ldi	r24, 0x11	; 17
    2204:	e8 0e       	add	r14, r24
    2206:	f1 1c       	adc	r15, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    220e:	f8 01       	movw	r30, r16
    2210:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    2212:	88 23       	and	r24, r24
    2214:	d9 f0       	breq	.+54     	; 0x224c <xQueueSemaphoreTake+0x6a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
    2216:	81 50       	subi	r24, 0x01	; 1
    2218:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    221a:	80 85       	ldd	r24, Z+8	; 0x08
    221c:	88 23       	and	r24, r24
    221e:	39 f0       	breq	.+14     	; 0x222e <xQueueSemaphoreTake+0x4c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2220:	c8 01       	movw	r24, r16
    2222:	08 96       	adiw	r24, 0x08	; 8
    2224:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    2228:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    222a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    222e:	0f 90       	pop	r0
    2230:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
    2232:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    224c:	2c 81       	ldd	r18, Y+4	; 0x04
    224e:	3d 81       	ldd	r19, Y+5	; 0x05
    2250:	23 2b       	or	r18, r19
    2252:	21 f4       	brne	.+8      	; 0x225c <xQueueSemaphoreTake+0x7a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    2254:	0f 90       	pop	r0
    2256:	0f be       	out	0x3f, r0	; 63
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	ec cf       	rjmp	.-40     	; 0x2234 <xQueueSemaphoreTake+0x52>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    225c:	91 11       	cpse	r25, r1
    225e:	04 c0       	rjmp	.+8      	; 0x2268 <xQueueSemaphoreTake+0x86>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    2260:	ce 01       	movw	r24, r28
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    2268:	0f 90       	pop	r0
    226a:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    226c:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	0f 92       	push	r0
    2276:	f8 01       	movw	r30, r16
    2278:	85 8d       	ldd	r24, Z+29	; 0x1d
    227a:	8f 3f       	cpi	r24, 0xFF	; 255
    227c:	09 f4       	brne	.+2      	; 0x2280 <xQueueSemaphoreTake+0x9e>
    227e:	15 8e       	std	Z+29, r1	; 0x1d
    2280:	f8 01       	movw	r30, r16
    2282:	86 8d       	ldd	r24, Z+30	; 0x1e
    2284:	8f 3f       	cpi	r24, 0xFF	; 255
    2286:	09 f4       	brne	.+2      	; 0x228a <xQueueSemaphoreTake+0xa8>
    2288:	16 8e       	std	Z+30, r1	; 0x1e
    228a:	0f 90       	pop	r0
    228c:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    228e:	be 01       	movw	r22, r28
    2290:	6c 5f       	subi	r22, 0xFC	; 252
    2292:	7f 4f       	sbci	r23, 0xFF	; 255
    2294:	ce 01       	movw	r24, r28
    2296:	01 96       	adiw	r24, 0x01	; 1
    2298:	0e 94 77 1e 	call	0x3cee	; 0x3cee <xTaskCheckForTimeOut>
    229c:	81 11       	cpse	r24, r1
    229e:	1b c0       	rjmp	.+54     	; 0x22d6 <xQueueSemaphoreTake+0xf4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    22a0:	c8 01       	movw	r24, r16
    22a2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <prvIsQueueEmpty>
    22a6:	88 23       	and	r24, r24
    22a8:	81 f0       	breq	.+32     	; 0x22ca <xQueueSemaphoreTake+0xe8>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    22aa:	6c 81       	ldd	r22, Y+4	; 0x04
    22ac:	7d 81       	ldd	r23, Y+5	; 0x05
    22ae:	c7 01       	movw	r24, r14
    22b0:	0e 94 9d 1c 	call	0x393a	; 0x393a <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    22b4:	c8 01       	movw	r24, r16
    22b6:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    22ba:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    22be:	81 11       	cpse	r24, r1
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <xQueueSemaphoreTake+0xe4>
                {
                    taskYIELD_WITHIN_API();
    22c2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
    22c6:	91 e0       	ldi	r25, 0x01	; 1
    22c8:	9f cf       	rjmp	.-194    	; 0x2208 <xQueueSemaphoreTake+0x26>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    22ca:	c8 01       	movw	r24, r16
    22cc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    22d0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    22d4:	f8 cf       	rjmp	.-16     	; 0x22c6 <xQueueSemaphoreTake+0xe4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    22d6:	c8 01       	movw	r24, r16
    22d8:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    22dc:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    22e0:	c8 01       	movw	r24, r16
    22e2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <prvIsQueueEmpty>
    22e6:	88 23       	and	r24, r24
    22e8:	71 f3       	breq	.-36     	; 0x22c6 <xQueueSemaphoreTake+0xe4>
    22ea:	b6 cf       	rjmp	.-148    	; 0x2258 <xQueueSemaphoreTake+0x76>

000022ec <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <xQueuePeek+0x12>
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <xQueuePeek+0x14>
    2300:	1f 92       	push	r1
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	8c 01       	movw	r16, r24
    2308:	7b 01       	movw	r14, r22
    230a:	5d 83       	std	Y+5, r21	; 0x05
    230c:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    230e:	80 e0       	ldi	r24, 0x00	; 0
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2310:	68 01       	movw	r12, r16
    2312:	91 e1       	ldi	r25, 0x11	; 17
    2314:	c9 0e       	add	r12, r25
    2316:	d1 1c       	adc	r13, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    231e:	f8 01       	movw	r30, r16
    2320:	92 8d       	ldd	r25, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2322:	99 23       	and	r25, r25
    2324:	21 f1       	breq	.+72     	; 0x236e <xQueuePeek+0x82>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    2326:	c6 80       	ldd	r12, Z+6	; 0x06
    2328:	d7 80       	ldd	r13, Z+7	; 0x07

                prvCopyDataFromQueue( pxQueue, pvBuffer );
    232a:	b7 01       	movw	r22, r14
    232c:	c8 01       	movw	r24, r16
    232e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    2332:	f8 01       	movw	r30, r16
    2334:	d7 82       	std	Z+7, r13	; 0x07
    2336:	c6 82       	std	Z+6, r12	; 0x06

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2338:	81 89       	ldd	r24, Z+17	; 0x11
    233a:	88 23       	and	r24, r24
    233c:	39 f0       	breq	.+14     	; 0x234c <xQueuePeek+0x60>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    233e:	c8 01       	movw	r24, r16
    2340:	41 96       	adiw	r24, 0x11	; 17
    2342:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    2346:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
    2348:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    234c:	0f 90       	pop	r0
    234e:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
    2350:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	ff 90       	pop	r15
    2366:	ef 90       	pop	r14
    2368:	df 90       	pop	r13
    236a:	cf 90       	pop	r12
    236c:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    236e:	2c 81       	ldd	r18, Y+4	; 0x04
    2370:	3d 81       	ldd	r19, Y+5	; 0x05
    2372:	23 2b       	or	r18, r19
    2374:	21 f4       	brne	.+8      	; 0x237e <xQueuePeek+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	ea cf       	rjmp	.-44     	; 0x2352 <xQueuePeek+0x66>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    237e:	81 11       	cpse	r24, r1
    2380:	04 c0       	rjmp	.+8      	; 0x238a <xQueuePeek+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    2382:	ce 01       	movw	r24, r28
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    238a:	0f 90       	pop	r0
    238c:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
    238e:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	0f 92       	push	r0
    2398:	f8 01       	movw	r30, r16
    239a:	85 8d       	ldd	r24, Z+29	; 0x1d
    239c:	8f 3f       	cpi	r24, 0xFF	; 255
    239e:	09 f4       	brne	.+2      	; 0x23a2 <xQueuePeek+0xb6>
    23a0:	15 8e       	std	Z+29, r1	; 0x1d
    23a2:	f8 01       	movw	r30, r16
    23a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    23a6:	8f 3f       	cpi	r24, 0xFF	; 255
    23a8:	09 f4       	brne	.+2      	; 0x23ac <xQueuePeek+0xc0>
    23aa:	16 8e       	std	Z+30, r1	; 0x1e
    23ac:	0f 90       	pop	r0
    23ae:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    23b0:	be 01       	movw	r22, r28
    23b2:	6c 5f       	subi	r22, 0xFC	; 252
    23b4:	7f 4f       	sbci	r23, 0xFF	; 255
    23b6:	ce 01       	movw	r24, r28
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	0e 94 77 1e 	call	0x3cee	; 0x3cee <xTaskCheckForTimeOut>
    23be:	81 11       	cpse	r24, r1
    23c0:	1b c0       	rjmp	.+54     	; 0x23f8 <xQueuePeek+0x10c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    23c2:	c8 01       	movw	r24, r16
    23c4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <prvIsQueueEmpty>
    23c8:	88 23       	and	r24, r24
    23ca:	81 f0       	breq	.+32     	; 0x23ec <xQueuePeek+0x100>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    23cc:	6c 81       	ldd	r22, Y+4	; 0x04
    23ce:	7d 81       	ldd	r23, Y+5	; 0x05
    23d0:	c6 01       	movw	r24, r12
    23d2:	0e 94 9d 1c 	call	0x393a	; 0x393a <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    23d6:	c8 01       	movw	r24, r16
    23d8:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    23dc:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    23e0:	81 11       	cpse	r24, r1
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <xQueuePeek+0xfc>
                {
                    taskYIELD_WITHIN_API();
    23e4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	96 cf       	rjmp	.-212    	; 0x2318 <xQueuePeek+0x2c>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
    23ec:	c8 01       	movw	r24, r16
    23ee:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    23f2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    23f6:	f8 cf       	rjmp	.-16     	; 0x23e8 <xQueuePeek+0xfc>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
    23f8:	c8 01       	movw	r24, r16
    23fa:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    23fe:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2402:	c8 01       	movw	r24, r16
    2404:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <prvIsQueueEmpty>
    2408:	88 23       	and	r24, r24
    240a:	71 f3       	breq	.-36     	; 0x23e8 <xQueuePeek+0xfc>
    240c:	b6 cf       	rjmp	.-148    	; 0x237a <xQueuePeek+0x8e>

0000240e <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    240e:	ef 92       	push	r14
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    241a:	fc 01       	movw	r30, r24
    241c:	02 8d       	ldd	r16, Z+26	; 0x1a

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    241e:	00 23       	and	r16, r16
    2420:	41 f1       	breq	.+80     	; 0x2472 <xQueueReceiveFromISR+0x64>
    2422:	7a 01       	movw	r14, r20
    2424:	ec 01       	movw	r28, r24
        {
            const int8_t cRxLock = pxQueue->cRxLock;
    2426:	15 8d       	ldd	r17, Z+29	; 0x1d

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
    2428:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    242c:	01 50       	subi	r16, 0x01	; 1
    242e:	0a 8f       	std	Y+26, r16	; 0x1a

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
    2430:	1f 3f       	cpi	r17, 0xFF	; 255
    2432:	c1 f4       	brne	.+48     	; 0x2464 <xQueueReceiveFromISR+0x56>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2434:	88 85       	ldd	r24, Y+8	; 0x08
    2436:	81 11       	cpse	r24, r1
    2438:	02 c0       	rjmp	.+4      	; 0x243e <xQueueReceiveFromISR+0x30>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
            }

            xReturn = pdPASS;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	0c c0       	rjmp	.+24     	; 0x2456 <xQueueReceiveFromISR+0x48>
             * locked. */
            if( cRxLock == queueUNLOCKED )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    243e:	ce 01       	movw	r24, r28
    2440:	08 96       	adiw	r24, 0x08	; 8
    2442:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <xTaskRemoveFromEventList>
    2446:	88 23       	and	r24, r24
    2448:	c1 f3       	breq	.-16     	; 0x243a <xQueueReceiveFromISR+0x2c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
    244a:	e1 14       	cp	r14, r1
    244c:	f1 04       	cpc	r15, r1
    244e:	a9 f3       	breq	.-22     	; 0x243a <xQueueReceiveFromISR+0x2c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	f7 01       	movw	r30, r14
    2454:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
}
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	ff 90       	pop	r15
    2460:	ef 90       	pop	r14
    2462:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
    2464:	0e 94 25 1a 	call	0x344a	; 0x344a <uxTaskGetNumberOfTasks>
    2468:	18 17       	cp	r17, r24
    246a:	38 f7       	brcc	.-50     	; 0x243a <xQueueReceiveFromISR+0x2c>
    246c:	1f 5f       	subi	r17, 0xFF	; 255
    246e:	1d 8f       	std	Y+29, r17	; 0x1d
    2470:	e4 cf       	rjmp	.-56     	; 0x243a <xQueueReceiveFromISR+0x2c>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    2472:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
    2474:	f0 cf       	rjmp	.-32     	; 0x2456 <xQueueReceiveFromISR+0x48>

00002476 <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    247e:	fc 01       	movw	r30, r24
    2480:	22 8d       	ldd	r18, Z+26	; 0x1a
    2482:	22 23       	and	r18, r18
    2484:	69 f0       	breq	.+26     	; 0x24a0 <xQueuePeekFromISR+0x2a>
    2486:	ec 01       	movw	r28, r24
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    2488:	06 81       	ldd	r16, Z+6	; 0x06
    248a:	17 81       	ldd	r17, Z+7	; 0x07
            prvCopyDataFromQueue( pxQueue, pvBuffer );
    248c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    2490:	1f 83       	std	Y+7, r17	; 0x07
    2492:	0e 83       	std	Y+6, r16	; 0x06

            xReturn = pdPASS;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
}
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	08 95       	ret

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
    24a2:	f9 cf       	rjmp	.-14     	; 0x2496 <xQueuePeekFromISR+0x20>

000024a4 <uxQueueMessagesWaiting>:

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );

    taskENTER_CRITICAL();
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	0f 92       	push	r0
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    24aa:	fc 01       	movw	r30, r24
    24ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    24ae:	0f 90       	pop	r0
    24b0:	0f be       	out	0x3f, r0	; 63

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
}
    24b2:	08 95       	ret

000024b4 <uxQueueSpacesAvailable>:

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	0f 92       	push	r0
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    24ba:	fc 01       	movw	r30, r24
    24bc:	22 8d       	ldd	r18, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    24c2:	83 8d       	ldd	r24, Z+27	; 0x1b
    taskEXIT_CRITICAL();

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
}
    24c4:	82 1b       	sub	r24, r18
    24c6:	08 95       	ret

000024c8 <uxQueueMessagesWaitingFromISR>:
    Queue_t * const pxQueue = xQueue;

    traceENTER_uxQueueMessagesWaitingFromISR( xQueue );

    configASSERT( pxQueue );
    uxReturn = pxQueue->uxMessagesWaiting;
    24c8:	fc 01       	movw	r30, r24
    24ca:	82 8d       	ldd	r24, Z+26	; 0x1a

    traceRETURN_uxQueueMessagesWaitingFromISR( uxReturn );

    return uxReturn;
}
    24cc:	08 95       	ret

000024ce <vQueueDelete>:

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
    24ce:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <vPortFree>

000024d2 <uxQueueGetQueueItemSize>:
    traceENTER_uxQueueGetQueueItemSize( xQueue );

    traceRETURN_uxQueueGetQueueItemSize( ( ( Queue_t * ) xQueue )->uxItemSize );

    return ( ( Queue_t * ) xQueue )->uxItemSize;
}
    24d2:	fc 01       	movw	r30, r24
    24d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    24d6:	08 95       	ret

000024d8 <uxQueueGetQueueLength>:
    traceENTER_uxQueueGetQueueLength( xQueue );

    traceRETURN_uxQueueGetQueueLength( ( ( Queue_t * ) xQueue )->uxLength );

    return ( ( Queue_t * ) xQueue )->uxLength;
}
    24d8:	fc 01       	movw	r30, r24
    24da:	83 8d       	ldd	r24, Z+27	; 0x1b
    24dc:	08 95       	ret

000024de <xQueueIsQueueEmptyFromISR>:

    traceENTER_xQueueIsQueueEmptyFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    24de:	fc 01       	movw	r30, r24
    24e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	91 11       	cpse	r25, r1
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueEmptyFromISR( xReturn );

    return xReturn;
}
    24e8:	08 95       	ret

000024ea <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    24ea:	fc 01       	movw	r30, r24

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    24ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	23 8d       	ldd	r18, Z+27	; 0x1b
    24f2:	29 13       	cpse	r18, r25
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
}
    24f6:	08 95       	ret

000024f8 <xQueueCRSend>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSend( QueueHandle_t xQueue,
                             const void * pvItemToQueue,
                             TickType_t xTicksToWait )
    {
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	ec 01       	movw	r28, r24
        traceENTER_xQueueCRSend( xQueue, pvItemToQueue, xTicksToWait );

        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    24fe:	f8 94       	cli

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2506:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2508:	9b 8d       	ldd	r25, Y+27	; 0x1b
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    250a:	0f 90       	pop	r0
    250c:	0f be       	out	0x3f, r0	; 63
        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    250e:	89 13       	cpse	r24, r25
    2510:	11 c0       	rjmp	.+34     	; 0x2534 <xQueueCRSend+0x3c>
            {
                /* The queue is full - do we want to block or just leave without
                 * posting? */
                if( xTicksToWait > ( TickType_t ) 0 )
    2512:	41 15       	cp	r20, r1
    2514:	51 05       	cpc	r21, r1
    2516:	59 f0       	breq	.+22     	; 0x252e <xQueueCRSend+0x36>
                {
                    /* As this is called from a coroutine we cannot block directly, but
                     * return indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    2518:	be 01       	movw	r22, r28
    251a:	68 5f       	subi	r22, 0xF8	; 248
    251c:	7f 4f       	sbci	r23, 0xFF	; 255
    251e:	ca 01       	movw	r24, r20
    2520:	0e 94 21 09 	call	0x1242	; 0x1242 <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    2524:	78 94       	sei
                    return errQUEUE_BLOCKED;
    2526:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    }
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    252e:	78 94       	sei
                    return errQUEUE_FULL;
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	fa cf       	rjmp	.-12     	; 0x2528 <xQueueCRSend+0x30>
                }
            }
        }
        portENABLE_INTERRUPTS();
    2534:	78 94       	sei

        portDISABLE_INTERRUPTS();
    2536:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2538:	8a 8d       	ldd	r24, Y+26	; 0x1a
    253a:	89 17       	cp	r24, r25
    253c:	90 f4       	brcc	.+36     	; 0x2562 <xQueueCRSend+0x6a>
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	ce 01       	movw	r24, r28
    2542:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <prvCopyDataToQueue>
                xReturn = pdPASS;

                /* Were any co-routines waiting for data to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	81 11       	cpse	r24, r1
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <xQueueCRSend+0x5a>
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
                xReturn = pdPASS;
    254c:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = errQUEUE_FULL;
            }
        }
        portENABLE_INTERRUPTS();
    254e:	78 94       	sei

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    2550:	eb cf       	rjmp	.-42     	; 0x2528 <xQueueCRSend+0x30>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2552:	ce 01       	movw	r24, r28
    2554:	41 96       	adiw	r24, 0x11	; 17
    2556:	0e 94 67 0a 	call	0x14ce	; 0x14ce <xCoRoutineRemoveFromEventList>
    255a:	88 23       	and	r24, r24
    255c:	b9 f3       	breq	.-18     	; 0x254c <xQueueCRSend+0x54>
                    {
                        /* The co-routine waiting has a higher priority so record
                         * that a yield might be appropriate. */
                        xReturn = errQUEUE_YIELD;
    255e:	8b ef       	ldi	r24, 0xFB	; 251
    2560:	f6 cf       	rjmp	.-20     	; 0x254e <xQueueCRSend+0x56>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = errQUEUE_FULL;
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	f4 cf       	rjmp	.-24     	; 0x254e <xQueueCRSend+0x56>

00002566 <xQueueCRReceive>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
                                void * pvBuffer,
                                TickType_t xTicksToWait )
    {
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	ec 01       	movw	r28, r24
    256c:	fb 01       	movw	r30, r22
        traceENTER_xQueueCRReceive( xQueue, pvBuffer, xTicksToWait );

        /* If the queue is already empty we may have to block.  A critical section
         * is required to prevent an interrupt adding something to the queue
         * between the check to see if the queue is empty and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    256e:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2570:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2572:	81 11       	cpse	r24, r1
    2574:	11 c0       	rjmp	.+34     	; 0x2598 <xQueueCRReceive+0x32>
            {
                /* There are no messages in the queue, do we want to block or just
                 * leave with nothing? */
                if( xTicksToWait > ( TickType_t ) 0 )
    2576:	41 15       	cp	r20, r1
    2578:	51 05       	cpc	r21, r1
    257a:	59 f0       	breq	.+22     	; 0x2592 <xQueueCRReceive+0x2c>
                {
                    /* As this is a co-routine we cannot block directly, but return
                     * indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    257c:	be 01       	movw	r22, r28
    257e:	6f 5e       	subi	r22, 0xEF	; 239
    2580:	7f 4f       	sbci	r23, 0xFF	; 255
    2582:	ca 01       	movw	r24, r20
    2584:	0e 94 21 09 	call	0x1242	; 0x1242 <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    2588:	78 94       	sei
                    return errQUEUE_BLOCKED;
    258a:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    }
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    2592:	78 94       	sei
                    return errQUEUE_FULL;
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	fa cf       	rjmp	.-12     	; 0x258c <xQueueCRReceive+0x26>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portENABLE_INTERRUPTS();
    2598:	78 94       	sei

        portDISABLE_INTERRUPTS();
    259a:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    259c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    259e:	88 23       	and	r24, r24
    25a0:	39 f1       	breq	.+78     	; 0x25f0 <xQueueCRReceive+0x8a>
            {
                /* Data is available from the queue. */
                pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    25a2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	2e 81       	ldd	r18, Y+6	; 0x06
    25a8:	3f 81       	ldd	r19, Y+7	; 0x07
    25aa:	24 0f       	add	r18, r20
    25ac:	35 1f       	adc	r19, r21
    25ae:	3f 83       	std	Y+7, r19	; 0x07
    25b0:	2e 83       	std	Y+6, r18	; 0x06

                if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	9d 81       	ldd	r25, Y+5	; 0x05
    25b6:	28 17       	cp	r18, r24
    25b8:	39 07       	cpc	r19, r25
    25ba:	20 f0       	brcs	.+8      	; 0x25c4 <xQueueCRReceive+0x5e>
                {
                    pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    25bc:	88 81       	ld	r24, Y
    25be:	99 81       	ldd	r25, Y+1	; 0x01
    25c0:	9f 83       	std	Y+7, r25	; 0x07
    25c2:	8e 83       	std	Y+6, r24	; 0x06
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --( pxQueue->uxMessagesWaiting );
    25c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25c6:	91 50       	subi	r25, 0x01	; 1
    25c8:	9a 8f       	std	Y+26, r25	; 0x1a
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    25ca:	6e 81       	ldd	r22, Y+6	; 0x06
    25cc:	7f 81       	ldd	r23, Y+7	; 0x07
    25ce:	cf 01       	movw	r24, r30
    25d0:	0e 94 b6 28 	call	0x516c	; 0x516c <memcpy>

                xReturn = pdPASS;

                /* Were any co-routines waiting for space to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    25d4:	88 85       	ldd	r24, Y+8	; 0x08
    25d6:	81 11       	cpse	r24, r1
    25d8:	03 c0       	rjmp	.+6      	; 0x25e0 <xQueueCRReceive+0x7a>
                }

                --( pxQueue->uxMessagesWaiting );
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

                xReturn = pdPASS;
    25da:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        portENABLE_INTERRUPTS();
    25dc:	78 94       	sei

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    25de:	d6 cf       	rjmp	.-84     	; 0x258c <xQueueCRReceive+0x26>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    25e0:	ce 01       	movw	r24, r28
    25e2:	08 96       	adiw	r24, 0x08	; 8
    25e4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <xCoRoutineRemoveFromEventList>
    25e8:	88 23       	and	r24, r24
    25ea:	b9 f3       	breq	.-18     	; 0x25da <xQueueCRReceive+0x74>
                    {
                        xReturn = errQUEUE_YIELD;
    25ec:	8b ef       	ldi	r24, 0xFB	; 251
    25ee:	f6 cf       	rjmp	.-20     	; 0x25dc <xQueueCRReceive+0x76>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = pdFAIL;
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	f4 cf       	rjmp	.-24     	; 0x25dc <xQueueCRReceive+0x76>

000025f4 <xQueueCRSendFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
                                    const void * pvItemToQueue,
                                    BaseType_t xCoRoutinePreviouslyWoken )
    {
    25f4:	1f 93       	push	r17
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	ec 01       	movw	r28, r24
    25fc:	14 2f       	mov	r17, r20

        traceENTER_xQueueCRSendFromISR( xQueue, pvItemToQueue, xCoRoutinePreviouslyWoken );

        /* Cannot block within an ISR so if there is no space on the queue then
         * exit without doing anything. */
        if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    25fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2602:	98 17       	cp	r25, r24
    2604:	88 f4       	brcc	.+34     	; 0x2628 <xQueueCRSendFromISR+0x34>
        {
            prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	ce 01       	movw	r24, r28
    260a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <prvCopyDataToQueue>

            /* We only want to wake one co-routine per ISR, so check that a
             * co-routine has not already been woken. */
            if( xCoRoutinePreviouslyWoken == pdFALSE )
    260e:	11 11       	cpse	r17, r1
    2610:	0b c0       	rjmp	.+22     	; 0x2628 <xQueueCRSendFromISR+0x34>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2612:	89 89       	ldd	r24, Y+17	; 0x11
    2614:	88 23       	and	r24, r24
    2616:	41 f0       	breq	.+16     	; 0x2628 <xQueueCRSendFromISR+0x34>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2618:	ce 01       	movw	r24, r28
    261a:	41 96       	adiw	r24, 0x11	; 17
    261c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <xCoRoutineRemoveFromEventList>
    2620:	11 e0       	ldi	r17, 0x01	; 1
    2622:	81 11       	cpse	r24, r1
    2624:	01 c0       	rjmp	.+2      	; 0x2628 <xQueueCRSendFromISR+0x34>
    2626:	10 e0       	ldi	r17, 0x00	; 0
        }

        traceRETURN_xQueueCRSendFromISR( xCoRoutinePreviouslyWoken );

        return xCoRoutinePreviouslyWoken;
    }
    2628:	81 2f       	mov	r24, r17
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	08 95       	ret

00002632 <xQueueCRReceiveFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
                                       void * pvBuffer,
                                       BaseType_t * pxCoRoutineWoken )
    {
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	ec 01       	movw	r28, r24

        traceENTER_xQueueCRReceiveFromISR( xQueue, pvBuffer, pxCoRoutineWoken );

        /* We cannot block from an ISR, so check there is data available. If
         * not then just leave without doing anything. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    263c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    263e:	88 23       	and	r24, r24
    2640:	91 f1       	breq	.+100    	; 0x26a6 <xQueueCRReceiveFromISR+0x74>
        {
            /* Copy the data from the queue. */
            pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    2642:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	ae 81       	ldd	r26, Y+6	; 0x06
    2648:	bf 81       	ldd	r27, Y+7	; 0x07
    264a:	a2 0f       	add	r26, r18
    264c:	b3 1f       	adc	r27, r19
    264e:	bf 83       	std	Y+7, r27	; 0x07
    2650:	ae 83       	std	Y+6, r26	; 0x06

            if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
    2654:	9d 81       	ldd	r25, Y+5	; 0x05
    2656:	a8 17       	cp	r26, r24
    2658:	b9 07       	cpc	r27, r25
    265a:	20 f0       	brcs	.+8      	; 0x2664 <xQueueCRReceiveFromISR+0x32>
            {
                pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    265c:	88 81       	ld	r24, Y
    265e:	99 81       	ldd	r25, Y+1	; 0x01
    2660:	9f 83       	std	Y+7, r25	; 0x07
    2662:	8e 83       	std	Y+6, r24	; 0x06
    2664:	8a 01       	movw	r16, r20
    2666:	cb 01       	movw	r24, r22
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            --( pxQueue->uxMessagesWaiting );
    2668:	4a 8d       	ldd	r20, Y+26	; 0x1a
    266a:	41 50       	subi	r20, 0x01	; 1
    266c:	4a 8f       	std	Y+26, r20	; 0x1a
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    266e:	6e 81       	ldd	r22, Y+6	; 0x06
    2670:	7f 81       	ldd	r23, Y+7	; 0x07
    2672:	a9 01       	movw	r20, r18
    2674:	0e 94 b6 28 	call	0x516c	; 0x516c <memcpy>

            if( ( *pxCoRoutineWoken ) == pdFALSE )
    2678:	f8 01       	movw	r30, r16
    267a:	80 81       	ld	r24, Z
    267c:	88 23       	and	r24, r24
    267e:	31 f0       	breq	.+12     	; 0x268c <xQueueCRReceiveFromISR+0x5a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
    2680:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    }
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	08 95       	ret
            --( pxQueue->uxMessagesWaiting );
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

            if( ( *pxCoRoutineWoken ) == pdFALSE )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    268c:	88 85       	ldd	r24, Y+8	; 0x08
    268e:	88 23       	and	r24, r24
    2690:	b9 f3       	breq	.-18     	; 0x2680 <xQueueCRReceiveFromISR+0x4e>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2692:	ce 01       	movw	r24, r28
    2694:	08 96       	adiw	r24, 0x08	; 8
    2696:	0e 94 67 0a 	call	0x14ce	; 0x14ce <xCoRoutineRemoveFromEventList>
    269a:	88 23       	and	r24, r24
    269c:	89 f3       	breq	.-30     	; 0x2680 <xQueueCRReceiveFromISR+0x4e>
                    {
                        *pxCoRoutineWoken = pdTRUE;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	f8 01       	movw	r30, r16
    26a2:	80 83       	st	Z, r24
    26a4:	ee cf       	rjmp	.-36     	; 0x2682 <xQueueCRReceiveFromISR+0x50>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    26a6:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    26a8:	ec cf       	rjmp	.-40     	; 0x2682 <xQueueCRReceiveFromISR+0x50>

000026aa <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	0f 92       	push	r0
    26b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26b8:	8f 3f       	cpi	r24, 0xFF	; 255
    26ba:	09 f4       	brne	.+2      	; 0x26be <vQueueWaitForMessageRestricted+0x14>
    26bc:	1d 8e       	std	Y+29, r1	; 0x1d
    26be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26c0:	8f 3f       	cpi	r24, 0xFF	; 255
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <vQueueWaitForMessageRestricted+0x1c>
    26c4:	1e 8e       	std	Y+30, r1	; 0x1e
    26c6:	0f 90       	pop	r0
    26c8:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    26ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26cc:	81 11       	cpse	r24, r1
    26ce:	04 c0       	rjmp	.+8      	; 0x26d8 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    26d0:	ce 01       	movw	r24, r28
    26d2:	41 96       	adiw	r24, 0x11	; 17
    26d4:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    26d8:	ce 01       	movw	r24, r28

        traceRETURN_vQueueWaitForMessageRestricted();
    }
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    26de:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <prvUnlockQueue>

000026e2 <prvBytesInBuffer>:
    return xTail;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    26e2:	fc 01       	movw	r30, r24
    /* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    26e4:	44 81       	ldd	r20, Z+4	; 0x04
    26e6:	55 81       	ldd	r21, Z+5	; 0x05
    26e8:	22 81       	ldd	r18, Z+2	; 0x02
    26ea:	33 81       	ldd	r19, Z+3	; 0x03
    26ec:	24 0f       	add	r18, r20
    26ee:	35 1f       	adc	r19, r21
    xCount -= pxStreamBuffer->xTail;
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	b9 01       	movw	r22, r18
    26f6:	68 1b       	sub	r22, r24
    26f8:	79 0b       	sbc	r23, r25
    26fa:	cb 01       	movw	r24, r22

    if( xCount >= pxStreamBuffer->xLength )
    26fc:	64 17       	cp	r22, r20
    26fe:	75 07       	cpc	r23, r21
    2700:	10 f0       	brcs	.+4      	; 0x2706 <prvBytesInBuffer+0x24>
    {
        xCount -= pxStreamBuffer->xLength;
    2702:	84 1b       	sub	r24, r20
    2704:	95 0b       	sbc	r25, r21
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
}
    2706:	08 95       	ret

00002708 <prvWriteBytesToBuffer>:

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount,
                                     size_t xHead )
{
    2708:	af 92       	push	r10
    270a:	bf 92       	push	r11
    270c:	cf 92       	push	r12
    270e:	df 92       	push	r13
    2710:	ef 92       	push	r14
    2712:	ff 92       	push	r15
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	6c 01       	movw	r12, r24
    271e:	5b 01       	movw	r10, r22
    2720:	7a 01       	movw	r14, r20
    2722:	e9 01       	movw	r28, r18
    configASSERT( xCount > ( size_t ) 0 );

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
    2724:	fc 01       	movw	r30, r24
    2726:	04 81       	ldd	r16, Z+4	; 0x04
    2728:	15 81       	ldd	r17, Z+5	; 0x05
    272a:	02 1b       	sub	r16, r18
    272c:	13 0b       	sbc	r17, r19
    272e:	40 17       	cp	r20, r16
    2730:	51 07       	cpc	r21, r17
    2732:	08 f4       	brcc	.+2      	; 0x2736 <prvWriteBytesToBuffer+0x2e>
    2734:	8a 01       	movw	r16, r20

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength );
    2736:	f6 01       	movw	r30, r12
    2738:	84 85       	ldd	r24, Z+12	; 0x0c
    273a:	95 85       	ldd	r25, Z+13	; 0x0d
    273c:	a8 01       	movw	r20, r16
    273e:	b5 01       	movw	r22, r10
    2740:	8c 0f       	add	r24, r28
    2742:	9d 1f       	adc	r25, r29
    2744:	0e 94 b6 28 	call	0x516c	; 0x516c <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    2748:	0e 15       	cp	r16, r14
    274a:	1f 05       	cpc	r17, r15
    274c:	58 f4       	brcc	.+22     	; 0x2764 <prvWriteBytesToBuffer+0x5c>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength );
    274e:	a7 01       	movw	r20, r14
    2750:	40 1b       	sub	r20, r16
    2752:	51 0b       	sbc	r21, r17
    2754:	b5 01       	movw	r22, r10
    2756:	60 0f       	add	r22, r16
    2758:	71 1f       	adc	r23, r17
    275a:	f6 01       	movw	r30, r12
    275c:	84 85       	ldd	r24, Z+12	; 0x0c
    275e:	95 85       	ldd	r25, Z+13	; 0x0d
    2760:	0e 94 b6 28 	call	0x516c	; 0x516c <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xHead += xCount;
    2764:	ce 01       	movw	r24, r28
    2766:	8e 0d       	add	r24, r14
    2768:	9f 1d       	adc	r25, r15

    if( xHead >= pxStreamBuffer->xLength )
    276a:	f6 01       	movw	r30, r12
    276c:	24 81       	ldd	r18, Z+4	; 0x04
    276e:	35 81       	ldd	r19, Z+5	; 0x05
    2770:	82 17       	cp	r24, r18
    2772:	93 07       	cpc	r25, r19
    2774:	10 f0       	brcs	.+4      	; 0x277a <prvWriteBytesToBuffer+0x72>
    {
        xHead -= pxStreamBuffer->xLength;
    2776:	82 1b       	sub	r24, r18
    2778:	93 0b       	sbc	r25, r19
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xHead;
}
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	ff 90       	pop	r15
    2784:	ef 90       	pop	r14
    2786:	df 90       	pop	r13
    2788:	cf 90       	pop	r12
    278a:	bf 90       	pop	r11
    278c:	af 90       	pop	r10
    278e:	08 95       	ret

00002790 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
    2790:	af 92       	push	r10
    2792:	bf 92       	push	r11
    2794:	cf 92       	push	r12
    2796:	df 92       	push	r13
    2798:	ef 92       	push	r14
    279a:	ff 92       	push	r15
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <prvWriteMessageToBuffer+0x16>
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	6c 01       	movw	r12, r24
    27ac:	5b 01       	movw	r10, r22
    27ae:	7a 01       	movw	r14, r20
    size_t xNextHead = pxStreamBuffer->xHead;
    27b0:	fc 01       	movw	r30, r24
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    configMESSAGE_BUFFER_LENGTH_TYPE xMessageLength;

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    27b6:	46 85       	ldd	r20, Z+14	; 0x0e
    27b8:	40 ff       	sbrs	r20, 0
    27ba:	28 c0       	rjmp	.+80     	; 0x280c <prvWriteMessageToBuffer+0x7c>
    {
        /* This is a message buffer, as opposed to a stream buffer. */

        /* Convert xDataLengthBytes to the message length type. */
        xMessageLength = ( configMESSAGE_BUFFER_LENGTH_TYPE ) xDataLengthBytes;
    27bc:	fa 82       	std	Y+2, r15	; 0x02
    27be:	e9 82       	std	Y+1, r14	; 0x01

        /* Ensure the data length given fits within configMESSAGE_BUFFER_LENGTH_TYPE. */
        configASSERT( ( size_t ) xMessageLength == xDataLengthBytes );

        if( xSpace >= xRequiredSpace )
    27c0:	20 17       	cp	r18, r16
    27c2:	31 07       	cpc	r19, r17
    27c4:	40 f1       	brcs	.+80     	; 0x2816 <prvWriteMessageToBuffer+0x86>
        {
            /* There is enough space to write both the message length and the message
             * itself into the buffer.  Start by writing the length of the data, the data
             * itself will be written later in this function. */
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
    27c6:	9c 01       	movw	r18, r24
    27c8:	42 e0       	ldi	r20, 0x02	; 2
    27ca:	50 e0       	ldi	r21, 0x00	; 0
    27cc:	be 01       	movw	r22, r28
    27ce:	6f 5f       	subi	r22, 0xFF	; 255
    27d0:	7f 4f       	sbci	r23, 0xFF	; 255
    27d2:	c6 01       	movw	r24, r12
    27d4:	0e 94 84 13 	call	0x2708	; 0x2708 <prvWriteBytesToBuffer>
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    }

    if( xDataLengthBytes != ( size_t ) 0 )
    27d8:	e1 14       	cp	r14, r1
    27da:	f1 04       	cpc	r15, r1
    27dc:	49 f0       	breq	.+18     	; 0x27f0 <prvWriteMessageToBuffer+0x60>
    {
        /* Write the data to the buffer. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead );
    27de:	9c 01       	movw	r18, r24
    27e0:	a7 01       	movw	r20, r14
    27e2:	b5 01       	movw	r22, r10
    27e4:	c6 01       	movw	r24, r12
    27e6:	0e 94 84 13 	call	0x2708	; 0x2708 <prvWriteBytesToBuffer>
    27ea:	f6 01       	movw	r30, r12
    27ec:	93 83       	std	Z+3, r25	; 0x03
    27ee:	82 83       	std	Z+2, r24	; 0x02
    }

    return xDataLengthBytes;
}
    27f0:	c7 01       	movw	r24, r14
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	df 90       	pop	r13
    2804:	cf 90       	pop	r12
    2806:	bf 90       	pop	r11
    2808:	af 90       	pop	r10
    280a:	08 95       	ret
    else
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    280c:	2e 15       	cp	r18, r14
    280e:	3f 05       	cpc	r19, r15
    2810:	18 f7       	brcc	.-58     	; 0x27d8 <prvWriteMessageToBuffer+0x48>
    2812:	79 01       	movw	r14, r18
    2814:	e1 cf       	rjmp	.-62     	; 0x27d8 <prvWriteMessageToBuffer+0x48>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
        }
        else
        {
            /* Not enough space, so do not write data to the buffer. */
            xDataLengthBytes = 0;
    2816:	f1 2c       	mov	r15, r1
    2818:	e1 2c       	mov	r14, r1
    281a:	ea cf       	rjmp	.-44     	; 0x27f0 <prvWriteMessageToBuffer+0x60>

0000281c <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xCount,
                                      size_t xTail )
{
    281c:	af 92       	push	r10
    281e:	bf 92       	push	r11
    2820:	cf 92       	push	r12
    2822:	df 92       	push	r13
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	6c 01       	movw	r12, r24
    2832:	5b 01       	movw	r10, r22
    2834:	7a 01       	movw	r14, r20
    2836:	e9 01       	movw	r28, r18
    configASSERT( xCount != ( size_t ) 0 );

    /* Calculate the number of bytes that can be read - which may be
     * less than the number wanted if the data wraps around to the start of
     * the buffer. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
    2838:	fc 01       	movw	r30, r24
    283a:	04 81       	ldd	r16, Z+4	; 0x04
    283c:	15 81       	ldd	r17, Z+5	; 0x05
    283e:	02 1b       	sub	r16, r18
    2840:	13 0b       	sbc	r17, r19
    2842:	40 17       	cp	r20, r16
    2844:	51 07       	cpc	r21, r17
    2846:	08 f4       	brcc	.+2      	; 0x284a <prvReadBytesFromBuffer+0x2e>
    2848:	8a 01       	movw	r16, r20

    /* Obtain the number of bytes it is possible to obtain in the first
     * read.  Asserts check bounds of read and write. */
    configASSERT( xFirstLength <= xCount );
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength );
    284a:	f6 01       	movw	r30, r12
    284c:	64 85       	ldd	r22, Z+12	; 0x0c
    284e:	75 85       	ldd	r23, Z+13	; 0x0d
    2850:	6c 0f       	add	r22, r28
    2852:	7d 1f       	adc	r23, r29
    2854:	a8 01       	movw	r20, r16
    2856:	c5 01       	movw	r24, r10
    2858:	0e 94 b6 28 	call	0x516c	; 0x516c <memcpy>

    /* If the total number of wanted bytes is greater than the number
     * that could be read in the first read... */
    if( xCount > xFirstLength )
    285c:	0e 15       	cp	r16, r14
    285e:	1f 05       	cpc	r17, r15
    2860:	58 f4       	brcc	.+22     	; 0x2878 <prvReadBytesFromBuffer+0x5c>
    {
        /* ...then read the remaining bytes from the start of the buffer. */
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength );
    2862:	a7 01       	movw	r20, r14
    2864:	40 1b       	sub	r20, r16
    2866:	51 0b       	sbc	r21, r17
    2868:	f6 01       	movw	r30, r12
    286a:	64 85       	ldd	r22, Z+12	; 0x0c
    286c:	75 85       	ldd	r23, Z+13	; 0x0d
    286e:	c5 01       	movw	r24, r10
    2870:	80 0f       	add	r24, r16
    2872:	91 1f       	adc	r25, r17
    2874:	0e 94 b6 28 	call	0x516c	; 0x516c <memcpy>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Move the tail pointer to effectively remove the data read from the buffer. */
    xTail += xCount;
    2878:	ce 01       	movw	r24, r28
    287a:	8e 0d       	add	r24, r14
    287c:	9f 1d       	adc	r25, r15

    if( xTail >= pxStreamBuffer->xLength )
    287e:	f6 01       	movw	r30, r12
    2880:	24 81       	ldd	r18, Z+4	; 0x04
    2882:	35 81       	ldd	r19, Z+5	; 0x05
    2884:	82 17       	cp	r24, r18
    2886:	93 07       	cpc	r25, r19
    2888:	10 f0       	brcs	.+4      	; 0x288e <prvReadBytesFromBuffer+0x72>
    {
        xTail -= pxStreamBuffer->xLength;
    288a:	82 1b       	sub	r24, r18
    288c:	93 0b       	sbc	r25, r19
    }

    return xTail;
}
    288e:	df 91       	pop	r29
    2890:	cf 91       	pop	r28
    2892:	1f 91       	pop	r17
    2894:	0f 91       	pop	r16
    2896:	ff 90       	pop	r15
    2898:	ef 90       	pop	r14
    289a:	df 90       	pop	r13
    289c:	cf 90       	pop	r12
    289e:	bf 90       	pop	r11
    28a0:	af 90       	pop	r10
    28a2:	08 95       	ret

000028a4 <prvReadMessageFromBuffer>:

static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable )
{
    28a4:	af 92       	push	r10
    28a6:	bf 92       	push	r11
    28a8:	cf 92       	push	r12
    28aa:	df 92       	push	r13
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <prvReadMessageFromBuffer+0x16>
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	7c 01       	movw	r14, r24
    28c0:	5b 01       	movw	r10, r22
    28c2:	6a 01       	movw	r12, r20
    28c4:	89 01       	movw	r16, r18
    size_t xCount, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
    size_t xNextTail = pxStreamBuffer->xTail;
    28c6:	fc 01       	movw	r30, r24
    28c8:	20 81       	ld	r18, Z
    28ca:	31 81       	ldd	r19, Z+1	; 0x01

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    28cc:	86 85       	ldd	r24, Z+14	; 0x0e
    28ce:	80 ff       	sbrs	r24, 0
    28d0:	12 c0       	rjmp	.+36     	; 0x28f6 <prvReadMessageFromBuffer+0x52>
    {
        /* A discrete message is being received.  First receive the length
         * of the message. */
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
    28d2:	42 e0       	ldi	r20, 0x02	; 2
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	be 01       	movw	r22, r28
    28d8:	6f 5f       	subi	r22, 0xFF	; 255
    28da:	7f 4f       	sbci	r23, 0xFF	; 255
    28dc:	c7 01       	movw	r24, r14
    28de:	0e 94 0e 14 	call	0x281c	; 0x281c <prvReadBytesFromBuffer>
    28e2:	9c 01       	movw	r18, r24
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
    28e8:	02 50       	subi	r16, 0x02	; 2
    28ea:	11 09       	sbc	r17, r1

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    28ec:	c8 16       	cp	r12, r24
    28ee:	d9 06       	cpc	r13, r25
    28f0:	f8 f4       	brcc	.+62     	; 0x2930 <prvReadMessageFromBuffer+0x8c>
        {
            /* The user has provided insufficient space to read the message. */
            xNextMessageLength = 0;
    28f2:	d1 2c       	mov	r13, r1
    28f4:	c1 2c       	mov	r12, r1
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
    28f6:	c0 16       	cp	r12, r16
    28f8:	d1 06       	cpc	r13, r17
    28fa:	08 f4       	brcc	.+2      	; 0x28fe <prvReadMessageFromBuffer+0x5a>
    28fc:	86 01       	movw	r16, r12

    if( xCount != ( size_t ) 0 )
    28fe:	01 15       	cp	r16, r1
    2900:	11 05       	cpc	r17, r1
    2902:	41 f0       	breq	.+16     	; 0x2914 <prvReadMessageFromBuffer+0x70>
    {
        /* Read the actual data and update the tail to mark the data as officially consumed. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail );
    2904:	a8 01       	movw	r20, r16
    2906:	b5 01       	movw	r22, r10
    2908:	c7 01       	movw	r24, r14
    290a:	0e 94 0e 14 	call	0x281c	; 0x281c <prvReadBytesFromBuffer>
    290e:	f7 01       	movw	r30, r14
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	80 83       	st	Z, r24
    }

    return xCount;
}
    2914:	c8 01       	movw	r24, r16
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	df 90       	pop	r13
    2928:	cf 90       	pop	r12
    292a:	bf 90       	pop	r11
    292c:	af 90       	pop	r10
    292e:	08 95       	ret
    2930:	6c 01       	movw	r12, r24
    2932:	e1 cf       	rjmp	.-62     	; 0x28f6 <prvReadMessageFromBuffer+0x52>

00002934 <xStreamBufferGenericCreate>:
    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xStreamBufferType,
                                                     StreamBufferCallbackFunction_t pxSendCompletedCallback,
                                                     StreamBufferCallbackFunction_t pxReceiveCompletedCallback )
    {
    2934:	ef 92       	push	r14
    2936:	ff 92       	push	r15
    2938:	1f 93       	push	r17
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	ec 01       	movw	r28, r24
    2940:	7b 01       	movw	r14, r22
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    2942:	11 e0       	ldi	r17, 0x01	; 1

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
    2944:	41 30       	cpi	r20, 0x01	; 1
    2946:	21 f0       	breq	.+8      	; 0x2950 <xStreamBufferGenericCreate+0x1c>
            configASSERT( xBufferSizeBytes > 0 );
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
    2948:	10 e0       	ldi	r17, 0x00	; 0
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
        }
        else if( xStreamBufferType == sbTYPE_STREAM_BATCHING_BUFFER )
    294a:	42 30       	cpi	r20, 0x02	; 2
    294c:	09 f4       	brne	.+2      	; 0x2950 <xStreamBufferGenericCreate+0x1c>
        {
            /* Is a batching buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_BATCHING_BUFFER;
    294e:	14 e0       	ldi	r17, 0x04	; 4

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
    2950:	e1 14       	cp	r14, r1
    2952:	f1 04       	cpc	r15, r1
    2954:	19 f4       	brne	.+6      	; 0x295c <xStreamBufferGenericCreate+0x28>
        {
            xTriggerLevelBytes = ( size_t ) 1;
    2956:	ee 24       	eor	r14, r14
    2958:	e3 94       	inc	r14
    295a:	f1 2c       	mov	r15, r1
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
        }
        else
        {
            pvAllocatedMemory = NULL;
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	e0 e0       	ldi	r30, 0x00	; 0
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
    2960:	cf 3e       	cpi	r28, 0xEF	; 239
    2962:	8f ef       	ldi	r24, 0xFF	; 255
    2964:	d8 07       	cpc	r29, r24
    2966:	b8 f4       	brcc	.+46     	; 0x2996 <xStreamBufferGenericCreate+0x62>
        {
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
    2968:	ce 01       	movw	r24, r28
    296a:	41 96       	adiw	r24, 0x11	; 17
    296c:	0e 94 17 0c 	call	0x182e	; 0x182e <pvPortMalloc>
    2970:	fc 01       	movw	r30, r24
        else
        {
            pvAllocatedMemory = NULL;
        }

        if( pvAllocatedMemory != NULL )
    2972:	89 2b       	or	r24, r25
    2974:	81 f0       	breq	.+32     	; 0x2996 <xStreamBufferGenericCreate+0x62>
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    2976:	8c e0       	ldi	r24, 0x0C	; 12
    2978:	df 01       	movw	r26, r30
    297a:	1d 92       	st	X+, r1
    297c:	8a 95       	dec	r24
    297e:	e9 f7       	brne	.-6      	; 0x297a <xStreamBufferGenericCreate+0x46>
        if( pvAllocatedMemory != NULL )
        {
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */
    2980:	cf 01       	movw	r24, r30
    2982:	40 96       	adiw	r24, 0x10	; 16
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    2984:	95 87       	std	Z+13, r25	; 0x0d
    2986:	84 87       	std	Z+12, r24	; 0x0c
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
        {
            xBufferSizeBytes++;
    2988:	21 96       	adiw	r28, 0x01	; 1
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    298a:	d5 83       	std	Z+5, r29	; 0x05
    298c:	c4 83       	std	Z+4, r28	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    298e:	f7 82       	std	Z+7, r15	; 0x07
    2990:	e6 82       	std	Z+6, r14	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    2992:	16 87       	std	Z+14, r17	; 0x0e
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    2994:	17 86       	std	Z+15, r1	; 0x0f

        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        return ( StreamBufferHandle_t ) pvAllocatedMemory;
    }
    2996:	cf 01       	movw	r24, r30
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	08 95       	ret

000029a4 <vStreamBufferDelete>:

    configASSERT( pxStreamBuffer );

    traceSTREAM_BUFFER_DELETE( xStreamBuffer );

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    29a4:	fc 01       	movw	r30, r24
    29a6:	26 85       	ldd	r18, Z+14	; 0x0e
    29a8:	21 ff       	sbrs	r18, 1
    {
        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
        {
            /* Both the structure and the buffer were allocated using a single call
            * to pvPortMalloc(), hence only one call to vPortFree() is required. */
            vPortFree( ( void * ) pxStreamBuffer );
    29aa:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <vPortFree>
    }
    else
    {
        /* The structure and buffer were not allocated dynamically and cannot be
         * freed - just scrub the structure so future use will assert. */
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    29ae:	20 e1       	ldi	r18, 0x10	; 16
    29b0:	11 92       	st	Z+, r1
    29b2:	2a 95       	dec	r18
    29b4:	e9 f7       	brne	.-6      	; 0x29b0 <vStreamBufferDelete+0xc>
    }

    traceRETURN_vStreamBufferDelete();
}
    29b6:	08 95       	ret

000029b8 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    29b8:	fc 01       	movw	r30, r24
        uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
    }
    #endif

    /* Can only reset a message buffer if there are no tasks blocked on it. */
    taskENTER_CRITICAL();
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	0f 92       	push	r0
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    29c0:	80 85       	ldd	r24, Z+8	; 0x08
    29c2:	91 85       	ldd	r25, Z+9	; 0x09
    29c4:	89 2b       	or	r24, r25
    29c6:	b1 f4       	brne	.+44     	; 0x29f4 <xStreamBufferReset+0x3c>
    29c8:	82 85       	ldd	r24, Z+10	; 0x0a
    29ca:	93 85       	ldd	r25, Z+11	; 0x0b
    29cc:	89 2b       	or	r24, r25
    29ce:	91 f4       	brne	.+36     	; 0x29f4 <xStreamBufferReset+0x3c>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    29d0:	86 81       	ldd	r24, Z+6	; 0x06
    29d2:	97 81       	ldd	r25, Z+7	; 0x07
    29d4:	24 81       	ldd	r18, Z+4	; 0x04
    29d6:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    29d8:	4c e0       	ldi	r20, 0x0C	; 12
    29da:	df 01       	movw	r26, r30
    29dc:	1d 92       	st	X+, r1
    29de:	4a 95       	dec	r20
    29e0:	e9 f7       	brne	.-6      	; 0x29dc <xStreamBufferReset+0x24>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    29e2:	35 83       	std	Z+5, r19	; 0x05
    29e4:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    29e6:	97 83       	std	Z+7, r25	; 0x07
    29e8:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    29ea:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET( xStreamBuffer );

            xReturn = pdPASS;
    29ec:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    29ee:	0f 90       	pop	r0
    29f0:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xStreamBufferReset( xReturn );

    return xReturn;
}
    29f2:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	fb cf       	rjmp	.-10     	; 0x29ee <xStreamBufferReset+0x36>

000029f8 <xStreamBufferResetFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    29f8:	fc 01       	movw	r30, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    29fa:	80 85       	ldd	r24, Z+8	; 0x08
    29fc:	91 85       	ldd	r25, Z+9	; 0x09
    29fe:	89 2b       	or	r24, r25
    2a00:	a1 f4       	brne	.+40     	; 0x2a2a <xStreamBufferResetFromISR+0x32>
    2a02:	82 85       	ldd	r24, Z+10	; 0x0a
    2a04:	93 85       	ldd	r25, Z+11	; 0x0b
    2a06:	89 2b       	or	r24, r25
    2a08:	81 f4       	brne	.+32     	; 0x2a2a <xStreamBufferResetFromISR+0x32>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    2a0a:	86 81       	ldd	r24, Z+6	; 0x06
    2a0c:	97 81       	ldd	r25, Z+7	; 0x07
    2a0e:	24 81       	ldd	r18, Z+4	; 0x04
    2a10:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    2a12:	4c e0       	ldi	r20, 0x0C	; 12
    2a14:	df 01       	movw	r26, r30
    2a16:	1d 92       	st	X+, r1
    2a18:	4a 95       	dec	r20
    2a1a:	e9 f7       	brne	.-6      	; 0x2a16 <xStreamBufferResetFromISR+0x1e>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    2a1c:	35 83       	std	Z+5, r19	; 0x05
    2a1e:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2a20:	97 83       	std	Z+7, r25	; 0x07
    2a22:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    2a24:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET_FROM_ISR( xStreamBuffer );

            xReturn = pdPASS;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferResetFromISR( xReturn );

    return xReturn;
}
    2a2c:	08 95       	ret

00002a2e <xStreamBufferSetTriggerLevel>:
    traceENTER_xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );

    configASSERT( pxStreamBuffer );

    /* It is not valid for the trigger level to be 0. */
    if( xTriggerLevel == ( size_t ) 0 )
    2a2e:	61 15       	cp	r22, r1
    2a30:	71 05       	cpc	r23, r1
    2a32:	11 f4       	brne	.+4      	; 0x2a38 <xStreamBufferSetTriggerLevel+0xa>
    {
        xTriggerLevel = ( size_t ) 1;
    2a34:	61 e0       	ldi	r22, 0x01	; 1
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    }

    /* The trigger level is the number of bytes that must be in the stream
     * buffer before a task that is waiting for data is unblocked. */
    if( xTriggerLevel < pxStreamBuffer->xLength )
    2a38:	fc 01       	movw	r30, r24
    2a3a:	24 81       	ldd	r18, Z+4	; 0x04
    2a3c:	35 81       	ldd	r19, Z+5	; 0x05
    2a3e:	62 17       	cp	r22, r18
    2a40:	73 07       	cpc	r23, r19
    2a42:	20 f4       	brcc	.+8      	; 0x2a4c <xStreamBufferSetTriggerLevel+0x1e>
    {
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    2a44:	77 83       	std	Z+7, r23	; 0x07
    2a46:	66 83       	std	Z+6, r22	; 0x06
        xReturn = pdPASS;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	08 95       	ret
    }
    else
    {
        xReturn = pdFALSE;
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferSetTriggerLevel( xReturn );

    return xReturn;
}
    2a4e:	08 95       	ret

00002a50 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    2a50:	fc 01       	movw	r30, r24
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    2a52:	24 81       	ldd	r18, Z+4	; 0x04
    2a54:	35 81       	ldd	r19, Z+5	; 0x05
    /* The code below reads xTail and then xHead.  This is safe if the stream
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
    2a56:	80 81       	ld	r24, Z
    2a58:	91 81       	ldd	r25, Z+1	; 0x01
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    2a5a:	60 81       	ld	r22, Z
    2a5c:	71 81       	ldd	r23, Z+1	; 0x01
        xSpace -= pxStreamBuffer->xHead;
    2a5e:	42 81       	ldd	r20, Z+2	; 0x02
    2a60:	53 81       	ldd	r21, Z+3	; 0x03
    } while( xOriginalTail != pxStreamBuffer->xTail );
    2a62:	a0 81       	ld	r26, Z
    2a64:	b1 81       	ldd	r27, Z+1	; 0x01
    2a66:	a8 17       	cp	r26, r24
    2a68:	b9 07       	cpc	r27, r25
    2a6a:	a9 f7       	brne	.-22     	; 0x2a56 <xStreamBufferSpacesAvailable+0x6>

    xSpace -= ( size_t ) 1;
    2a6c:	c9 01       	movw	r24, r18
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	86 0f       	add	r24, r22
    2a72:	97 1f       	adc	r25, r23
    2a74:	84 1b       	sub	r24, r20
    2a76:	95 0b       	sbc	r25, r21

    if( xSpace >= pxStreamBuffer->xLength )
    2a78:	82 17       	cp	r24, r18
    2a7a:	93 07       	cpc	r25, r19
    2a7c:	10 f0       	brcs	.+4      	; 0x2a82 <xStreamBufferSpacesAvailable+0x32>
    {
        xSpace -= pxStreamBuffer->xLength;
    2a7e:	82 1b       	sub	r24, r18
    2a80:	93 0b       	sbc	r25, r19
    }

    traceRETURN_xStreamBufferSpacesAvailable( xSpace );

    return xSpace;
}
    2a82:	08 95       	ret

00002a84 <xStreamBufferBytesAvailable>:

    traceENTER_xStreamBufferBytesAvailable( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    2a84:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <prvBytesInBuffer>

00002a88 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2a88:	2f 92       	push	r2
    2a8a:	3f 92       	push	r3
    2a8c:	4f 92       	push	r4
    2a8e:	5f 92       	push	r5
    2a90:	6f 92       	push	r6
    2a92:	7f 92       	push	r7
    2a94:	8f 92       	push	r8
    2a96:	9f 92       	push	r9
    2a98:	af 92       	push	r10
    2a9a:	bf 92       	push	r11
    2a9c:	cf 92       	push	r12
    2a9e:	df 92       	push	r13
    2aa0:	ef 92       	push	r14
    2aa2:	ff 92       	push	r15
    2aa4:	0f 93       	push	r16
    2aa6:	1f 93       	push	r17
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <xStreamBufferSend+0x26>
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <xStreamBufferSend+0x28>
    2ab0:	1f 92       	push	r1
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	5c 01       	movw	r10, r24
    2ab8:	1b 01       	movw	r2, r22
    2aba:	2a 01       	movw	r4, r20
    2abc:	3d 83       	std	Y+5, r19	; 0x05
    2abe:	2c 83       	std	Y+4, r18	; 0x04
    configASSERT( pvTxData );
    configASSERT( pxStreamBuffer );

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	84 81       	ldd	r24, Z+4	; 0x04
    2ac4:	95 81       	ldd	r25, Z+5	; 0x05
    2ac6:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2ac8:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2aca:	4a 01       	movw	r8, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2acc:	20 ff       	sbrs	r18, 0
    2ace:	54 c0       	rjmp	.+168    	; 0x2b78 <xStreamBufferSend+0xf0>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2ad0:	f2 e0       	ldi	r31, 0x02	; 2
    2ad2:	8f 0e       	add	r8, r31
    2ad4:	91 1c       	adc	r9, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    2ad6:	88 15       	cp	r24, r8
    2ad8:	99 05       	cpc	r25, r9
    2ada:	10 f4       	brcc	.+4      	; 0x2ae0 <xStreamBufferSend+0x58>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    2adc:	1d 82       	std	Y+5, r1	; 0x05
    2ade:	1c 82       	std	Y+4, r1	; 0x04
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae4:	89 2b       	or	r24, r25
    2ae6:	09 f0       	breq	.+2      	; 0x2aea <xStreamBufferSend+0x62>
    2ae8:	4d c0       	rjmp	.+154    	; 0x2b84 <xStreamBufferSend+0xfc>
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2aea:	c5 01       	movw	r24, r10
    2aec:	0e 94 28 15 	call	0x2a50	; 0x2a50 <xStreamBufferSpacesAvailable>
    2af0:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2af2:	84 01       	movw	r16, r8
    2af4:	93 01       	movw	r18, r6
    2af6:	a2 01       	movw	r20, r4
    2af8:	b1 01       	movw	r22, r2
    2afa:	c5 01       	movw	r24, r10
    2afc:	0e 94 c8 13 	call	0x2790	; 0x2790 <prvWriteMessageToBuffer>
    2b00:	4c 01       	movw	r8, r24

    if( xReturn > ( size_t ) 0 )
    2b02:	89 2b       	or	r24, r25
    2b04:	01 f1       	breq	.+64     	; 0x2b46 <xStreamBufferSend+0xbe>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2b06:	c5 01       	movw	r24, r10
    2b08:	0e 94 71 13 	call	0x26e2	; 0x26e2 <prvBytesInBuffer>
    2b0c:	f5 01       	movw	r30, r10
    2b0e:	26 81       	ldd	r18, Z+6	; 0x06
    2b10:	37 81       	ldd	r19, Z+7	; 0x07
    2b12:	82 17       	cp	r24, r18
    2b14:	93 07       	cpc	r25, r19
    2b16:	b8 f0       	brcs	.+46     	; 0x2b46 <xStreamBufferSend+0xbe>
        {
            prvSEND_COMPLETED( pxStreamBuffer );
    2b18:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
    2b1c:	f5 01       	movw	r30, r10
    2b1e:	80 85       	ldd	r24, Z+8	; 0x08
    2b20:	91 85       	ldd	r25, Z+9	; 0x09
    2b22:	89 2b       	or	r24, r25
    2b24:	71 f0       	breq	.+28     	; 0x2b42 <xStreamBufferSend+0xba>
    2b26:	80 85       	ldd	r24, Z+8	; 0x08
    2b28:	91 85       	ldd	r25, Z+9	; 0x09
    2b2a:	f1 2c       	mov	r15, r1
    2b2c:	e1 2c       	mov	r14, r1
    2b2e:	00 e0       	ldi	r16, 0x00	; 0
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	a9 01       	movw	r20, r18
    2b36:	67 85       	ldd	r22, Z+15	; 0x0f
    2b38:	0e 94 12 20 	call	0x4024	; 0x4024 <xTaskGenericNotify>
    2b3c:	f5 01       	movw	r30, r10
    2b3e:	11 86       	std	Z+9, r1	; 0x09
    2b40:	10 86       	std	Z+8, r1	; 0x08
    2b42:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    }

    traceRETURN_xStreamBufferSend( xReturn );

    return xReturn;
}
    2b46:	c4 01       	movw	r24, r8
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	ff 90       	pop	r15
    2b5c:	ef 90       	pop	r14
    2b5e:	df 90       	pop	r13
    2b60:	cf 90       	pop	r12
    2b62:	bf 90       	pop	r11
    2b64:	af 90       	pop	r10
    2b66:	9f 90       	pop	r9
    2b68:	8f 90       	pop	r8
    2b6a:	7f 90       	pop	r7
    2b6c:	6f 90       	pop	r6
    2b6e:	5f 90       	pop	r5
    2b70:	4f 90       	pop	r4
    2b72:	3f 90       	pop	r3
    2b74:	2f 90       	pop	r2
    2b76:	08 95       	ret
    2b78:	84 17       	cp	r24, r20
    2b7a:	95 07       	cpc	r25, r21
    2b7c:	08 f0       	brcs	.+2      	; 0x2b80 <xStreamBufferSend+0xf8>
    2b7e:	b0 cf       	rjmp	.-160    	; 0x2ae0 <xStreamBufferSend+0x58>
    2b80:	4c 01       	movw	r8, r24
    2b82:	ae cf       	rjmp	.-164    	; 0x2ae0 <xStreamBufferSend+0x58>
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    {
        vTaskSetTimeOutState( &xTimeOut );
    2b84:	ce 01       	movw	r24, r28
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2b92:	c5 01       	movw	r24, r10
    2b94:	0e 94 28 15 	call	0x2a50	; 0x2a50 <xStreamBufferSpacesAvailable>
    2b98:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    2b9a:	88 15       	cp	r24, r8
    2b9c:	99 05       	cpc	r25, r9
    2b9e:	58 f5       	brcc	.+86     	; 0x2bf6 <xStreamBufferSend+0x16e>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    2ba0:	f5 01       	movw	r30, r10
    2ba2:	67 85       	ldd	r22, Z+15	; 0x0f
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	0e 94 a6 22 	call	0x454c	; 0x454c <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2bac:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <xTaskGetCurrentTaskHandle>
    2bb0:	f5 01       	movw	r30, r10
    2bb2:	93 87       	std	Z+11, r25	; 0x0b
    2bb4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2bb6:	0f 90       	pop	r0
    2bb8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2bba:	cc 80       	ldd	r12, Y+4	; 0x04
    2bbc:	dd 80       	ldd	r13, Y+5	; 0x05
    2bbe:	f1 2c       	mov	r15, r1
    2bc0:	e1 2c       	mov	r14, r1
    2bc2:	00 e0       	ldi	r16, 0x00	; 0
    2bc4:	10 e0       	ldi	r17, 0x00	; 0
    2bc6:	98 01       	movw	r18, r16
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	ba 01       	movw	r22, r20
    2bce:	87 85       	ldd	r24, Z+15	; 0x0f
    2bd0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2bd4:	f5 01       	movw	r30, r10
    2bd6:	13 86       	std	Z+11, r1	; 0x0b
    2bd8:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2bda:	be 01       	movw	r22, r28
    2bdc:	6c 5f       	subi	r22, 0xFC	; 252
    2bde:	7f 4f       	sbci	r23, 0xFF	; 255
    2be0:	ce 01       	movw	r24, r28
    2be2:	01 96       	adiw	r24, 0x01	; 1
    2be4:	0e 94 77 1e 	call	0x3cee	; 0x3cee <xTaskCheckForTimeOut>
    2be8:	88 23       	and	r24, r24
    2bea:	81 f2       	breq	.-96     	; 0x2b8c <xStreamBufferSend+0x104>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2bec:	61 14       	cp	r6, r1
    2bee:	71 04       	cpc	r7, r1
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <xStreamBufferSend+0x16c>
    2bf2:	7b cf       	rjmp	.-266    	; 0x2aea <xStreamBufferSend+0x62>
    2bf4:	7e cf       	rjmp	.-260    	; 0x2af2 <xStreamBufferSend+0x6a>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2bf6:	0f 90       	pop	r0
    2bf8:	0f be       	out	0x3f, r0	; 63
                    break;
    2bfa:	f8 cf       	rjmp	.-16     	; 0x2bec <xStreamBufferSend+0x164>

00002bfc <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2bfc:	af 92       	push	r10
    2bfe:	bf 92       	push	r11
    2c00:	cf 92       	push	r12
    2c02:	df 92       	push	r13
    2c04:	ef 92       	push	r14
    2c06:	ff 92       	push	r15
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	ec 01       	movw	r28, r24
    2c12:	5b 01       	movw	r10, r22
    2c14:	7a 01       	movw	r14, r20
    2c16:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2c18:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2c1a:	8a 01       	movw	r16, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2c1c:	80 ff       	sbrs	r24, 0
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <xStreamBufferSendFromISR+0x28>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2c20:	0e 5f       	subi	r16, 0xFE	; 254
    2c22:	1f 4f       	sbci	r17, 0xFF	; 255
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2c24:	ce 01       	movw	r24, r28
    2c26:	0e 94 28 15 	call	0x2a50	; 0x2a50 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2c2a:	9c 01       	movw	r18, r24
    2c2c:	a7 01       	movw	r20, r14
    2c2e:	b5 01       	movw	r22, r10
    2c30:	ce 01       	movw	r24, r28
    2c32:	0e 94 c8 13 	call	0x2790	; 0x2790 <prvWriteMessageToBuffer>
    2c36:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    2c38:	89 2b       	or	r24, r25
    2c3a:	c9 f0       	breq	.+50     	; 0x2c6e <xStreamBufferSendFromISR+0x72>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <prvBytesInBuffer>
    2c42:	2e 81       	ldd	r18, Y+6	; 0x06
    2c44:	3f 81       	ldd	r19, Y+7	; 0x07
    2c46:	82 17       	cp	r24, r18
    2c48:	93 07       	cpc	r25, r19
    2c4a:	88 f0       	brcs	.+34     	; 0x2c6e <xStreamBufferSendFromISR+0x72>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2c4c:	88 85       	ldd	r24, Y+8	; 0x08
    2c4e:	99 85       	ldd	r25, Y+9	; 0x09
    2c50:	89 2b       	or	r24, r25
    2c52:	69 f0       	breq	.+26     	; 0x2c6e <xStreamBufferSendFromISR+0x72>
    2c54:	88 85       	ldd	r24, Y+8	; 0x08
    2c56:	99 85       	ldd	r25, Y+9	; 0x09
    2c58:	f1 2c       	mov	r15, r1
    2c5a:	e1 2c       	mov	r14, r1
    2c5c:	00 e0       	ldi	r16, 0x00	; 0
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	a9 01       	movw	r20, r18
    2c64:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c66:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <xTaskGenericNotifyFromISR>
    2c6a:	19 86       	std	Y+9, r1	; 0x09
    2c6c:	18 86       	std	Y+8, r1	; 0x08

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
    traceRETURN_xStreamBufferSendFromISR( xReturn );

    return xReturn;
}
    2c6e:	c5 01       	movw	r24, r10
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	ff 90       	pop	r15
    2c7a:	ef 90       	pop	r14
    2c7c:	df 90       	pop	r13
    2c7e:	cf 90       	pop	r12
    2c80:	bf 90       	pop	r11
    2c82:	af 90       	pop	r10
    2c84:	08 95       	ret

00002c86 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2c86:	6f 92       	push	r6
    2c88:	7f 92       	push	r7
    2c8a:	8f 92       	push	r8
    2c8c:	9f 92       	push	r9
    2c8e:	af 92       	push	r10
    2c90:	bf 92       	push	r11
    2c92:	cf 92       	push	r12
    2c94:	df 92       	push	r13
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	ec 01       	movw	r28, r24
    2ca4:	4b 01       	movw	r8, r22
    2ca6:	3a 01       	movw	r6, r20
    2ca8:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2caa:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cac:	80 fd       	sbrc	r24, 0
    2cae:	47 c0       	rjmp	.+142    	; 0x2d3e <xStreamBufferReceive+0xb8>
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2cb0:	b1 2c       	mov	r11, r1
    2cb2:	a1 2c       	mov	r10, r1
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_BATCHING_BUFFER ) != ( uint8_t ) 0 )
    2cb4:	82 ff       	sbrs	r24, 2
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <xStreamBufferReceive+0x36>
    {
        /* Force task to block if the batching buffer contains less bytes than
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    2cb8:	ae 80       	ldd	r10, Y+6	; 0x06
    2cba:	bf 80       	ldd	r11, Y+7	; 0x07
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2cbc:	c1 14       	cp	r12, r1
    2cbe:	d1 04       	cpc	r13, r1
    2cc0:	29 f1       	breq	.+74     	; 0x2d0c <xStreamBufferReceive+0x86>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2cc8:	ce 01       	movw	r24, r28
    2cca:	0e 94 71 13 	call	0x26e2	; 0x26e2 <prvBytesInBuffer>
    2cce:	8c 01       	movw	r16, r24
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. If this function was invoked by a stream batch buffer read
             * then xBytesToStoreMessageLength will be xTriggerLevelBytes value
             * for the buffer.*/
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2cd0:	a8 16       	cp	r10, r24
    2cd2:	b9 06       	cpc	r11, r25
    2cd4:	48 f0       	brcs	.+18     	; 0x2ce8 <xStreamBufferReceive+0x62>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    2cd6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	0e 94 a6 22 	call	0x454c	; 0x454c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2ce0:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <xTaskGetCurrentTaskHandle>
    2ce4:	99 87       	std	Y+9, r25	; 0x09
    2ce6:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2ce8:	0f 90       	pop	r0
    2cea:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2cec:	a0 16       	cp	r10, r16
    2cee:	b1 06       	cpc	r11, r17
    2cf0:	50 f1       	brcs	.+84     	; 0x2d46 <xStreamBufferReceive+0xc0>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2cf2:	f1 2c       	mov	r15, r1
    2cf4:	e1 2c       	mov	r14, r1
    2cf6:	00 e0       	ldi	r16, 0x00	; 0
    2cf8:	10 e0       	ldi	r17, 0x00	; 0
    2cfa:	98 01       	movw	r18, r16
    2cfc:	40 e0       	ldi	r20, 0x00	; 0
    2cfe:	50 e0       	ldi	r21, 0x00	; 0
    2d00:	ba 01       	movw	r22, r20
    2d02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d04:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2d08:	19 86       	std	Y+9, r1	; 0x09
    2d0a:	18 86       	std	Y+8, r1	; 0x08
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <prvBytesInBuffer>
    2d12:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2d14:	a8 16       	cp	r10, r24
    2d16:	b9 06       	cpc	r11, r25
    2d18:	b0 f0       	brcs	.+44     	; 0x2d46 <xStreamBufferReceive+0xc0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2d1a:	b1 2c       	mov	r11, r1
    2d1c:	a1 2c       	mov	r10, r1
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
}
    2d1e:	c5 01       	movw	r24, r10
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	1f 91       	pop	r17
    2d26:	0f 91       	pop	r16
    2d28:	ff 90       	pop	r15
    2d2a:	ef 90       	pop	r14
    2d2c:	df 90       	pop	r13
    2d2e:	cf 90       	pop	r12
    2d30:	bf 90       	pop	r11
    2d32:	af 90       	pop	r10
    2d34:	9f 90       	pop	r9
    2d36:	8f 90       	pop	r8
    2d38:	7f 90       	pop	r7
    2d3a:	6f 90       	pop	r6
    2d3c:	08 95       	ret
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	a8 2e       	mov	r10, r24
    2d42:	b1 2c       	mov	r11, r1
    2d44:	bb cf       	rjmp	.-138    	; 0x2cbc <xStreamBufferReceive+0x36>
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    2d46:	98 01       	movw	r18, r16
    2d48:	a3 01       	movw	r20, r6
    2d4a:	b4 01       	movw	r22, r8
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <prvReadMessageFromBuffer>
    2d52:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2d54:	89 2b       	or	r24, r25
    2d56:	09 f3       	breq	.-62     	; 0x2d1a <xStreamBufferReceive+0x94>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            prvRECEIVE_COMPLETED( xStreamBuffer );
    2d58:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
    2d5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d60:	89 2b       	or	r24, r25
    2d62:	69 f0       	breq	.+26     	; 0x2d7e <xStreamBufferReceive+0xf8>
    2d64:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d66:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d68:	f1 2c       	mov	r15, r1
    2d6a:	e1 2c       	mov	r14, r1
    2d6c:	00 e0       	ldi	r16, 0x00	; 0
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	a9 01       	movw	r20, r18
    2d74:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d76:	0e 94 12 20 	call	0x4024	; 0x4024 <xTaskGenericNotify>
    2d7a:	1b 86       	std	Y+11, r1	; 0x0b
    2d7c:	1a 86       	std	Y+10, r1	; 0x0a
    2d7e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
    2d82:	cd cf       	rjmp	.-102    	; 0x2d1e <xStreamBufferReceive+0x98>

00002d84 <xStreamBufferNextMessageLengthBytes>:
}
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <xStreamBufferNextMessageLengthBytes+0xa>
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    traceENTER_xStreamBufferNextMessageLengthBytes( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2d92:	fc 01       	movw	r30, r24
    2d94:	26 85       	ldd	r18, Z+14	; 0x0e
    2d96:	20 fd       	sbrc	r18, 0
    2d98:	09 c0       	rjmp	.+18     	; 0x2dac <xStreamBufferNextMessageLengthBytes+0x28>
            xReturn = 0;
        }
    }
    else
    {
        xReturn = 0;
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
}
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	1f 91       	pop	r17
    2da8:	0f 91       	pop	r16
    2daa:	08 95       	ret
    2dac:	8c 01       	movw	r16, r24
    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2dae:	0e 94 71 13 	call	0x26e2	; 0x26e2 <prvBytesInBuffer>

        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    2db2:	03 97       	sbiw	r24, 0x03	; 3
    2db4:	90 f3       	brcs	.-28     	; 0x2d9a <xStreamBufferNextMessageLengthBytes+0x16>
        {
            /* The number of bytes available is greater than the number of bytes
             * required to hold the length of the next message, so another message
             * is available. */
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
    2db6:	f8 01       	movw	r30, r16
    2db8:	20 81       	ld	r18, Z
    2dba:	31 81       	ldd	r19, Z+1	; 0x01
    2dbc:	42 e0       	ldi	r20, 0x02	; 2
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	be 01       	movw	r22, r28
    2dc2:	6f 5f       	subi	r22, 0xFF	; 255
    2dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	0e 94 0e 14 	call	0x281c	; 0x281c <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
        xReturn = 0;
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
    2dd0:	e6 cf       	rjmp	.-52     	; 0x2d9e <xStreamBufferNextMessageLengthBytes+0x1a>

00002dd2 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    2dd2:	af 92       	push	r10
    2dd4:	bf 92       	push	r11
    2dd6:	cf 92       	push	r12
    2dd8:	df 92       	push	r13
    2dda:	ef 92       	push	r14
    2ddc:	ff 92       	push	r15
    2dde:	0f 93       	push	r16
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	ec 01       	movw	r28, r24
    2de8:	5b 01       	movw	r10, r22
    2dea:	7a 01       	movw	r14, r20
    2dec:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2dee:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2df0:	10 e0       	ldi	r17, 0x00	; 0
    2df2:	00 e0       	ldi	r16, 0x00	; 0
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2df4:	80 ff       	sbrs	r24, 0
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <xStreamBufferReceiveFromISR+0x2a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2df8:	02 e0       	ldi	r16, 0x02	; 2
    2dfa:	10 e0       	ldi	r17, 0x00	; 0
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2dfc:	ce 01       	movw	r24, r28
    2dfe:	0e 94 71 13 	call	0x26e2	; 0x26e2 <prvBytesInBuffer>
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2e02:	08 17       	cp	r16, r24
    2e04:	19 07       	cpc	r17, r25
    2e06:	70 f0       	brcs	.+28     	; 0x2e24 <xStreamBufferReceiveFromISR+0x52>
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2e08:	b1 2c       	mov	r11, r1
    2e0a:	a1 2c       	mov	r10, r1

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
}
    2e0c:	c5 01       	movw	r24, r10
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	df 90       	pop	r13
    2e1c:	cf 90       	pop	r12
    2e1e:	bf 90       	pop	r11
    2e20:	af 90       	pop	r10
    2e22:	08 95       	ret
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    2e24:	9c 01       	movw	r18, r24
    2e26:	a7 01       	movw	r20, r14
    2e28:	b5 01       	movw	r22, r10
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <prvReadMessageFromBuffer>
    2e30:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2e32:	89 2b       	or	r24, r25
    2e34:	49 f3       	breq	.-46     	; 0x2e08 <xStreamBufferReceiveFromISR+0x36>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2e36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e3a:	89 2b       	or	r24, r25
    2e3c:	39 f3       	breq	.-50     	; 0x2e0c <xStreamBufferReceiveFromISR+0x3a>
    2e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e40:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e42:	f1 2c       	mov	r15, r1
    2e44:	e1 2c       	mov	r14, r1
    2e46:	00 e0       	ldi	r16, 0x00	; 0
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	a9 01       	movw	r20, r18
    2e4e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e50:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <xTaskGenericNotifyFromISR>
    2e54:	1b 86       	std	Y+11, r1	; 0x0b
    2e56:	1a 86       	std	Y+10, r1	; 0x0a
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
    2e58:	d9 cf       	rjmp	.-78     	; 0x2e0c <xStreamBufferReceiveFromISR+0x3a>

00002e5a <xStreamBufferIsEmpty>:
    traceENTER_xStreamBufferIsEmpty( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* True if no bytes are available. */
    xTail = pxStreamBuffer->xTail;
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	20 81       	ld	r18, Z
    2e5e:	31 81       	ldd	r19, Z+1	; 0x01

    if( pxStreamBuffer->xHead == xTail )
    2e60:	42 81       	ldd	r20, Z+2	; 0x02
    2e62:	53 81       	ldd	r21, Z+3	; 0x03
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	42 17       	cp	r20, r18
    2e68:	53 07       	cpc	r21, r19
    2e6a:	09 f0       	breq	.+2      	; 0x2e6e <xStreamBufferIsEmpty+0x14>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsEmpty( xReturn );

    return xReturn;
}
    2e6e:	08 95       	ret

00002e70 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2e74:	fc 01       	movw	r30, r24
    2e76:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2e78:	d0 e0       	ldi	r29, 0x00	; 0
    2e7a:	c0 e0       	ldi	r28, 0x00	; 0

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2e7c:	20 ff       	sbrs	r18, 0
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <xStreamBufferIsFull+0x14>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2e80:	c2 e0       	ldi	r28, 0x02	; 2
    2e82:	d0 e0       	ldi	r29, 0x00	; 0
    {
        xBytesToStoreMessageLength = 0;
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    2e84:	0e 94 28 15 	call	0x2a50	; 0x2a50 <xStreamBufferSpacesAvailable>
    2e88:	21 e0       	ldi	r18, 0x01	; 1
    2e8a:	c8 17       	cp	r28, r24
    2e8c:	d9 07       	cpc	r29, r25
    2e8e:	08 f4       	brcc	.+2      	; 0x2e92 <xStreamBufferIsFull+0x22>
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsFull( xReturn );

    return xReturn;
}
    2e92:	82 2f       	mov	r24, r18
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	08 95       	ret

00002e9a <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
    2e9a:	cf 92       	push	r12
    2e9c:	df 92       	push	r13
    2e9e:	ef 92       	push	r14
    2ea0:	ff 92       	push	r15
    2ea2:	0f 93       	push	r16
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	20 85       	ldd	r18, Z+8	; 0x08
    2eac:	31 85       	ldd	r19, Z+9	; 0x09
    2eae:	23 2b       	or	r18, r19
    2eb0:	c1 f0       	breq	.+48     	; 0x2ee2 <xStreamBufferSendCompletedFromISR+0x48>
    2eb2:	6b 01       	movw	r12, r22
    2eb4:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    2eb6:	80 85       	ldd	r24, Z+8	; 0x08
    2eb8:	91 85       	ldd	r25, Z+9	; 0x09
    2eba:	f1 2c       	mov	r15, r1
    2ebc:	e1 2c       	mov	r14, r1
    2ebe:	00 e0       	ldi	r16, 0x00	; 0
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	a9 01       	movw	r20, r18
    2ec6:	67 85       	ldd	r22, Z+15	; 0x0f
    2ec8:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    2ecc:	19 86       	std	Y+9, r1	; 0x09
    2ece:	18 86       	std	Y+8, r1	; 0x08
            xReturn = pdTRUE;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
}
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
    2ee4:	f6 cf       	rjmp	.-20     	; 0x2ed2 <xStreamBufferSendCompletedFromISR+0x38>

00002ee6 <xStreamBufferReceiveCompletedFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
    2ee6:	cf 92       	push	r12
    2ee8:	df 92       	push	r13
    2eea:	ef 92       	push	r14
    2eec:	ff 92       	push	r15
    2eee:	0f 93       	push	r16
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	22 85       	ldd	r18, Z+10	; 0x0a
    2ef8:	33 85       	ldd	r19, Z+11	; 0x0b
    2efa:	23 2b       	or	r18, r19
    2efc:	c1 f0       	breq	.+48     	; 0x2f2e <xStreamBufferReceiveCompletedFromISR+0x48>
    2efe:	6b 01       	movw	r12, r22
    2f00:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    2f02:	82 85       	ldd	r24, Z+10	; 0x0a
    2f04:	93 85       	ldd	r25, Z+11	; 0x0b
    2f06:	f1 2c       	mov	r15, r1
    2f08:	e1 2c       	mov	r14, r1
    2f0a:	00 e0       	ldi	r16, 0x00	; 0
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	a9 01       	movw	r20, r18
    2f12:	67 85       	ldd	r22, Z+15	; 0x0f
    2f14:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    2f18:	1b 86       	std	Y+11, r1	; 0x0b
    2f1a:	1a 86       	std	Y+10, r1	; 0x0a
            xReturn = pdTRUE;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
}
    2f1e:	df 91       	pop	r29
    2f20:	cf 91       	pop	r28
    2f22:	0f 91       	pop	r16
    2f24:	ff 90       	pop	r15
    2f26:	ef 90       	pop	r14
    2f28:	df 90       	pop	r13
    2f2a:	cf 90       	pop	r12
    2f2c:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
    2f30:	f6 cf       	rjmp	.-20     	; 0x2f1e <xStreamBufferReceiveCompletedFromISR+0x38>

00002f32 <uxStreamBufferGetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer );

    traceRETURN_uxStreamBufferGetStreamBufferNotificationIndex( pxStreamBuffer->uxNotificationIndex );

    return pxStreamBuffer->uxNotificationIndex;
}
    2f32:	fc 01       	movw	r30, r24
    2f34:	87 85       	ldd	r24, Z+15	; 0x0f
    2f36:	08 95       	ret

00002f38 <vStreamBufferSetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );

    /* Check that the task notification index is valid. */
    configASSERT( uxNotificationIndex < configTASK_NOTIFICATION_ARRAY_ENTRIES );

    pxStreamBuffer->uxNotificationIndex = uxNotificationIndex;
    2f38:	fc 01       	movw	r30, r24
    2f3a:	67 87       	std	Z+15, r22	; 0x0f

    traceRETURN_vStreamBufferSetStreamBufferNotificationIndex();
}
    2f3c:	08 95       	ret

00002f3e <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2f3e:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    2f42:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    2f46:	80 81       	ld	r24, Z
    2f48:	81 11       	cpse	r24, r1
    2f4a:	07 c0       	rjmp	.+14     	; 0x2f5a <prvResetNextTaskUnblockTime+0x1c>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
    2f4c:	8f ef       	ldi	r24, 0xFF	; 255
    2f4e:	9f ef       	ldi	r25, 0xFF	; 255
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    2f50:	90 93 80 07 	sts	0x0780, r25	; 0x800780 <xNextTaskUnblockTime+0x1>
    2f54:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <xNextTaskUnblockTime>
    }
}
    2f58:	08 95       	ret
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    2f5a:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    2f5e:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    2f62:	05 80       	ldd	r0, Z+5	; 0x05
    2f64:	f6 81       	ldd	r31, Z+6	; 0x06
    2f66:	e0 2d       	mov	r30, r0
    2f68:	80 81       	ld	r24, Z
    2f6a:	91 81       	ldd	r25, Z+1	; 0x01
    2f6c:	f1 cf       	rjmp	.-30     	; 0x2f50 <prvResetNextTaskUnblockTime+0x12>

00002f6e <prvAddCurrentTaskToDelayedList.isra.2>:
    }

#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
    2f6e:	cf 92       	push	r12
    2f70:	df 92       	push	r13
    2f72:	ef 92       	push	r14
    2f74:	ff 92       	push	r15
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	ec 01       	movw	r28, r24
                                            const BaseType_t xCanBlockIndefinitely )
{
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    2f80:	c0 90 88 07 	lds	r12, 0x0788	; 0x800788 <xTickCount>
    2f84:	d0 90 89 07 	lds	r13, 0x0789	; 0x800789 <xTickCount+0x1>
    List_t * const pxDelayedList = pxDelayedTaskList;
    2f88:	00 91 a0 07 	lds	r16, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    2f8c:	10 91 a1 07 	lds	r17, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
    2f90:	e0 90 9e 07 	lds	r14, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    2f94:	f0 90 9f 07 	lds	r15, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2f98:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2f9c:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2fa0:	02 96       	adiw	r24, 0x02	; 2
    2fa2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
    2fa6:	cc 0d       	add	r28, r12
    2fa8:	dd 1d       	adc	r29, r13

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2faa:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2fae:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2fb2:	d3 83       	std	Z+3, r29	; 0x03
    2fb4:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2fb6:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2fba:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2fbe:	6e 5f       	subi	r22, 0xFE	; 254
    2fc0:	7f 4f       	sbci	r23, 0xFF	; 255
        xTimeToWake = xConstTickCount + xTicksToWait;

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );

        if( xTimeToWake < xConstTickCount )
    2fc2:	cc 15       	cp	r28, r12
    2fc4:	dd 05       	cpc	r29, r13
    2fc6:	58 f4       	brcc	.+22     	; 0x2fde <prvAddCurrentTaskToDelayedList.isra.2+0x70>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2fc8:	c7 01       	movw	r24, r14

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	ff 90       	pop	r15
    2fd4:	ef 90       	pop	r14
    2fd6:	df 90       	pop	r13
    2fd8:	cf 90       	pop	r12

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2fda:	0c 94 95 0c 	jmp	0x192a	; 0x192a <vListInsert>
        }
        else
        {
            traceMOVED_TASK_TO_DELAYED_LIST();
            /* The wake time has not overflowed, so the current block list is used. */
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2fde:	c8 01       	movw	r24, r16
    2fe0:	0e 94 95 0c 	call	0x192a	; 0x192a <vListInsert>

            /* If the task entering the blocked state was placed at the head of the
             * list of blocked tasks then xNextTaskUnblockTime needs to be updated
             * too. */
            if( xTimeToWake < xNextTaskUnblockTime )
    2fe4:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <xNextTaskUnblockTime>
    2fe8:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <xNextTaskUnblockTime+0x1>
    2fec:	c8 17       	cp	r28, r24
    2fee:	d9 07       	cpc	r29, r25
    2ff0:	20 f4       	brcc	.+8      	; 0x2ffa <prvAddCurrentTaskToDelayedList.isra.2+0x8c>
            {
                xNextTaskUnblockTime = xTimeToWake;
    2ff2:	d0 93 80 07 	sts	0x0780, r29	; 0x800780 <xNextTaskUnblockTime+0x1>
    2ff6:	c0 93 7f 07 	sts	0x077F, r28	; 0x80077f <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	1f 91       	pop	r17
    3000:	0f 91       	pop	r16
    3002:	ff 90       	pop	r15
    3004:	ef 90       	pop	r14
    3006:	df 90       	pop	r13
    3008:	cf 90       	pop	r12
    300a:	08 95       	ret

0000300c <prvCheckTasksWaitingTermination>:
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3010:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
    3014:	81 11       	cpse	r24, r1
    3016:	03 c0       	rjmp	.+6      	; 0x301e <prvCheckTasksWaitingTermination+0x12>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	08 95       	ret
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	0f 92       	push	r0
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3024:	e0 91 91 07 	lds	r30, 0x0791	; 0x800791 <xTasksWaitingTermination+0x5>
    3028:	f0 91 92 07 	lds	r31, 0x0792	; 0x800792 <xTasksWaitingTermination+0x6>
    302c:	c6 81       	ldd	r28, Z+6	; 0x06
    302e:	d7 81       	ldd	r29, Z+7	; 0x07
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3030:	ce 01       	movw	r24, r28
    3032:	02 96       	adiw	r24, 0x02	; 2
    3034:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>
                        --uxCurrentNumberOfTasks;
    3038:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    303c:	81 50       	subi	r24, 0x01	; 1
    303e:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <uxCurrentNumberOfTasks>
                        --uxDeletedTasksWaitingCleanUp;
    3042:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
    3046:	81 50       	subi	r24, 0x01	; 1
    3048:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <uxDeletedTasksWaitingCleanUp>
                    }
                }
                taskEXIT_CRITICAL();
    304c:	0f 90       	pop	r0
    304e:	0f be       	out	0x3f, r0	; 63

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    3050:	8f 89       	ldd	r24, Y+23	; 0x17
    3052:	98 8d       	ldd	r25, Y+24	; 0x18
    3054:	0e 94 4f 0c 	call	0x189e	; 0x189e <vPortFree>
            vPortFree( pxTCB );
    3058:	ce 01       	movw	r24, r28
    305a:	0e 94 4f 0c 	call	0x189e	; 0x189e <vPortFree>
    305e:	d8 cf       	rjmp	.-80     	; 0x3010 <prvCheckTasksWaitingTermination+0x4>

00003060 <prvIdleTask>:

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
    3060:	0e 94 06 18 	call	0x300c	; 0x300c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
    3064:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <pxReadyTasksLists>
    3068:	82 30       	cpi	r24, 0x02	; 2
    306a:	d0 f3       	brcs	.-12     	; 0x3060 <prvIdleTask>
            {
                taskYIELD();
    306c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
    3070:	f7 cf       	rjmp	.-18     	; 0x3060 <prvIdleTask>

00003072 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
    3072:	4f 92       	push	r4
    3074:	5f 92       	push	r5
    3076:	6f 92       	push	r6
    3078:	7f 92       	push	r7
    307a:	8f 92       	push	r8
    307c:	9f 92       	push	r9
    307e:	af 92       	push	r10
    3080:	bf 92       	push	r11
    3082:	cf 92       	push	r12
    3084:	df 92       	push	r13
    3086:	ef 92       	push	r14
    3088:	ff 92       	push	r15
    308a:	0f 93       	push	r16
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	4c 01       	movw	r8, r24
    3092:	5b 01       	movw	r10, r22
    3094:	29 01       	movw	r4, r18

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
    3096:	c4 2e       	mov	r12, r20
    3098:	d1 2c       	mov	r13, r1
    309a:	c6 01       	movw	r24, r12
    309c:	0e 94 17 0c 	call	0x182e	; 0x182e <pvPortMalloc>
    30a0:	3c 01       	movw	r6, r24

            if( pxStack != NULL )
    30a2:	89 2b       	or	r24, r25
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <xTaskCreate+0x36>
    30a6:	c9 c0       	rjmp	.+402    	; 0x323a <xTaskCreate+0x1c8>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    30a8:	86 e2       	ldi	r24, 0x26	; 38
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 17 0c 	call	0x182e	; 0x182e <pvPortMalloc>
    30b0:	ec 01       	movw	r28, r24

                if( pxNewTCB != NULL )
    30b2:	89 2b       	or	r24, r25
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <xTaskCreate+0x46>
    30b6:	be c0       	rjmp	.+380    	; 0x3234 <xTaskCreate+0x1c2>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
    30b8:	86 e2       	ldi	r24, 0x26	; 38
    30ba:	de 01       	movw	r26, r28
    30bc:	1d 92       	st	X+, r1
    30be:	8a 95       	dec	r24
    30c0:	e9 f7       	brne	.-6      	; 0x30bc <xTaskCreate+0x4a>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
    30c2:	78 8e       	std	Y+24, r7	; 0x18
    30c4:	6f 8a       	std	Y+23, r6	; 0x17
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
    30c6:	b1 e0       	ldi	r27, 0x01	; 1
    30c8:	cb 1a       	sub	r12, r27
    30ca:	d1 08       	sbc	r13, r1
    30cc:	c6 0c       	add	r12, r6
    30ce:	d7 1c       	adc	r13, r7
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    30d0:	a1 14       	cp	r10, r1
    30d2:	b1 04       	cpc	r11, r1
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <xTaskCreate+0x66>
    30d6:	c2 c0       	rjmp	.+388    	; 0x325c <xTaskCreate+0x1ea>
    30d8:	04 30       	cpi	r16, 0x04	; 4
    30da:	08 f0       	brcs	.+2      	; 0x30de <xTaskCreate+0x6c>
    30dc:	03 e0       	ldi	r16, 0x03	; 3
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
    30de:	0e 8b       	std	Y+22, r16	; 0x16
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    30e0:	5e 01       	movw	r10, r28
    30e2:	b2 e0       	ldi	r27, 0x02	; 2
    30e4:	ab 0e       	add	r10, r27
    30e6:	b1 1c       	adc	r11, r1
    30e8:	c5 01       	movw	r24, r10
    30ea:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    30ee:	ce 01       	movw	r24, r28
    30f0:	0c 96       	adiw	r24, 0x0c	; 12
    30f2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    30f6:	d9 87       	std	Y+9, r29	; 0x09
    30f8:	c8 87       	std	Y+8, r28	; 0x08

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
    30fa:	84 e0       	ldi	r24, 0x04	; 4
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	80 1b       	sub	r24, r16
    3100:	91 09       	sbc	r25, r1
    3102:	9d 87       	std	Y+13, r25	; 0x0d
    3104:	8c 87       	std	Y+12, r24	; 0x0c
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    3106:	db 8b       	std	Y+19, r29	; 0x13
    3108:	ca 8b       	std	Y+18, r28	; 0x12
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    310a:	a2 01       	movw	r20, r4
    310c:	b4 01       	movw	r22, r8
    310e:	c6 01       	movw	r24, r12
    3110:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <pxPortInitialiseStack>
    3114:	99 83       	std	Y+1, r25	; 0x01
    3116:	88 83       	st	Y, r24
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
    3118:	e1 14       	cp	r14, r1
    311a:	f1 04       	cpc	r15, r1
    311c:	19 f0       	breq	.+6      	; 0x3124 <xTaskCreate+0xb2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    311e:	f7 01       	movw	r30, r14
    3120:	d1 83       	std	Z+1, r29	; 0x01
    3122:	c0 83       	st	Z, r28

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	0f 92       	push	r0
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
    312a:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    312e:	8f 5f       	subi	r24, 0xFF	; 255
    3130:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <uxCurrentNumberOfTasks>

            if( pxCurrentTCB == NULL )
    3134:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3138:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    313c:	89 2b       	or	r24, r25
    313e:	09 f0       	breq	.+2      	; 0x3142 <xTaskCreate+0xd0>
    3140:	a3 c0       	rjmp	.+326    	; 0x3288 <xTaskCreate+0x216>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
    3142:	d0 93 d9 07 	sts	0x07D9, r29	; 0x8007d9 <pxCurrentTCB+0x1>
    3146:	c0 93 d8 07 	sts	0x07D8, r28	; 0x8007d8 <pxCurrentTCB>

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    314a:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    314e:	81 30       	cpi	r24, 0x01	; 1
    3150:	61 f5       	brne	.+88     	; 0x31aa <xTaskCreate+0x138>
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3152:	84 eb       	ldi	r24, 0xB4	; 180
    3154:	97 e0       	ldi	r25, 0x07	; 7
    3156:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
    315a:	8d eb       	ldi	r24, 0xBD	; 189
    315c:	97 e0       	ldi	r25, 0x07	; 7
    315e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
    3162:	86 ec       	ldi	r24, 0xC6	; 198
    3164:	97 e0       	ldi	r25, 0x07	; 7
    3166:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
    316a:	8f ec       	ldi	r24, 0xCF	; 207
    316c:	97 e0       	ldi	r25, 0x07	; 7
    316e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
    }

    vListInitialise( &xDelayedTaskList1 );
    3172:	8b ea       	ldi	r24, 0xAB	; 171
    3174:	97 e0       	ldi	r25, 0x07	; 7
    3176:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
    317a:	82 ea       	ldi	r24, 0xA2	; 162
    317c:	97 e0       	ldi	r25, 0x07	; 7
    317e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
    3182:	85 e9       	ldi	r24, 0x95	; 149
    3184:	97 e0       	ldi	r25, 0x07	; 7
    3186:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
    318a:	8c e8       	ldi	r24, 0x8C	; 140
    318c:	97 e0       	ldi	r25, 0x07	; 7
    318e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
    3192:	8b ea       	ldi	r24, 0xAB	; 171
    3194:	97 e0       	ldi	r25, 0x07	; 7
    3196:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <pxDelayedTaskList+0x1>
    319a:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <pxDelayedTaskList>
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    319e:	82 ea       	ldi	r24, 0xA2	; 162
    31a0:	97 e0       	ldi	r25, 0x07	; 7
    31a2:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    31a6:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
    31aa:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxTaskNumber>
    31ae:	8f 5f       	subi	r24, 0xFF	; 255
    31b0:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <uxTaskNumber>
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
    31b4:	ae 89       	ldd	r26, Y+22	; 0x16
    31b6:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <uxTopReadyPriority>
    31ba:	8a 17       	cp	r24, r26
    31bc:	10 f4       	brcc	.+4      	; 0x31c2 <xTaskCreate+0x150>
    31be:	a0 93 87 07 	sts	0x0787, r26	; 0x800787 <uxTopReadyPriority>
    31c2:	29 e0       	ldi	r18, 0x09	; 9
    31c4:	2a 9f       	mul	r18, r26
    31c6:	d0 01       	movw	r26, r0
    31c8:	11 24       	eor	r1, r1
    31ca:	ac 54       	subi	r26, 0x4C	; 76
    31cc:	b8 4f       	sbci	r27, 0xF8	; 248
    31ce:	11 96       	adiw	r26, 0x01	; 1
    31d0:	0d 90       	ld	r0, X+
    31d2:	bc 91       	ld	r27, X
    31d4:	a0 2d       	mov	r26, r0
    31d6:	bd 83       	std	Y+5, r27	; 0x05
    31d8:	ac 83       	std	Y+4, r26	; 0x04
    31da:	14 96       	adiw	r26, 0x04	; 4
    31dc:	8d 91       	ld	r24, X+
    31de:	9c 91       	ld	r25, X
    31e0:	15 97       	sbiw	r26, 0x05	; 5
    31e2:	9f 83       	std	Y+7, r25	; 0x07
    31e4:	8e 83       	std	Y+6, r24	; 0x06
    31e6:	14 96       	adiw	r26, 0x04	; 4
    31e8:	8d 91       	ld	r24, X+
    31ea:	9c 91       	ld	r25, X
    31ec:	15 97       	sbiw	r26, 0x05	; 5
    31ee:	fc 01       	movw	r30, r24
    31f0:	b3 82       	std	Z+3, r11	; 0x03
    31f2:	a2 82       	std	Z+2, r10	; 0x02
    31f4:	15 96       	adiw	r26, 0x05	; 5
    31f6:	bc 92       	st	X, r11
    31f8:	ae 92       	st	-X, r10
    31fa:	14 97       	sbiw	r26, 0x04	; 4
    31fc:	9e 89       	ldd	r25, Y+22	; 0x16
    31fe:	92 9f       	mul	r25, r18
    3200:	f0 01       	movw	r30, r0
    3202:	11 24       	eor	r1, r1
    3204:	ec 54       	subi	r30, 0x4C	; 76
    3206:	f8 4f       	sbci	r31, 0xF8	; 248
    3208:	fb 87       	std	Y+11, r31	; 0x0b
    320a:	ea 87       	std	Y+10, r30	; 0x0a
    320c:	80 81       	ld	r24, Z
    320e:	8f 5f       	subi	r24, 0xFF	; 255
    3210:	80 83       	st	Z, r24

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
    3212:	0f 90       	pop	r0
    3214:	0f be       	out	0x3f, r0	; 63

        if( xSchedulerRunning != pdFALSE )
    3216:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xSchedulerRunning>
    321a:	88 23       	and	r24, r24
    321c:	49 f0       	breq	.+18     	; 0x3230 <xTaskCreate+0x1be>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
    321e:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3222:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3226:	86 89       	ldd	r24, Z+22	; 0x16
    3228:	89 17       	cp	r24, r25
    322a:	10 f4       	brcc	.+4      	; 0x3230 <xTaskCreate+0x1be>
    322c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
    3230:	81 e0       	ldi	r24, 0x01	; 1
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    3232:	04 c0       	rjmp	.+8      	; 0x323c <xTaskCreate+0x1ca>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
    3234:	c3 01       	movw	r24, r6
    3236:	0e 94 4f 0c 	call	0x189e	; 0x189e <vPortFree>
            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    323a:	8f ef       	ldi	r24, 0xFF	; 255
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    }
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	0f 91       	pop	r16
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	df 90       	pop	r13
    3248:	cf 90       	pop	r12
    324a:	bf 90       	pop	r11
    324c:	af 90       	pop	r10
    324e:	9f 90       	pop	r9
    3250:	8f 90       	pop	r8
    3252:	7f 90       	pop	r7
    3254:	6f 90       	pop	r6
    3256:	5f 90       	pop	r5
    3258:	4f 90       	pop	r4
    325a:	08 95       	ret
    325c:	f5 01       	movw	r30, r10
    325e:	ae 01       	movw	r20, r28
    3260:	47 5e       	subi	r20, 0xE7	; 231
    3262:	5f 4f       	sbci	r21, 0xFF	; 255
    3264:	c5 01       	movw	r24, r10
    3266:	08 96       	adiw	r24, 0x08	; 8
    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3268:	21 91       	ld	r18, Z+
    326a:	da 01       	movw	r26, r20
    326c:	2d 93       	st	X+, r18
    326e:	ad 01       	movw	r20, r26

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
    3270:	9f 01       	movw	r18, r30
    3272:	21 50       	subi	r18, 0x01	; 1
    3274:	31 09       	sbc	r19, r1
    3276:	d9 01       	movw	r26, r18
    3278:	2c 91       	ld	r18, X
    327a:	22 23       	and	r18, r18
    327c:	19 f0       	breq	.+6      	; 0x3284 <xTaskCreate+0x212>
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    327e:	e8 17       	cp	r30, r24
    3280:	f9 07       	cpc	r31, r25
    3282:	91 f7       	brne	.-28     	; 0x3268 <xTaskCreate+0x1f6>
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
    3284:	18 a2       	std	Y+32, r1	; 0x20
    3286:	28 cf       	rjmp	.-432    	; 0x30d8 <xTaskCreate+0x66>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
    3288:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xSchedulerRunning>
    328c:	81 11       	cpse	r24, r1
    328e:	8d cf       	rjmp	.-230    	; 0x31aa <xTaskCreate+0x138>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3290:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3294:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3298:	9e 89       	ldd	r25, Y+22	; 0x16
    329a:	86 89       	ldd	r24, Z+22	; 0x16
    329c:	98 17       	cp	r25, r24
    329e:	08 f4       	brcc	.+2      	; 0x32a2 <xTaskCreate+0x230>
    32a0:	84 cf       	rjmp	.-248    	; 0x31aa <xTaskCreate+0x138>
                    {
                        pxCurrentTCB = pxNewTCB;
    32a2:	d0 93 d9 07 	sts	0x07D9, r29	; 0x8007d9 <pxCurrentTCB+0x1>
    32a6:	c0 93 d8 07 	sts	0x07D8, r28	; 0x8007d8 <pxCurrentTCB>
    32aa:	7f cf       	rjmp	.-258    	; 0x31aa <xTaskCreate+0x138>

000032ac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	ec 01       	movw	r28, r24
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	0f 92       	push	r0
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    32bc:	89 2b       	or	r24, r25
    32be:	21 f4       	brne	.+8      	; 0x32c8 <vTaskDelete+0x1c>
    32c0:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    32c4:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    32c8:	8e 01       	movw	r16, r28
    32ca:	0e 5f       	subi	r16, 0xFE	; 254
    32cc:	1f 4f       	sbci	r17, 0xFF	; 255
    32ce:	c8 01       	movw	r24, r16
    32d0:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    32d4:	8c 89       	ldd	r24, Y+20	; 0x14
    32d6:	9d 89       	ldd	r25, Y+21	; 0x15
    32d8:	89 2b       	or	r24, r25
    32da:	21 f0       	breq	.+8      	; 0x32e4 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    32dc:	ce 01       	movw	r24, r28
    32de:	0c 96       	adiw	r24, 0x0c	; 12
    32e0:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
    32e4:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxTaskNumber>
    32e8:	8f 5f       	subi	r24, 0xFF	; 255
    32ea:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <uxTaskNumber>

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
    32ee:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    32f2:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
    32f6:	20 91 86 07 	lds	r18, 0x0786	; 0x800786 <xSchedulerRunning>
    32fa:	22 23       	and	r18, r18
    32fc:	59 f1       	breq	.+86     	; 0x3354 <vTaskDelete+0xa8>
    32fe:	8c 17       	cp	r24, r28
    3300:	9d 07       	cpc	r25, r29
    3302:	41 f5       	brne	.+80     	; 0x3354 <vTaskDelete+0xa8>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    3304:	b8 01       	movw	r22, r16
    3306:	8c e8       	ldi	r24, 0x8C	; 140
    3308:	97 e0       	ldi	r25, 0x07	; 7
    330a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
    330e:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <uxDeletedTasksWaitingCleanUp>
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
    3318:	81 e0       	ldi	r24, 0x01	; 1
                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
            }
        }
        taskEXIT_CRITICAL();
    331a:	0f 90       	pop	r0
    331c:	0f be       	out	0x3f, r0	; 63

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	39 f0       	breq	.+14     	; 0x3330 <vTaskDelete+0x84>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    3322:	8f 89       	ldd	r24, Y+23	; 0x17
    3324:	98 8d       	ldd	r25, Y+24	; 0x18
    3326:	0e 94 4f 0c 	call	0x189e	; 0x189e <vPortFree>
            vPortFree( pxTCB );
    332a:	ce 01       	movw	r24, r28
    332c:	0e 94 4f 0c 	call	0x189e	; 0x189e <vPortFree>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
    3330:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xSchedulerRunning>
    3334:	88 23       	and	r24, r24
    3336:	49 f0       	breq	.+18     	; 0x334a <vTaskDelete+0x9e>
            {
                if( pxTCB == pxCurrentTCB )
    3338:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    333c:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3340:	8c 17       	cp	r24, r28
    3342:	9d 07       	cpc	r25, r29
    3344:	11 f4       	brne	.+4      	; 0x334a <vTaskDelete+0x9e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
                    taskYIELD_WITHIN_API();
    3346:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	08 95       	ret
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
    3354:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    3358:	81 50       	subi	r24, 0x01	; 1
    335a:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <uxCurrentNumberOfTasks>
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
    335e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <prvResetNextTaskUnblockTime>
#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	da cf       	rjmp	.-76     	; 0x331a <vTaskDelete+0x6e>

00003366 <vTaskStartScheduler>:
}

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3366:	ef 92       	push	r14
    3368:	ff 92       	push	r15
    336a:	0f 93       	push	r16
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	28 97       	sbiw	r28, 0x08	; 8
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	a2 e9       	ldi	r26, 0x92	; 146
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	fe 01       	movw	r30, r28
    3386:	31 96       	adiw	r30, 0x01	; 1
    3388:	2a e9       	ldi	r18, 0x9A	; 154
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	bf 01       	movw	r22, r30
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
    338e:	8d 91       	ld	r24, X+
    3390:	81 93       	st	Z+, r24

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
    3392:	88 23       	and	r24, r24
    3394:	19 f0       	breq	.+6      	; 0x339c <vTaskStartScheduler+0x36>
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    3396:	2a 17       	cp	r18, r26
    3398:	3b 07       	cpc	r19, r27
    339a:	c9 f7       	brne	.-14     	; 0x338e <vTaskStartScheduler+0x28>
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
    339c:	8d e7       	ldi	r24, 0x7D	; 125
    339e:	e8 2e       	mov	r14, r24
    33a0:	87 e0       	ldi	r24, 0x07	; 7
    33a2:	f8 2e       	mov	r15, r24
    33a4:	00 e0       	ldi	r16, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	45 e5       	ldi	r20, 0x55	; 85
    33ac:	80 e3       	ldi	r24, 0x30	; 48
    33ae:	98 e1       	ldi	r25, 0x18	; 24
    33b0:	0e 94 39 18 	call	0x3072	; 0x3072 <xTaskCreate>
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
    33b4:	88 23       	and	r24, r24
    33b6:	a9 f0       	breq	.+42     	; 0x33e2 <vTaskStartScheduler+0x7c>

    xReturn = prvCreateIdleTasks();

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
    33b8:	81 30       	cpi	r24, 0x01	; 1
    33ba:	99 f4       	brne	.+38     	; 0x33e2 <vTaskStartScheduler+0x7c>
        {
            xReturn = xTimerCreateTimerTask();
    33bc:	0e 94 b0 24 	call	0x4960	; 0x4960 <xTimerCreateTimerTask>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
    33c0:	81 30       	cpi	r24, 0x01	; 1
    33c2:	79 f4       	brne	.+30     	; 0x33e2 <vTaskStartScheduler+0x7c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
    33c4:	f8 94       	cli
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
    33c6:	2f ef       	ldi	r18, 0xFF	; 255
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	30 93 80 07 	sts	0x0780, r19	; 0x800780 <xNextTaskUnblockTime+0x1>
    33ce:	20 93 7f 07 	sts	0x077F, r18	; 0x80077f <xNextTaskUnblockTime>
        xSchedulerRunning = pdTRUE;
    33d2:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <xSchedulerRunning>
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    33d6:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <xTickCount+0x1>
    33da:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <xTickCount>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
    33de:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
    33e2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <uxTopUsedPriority>

    traceRETURN_vTaskStartScheduler();
}
    33e6:	28 96       	adiw	r28, 0x08	; 8
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	df 91       	pop	r29
    33f4:	cf 91       	pop	r28
    33f6:	0f 91       	pop	r16
    33f8:	ff 90       	pop	r15
    33fa:	ef 90       	pop	r14
    33fc:	08 95       	ret

000033fe <vTaskEndScheduler>:
        BaseType_t xCoreID;

        #if ( configUSE_TIMERS == 1 )
        {
            /* Delete the timer task created by the kernel. */
            vTaskDelete( xTimerGetTimerDaemonTaskHandle() );
    33fe:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <xTimerGetTimerDaemonTaskHandle>
    3402:	0e 94 56 19 	call	0x32ac	; 0x32ac <vTaskDelete>
        #endif /* #if ( configUSE_TIMERS == 1 ) */

        /* Delete Idle tasks created by the kernel.*/
        for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
        {
            vTaskDelete( xIdleTaskHandles[ xCoreID ] );
    3406:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <xIdleTaskHandles>
    340a:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <xIdleTaskHandles+0x1>
    340e:	0e 94 56 19 	call	0x32ac	; 0x32ac <vTaskDelete>

        /* Idle task is responsible for reclaiming the resources of the tasks in
         * xTasksWaitingTermination list. Since the idle task is now deleted and
         * no longer going to run, we need to reclaim resources of all the tasks
         * in the xTasksWaitingTermination list. */
        prvCheckTasksWaitingTermination();
    3412:	0e 94 06 18 	call	0x300c	; 0x300c <prvCheckTasksWaitingTermination>
    #endif /* #if ( INCLUDE_vTaskDelete == 1 ) */

    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    3416:	f8 94       	cli
    xSchedulerRunning = pdFALSE;
    3418:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <xSchedulerRunning>

    /* This function must be called from a task and the application is
     * responsible for deleting that task after the scheduler is stopped. */
    vPortEndScheduler();
    341c:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <vPortEndScheduler>

00003420 <vTaskSuspendAll>:
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
    3420:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    3424:	8f 5f       	subi	r24, 0xFF	; 255
    3426:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <uxSchedulerSuspended>
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
    342a:	08 95       	ret

0000342c <xTaskGetTickCount>:
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	0f 92       	push	r0
    {
        xTicks = xTickCount;
    3432:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <xTickCount>
    3436:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <xTickCount+0x1>
    }
    portTICK_TYPE_EXIT_CRITICAL();
    343a:	0f 90       	pop	r0
    343c:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
}
    343e:	08 95       	ret

00003440 <xTaskGetTickCountFromISR>:
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    {
        xReturn = xTickCount;
    3440:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <xTickCount>
    3444:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <xTickCount+0x1>
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
}
    3448:	08 95       	ret

0000344a <uxTaskGetNumberOfTasks>:

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
    344a:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
}
    344e:	08 95       	ret

00003450 <pcTaskGetName>:

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3450:	00 97       	sbiw	r24, 0x00	; 0
    3452:	21 f4       	brne	.+8      	; 0x345c <pcTaskGetName+0xc>
    3454:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3458:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    configASSERT( pxTCB );

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
}
    345c:	49 96       	adiw	r24, 0x19	; 25
    345e:	08 95       	ret

00003460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3460:	cf 92       	push	r12
    3462:	df 92       	push	r13
    3464:	ef 92       	push	r14
    3466:	ff 92       	push	r15
    3468:	0f 93       	push	r16
    346a:	1f 93       	push	r17
    346c:	cf 93       	push	r28
    346e:	df 93       	push	r29

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3470:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    3474:	81 11       	cpse	r24, r1
    3476:	e5 c0       	rjmp	.+458    	; 0x3642 <xTaskIncrementTick+0x1e2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3478:	c0 91 88 07 	lds	r28, 0x0788	; 0x800788 <xTickCount>
    347c:	d0 91 89 07 	lds	r29, 0x0789	; 0x800789 <xTickCount+0x1>
    3480:	6e 01       	movw	r12, r28
    3482:	8f ef       	ldi	r24, 0xFF	; 255
    3484:	c8 1a       	sub	r12, r24
    3486:	d8 0a       	sbc	r13, r24

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
    3488:	d0 92 89 07 	sts	0x0789, r13	; 0x800789 <xTickCount+0x1>
    348c:	c0 92 88 07 	sts	0x0788, r12	; 0x800788 <xTickCount>

        if( xConstTickCount == ( TickType_t ) 0U )
    3490:	c1 14       	cp	r12, r1
    3492:	d1 04       	cpc	r13, r1
    3494:	b9 f4       	brne	.+46     	; 0x34c4 <xTaskIncrementTick+0x64>
        {
            taskSWITCH_DELAYED_LISTS();
    3496:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    349a:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    349e:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    34a2:	30 91 9f 07 	lds	r19, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    34a6:	30 93 a1 07 	sts	0x07A1, r19	; 0x8007a1 <pxDelayedTaskList+0x1>
    34aa:	20 93 a0 07 	sts	0x07A0, r18	; 0x8007a0 <pxDelayedTaskList>
    34ae:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    34b2:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
    34b6:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <xNumOfOverflows>
    34ba:	8f 5f       	subi	r24, 0xFF	; 255
    34bc:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <xNumOfOverflows>
    34c0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
    34c4:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <xNextTaskUnblockTime>
    34c8:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <xNextTaskUnblockTime+0x1>
    34cc:	c8 16       	cp	r12, r24
    34ce:	d9 06       	cpc	r13, r25
    34d0:	e8 f4       	brcc	.+58     	; 0x350c <xTaskIncrementTick+0xac>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    34d2:	80 e0       	ldi	r24, 0x00	; 0
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
    34d4:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    34d8:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    34dc:	e6 89       	ldd	r30, Z+22	; 0x16
    34de:	d9 e0       	ldi	r29, 0x09	; 9
    34e0:	ed 9f       	mul	r30, r29
    34e2:	f0 01       	movw	r30, r0
    34e4:	11 24       	eor	r1, r1
    34e6:	ec 54       	subi	r30, 0x4C	; 76
    34e8:	f8 4f       	sbci	r31, 0xF8	; 248
    34ea:	90 81       	ld	r25, Z
    34ec:	92 30       	cpi	r25, 0x02	; 2
    34ee:	08 f0       	brcs	.+2      	; 0x34f2 <xTaskIncrementTick+0x92>
                {
                    xSwitchRequired = pdTRUE;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
    34f2:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <xYieldPendings>
    34f6:	91 11       	cpse	r25, r1
                {
                    xSwitchRequired = pdTRUE;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
}
    34fa:	df 91       	pop	r29
    34fc:	cf 91       	pop	r28
    34fe:	1f 91       	pop	r17
    3500:	0f 91       	pop	r16
    3502:	ff 90       	pop	r15
    3504:	ef 90       	pop	r14
    3506:	df 90       	pop	r13
    3508:	cf 90       	pop	r12
    350a:	08 95       	ret

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    350c:	80 e0       	ldi	r24, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    350e:	69 e0       	ldi	r22, 0x09	; 9
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3510:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    3514:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    3518:	90 81       	ld	r25, Z
    351a:	91 11       	cpse	r25, r1
    351c:	07 c0       	rjmp	.+14     	; 0x352c <xTaskIncrementTick+0xcc>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
    351e:	2f ef       	ldi	r18, 0xFF	; 255
    3520:	3f ef       	ldi	r19, 0xFF	; 255
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
    3522:	30 93 80 07 	sts	0x0780, r19	; 0x800780 <xNextTaskUnblockTime+0x1>
    3526:	20 93 7f 07 	sts	0x077F, r18	; 0x80077f <xNextTaskUnblockTime>
    352a:	d4 cf       	rjmp	.-88     	; 0x34d4 <xTaskIncrementTick+0x74>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    352c:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    3530:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    3534:	05 80       	ldd	r0, Z+5	; 0x05
    3536:	f6 81       	ldd	r31, Z+6	; 0x06
    3538:	e0 2d       	mov	r30, r0
    353a:	06 80       	ldd	r0, Z+6	; 0x06
    353c:	f7 81       	ldd	r31, Z+7	; 0x07
    353e:	e0 2d       	mov	r30, r0
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    3540:	22 81       	ldd	r18, Z+2	; 0x02
    3542:	33 81       	ldd	r19, Z+3	; 0x03

                    if( xConstTickCount < xItemValue )
    3544:	c2 16       	cp	r12, r18
    3546:	d3 06       	cpc	r13, r19
    3548:	60 f3       	brcs	.-40     	; 0x3522 <xTaskIncrementTick+0xc2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    354a:	c2 85       	ldd	r28, Z+10	; 0x0a
    354c:	d3 85       	ldd	r29, Z+11	; 0x0b
    354e:	24 81       	ldd	r18, Z+4	; 0x04
    3550:	35 81       	ldd	r19, Z+5	; 0x05
    3552:	46 81       	ldd	r20, Z+6	; 0x06
    3554:	57 81       	ldd	r21, Z+7	; 0x07
    3556:	d9 01       	movw	r26, r18
    3558:	15 96       	adiw	r26, 0x05	; 5
    355a:	5c 93       	st	X, r21
    355c:	4e 93       	st	-X, r20
    355e:	14 97       	sbiw	r26, 0x04	; 4
    3560:	46 81       	ldd	r20, Z+6	; 0x06
    3562:	57 81       	ldd	r21, Z+7	; 0x07
    3564:	da 01       	movw	r26, r20
    3566:	13 96       	adiw	r26, 0x03	; 3
    3568:	3c 93       	st	X, r19
    356a:	2e 93       	st	-X, r18
    356c:	12 97       	sbiw	r26, 0x02	; 2
    356e:	9f 01       	movw	r18, r30
    3570:	2e 5f       	subi	r18, 0xFE	; 254
    3572:	3f 4f       	sbci	r19, 0xFF	; 255
    3574:	09 81       	ldd	r16, Y+1	; 0x01
    3576:	1a 81       	ldd	r17, Y+2	; 0x02
    3578:	02 17       	cp	r16, r18
    357a:	13 07       	cpc	r17, r19
    357c:	11 f4       	brne	.+4      	; 0x3582 <xTaskIncrementTick+0x122>
    357e:	5a 83       	std	Y+2, r21	; 0x02
    3580:	49 83       	std	Y+1, r20	; 0x01
    3582:	13 86       	std	Z+11, r1	; 0x0b
    3584:	12 86       	std	Z+10, r1	; 0x0a
    3586:	98 81       	ld	r25, Y
    3588:	91 50       	subi	r25, 0x01	; 1
    358a:	98 83       	st	Y, r25

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    358c:	a4 89       	ldd	r26, Z+20	; 0x14
    358e:	b5 89       	ldd	r27, Z+21	; 0x15
    3590:	10 97       	sbiw	r26, 0x00	; 0
    3592:	f9 f0       	breq	.+62     	; 0x35d2 <xTaskIncrementTick+0x172>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    3594:	46 85       	ldd	r20, Z+14	; 0x0e
    3596:	57 85       	ldd	r21, Z+15	; 0x0f
    3598:	00 89       	ldd	r16, Z+16	; 0x10
    359a:	11 89       	ldd	r17, Z+17	; 0x11
    359c:	ea 01       	movw	r28, r20
    359e:	1d 83       	std	Y+5, r17	; 0x05
    35a0:	0c 83       	std	Y+4, r16	; 0x04
    35a2:	00 89       	ldd	r16, Z+16	; 0x10
    35a4:	11 89       	ldd	r17, Z+17	; 0x11
    35a6:	e8 01       	movw	r28, r16
    35a8:	5b 83       	std	Y+3, r21	; 0x03
    35aa:	4a 83       	std	Y+2, r20	; 0x02
    35ac:	11 96       	adiw	r26, 0x01	; 1
    35ae:	ed 90       	ld	r14, X+
    35b0:	fc 90       	ld	r15, X
    35b2:	12 97       	sbiw	r26, 0x02	; 2
    35b4:	af 01       	movw	r20, r30
    35b6:	44 5f       	subi	r20, 0xF4	; 244
    35b8:	5f 4f       	sbci	r21, 0xFF	; 255
    35ba:	e4 16       	cp	r14, r20
    35bc:	f5 06       	cpc	r15, r21
    35be:	21 f4       	brne	.+8      	; 0x35c8 <xTaskIncrementTick+0x168>
    35c0:	12 96       	adiw	r26, 0x02	; 2
    35c2:	1c 93       	st	X, r17
    35c4:	0e 93       	st	-X, r16
    35c6:	11 97       	sbiw	r26, 0x01	; 1
    35c8:	15 8a       	std	Z+21, r1	; 0x15
    35ca:	14 8a       	std	Z+20, r1	; 0x14
    35cc:	9c 91       	ld	r25, X
    35ce:	91 50       	subi	r25, 0x01	; 1
    35d0:	9c 93       	st	X, r25
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    35d2:	a6 89       	ldd	r26, Z+22	; 0x16
    35d4:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <uxTopReadyPriority>
    35d8:	9a 17       	cp	r25, r26
    35da:	10 f4       	brcc	.+4      	; 0x35e0 <xTaskIncrementTick+0x180>
    35dc:	a0 93 87 07 	sts	0x0787, r26	; 0x800787 <uxTopReadyPriority>
    35e0:	6a 9f       	mul	r22, r26
    35e2:	d0 01       	movw	r26, r0
    35e4:	11 24       	eor	r1, r1
    35e6:	ac 54       	subi	r26, 0x4C	; 76
    35e8:	b8 4f       	sbci	r27, 0xF8	; 248
    35ea:	11 96       	adiw	r26, 0x01	; 1
    35ec:	0d 90       	ld	r0, X+
    35ee:	bc 91       	ld	r27, X
    35f0:	a0 2d       	mov	r26, r0
    35f2:	b5 83       	std	Z+5, r27	; 0x05
    35f4:	a4 83       	std	Z+4, r26	; 0x04
    35f6:	14 96       	adiw	r26, 0x04	; 4
    35f8:	4d 91       	ld	r20, X+
    35fa:	5c 91       	ld	r21, X
    35fc:	15 97       	sbiw	r26, 0x05	; 5
    35fe:	57 83       	std	Z+7, r21	; 0x07
    3600:	46 83       	std	Z+6, r20	; 0x06
    3602:	14 96       	adiw	r26, 0x04	; 4
    3604:	4d 91       	ld	r20, X+
    3606:	5c 91       	ld	r21, X
    3608:	15 97       	sbiw	r26, 0x05	; 5
    360a:	ea 01       	movw	r28, r20
    360c:	3b 83       	std	Y+3, r19	; 0x03
    360e:	2a 83       	std	Y+2, r18	; 0x02
    3610:	15 96       	adiw	r26, 0x05	; 5
    3612:	3c 93       	st	X, r19
    3614:	2e 93       	st	-X, r18
    3616:	14 97       	sbiw	r26, 0x04	; 4
    3618:	26 89       	ldd	r18, Z+22	; 0x16
    361a:	26 9f       	mul	r18, r22
    361c:	d0 01       	movw	r26, r0
    361e:	11 24       	eor	r1, r1
    3620:	ac 54       	subi	r26, 0x4C	; 76
    3622:	b8 4f       	sbci	r27, 0xF8	; 248
    3624:	b3 87       	std	Z+11, r27	; 0x0b
    3626:	a2 87       	std	Z+10, r26	; 0x0a
    3628:	9c 91       	ld	r25, X
    362a:	9f 5f       	subi	r25, 0xFF	; 255
    362c:	9c 93       	st	X, r25
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    362e:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3632:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3636:	96 89       	ldd	r25, Z+22	; 0x16
    3638:	92 17       	cp	r25, r18
    363a:	08 f0       	brcs	.+2      	; 0x363e <xTaskIncrementTick+0x1de>
    363c:	69 cf       	rjmp	.-302    	; 0x3510 <xTaskIncrementTick+0xb0>
                            {
                                xSwitchRequired = pdTRUE;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	67 cf       	rjmp	.-306    	; 0x3510 <xTaskIncrementTick+0xb0>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
    3642:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <xPendedTicks>
    3646:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <xPendedTicks+0x1>
    364a:	01 96       	adiw	r24, 0x01	; 1
    364c:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <xPendedTicks+0x1>
    3650:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <xPendedTicks>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    3654:	80 e0       	ldi	r24, 0x00	; 0
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
    3656:	51 cf       	rjmp	.-350    	; 0x34fa <xTaskIncrementTick+0x9a>

00003658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3658:	ef 92       	push	r14
    365a:	ff 92       	push	r15
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	0f 92       	push	r0

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
    366a:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    366e:	81 50       	subi	r24, 0x01	; 1
    3670:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <uxSchedulerSuspended>
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3674:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    3678:	88 23       	and	r24, r24
    367a:	51 f0       	breq	.+20     	; 0x3690 <xTaskResumeAll+0x38>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    BaseType_t xAlreadyYielded = pdFALSE;
    367c:	80 e0       	ldi	r24, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    367e:	0f 90       	pop	r0
    3680:	0f be       	out	0x3f, r0	; 63
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
}
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	1f 91       	pop	r17
    3688:	0f 91       	pop	r16
    368a:	ff 90       	pop	r15
    368c:	ef 90       	pop	r14
    368e:	08 95       	ret
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3690:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    3694:	88 23       	and	r24, r24
    3696:	91 f3       	breq	.-28     	; 0x367c <xTaskResumeAll+0x24>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3698:	e0 90 9a 07 	lds	r14, 0x079A	; 0x80079a <xPendingReadyList+0x5>
    369c:	f0 90 9b 07 	lds	r15, 0x079B	; 0x80079b <xPendingReadyList+0x6>
#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	e0 e0       	ldi	r30, 0x00	; 0
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
                        prvAddTaskToReadyList( pxTCB );
    36a4:	39 e0       	ldi	r19, 0x09	; 9
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    36a6:	41 e0       	ldi	r20, 0x01	; 1
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    36a8:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <xPendingReadyList>
    36ac:	81 11       	cpse	r24, r1
    36ae:	22 c0       	rjmp	.+68     	; 0x36f4 <xTaskResumeAll+0x9c>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
    36b0:	ef 2b       	or	r30, r31
    36b2:	11 f0       	breq	.+4      	; 0x36b8 <xTaskResumeAll+0x60>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
    36b4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    36b8:	c0 91 84 07 	lds	r28, 0x0784	; 0x800784 <xPendedTicks>
    36bc:	d0 91 85 07 	lds	r29, 0x0785	; 0x800785 <xPendedTicks+0x1>

                        if( xPendedCounts > ( TickType_t ) 0U )
    36c0:	20 97       	sbiw	r28, 0x00	; 0
    36c2:	61 f0       	breq	.+24     	; 0x36dc <xTaskResumeAll+0x84>
                            {
                                if( xTaskIncrementTick() != pdFALSE )
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    36c4:	11 e0       	ldi	r17, 0x01	; 1

                        if( xPendedCounts > ( TickType_t ) 0U )
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
    36c6:	0e 94 30 1a 	call	0x3460	; 0x3460 <xTaskIncrementTick>
    36ca:	81 11       	cpse	r24, r1
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    36cc:	10 93 83 07 	sts	0x0783, r17	; 0x800783 <xYieldPendings>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
    36d0:	21 97       	sbiw	r28, 0x01	; 1
                            } while( xPendedCounts > ( TickType_t ) 0U );
    36d2:	c9 f7       	brne	.-14     	; 0x36c6 <xTaskResumeAll+0x6e>

                            xPendedTicks = 0;
    36d4:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <xPendedTicks+0x1>
    36d8:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <xPendedTicks>
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
    36dc:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <xYieldPendings>
    36e0:	88 23       	and	r24, r24
    36e2:	61 f2       	breq	.-104    	; 0x367c <xTaskResumeAll+0x24>
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
    36e4:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    36e8:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    36ec:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	c5 cf       	rjmp	.-118    	; 0x367e <xTaskResumeAll+0x26>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    36f4:	d7 01       	movw	r26, r14
    36f6:	16 96       	adiw	r26, 0x06	; 6
    36f8:	ed 91       	ld	r30, X+
    36fa:	fc 91       	ld	r31, X
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    36fc:	a4 89       	ldd	r26, Z+20	; 0x14
    36fe:	b5 89       	ldd	r27, Z+21	; 0x15
    3700:	66 85       	ldd	r22, Z+14	; 0x0e
    3702:	77 85       	ldd	r23, Z+15	; 0x0f
    3704:	80 89       	ldd	r24, Z+16	; 0x10
    3706:	91 89       	ldd	r25, Z+17	; 0x11
    3708:	eb 01       	movw	r28, r22
    370a:	9d 83       	std	Y+5, r25	; 0x05
    370c:	8c 83       	std	Y+4, r24	; 0x04
    370e:	80 89       	ldd	r24, Z+16	; 0x10
    3710:	91 89       	ldd	r25, Z+17	; 0x11
    3712:	ec 01       	movw	r28, r24
    3714:	7b 83       	std	Y+3, r23	; 0x03
    3716:	6a 83       	std	Y+2, r22	; 0x02
    3718:	bf 01       	movw	r22, r30
    371a:	64 5f       	subi	r22, 0xF4	; 244
    371c:	7f 4f       	sbci	r23, 0xFF	; 255
    371e:	11 96       	adiw	r26, 0x01	; 1
    3720:	0d 91       	ld	r16, X+
    3722:	1c 91       	ld	r17, X
    3724:	12 97       	sbiw	r26, 0x02	; 2
    3726:	06 17       	cp	r16, r22
    3728:	17 07       	cpc	r17, r23
    372a:	21 f4       	brne	.+8      	; 0x3734 <xTaskResumeAll+0xdc>
    372c:	12 96       	adiw	r26, 0x02	; 2
    372e:	9c 93       	st	X, r25
    3730:	8e 93       	st	-X, r24
    3732:	11 97       	sbiw	r26, 0x01	; 1
    3734:	15 8a       	std	Z+21, r1	; 0x15
    3736:	14 8a       	std	Z+20, r1	; 0x14
    3738:	8c 91       	ld	r24, X
    373a:	81 50       	subi	r24, 0x01	; 1
    373c:	8c 93       	st	X, r24
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    373e:	a2 85       	ldd	r26, Z+10	; 0x0a
    3740:	b3 85       	ldd	r27, Z+11	; 0x0b
    3742:	84 81       	ldd	r24, Z+4	; 0x04
    3744:	95 81       	ldd	r25, Z+5	; 0x05
    3746:	66 81       	ldd	r22, Z+6	; 0x06
    3748:	77 81       	ldd	r23, Z+7	; 0x07
    374a:	ec 01       	movw	r28, r24
    374c:	7d 83       	std	Y+5, r23	; 0x05
    374e:	6c 83       	std	Y+4, r22	; 0x04
    3750:	66 81       	ldd	r22, Z+6	; 0x06
    3752:	77 81       	ldd	r23, Z+7	; 0x07
    3754:	eb 01       	movw	r28, r22
    3756:	9b 83       	std	Y+3, r25	; 0x03
    3758:	8a 83       	std	Y+2, r24	; 0x02
    375a:	cf 01       	movw	r24, r30
    375c:	02 96       	adiw	r24, 0x02	; 2
    375e:	11 96       	adiw	r26, 0x01	; 1
    3760:	0d 91       	ld	r16, X+
    3762:	1c 91       	ld	r17, X
    3764:	12 97       	sbiw	r26, 0x02	; 2
    3766:	08 17       	cp	r16, r24
    3768:	19 07       	cpc	r17, r25
    376a:	21 f4       	brne	.+8      	; 0x3774 <xTaskResumeAll+0x11c>
    376c:	12 96       	adiw	r26, 0x02	; 2
    376e:	7c 93       	st	X, r23
    3770:	6e 93       	st	-X, r22
    3772:	11 97       	sbiw	r26, 0x01	; 1
    3774:	13 86       	std	Z+11, r1	; 0x0b
    3776:	12 86       	std	Z+10, r1	; 0x0a
    3778:	2c 91       	ld	r18, X
    377a:	21 50       	subi	r18, 0x01	; 1
    377c:	2c 93       	st	X, r18
                        prvAddTaskToReadyList( pxTCB );
    377e:	a6 89       	ldd	r26, Z+22	; 0x16
    3780:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    3784:	2a 17       	cp	r18, r26
    3786:	10 f4       	brcc	.+4      	; 0x378c <xTaskResumeAll+0x134>
    3788:	a0 93 87 07 	sts	0x0787, r26	; 0x800787 <uxTopReadyPriority>
    378c:	3a 9f       	mul	r19, r26
    378e:	d0 01       	movw	r26, r0
    3790:	11 24       	eor	r1, r1
    3792:	ac 54       	subi	r26, 0x4C	; 76
    3794:	b8 4f       	sbci	r27, 0xF8	; 248
    3796:	11 96       	adiw	r26, 0x01	; 1
    3798:	0d 90       	ld	r0, X+
    379a:	bc 91       	ld	r27, X
    379c:	a0 2d       	mov	r26, r0
    379e:	b5 83       	std	Z+5, r27	; 0x05
    37a0:	a4 83       	std	Z+4, r26	; 0x04
    37a2:	14 96       	adiw	r26, 0x04	; 4
    37a4:	6d 91       	ld	r22, X+
    37a6:	7c 91       	ld	r23, X
    37a8:	15 97       	sbiw	r26, 0x05	; 5
    37aa:	77 83       	std	Z+7, r23	; 0x07
    37ac:	66 83       	std	Z+6, r22	; 0x06
    37ae:	14 96       	adiw	r26, 0x04	; 4
    37b0:	6d 91       	ld	r22, X+
    37b2:	7c 91       	ld	r23, X
    37b4:	15 97       	sbiw	r26, 0x05	; 5
    37b6:	eb 01       	movw	r28, r22
    37b8:	9b 83       	std	Y+3, r25	; 0x03
    37ba:	8a 83       	std	Y+2, r24	; 0x02
    37bc:	15 96       	adiw	r26, 0x05	; 5
    37be:	9c 93       	st	X, r25
    37c0:	8e 93       	st	-X, r24
    37c2:	14 97       	sbiw	r26, 0x04	; 4
    37c4:	96 89       	ldd	r25, Z+22	; 0x16
    37c6:	93 9f       	mul	r25, r19
    37c8:	d0 01       	movw	r26, r0
    37ca:	11 24       	eor	r1, r1
    37cc:	ac 54       	subi	r26, 0x4C	; 76
    37ce:	b8 4f       	sbci	r27, 0xF8	; 248
    37d0:	b3 87       	std	Z+11, r27	; 0x0b
    37d2:	a2 87       	std	Z+10, r26	; 0x0a
    37d4:	8c 91       	ld	r24, X
    37d6:	8f 5f       	subi	r24, 0xFF	; 255
    37d8:	8c 93       	st	X, r24

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    37da:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    37de:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    37e2:	56 96       	adiw	r26, 0x16	; 22
    37e4:	8c 91       	ld	r24, X
    37e6:	89 17       	cp	r24, r25
    37e8:	08 f0       	brcs	.+2      	; 0x37ec <xTaskResumeAll+0x194>
    37ea:	5e cf       	rjmp	.-324    	; 0x36a8 <xTaskResumeAll+0x50>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    37ec:	40 93 83 07 	sts	0x0783, r20	; 0x800783 <xYieldPendings>
    37f0:	5b cf       	rjmp	.-330    	; 0x36a8 <xTaskResumeAll+0x50>

000037f2 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	ec 01       	movw	r28, r24
    37fc:	8b 01       	movw	r16, r22
        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
        configASSERT( ( xTimeIncrement > 0U ) );

        vTaskSuspendAll();
    37fe:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
    3802:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <xTickCount>
    3806:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <xTickCount+0x1>

            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    380a:	48 81       	ld	r20, Y
    380c:	59 81       	ldd	r21, Y+1	; 0x01
    380e:	ca 01       	movw	r24, r20
    3810:	80 0f       	add	r24, r16
    3812:	91 1f       	adc	r25, r17
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
    3814:	99 83       	std	Y+1, r25	; 0x01
    3816:	88 83       	st	Y, r24
            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

            if( xConstTickCount < *pxPreviousWakeTime )
    3818:	24 17       	cp	r18, r20
    381a:	35 07       	cpc	r19, r21
    381c:	80 f4       	brcc	.+32     	; 0x383e <xTaskDelayUntil+0x4c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    381e:	84 17       	cp	r24, r20
    3820:	95 07       	cpc	r25, r21
    3822:	80 f0       	brcs	.+32     	; 0x3844 <xTaskDelayUntil+0x52>

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    3824:	c0 e0       	ldi	r28, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3826:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    382a:	81 11       	cpse	r24, r1
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <xTaskDelayUntil+0x40>
        {
            taskYIELD_WITHIN_API();
    382e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );

        return xShouldDelay;
    }
    3832:	8c 2f       	mov	r24, r28
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	1f 91       	pop	r17
    383a:	0f 91       	pop	r16
    383c:	08 95       	ret
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    383e:	84 17       	cp	r24, r20
    3840:	95 07       	cpc	r25, r21
    3842:	18 f0       	brcs	.+6      	; 0x384a <xTaskDelayUntil+0x58>
    3844:	28 17       	cp	r18, r24
    3846:	39 07       	cpc	r19, r25
    3848:	68 f7       	brcc	.-38     	; 0x3824 <xTaskDelayUntil+0x32>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    384a:	82 1b       	sub	r24, r18
    384c:	93 0b       	sbc	r25, r19
    384e:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <prvAddCurrentTaskToDelayedList.isra.2>
    3852:	c1 e0       	ldi	r28, 0x01	; 1
    3854:	e8 cf       	rjmp	.-48     	; 0x3826 <xTaskDelayUntil+0x34>

00003856 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	ec 01       	movw	r28, r24
        BaseType_t xAlreadyYielded = pdFALSE;

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
    385c:	89 2b       	or	r24, r25
    385e:	29 f4       	brne	.+10     	; 0x386a <vTaskDelay+0x14>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
        {
            taskYIELD_WITHIN_API();
    3860:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
    3864:	df 91       	pop	r29
    3866:	cf 91       	pop	r28
    3868:	08 95       	ret
        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
        {
            vTaskSuspendAll();
    386a:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    386e:	ce 01       	movw	r24, r28
    3870:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <prvAddCurrentTaskToDelayedList.isra.2>
            }
            xAlreadyYielded = xTaskResumeAll();
    3874:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    3878:	88 23       	and	r24, r24
    387a:	91 f3       	breq	.-28     	; 0x3860 <vTaskDelay+0xa>
    387c:	f3 cf       	rjmp	.-26     	; 0x3864 <vTaskDelay+0xe>

0000387e <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
    3882:	ec 01       	movw	r28, r24
     * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
    configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );

    /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
    vTaskSuspendAll();
    3884:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>

    /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
    taskENTER_CRITICAL();
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	0f 92       	push	r0
    {
        xPendedTicks += xTicksToCatchUp;
    388e:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <xPendedTicks>
    3892:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <xPendedTicks+0x1>
    3896:	8c 0f       	add	r24, r28
    3898:	9d 1f       	adc	r25, r29
    389a:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <xPendedTicks+0x1>
    389e:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <xPendedTicks>
    }
    taskEXIT_CRITICAL();
    38a2:	0f 90       	pop	r0
    38a4:	0f be       	out	0x3f, r0	; 63
    xYieldOccurred = xTaskResumeAll();

    traceRETURN_xTaskCatchUpTicks( xYieldOccurred );

    return xYieldOccurred;
}
    38a6:	df 91       	pop	r29
    38a8:	cf 91       	pop	r28
    taskENTER_CRITICAL();
    {
        xPendedTicks += xTicksToCatchUp;
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();
    38aa:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <xTaskResumeAll>

000038ae <vTaskSwitchContext>:
#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
    38ae:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    38b2:	88 23       	and	r24, r24
    38b4:	21 f0       	breq	.+8      	; 0x38be <vTaskSwitchContext+0x10>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
    38bc:	08 95       	ret
        }
        else
        {
            xYieldPendings[ 0 ] = pdFALSE;
    38be:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <xYieldPendings>
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    38c2:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    38c6:	89 e0       	ldi	r24, 0x09	; 9
    38c8:	42 2f       	mov	r20, r18
    38ca:	50 e0       	ldi	r21, 0x00	; 0
    38cc:	84 9f       	mul	r24, r20
    38ce:	f0 01       	movw	r30, r0
    38d0:	85 9f       	mul	r24, r21
    38d2:	f0 0d       	add	r31, r0
    38d4:	11 24       	eor	r1, r1
    38d6:	ec 54       	subi	r30, 0x4C	; 76
    38d8:	f8 4f       	sbci	r31, 0xF8	; 248
    38da:	90 81       	ld	r25, Z
    38dc:	99 23       	and	r25, r25
    38de:	59 f1       	breq	.+86     	; 0x3936 <vTaskSwitchContext+0x88>
    38e0:	a1 81       	ldd	r26, Z+1	; 0x01
    38e2:	b2 81       	ldd	r27, Z+2	; 0x02
    38e4:	12 96       	adiw	r26, 0x02	; 2
    38e6:	6d 91       	ld	r22, X+
    38e8:	7c 91       	ld	r23, X
    38ea:	72 83       	std	Z+2, r23	; 0x02
    38ec:	61 83       	std	Z+1, r22	; 0x01
    38ee:	28 9f       	mul	r18, r24
    38f0:	c0 01       	movw	r24, r0
    38f2:	11 24       	eor	r1, r1
    38f4:	89 54       	subi	r24, 0x49	; 73
    38f6:	98 4f       	sbci	r25, 0xF8	; 248
    38f8:	68 17       	cp	r22, r24
    38fa:	79 07       	cpc	r23, r25
    38fc:	21 f4       	brne	.+8      	; 0x3906 <vTaskSwitchContext+0x58>
    38fe:	85 81       	ldd	r24, Z+5	; 0x05
    3900:	96 81       	ldd	r25, Z+6	; 0x06
    3902:	92 83       	std	Z+2, r25	; 0x02
    3904:	81 83       	std	Z+1, r24	; 0x01
    3906:	89 e0       	ldi	r24, 0x09	; 9
    3908:	84 9f       	mul	r24, r20
    390a:	f0 01       	movw	r30, r0
    390c:	85 9f       	mul	r24, r21
    390e:	f0 0d       	add	r31, r0
    3910:	11 24       	eor	r1, r1
    3912:	ec 54       	subi	r30, 0x4C	; 76
    3914:	f8 4f       	sbci	r31, 0xF8	; 248
    3916:	01 80       	ldd	r0, Z+1	; 0x01
    3918:	f2 81       	ldd	r31, Z+2	; 0x02
    391a:	e0 2d       	mov	r30, r0
    391c:	86 81       	ldd	r24, Z+6	; 0x06
    391e:	97 81       	ldd	r25, Z+7	; 0x07
    3920:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <pxCurrentTCB+0x1>
    3924:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <pxCurrentTCB>
    3928:	20 93 87 07 	sts	0x0787, r18	; 0x800787 <uxTopReadyPriority>
            traceTASK_SWITCHED_IN();

            /* Macro to inject port specific behaviour immediately after
             * switching tasks, such as setting an end of stack watchpoint
             * or reconfiguring the MPU. */
            portTASK_SWITCH_HOOK( pxCurrentTCB );
    392c:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3930:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
    3934:	08 95       	ret
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    3936:	21 50       	subi	r18, 0x01	; 1
    3938:	c7 cf       	rjmp	.-114    	; 0x38c8 <vTaskSwitchContext+0x1a>

0000393a <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
    393a:	cf 93       	push	r28
    393c:	df 93       	push	r29
    393e:	eb 01       	movw	r28, r22
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3940:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3944:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3948:	64 5f       	subi	r22, 0xF4	; 244
    394a:	7f 4f       	sbci	r23, 0xFF	; 255
    394c:	0e 94 95 0c 	call	0x192a	; 0x192a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3950:	ce 01       	movw	r24, r28

    traceRETURN_vTaskPlaceOnEventList();
}
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3956:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <prvAddCurrentTaskToDelayedList.isra.2>

0000395a <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
    395e:	fc 01       	movw	r30, r24
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3960:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3964:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3968:	70 68       	ori	r23, 0x80	; 128
    396a:	1d 96       	adiw	r26, 0x0d	; 13
    396c:	7c 93       	st	X, r23
    396e:	6e 93       	st	-X, r22
    3970:	1c 97       	sbiw	r26, 0x0c	; 12
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3972:	a1 81       	ldd	r26, Z+1	; 0x01
    3974:	b2 81       	ldd	r27, Z+2	; 0x02
    3976:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    397a:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    397e:	bf 87       	std	Y+15, r27	; 0x0f
    3980:	ae 87       	std	Y+14, r26	; 0x0e
    3982:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3986:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    398a:	14 96       	adiw	r26, 0x04	; 4
    398c:	8d 91       	ld	r24, X+
    398e:	9c 91       	ld	r25, X
    3990:	15 97       	sbiw	r26, 0x05	; 5
    3992:	99 8b       	std	Y+17, r25	; 0x11
    3994:	88 8b       	std	Y+16, r24	; 0x10
    3996:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    399a:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    399e:	14 96       	adiw	r26, 0x04	; 4
    39a0:	cd 91       	ld	r28, X+
    39a2:	dc 91       	ld	r29, X
    39a4:	15 97       	sbiw	r26, 0x05	; 5
    39a6:	24 5f       	subi	r18, 0xF4	; 244
    39a8:	3f 4f       	sbci	r19, 0xFF	; 255
    39aa:	3b 83       	std	Y+3, r19	; 0x03
    39ac:	2a 83       	std	Y+2, r18	; 0x02
    39ae:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    39b2:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    39b6:	24 5f       	subi	r18, 0xF4	; 244
    39b8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ba:	15 96       	adiw	r26, 0x05	; 5
    39bc:	3c 93       	st	X, r19
    39be:	2e 93       	st	-X, r18
    39c0:	14 97       	sbiw	r26, 0x04	; 4
    39c2:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    39c6:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    39ca:	55 96       	adiw	r26, 0x15	; 21
    39cc:	fc 93       	st	X, r31
    39ce:	ee 93       	st	-X, r30
    39d0:	54 97       	sbiw	r26, 0x14	; 20
    39d2:	90 81       	ld	r25, Z
    39d4:	9f 5f       	subi	r25, 0xFF	; 255
    39d6:	90 83       	st	Z, r25

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    39d8:	ca 01       	movw	r24, r20

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    39de:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <prvAddCurrentTaskToDelayedList.isra.2>

000039e2 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
    39e6:	fc 01       	movw	r30, r24

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    39e8:	a1 81       	ldd	r26, Z+1	; 0x01
    39ea:	b2 81       	ldd	r27, Z+2	; 0x02
    39ec:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    39f0:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    39f4:	bf 87       	std	Y+15, r27	; 0x0f
    39f6:	ae 87       	std	Y+14, r26	; 0x0e
    39f8:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    39fc:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3a00:	14 96       	adiw	r26, 0x04	; 4
    3a02:	8d 91       	ld	r24, X+
    3a04:	9c 91       	ld	r25, X
    3a06:	15 97       	sbiw	r26, 0x05	; 5
    3a08:	99 8b       	std	Y+17, r25	; 0x11
    3a0a:	88 8b       	std	Y+16, r24	; 0x10
    3a0c:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3a10:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3a14:	14 96       	adiw	r26, 0x04	; 4
    3a16:	cd 91       	ld	r28, X+
    3a18:	dc 91       	ld	r29, X
    3a1a:	15 97       	sbiw	r26, 0x05	; 5
    3a1c:	24 5f       	subi	r18, 0xF4	; 244
    3a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a20:	3b 83       	std	Y+3, r19	; 0x03
    3a22:	2a 83       	std	Y+2, r18	; 0x02
    3a24:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3a28:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3a2c:	24 5f       	subi	r18, 0xF4	; 244
    3a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a30:	15 96       	adiw	r26, 0x05	; 5
    3a32:	3c 93       	st	X, r19
    3a34:	2e 93       	st	-X, r18
    3a36:	14 97       	sbiw	r26, 0x04	; 4
    3a38:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3a3c:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3a40:	55 96       	adiw	r26, 0x15	; 21
    3a42:	fc 93       	st	X, r31
    3a44:	ee 93       	st	-X, r30
    3a46:	54 97       	sbiw	r26, 0x14	; 20
    3a48:	90 81       	ld	r25, Z
    3a4a:	9f 5f       	subi	r25, 0xFF	; 255
    3a4c:	90 83       	st	Z, r25

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
    3a4e:	44 23       	and	r20, r20
    3a50:	11 f0       	breq	.+4      	; 0x3a56 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
    3a52:	6f ef       	ldi	r22, 0xFF	; 255
    3a54:	7f ef       	ldi	r23, 0xFF	; 255
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3a56:	cb 01       	movw	r24, r22

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
    3a58:	df 91       	pop	r29
    3a5a:	cf 91       	pop	r28
        {
            xTicksToWait = portMAX_DELAY;
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3a5c:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <prvAddCurrentTaskToDelayedList.isra.2>

00003a60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3a64:	dc 01       	movw	r26, r24
    3a66:	15 96       	adiw	r26, 0x05	; 5
    3a68:	ed 91       	ld	r30, X+
    3a6a:	fc 91       	ld	r31, X
    3a6c:	06 80       	ldd	r0, Z+6	; 0x06
    3a6e:	f7 81       	ldd	r31, Z+7	; 0x07
    3a70:	e0 2d       	mov	r30, r0
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    3a72:	a4 89       	ldd	r26, Z+20	; 0x14
    3a74:	b5 89       	ldd	r27, Z+21	; 0x15
    3a76:	86 85       	ldd	r24, Z+14	; 0x0e
    3a78:	97 85       	ldd	r25, Z+15	; 0x0f
    3a7a:	20 89       	ldd	r18, Z+16	; 0x10
    3a7c:	31 89       	ldd	r19, Z+17	; 0x11
    3a7e:	ec 01       	movw	r28, r24
    3a80:	3d 83       	std	Y+5, r19	; 0x05
    3a82:	2c 83       	std	Y+4, r18	; 0x04
    3a84:	c0 89       	ldd	r28, Z+16	; 0x10
    3a86:	d1 89       	ldd	r29, Z+17	; 0x11
    3a88:	9b 83       	std	Y+3, r25	; 0x03
    3a8a:	8a 83       	std	Y+2, r24	; 0x02
    3a8c:	cf 01       	movw	r24, r30
    3a8e:	0c 96       	adiw	r24, 0x0c	; 12
    3a90:	11 96       	adiw	r26, 0x01	; 1
    3a92:	2d 91       	ld	r18, X+
    3a94:	3c 91       	ld	r19, X
    3a96:	12 97       	sbiw	r26, 0x02	; 2
    3a98:	28 17       	cp	r18, r24
    3a9a:	39 07       	cpc	r19, r25
    3a9c:	21 f4       	brne	.+8      	; 0x3aa6 <xTaskRemoveFromEventList+0x46>
    3a9e:	12 96       	adiw	r26, 0x02	; 2
    3aa0:	dc 93       	st	X, r29
    3aa2:	ce 93       	st	-X, r28
    3aa4:	11 97       	sbiw	r26, 0x01	; 1
    3aa6:	15 8a       	std	Z+21, r1	; 0x15
    3aa8:	14 8a       	std	Z+20, r1	; 0x14
    3aaa:	2c 91       	ld	r18, X
    3aac:	21 50       	subi	r18, 0x01	; 1
    3aae:	2c 93       	st	X, r18

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3ab0:	20 91 7c 07 	lds	r18, 0x077C	; 0x80077c <uxSchedulerSuspended>
    3ab4:	21 11       	cpse	r18, r1
    3ab6:	57 c0       	rjmp	.+174    	; 0x3b66 <xTaskRemoveFromEventList+0x106>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    3ab8:	a2 85       	ldd	r26, Z+10	; 0x0a
    3aba:	b3 85       	ldd	r27, Z+11	; 0x0b
    3abc:	84 81       	ldd	r24, Z+4	; 0x04
    3abe:	95 81       	ldd	r25, Z+5	; 0x05
    3ac0:	26 81       	ldd	r18, Z+6	; 0x06
    3ac2:	37 81       	ldd	r19, Z+7	; 0x07
    3ac4:	ec 01       	movw	r28, r24
    3ac6:	3d 83       	std	Y+5, r19	; 0x05
    3ac8:	2c 83       	std	Y+4, r18	; 0x04
    3aca:	c6 81       	ldd	r28, Z+6	; 0x06
    3acc:	d7 81       	ldd	r29, Z+7	; 0x07
    3ace:	9b 83       	std	Y+3, r25	; 0x03
    3ad0:	8a 83       	std	Y+2, r24	; 0x02
    3ad2:	cf 01       	movw	r24, r30
    3ad4:	02 96       	adiw	r24, 0x02	; 2
    3ad6:	11 96       	adiw	r26, 0x01	; 1
    3ad8:	2d 91       	ld	r18, X+
    3ada:	3c 91       	ld	r19, X
    3adc:	12 97       	sbiw	r26, 0x02	; 2
    3ade:	28 17       	cp	r18, r24
    3ae0:	39 07       	cpc	r19, r25
    3ae2:	21 f4       	brne	.+8      	; 0x3aec <xTaskRemoveFromEventList+0x8c>
    3ae4:	12 96       	adiw	r26, 0x02	; 2
    3ae6:	dc 93       	st	X, r29
    3ae8:	ce 93       	st	-X, r28
    3aea:	11 97       	sbiw	r26, 0x01	; 1
    3aec:	13 86       	std	Z+11, r1	; 0x0b
    3aee:	12 86       	std	Z+10, r1	; 0x0a
    3af0:	2c 91       	ld	r18, X
    3af2:	21 50       	subi	r18, 0x01	; 1
    3af4:	2c 93       	st	X, r18
        prvAddTaskToReadyList( pxUnblockedTCB );
    3af6:	c6 89       	ldd	r28, Z+22	; 0x16
    3af8:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    3afc:	2c 17       	cp	r18, r28
    3afe:	10 f4       	brcc	.+4      	; 0x3b04 <xTaskRemoveFromEventList+0xa4>
    3b00:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    3b04:	29 e0       	ldi	r18, 0x09	; 9
    3b06:	2c 9f       	mul	r18, r28
    3b08:	e0 01       	movw	r28, r0
    3b0a:	11 24       	eor	r1, r1
    3b0c:	cc 54       	subi	r28, 0x4C	; 76
    3b0e:	d8 4f       	sbci	r29, 0xF8	; 248
    3b10:	09 80       	ldd	r0, Y+1	; 0x01
    3b12:	da 81       	ldd	r29, Y+2	; 0x02
    3b14:	c0 2d       	mov	r28, r0
    3b16:	d5 83       	std	Z+5, r29	; 0x05
    3b18:	c4 83       	std	Z+4, r28	; 0x04
    3b1a:	4c 81       	ldd	r20, Y+4	; 0x04
    3b1c:	5d 81       	ldd	r21, Y+5	; 0x05
    3b1e:	57 83       	std	Z+7, r21	; 0x07
    3b20:	46 83       	std	Z+6, r20	; 0x06
    3b22:	ac 81       	ldd	r26, Y+4	; 0x04
    3b24:	bd 81       	ldd	r27, Y+5	; 0x05
    3b26:	13 96       	adiw	r26, 0x03	; 3
    3b28:	9c 93       	st	X, r25
    3b2a:	8e 93       	st	-X, r24
    3b2c:	12 97       	sbiw	r26, 0x02	; 2
    3b2e:	9d 83       	std	Y+5, r25	; 0x05
    3b30:	8c 83       	std	Y+4, r24	; 0x04
    3b32:	a6 89       	ldd	r26, Z+22	; 0x16
    3b34:	a2 9f       	mul	r26, r18
    3b36:	d0 01       	movw	r26, r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	ac 54       	subi	r26, 0x4C	; 76
    3b3c:	b8 4f       	sbci	r27, 0xF8	; 248
    3b3e:	b3 87       	std	Z+11, r27	; 0x0b
    3b40:	a2 87       	std	Z+10, r26	; 0x0a
    3b42:	8c 91       	ld	r24, X
    3b44:	8f 5f       	subi	r24, 0xFF	; 255
    3b46:	8c 93       	st	X, r24
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3b48:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3b4c:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3b50:	96 89       	ldd	r25, Z+22	; 0x16
    3b52:	56 96       	adiw	r26, 0x16	; 22
    3b54:	8c 91       	ld	r24, X
    3b56:	89 17       	cp	r24, r25
    3b58:	30 f5       	brcc	.+76     	; 0x3ba6 <xTaskRemoveFromEventList+0x146>
             * it should force a context switch now. */
            xReturn = pdTRUE;

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
}
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3b66:	a0 91 96 07 	lds	r26, 0x0796	; 0x800796 <xPendingReadyList+0x1>
    3b6a:	b0 91 97 07 	lds	r27, 0x0797	; 0x800797 <xPendingReadyList+0x2>
    3b6e:	b7 87       	std	Z+15, r27	; 0x0f
    3b70:	a6 87       	std	Z+14, r26	; 0x0e
    3b72:	14 96       	adiw	r26, 0x04	; 4
    3b74:	2d 91       	ld	r18, X+
    3b76:	3c 91       	ld	r19, X
    3b78:	15 97       	sbiw	r26, 0x05	; 5
    3b7a:	31 8b       	std	Z+17, r19	; 0x11
    3b7c:	20 8b       	std	Z+16, r18	; 0x10
    3b7e:	14 96       	adiw	r26, 0x04	; 4
    3b80:	cd 91       	ld	r28, X+
    3b82:	dc 91       	ld	r29, X
    3b84:	15 97       	sbiw	r26, 0x05	; 5
    3b86:	9b 83       	std	Y+3, r25	; 0x03
    3b88:	8a 83       	std	Y+2, r24	; 0x02
    3b8a:	15 96       	adiw	r26, 0x05	; 5
    3b8c:	9c 93       	st	X, r25
    3b8e:	8e 93       	st	-X, r24
    3b90:	14 97       	sbiw	r26, 0x04	; 4
    3b92:	85 e9       	ldi	r24, 0x95	; 149
    3b94:	97 e0       	ldi	r25, 0x07	; 7
    3b96:	95 8b       	std	Z+21, r25	; 0x15
    3b98:	84 8b       	std	Z+20, r24	; 0x14
    3b9a:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <xPendingReadyList>
    3b9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ba0:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <xPendingReadyList>
    3ba4:	d1 cf       	rjmp	.-94     	; 0x3b48 <xTaskRemoveFromEventList+0xe8>
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
    3ba8:	db cf       	rjmp	.-74     	; 0x3b60 <xTaskRemoveFromEventList+0x100>

00003baa <vTaskRemoveFromUnorderedEventList>:
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	dc 01       	movw	r26, r24
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3bb0:	70 68       	ori	r23, 0x80	; 128
    3bb2:	11 96       	adiw	r26, 0x01	; 1
    3bb4:	7c 93       	st	X, r23
    3bb6:	6e 93       	st	-X, r22
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
    3bb8:	16 96       	adiw	r26, 0x06	; 6
    3bba:	ed 91       	ld	r30, X+
    3bbc:	fc 91       	ld	r31, X
    3bbe:	17 97       	sbiw	r26, 0x07	; 7
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( pxEventListItem );
    3bc0:	18 96       	adiw	r26, 0x08	; 8
    3bc2:	4d 91       	ld	r20, X+
    3bc4:	5c 91       	ld	r21, X
    3bc6:	19 97       	sbiw	r26, 0x09	; 9
    3bc8:	12 96       	adiw	r26, 0x02	; 2
    3bca:	2d 91       	ld	r18, X+
    3bcc:	3c 91       	ld	r19, X
    3bce:	13 97       	sbiw	r26, 0x03	; 3
    3bd0:	14 96       	adiw	r26, 0x04	; 4
    3bd2:	8d 91       	ld	r24, X+
    3bd4:	9c 91       	ld	r25, X
    3bd6:	15 97       	sbiw	r26, 0x05	; 5
    3bd8:	e9 01       	movw	r28, r18
    3bda:	9d 83       	std	Y+5, r25	; 0x05
    3bdc:	8c 83       	std	Y+4, r24	; 0x04
    3bde:	14 96       	adiw	r26, 0x04	; 4
    3be0:	8d 91       	ld	r24, X+
    3be2:	9c 91       	ld	r25, X
    3be4:	15 97       	sbiw	r26, 0x05	; 5
    3be6:	ec 01       	movw	r28, r24
    3be8:	3b 83       	std	Y+3, r19	; 0x03
    3bea:	2a 83       	std	Y+2, r18	; 0x02
    3bec:	ea 01       	movw	r28, r20
    3bee:	29 81       	ldd	r18, Y+1	; 0x01
    3bf0:	3a 81       	ldd	r19, Y+2	; 0x02
    3bf2:	2a 17       	cp	r18, r26
    3bf4:	3b 07       	cpc	r19, r27
    3bf6:	11 f4       	brne	.+4      	; 0x3bfc <vTaskRemoveFromUnorderedEventList+0x52>
    3bf8:	9a 83       	std	Y+2, r25	; 0x02
    3bfa:	89 83       	std	Y+1, r24	; 0x01
    3bfc:	19 96       	adiw	r26, 0x09	; 9
    3bfe:	1c 92       	st	X, r1
    3c00:	1e 92       	st	-X, r1
    3c02:	18 97       	sbiw	r26, 0x08	; 8
    3c04:	da 01       	movw	r26, r20
    3c06:	8c 91       	ld	r24, X
    3c08:	81 50       	subi	r24, 0x01	; 1
    3c0a:	8c 93       	st	X, r24
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    3c0c:	a2 85       	ldd	r26, Z+10	; 0x0a
    3c0e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3c10:	84 81       	ldd	r24, Z+4	; 0x04
    3c12:	95 81       	ldd	r25, Z+5	; 0x05
    3c14:	26 81       	ldd	r18, Z+6	; 0x06
    3c16:	37 81       	ldd	r19, Z+7	; 0x07
    3c18:	ec 01       	movw	r28, r24
    3c1a:	3d 83       	std	Y+5, r19	; 0x05
    3c1c:	2c 83       	std	Y+4, r18	; 0x04
    3c1e:	c6 81       	ldd	r28, Z+6	; 0x06
    3c20:	d7 81       	ldd	r29, Z+7	; 0x07
    3c22:	9b 83       	std	Y+3, r25	; 0x03
    3c24:	8a 83       	std	Y+2, r24	; 0x02
    3c26:	cf 01       	movw	r24, r30
    3c28:	02 96       	adiw	r24, 0x02	; 2
    3c2a:	11 96       	adiw	r26, 0x01	; 1
    3c2c:	2d 91       	ld	r18, X+
    3c2e:	3c 91       	ld	r19, X
    3c30:	12 97       	sbiw	r26, 0x02	; 2
    3c32:	28 17       	cp	r18, r24
    3c34:	39 07       	cpc	r19, r25
    3c36:	21 f4       	brne	.+8      	; 0x3c40 <vTaskRemoveFromUnorderedEventList+0x96>
    3c38:	12 96       	adiw	r26, 0x02	; 2
    3c3a:	dc 93       	st	X, r29
    3c3c:	ce 93       	st	-X, r28
    3c3e:	11 97       	sbiw	r26, 0x01	; 1
    3c40:	13 86       	std	Z+11, r1	; 0x0b
    3c42:	12 86       	std	Z+10, r1	; 0x0a
    3c44:	2c 91       	ld	r18, X
    3c46:	21 50       	subi	r18, 0x01	; 1
    3c48:	2c 93       	st	X, r18
    prvAddTaskToReadyList( pxUnblockedTCB );
    3c4a:	c6 89       	ldd	r28, Z+22	; 0x16
    3c4c:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    3c50:	2c 17       	cp	r18, r28
    3c52:	10 f4       	brcc	.+4      	; 0x3c58 <vTaskRemoveFromUnorderedEventList+0xae>
    3c54:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    3c58:	49 e0       	ldi	r20, 0x09	; 9
    3c5a:	4c 9f       	mul	r20, r28
    3c5c:	e0 01       	movw	r28, r0
    3c5e:	11 24       	eor	r1, r1
    3c60:	cc 54       	subi	r28, 0x4C	; 76
    3c62:	d8 4f       	sbci	r29, 0xF8	; 248
    3c64:	09 80       	ldd	r0, Y+1	; 0x01
    3c66:	da 81       	ldd	r29, Y+2	; 0x02
    3c68:	c0 2d       	mov	r28, r0
    3c6a:	d5 83       	std	Z+5, r29	; 0x05
    3c6c:	c4 83       	std	Z+4, r28	; 0x04
    3c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    3c70:	3d 81       	ldd	r19, Y+5	; 0x05
    3c72:	37 83       	std	Z+7, r19	; 0x07
    3c74:	26 83       	std	Z+6, r18	; 0x06
    3c76:	2c 81       	ldd	r18, Y+4	; 0x04
    3c78:	3d 81       	ldd	r19, Y+5	; 0x05
    3c7a:	d9 01       	movw	r26, r18
    3c7c:	13 96       	adiw	r26, 0x03	; 3
    3c7e:	9c 93       	st	X, r25
    3c80:	8e 93       	st	-X, r24
    3c82:	12 97       	sbiw	r26, 0x02	; 2
    3c84:	9d 83       	std	Y+5, r25	; 0x05
    3c86:	8c 83       	std	Y+4, r24	; 0x04
    3c88:	96 89       	ldd	r25, Z+22	; 0x16
    3c8a:	94 9f       	mul	r25, r20
    3c8c:	d0 01       	movw	r26, r0
    3c8e:	11 24       	eor	r1, r1
    3c90:	ac 54       	subi	r26, 0x4C	; 76
    3c92:	b8 4f       	sbci	r27, 0xF8	; 248
    3c94:	b3 87       	std	Z+11, r27	; 0x0b
    3c96:	a2 87       	std	Z+10, r26	; 0x0a
    3c98:	8c 91       	ld	r24, X
    3c9a:	8f 5f       	subi	r24, 0xFF	; 255
    3c9c:	8c 93       	st	X, r24

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3c9e:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3ca2:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3ca6:	86 89       	ldd	r24, Z+22	; 0x16
    3ca8:	89 17       	cp	r24, r25
    3caa:	18 f4       	brcc	.+6      	; 0x3cb2 <vTaskRemoveFromUnorderedEventList+0x108>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
    3cb2:	df 91       	pop	r29
    3cb4:	cf 91       	pop	r28
    3cb6:	08 95       	ret

00003cb8 <vTaskSetTimeOutState>:
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
    taskENTER_CRITICAL();
    3cb8:	0f b6       	in	r0, 0x3f	; 63
    3cba:	f8 94       	cli
    3cbc:	0f 92       	push	r0
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
    3cbe:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <xNumOfOverflows>
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	20 83       	st	Z, r18
        pxTimeOut->xTimeOnEntering = xTickCount;
    3cc6:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <xTickCount>
    3cca:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <xTickCount+0x1>
    3cce:	32 83       	std	Z+2, r19	; 0x02
    3cd0:	21 83       	std	Z+1, r18	; 0x01
    }
    taskEXIT_CRITICAL();
    3cd2:	0f 90       	pop	r0
    3cd4:	0f be       	out	0x3f, r0	; 63

    traceRETURN_vTaskSetTimeOutState();
}
    3cd6:	08 95       	ret

00003cd8 <vTaskInternalSetTimeOutState>:
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    3cd8:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <xNumOfOverflows>
    3cdc:	fc 01       	movw	r30, r24
    3cde:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    3ce0:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <xTickCount>
    3ce4:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <xTickCount+0x1>
    3ce8:	32 83       	std	Z+2, r19	; 0x02
    3cea:	21 83       	std	Z+1, r18	; 0x01

    traceRETURN_vTaskInternalSetTimeOutState();
}
    3cec:	08 95       	ret

00003cee <xTaskCheckForTimeOut>:
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    3cf4:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <xTickCount>
    3cf8:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	11 96       	adiw	r26, 0x01	; 1
    3d00:	4d 91       	ld	r20, X+
    3d02:	5c 91       	ld	r21, X
    3d04:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
    3d06:	e0 91 82 07 	lds	r30, 0x0782	; 0x800782 <xNumOfOverflows>
    3d0a:	fc 91       	ld	r31, X
    3d0c:	fe 17       	cp	r31, r30
    3d0e:	51 f0       	breq	.+20     	; 0x3d24 <xTaskCheckForTimeOut+0x36>
    3d10:	24 17       	cp	r18, r20
    3d12:	35 07       	cpc	r19, r21
    3d14:	38 f0       	brcs	.+14     	; 0x3d24 <xTaskCheckForTimeOut+0x36>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    3d16:	fb 01       	movw	r30, r22
    3d18:	11 82       	std	Z+1, r1	; 0x01
    3d1a:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    3d1e:	0f 90       	pop	r0
    3d20:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
}
    3d22:	08 95       	ret

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3d24:	24 1b       	sub	r18, r20
    3d26:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait )
    3d28:	db 01       	movw	r26, r22
    3d2a:	4d 91       	ld	r20, X+
    3d2c:	5c 91       	ld	r21, X
    3d2e:	24 17       	cp	r18, r20
    3d30:	35 07       	cpc	r19, r21
    3d32:	88 f7       	brcc	.-30     	; 0x3d16 <xTaskCheckForTimeOut+0x28>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    3d34:	42 1b       	sub	r20, r18
    3d36:	53 0b       	sbc	r21, r19
    3d38:	fb 01       	movw	r30, r22
    3d3a:	51 83       	std	Z+1, r21	; 0x01
    3d3c:	40 83       	st	Z, r20
            vTaskInternalSetTimeOutState( pxTimeOut );
    3d3e:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	ec cf       	rjmp	.-40     	; 0x3d1e <xTaskCheckForTimeOut+0x30>

00003d46 <vTaskMissedYield>:
void vTaskMissedYield( void )
{
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>

    traceRETURN_vTaskMissedYield();
}
    3d4c:	08 95       	ret

00003d4e <xTaskGetCurrentTaskHandle>:
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
    3d4e:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3d52:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
        }
    3d56:	08 95       	ret

00003d58 <xTaskGetCurrentTaskHandleForCore>:
    {
        TaskHandle_t xReturn = NULL;

        traceENTER_xTaskGetCurrentTaskHandleForCore( xCoreID );

        if( taskVALID_CORE_ID( xCoreID ) != pdFALSE )
    3d58:	81 11       	cpse	r24, r1
    3d5a:	05 c0       	rjmp	.+10     	; 0x3d66 <xTaskGetCurrentTaskHandleForCore+0xe>
        {
            #if ( configNUMBER_OF_CORES == 1 )
                xReturn = pxCurrentTCB;
    3d5c:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3d60:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3d64:	08 95       	ret
        }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    TaskHandle_t xTaskGetCurrentTaskHandleForCore( BaseType_t xCoreID )
    {
        TaskHandle_t xReturn = NULL;
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTaskGetCurrentTaskHandleForCore( xReturn );

        return xReturn;
    }
    3d6a:	08 95       	ret

00003d6c <xTaskGetSchedulerState>:
    {
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
    3d6c:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xSchedulerRunning>
    3d70:	88 23       	and	r24, r24
    3d72:	31 f0       	breq	.+12     	; 0x3d80 <xTaskGetSchedulerState+0x14>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3d74:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    3d78:	88 23       	and	r24, r24
    3d7a:	21 f0       	breq	.+8      	; 0x3d84 <xTaskGetSchedulerState+0x18>
                {
                    xReturn = taskSCHEDULER_RUNNING;
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	08 95       	ret

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	08 95       	ret
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
                {
                    xReturn = taskSCHEDULER_RUNNING;
    3d84:	82 e0       	ldi	r24, 0x02	; 2
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
    }
    3d86:	08 95       	ret

00003d88 <uxTaskResetEventItemValue>:
{
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    3d88:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3d8c:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3d90:	84 85       	ldd	r24, Z+12	; 0x0c
    3d92:	95 85       	ldd	r25, Z+13	; 0x0d

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
    3d94:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3d98:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3d9c:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3da0:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3da4:	56 96       	adiw	r26, 0x16	; 22
    3da6:	4c 91       	ld	r20, X
    3da8:	24 e0       	ldi	r18, 0x04	; 4
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	24 1b       	sub	r18, r20
    3dae:	31 09       	sbc	r19, r1
    3db0:	35 87       	std	Z+13, r19	; 0x0d
    3db2:	24 87       	std	Z+12, r18	; 0x0c

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
}
    3db4:	08 95       	ret

00003db6 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
    3db6:	cf 92       	push	r12
    3db8:	df 92       	push	r13
    3dba:	ef 92       	push	r14
    3dbc:	ff 92       	push	r15
    3dbe:	0f 93       	push	r16
    3dc0:	1f 93       	push	r17
    3dc2:	cf 93       	push	r28
    3dc4:	df 93       	push	r29
    3dc6:	c8 2f       	mov	r28, r24
    3dc8:	e6 2e       	mov	r14, r22
    3dca:	6a 01       	movw	r12, r20

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    3dcc:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	f8 94       	cli
    3dd4:	0f 92       	push	r0
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
    3dd6:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3dda:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3dde:	d0 e0       	ldi	r29, 0x00	; 0
    3de0:	8e 01       	movw	r16, r28
    3de2:	00 0f       	add	r16, r16
    3de4:	11 1f       	adc	r17, r17
    3de6:	00 0f       	add	r16, r16
    3de8:	11 1f       	adc	r17, r17
    3dea:	e0 0f       	add	r30, r16
    3dec:	f1 1f       	adc	r31, r17
    3dee:	81 a1       	ldd	r24, Z+33	; 0x21
    3df0:	92 a1       	ldd	r25, Z+34	; 0x22
    3df2:	a3 a1       	ldd	r26, Z+35	; 0x23
    3df4:	b4 a1       	ldd	r27, Z+36	; 0x24
    3df6:	89 2b       	or	r24, r25
    3df8:	8a 2b       	or	r24, r26
    3dfa:	8b 2b       	or	r24, r27
    3dfc:	69 f4       	brne	.+26     	; 0x3e18 <ulTaskGenericNotifyTake+0x62>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    3dfe:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3e02:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3e06:	ec 0f       	add	r30, r28
    3e08:	fd 1f       	adc	r31, r29
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    3e0e:	ff 24       	eor	r15, r15
    3e10:	f3 94       	inc	r15
    3e12:	c1 14       	cp	r12, r1
    3e14:	d1 04       	cpc	r13, r1
    3e16:	09 f4       	brne	.+2      	; 0x3e1a <ulTaskGenericNotifyTake+0x64>
    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
    3e18:	f1 2c       	mov	r15, r1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3e1a:	0f 90       	pop	r0
    3e1c:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    3e1e:	21 e0       	ldi	r18, 0x01	; 1
    3e20:	f2 12       	cpse	r15, r18
    3e22:	03 c0       	rjmp	.+6      	; 0x3e2a <ulTaskGenericNotifyTake+0x74>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3e24:	c6 01       	movw	r24, r12
    3e26:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3e2a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    3e2e:	91 e0       	ldi	r25, 0x01	; 1
    3e30:	f9 12       	cpse	r15, r25
    3e32:	04 c0       	rjmp	.+8      	; 0x3e3c <ulTaskGenericNotifyTake+0x86>
    3e34:	81 11       	cpse	r24, r1
    3e36:	02 c0       	rjmp	.+4      	; 0x3e3c <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
    3e38:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    3e42:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3e46:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3e4a:	e0 0f       	add	r30, r16
    3e4c:	f1 1f       	adc	r31, r17
    3e4e:	61 a1       	ldd	r22, Z+33	; 0x21
    3e50:	72 a1       	ldd	r23, Z+34	; 0x22
    3e52:	83 a1       	ldd	r24, Z+35	; 0x23
    3e54:	94 a1       	ldd	r25, Z+36	; 0x24

            if( ulReturn != 0U )
    3e56:	61 15       	cp	r22, r1
    3e58:	71 05       	cpc	r23, r1
    3e5a:	81 05       	cpc	r24, r1
    3e5c:	91 05       	cpc	r25, r1
    3e5e:	69 f0       	breq	.+26     	; 0x3e7a <ulTaskGenericNotifyTake+0xc4>
            {
                if( xClearCountOnExit != pdFALSE )
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3e60:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3e64:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3e68:	02 0f       	add	r16, r18
    3e6a:	13 1f       	adc	r17, r19
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];

            if( ulReturn != 0U )
            {
                if( xClearCountOnExit != pdFALSE )
    3e6c:	ee 20       	and	r14, r14
    3e6e:	b9 f0       	breq	.+46     	; 0x3e9e <ulTaskGenericNotifyTake+0xe8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3e70:	f8 01       	movw	r30, r16
    3e72:	11 a2       	std	Z+33, r1	; 0x21
    3e74:	12 a2       	std	Z+34, r1	; 0x22
    3e76:	13 a2       	std	Z+35, r1	; 0x23
    3e78:	14 a2       	std	Z+36, r1	; 0x24
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    3e7a:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3e7e:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3e82:	c2 0f       	add	r28, r18
    3e84:	d3 1f       	adc	r29, r19
    3e86:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    3e88:	0f 90       	pop	r0
    3e8a:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
    }
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	1f 91       	pop	r17
    3e92:	0f 91       	pop	r16
    3e94:	ff 90       	pop	r15
    3e96:	ef 90       	pop	r14
    3e98:	df 90       	pop	r13
    3e9a:	cf 90       	pop	r12
    3e9c:	08 95       	ret
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
    3e9e:	6b 01       	movw	r12, r22
    3ea0:	7c 01       	movw	r14, r24
    3ea2:	f1 e0       	ldi	r31, 0x01	; 1
    3ea4:	cf 1a       	sub	r12, r31
    3ea6:	d1 08       	sbc	r13, r1
    3ea8:	e1 08       	sbc	r14, r1
    3eaa:	f1 08       	sbc	r15, r1
    3eac:	f8 01       	movw	r30, r16
    3eae:	c1 a2       	std	Z+33, r12	; 0x21
    3eb0:	d2 a2       	std	Z+34, r13	; 0x22
    3eb2:	e3 a2       	std	Z+35, r14	; 0x23
    3eb4:	f4 a2       	std	Z+36, r15	; 0x24
    3eb6:	e1 cf       	rjmp	.-62     	; 0x3e7a <ulTaskGenericNotifyTake+0xc4>

00003eb8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
    3eb8:	4f 92       	push	r4
    3eba:	5f 92       	push	r5
    3ebc:	6f 92       	push	r6
    3ebe:	7f 92       	push	r7
    3ec0:	8f 92       	push	r8
    3ec2:	9f 92       	push	r9
    3ec4:	af 92       	push	r10
    3ec6:	bf 92       	push	r11
    3ec8:	cf 92       	push	r12
    3eca:	df 92       	push	r13
    3ecc:	ef 92       	push	r14
    3ece:	ff 92       	push	r15
    3ed0:	0f 93       	push	r16
    3ed2:	1f 93       	push	r17
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	c8 2f       	mov	r28, r24
    3eda:	2a 01       	movw	r4, r20
    3edc:	3b 01       	movw	r6, r22
    3ede:	48 01       	movw	r8, r16
    3ee0:	59 01       	movw	r10, r18

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    3ee2:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
    3ee6:	0f b6       	in	r0, 0x3f	; 63
    3ee8:	f8 94       	cli
    3eea:	0f 92       	push	r0
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    3eec:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3ef0:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3ef4:	d0 e0       	ldi	r29, 0x00	; 0
    3ef6:	ec 0f       	add	r30, r28
    3ef8:	fd 1f       	adc	r31, r29
    3efa:	85 a1       	ldd	r24, Z+37	; 0x25
    3efc:	82 30       	cpi	r24, 0x02	; 2
    3efe:	39 f1       	breq	.+78     	; 0x3f4e <xTaskGenericNotifyWait+0x96>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
    3f00:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3f04:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3f08:	ce 01       	movw	r24, r28
    3f0a:	88 0f       	add	r24, r24
    3f0c:	99 1f       	adc	r25, r25
    3f0e:	88 0f       	add	r24, r24
    3f10:	99 1f       	adc	r25, r25
    3f12:	e8 0f       	add	r30, r24
    3f14:	f9 1f       	adc	r31, r25
    3f16:	81 a1       	ldd	r24, Z+33	; 0x21
    3f18:	92 a1       	ldd	r25, Z+34	; 0x22
    3f1a:	a3 a1       	ldd	r26, Z+35	; 0x23
    3f1c:	b4 a1       	ldd	r27, Z+36	; 0x24
    3f1e:	40 94       	com	r4
    3f20:	50 94       	com	r5
    3f22:	60 94       	com	r6
    3f24:	70 94       	com	r7
    3f26:	84 21       	and	r24, r4
    3f28:	95 21       	and	r25, r5
    3f2a:	a6 21       	and	r26, r6
    3f2c:	b7 21       	and	r27, r7
    3f2e:	81 a3       	std	Z+33, r24	; 0x21
    3f30:	92 a3       	std	Z+34, r25	; 0x22
    3f32:	a3 a3       	std	Z+35, r26	; 0x23
    3f34:	b4 a3       	std	Z+36, r27	; 0x24

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    3f36:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3f3a:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3f3e:	ec 0f       	add	r30, r28
    3f40:	fd 1f       	adc	r31, r29
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    3f46:	11 e0       	ldi	r17, 0x01	; 1
    3f48:	c1 14       	cp	r12, r1
    3f4a:	d1 04       	cpc	r13, r1
    3f4c:	09 f4       	brne	.+2      	; 0x3f50 <xTaskGenericNotifyWait+0x98>
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
    3f4e:	10 e0       	ldi	r17, 0x00	; 0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3f50:	0f 90       	pop	r0
    3f52:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    3f54:	11 30       	cpi	r17, 0x01	; 1
    3f56:	19 f4       	brne	.+6      	; 0x3f5e <xTaskGenericNotifyWait+0xa6>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3f58:	c6 01       	movw	r24, r12
    3f5a:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3f5e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    3f62:	11 30       	cpi	r17, 0x01	; 1
    3f64:	21 f4       	brne	.+8      	; 0x3f6e <xTaskGenericNotifyWait+0xb6>
    3f66:	81 11       	cpse	r24, r1
    3f68:	02 c0       	rjmp	.+4      	; 0x3f6e <xTaskGenericNotifyWait+0xb6>
        {
            taskYIELD_WITHIN_API();
    3f6a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3f6e:	0f b6       	in	r0, 0x3f	; 63
    3f70:	f8 94       	cli
    3f72:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
    3f74:	e1 14       	cp	r14, r1
    3f76:	f1 04       	cpc	r15, r1
    3f78:	a1 f0       	breq	.+40     	; 0x3fa2 <xTaskGenericNotifyWait+0xea>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    3f7a:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3f7e:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3f82:	ce 01       	movw	r24, r28
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	e8 0f       	add	r30, r24
    3f8e:	f9 1f       	adc	r31, r25
    3f90:	81 a1       	ldd	r24, Z+33	; 0x21
    3f92:	92 a1       	ldd	r25, Z+34	; 0x22
    3f94:	a3 a1       	ldd	r26, Z+35	; 0x23
    3f96:	b4 a1       	ldd	r27, Z+36	; 0x24
    3f98:	f7 01       	movw	r30, r14
    3f9a:	80 83       	st	Z, r24
    3f9c:	91 83       	std	Z+1, r25	; 0x01
    3f9e:	a2 83       	std	Z+2, r26	; 0x02
    3fa0:	b3 83       	std	Z+3, r27	; 0x03

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    3fa2:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3fa6:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3faa:	ec 0f       	add	r30, r28
    3fac:	fd 1f       	adc	r31, r29
    3fae:	85 a1       	ldd	r24, Z+37	; 0x25
    3fb0:	82 30       	cpi	r24, 0x02	; 2
    3fb2:	b1 f5       	brne	.+108    	; 0x4020 <xTaskGenericNotifyWait+0x168>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
    3fb4:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3fb8:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3fbc:	ce 01       	movw	r24, r28
    3fbe:	88 0f       	add	r24, r24
    3fc0:	99 1f       	adc	r25, r25
    3fc2:	88 0f       	add	r24, r24
    3fc4:	99 1f       	adc	r25, r25
    3fc6:	e8 0f       	add	r30, r24
    3fc8:	f9 1f       	adc	r31, r25
    3fca:	81 a1       	ldd	r24, Z+33	; 0x21
    3fcc:	92 a1       	ldd	r25, Z+34	; 0x22
    3fce:	a3 a1       	ldd	r26, Z+35	; 0x23
    3fd0:	b4 a1       	ldd	r27, Z+36	; 0x24
    3fd2:	80 94       	com	r8
    3fd4:	90 94       	com	r9
    3fd6:	a0 94       	com	r10
    3fd8:	b0 94       	com	r11
    3fda:	88 21       	and	r24, r8
    3fdc:	99 21       	and	r25, r9
    3fde:	aa 21       	and	r26, r10
    3fe0:	bb 21       	and	r27, r11
    3fe2:	81 a3       	std	Z+33, r24	; 0x21
    3fe4:	92 a3       	std	Z+34, r25	; 0x22
    3fe6:	a3 a3       	std	Z+35, r26	; 0x23
    3fe8:	b4 a3       	std	Z+36, r27	; 0x24
                xReturn = pdTRUE;
    3fea:	81 e0       	ldi	r24, 0x01	; 1
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    3fec:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3ff0:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3ff4:	c2 0f       	add	r28, r18
    3ff6:	d3 1f       	adc	r29, r19
    3ff8:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    3ffa:	0f 90       	pop	r0
    3ffc:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
    }
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	1f 91       	pop	r17
    4004:	0f 91       	pop	r16
    4006:	ff 90       	pop	r15
    4008:	ef 90       	pop	r14
    400a:	df 90       	pop	r13
    400c:	cf 90       	pop	r12
    400e:	bf 90       	pop	r11
    4010:	af 90       	pop	r10
    4012:	9f 90       	pop	r9
    4014:	8f 90       	pop	r8
    4016:	7f 90       	pop	r7
    4018:	6f 90       	pop	r6
    401a:	5f 90       	pop	r5
    401c:	4f 90       	pop	r4
    401e:	08 95       	ret
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	e4 cf       	rjmp	.-56     	; 0x3fec <xTaskGenericNotifyWait+0x134>

00004024 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
    4024:	8f 92       	push	r8
    4026:	9f 92       	push	r9
    4028:	af 92       	push	r10
    402a:	bf 92       	push	r11
    402c:	cf 92       	push	r12
    402e:	df 92       	push	r13
    4030:	ef 92       	push	r14
    4032:	ff 92       	push	r15
    4034:	0f 93       	push	r16
    4036:	cf 93       	push	r28
    4038:	df 93       	push	r29
    403a:	dc 01       	movw	r26, r24

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;

        taskENTER_CRITICAL();
    403c:	0f b6       	in	r0, 0x3f	; 63
    403e:	f8 94       	cli
    4040:	0f 92       	push	r0
    4042:	70 e0       	ldi	r23, 0x00	; 0
        {
            if( pulPreviousNotificationValue != NULL )
    4044:	e1 14       	cp	r14, r1
    4046:	f1 04       	cpc	r15, r1
    4048:	81 f0       	breq	.+32     	; 0x406a <xTaskGenericNotify+0x46>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    404a:	fb 01       	movw	r30, r22
    404c:	ee 0f       	add	r30, r30
    404e:	ff 1f       	adc	r31, r31
    4050:	ee 0f       	add	r30, r30
    4052:	ff 1f       	adc	r31, r31
    4054:	e8 0f       	add	r30, r24
    4056:	f9 1f       	adc	r31, r25
    4058:	81 a0       	ldd	r8, Z+33	; 0x21
    405a:	92 a0       	ldd	r9, Z+34	; 0x22
    405c:	a3 a0       	ldd	r10, Z+35	; 0x23
    405e:	b4 a0       	ldd	r11, Z+36	; 0x24
    4060:	e7 01       	movw	r28, r14
    4062:	88 82       	st	Y, r8
    4064:	99 82       	std	Y+1, r9	; 0x01
    4066:	aa 82       	std	Y+2, r10	; 0x02
    4068:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    406a:	fd 01       	movw	r30, r26
    406c:	e6 0f       	add	r30, r22
    406e:	f7 1f       	adc	r31, r23
    4070:	85 a1       	ldd	r24, Z+37	; 0x25

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    4072:	92 e0       	ldi	r25, 0x02	; 2
    4074:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    4076:	02 30       	cpi	r16, 0x02	; 2
    4078:	e1 f1       	breq	.+120    	; 0x40f2 <xTaskGenericNotify+0xce>
    407a:	a0 f4       	brcc	.+40     	; 0x40a4 <xTaskGenericNotify+0x80>
    407c:	01 30       	cpi	r16, 0x01	; 1
    407e:	29 f1       	breq	.+74     	; 0x40ca <xTaskGenericNotify+0xa6>

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4080:	81 30       	cpi	r24, 0x01	; 1
    4082:	09 f4       	brne	.+2      	; 0x4086 <xTaskGenericNotify+0x62>
    4084:	4a c0       	rjmp	.+148    	; 0x411a <xTaskGenericNotify+0xf6>
    4086:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    4088:	0f 90       	pop	r0
    408a:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
    }
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	0f 91       	pop	r16
    4092:	ff 90       	pop	r15
    4094:	ef 90       	pop	r14
    4096:	df 90       	pop	r13
    4098:	cf 90       	pop	r12
    409a:	bf 90       	pop	r11
    409c:	af 90       	pop	r10
    409e:	9f 90       	pop	r9
    40a0:	8f 90       	pop	r8
    40a2:	08 95       	ret

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    40a4:	03 30       	cpi	r16, 0x03	; 3
    40a6:	29 f0       	breq	.+10     	; 0x40b2 <xTaskGenericNotify+0x8e>
    40a8:	04 30       	cpi	r16, 0x04	; 4
    40aa:	51 f7       	brne	.-44     	; 0x4080 <xTaskGenericNotify+0x5c>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    40ac:	82 30       	cpi	r24, 0x02	; 2
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <xTaskGenericNotify+0x8e>
    40b0:	97 c0       	rjmp	.+302    	; 0x41e0 <xTaskGenericNotify+0x1bc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    40b2:	66 0f       	add	r22, r22
    40b4:	77 1f       	adc	r23, r23
    40b6:	66 0f       	add	r22, r22
    40b8:	77 1f       	adc	r23, r23
    40ba:	fd 01       	movw	r30, r26
    40bc:	e6 0f       	add	r30, r22
    40be:	f7 1f       	adc	r31, r23
    40c0:	21 a3       	std	Z+33, r18	; 0x21
    40c2:	32 a3       	std	Z+34, r19	; 0x22
    40c4:	43 a3       	std	Z+35, r20	; 0x23
    40c6:	54 a3       	std	Z+36, r21	; 0x24
    40c8:	db cf       	rjmp	.-74     	; 0x4080 <xTaskGenericNotify+0x5c>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    40ca:	66 0f       	add	r22, r22
    40cc:	77 1f       	adc	r23, r23
    40ce:	66 0f       	add	r22, r22
    40d0:	77 1f       	adc	r23, r23
    40d2:	fd 01       	movw	r30, r26
    40d4:	e6 0f       	add	r30, r22
    40d6:	f7 1f       	adc	r31, r23
    40d8:	c1 a0       	ldd	r12, Z+33	; 0x21
    40da:	d2 a0       	ldd	r13, Z+34	; 0x22
    40dc:	e3 a0       	ldd	r14, Z+35	; 0x23
    40de:	f4 a0       	ldd	r15, Z+36	; 0x24
    40e0:	c2 2a       	or	r12, r18
    40e2:	d3 2a       	or	r13, r19
    40e4:	e4 2a       	or	r14, r20
    40e6:	f5 2a       	or	r15, r21
    40e8:	c1 a2       	std	Z+33, r12	; 0x21
    40ea:	d2 a2       	std	Z+34, r13	; 0x22
    40ec:	e3 a2       	std	Z+35, r14	; 0x23
    40ee:	f4 a2       	std	Z+36, r15	; 0x24
                    break;
    40f0:	c7 cf       	rjmp	.-114    	; 0x4080 <xTaskGenericNotify+0x5c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    40f2:	66 0f       	add	r22, r22
    40f4:	77 1f       	adc	r23, r23
    40f6:	66 0f       	add	r22, r22
    40f8:	77 1f       	adc	r23, r23
    40fa:	fd 01       	movw	r30, r26
    40fc:	e6 0f       	add	r30, r22
    40fe:	f7 1f       	adc	r31, r23
    4100:	41 a1       	ldd	r20, Z+33	; 0x21
    4102:	52 a1       	ldd	r21, Z+34	; 0x22
    4104:	63 a1       	ldd	r22, Z+35	; 0x23
    4106:	74 a1       	ldd	r23, Z+36	; 0x24
    4108:	4f 5f       	subi	r20, 0xFF	; 255
    410a:	5f 4f       	sbci	r21, 0xFF	; 255
    410c:	6f 4f       	sbci	r22, 0xFF	; 255
    410e:	7f 4f       	sbci	r23, 0xFF	; 255
    4110:	41 a3       	std	Z+33, r20	; 0x21
    4112:	52 a3       	std	Z+34, r21	; 0x22
    4114:	63 a3       	std	Z+35, r22	; 0x23
    4116:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    4118:	b3 cf       	rjmp	.-154    	; 0x4080 <xTaskGenericNotify+0x5c>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    411a:	1a 96       	adiw	r26, 0x0a	; 10
    411c:	ed 91       	ld	r30, X+
    411e:	fc 91       	ld	r31, X
    4120:	1b 97       	sbiw	r26, 0x0b	; 11
    4122:	14 96       	adiw	r26, 0x04	; 4
    4124:	8d 91       	ld	r24, X+
    4126:	9c 91       	ld	r25, X
    4128:	15 97       	sbiw	r26, 0x05	; 5
    412a:	16 96       	adiw	r26, 0x06	; 6
    412c:	2d 91       	ld	r18, X+
    412e:	3c 91       	ld	r19, X
    4130:	17 97       	sbiw	r26, 0x07	; 7
    4132:	ec 01       	movw	r28, r24
    4134:	3d 83       	std	Y+5, r19	; 0x05
    4136:	2c 83       	std	Y+4, r18	; 0x04
    4138:	16 96       	adiw	r26, 0x06	; 6
    413a:	cd 91       	ld	r28, X+
    413c:	dc 91       	ld	r29, X
    413e:	17 97       	sbiw	r26, 0x07	; 7
    4140:	9b 83       	std	Y+3, r25	; 0x03
    4142:	8a 83       	std	Y+2, r24	; 0x02
    4144:	9d 01       	movw	r18, r26
    4146:	2e 5f       	subi	r18, 0xFE	; 254
    4148:	3f 4f       	sbci	r19, 0xFF	; 255
    414a:	81 81       	ldd	r24, Z+1	; 0x01
    414c:	92 81       	ldd	r25, Z+2	; 0x02
    414e:	82 17       	cp	r24, r18
    4150:	93 07       	cpc	r25, r19
    4152:	11 f4       	brne	.+4      	; 0x4158 <xTaskGenericNotify+0x134>
    4154:	d2 83       	std	Z+2, r29	; 0x02
    4156:	c1 83       	std	Z+1, r28	; 0x01
    4158:	1b 96       	adiw	r26, 0x0b	; 11
    415a:	1c 92       	st	X, r1
    415c:	1e 92       	st	-X, r1
    415e:	1a 97       	sbiw	r26, 0x0a	; 10
    4160:	80 81       	ld	r24, Z
    4162:	81 50       	subi	r24, 0x01	; 1
    4164:	80 83       	st	Z, r24
                prvAddTaskToReadyList( pxTCB );
    4166:	56 96       	adiw	r26, 0x16	; 22
    4168:	cc 91       	ld	r28, X
    416a:	56 97       	sbiw	r26, 0x16	; 22
    416c:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <uxTopReadyPriority>
    4170:	8c 17       	cp	r24, r28
    4172:	10 f4       	brcc	.+4      	; 0x4178 <xTaskGenericNotify+0x154>
    4174:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    4178:	49 e0       	ldi	r20, 0x09	; 9
    417a:	4c 9f       	mul	r20, r28
    417c:	e0 01       	movw	r28, r0
    417e:	11 24       	eor	r1, r1
    4180:	cc 54       	subi	r28, 0x4C	; 76
    4182:	d8 4f       	sbci	r29, 0xF8	; 248
    4184:	09 80       	ldd	r0, Y+1	; 0x01
    4186:	da 81       	ldd	r29, Y+2	; 0x02
    4188:	c0 2d       	mov	r28, r0
    418a:	15 96       	adiw	r26, 0x05	; 5
    418c:	dc 93       	st	X, r29
    418e:	ce 93       	st	-X, r28
    4190:	14 97       	sbiw	r26, 0x04	; 4
    4192:	8c 81       	ldd	r24, Y+4	; 0x04
    4194:	9d 81       	ldd	r25, Y+5	; 0x05
    4196:	17 96       	adiw	r26, 0x07	; 7
    4198:	9c 93       	st	X, r25
    419a:	8e 93       	st	-X, r24
    419c:	16 97       	sbiw	r26, 0x06	; 6
    419e:	8c 81       	ldd	r24, Y+4	; 0x04
    41a0:	9d 81       	ldd	r25, Y+5	; 0x05
    41a2:	fc 01       	movw	r30, r24
    41a4:	33 83       	std	Z+3, r19	; 0x03
    41a6:	22 83       	std	Z+2, r18	; 0x02
    41a8:	3d 83       	std	Y+5, r19	; 0x05
    41aa:	2c 83       	std	Y+4, r18	; 0x04
    41ac:	56 96       	adiw	r26, 0x16	; 22
    41ae:	9c 91       	ld	r25, X
    41b0:	56 97       	sbiw	r26, 0x16	; 22
    41b2:	94 9f       	mul	r25, r20
    41b4:	f0 01       	movw	r30, r0
    41b6:	11 24       	eor	r1, r1
    41b8:	ec 54       	subi	r30, 0x4C	; 76
    41ba:	f8 4f       	sbci	r31, 0xF8	; 248
    41bc:	1b 96       	adiw	r26, 0x0b	; 11
    41be:	fc 93       	st	X, r31
    41c0:	ee 93       	st	-X, r30
    41c2:	1a 97       	sbiw	r26, 0x0a	; 10
    41c4:	80 81       	ld	r24, Z
    41c6:	8f 5f       	subi	r24, 0xFF	; 255
    41c8:	80 83       	st	Z, r24
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
    41ca:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    41ce:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    41d2:	86 89       	ldd	r24, Z+22	; 0x16
    41d4:	89 17       	cp	r24, r25
    41d6:	08 f0       	brcs	.+2      	; 0x41da <xTaskGenericNotify+0x1b6>
    41d8:	56 cf       	rjmp	.-340    	; 0x4086 <xTaskGenericNotify+0x62>
    41da:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
    41de:	53 cf       	rjmp	.-346    	; 0x4086 <xTaskGenericNotify+0x62>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	52 cf       	rjmp	.-348    	; 0x4088 <xTaskGenericNotify+0x64>

000041e4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    41e4:	8f 92       	push	r8
    41e6:	9f 92       	push	r9
    41e8:	af 92       	push	r10
    41ea:	bf 92       	push	r11
    41ec:	cf 92       	push	r12
    41ee:	df 92       	push	r13
    41f0:	ef 92       	push	r14
    41f2:	ff 92       	push	r15
    41f4:	0f 93       	push	r16
    41f6:	cf 93       	push	r28
    41f8:	df 93       	push	r29
    41fa:	dc 01       	movw	r26, r24
    41fc:	70 e0       	ldi	r23, 0x00	; 0
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            if( pulPreviousNotificationValue != NULL )
    41fe:	e1 14       	cp	r14, r1
    4200:	f1 04       	cpc	r15, r1
    4202:	81 f0       	breq	.+32     	; 0x4224 <xTaskGenericNotifyFromISR+0x40>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    4204:	fb 01       	movw	r30, r22
    4206:	ee 0f       	add	r30, r30
    4208:	ff 1f       	adc	r31, r31
    420a:	ee 0f       	add	r30, r30
    420c:	ff 1f       	adc	r31, r31
    420e:	e8 0f       	add	r30, r24
    4210:	f9 1f       	adc	r31, r25
    4212:	81 a0       	ldd	r8, Z+33	; 0x21
    4214:	92 a0       	ldd	r9, Z+34	; 0x22
    4216:	a3 a0       	ldd	r10, Z+35	; 0x23
    4218:	b4 a0       	ldd	r11, Z+36	; 0x24
    421a:	e7 01       	movw	r28, r14
    421c:	88 82       	st	Y, r8
    421e:	99 82       	std	Y+1, r9	; 0x01
    4220:	aa 82       	std	Y+2, r10	; 0x02
    4222:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    4224:	fd 01       	movw	r30, r26
    4226:	e6 0f       	add	r30, r22
    4228:	f7 1f       	adc	r31, r23
    422a:	85 a1       	ldd	r24, Z+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    422c:	92 e0       	ldi	r25, 0x02	; 2
    422e:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    4230:	02 30       	cpi	r16, 0x02	; 2
    4232:	d1 f1       	breq	.+116    	; 0x42a8 <xTaskGenericNotifyFromISR+0xc4>
    4234:	90 f4       	brcc	.+36     	; 0x425a <xTaskGenericNotifyFromISR+0x76>
    4236:	01 30       	cpi	r16, 0x01	; 1
    4238:	19 f1       	breq	.+70     	; 0x4280 <xTaskGenericNotifyFromISR+0x9c>

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    423a:	81 30       	cpi	r24, 0x01	; 1
    423c:	09 f4       	brne	.+2      	; 0x4240 <xTaskGenericNotifyFromISR+0x5c>
    423e:	48 c0       	rjmp	.+144    	; 0x42d0 <xTaskGenericNotifyFromISR+0xec>
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    4240:	81 e0       	ldi	r24, 0x01	; 1
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    }
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	0f 91       	pop	r16
    4248:	ff 90       	pop	r15
    424a:	ef 90       	pop	r14
    424c:	df 90       	pop	r13
    424e:	cf 90       	pop	r12
    4250:	bf 90       	pop	r11
    4252:	af 90       	pop	r10
    4254:	9f 90       	pop	r9
    4256:	8f 90       	pop	r8
    4258:	08 95       	ret
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    425a:	03 30       	cpi	r16, 0x03	; 3
    425c:	29 f0       	breq	.+10     	; 0x4268 <xTaskGenericNotifyFromISR+0x84>
    425e:	04 30       	cpi	r16, 0x04	; 4
    4260:	61 f7       	brne	.-40     	; 0x423a <xTaskGenericNotifyFromISR+0x56>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4262:	82 30       	cpi	r24, 0x02	; 2
    4264:	09 f4       	brne	.+2      	; 0x4268 <xTaskGenericNotifyFromISR+0x84>
    4266:	c5 c0       	rjmp	.+394    	; 0x43f2 <xTaskGenericNotifyFromISR+0x20e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    4268:	66 0f       	add	r22, r22
    426a:	77 1f       	adc	r23, r23
    426c:	66 0f       	add	r22, r22
    426e:	77 1f       	adc	r23, r23
    4270:	fd 01       	movw	r30, r26
    4272:	e6 0f       	add	r30, r22
    4274:	f7 1f       	adc	r31, r23
    4276:	21 a3       	std	Z+33, r18	; 0x21
    4278:	32 a3       	std	Z+34, r19	; 0x22
    427a:	43 a3       	std	Z+35, r20	; 0x23
    427c:	54 a3       	std	Z+36, r21	; 0x24
    427e:	dd cf       	rjmp	.-70     	; 0x423a <xTaskGenericNotifyFromISR+0x56>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    4280:	66 0f       	add	r22, r22
    4282:	77 1f       	adc	r23, r23
    4284:	66 0f       	add	r22, r22
    4286:	77 1f       	adc	r23, r23
    4288:	fd 01       	movw	r30, r26
    428a:	e6 0f       	add	r30, r22
    428c:	f7 1f       	adc	r31, r23
    428e:	81 a0       	ldd	r8, Z+33	; 0x21
    4290:	92 a0       	ldd	r9, Z+34	; 0x22
    4292:	a3 a0       	ldd	r10, Z+35	; 0x23
    4294:	b4 a0       	ldd	r11, Z+36	; 0x24
    4296:	82 2a       	or	r8, r18
    4298:	93 2a       	or	r9, r19
    429a:	a4 2a       	or	r10, r20
    429c:	b5 2a       	or	r11, r21
    429e:	81 a2       	std	Z+33, r8	; 0x21
    42a0:	92 a2       	std	Z+34, r9	; 0x22
    42a2:	a3 a2       	std	Z+35, r10	; 0x23
    42a4:	b4 a2       	std	Z+36, r11	; 0x24
                    break;
    42a6:	c9 cf       	rjmp	.-110    	; 0x423a <xTaskGenericNotifyFromISR+0x56>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    42a8:	66 0f       	add	r22, r22
    42aa:	77 1f       	adc	r23, r23
    42ac:	66 0f       	add	r22, r22
    42ae:	77 1f       	adc	r23, r23
    42b0:	fd 01       	movw	r30, r26
    42b2:	e6 0f       	add	r30, r22
    42b4:	f7 1f       	adc	r31, r23
    42b6:	41 a1       	ldd	r20, Z+33	; 0x21
    42b8:	52 a1       	ldd	r21, Z+34	; 0x22
    42ba:	63 a1       	ldd	r22, Z+35	; 0x23
    42bc:	74 a1       	ldd	r23, Z+36	; 0x24
    42be:	4f 5f       	subi	r20, 0xFF	; 255
    42c0:	5f 4f       	sbci	r21, 0xFF	; 255
    42c2:	6f 4f       	sbci	r22, 0xFF	; 255
    42c4:	7f 4f       	sbci	r23, 0xFF	; 255
    42c6:	41 a3       	std	Z+33, r20	; 0x21
    42c8:	52 a3       	std	Z+34, r21	; 0x22
    42ca:	63 a3       	std	Z+35, r22	; 0x23
    42cc:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    42ce:	b5 cf       	rjmp	.-150    	; 0x423a <xTaskGenericNotifyFromISR+0x56>
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    42d0:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    42d4:	81 11       	cpse	r24, r1
    42d6:	6b c0       	rjmp	.+214    	; 0x43ae <xTaskGenericNotifyFromISR+0x1ca>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    42d8:	1a 96       	adiw	r26, 0x0a	; 10
    42da:	ed 91       	ld	r30, X+
    42dc:	fc 91       	ld	r31, X
    42de:	1b 97       	sbiw	r26, 0x0b	; 11
    42e0:	14 96       	adiw	r26, 0x04	; 4
    42e2:	8d 91       	ld	r24, X+
    42e4:	9c 91       	ld	r25, X
    42e6:	15 97       	sbiw	r26, 0x05	; 5
    42e8:	16 96       	adiw	r26, 0x06	; 6
    42ea:	2d 91       	ld	r18, X+
    42ec:	3c 91       	ld	r19, X
    42ee:	17 97       	sbiw	r26, 0x07	; 7
    42f0:	ec 01       	movw	r28, r24
    42f2:	3d 83       	std	Y+5, r19	; 0x05
    42f4:	2c 83       	std	Y+4, r18	; 0x04
    42f6:	16 96       	adiw	r26, 0x06	; 6
    42f8:	cd 91       	ld	r28, X+
    42fa:	dc 91       	ld	r29, X
    42fc:	17 97       	sbiw	r26, 0x07	; 7
    42fe:	9b 83       	std	Y+3, r25	; 0x03
    4300:	8a 83       	std	Y+2, r24	; 0x02
    4302:	9d 01       	movw	r18, r26
    4304:	2e 5f       	subi	r18, 0xFE	; 254
    4306:	3f 4f       	sbci	r19, 0xFF	; 255
    4308:	81 81       	ldd	r24, Z+1	; 0x01
    430a:	92 81       	ldd	r25, Z+2	; 0x02
    430c:	82 17       	cp	r24, r18
    430e:	93 07       	cpc	r25, r19
    4310:	11 f4       	brne	.+4      	; 0x4316 <xTaskGenericNotifyFromISR+0x132>
    4312:	d2 83       	std	Z+2, r29	; 0x02
    4314:	c1 83       	std	Z+1, r28	; 0x01
    4316:	1b 96       	adiw	r26, 0x0b	; 11
    4318:	1c 92       	st	X, r1
    431a:	1e 92       	st	-X, r1
    431c:	1a 97       	sbiw	r26, 0x0a	; 10
    431e:	80 81       	ld	r24, Z
    4320:	81 50       	subi	r24, 0x01	; 1
    4322:	80 83       	st	Z, r24
                    prvAddTaskToReadyList( pxTCB );
    4324:	56 96       	adiw	r26, 0x16	; 22
    4326:	cc 91       	ld	r28, X
    4328:	56 97       	sbiw	r26, 0x16	; 22
    432a:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <uxTopReadyPriority>
    432e:	8c 17       	cp	r24, r28
    4330:	10 f4       	brcc	.+4      	; 0x4336 <xTaskGenericNotifyFromISR+0x152>
    4332:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    4336:	89 e0       	ldi	r24, 0x09	; 9
    4338:	8c 9f       	mul	r24, r28
    433a:	e0 01       	movw	r28, r0
    433c:	11 24       	eor	r1, r1
    433e:	cc 54       	subi	r28, 0x4C	; 76
    4340:	d8 4f       	sbci	r29, 0xF8	; 248
    4342:	09 80       	ldd	r0, Y+1	; 0x01
    4344:	da 81       	ldd	r29, Y+2	; 0x02
    4346:	c0 2d       	mov	r28, r0
    4348:	15 96       	adiw	r26, 0x05	; 5
    434a:	dc 93       	st	X, r29
    434c:	ce 93       	st	-X, r28
    434e:	14 97       	sbiw	r26, 0x04	; 4
    4350:	4c 81       	ldd	r20, Y+4	; 0x04
    4352:	5d 81       	ldd	r21, Y+5	; 0x05
    4354:	17 96       	adiw	r26, 0x07	; 7
    4356:	5c 93       	st	X, r21
    4358:	4e 93       	st	-X, r20
    435a:	16 97       	sbiw	r26, 0x06	; 6
    435c:	ec 81       	ldd	r30, Y+4	; 0x04
    435e:	fd 81       	ldd	r31, Y+5	; 0x05
    4360:	33 83       	std	Z+3, r19	; 0x03
    4362:	22 83       	std	Z+2, r18	; 0x02
    4364:	3d 83       	std	Y+5, r19	; 0x05
    4366:	2c 83       	std	Y+4, r18	; 0x04
    4368:	56 96       	adiw	r26, 0x16	; 22
    436a:	ec 91       	ld	r30, X
    436c:	56 97       	sbiw	r26, 0x16	; 22
    436e:	e8 9f       	mul	r30, r24
    4370:	f0 01       	movw	r30, r0
    4372:	11 24       	eor	r1, r1
    4374:	ec 54       	subi	r30, 0x4C	; 76
    4376:	f8 4f       	sbci	r31, 0xF8	; 248
    4378:	1b 96       	adiw	r26, 0x0b	; 11
    437a:	fc 93       	st	X, r31
    437c:	ee 93       	st	-X, r30
    437e:	1a 97       	sbiw	r26, 0x0a	; 10
    4380:	80 81       	ld	r24, Z
    4382:	8f 5f       	subi	r24, 0xFF	; 255
    4384:	80 83       	st	Z, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4386:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    438a:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    438e:	56 96       	adiw	r26, 0x16	; 22
    4390:	9c 91       	ld	r25, X
    4392:	86 89       	ldd	r24, Z+22	; 0x16
    4394:	89 17       	cp	r24, r25
    4396:	08 f0       	brcs	.+2      	; 0x439a <xTaskGenericNotifyFromISR+0x1b6>
    4398:	53 cf       	rjmp	.-346    	; 0x4240 <xTaskGenericNotifyFromISR+0x5c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    439a:	c1 14       	cp	r12, r1
    439c:	d1 04       	cpc	r13, r1
    439e:	19 f0       	breq	.+6      	; 0x43a6 <xTaskGenericNotifyFromISR+0x1c2>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    43a0:	81 e0       	ldi	r24, 0x01	; 1
    43a2:	f6 01       	movw	r30, r12
    43a4:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
    43ac:	4a cf       	rjmp	.-364    	; 0x4242 <xTaskGenericNotifyFromISR+0x5e>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    43ae:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <xPendingReadyList+0x1>
    43b2:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <xPendingReadyList+0x2>
    43b6:	1f 96       	adiw	r26, 0x0f	; 15
    43b8:	fc 93       	st	X, r31
    43ba:	ee 93       	st	-X, r30
    43bc:	1e 97       	sbiw	r26, 0x0e	; 14
    43be:	84 81       	ldd	r24, Z+4	; 0x04
    43c0:	95 81       	ldd	r25, Z+5	; 0x05
    43c2:	51 96       	adiw	r26, 0x11	; 17
    43c4:	9c 93       	st	X, r25
    43c6:	8e 93       	st	-X, r24
    43c8:	50 97       	sbiw	r26, 0x10	; 16
    43ca:	c4 81       	ldd	r28, Z+4	; 0x04
    43cc:	d5 81       	ldd	r29, Z+5	; 0x05
    43ce:	cd 01       	movw	r24, r26
    43d0:	0c 96       	adiw	r24, 0x0c	; 12
    43d2:	9b 83       	std	Y+3, r25	; 0x03
    43d4:	8a 83       	std	Y+2, r24	; 0x02
    43d6:	95 83       	std	Z+5, r25	; 0x05
    43d8:	84 83       	std	Z+4, r24	; 0x04
    43da:	85 e9       	ldi	r24, 0x95	; 149
    43dc:	97 e0       	ldi	r25, 0x07	; 7
    43de:	55 96       	adiw	r26, 0x15	; 21
    43e0:	9c 93       	st	X, r25
    43e2:	8e 93       	st	-X, r24
    43e4:	54 97       	sbiw	r26, 0x14	; 20
    43e6:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <xPendingReadyList>
    43ea:	8f 5f       	subi	r24, 0xFF	; 255
    43ec:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <xPendingReadyList>
    43f0:	ca cf       	rjmp	.-108    	; 0x4386 <xTaskGenericNotifyFromISR+0x1a2>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    43f2:	80 e0       	ldi	r24, 0x00	; 0
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    43f4:	26 cf       	rjmp	.-436    	; 0x4242 <xTaskGenericNotifyFromISR+0x5e>

000043f6 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
    43f6:	0f 93       	push	r16
    43f8:	1f 93       	push	r17
    43fa:	cf 93       	push	r28
    43fc:	df 93       	push	r29
    43fe:	fc 01       	movw	r30, r24
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    4400:	a6 2f       	mov	r26, r22
    4402:	b0 e0       	ldi	r27, 0x00	; 0
    4404:	ec 01       	movw	r28, r24
    4406:	ca 0f       	add	r28, r26
    4408:	db 1f       	adc	r29, r27
    440a:	8d a1       	ldd	r24, Y+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    440c:	92 e0       	ldi	r25, 0x02	; 2
    440e:	9d a3       	std	Y+37, r25	; 0x25

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    4410:	aa 0f       	add	r26, r26
    4412:	bb 1f       	adc	r27, r27
    4414:	aa 0f       	add	r26, r26
    4416:	bb 1f       	adc	r27, r27
    4418:	ae 0f       	add	r26, r30
    441a:	bf 1f       	adc	r27, r31
    441c:	91 96       	adiw	r26, 0x21	; 33
    441e:	0d 91       	ld	r16, X+
    4420:	1d 91       	ld	r17, X+
    4422:	2d 91       	ld	r18, X+
    4424:	3c 91       	ld	r19, X
    4426:	94 97       	sbiw	r26, 0x24	; 36
    4428:	0f 5f       	subi	r16, 0xFF	; 255
    442a:	1f 4f       	sbci	r17, 0xFF	; 255
    442c:	2f 4f       	sbci	r18, 0xFF	; 255
    442e:	3f 4f       	sbci	r19, 0xFF	; 255
    4430:	91 96       	adiw	r26, 0x21	; 33
    4432:	0d 93       	st	X+, r16
    4434:	1d 93       	st	X+, r17
    4436:	2d 93       	st	X+, r18
    4438:	3c 93       	st	X, r19
    443a:	94 97       	sbiw	r26, 0x24	; 36

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    443c:	81 30       	cpi	r24, 0x01	; 1
    443e:	09 f0       	breq	.+2      	; 0x4442 <vTaskGenericNotifyGiveFromISR+0x4c>
    4440:	5e c0       	rjmp	.+188    	; 0x44fe <vTaskGenericNotifyGiveFromISR+0x108>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    4442:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    4446:	81 11       	cpse	r24, r1
    4448:	5f c0       	rjmp	.+190    	; 0x4508 <vTaskGenericNotifyGiveFromISR+0x112>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    444a:	a2 85       	ldd	r26, Z+10	; 0x0a
    444c:	b3 85       	ldd	r27, Z+11	; 0x0b
    444e:	84 81       	ldd	r24, Z+4	; 0x04
    4450:	95 81       	ldd	r25, Z+5	; 0x05
    4452:	26 81       	ldd	r18, Z+6	; 0x06
    4454:	37 81       	ldd	r19, Z+7	; 0x07
    4456:	ec 01       	movw	r28, r24
    4458:	3d 83       	std	Y+5, r19	; 0x05
    445a:	2c 83       	std	Y+4, r18	; 0x04
    445c:	c6 81       	ldd	r28, Z+6	; 0x06
    445e:	d7 81       	ldd	r29, Z+7	; 0x07
    4460:	9b 83       	std	Y+3, r25	; 0x03
    4462:	8a 83       	std	Y+2, r24	; 0x02
    4464:	cf 01       	movw	r24, r30
    4466:	02 96       	adiw	r24, 0x02	; 2
    4468:	11 96       	adiw	r26, 0x01	; 1
    446a:	2d 91       	ld	r18, X+
    446c:	3c 91       	ld	r19, X
    446e:	12 97       	sbiw	r26, 0x02	; 2
    4470:	28 17       	cp	r18, r24
    4472:	39 07       	cpc	r19, r25
    4474:	21 f4       	brne	.+8      	; 0x447e <vTaskGenericNotifyGiveFromISR+0x88>
    4476:	12 96       	adiw	r26, 0x02	; 2
    4478:	dc 93       	st	X, r29
    447a:	ce 93       	st	-X, r28
    447c:	11 97       	sbiw	r26, 0x01	; 1
    447e:	13 86       	std	Z+11, r1	; 0x0b
    4480:	12 86       	std	Z+10, r1	; 0x0a
    4482:	2c 91       	ld	r18, X
    4484:	21 50       	subi	r18, 0x01	; 1
    4486:	2c 93       	st	X, r18
                    prvAddTaskToReadyList( pxTCB );
    4488:	c6 89       	ldd	r28, Z+22	; 0x16
    448a:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    448e:	2c 17       	cp	r18, r28
    4490:	10 f4       	brcc	.+4      	; 0x4496 <vTaskGenericNotifyGiveFromISR+0xa0>
    4492:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    4496:	29 e0       	ldi	r18, 0x09	; 9
    4498:	2c 9f       	mul	r18, r28
    449a:	e0 01       	movw	r28, r0
    449c:	11 24       	eor	r1, r1
    449e:	cc 54       	subi	r28, 0x4C	; 76
    44a0:	d8 4f       	sbci	r29, 0xF8	; 248
    44a2:	09 80       	ldd	r0, Y+1	; 0x01
    44a4:	da 81       	ldd	r29, Y+2	; 0x02
    44a6:	c0 2d       	mov	r28, r0
    44a8:	d5 83       	std	Z+5, r29	; 0x05
    44aa:	c4 83       	std	Z+4, r28	; 0x04
    44ac:	6c 81       	ldd	r22, Y+4	; 0x04
    44ae:	7d 81       	ldd	r23, Y+5	; 0x05
    44b0:	77 83       	std	Z+7, r23	; 0x07
    44b2:	66 83       	std	Z+6, r22	; 0x06
    44b4:	ac 81       	ldd	r26, Y+4	; 0x04
    44b6:	bd 81       	ldd	r27, Y+5	; 0x05
    44b8:	13 96       	adiw	r26, 0x03	; 3
    44ba:	9c 93       	st	X, r25
    44bc:	8e 93       	st	-X, r24
    44be:	12 97       	sbiw	r26, 0x02	; 2
    44c0:	9d 83       	std	Y+5, r25	; 0x05
    44c2:	8c 83       	std	Y+4, r24	; 0x04
    44c4:	a6 89       	ldd	r26, Z+22	; 0x16
    44c6:	a2 9f       	mul	r26, r18
    44c8:	d0 01       	movw	r26, r0
    44ca:	11 24       	eor	r1, r1
    44cc:	ac 54       	subi	r26, 0x4C	; 76
    44ce:	b8 4f       	sbci	r27, 0xF8	; 248
    44d0:	b3 87       	std	Z+11, r27	; 0x0b
    44d2:	a2 87       	std	Z+10, r26	; 0x0a
    44d4:	8c 91       	ld	r24, X
    44d6:	8f 5f       	subi	r24, 0xFF	; 255
    44d8:	8c 93       	st	X, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    44da:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    44de:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    44e2:	96 89       	ldd	r25, Z+22	; 0x16
    44e4:	56 96       	adiw	r26, 0x16	; 22
    44e6:	8c 91       	ld	r24, X
    44e8:	89 17       	cp	r24, r25
    44ea:	48 f4       	brcc	.+18     	; 0x44fe <vTaskGenericNotifyGiveFromISR+0x108>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    44ec:	41 15       	cp	r20, r1
    44ee:	51 05       	cpc	r21, r1
    44f0:	19 f0       	breq	.+6      	; 0x44f8 <vTaskGenericNotifyGiveFromISR+0x102>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	fa 01       	movw	r30, r20
    44f6:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
    44fe:	df 91       	pop	r29
    4500:	cf 91       	pop	r28
    4502:	1f 91       	pop	r17
    4504:	0f 91       	pop	r16
    4506:	08 95       	ret
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4508:	a0 91 96 07 	lds	r26, 0x0796	; 0x800796 <xPendingReadyList+0x1>
    450c:	b0 91 97 07 	lds	r27, 0x0797	; 0x800797 <xPendingReadyList+0x2>
    4510:	b7 87       	std	Z+15, r27	; 0x0f
    4512:	a6 87       	std	Z+14, r26	; 0x0e
    4514:	14 96       	adiw	r26, 0x04	; 4
    4516:	8d 91       	ld	r24, X+
    4518:	9c 91       	ld	r25, X
    451a:	15 97       	sbiw	r26, 0x05	; 5
    451c:	91 8b       	std	Z+17, r25	; 0x11
    451e:	80 8b       	std	Z+16, r24	; 0x10
    4520:	14 96       	adiw	r26, 0x04	; 4
    4522:	cd 91       	ld	r28, X+
    4524:	dc 91       	ld	r29, X
    4526:	15 97       	sbiw	r26, 0x05	; 5
    4528:	cf 01       	movw	r24, r30
    452a:	0c 96       	adiw	r24, 0x0c	; 12
    452c:	9b 83       	std	Y+3, r25	; 0x03
    452e:	8a 83       	std	Y+2, r24	; 0x02
    4530:	15 96       	adiw	r26, 0x05	; 5
    4532:	9c 93       	st	X, r25
    4534:	8e 93       	st	-X, r24
    4536:	14 97       	sbiw	r26, 0x04	; 4
    4538:	85 e9       	ldi	r24, 0x95	; 149
    453a:	97 e0       	ldi	r25, 0x07	; 7
    453c:	95 8b       	std	Z+21, r25	; 0x15
    453e:	84 8b       	std	Z+20, r24	; 0x14
    4540:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <xPendingReadyList>
    4544:	8f 5f       	subi	r24, 0xFF	; 255
    4546:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <xPendingReadyList>
    454a:	c7 cf       	rjmp	.-114    	; 0x44da <vTaskGenericNotifyGiveFromISR+0xe4>

0000454c <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    454c:	00 97       	sbiw	r24, 0x00	; 0
    454e:	21 f4       	brne	.+8      	; 0x4558 <xTaskGenericNotifyStateClear+0xc>
    4550:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    4554:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	f8 94       	cli
    455c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    455e:	fc 01       	movw	r30, r24
    4560:	e6 0f       	add	r30, r22
    4562:	f1 1d       	adc	r31, r1
    4564:	85 a1       	ldd	r24, Z+37	; 0x25
    4566:	82 30       	cpi	r24, 0x02	; 2
    4568:	29 f4       	brne	.+10     	; 0x4574 <xTaskGenericNotifyStateClear+0x28>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    456a:	15 a2       	std	Z+37, r1	; 0x25
                xReturn = pdPASS;
    456c:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        taskEXIT_CRITICAL();
    456e:	0f 90       	pop	r0
    4570:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyStateClear( xReturn );

        return xReturn;
    }
    4572:	08 95       	ret
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
                xReturn = pdPASS;
            }
            else
            {
                xReturn = pdFAIL;
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	fb cf       	rjmp	.-10     	; 0x456e <xTaskGenericNotifyStateClear+0x22>

00004578 <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
    4578:	cf 92       	push	r12
    457a:	df 92       	push	r13
    457c:	ef 92       	push	r14
    457e:	ff 92       	push	r15

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    4580:	00 97       	sbiw	r24, 0x00	; 0
    4582:	21 f4       	brne	.+8      	; 0x458c <ulTaskGenericNotifyValueClear+0x14>
    4584:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    4588:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    458c:	0f b6       	in	r0, 0x3f	; 63
    458e:	f8 94       	cli
    4590:	0f 92       	push	r0
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
    4592:	74 e0       	ldi	r23, 0x04	; 4
    4594:	67 9f       	mul	r22, r23
    4596:	f0 01       	movw	r30, r0
    4598:	11 24       	eor	r1, r1
    459a:	e8 0f       	add	r30, r24
    459c:	f9 1f       	adc	r31, r25
    459e:	61 a1       	ldd	r22, Z+33	; 0x21
    45a0:	72 a1       	ldd	r23, Z+34	; 0x22
    45a2:	83 a1       	ldd	r24, Z+35	; 0x23
    45a4:	94 a1       	ldd	r25, Z+36	; 0x24
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
    45a6:	c1 a0       	ldd	r12, Z+33	; 0x21
    45a8:	d2 a0       	ldd	r13, Z+34	; 0x22
    45aa:	e3 a0       	ldd	r14, Z+35	; 0x23
    45ac:	f4 a0       	ldd	r15, Z+36	; 0x24
    45ae:	20 95       	com	r18
    45b0:	30 95       	com	r19
    45b2:	40 95       	com	r20
    45b4:	50 95       	com	r21
    45b6:	c2 22       	and	r12, r18
    45b8:	d3 22       	and	r13, r19
    45ba:	e4 22       	and	r14, r20
    45bc:	f5 22       	and	r15, r21
    45be:	c1 a2       	std	Z+33, r12	; 0x21
    45c0:	d2 a2       	std	Z+34, r13	; 0x22
    45c2:	e3 a2       	std	Z+35, r14	; 0x23
    45c4:	f4 a2       	std	Z+36, r15	; 0x24
        }
        taskEXIT_CRITICAL();
    45c6:	0f 90       	pop	r0
    45c8:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyValueClear( ulReturn );

        return ulReturn;
    }
    45ca:	ff 90       	pop	r15
    45cc:	ef 90       	pop	r14
    45ce:	df 90       	pop	r13
    45d0:	cf 90       	pop	r12
    45d2:	08 95       	ret

000045d4 <vTaskResetState>:
    BaseType_t xCoreID;

    /* Task control block. */
    #if ( configNUMBER_OF_CORES == 1 )
    {
        pxCurrentTCB = NULL;
    45d4:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <pxCurrentTCB+0x1>
    45d8:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <pxCurrentTCB>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
    45dc:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <uxDeletedTasksWaitingCleanUp>
        FreeRTOS_errno = 0;
    }
    #endif /* #if ( configUSE_POSIX_ERRNO == 1 ) */

    /* Other file private variables. */
    uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
    45e0:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <uxCurrentNumberOfTasks>
    xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    45e4:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <xTickCount+0x1>
    45e8:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <xTickCount>
    uxTopReadyPriority = tskIDLE_PRIORITY;
    45ec:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <uxTopReadyPriority>
    xSchedulerRunning = pdFALSE;
    45f0:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <xSchedulerRunning>
    xPendedTicks = ( TickType_t ) 0U;
    45f4:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <xPendedTicks+0x1>
    45f8:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <xPendedTicks>

    for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
    {
        xYieldPendings[ xCoreID ] = pdFALSE;
    45fc:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <xYieldPendings>
    }

    xNumOfOverflows = ( BaseType_t ) 0;
    4600:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <xNumOfOverflows>
    uxTaskNumber = ( UBaseType_t ) 0U;
    4604:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <uxTaskNumber>
    xNextTaskUnblockTime = ( TickType_t ) 0U;
    4608:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <xNextTaskUnblockTime+0x1>
    460c:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <xNextTaskUnblockTime>

    uxSchedulerSuspended = ( UBaseType_t ) 0U;
    4610:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <uxSchedulerSuspended>
            ulTaskSwitchedInTime[ xCoreID ] = 0U;
            ulTotalRunTime[ xCoreID ] = 0U;
        }
    }
    #endif /* #if ( configGENERATE_RUN_TIME_STATS == 1 ) */
}
    4614:	08 95       	ret

00004616 <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    4616:	0f b6       	in	r0, 0x3f	; 63
    4618:	f8 94       	cli
    461a:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    461c:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    4620:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    4624:	89 2b       	or	r24, r25
    4626:	e9 f4       	brne	.+58     	; 0x4662 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    4628:	8d ee       	ldi	r24, 0xED	; 237
    462a:	97 e0       	ldi	r25, 0x07	; 7
    462c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    4630:	84 ee       	ldi	r24, 0xE4	; 228
    4632:	97 e0       	ldi	r25, 0x07	; 7
    4634:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    4638:	8d ee       	ldi	r24, 0xED	; 237
    463a:	97 e0       	ldi	r25, 0x07	; 7
    463c:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <pxCurrentTimerList+0x1>
    4640:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    4644:	84 ee       	ldi	r24, 0xE4	; 228
    4646:	97 e0       	ldi	r25, 0x07	; 7
    4648:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <pxOverflowTimerList+0x1>
    464c:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <pxOverflowTimerList>

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
    4650:	40 e0       	ldi	r20, 0x00	; 0
    4652:	65 e0       	ldi	r22, 0x05	; 5
    4654:	8a e0       	ldi	r24, 0x0A	; 10
    4656:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <xQueueGenericCreate>
    465a:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <xTimerQueue+0x1>
    465e:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    4662:	0f 90       	pop	r0
    4664:	0f be       	out	0x3f, r0	; 63
    }
    4666:	08 95       	ret

00004668 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    4668:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    466a:	73 83       	std	Z+3, r23	; 0x03
    466c:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    466e:	91 87       	std	Z+9, r25	; 0x09
    4670:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    4672:	46 17       	cp	r20, r22
    4674:	57 07       	cpc	r21, r23
    4676:	90 f0       	brcs	.+36     	; 0x469c <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    4678:	42 1b       	sub	r20, r18
    467a:	53 0b       	sbc	r21, r19
    467c:	84 85       	ldd	r24, Z+12	; 0x0c
    467e:	95 85       	ldd	r25, Z+13	; 0x0d
    4680:	48 17       	cp	r20, r24
    4682:	59 07       	cpc	r21, r25
    4684:	c8 f4       	brcc	.+50     	; 0x46b8 <prvInsertTimerInActiveList+0x50>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4686:	bf 01       	movw	r22, r30
    4688:	6e 5f       	subi	r22, 0xFE	; 254
    468a:	7f 4f       	sbci	r23, 0xFF	; 255
    468c:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxOverflowTimerList>
    4690:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxOverflowTimerList+0x1>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4694:	0e 94 95 0c 	call	0x192a	; 0x192a <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    4698:	80 e0       	ldi	r24, 0x00	; 0
    469a:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    469c:	42 17       	cp	r20, r18
    469e:	53 07       	cpc	r21, r19
    46a0:	18 f4       	brcc	.+6      	; 0x46a8 <prvInsertTimerInActiveList+0x40>
    46a2:	62 17       	cp	r22, r18
    46a4:	73 07       	cpc	r23, r19
    46a6:	40 f4       	brcc	.+16     	; 0x46b8 <prvInsertTimerInActiveList+0x50>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    46a8:	bf 01       	movw	r22, r30
    46aa:	6e 5f       	subi	r22, 0xFE	; 254
    46ac:	7f 4f       	sbci	r23, 0xFF	; 255
    46ae:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    46b2:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    46b6:	ee cf       	rjmp	.-36     	; 0x4694 <prvInsertTimerInActiveList+0x2c>
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    46b8:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    46ba:	08 95       	ret

000046bc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    46bc:	ef 92       	push	r14
    46be:	ff 92       	push	r15
    46c0:	0f 93       	push	r16
    46c2:	1f 93       	push	r17
    46c4:	cf 93       	push	r28
    46c6:	df 93       	push	r29
    46c8:	ec 01       	movw	r28, r24
    46ca:	8b 01       	movw	r16, r22
    46cc:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    46ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    46d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    46d2:	60 0f       	add	r22, r16
    46d4:	71 1f       	adc	r23, r17
    46d6:	98 01       	movw	r18, r16
    46d8:	a7 01       	movw	r20, r14
    46da:	ce 01       	movw	r24, r28
    46dc:	0e 94 34 23 	call	0x4668	; 0x4668 <prvInsertTimerInActiveList>
    46e0:	81 11       	cpse	r24, r1
    46e2:	07 c0       	rjmp	.+14     	; 0x46f2 <prvReloadTimer+0x36>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    46e4:	df 91       	pop	r29
    46e6:	cf 91       	pop	r28
    46e8:	1f 91       	pop	r17
    46ea:	0f 91       	pop	r16
    46ec:	ff 90       	pop	r15
    46ee:	ef 90       	pop	r14
    46f0:	08 95       	ret
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    46f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    46f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    46f6:	08 0f       	add	r16, r24
    46f8:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    46fa:	e8 89       	ldd	r30, Y+16	; 0x10
    46fc:	f9 89       	ldd	r31, Y+17	; 0x11
    46fe:	ce 01       	movw	r24, r28
    4700:	09 95       	icall
    4702:	e5 cf       	rjmp	.-54     	; 0x46ce <prvReloadTimer+0x12>

00004704 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    4704:	ef 92       	push	r14
    4706:	ff 92       	push	r15
    4708:	0f 93       	push	r16
    470a:	1f 93       	push	r17
    470c:	cf 93       	push	r28
    470e:	df 93       	push	r29
    4710:	8c 01       	movw	r16, r24
    4712:	7b 01       	movw	r14, r22
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4714:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    4718:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    471c:	05 80       	ldd	r0, Z+5	; 0x05
    471e:	f6 81       	ldd	r31, Z+6	; 0x06
    4720:	e0 2d       	mov	r30, r0
    4722:	c6 81       	ldd	r28, Z+6	; 0x06
    4724:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4726:	ce 01       	movw	r24, r28
    4728:	02 96       	adiw	r24, 0x02	; 2
    472a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    472e:	8a 89       	ldd	r24, Y+18	; 0x12
    4730:	82 ff       	sbrs	r24, 2
    4732:	0f c0       	rjmp	.+30     	; 0x4752 <prvProcessExpiredTimer+0x4e>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    4734:	a7 01       	movw	r20, r14
    4736:	b8 01       	movw	r22, r16
    4738:	ce 01       	movw	r24, r28
    473a:	0e 94 5e 23 	call	0x46bc	; 0x46bc <prvReloadTimer>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    473e:	e8 89       	ldd	r30, Y+16	; 0x10
    4740:	f9 89       	ldd	r31, Y+17	; 0x11
    4742:	ce 01       	movw	r24, r28
    }
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	1f 91       	pop	r17
    474a:	0f 91       	pop	r16
    474c:	ff 90       	pop	r15
    474e:	ef 90       	pop	r14
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4750:	09 94       	ijmp
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    4752:	8e 7f       	andi	r24, 0xFE	; 254
    4754:	8a 8b       	std	Y+18, r24	; 0x12
    4756:	f3 cf       	rjmp	.-26     	; 0x473e <prvProcessExpiredTimer+0x3a>

00004758 <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4758:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    475c:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    4760:	80 81       	ld	r24, Z
    4762:	81 11       	cpse	r24, r1
    4764:	0d c0       	rjmp	.+26     	; 0x4780 <prvSwitchTimerLists+0x28>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    4766:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxOverflowTimerList>
    476a:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxOverflowTimerList+0x1>
    476e:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <pxCurrentTimerList+0x1>
    4772:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    4776:	f0 93 e1 07 	sts	0x07E1, r31	; 0x8007e1 <pxOverflowTimerList+0x1>
    477a:	e0 93 e0 07 	sts	0x07E0, r30	; 0x8007e0 <pxOverflowTimerList>
    }
    477e:	08 95       	ret
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4780:	05 80       	ldd	r0, Z+5	; 0x05
    4782:	f6 81       	ldd	r31, Z+6	; 0x06
    4784:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    4786:	6f ef       	ldi	r22, 0xFF	; 255
    4788:	7f ef       	ldi	r23, 0xFF	; 255
    478a:	80 81       	ld	r24, Z
    478c:	91 81       	ldd	r25, Z+1	; 0x01
    478e:	0e 94 82 23 	call	0x4704	; 0x4704 <prvProcessExpiredTimer>
    4792:	e2 cf       	rjmp	.-60     	; 0x4758 <prvSwitchTimerLists>

00004794 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    4794:	cf 93       	push	r28
    4796:	df 93       	push	r29
    4798:	00 d0       	rcall	.+0      	; 0x479a <prvTimerTask+0x6>
    479a:	00 d0       	rcall	.+0      	; 0x479c <prvTimerTask+0x8>
    479c:	1f 92       	push	r1
    479e:	cd b7       	in	r28, 0x3d	; 61
    47a0:	de b7       	in	r29, 0x3e	; 62
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
    47a2:	85 e0       	ldi	r24, 0x05	; 5
    47a4:	b8 2e       	mov	r11, r24
    47a6:	ce 01       	movw	r24, r28
    47a8:	01 96       	adiw	r24, 0x01	; 1
    47aa:	7c 01       	movw	r14, r24
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    47ac:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    47b0:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    47b4:	a0 80       	ld	r10, Z
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    47b6:	10 e0       	ldi	r17, 0x00	; 0
    47b8:	00 e0       	ldi	r16, 0x00	; 0
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );

        if( *pxListWasEmpty == pdFALSE )
    47ba:	aa 20       	and	r10, r10
    47bc:	29 f0       	breq	.+10     	; 0x47c8 <prvTimerTask+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    47be:	05 80       	ldd	r0, Z+5	; 0x05
    47c0:	f6 81       	ldd	r31, Z+6	; 0x06
    47c2:	e0 2d       	mov	r30, r0
    47c4:	00 81       	ld	r16, Z
    47c6:	11 81       	ldd	r17, Z+1	; 0x01
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    47c8:	0e 94 10 1a 	call	0x3420	; 0x3420 <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
    47cc:	0e 94 16 1a 	call	0x342c	; 0x342c <xTaskGetTickCount>
    47d0:	6c 01       	movw	r12, r24

        if( xTimeNow < xLastTime )
    47d2:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <xLastTime.2269>
    47d6:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <xLastTime.2269+0x1>
    47da:	c8 16       	cp	r12, r24
    47dc:	d9 06       	cpc	r13, r25
    47de:	08 f0       	brcs	.+2      	; 0x47e2 <prvTimerTask+0x4e>
    47e0:	4f c0       	rjmp	.+158    	; 0x4880 <prvTimerTask+0xec>
        {
            prvSwitchTimerLists();
    47e2:	0e 94 ac 23 	call	0x4758	; 0x4758 <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    47e6:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <xLastTime.2269+0x1>
    47ea:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <xLastTime.2269>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    47ee:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
    47f2:	d7 01       	movw	r26, r14
    47f4:	eb 2d       	mov	r30, r11
    47f6:	1d 92       	st	X+, r1
    47f8:	ea 95       	dec	r30
    47fa:	e9 f7       	brne	.-6      	; 0x47f6 <prvTimerTask+0x62>
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    47fc:	50 e0       	ldi	r21, 0x00	; 0
    47fe:	40 e0       	ldi	r20, 0x00	; 0
    4800:	b7 01       	movw	r22, r14
    4802:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    4806:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    480a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <xQueueReceive>
    480e:	88 23       	and	r24, r24
    4810:	69 f2       	breq	.-102    	; 0x47ac <prvTimerTask+0x18>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4812:	89 81       	ldd	r24, Y+1	; 0x01
    4814:	87 fd       	sbrc	r24, 7
    4816:	f2 cf       	rjmp	.-28     	; 0x47fc <prvTimerTask+0x68>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4818:	0c 81       	ldd	r16, Y+4	; 0x04
    481a:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    481c:	d8 01       	movw	r26, r16
    481e:	1a 96       	adiw	r26, 0x0a	; 10
    4820:	8d 91       	ld	r24, X+
    4822:	9c 91       	ld	r25, X
    4824:	89 2b       	or	r24, r25
    4826:	21 f0       	breq	.+8      	; 0x4830 <prvTimerTask+0x9c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4828:	c8 01       	movw	r24, r16
    482a:	02 96       	adiw	r24, 0x02	; 2
    482c:	0e 94 cb 0c 	call	0x1996	; 0x1996 <uxListRemove>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
    4830:	0e 94 16 1a 	call	0x342c	; 0x342c <xTaskGetTickCount>
    4834:	6c 01       	movw	r12, r24

        if( xTimeNow < xLastTime )
    4836:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <xLastTime.2269>
    483a:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <xLastTime.2269+0x1>
    483e:	c8 16       	cp	r12, r24
    4840:	d9 06       	cpc	r13, r25
    4842:	10 f4       	brcc	.+4      	; 0x4848 <prvTimerTask+0xb4>
        {
            prvSwitchTimerLists();
    4844:	0e 94 ac 23 	call	0x4758	; 0x4758 <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    4848:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <xLastTime.2269+0x1>
    484c:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <xLastTime.2269>
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
    4850:	e9 81       	ldd	r30, Y+1	; 0x01
    4852:	e1 50       	subi	r30, 0x01	; 1
    4854:	e9 30       	cpi	r30, 0x09	; 9
    4856:	90 f6       	brcc	.-92     	; 0x47fc <prvTimerTask+0x68>
    4858:	0e 2e       	mov	r0, r30
    485a:	00 0c       	add	r0, r0
    485c:	ff 0b       	sbc	r31, r31
    485e:	e9 5c       	subi	r30, 0xC9	; 201
    4860:	fb 4d       	sbci	r31, 0xDB	; 219
    4862:	d8 01       	movw	r26, r16
    4864:	52 96       	adiw	r26, 0x12	; 18
    4866:	8c 91       	ld	r24, X
    4868:	52 97       	sbiw	r26, 0x12	; 18
    486a:	0c 94 92 28 	jmp	0x5124	; 0x5124 <__tablejump2__>
    486e:	68 24       	eor	r6, r8
    4870:	68 24       	eor	r6, r8
    4872:	ac 24       	eor	r10, r12
    4874:	94 24       	eor	r9, r4
    4876:	a6 24       	eor	r10, r6
    4878:	68 24       	eor	r6, r8
    487a:	68 24       	eor	r6, r8
    487c:	ac 24       	eor	r10, r12
    487e:	94 24       	eor	r9, r4
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    4880:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <xLastTime.2269+0x1>
    4884:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <xLastTime.2269>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4888:	aa 20       	and	r10, r10
    488a:	51 f0       	breq	.+20     	; 0x48a0 <prvTimerTask+0x10c>
    488c:	c0 16       	cp	r12, r16
    488e:	d1 06       	cpc	r13, r17
    4890:	70 f0       	brcs	.+28     	; 0x48ae <prvTimerTask+0x11a>
                {
                    ( void ) xTaskResumeAll();
    4892:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4896:	b6 01       	movw	r22, r12
    4898:	c8 01       	movw	r24, r16
    489a:	0e 94 82 23 	call	0x4704	; 0x4704 <prvProcessExpiredTimer>
    489e:	a9 cf       	rjmp	.-174    	; 0x47f2 <prvTimerTask+0x5e>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    48a0:	e0 91 e0 07 	lds	r30, 0x07E0	; 0x8007e0 <pxOverflowTimerList>
    48a4:	f0 91 e1 07 	lds	r31, 0x07E1	; 0x8007e1 <pxOverflowTimerList+0x1>
    48a8:	41 e0       	ldi	r20, 0x01	; 1
    48aa:	80 81       	ld	r24, Z
    48ac:	81 11       	cpse	r24, r1
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    48ae:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    48b0:	b8 01       	movw	r22, r16
    48b2:	6c 19       	sub	r22, r12
    48b4:	7d 09       	sbc	r23, r13
    48b6:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    48ba:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    48be:	0e 94 55 13 	call	0x26aa	; 0x26aa <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    48c2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTaskResumeAll>
    48c6:	81 11       	cpse	r24, r1
    48c8:	94 cf       	rjmp	.-216    	; 0x47f2 <prvTimerTask+0x5e>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        taskYIELD_WITHIN_API();
    48ca:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <vPortYield>
    48ce:	91 cf       	rjmp	.-222    	; 0x47f2 <prvTimerTask+0x5e>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    48d0:	81 60       	ori	r24, 0x01	; 1
    48d2:	f8 01       	movw	r30, r16
    48d4:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    48d6:	2a 81       	ldd	r18, Y+2	; 0x02
    48d8:	3b 81       	ldd	r19, Y+3	; 0x03
    48da:	64 85       	ldd	r22, Z+12	; 0x0c
    48dc:	75 85       	ldd	r23, Z+13	; 0x0d
    48de:	62 0f       	add	r22, r18
    48e0:	73 1f       	adc	r23, r19
    48e2:	a6 01       	movw	r20, r12
    48e4:	c8 01       	movw	r24, r16
    48e6:	0e 94 34 23 	call	0x4668	; 0x4668 <prvInsertTimerInActiveList>
    48ea:	88 23       	and	r24, r24
    48ec:	09 f4       	brne	.+2      	; 0x48f0 <prvTimerTask+0x15c>
    48ee:	86 cf       	rjmp	.-244    	; 0x47fc <prvTimerTask+0x68>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    48f0:	d8 01       	movw	r26, r16
    48f2:	52 96       	adiw	r26, 0x12	; 18
    48f4:	8c 91       	ld	r24, X
    48f6:	52 97       	sbiw	r26, 0x12	; 18
    48f8:	82 ff       	sbrs	r24, 2
    48fa:	12 c0       	rjmp	.+36     	; 0x4920 <prvTimerTask+0x18c>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    48fc:	6a 81       	ldd	r22, Y+2	; 0x02
    48fe:	7b 81       	ldd	r23, Y+3	; 0x03
    4900:	1c 96       	adiw	r26, 0x0c	; 12
    4902:	8d 91       	ld	r24, X+
    4904:	9c 91       	ld	r25, X
    4906:	68 0f       	add	r22, r24
    4908:	79 1f       	adc	r23, r25
    490a:	a6 01       	movw	r20, r12
    490c:	c8 01       	movw	r24, r16
    490e:	0e 94 5e 23 	call	0x46bc	; 0x46bc <prvReloadTimer>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4912:	d8 01       	movw	r26, r16
    4914:	50 96       	adiw	r26, 0x10	; 16
    4916:	ed 91       	ld	r30, X+
    4918:	fc 91       	ld	r31, X
    491a:	c8 01       	movw	r24, r16
    491c:	09 95       	icall
    491e:	6e cf       	rjmp	.-292    	; 0x47fc <prvTimerTask+0x68>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    4920:	8e 7f       	andi	r24, 0xFE	; 254
    4922:	f8 01       	movw	r30, r16
    4924:	82 8b       	std	Z+18, r24	; 0x12
    4926:	f5 cf       	rjmp	.-22     	; 0x4912 <prvTimerTask+0x17e>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    4928:	81 60       	ori	r24, 0x01	; 1
    492a:	52 96       	adiw	r26, 0x12	; 18
    492c:	8c 93       	st	X, r24
    492e:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4930:	6a 81       	ldd	r22, Y+2	; 0x02
    4932:	7b 81       	ldd	r23, Y+3	; 0x03
    4934:	1d 96       	adiw	r26, 0x0d	; 13
    4936:	7c 93       	st	X, r23
    4938:	6e 93       	st	-X, r22
    493a:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    493c:	6c 0d       	add	r22, r12
    493e:	7d 1d       	adc	r23, r13
    4940:	96 01       	movw	r18, r12
    4942:	a6 01       	movw	r20, r12
    4944:	c8 01       	movw	r24, r16
    4946:	0e 94 34 23 	call	0x4668	; 0x4668 <prvInsertTimerInActiveList>
    494a:	58 cf       	rjmp	.-336    	; 0x47fc <prvTimerTask+0x68>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    494c:	81 fd       	sbrc	r24, 1
    494e:	04 c0       	rjmp	.+8      	; 0x4958 <prvTimerTask+0x1c4>
                            {
                                vPortFree( pxTimer );
    4950:	c8 01       	movw	r24, r16
    4952:	0e 94 4f 0c 	call	0x189e	; 0x189e <vPortFree>
    4956:	52 cf       	rjmp	.-348    	; 0x47fc <prvTimerTask+0x68>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    4958:	8e 7f       	andi	r24, 0xFE	; 254
    495a:	f8 01       	movw	r30, r16
    495c:	82 8b       	std	Z+18, r24	; 0x12
    495e:	4e cf       	rjmp	.-356    	; 0x47fc <prvTimerTask+0x68>

00004960 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    4960:	ef 92       	push	r14
    4962:	ff 92       	push	r15
    4964:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    4966:	0e 94 0b 23 	call	0x4616	; 0x4616 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    496a:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    496e:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    4972:	89 2b       	or	r24, r25
    4974:	91 f0       	breq	.+36     	; 0x499a <xTimerCreateTimerTask+0x3a>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    4976:	8c ed       	ldi	r24, 0xDC	; 220
    4978:	e8 2e       	mov	r14, r24
    497a:	87 e0       	ldi	r24, 0x07	; 7
    497c:	f8 2e       	mov	r15, r24
    497e:	02 e0       	ldi	r16, 0x02	; 2
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	20 e0       	ldi	r18, 0x00	; 0
    4984:	40 e8       	ldi	r20, 0x80	; 128
    4986:	6c e3       	ldi	r22, 0x3C	; 60
    4988:	71 e0       	ldi	r23, 0x01	; 1
    498a:	8a ec       	ldi	r24, 0xCA	; 202
    498c:	93 e2       	ldi	r25, 0x23	; 35
    498e:	0e 94 39 18 	call	0x3072	; 0x3072 <xTaskCreate>
        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
    }
    4992:	0f 91       	pop	r16
    4994:	ff 90       	pop	r15
    4996:	ef 90       	pop	r14
    4998:	08 95       	ret
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    499a:	80 e0       	ldi	r24, 0x00	; 0

        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
    499c:	fa cf       	rjmp	.-12     	; 0x4992 <xTimerCreateTimerTask+0x32>

0000499e <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    499e:	8f 92       	push	r8
    49a0:	9f 92       	push	r9
    49a2:	af 92       	push	r10
    49a4:	bf 92       	push	r11
    49a6:	cf 92       	push	r12
    49a8:	df 92       	push	r13
    49aa:	ff 92       	push	r15
    49ac:	0f 93       	push	r16
    49ae:	1f 93       	push	r17
    49b0:	cf 93       	push	r28
    49b2:	df 93       	push	r29
    49b4:	4c 01       	movw	r8, r24
    49b6:	5b 01       	movw	r10, r22
    49b8:	f4 2e       	mov	r15, r20
    49ba:	69 01       	movw	r12, r18
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    49bc:	83 e1       	ldi	r24, 0x13	; 19
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	0e 94 17 0c 	call	0x182e	; 0x182e <pvPortMalloc>
    49c4:	ec 01       	movw	r28, r24

            if( pxNewTimer != NULL )
    49c6:	89 2b       	or	r24, r25
    49c8:	a1 f0       	breq	.+40     	; 0x49f2 <xTimerCreate+0x54>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    49ca:	1a 8a       	std	Y+18, r1	; 0x12
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    49cc:	0e 94 0b 23 	call	0x4616	; 0x4616 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    49d0:	99 82       	std	Y+1, r9	; 0x01
    49d2:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    49d4:	bd 86       	std	Y+13, r11	; 0x0d
    49d6:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    49d8:	df 86       	std	Y+15, r13	; 0x0f
    49da:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    49dc:	19 8b       	std	Y+17, r17	; 0x11
    49de:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    49e0:	ce 01       	movw	r24, r28
    49e2:	02 96       	adiw	r24, 0x02	; 2
    49e4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    49e8:	ff 20       	and	r15, r15
    49ea:	19 f0       	breq	.+6      	; 0x49f2 <xTimerCreate+0x54>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
    49ec:	8a 89       	ldd	r24, Y+18	; 0x12
    49ee:	84 60       	ori	r24, 0x04	; 4
    49f0:	8a 8b       	std	Y+18, r24	; 0x12
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
        }
    49f2:	ce 01       	movw	r24, r28
    49f4:	df 91       	pop	r29
    49f6:	cf 91       	pop	r28
    49f8:	1f 91       	pop	r17
    49fa:	0f 91       	pop	r16
    49fc:	ff 90       	pop	r15
    49fe:	df 90       	pop	r13
    4a00:	cf 90       	pop	r12
    4a02:	bf 90       	pop	r11
    4a04:	af 90       	pop	r10
    4a06:	9f 90       	pop	r9
    4a08:	8f 90       	pop	r8
    4a0a:	08 95       	ret

00004a0c <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
    4a0c:	0f 93       	push	r16
    4a0e:	1f 93       	push	r17
    4a10:	cf 93       	push	r28
    4a12:	df 93       	push	r29
    4a14:	00 d0       	rcall	.+0      	; 0x4a16 <xTimerGenericCommandFromTask+0xa>
    4a16:	00 d0       	rcall	.+0      	; 0x4a18 <xTimerGenericCommandFromTask+0xc>
    4a18:	1f 92       	push	r1
    4a1a:	cd b7       	in	r28, 0x3d	; 61
    4a1c:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    4a1e:	20 91 de 07 	lds	r18, 0x07DE	; 0x8007de <xTimerQueue>
    4a22:	30 91 df 07 	lds	r19, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    4a26:	23 2b       	or	r18, r19
    4a28:	59 f4       	brne	.+22     	; 0x4a40 <xTimerGenericCommandFromTask+0x34>
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
    }
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    4a30:	0f 90       	pop	r0
    4a32:	0f 90       	pop	r0
    4a34:	0f 90       	pop	r0
    4a36:	df 91       	pop	r29
    4a38:	cf 91       	pop	r28
    4a3a:	1f 91       	pop	r17
    4a3c:	0f 91       	pop	r16
    4a3e:	08 95       	ret
        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    4a40:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4a42:	5b 83       	std	Y+3, r21	; 0x03
    4a44:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    4a46:	9d 83       	std	Y+5, r25	; 0x05
    4a48:	8c 83       	std	Y+4, r24	; 0x04

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4a4a:	66 30       	cpi	r22, 0x06	; 6
    4a4c:	74 f7       	brge	.-36     	; 0x4a2a <xTimerGenericCommandFromTask+0x1e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4a4e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <xTaskGetSchedulerState>
    4a52:	e0 91 de 07 	lds	r30, 0x07DE	; 0x8007de <xTimerQueue>
    4a56:	f0 91 df 07 	lds	r31, 0x07DF	; 0x8007df <xTimerQueue+0x1>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4a5a:	20 e0       	ldi	r18, 0x00	; 0
    4a5c:	a8 01       	movw	r20, r16

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4a5e:	82 30       	cpi	r24, 0x02	; 2
    4a60:	11 f0       	breq	.+4      	; 0x4a66 <xTimerGenericCommandFromTask+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	40 e0       	ldi	r20, 0x00	; 0
    4a66:	be 01       	movw	r22, r28
    4a68:	6f 5f       	subi	r22, 0xFF	; 255
    4a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a6c:	cf 01       	movw	r24, r30
    4a6e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <xQueueGenericSend>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
    4a72:	dc cf       	rjmp	.-72     	; 0x4a2c <xTimerGenericCommandFromTask+0x20>

00004a74 <xTimerGenericCommandFromISR>:
    BaseType_t xTimerGenericCommandFromISR( TimerHandle_t xTimer,
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
    4a74:	cf 93       	push	r28
    4a76:	df 93       	push	r29
    4a78:	00 d0       	rcall	.+0      	; 0x4a7a <xTimerGenericCommandFromISR+0x6>
    4a7a:	00 d0       	rcall	.+0      	; 0x4a7c <xTimerGenericCommandFromISR+0x8>
    4a7c:	1f 92       	push	r1
    4a7e:	cd b7       	in	r28, 0x3d	; 61
    4a80:	de b7       	in	r29, 0x3e	; 62
    4a82:	fc 01       	movw	r30, r24

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    4a84:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    4a88:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    4a8c:	00 97       	sbiw	r24, 0x00	; 0
    4a8e:	49 f4       	brne	.+18     	; 0x4aa2 <xTimerGenericCommandFromISR+0x2e>
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    4a90:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
    }
    4a92:	0f 90       	pop	r0
    4a94:	0f 90       	pop	r0
    4a96:	0f 90       	pop	r0
    4a98:	0f 90       	pop	r0
    4a9a:	0f 90       	pop	r0
    4a9c:	df 91       	pop	r29
    4a9e:	cf 91       	pop	r28
    4aa0:	08 95       	ret
        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    4aa2:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4aa4:	5b 83       	std	Y+3, r21	; 0x03
    4aa6:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    4aa8:	fd 83       	std	Y+5, r31	; 0x05
    4aaa:	ec 83       	std	Y+4, r30	; 0x04

            configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
    4aac:	66 30       	cpi	r22, 0x06	; 6
    4aae:	84 f3       	brlt	.-32     	; 0x4a90 <xTimerGenericCommandFromISR+0x1c>
    4ab0:	a9 01       	movw	r20, r18
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	be 01       	movw	r22, r28
    4ab6:	6f 5f       	subi	r22, 0xFF	; 255
    4ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aba:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xQueueGenericSendFromISR>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
    4abe:	e9 cf       	rjmp	.-46     	; 0x4a92 <xTimerGenericCommandFromISR+0x1e>

00004ac0 <xTimerGetTimerDaemonTaskHandle>:
        configASSERT( ( xTimerTaskHandle != NULL ) );

        traceRETURN_xTimerGetTimerDaemonTaskHandle( xTimerTaskHandle );

        return xTimerTaskHandle;
    }
    4ac0:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <xTimerTaskHandle>
    4ac4:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <xTimerTaskHandle+0x1>
    4ac8:	08 95       	ret

00004aca <xTimerGetPeriod>:
        configASSERT( xTimer );

        traceRETURN_xTimerGetPeriod( pxTimer->xTimerPeriodInTicks );

        return pxTimer->xTimerPeriodInTicks;
    }
    4aca:	fc 01       	movw	r30, r24
    4acc:	84 85       	ldd	r24, Z+12	; 0x0c
    4ace:	95 85       	ldd	r25, Z+13	; 0x0d
    4ad0:	08 95       	ret

00004ad2 <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

    void vTimerSetReloadMode( TimerHandle_t xTimer,
                              const BaseType_t xAutoReload )
    {
    4ad2:	fc 01       	movw	r30, r24
        Timer_t * pxTimer = xTimer;

        traceENTER_vTimerSetReloadMode( xTimer, xAutoReload );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
    4ad4:	0f b6       	in	r0, 0x3f	; 63
    4ad6:	f8 94       	cli
    4ad8:	0f 92       	push	r0
    4ada:	92 89       	ldd	r25, Z+18	; 0x12
        {
            if( xAutoReload != pdFALSE )
    4adc:	66 23       	and	r22, r22
    4ade:	29 f0       	breq	.+10     	; 0x4aea <vTimerSetReloadMode+0x18>
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
    4ae0:	94 60       	ori	r25, 0x04	; 4
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
    4ae2:	92 8b       	std	Z+18, r25	; 0x12
            }
        }
        taskEXIT_CRITICAL();
    4ae4:	0f 90       	pop	r0
    4ae6:	0f be       	out	0x3f, r0	; 63

        traceRETURN_vTimerSetReloadMode();
    }
    4ae8:	08 95       	ret
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
    4aea:	9b 7f       	andi	r25, 0xFB	; 251
    4aec:	fa cf       	rjmp	.-12     	; 0x4ae2 <vTimerSetReloadMode+0x10>

00004aee <xTimerGetReloadMode>:
        BaseType_t xReturn;

        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	f8 94       	cli
    4af2:	0f 92       	push	r0
            {
                /* Is an auto-reload timer. */
                xReturn = pdTRUE;
            }
        }
        taskEXIT_CRITICAL();
    4af4:	0f 90       	pop	r0
    4af6:	0f be       	out	0x3f, r0	; 63
        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0U )
    4af8:	fc 01       	movw	r30, r24
    4afa:	82 89       	ldd	r24, Z+18	; 0x12
        taskEXIT_CRITICAL();

        traceRETURN_xTimerGetReloadMode( xReturn );

        return xReturn;
    }
    4afc:	82 fb       	bst	r24, 2
    4afe:	88 27       	eor	r24, r24
    4b00:	80 f9       	bld	r24, 0
    4b02:	08 95       	ret

00004b04 <uxTimerGetReloadMode>:
    {
        UBaseType_t uxReturn;

        traceENTER_uxTimerGetReloadMode( xTimer );

        uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
    4b04:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <xTimerGetReloadMode>

00004b08 <xTimerGetExpiryTime>:
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );

        traceRETURN_xTimerGetExpiryTime( xReturn );

        return xReturn;
    }
    4b08:	fc 01       	movw	r30, r24
    4b0a:	82 81       	ldd	r24, Z+2	; 0x02
    4b0c:	93 81       	ldd	r25, Z+3	; 0x03
    4b0e:	08 95       	ret

00004b10 <pcTimerGetName>:
        configASSERT( xTimer );

        traceRETURN_pcTimerGetName( pxTimer->pcTimerName );

        return pxTimer->pcTimerName;
    }
    4b10:	fc 01       	movw	r30, r24
    4b12:	80 81       	ld	r24, Z
    4b14:	91 81       	ldd	r25, Z+1	; 0x01
    4b16:	08 95       	ret

00004b18 <xTimerIsTimerActive>:
        traceENTER_xTimerIsTimerActive( xTimer );

        configASSERT( xTimer );

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	f8 94       	cli
    4b1c:	0f 92       	push	r0
            else
            {
                xReturn = pdTRUE;
            }
        }
        taskEXIT_CRITICAL();
    4b1e:	0f 90       	pop	r0
    4b20:	0f be       	out	0x3f, r0	; 63
        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0U )
            {
                xReturn = pdFALSE;
    4b22:	fc 01       	movw	r30, r24
    4b24:	82 89       	ldd	r24, Z+18	; 0x12
        taskEXIT_CRITICAL();

        traceRETURN_xTimerIsTimerActive( xReturn );

        return xReturn;
    }
    4b26:	81 70       	andi	r24, 0x01	; 1
    4b28:	08 95       	ret

00004b2a <pvTimerGetTimerID>:

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    4b2a:	0f b6       	in	r0, 0x3f	; 63
    4b2c:	f8 94       	cli
    4b2e:	0f 92       	push	r0
        {
            pvReturn = pxTimer->pvTimerID;
        }
        taskEXIT_CRITICAL();
    4b30:	0f 90       	pop	r0
    4b32:	0f be       	out	0x3f, r0	; 63

        traceRETURN_pvTimerGetTimerID( pvReturn );

        return pvReturn;
    }
    4b34:	fc 01       	movw	r30, r24
    4b36:	86 85       	ldd	r24, Z+14	; 0x0e
    4b38:	97 85       	ldd	r25, Z+15	; 0x0f
    4b3a:	08 95       	ret

00004b3c <vTimerSetTimerID>:

        traceENTER_vTimerSetTimerID( xTimer, pvNewID );

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	f8 94       	cli
    4b40:	0f 92       	push	r0
        {
            pxTimer->pvTimerID = pvNewID;
    4b42:	fc 01       	movw	r30, r24
    4b44:	77 87       	std	Z+15, r23	; 0x0f
    4b46:	66 87       	std	Z+14, r22	; 0x0e
        }
        taskEXIT_CRITICAL();
    4b48:	0f 90       	pop	r0
    4b4a:	0f be       	out	0x3f, r0	; 63

        traceRETURN_vTimerSetTimerID();
    }
    4b4c:	08 95       	ret

00004b4e <vTimerResetState>:
 * This function must be called by the application before restarting the
 * scheduler.
 */
    void vTimerResetState( void )
    {
        xTimerQueue = NULL;
    4b4e:	10 92 df 07 	sts	0x07DF, r1	; 0x8007df <xTimerQueue+0x1>
    4b52:	10 92 de 07 	sts	0x07DE, r1	; 0x8007de <xTimerQueue>
        xTimerTaskHandle = NULL;
    4b56:	10 92 dd 07 	sts	0x07DD, r1	; 0x8007dd <xTimerTaskHandle+0x1>
    4b5a:	10 92 dc 07 	sts	0x07DC, r1	; 0x8007dc <xTimerTaskHandle>
    }
    4b5e:	08 95       	ret

00004b60 <main>:


int main(void) {

	// Initialize buttons for interrupts
		Button_Init();
    4b60:	0e 94 20 06 	call	0xc40	; 0xc40 <Button_Init>
//		LCD_Init();

		DDRD |= (1 << PD6);
    4b64:	8e 9a       	sbi	0x11, 6	; 17

		ADC_INIT(128, AREF);
    4b66:	60 e0       	ldi	r22, 0x00	; 0
    4b68:	80 e8       	ldi	r24, 0x80	; 128
    4b6a:	0e 94 77 04 	call	0x8ee	; 0x8ee <ADC_INIT>

		poller_Init();
    4b6e:	0e 94 01 06 	call	0xc02	; 0xc02 <poller_Init>

		poller_SetPollTime(50);
    4b72:	62 e3       	ldi	r22, 0x32	; 50
    4b74:	70 e0       	ldi	r23, 0x00	; 0
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	0e 94 0b 06 	call	0xc16	; 0xc16 <poller_SetPollTime>
		Poller__StartPolling();
    4b7e:	0e 94 07 06 	call	0xc0e	; 0xc0e <Poller__StartPolling>

		

		Os_Init();
    4b82:	0e 94 13 03 	call	0x626	; 0x626 <Os_Init>
    4b86:	ff cf       	rjmp	.-2      	; 0x4b86 <main+0x26>

00004b88 <__subsf3>:
    4b88:	50 58       	subi	r21, 0x80	; 128

00004b8a <__addsf3>:
    4b8a:	bb 27       	eor	r27, r27
    4b8c:	aa 27       	eor	r26, r26
    4b8e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <__addsf3x>
    4b92:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__fp_round>
    4b96:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__fp_pscA>
    4b9a:	38 f0       	brcs	.+14     	; 0x4baa <__addsf3+0x20>
    4b9c:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__fp_pscB>
    4ba0:	20 f0       	brcs	.+8      	; 0x4baa <__addsf3+0x20>
    4ba2:	39 f4       	brne	.+14     	; 0x4bb2 <__addsf3+0x28>
    4ba4:	9f 3f       	cpi	r25, 0xFF	; 255
    4ba6:	19 f4       	brne	.+6      	; 0x4bae <__addsf3+0x24>
    4ba8:	26 f4       	brtc	.+8      	; 0x4bb2 <__addsf3+0x28>
    4baa:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__fp_nan>
    4bae:	0e f4       	brtc	.+2      	; 0x4bb2 <__addsf3+0x28>
    4bb0:	e0 95       	com	r30
    4bb2:	e7 fb       	bst	r30, 7
    4bb4:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__fp_inf>

00004bb8 <__addsf3x>:
    4bb8:	e9 2f       	mov	r30, r25
    4bba:	0e 94 31 27 	call	0x4e62	; 0x4e62 <__fp_split3>
    4bbe:	58 f3       	brcs	.-42     	; 0x4b96 <__addsf3+0xc>
    4bc0:	ba 17       	cp	r27, r26
    4bc2:	62 07       	cpc	r22, r18
    4bc4:	73 07       	cpc	r23, r19
    4bc6:	84 07       	cpc	r24, r20
    4bc8:	95 07       	cpc	r25, r21
    4bca:	20 f0       	brcs	.+8      	; 0x4bd4 <__addsf3x+0x1c>
    4bcc:	79 f4       	brne	.+30     	; 0x4bec <__addsf3x+0x34>
    4bce:	a6 f5       	brtc	.+104    	; 0x4c38 <__addsf3x+0x80>
    4bd0:	0c 94 53 27 	jmp	0x4ea6	; 0x4ea6 <__fp_zero>
    4bd4:	0e f4       	brtc	.+2      	; 0x4bd8 <__addsf3x+0x20>
    4bd6:	e0 95       	com	r30
    4bd8:	0b 2e       	mov	r0, r27
    4bda:	ba 2f       	mov	r27, r26
    4bdc:	a0 2d       	mov	r26, r0
    4bde:	0b 01       	movw	r0, r22
    4be0:	b9 01       	movw	r22, r18
    4be2:	90 01       	movw	r18, r0
    4be4:	0c 01       	movw	r0, r24
    4be6:	ca 01       	movw	r24, r20
    4be8:	a0 01       	movw	r20, r0
    4bea:	11 24       	eor	r1, r1
    4bec:	ff 27       	eor	r31, r31
    4bee:	59 1b       	sub	r21, r25
    4bf0:	99 f0       	breq	.+38     	; 0x4c18 <__addsf3x+0x60>
    4bf2:	59 3f       	cpi	r21, 0xF9	; 249
    4bf4:	50 f4       	brcc	.+20     	; 0x4c0a <__addsf3x+0x52>
    4bf6:	50 3e       	cpi	r21, 0xE0	; 224
    4bf8:	68 f1       	brcs	.+90     	; 0x4c54 <__addsf3x+0x9c>
    4bfa:	1a 16       	cp	r1, r26
    4bfc:	f0 40       	sbci	r31, 0x00	; 0
    4bfe:	a2 2f       	mov	r26, r18
    4c00:	23 2f       	mov	r18, r19
    4c02:	34 2f       	mov	r19, r20
    4c04:	44 27       	eor	r20, r20
    4c06:	58 5f       	subi	r21, 0xF8	; 248
    4c08:	f3 cf       	rjmp	.-26     	; 0x4bf0 <__addsf3x+0x38>
    4c0a:	46 95       	lsr	r20
    4c0c:	37 95       	ror	r19
    4c0e:	27 95       	ror	r18
    4c10:	a7 95       	ror	r26
    4c12:	f0 40       	sbci	r31, 0x00	; 0
    4c14:	53 95       	inc	r21
    4c16:	c9 f7       	brne	.-14     	; 0x4c0a <__addsf3x+0x52>
    4c18:	7e f4       	brtc	.+30     	; 0x4c38 <__addsf3x+0x80>
    4c1a:	1f 16       	cp	r1, r31
    4c1c:	ba 0b       	sbc	r27, r26
    4c1e:	62 0b       	sbc	r22, r18
    4c20:	73 0b       	sbc	r23, r19
    4c22:	84 0b       	sbc	r24, r20
    4c24:	ba f0       	brmi	.+46     	; 0x4c54 <__addsf3x+0x9c>
    4c26:	91 50       	subi	r25, 0x01	; 1
    4c28:	a1 f0       	breq	.+40     	; 0x4c52 <__addsf3x+0x9a>
    4c2a:	ff 0f       	add	r31, r31
    4c2c:	bb 1f       	adc	r27, r27
    4c2e:	66 1f       	adc	r22, r22
    4c30:	77 1f       	adc	r23, r23
    4c32:	88 1f       	adc	r24, r24
    4c34:	c2 f7       	brpl	.-16     	; 0x4c26 <__addsf3x+0x6e>
    4c36:	0e c0       	rjmp	.+28     	; 0x4c54 <__addsf3x+0x9c>
    4c38:	ba 0f       	add	r27, r26
    4c3a:	62 1f       	adc	r22, r18
    4c3c:	73 1f       	adc	r23, r19
    4c3e:	84 1f       	adc	r24, r20
    4c40:	48 f4       	brcc	.+18     	; 0x4c54 <__addsf3x+0x9c>
    4c42:	87 95       	ror	r24
    4c44:	77 95       	ror	r23
    4c46:	67 95       	ror	r22
    4c48:	b7 95       	ror	r27
    4c4a:	f7 95       	ror	r31
    4c4c:	9e 3f       	cpi	r25, 0xFE	; 254
    4c4e:	08 f0       	brcs	.+2      	; 0x4c52 <__addsf3x+0x9a>
    4c50:	b0 cf       	rjmp	.-160    	; 0x4bb2 <__addsf3+0x28>
    4c52:	93 95       	inc	r25
    4c54:	88 0f       	add	r24, r24
    4c56:	08 f0       	brcs	.+2      	; 0x4c5a <__addsf3x+0xa2>
    4c58:	99 27       	eor	r25, r25
    4c5a:	ee 0f       	add	r30, r30
    4c5c:	97 95       	ror	r25
    4c5e:	87 95       	ror	r24
    4c60:	08 95       	ret

00004c62 <__cmpsf2>:
    4c62:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__fp_cmp>
    4c66:	08 f4       	brcc	.+2      	; 0x4c6a <__cmpsf2+0x8>
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	08 95       	ret

00004c6c <__divsf3>:
    4c6c:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__divsf3x>
    4c70:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__fp_round>
    4c74:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__fp_pscB>
    4c78:	58 f0       	brcs	.+22     	; 0x4c90 <__divsf3+0x24>
    4c7a:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__fp_pscA>
    4c7e:	40 f0       	brcs	.+16     	; 0x4c90 <__divsf3+0x24>
    4c80:	29 f4       	brne	.+10     	; 0x4c8c <__divsf3+0x20>
    4c82:	5f 3f       	cpi	r21, 0xFF	; 255
    4c84:	29 f0       	breq	.+10     	; 0x4c90 <__divsf3+0x24>
    4c86:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__fp_inf>
    4c8a:	51 11       	cpse	r21, r1
    4c8c:	0c 94 54 27 	jmp	0x4ea8	; 0x4ea8 <__fp_szero>
    4c90:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__fp_nan>

00004c94 <__divsf3x>:
    4c94:	0e 94 31 27 	call	0x4e62	; 0x4e62 <__fp_split3>
    4c98:	68 f3       	brcs	.-38     	; 0x4c74 <__divsf3+0x8>

00004c9a <__divsf3_pse>:
    4c9a:	99 23       	and	r25, r25
    4c9c:	b1 f3       	breq	.-20     	; 0x4c8a <__divsf3+0x1e>
    4c9e:	55 23       	and	r21, r21
    4ca0:	91 f3       	breq	.-28     	; 0x4c86 <__divsf3+0x1a>
    4ca2:	95 1b       	sub	r25, r21
    4ca4:	55 0b       	sbc	r21, r21
    4ca6:	bb 27       	eor	r27, r27
    4ca8:	aa 27       	eor	r26, r26
    4caa:	62 17       	cp	r22, r18
    4cac:	73 07       	cpc	r23, r19
    4cae:	84 07       	cpc	r24, r20
    4cb0:	38 f0       	brcs	.+14     	; 0x4cc0 <__divsf3_pse+0x26>
    4cb2:	9f 5f       	subi	r25, 0xFF	; 255
    4cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb6:	22 0f       	add	r18, r18
    4cb8:	33 1f       	adc	r19, r19
    4cba:	44 1f       	adc	r20, r20
    4cbc:	aa 1f       	adc	r26, r26
    4cbe:	a9 f3       	breq	.-22     	; 0x4caa <__divsf3_pse+0x10>
    4cc0:	35 d0       	rcall	.+106    	; 0x4d2c <__divsf3_pse+0x92>
    4cc2:	0e 2e       	mov	r0, r30
    4cc4:	3a f0       	brmi	.+14     	; 0x4cd4 <__divsf3_pse+0x3a>
    4cc6:	e0 e8       	ldi	r30, 0x80	; 128
    4cc8:	32 d0       	rcall	.+100    	; 0x4d2e <__divsf3_pse+0x94>
    4cca:	91 50       	subi	r25, 0x01	; 1
    4ccc:	50 40       	sbci	r21, 0x00	; 0
    4cce:	e6 95       	lsr	r30
    4cd0:	00 1c       	adc	r0, r0
    4cd2:	ca f7       	brpl	.-14     	; 0x4cc6 <__divsf3_pse+0x2c>
    4cd4:	2b d0       	rcall	.+86     	; 0x4d2c <__divsf3_pse+0x92>
    4cd6:	fe 2f       	mov	r31, r30
    4cd8:	29 d0       	rcall	.+82     	; 0x4d2c <__divsf3_pse+0x92>
    4cda:	66 0f       	add	r22, r22
    4cdc:	77 1f       	adc	r23, r23
    4cde:	88 1f       	adc	r24, r24
    4ce0:	bb 1f       	adc	r27, r27
    4ce2:	26 17       	cp	r18, r22
    4ce4:	37 07       	cpc	r19, r23
    4ce6:	48 07       	cpc	r20, r24
    4ce8:	ab 07       	cpc	r26, r27
    4cea:	b0 e8       	ldi	r27, 0x80	; 128
    4cec:	09 f0       	breq	.+2      	; 0x4cf0 <__divsf3_pse+0x56>
    4cee:	bb 0b       	sbc	r27, r27
    4cf0:	80 2d       	mov	r24, r0
    4cf2:	bf 01       	movw	r22, r30
    4cf4:	ff 27       	eor	r31, r31
    4cf6:	93 58       	subi	r25, 0x83	; 131
    4cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    4cfa:	3a f0       	brmi	.+14     	; 0x4d0a <__divsf3_pse+0x70>
    4cfc:	9e 3f       	cpi	r25, 0xFE	; 254
    4cfe:	51 05       	cpc	r21, r1
    4d00:	78 f0       	brcs	.+30     	; 0x4d20 <__divsf3_pse+0x86>
    4d02:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__fp_inf>
    4d06:	0c 94 54 27 	jmp	0x4ea8	; 0x4ea8 <__fp_szero>
    4d0a:	5f 3f       	cpi	r21, 0xFF	; 255
    4d0c:	e4 f3       	brlt	.-8      	; 0x4d06 <__divsf3_pse+0x6c>
    4d0e:	98 3e       	cpi	r25, 0xE8	; 232
    4d10:	d4 f3       	brlt	.-12     	; 0x4d06 <__divsf3_pse+0x6c>
    4d12:	86 95       	lsr	r24
    4d14:	77 95       	ror	r23
    4d16:	67 95       	ror	r22
    4d18:	b7 95       	ror	r27
    4d1a:	f7 95       	ror	r31
    4d1c:	9f 5f       	subi	r25, 0xFF	; 255
    4d1e:	c9 f7       	brne	.-14     	; 0x4d12 <__divsf3_pse+0x78>
    4d20:	88 0f       	add	r24, r24
    4d22:	91 1d       	adc	r25, r1
    4d24:	96 95       	lsr	r25
    4d26:	87 95       	ror	r24
    4d28:	97 f9       	bld	r25, 7
    4d2a:	08 95       	ret
    4d2c:	e1 e0       	ldi	r30, 0x01	; 1
    4d2e:	66 0f       	add	r22, r22
    4d30:	77 1f       	adc	r23, r23
    4d32:	88 1f       	adc	r24, r24
    4d34:	bb 1f       	adc	r27, r27
    4d36:	62 17       	cp	r22, r18
    4d38:	73 07       	cpc	r23, r19
    4d3a:	84 07       	cpc	r24, r20
    4d3c:	ba 07       	cpc	r27, r26
    4d3e:	20 f0       	brcs	.+8      	; 0x4d48 <__divsf3_pse+0xae>
    4d40:	62 1b       	sub	r22, r18
    4d42:	73 0b       	sbc	r23, r19
    4d44:	84 0b       	sbc	r24, r20
    4d46:	ba 0b       	sbc	r27, r26
    4d48:	ee 1f       	adc	r30, r30
    4d4a:	88 f7       	brcc	.-30     	; 0x4d2e <__divsf3_pse+0x94>
    4d4c:	e0 95       	com	r30
    4d4e:	08 95       	ret

00004d50 <__floatunsisf>:
    4d50:	e8 94       	clt
    4d52:	09 c0       	rjmp	.+18     	; 0x4d66 <__floatsisf+0x12>

00004d54 <__floatsisf>:
    4d54:	97 fb       	bst	r25, 7
    4d56:	3e f4       	brtc	.+14     	; 0x4d66 <__floatsisf+0x12>
    4d58:	90 95       	com	r25
    4d5a:	80 95       	com	r24
    4d5c:	70 95       	com	r23
    4d5e:	61 95       	neg	r22
    4d60:	7f 4f       	sbci	r23, 0xFF	; 255
    4d62:	8f 4f       	sbci	r24, 0xFF	; 255
    4d64:	9f 4f       	sbci	r25, 0xFF	; 255
    4d66:	99 23       	and	r25, r25
    4d68:	a9 f0       	breq	.+42     	; 0x4d94 <__floatsisf+0x40>
    4d6a:	f9 2f       	mov	r31, r25
    4d6c:	96 e9       	ldi	r25, 0x96	; 150
    4d6e:	bb 27       	eor	r27, r27
    4d70:	93 95       	inc	r25
    4d72:	f6 95       	lsr	r31
    4d74:	87 95       	ror	r24
    4d76:	77 95       	ror	r23
    4d78:	67 95       	ror	r22
    4d7a:	b7 95       	ror	r27
    4d7c:	f1 11       	cpse	r31, r1
    4d7e:	f8 cf       	rjmp	.-16     	; 0x4d70 <__floatsisf+0x1c>
    4d80:	fa f4       	brpl	.+62     	; 0x4dc0 <__floatsisf+0x6c>
    4d82:	bb 0f       	add	r27, r27
    4d84:	11 f4       	brne	.+4      	; 0x4d8a <__floatsisf+0x36>
    4d86:	60 ff       	sbrs	r22, 0
    4d88:	1b c0       	rjmp	.+54     	; 0x4dc0 <__floatsisf+0x6c>
    4d8a:	6f 5f       	subi	r22, 0xFF	; 255
    4d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d90:	9f 4f       	sbci	r25, 0xFF	; 255
    4d92:	16 c0       	rjmp	.+44     	; 0x4dc0 <__floatsisf+0x6c>
    4d94:	88 23       	and	r24, r24
    4d96:	11 f0       	breq	.+4      	; 0x4d9c <__floatsisf+0x48>
    4d98:	96 e9       	ldi	r25, 0x96	; 150
    4d9a:	11 c0       	rjmp	.+34     	; 0x4dbe <__floatsisf+0x6a>
    4d9c:	77 23       	and	r23, r23
    4d9e:	21 f0       	breq	.+8      	; 0x4da8 <__floatsisf+0x54>
    4da0:	9e e8       	ldi	r25, 0x8E	; 142
    4da2:	87 2f       	mov	r24, r23
    4da4:	76 2f       	mov	r23, r22
    4da6:	05 c0       	rjmp	.+10     	; 0x4db2 <__floatsisf+0x5e>
    4da8:	66 23       	and	r22, r22
    4daa:	71 f0       	breq	.+28     	; 0x4dc8 <__floatsisf+0x74>
    4dac:	96 e8       	ldi	r25, 0x86	; 134
    4dae:	86 2f       	mov	r24, r22
    4db0:	70 e0       	ldi	r23, 0x00	; 0
    4db2:	60 e0       	ldi	r22, 0x00	; 0
    4db4:	2a f0       	brmi	.+10     	; 0x4dc0 <__floatsisf+0x6c>
    4db6:	9a 95       	dec	r25
    4db8:	66 0f       	add	r22, r22
    4dba:	77 1f       	adc	r23, r23
    4dbc:	88 1f       	adc	r24, r24
    4dbe:	da f7       	brpl	.-10     	; 0x4db6 <__floatsisf+0x62>
    4dc0:	88 0f       	add	r24, r24
    4dc2:	96 95       	lsr	r25
    4dc4:	87 95       	ror	r24
    4dc6:	97 f9       	bld	r25, 7
    4dc8:	08 95       	ret

00004dca <__fp_cmp>:
    4dca:	99 0f       	add	r25, r25
    4dcc:	00 08       	sbc	r0, r0
    4dce:	55 0f       	add	r21, r21
    4dd0:	aa 0b       	sbc	r26, r26
    4dd2:	e0 e8       	ldi	r30, 0x80	; 128
    4dd4:	fe ef       	ldi	r31, 0xFE	; 254
    4dd6:	16 16       	cp	r1, r22
    4dd8:	17 06       	cpc	r1, r23
    4dda:	e8 07       	cpc	r30, r24
    4ddc:	f9 07       	cpc	r31, r25
    4dde:	c0 f0       	brcs	.+48     	; 0x4e10 <__fp_cmp+0x46>
    4de0:	12 16       	cp	r1, r18
    4de2:	13 06       	cpc	r1, r19
    4de4:	e4 07       	cpc	r30, r20
    4de6:	f5 07       	cpc	r31, r21
    4de8:	98 f0       	brcs	.+38     	; 0x4e10 <__fp_cmp+0x46>
    4dea:	62 1b       	sub	r22, r18
    4dec:	73 0b       	sbc	r23, r19
    4dee:	84 0b       	sbc	r24, r20
    4df0:	95 0b       	sbc	r25, r21
    4df2:	39 f4       	brne	.+14     	; 0x4e02 <__fp_cmp+0x38>
    4df4:	0a 26       	eor	r0, r26
    4df6:	61 f0       	breq	.+24     	; 0x4e10 <__fp_cmp+0x46>
    4df8:	23 2b       	or	r18, r19
    4dfa:	24 2b       	or	r18, r20
    4dfc:	25 2b       	or	r18, r21
    4dfe:	21 f4       	brne	.+8      	; 0x4e08 <__fp_cmp+0x3e>
    4e00:	08 95       	ret
    4e02:	0a 26       	eor	r0, r26
    4e04:	09 f4       	brne	.+2      	; 0x4e08 <__fp_cmp+0x3e>
    4e06:	a1 40       	sbci	r26, 0x01	; 1
    4e08:	a6 95       	lsr	r26
    4e0a:	8f ef       	ldi	r24, 0xFF	; 255
    4e0c:	81 1d       	adc	r24, r1
    4e0e:	81 1d       	adc	r24, r1
    4e10:	08 95       	ret

00004e12 <__fp_inf>:
    4e12:	97 f9       	bld	r25, 7
    4e14:	9f 67       	ori	r25, 0x7F	; 127
    4e16:	80 e8       	ldi	r24, 0x80	; 128
    4e18:	70 e0       	ldi	r23, 0x00	; 0
    4e1a:	60 e0       	ldi	r22, 0x00	; 0
    4e1c:	08 95       	ret

00004e1e <__fp_nan>:
    4e1e:	9f ef       	ldi	r25, 0xFF	; 255
    4e20:	80 ec       	ldi	r24, 0xC0	; 192
    4e22:	08 95       	ret

00004e24 <__fp_pscA>:
    4e24:	00 24       	eor	r0, r0
    4e26:	0a 94       	dec	r0
    4e28:	16 16       	cp	r1, r22
    4e2a:	17 06       	cpc	r1, r23
    4e2c:	18 06       	cpc	r1, r24
    4e2e:	09 06       	cpc	r0, r25
    4e30:	08 95       	ret

00004e32 <__fp_pscB>:
    4e32:	00 24       	eor	r0, r0
    4e34:	0a 94       	dec	r0
    4e36:	12 16       	cp	r1, r18
    4e38:	13 06       	cpc	r1, r19
    4e3a:	14 06       	cpc	r1, r20
    4e3c:	05 06       	cpc	r0, r21
    4e3e:	08 95       	ret

00004e40 <__fp_round>:
    4e40:	09 2e       	mov	r0, r25
    4e42:	03 94       	inc	r0
    4e44:	00 0c       	add	r0, r0
    4e46:	11 f4       	brne	.+4      	; 0x4e4c <__fp_round+0xc>
    4e48:	88 23       	and	r24, r24
    4e4a:	52 f0       	brmi	.+20     	; 0x4e60 <__fp_round+0x20>
    4e4c:	bb 0f       	add	r27, r27
    4e4e:	40 f4       	brcc	.+16     	; 0x4e60 <__fp_round+0x20>
    4e50:	bf 2b       	or	r27, r31
    4e52:	11 f4       	brne	.+4      	; 0x4e58 <__fp_round+0x18>
    4e54:	60 ff       	sbrs	r22, 0
    4e56:	04 c0       	rjmp	.+8      	; 0x4e60 <__fp_round+0x20>
    4e58:	6f 5f       	subi	r22, 0xFF	; 255
    4e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e60:	08 95       	ret

00004e62 <__fp_split3>:
    4e62:	57 fd       	sbrc	r21, 7
    4e64:	90 58       	subi	r25, 0x80	; 128
    4e66:	44 0f       	add	r20, r20
    4e68:	55 1f       	adc	r21, r21
    4e6a:	59 f0       	breq	.+22     	; 0x4e82 <__fp_splitA+0x10>
    4e6c:	5f 3f       	cpi	r21, 0xFF	; 255
    4e6e:	71 f0       	breq	.+28     	; 0x4e8c <__fp_splitA+0x1a>
    4e70:	47 95       	ror	r20

00004e72 <__fp_splitA>:
    4e72:	88 0f       	add	r24, r24
    4e74:	97 fb       	bst	r25, 7
    4e76:	99 1f       	adc	r25, r25
    4e78:	61 f0       	breq	.+24     	; 0x4e92 <__fp_splitA+0x20>
    4e7a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e7c:	79 f0       	breq	.+30     	; 0x4e9c <__fp_splitA+0x2a>
    4e7e:	87 95       	ror	r24
    4e80:	08 95       	ret
    4e82:	12 16       	cp	r1, r18
    4e84:	13 06       	cpc	r1, r19
    4e86:	14 06       	cpc	r1, r20
    4e88:	55 1f       	adc	r21, r21
    4e8a:	f2 cf       	rjmp	.-28     	; 0x4e70 <__fp_split3+0xe>
    4e8c:	46 95       	lsr	r20
    4e8e:	f1 df       	rcall	.-30     	; 0x4e72 <__fp_splitA>
    4e90:	08 c0       	rjmp	.+16     	; 0x4ea2 <__fp_splitA+0x30>
    4e92:	16 16       	cp	r1, r22
    4e94:	17 06       	cpc	r1, r23
    4e96:	18 06       	cpc	r1, r24
    4e98:	99 1f       	adc	r25, r25
    4e9a:	f1 cf       	rjmp	.-30     	; 0x4e7e <__fp_splitA+0xc>
    4e9c:	86 95       	lsr	r24
    4e9e:	71 05       	cpc	r23, r1
    4ea0:	61 05       	cpc	r22, r1
    4ea2:	08 94       	sec
    4ea4:	08 95       	ret

00004ea6 <__fp_zero>:
    4ea6:	e8 94       	clt

00004ea8 <__fp_szero>:
    4ea8:	bb 27       	eor	r27, r27
    4eaa:	66 27       	eor	r22, r22
    4eac:	77 27       	eor	r23, r23
    4eae:	cb 01       	movw	r24, r22
    4eb0:	97 f9       	bld	r25, 7
    4eb2:	08 95       	ret

00004eb4 <__gesf2>:
    4eb4:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__fp_cmp>
    4eb8:	08 f4       	brcc	.+2      	; 0x4ebc <__gesf2+0x8>
    4eba:	8f ef       	ldi	r24, 0xFF	; 255
    4ebc:	08 95       	ret
    4ebe:	16 f0       	brts	.+4      	; 0x4ec4 <__gesf2+0x10>
    4ec0:	0c 94 1c 28 	jmp	0x5038	; 0x5038 <__fp_mpack>
    4ec4:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__fp_nan>
    4ec8:	68 94       	set
    4eca:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__fp_inf>

00004ece <log>:
    4ece:	0e 94 39 27 	call	0x4e72	; 0x4e72 <__fp_splitA>
    4ed2:	a8 f3       	brcs	.-22     	; 0x4ebe <__gesf2+0xa>
    4ed4:	99 23       	and	r25, r25
    4ed6:	c1 f3       	breq	.-16     	; 0x4ec8 <__gesf2+0x14>
    4ed8:	ae f3       	brts	.-22     	; 0x4ec4 <__gesf2+0x10>
    4eda:	df 93       	push	r29
    4edc:	cf 93       	push	r28
    4ede:	1f 93       	push	r17
    4ee0:	0f 93       	push	r16
    4ee2:	ff 92       	push	r15
    4ee4:	c9 2f       	mov	r28, r25
    4ee6:	dd 27       	eor	r29, r29
    4ee8:	88 23       	and	r24, r24
    4eea:	2a f0       	brmi	.+10     	; 0x4ef6 <log+0x28>
    4eec:	21 97       	sbiw	r28, 0x01	; 1
    4eee:	66 0f       	add	r22, r22
    4ef0:	77 1f       	adc	r23, r23
    4ef2:	88 1f       	adc	r24, r24
    4ef4:	da f7       	brpl	.-10     	; 0x4eec <log+0x1e>
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	40 e8       	ldi	r20, 0x80	; 128
    4efc:	5f eb       	ldi	r21, 0xBF	; 191
    4efe:	9f e3       	ldi	r25, 0x3F	; 63
    4f00:	88 39       	cpi	r24, 0x98	; 152
    4f02:	20 f0       	brcs	.+8      	; 0x4f0c <log+0x3e>
    4f04:	80 3e       	cpi	r24, 0xE0	; 224
    4f06:	38 f0       	brcs	.+14     	; 0x4f16 <log+0x48>
    4f08:	21 96       	adiw	r28, 0x01	; 1
    4f0a:	8f 77       	andi	r24, 0x7F	; 127
    4f0c:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <__addsf3>
    4f10:	e4 e5       	ldi	r30, 0x54	; 84
    4f12:	f0 e0       	ldi	r31, 0x00	; 0
    4f14:	04 c0       	rjmp	.+8      	; 0x4f1e <log+0x50>
    4f16:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <__addsf3>
    4f1a:	e1 e8       	ldi	r30, 0x81	; 129
    4f1c:	f0 e0       	ldi	r31, 0x00	; 0
    4f1e:	0e 94 2a 28 	call	0x5054	; 0x5054 <__fp_powser>
    4f22:	8b 01       	movw	r16, r22
    4f24:	be 01       	movw	r22, r28
    4f26:	ec 01       	movw	r28, r24
    4f28:	fb 2e       	mov	r15, r27
    4f2a:	6f 57       	subi	r22, 0x7F	; 127
    4f2c:	71 09       	sbc	r23, r1
    4f2e:	75 95       	asr	r23
    4f30:	77 1f       	adc	r23, r23
    4f32:	88 0b       	sbc	r24, r24
    4f34:	99 0b       	sbc	r25, r25
    4f36:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <__floatsisf>
    4f3a:	28 e1       	ldi	r18, 0x18	; 24
    4f3c:	32 e7       	ldi	r19, 0x72	; 114
    4f3e:	41 e3       	ldi	r20, 0x31	; 49
    4f40:	5f e3       	ldi	r21, 0x3F	; 63
    4f42:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__mulsf3x>
    4f46:	af 2d       	mov	r26, r15
    4f48:	98 01       	movw	r18, r16
    4f4a:	ae 01       	movw	r20, r28
    4f4c:	ff 90       	pop	r15
    4f4e:	0f 91       	pop	r16
    4f50:	1f 91       	pop	r17
    4f52:	cf 91       	pop	r28
    4f54:	df 91       	pop	r29
    4f56:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <__addsf3x>
    4f5a:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__fp_round>

00004f5e <__mulsf3>:
    4f5e:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__mulsf3x>
    4f62:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__fp_round>
    4f66:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__fp_pscA>
    4f6a:	38 f0       	brcs	.+14     	; 0x4f7a <__mulsf3+0x1c>
    4f6c:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__fp_pscB>
    4f70:	20 f0       	brcs	.+8      	; 0x4f7a <__mulsf3+0x1c>
    4f72:	95 23       	and	r25, r21
    4f74:	11 f0       	breq	.+4      	; 0x4f7a <__mulsf3+0x1c>
    4f76:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__fp_inf>
    4f7a:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__fp_nan>
    4f7e:	11 24       	eor	r1, r1
    4f80:	0c 94 54 27 	jmp	0x4ea8	; 0x4ea8 <__fp_szero>

00004f84 <__mulsf3x>:
    4f84:	0e 94 31 27 	call	0x4e62	; 0x4e62 <__fp_split3>
    4f88:	70 f3       	brcs	.-36     	; 0x4f66 <__mulsf3+0x8>

00004f8a <__mulsf3_pse>:
    4f8a:	95 9f       	mul	r25, r21
    4f8c:	c1 f3       	breq	.-16     	; 0x4f7e <__mulsf3+0x20>
    4f8e:	95 0f       	add	r25, r21
    4f90:	50 e0       	ldi	r21, 0x00	; 0
    4f92:	55 1f       	adc	r21, r21
    4f94:	62 9f       	mul	r22, r18
    4f96:	f0 01       	movw	r30, r0
    4f98:	72 9f       	mul	r23, r18
    4f9a:	bb 27       	eor	r27, r27
    4f9c:	f0 0d       	add	r31, r0
    4f9e:	b1 1d       	adc	r27, r1
    4fa0:	63 9f       	mul	r22, r19
    4fa2:	aa 27       	eor	r26, r26
    4fa4:	f0 0d       	add	r31, r0
    4fa6:	b1 1d       	adc	r27, r1
    4fa8:	aa 1f       	adc	r26, r26
    4faa:	64 9f       	mul	r22, r20
    4fac:	66 27       	eor	r22, r22
    4fae:	b0 0d       	add	r27, r0
    4fb0:	a1 1d       	adc	r26, r1
    4fb2:	66 1f       	adc	r22, r22
    4fb4:	82 9f       	mul	r24, r18
    4fb6:	22 27       	eor	r18, r18
    4fb8:	b0 0d       	add	r27, r0
    4fba:	a1 1d       	adc	r26, r1
    4fbc:	62 1f       	adc	r22, r18
    4fbe:	73 9f       	mul	r23, r19
    4fc0:	b0 0d       	add	r27, r0
    4fc2:	a1 1d       	adc	r26, r1
    4fc4:	62 1f       	adc	r22, r18
    4fc6:	83 9f       	mul	r24, r19
    4fc8:	a0 0d       	add	r26, r0
    4fca:	61 1d       	adc	r22, r1
    4fcc:	22 1f       	adc	r18, r18
    4fce:	74 9f       	mul	r23, r20
    4fd0:	33 27       	eor	r19, r19
    4fd2:	a0 0d       	add	r26, r0
    4fd4:	61 1d       	adc	r22, r1
    4fd6:	23 1f       	adc	r18, r19
    4fd8:	84 9f       	mul	r24, r20
    4fda:	60 0d       	add	r22, r0
    4fdc:	21 1d       	adc	r18, r1
    4fde:	82 2f       	mov	r24, r18
    4fe0:	76 2f       	mov	r23, r22
    4fe2:	6a 2f       	mov	r22, r26
    4fe4:	11 24       	eor	r1, r1
    4fe6:	9f 57       	subi	r25, 0x7F	; 127
    4fe8:	50 40       	sbci	r21, 0x00	; 0
    4fea:	9a f0       	brmi	.+38     	; 0x5012 <__mulsf3_pse+0x88>
    4fec:	f1 f0       	breq	.+60     	; 0x502a <__mulsf3_pse+0xa0>
    4fee:	88 23       	and	r24, r24
    4ff0:	4a f0       	brmi	.+18     	; 0x5004 <__mulsf3_pse+0x7a>
    4ff2:	ee 0f       	add	r30, r30
    4ff4:	ff 1f       	adc	r31, r31
    4ff6:	bb 1f       	adc	r27, r27
    4ff8:	66 1f       	adc	r22, r22
    4ffa:	77 1f       	adc	r23, r23
    4ffc:	88 1f       	adc	r24, r24
    4ffe:	91 50       	subi	r25, 0x01	; 1
    5000:	50 40       	sbci	r21, 0x00	; 0
    5002:	a9 f7       	brne	.-22     	; 0x4fee <__mulsf3_pse+0x64>
    5004:	9e 3f       	cpi	r25, 0xFE	; 254
    5006:	51 05       	cpc	r21, r1
    5008:	80 f0       	brcs	.+32     	; 0x502a <__mulsf3_pse+0xa0>
    500a:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__fp_inf>
    500e:	0c 94 54 27 	jmp	0x4ea8	; 0x4ea8 <__fp_szero>
    5012:	5f 3f       	cpi	r21, 0xFF	; 255
    5014:	e4 f3       	brlt	.-8      	; 0x500e <__mulsf3_pse+0x84>
    5016:	98 3e       	cpi	r25, 0xE8	; 232
    5018:	d4 f3       	brlt	.-12     	; 0x500e <__mulsf3_pse+0x84>
    501a:	86 95       	lsr	r24
    501c:	77 95       	ror	r23
    501e:	67 95       	ror	r22
    5020:	b7 95       	ror	r27
    5022:	f7 95       	ror	r31
    5024:	e7 95       	ror	r30
    5026:	9f 5f       	subi	r25, 0xFF	; 255
    5028:	c1 f7       	brne	.-16     	; 0x501a <__mulsf3_pse+0x90>
    502a:	fe 2b       	or	r31, r30
    502c:	88 0f       	add	r24, r24
    502e:	91 1d       	adc	r25, r1
    5030:	96 95       	lsr	r25
    5032:	87 95       	ror	r24
    5034:	97 f9       	bld	r25, 7
    5036:	08 95       	ret

00005038 <__fp_mpack>:
    5038:	9f 3f       	cpi	r25, 0xFF	; 255
    503a:	31 f0       	breq	.+12     	; 0x5048 <__fp_mpack_finite+0xc>

0000503c <__fp_mpack_finite>:
    503c:	91 50       	subi	r25, 0x01	; 1
    503e:	20 f4       	brcc	.+8      	; 0x5048 <__fp_mpack_finite+0xc>
    5040:	87 95       	ror	r24
    5042:	77 95       	ror	r23
    5044:	67 95       	ror	r22
    5046:	b7 95       	ror	r27
    5048:	88 0f       	add	r24, r24
    504a:	91 1d       	adc	r25, r1
    504c:	96 95       	lsr	r25
    504e:	87 95       	ror	r24
    5050:	97 f9       	bld	r25, 7
    5052:	08 95       	ret

00005054 <__fp_powser>:
    5054:	df 93       	push	r29
    5056:	cf 93       	push	r28
    5058:	1f 93       	push	r17
    505a:	0f 93       	push	r16
    505c:	ff 92       	push	r15
    505e:	ef 92       	push	r14
    5060:	df 92       	push	r13
    5062:	7b 01       	movw	r14, r22
    5064:	8c 01       	movw	r16, r24
    5066:	68 94       	set
    5068:	06 c0       	rjmp	.+12     	; 0x5076 <__fp_powser+0x22>
    506a:	da 2e       	mov	r13, r26
    506c:	ef 01       	movw	r28, r30
    506e:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <__mulsf3x>
    5072:	fe 01       	movw	r30, r28
    5074:	e8 94       	clt
    5076:	a5 91       	lpm	r26, Z+
    5078:	25 91       	lpm	r18, Z+
    507a:	35 91       	lpm	r19, Z+
    507c:	45 91       	lpm	r20, Z+
    507e:	55 91       	lpm	r21, Z+
    5080:	a6 f3       	brts	.-24     	; 0x506a <__fp_powser+0x16>
    5082:	ef 01       	movw	r28, r30
    5084:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <__addsf3x>
    5088:	fe 01       	movw	r30, r28
    508a:	97 01       	movw	r18, r14
    508c:	a8 01       	movw	r20, r16
    508e:	da 94       	dec	r13
    5090:	69 f7       	brne	.-38     	; 0x506c <__fp_powser+0x18>
    5092:	df 90       	pop	r13
    5094:	ef 90       	pop	r14
    5096:	ff 90       	pop	r15
    5098:	0f 91       	pop	r16
    509a:	1f 91       	pop	r17
    509c:	cf 91       	pop	r28
    509e:	df 91       	pop	r29
    50a0:	08 95       	ret

000050a2 <__udivmodsi4>:
    50a2:	a1 e2       	ldi	r26, 0x21	; 33
    50a4:	1a 2e       	mov	r1, r26
    50a6:	aa 1b       	sub	r26, r26
    50a8:	bb 1b       	sub	r27, r27
    50aa:	fd 01       	movw	r30, r26
    50ac:	0d c0       	rjmp	.+26     	; 0x50c8 <__udivmodsi4_ep>

000050ae <__udivmodsi4_loop>:
    50ae:	aa 1f       	adc	r26, r26
    50b0:	bb 1f       	adc	r27, r27
    50b2:	ee 1f       	adc	r30, r30
    50b4:	ff 1f       	adc	r31, r31
    50b6:	a2 17       	cp	r26, r18
    50b8:	b3 07       	cpc	r27, r19
    50ba:	e4 07       	cpc	r30, r20
    50bc:	f5 07       	cpc	r31, r21
    50be:	20 f0       	brcs	.+8      	; 0x50c8 <__udivmodsi4_ep>
    50c0:	a2 1b       	sub	r26, r18
    50c2:	b3 0b       	sbc	r27, r19
    50c4:	e4 0b       	sbc	r30, r20
    50c6:	f5 0b       	sbc	r31, r21

000050c8 <__udivmodsi4_ep>:
    50c8:	66 1f       	adc	r22, r22
    50ca:	77 1f       	adc	r23, r23
    50cc:	88 1f       	adc	r24, r24
    50ce:	99 1f       	adc	r25, r25
    50d0:	1a 94       	dec	r1
    50d2:	69 f7       	brne	.-38     	; 0x50ae <__udivmodsi4_loop>
    50d4:	60 95       	com	r22
    50d6:	70 95       	com	r23
    50d8:	80 95       	com	r24
    50da:	90 95       	com	r25
    50dc:	9b 01       	movw	r18, r22
    50de:	ac 01       	movw	r20, r24
    50e0:	bd 01       	movw	r22, r26
    50e2:	cf 01       	movw	r24, r30
    50e4:	08 95       	ret

000050e6 <__divmodsi4>:
    50e6:	05 2e       	mov	r0, r21
    50e8:	97 fb       	bst	r25, 7
    50ea:	1e f4       	brtc	.+6      	; 0x50f2 <__divmodsi4+0xc>
    50ec:	00 94       	com	r0
    50ee:	0e 94 8a 28 	call	0x5114	; 0x5114 <__negsi2>
    50f2:	57 fd       	sbrc	r21, 7
    50f4:	07 d0       	rcall	.+14     	; 0x5104 <__divmodsi4_neg2>
    50f6:	0e 94 51 28 	call	0x50a2	; 0x50a2 <__udivmodsi4>
    50fa:	07 fc       	sbrc	r0, 7
    50fc:	03 d0       	rcall	.+6      	; 0x5104 <__divmodsi4_neg2>
    50fe:	4e f4       	brtc	.+18     	; 0x5112 <__divmodsi4_exit>
    5100:	0c 94 8a 28 	jmp	0x5114	; 0x5114 <__negsi2>

00005104 <__divmodsi4_neg2>:
    5104:	50 95       	com	r21
    5106:	40 95       	com	r20
    5108:	30 95       	com	r19
    510a:	21 95       	neg	r18
    510c:	3f 4f       	sbci	r19, 0xFF	; 255
    510e:	4f 4f       	sbci	r20, 0xFF	; 255
    5110:	5f 4f       	sbci	r21, 0xFF	; 255

00005112 <__divmodsi4_exit>:
    5112:	08 95       	ret

00005114 <__negsi2>:
    5114:	90 95       	com	r25
    5116:	80 95       	com	r24
    5118:	70 95       	com	r23
    511a:	61 95       	neg	r22
    511c:	7f 4f       	sbci	r23, 0xFF	; 255
    511e:	8f 4f       	sbci	r24, 0xFF	; 255
    5120:	9f 4f       	sbci	r25, 0xFF	; 255
    5122:	08 95       	ret

00005124 <__tablejump2__>:
    5124:	ee 0f       	add	r30, r30
    5126:	ff 1f       	adc	r31, r31
    5128:	05 90       	lpm	r0, Z+
    512a:	f4 91       	lpm	r31, Z
    512c:	e0 2d       	mov	r30, r0
    512e:	09 94       	ijmp

00005130 <dtostrf>:
    5130:	ef 92       	push	r14
    5132:	0f 93       	push	r16
    5134:	1f 93       	push	r17
    5136:	cf 93       	push	r28
    5138:	df 93       	push	r29
    513a:	e8 01       	movw	r28, r16
    513c:	34 e0       	ldi	r19, 0x04	; 4
    513e:	47 fd       	sbrc	r20, 7
    5140:	34 e1       	ldi	r19, 0x14	; 20
    5142:	04 2e       	mov	r0, r20
    5144:	00 0c       	add	r0, r0
    5146:	55 0b       	sbc	r21, r21
    5148:	57 ff       	sbrs	r21, 7
    514a:	03 c0       	rjmp	.+6      	; 0x5152 <dtostrf+0x22>
    514c:	51 95       	neg	r21
    514e:	41 95       	neg	r20
    5150:	51 09       	sbc	r21, r1
    5152:	e3 2e       	mov	r14, r19
    5154:	02 2f       	mov	r16, r18
    5156:	24 2f       	mov	r18, r20
    5158:	ae 01       	movw	r20, r28
    515a:	0e 94 bf 28 	call	0x517e	; 0x517e <dtoa_prf>
    515e:	ce 01       	movw	r24, r28
    5160:	df 91       	pop	r29
    5162:	cf 91       	pop	r28
    5164:	1f 91       	pop	r17
    5166:	0f 91       	pop	r16
    5168:	ef 90       	pop	r14
    516a:	08 95       	ret

0000516c <memcpy>:
    516c:	fb 01       	movw	r30, r22
    516e:	dc 01       	movw	r26, r24
    5170:	02 c0       	rjmp	.+4      	; 0x5176 <memcpy+0xa>
    5172:	01 90       	ld	r0, Z+
    5174:	0d 92       	st	X+, r0
    5176:	41 50       	subi	r20, 0x01	; 1
    5178:	50 40       	sbci	r21, 0x00	; 0
    517a:	d8 f7       	brcc	.-10     	; 0x5172 <memcpy+0x6>
    517c:	08 95       	ret

0000517e <dtoa_prf>:
    517e:	a9 e0       	ldi	r26, 0x09	; 9
    5180:	b0 e0       	ldi	r27, 0x00	; 0
    5182:	e5 ec       	ldi	r30, 0xC5	; 197
    5184:	f8 e2       	ldi	r31, 0x28	; 40
    5186:	0c 94 fc 2a 	jmp	0x55f8	; 0x55f8 <__prologue_saves__+0xc>
    518a:	6a 01       	movw	r12, r20
    518c:	f2 2e       	mov	r15, r18
    518e:	b0 2e       	mov	r11, r16
    5190:	10 2f       	mov	r17, r16
    5192:	fb e3       	ldi	r31, 0x3B	; 59
    5194:	af 2e       	mov	r10, r31
    5196:	a0 16       	cp	r10, r16
    5198:	08 f4       	brcc	.+2      	; 0x519c <dtoa_prf+0x1e>
    519a:	1b e3       	ldi	r17, 0x3B	; 59
    519c:	1f 5f       	subi	r17, 0xFF	; 255
    519e:	01 2f       	mov	r16, r17
    51a0:	27 e0       	ldi	r18, 0x07	; 7
    51a2:	ae 01       	movw	r20, r28
    51a4:	4f 5f       	subi	r20, 0xFF	; 255
    51a6:	5f 4f       	sbci	r21, 0xFF	; 255
    51a8:	0e 94 1e 2a 	call	0x543c	; 0x543c <__ftoa_engine>
    51ac:	bc 01       	movw	r22, r24
    51ae:	89 81       	ldd	r24, Y+1	; 0x01
    51b0:	98 2f       	mov	r25, r24
    51b2:	99 70       	andi	r25, 0x09	; 9
    51b4:	91 30       	cpi	r25, 0x01	; 1
    51b6:	09 f4       	brne	.+2      	; 0x51ba <dtoa_prf+0x3c>
    51b8:	3f c0       	rjmp	.+126    	; 0x5238 <dtoa_prf+0xba>
    51ba:	9b e2       	ldi	r25, 0x2B	; 43
    51bc:	e1 fc       	sbrc	r14, 1
    51be:	04 c0       	rjmp	.+8      	; 0x51c8 <dtoa_prf+0x4a>
    51c0:	9e 2d       	mov	r25, r14
    51c2:	91 70       	andi	r25, 0x01	; 1
    51c4:	e0 fc       	sbrc	r14, 0
    51c6:	3a c0       	rjmp	.+116    	; 0x523c <dtoa_prf+0xbe>
    51c8:	5e 2d       	mov	r21, r14
    51ca:	50 71       	andi	r21, 0x10	; 16
    51cc:	e8 2f       	mov	r30, r24
    51ce:	e8 70       	andi	r30, 0x08	; 8
    51d0:	83 ff       	sbrs	r24, 3
    51d2:	46 c0       	rjmp	.+140    	; 0x5260 <dtoa_prf+0xe2>
    51d4:	84 e0       	ldi	r24, 0x04	; 4
    51d6:	91 11       	cpse	r25, r1
    51d8:	01 c0       	rjmp	.+2      	; 0x51dc <dtoa_prf+0x5e>
    51da:	83 e0       	ldi	r24, 0x03	; 3
    51dc:	ef 2d       	mov	r30, r15
    51de:	e8 1b       	sub	r30, r24
    51e0:	8f 15       	cp	r24, r15
    51e2:	08 f0       	brcs	.+2      	; 0x51e6 <dtoa_prf+0x68>
    51e4:	e0 e0       	ldi	r30, 0x00	; 0
    51e6:	d6 01       	movw	r26, r12
    51e8:	8e 2f       	mov	r24, r30
    51ea:	20 e2       	ldi	r18, 0x20	; 32
    51ec:	55 23       	and	r21, r21
    51ee:	51 f1       	breq	.+84     	; 0x5244 <dtoa_prf+0xc6>
    51f0:	99 23       	and	r25, r25
    51f2:	29 f0       	breq	.+10     	; 0x51fe <dtoa_prf+0x80>
    51f4:	d6 01       	movw	r26, r12
    51f6:	9c 93       	st	X, r25
    51f8:	c6 01       	movw	r24, r12
    51fa:	01 96       	adiw	r24, 0x01	; 1
    51fc:	6c 01       	movw	r12, r24
    51fe:	96 01       	movw	r18, r12
    5200:	2d 5f       	subi	r18, 0xFD	; 253
    5202:	3f 4f       	sbci	r19, 0xFF	; 255
    5204:	e2 fe       	sbrs	r14, 2
    5206:	24 c0       	rjmp	.+72     	; 0x5250 <dtoa_prf+0xd2>
    5208:	8e e4       	ldi	r24, 0x4E	; 78
    520a:	d6 01       	movw	r26, r12
    520c:	8c 93       	st	X, r24
    520e:	91 e4       	ldi	r25, 0x41	; 65
    5210:	11 96       	adiw	r26, 0x01	; 1
    5212:	9c 93       	st	X, r25
    5214:	11 97       	sbiw	r26, 0x01	; 1
    5216:	12 96       	adiw	r26, 0x02	; 2
    5218:	8c 93       	st	X, r24
    521a:	d9 01       	movw	r26, r18
    521c:	8e 2f       	mov	r24, r30
    521e:	90 e2       	ldi	r25, 0x20	; 32
    5220:	81 11       	cpse	r24, r1
    5222:	1b c0       	rjmp	.+54     	; 0x525a <dtoa_prf+0xdc>
    5224:	e2 0f       	add	r30, r18
    5226:	f3 2f       	mov	r31, r19
    5228:	f1 1d       	adc	r31, r1
    522a:	10 82       	st	Z, r1
    522c:	8e ef       	ldi	r24, 0xFE	; 254
    522e:	9f ef       	ldi	r25, 0xFF	; 255
    5230:	29 96       	adiw	r28, 0x09	; 9
    5232:	ec e0       	ldi	r30, 0x0C	; 12
    5234:	0c 94 18 2b 	jmp	0x5630	; 0x5630 <__epilogue_restores__+0xc>
    5238:	9d e2       	ldi	r25, 0x2D	; 45
    523a:	c6 cf       	rjmp	.-116    	; 0x51c8 <dtoa_prf+0x4a>
    523c:	90 e2       	ldi	r25, 0x20	; 32
    523e:	c4 cf       	rjmp	.-120    	; 0x51c8 <dtoa_prf+0x4a>
    5240:	2d 93       	st	X+, r18
    5242:	81 50       	subi	r24, 0x01	; 1
    5244:	81 11       	cpse	r24, r1
    5246:	fc cf       	rjmp	.-8      	; 0x5240 <dtoa_prf+0xc2>
    5248:	ce 0e       	add	r12, r30
    524a:	d1 1c       	adc	r13, r1
    524c:	e0 e0       	ldi	r30, 0x00	; 0
    524e:	d0 cf       	rjmp	.-96     	; 0x51f0 <dtoa_prf+0x72>
    5250:	8e e6       	ldi	r24, 0x6E	; 110
    5252:	d6 01       	movw	r26, r12
    5254:	8c 93       	st	X, r24
    5256:	91 e6       	ldi	r25, 0x61	; 97
    5258:	db cf       	rjmp	.-74     	; 0x5210 <dtoa_prf+0x92>
    525a:	9d 93       	st	X+, r25
    525c:	81 50       	subi	r24, 0x01	; 1
    525e:	e0 cf       	rjmp	.-64     	; 0x5220 <dtoa_prf+0xa2>
    5260:	48 2f       	mov	r20, r24
    5262:	44 70       	andi	r20, 0x04	; 4
    5264:	82 ff       	sbrs	r24, 2
    5266:	3d c0       	rjmp	.+122    	; 0x52e2 <dtoa_prf+0x164>
    5268:	84 e0       	ldi	r24, 0x04	; 4
    526a:	91 11       	cpse	r25, r1
    526c:	01 c0       	rjmp	.+2      	; 0x5270 <dtoa_prf+0xf2>
    526e:	83 e0       	ldi	r24, 0x03	; 3
    5270:	8f 15       	cp	r24, r15
    5272:	10 f4       	brcc	.+4      	; 0x5278 <dtoa_prf+0xfa>
    5274:	ef 2d       	mov	r30, r15
    5276:	e8 1b       	sub	r30, r24
    5278:	d6 01       	movw	r26, r12
    527a:	8e 2f       	mov	r24, r30
    527c:	20 e2       	ldi	r18, 0x20	; 32
    527e:	55 23       	and	r21, r21
    5280:	09 f1       	breq	.+66     	; 0x52c4 <dtoa_prf+0x146>
    5282:	99 23       	and	r25, r25
    5284:	29 f0       	breq	.+10     	; 0x5290 <dtoa_prf+0x112>
    5286:	d6 01       	movw	r26, r12
    5288:	9c 93       	st	X, r25
    528a:	c6 01       	movw	r24, r12
    528c:	01 96       	adiw	r24, 0x01	; 1
    528e:	6c 01       	movw	r12, r24
    5290:	96 01       	movw	r18, r12
    5292:	2d 5f       	subi	r18, 0xFD	; 253
    5294:	3f 4f       	sbci	r19, 0xFF	; 255
    5296:	e2 fe       	sbrs	r14, 2
    5298:	1b c0       	rjmp	.+54     	; 0x52d0 <dtoa_prf+0x152>
    529a:	89 e4       	ldi	r24, 0x49	; 73
    529c:	d6 01       	movw	r26, r12
    529e:	8c 93       	st	X, r24
    52a0:	8e e4       	ldi	r24, 0x4E	; 78
    52a2:	11 96       	adiw	r26, 0x01	; 1
    52a4:	8c 93       	st	X, r24
    52a6:	11 97       	sbiw	r26, 0x01	; 1
    52a8:	86 e4       	ldi	r24, 0x46	; 70
    52aa:	12 96       	adiw	r26, 0x02	; 2
    52ac:	8c 93       	st	X, r24
    52ae:	d9 01       	movw	r26, r18
    52b0:	8e 2f       	mov	r24, r30
    52b2:	90 e2       	ldi	r25, 0x20	; 32
    52b4:	88 23       	and	r24, r24
    52b6:	09 f4       	brne	.+2      	; 0x52ba <dtoa_prf+0x13c>
    52b8:	b5 cf       	rjmp	.-150    	; 0x5224 <dtoa_prf+0xa6>
    52ba:	9d 93       	st	X+, r25
    52bc:	81 50       	subi	r24, 0x01	; 1
    52be:	fa cf       	rjmp	.-12     	; 0x52b4 <dtoa_prf+0x136>
    52c0:	2d 93       	st	X+, r18
    52c2:	81 50       	subi	r24, 0x01	; 1
    52c4:	81 11       	cpse	r24, r1
    52c6:	fc cf       	rjmp	.-8      	; 0x52c0 <dtoa_prf+0x142>
    52c8:	ce 0e       	add	r12, r30
    52ca:	d1 1c       	adc	r13, r1
    52cc:	e0 e0       	ldi	r30, 0x00	; 0
    52ce:	d9 cf       	rjmp	.-78     	; 0x5282 <dtoa_prf+0x104>
    52d0:	89 e6       	ldi	r24, 0x69	; 105
    52d2:	d6 01       	movw	r26, r12
    52d4:	8c 93       	st	X, r24
    52d6:	8e e6       	ldi	r24, 0x6E	; 110
    52d8:	11 96       	adiw	r26, 0x01	; 1
    52da:	8c 93       	st	X, r24
    52dc:	11 97       	sbiw	r26, 0x01	; 1
    52de:	86 e6       	ldi	r24, 0x66	; 102
    52e0:	e4 cf       	rjmp	.-56     	; 0x52aa <dtoa_prf+0x12c>
    52e2:	9b 01       	movw	r18, r22
    52e4:	77 ff       	sbrs	r23, 7
    52e6:	02 c0       	rjmp	.+4      	; 0x52ec <dtoa_prf+0x16e>
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	20 e0       	ldi	r18, 0x00	; 0
    52ec:	a1 e0       	ldi	r26, 0x01	; 1
    52ee:	b0 e0       	ldi	r27, 0x00	; 0
    52f0:	91 11       	cpse	r25, r1
    52f2:	02 c0       	rjmp	.+4      	; 0x52f8 <dtoa_prf+0x17a>
    52f4:	b0 e0       	ldi	r27, 0x00	; 0
    52f6:	a0 e0       	ldi	r26, 0x00	; 0
    52f8:	f9 01       	movw	r30, r18
    52fa:	31 96       	adiw	r30, 0x01	; 1
    52fc:	ae 0f       	add	r26, r30
    52fe:	bf 1f       	adc	r27, r31
    5300:	8b 2c       	mov	r8, r11
    5302:	91 2c       	mov	r9, r1
    5304:	bb 20       	and	r11, r11
    5306:	09 f4       	brne	.+2      	; 0x530a <dtoa_prf+0x18c>
    5308:	61 c0       	rjmp	.+194    	; 0x53cc <dtoa_prf+0x24e>
    530a:	54 01       	movw	r10, r8
    530c:	ef ef       	ldi	r30, 0xFF	; 255
    530e:	ae 1a       	sub	r10, r30
    5310:	be 0a       	sbc	r11, r30
    5312:	aa 0d       	add	r26, r10
    5314:	bb 1d       	adc	r27, r11
    5316:	fa 16       	cp	r15, r26
    5318:	1b 06       	cpc	r1, r27
    531a:	19 f0       	breq	.+6      	; 0x5322 <dtoa_prf+0x1a4>
    531c:	14 f0       	brlt	.+4      	; 0x5322 <dtoa_prf+0x1a4>
    531e:	4f 2d       	mov	r20, r15
    5320:	4a 1b       	sub	r20, r26
    5322:	51 11       	cpse	r21, r1
    5324:	88 c0       	rjmp	.+272    	; 0x5436 <dtoa_prf+0x2b8>
    5326:	e3 fc       	sbrc	r14, 3
    5328:	59 c0       	rjmp	.+178    	; 0x53dc <dtoa_prf+0x25e>
    532a:	76 01       	movw	r14, r12
    532c:	a4 2f       	mov	r26, r20
    532e:	b0 e2       	ldi	r27, 0x20	; 32
    5330:	a1 11       	cpse	r26, r1
    5332:	4f c0       	rjmp	.+158    	; 0x53d2 <dtoa_prf+0x254>
    5334:	c4 0e       	add	r12, r20
    5336:	d1 1c       	adc	r13, r1
    5338:	99 23       	and	r25, r25
    533a:	09 f4       	brne	.+2      	; 0x533e <dtoa_prf+0x1c0>
    533c:	5b c0       	rjmp	.+182    	; 0x53f4 <dtoa_prf+0x276>
    533e:	40 e0       	ldi	r20, 0x00	; 0
    5340:	d6 01       	movw	r26, r12
    5342:	11 96       	adiw	r26, 0x01	; 1
    5344:	f6 01       	movw	r30, r12
    5346:	90 83       	st	Z, r25
    5348:	6d 01       	movw	r12, r26
    534a:	55 23       	and	r21, r21
    534c:	09 f4       	brne	.+2      	; 0x5350 <dtoa_prf+0x1d2>
    534e:	48 c0       	rjmp	.+144    	; 0x53e0 <dtoa_prf+0x262>
    5350:	01 2f       	mov	r16, r17
    5352:	06 0f       	add	r16, r22
    5354:	9a 81       	ldd	r25, Y+2	; 0x02
    5356:	58 2f       	mov	r21, r24
    5358:	50 71       	andi	r21, 0x10	; 16
    535a:	84 ff       	sbrs	r24, 4
    535c:	03 c0       	rjmp	.+6      	; 0x5364 <dtoa_prf+0x1e6>
    535e:	91 33       	cpi	r25, 0x31	; 49
    5360:	09 f4       	brne	.+2      	; 0x5364 <dtoa_prf+0x1e6>
    5362:	01 50       	subi	r16, 0x01	; 1
    5364:	10 16       	cp	r1, r16
    5366:	0c f0       	brlt	.+2      	; 0x536a <dtoa_prf+0x1ec>
    5368:	47 c0       	rjmp	.+142    	; 0x53f8 <dtoa_prf+0x27a>
    536a:	09 30       	cpi	r16, 0x09	; 9
    536c:	08 f0       	brcs	.+2      	; 0x5370 <dtoa_prf+0x1f2>
    536e:	08 e0       	ldi	r16, 0x08	; 8
    5370:	ee e2       	ldi	r30, 0x2E	; 46
    5372:	fe 2e       	mov	r15, r30
    5374:	5b 01       	movw	r10, r22
    5376:	a0 1a       	sub	r10, r16
    5378:	b1 08       	sbc	r11, r1
    537a:	85 01       	movw	r16, r10
    537c:	91 94       	neg	r9
    537e:	81 94       	neg	r8
    5380:	91 08       	sbc	r9, r1
    5382:	2f 3f       	cpi	r18, 0xFF	; 255
    5384:	32 07       	cpc	r19, r18
    5386:	29 f4       	brne	.+10     	; 0x5392 <dtoa_prf+0x214>
    5388:	d6 01       	movw	r26, r12
    538a:	fc 92       	st	X, r15
    538c:	f6 01       	movw	r30, r12
    538e:	31 96       	adiw	r30, 0x01	; 1
    5390:	6f 01       	movw	r12, r30
    5392:	62 17       	cp	r22, r18
    5394:	73 07       	cpc	r23, r19
    5396:	94 f1       	brlt	.+100    	; 0x53fc <dtoa_prf+0x27e>
    5398:	02 17       	cp	r16, r18
    539a:	13 07       	cpc	r17, r19
    539c:	7c f5       	brge	.+94     	; 0x53fc <dtoa_prf+0x27e>
    539e:	db 01       	movw	r26, r22
    53a0:	a2 1b       	sub	r26, r18
    53a2:	b3 0b       	sbc	r27, r19
    53a4:	aa 24       	eor	r10, r10
    53a6:	a3 94       	inc	r10
    53a8:	b1 2c       	mov	r11, r1
    53aa:	ac 0e       	add	r10, r28
    53ac:	bd 1e       	adc	r11, r29
    53ae:	aa 0d       	add	r26, r10
    53b0:	bb 1d       	adc	r27, r11
    53b2:	11 96       	adiw	r26, 0x01	; 1
    53b4:	8c 91       	ld	r24, X
    53b6:	21 50       	subi	r18, 0x01	; 1
    53b8:	31 09       	sbc	r19, r1
    53ba:	d6 01       	movw	r26, r12
    53bc:	11 96       	adiw	r26, 0x01	; 1
    53be:	28 15       	cp	r18, r8
    53c0:	39 05       	cpc	r19, r9
    53c2:	f4 f0       	brlt	.+60     	; 0x5400 <dtoa_prf+0x282>
    53c4:	f6 01       	movw	r30, r12
    53c6:	80 83       	st	Z, r24
    53c8:	6d 01       	movw	r12, r26
    53ca:	db cf       	rjmp	.-74     	; 0x5382 <dtoa_prf+0x204>
    53cc:	b1 2c       	mov	r11, r1
    53ce:	a1 2c       	mov	r10, r1
    53d0:	a0 cf       	rjmp	.-192    	; 0x5312 <dtoa_prf+0x194>
    53d2:	f7 01       	movw	r30, r14
    53d4:	b1 93       	st	Z+, r27
    53d6:	7f 01       	movw	r14, r30
    53d8:	a1 50       	subi	r26, 0x01	; 1
    53da:	aa cf       	rjmp	.-172    	; 0x5330 <dtoa_prf+0x1b2>
    53dc:	91 11       	cpse	r25, r1
    53de:	b0 cf       	rjmp	.-160    	; 0x5340 <dtoa_prf+0x1c2>
    53e0:	d6 01       	movw	r26, r12
    53e2:	94 2f       	mov	r25, r20
    53e4:	50 e3       	ldi	r21, 0x30	; 48
    53e6:	02 c0       	rjmp	.+4      	; 0x53ec <dtoa_prf+0x26e>
    53e8:	5d 93       	st	X+, r21
    53ea:	91 50       	subi	r25, 0x01	; 1
    53ec:	91 11       	cpse	r25, r1
    53ee:	fc cf       	rjmp	.-8      	; 0x53e8 <dtoa_prf+0x26a>
    53f0:	c4 0e       	add	r12, r20
    53f2:	d1 1c       	adc	r13, r1
    53f4:	40 e0       	ldi	r20, 0x00	; 0
    53f6:	ac cf       	rjmp	.-168    	; 0x5350 <dtoa_prf+0x1d2>
    53f8:	01 e0       	ldi	r16, 0x01	; 1
    53fa:	ba cf       	rjmp	.-140    	; 0x5370 <dtoa_prf+0x1f2>
    53fc:	80 e3       	ldi	r24, 0x30	; 48
    53fe:	db cf       	rjmp	.-74     	; 0x53b6 <dtoa_prf+0x238>
    5400:	62 17       	cp	r22, r18
    5402:	73 07       	cpc	r23, r19
    5404:	31 f4       	brne	.+12     	; 0x5412 <dtoa_prf+0x294>
    5406:	96 33       	cpi	r25, 0x36	; 54
    5408:	88 f4       	brcc	.+34     	; 0x542c <dtoa_prf+0x2ae>
    540a:	95 33       	cpi	r25, 0x35	; 53
    540c:	11 f4       	brne	.+4      	; 0x5412 <dtoa_prf+0x294>
    540e:	55 23       	and	r21, r21
    5410:	69 f0       	breq	.+26     	; 0x542c <dtoa_prf+0x2ae>
    5412:	f6 01       	movw	r30, r12
    5414:	80 83       	st	Z, r24
    5416:	fd 01       	movw	r30, r26
    5418:	84 2f       	mov	r24, r20
    541a:	90 e2       	ldi	r25, 0x20	; 32
    541c:	81 11       	cpse	r24, r1
    541e:	08 c0       	rjmp	.+16     	; 0x5430 <dtoa_prf+0x2b2>
    5420:	a4 0f       	add	r26, r20
    5422:	b1 1d       	adc	r27, r1
    5424:	1c 92       	st	X, r1
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	80 e0       	ldi	r24, 0x00	; 0
    542a:	02 cf       	rjmp	.-508    	; 0x5230 <dtoa_prf+0xb2>
    542c:	81 e3       	ldi	r24, 0x31	; 49
    542e:	f1 cf       	rjmp	.-30     	; 0x5412 <dtoa_prf+0x294>
    5430:	91 93       	st	Z+, r25
    5432:	81 50       	subi	r24, 0x01	; 1
    5434:	f3 cf       	rjmp	.-26     	; 0x541c <dtoa_prf+0x29e>
    5436:	91 11       	cpse	r25, r1
    5438:	83 cf       	rjmp	.-250    	; 0x5340 <dtoa_prf+0x1c2>
    543a:	8a cf       	rjmp	.-236    	; 0x5350 <dtoa_prf+0x1d2>

0000543c <__ftoa_engine>:
    543c:	28 30       	cpi	r18, 0x08	; 8
    543e:	08 f0       	brcs	.+2      	; 0x5442 <__ftoa_engine+0x6>
    5440:	27 e0       	ldi	r18, 0x07	; 7
    5442:	33 27       	eor	r19, r19
    5444:	da 01       	movw	r26, r20
    5446:	99 0f       	add	r25, r25
    5448:	31 1d       	adc	r19, r1
    544a:	87 fd       	sbrc	r24, 7
    544c:	91 60       	ori	r25, 0x01	; 1
    544e:	00 96       	adiw	r24, 0x00	; 0
    5450:	61 05       	cpc	r22, r1
    5452:	71 05       	cpc	r23, r1
    5454:	39 f4       	brne	.+14     	; 0x5464 <__ftoa_engine+0x28>
    5456:	32 60       	ori	r19, 0x02	; 2
    5458:	2e 5f       	subi	r18, 0xFE	; 254
    545a:	3d 93       	st	X+, r19
    545c:	30 e3       	ldi	r19, 0x30	; 48
    545e:	2a 95       	dec	r18
    5460:	e1 f7       	brne	.-8      	; 0x545a <__ftoa_engine+0x1e>
    5462:	08 95       	ret
    5464:	9f 3f       	cpi	r25, 0xFF	; 255
    5466:	30 f0       	brcs	.+12     	; 0x5474 <__ftoa_engine+0x38>
    5468:	80 38       	cpi	r24, 0x80	; 128
    546a:	71 05       	cpc	r23, r1
    546c:	61 05       	cpc	r22, r1
    546e:	09 f0       	breq	.+2      	; 0x5472 <__ftoa_engine+0x36>
    5470:	3c 5f       	subi	r19, 0xFC	; 252
    5472:	3c 5f       	subi	r19, 0xFC	; 252
    5474:	3d 93       	st	X+, r19
    5476:	91 30       	cpi	r25, 0x01	; 1
    5478:	08 f0       	brcs	.+2      	; 0x547c <__ftoa_engine+0x40>
    547a:	80 68       	ori	r24, 0x80	; 128
    547c:	91 1d       	adc	r25, r1
    547e:	df 93       	push	r29
    5480:	cf 93       	push	r28
    5482:	1f 93       	push	r17
    5484:	0f 93       	push	r16
    5486:	ff 92       	push	r15
    5488:	ef 92       	push	r14
    548a:	19 2f       	mov	r17, r25
    548c:	98 7f       	andi	r25, 0xF8	; 248
    548e:	96 95       	lsr	r25
    5490:	e9 2f       	mov	r30, r25
    5492:	96 95       	lsr	r25
    5494:	96 95       	lsr	r25
    5496:	e9 0f       	add	r30, r25
    5498:	ff 27       	eor	r31, r31
    549a:	e8 5f       	subi	r30, 0xF8	; 248
    549c:	fe 4f       	sbci	r31, 0xFE	; 254
    549e:	99 27       	eor	r25, r25
    54a0:	33 27       	eor	r19, r19
    54a2:	ee 24       	eor	r14, r14
    54a4:	ff 24       	eor	r15, r15
    54a6:	a7 01       	movw	r20, r14
    54a8:	e7 01       	movw	r28, r14
    54aa:	05 90       	lpm	r0, Z+
    54ac:	08 94       	sec
    54ae:	07 94       	ror	r0
    54b0:	28 f4       	brcc	.+10     	; 0x54bc <__ftoa_engine+0x80>
    54b2:	36 0f       	add	r19, r22
    54b4:	e7 1e       	adc	r14, r23
    54b6:	f8 1e       	adc	r15, r24
    54b8:	49 1f       	adc	r20, r25
    54ba:	51 1d       	adc	r21, r1
    54bc:	66 0f       	add	r22, r22
    54be:	77 1f       	adc	r23, r23
    54c0:	88 1f       	adc	r24, r24
    54c2:	99 1f       	adc	r25, r25
    54c4:	06 94       	lsr	r0
    54c6:	a1 f7       	brne	.-24     	; 0x54b0 <__ftoa_engine+0x74>
    54c8:	05 90       	lpm	r0, Z+
    54ca:	07 94       	ror	r0
    54cc:	28 f4       	brcc	.+10     	; 0x54d8 <__ftoa_engine+0x9c>
    54ce:	e7 0e       	add	r14, r23
    54d0:	f8 1e       	adc	r15, r24
    54d2:	49 1f       	adc	r20, r25
    54d4:	56 1f       	adc	r21, r22
    54d6:	c1 1d       	adc	r28, r1
    54d8:	77 0f       	add	r23, r23
    54da:	88 1f       	adc	r24, r24
    54dc:	99 1f       	adc	r25, r25
    54de:	66 1f       	adc	r22, r22
    54e0:	06 94       	lsr	r0
    54e2:	a1 f7       	brne	.-24     	; 0x54cc <__ftoa_engine+0x90>
    54e4:	05 90       	lpm	r0, Z+
    54e6:	07 94       	ror	r0
    54e8:	28 f4       	brcc	.+10     	; 0x54f4 <__ftoa_engine+0xb8>
    54ea:	f8 0e       	add	r15, r24
    54ec:	49 1f       	adc	r20, r25
    54ee:	56 1f       	adc	r21, r22
    54f0:	c7 1f       	adc	r28, r23
    54f2:	d1 1d       	adc	r29, r1
    54f4:	88 0f       	add	r24, r24
    54f6:	99 1f       	adc	r25, r25
    54f8:	66 1f       	adc	r22, r22
    54fa:	77 1f       	adc	r23, r23
    54fc:	06 94       	lsr	r0
    54fe:	a1 f7       	brne	.-24     	; 0x54e8 <__ftoa_engine+0xac>
    5500:	05 90       	lpm	r0, Z+
    5502:	07 94       	ror	r0
    5504:	20 f4       	brcc	.+8      	; 0x550e <__ftoa_engine+0xd2>
    5506:	49 0f       	add	r20, r25
    5508:	56 1f       	adc	r21, r22
    550a:	c7 1f       	adc	r28, r23
    550c:	d8 1f       	adc	r29, r24
    550e:	99 0f       	add	r25, r25
    5510:	66 1f       	adc	r22, r22
    5512:	77 1f       	adc	r23, r23
    5514:	88 1f       	adc	r24, r24
    5516:	06 94       	lsr	r0
    5518:	a9 f7       	brne	.-22     	; 0x5504 <__ftoa_engine+0xc8>
    551a:	84 91       	lpm	r24, Z
    551c:	10 95       	com	r17
    551e:	17 70       	andi	r17, 0x07	; 7
    5520:	41 f0       	breq	.+16     	; 0x5532 <__ftoa_engine+0xf6>
    5522:	d6 95       	lsr	r29
    5524:	c7 95       	ror	r28
    5526:	57 95       	ror	r21
    5528:	47 95       	ror	r20
    552a:	f7 94       	ror	r15
    552c:	e7 94       	ror	r14
    552e:	1a 95       	dec	r17
    5530:	c1 f7       	brne	.-16     	; 0x5522 <__ftoa_engine+0xe6>
    5532:	ee ea       	ldi	r30, 0xAE	; 174
    5534:	f0 e0       	ldi	r31, 0x00	; 0
    5536:	68 94       	set
    5538:	15 90       	lpm	r1, Z+
    553a:	15 91       	lpm	r17, Z+
    553c:	35 91       	lpm	r19, Z+
    553e:	65 91       	lpm	r22, Z+
    5540:	95 91       	lpm	r25, Z+
    5542:	05 90       	lpm	r0, Z+
    5544:	7f e2       	ldi	r23, 0x2F	; 47
    5546:	73 95       	inc	r23
    5548:	e1 18       	sub	r14, r1
    554a:	f1 0a       	sbc	r15, r17
    554c:	43 0b       	sbc	r20, r19
    554e:	56 0b       	sbc	r21, r22
    5550:	c9 0b       	sbc	r28, r25
    5552:	d0 09       	sbc	r29, r0
    5554:	c0 f7       	brcc	.-16     	; 0x5546 <__ftoa_engine+0x10a>
    5556:	e1 0c       	add	r14, r1
    5558:	f1 1e       	adc	r15, r17
    555a:	43 1f       	adc	r20, r19
    555c:	56 1f       	adc	r21, r22
    555e:	c9 1f       	adc	r28, r25
    5560:	d0 1d       	adc	r29, r0
    5562:	7e f4       	brtc	.+30     	; 0x5582 <__ftoa_engine+0x146>
    5564:	70 33       	cpi	r23, 0x30	; 48
    5566:	11 f4       	brne	.+4      	; 0x556c <__ftoa_engine+0x130>
    5568:	8a 95       	dec	r24
    556a:	e6 cf       	rjmp	.-52     	; 0x5538 <__ftoa_engine+0xfc>
    556c:	e8 94       	clt
    556e:	01 50       	subi	r16, 0x01	; 1
    5570:	30 f0       	brcs	.+12     	; 0x557e <__ftoa_engine+0x142>
    5572:	08 0f       	add	r16, r24
    5574:	0a f4       	brpl	.+2      	; 0x5578 <__ftoa_engine+0x13c>
    5576:	00 27       	eor	r16, r16
    5578:	02 17       	cp	r16, r18
    557a:	08 f4       	brcc	.+2      	; 0x557e <__ftoa_engine+0x142>
    557c:	20 2f       	mov	r18, r16
    557e:	23 95       	inc	r18
    5580:	02 2f       	mov	r16, r18
    5582:	7a 33       	cpi	r23, 0x3A	; 58
    5584:	28 f0       	brcs	.+10     	; 0x5590 <__ftoa_engine+0x154>
    5586:	79 e3       	ldi	r23, 0x39	; 57
    5588:	7d 93       	st	X+, r23
    558a:	2a 95       	dec	r18
    558c:	e9 f7       	brne	.-6      	; 0x5588 <__ftoa_engine+0x14c>
    558e:	10 c0       	rjmp	.+32     	; 0x55b0 <__ftoa_engine+0x174>
    5590:	7d 93       	st	X+, r23
    5592:	2a 95       	dec	r18
    5594:	89 f6       	brne	.-94     	; 0x5538 <__ftoa_engine+0xfc>
    5596:	06 94       	lsr	r0
    5598:	97 95       	ror	r25
    559a:	67 95       	ror	r22
    559c:	37 95       	ror	r19
    559e:	17 95       	ror	r17
    55a0:	17 94       	ror	r1
    55a2:	e1 18       	sub	r14, r1
    55a4:	f1 0a       	sbc	r15, r17
    55a6:	43 0b       	sbc	r20, r19
    55a8:	56 0b       	sbc	r21, r22
    55aa:	c9 0b       	sbc	r28, r25
    55ac:	d0 09       	sbc	r29, r0
    55ae:	98 f0       	brcs	.+38     	; 0x55d6 <__ftoa_engine+0x19a>
    55b0:	23 95       	inc	r18
    55b2:	7e 91       	ld	r23, -X
    55b4:	73 95       	inc	r23
    55b6:	7a 33       	cpi	r23, 0x3A	; 58
    55b8:	08 f0       	brcs	.+2      	; 0x55bc <__ftoa_engine+0x180>
    55ba:	70 e3       	ldi	r23, 0x30	; 48
    55bc:	7c 93       	st	X, r23
    55be:	20 13       	cpse	r18, r16
    55c0:	b8 f7       	brcc	.-18     	; 0x55b0 <__ftoa_engine+0x174>
    55c2:	7e 91       	ld	r23, -X
    55c4:	70 61       	ori	r23, 0x10	; 16
    55c6:	7d 93       	st	X+, r23
    55c8:	30 f0       	brcs	.+12     	; 0x55d6 <__ftoa_engine+0x19a>
    55ca:	83 95       	inc	r24
    55cc:	71 e3       	ldi	r23, 0x31	; 49
    55ce:	7d 93       	st	X+, r23
    55d0:	70 e3       	ldi	r23, 0x30	; 48
    55d2:	2a 95       	dec	r18
    55d4:	e1 f7       	brne	.-8      	; 0x55ce <__ftoa_engine+0x192>
    55d6:	11 24       	eor	r1, r1
    55d8:	ef 90       	pop	r14
    55da:	ff 90       	pop	r15
    55dc:	0f 91       	pop	r16
    55de:	1f 91       	pop	r17
    55e0:	cf 91       	pop	r28
    55e2:	df 91       	pop	r29
    55e4:	99 27       	eor	r25, r25
    55e6:	87 fd       	sbrc	r24, 7
    55e8:	90 95       	com	r25
    55ea:	08 95       	ret

000055ec <__prologue_saves__>:
    55ec:	2f 92       	push	r2
    55ee:	3f 92       	push	r3
    55f0:	4f 92       	push	r4
    55f2:	5f 92       	push	r5
    55f4:	6f 92       	push	r6
    55f6:	7f 92       	push	r7
    55f8:	8f 92       	push	r8
    55fa:	9f 92       	push	r9
    55fc:	af 92       	push	r10
    55fe:	bf 92       	push	r11
    5600:	cf 92       	push	r12
    5602:	df 92       	push	r13
    5604:	ef 92       	push	r14
    5606:	ff 92       	push	r15
    5608:	0f 93       	push	r16
    560a:	1f 93       	push	r17
    560c:	cf 93       	push	r28
    560e:	df 93       	push	r29
    5610:	cd b7       	in	r28, 0x3d	; 61
    5612:	de b7       	in	r29, 0x3e	; 62
    5614:	ca 1b       	sub	r28, r26
    5616:	db 0b       	sbc	r29, r27
    5618:	0f b6       	in	r0, 0x3f	; 63
    561a:	f8 94       	cli
    561c:	de bf       	out	0x3e, r29	; 62
    561e:	0f be       	out	0x3f, r0	; 63
    5620:	cd bf       	out	0x3d, r28	; 61
    5622:	09 94       	ijmp

00005624 <__epilogue_restores__>:
    5624:	2a 88       	ldd	r2, Y+18	; 0x12
    5626:	39 88       	ldd	r3, Y+17	; 0x11
    5628:	48 88       	ldd	r4, Y+16	; 0x10
    562a:	5f 84       	ldd	r5, Y+15	; 0x0f
    562c:	6e 84       	ldd	r6, Y+14	; 0x0e
    562e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5630:	8c 84       	ldd	r8, Y+12	; 0x0c
    5632:	9b 84       	ldd	r9, Y+11	; 0x0b
    5634:	aa 84       	ldd	r10, Y+10	; 0x0a
    5636:	b9 84       	ldd	r11, Y+9	; 0x09
    5638:	c8 84       	ldd	r12, Y+8	; 0x08
    563a:	df 80       	ldd	r13, Y+7	; 0x07
    563c:	ee 80       	ldd	r14, Y+6	; 0x06
    563e:	fd 80       	ldd	r15, Y+5	; 0x05
    5640:	0c 81       	ldd	r16, Y+4	; 0x04
    5642:	1b 81       	ldd	r17, Y+3	; 0x03
    5644:	aa 81       	ldd	r26, Y+2	; 0x02
    5646:	b9 81       	ldd	r27, Y+1	; 0x01
    5648:	ce 0f       	add	r28, r30
    564a:	d1 1d       	adc	r29, r1
    564c:	0f b6       	in	r0, 0x3f	; 63
    564e:	f8 94       	cli
    5650:	de bf       	out	0x3e, r29	; 62
    5652:	0f be       	out	0x3f, r0	; 63
    5654:	cd bf       	out	0x3d, r28	; 61
    5656:	ed 01       	movw	r28, r26
    5658:	08 95       	ret

0000565a <_exit>:
    565a:	f8 94       	cli

0000565c <__stop_program>:
    565c:	ff cf       	rjmp	.-2      	; 0x565c <__stop_program>
