
RTOS_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000648  008000c6  008000c6  00000f6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000323f  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da7  00000000  00000000  000044b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ad0  00000000  00000000  0000525e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000734  00000000  00000000  00006d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000111e  00000000  00000000  00007464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002abc  00000000  00000000  00008582  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	27 e0       	ldi	r18, 0x07	; 7
  78:	a6 ec       	ldi	r26, 0xC6	; 198
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 30       	cpi	r26, 0x0E	; 14
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <main>
  8a:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
  98:	0e 94 ef 03 	call	0x7de	; 0x7de <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
  9c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__data_end>
  a0:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <__data_end+0x1>
  a4:	89 2b       	or	r24, r25
  a6:	31 f4       	brne	.+12     	; 0xb4 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  a8:	8a ec       	ldi	r24, 0xCA	; 202
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <__data_end+0x1>
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
  b4:	20 97       	sbiw	r28, 0x00	; 0
  b6:	c9 f0       	breq	.+50     	; 0xea <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  b8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <xNextFreeByte>
  bc:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <xNextFreeByte+0x1>
  c0:	9e 01       	movw	r18, r28
  c2:	28 0f       	add	r18, r24
  c4:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
  c6:	2b 3d       	cpi	r18, 0xDB	; 219
  c8:	45 e0       	ldi	r20, 0x05	; 5
  ca:	34 07       	cpc	r19, r20
  cc:	88 f4       	brcc	.+34     	; 0xf0 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  ce:	82 17       	cp	r24, r18
  d0:	93 07       	cpc	r25, r19
  d2:	88 f4       	brcc	.+34     	; 0xf6 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
  d4:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__data_end>
  d8:	d0 91 c7 00 	lds	r29, 0x00C7	; 0x8000c7 <__data_end+0x1>
  dc:	c8 0f       	add	r28, r24
  de:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
  e0:	30 93 c9 00 	sts	0x00C9, r19	; 0x8000c9 <xNextFreeByte+0x1>
  e4:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <xNextFreeByte>
  e8:	08 c0       	rjmp	.+16     	; 0xfa <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	05 c0       	rjmp	.+10     	; 0xfa <pvPortMalloc+0x68>
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <pvPortMalloc+0x68>
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
  fa:	0e 94 14 05 	call	0xa28	; 0xa28 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
  fe:	ce 01       	movw	r24, r28
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 106:	08 95       	ret

00000108 <vListInitialise>:
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );

    traceRETURN_vListInsert();
}
 108:	fc 01       	movw	r30, r24
 10a:	03 96       	adiw	r24, 0x03	; 3
 10c:	92 83       	std	Z+2, r25	; 0x02
 10e:	81 83       	std	Z+1, r24	; 0x01
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	3f ef       	ldi	r19, 0xFF	; 255
 114:	34 83       	std	Z+4, r19	; 0x04
 116:	23 83       	std	Z+3, r18	; 0x03
 118:	96 83       	std	Z+6, r25	; 0x06
 11a:	85 83       	std	Z+5, r24	; 0x05
 11c:	90 87       	std	Z+8, r25	; 0x08
 11e:	87 83       	std	Z+7, r24	; 0x07
 120:	10 82       	st	Z, r1
 122:	08 95       	ret

00000124 <vListInitialiseItem>:
 124:	fc 01       	movw	r30, r24
 126:	11 86       	std	Z+9, r1	; 0x09
 128:	10 86       	std	Z+8, r1	; 0x08
 12a:	08 95       	ret

0000012c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	fc 01       	movw	r30, r24
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 132:	a0 85       	ldd	r26, Z+8	; 0x08
 134:	b1 85       	ldd	r27, Z+9	; 0x09

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 136:	c2 81       	ldd	r28, Z+2	; 0x02
 138:	d3 81       	ldd	r29, Z+3	; 0x03
 13a:	84 81       	ldd	r24, Z+4	; 0x04
 13c:	95 81       	ldd	r25, Z+5	; 0x05
 13e:	9d 83       	std	Y+5, r25	; 0x05
 140:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 142:	c4 81       	ldd	r28, Z+4	; 0x04
 144:	d5 81       	ldd	r29, Z+5	; 0x05
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	93 81       	ldd	r25, Z+3	; 0x03
 14a:	9b 83       	std	Y+3, r25	; 0x03
 14c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	8d 91       	ld	r24, X+
 152:	9c 91       	ld	r25, X
 154:	12 97       	sbiw	r26, 0x02	; 2
 156:	e8 17       	cp	r30, r24
 158:	f9 07       	cpc	r31, r25
 15a:	31 f4       	brne	.+12     	; 0x168 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 15c:	84 81       	ldd	r24, Z+4	; 0x04
 15e:	95 81       	ldd	r25, Z+5	; 0x05
 160:	12 96       	adiw	r26, 0x02	; 2
 162:	9c 93       	st	X, r25
 164:	8e 93       	st	-X, r24
 166:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 168:	11 86       	std	Z+9, r1	; 0x09
 16a:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 16c:	8c 91       	ld	r24, X
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	8c 93       	st	X, r24

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <pxPortInitialiseStack>:
    return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 178:	31 e1       	ldi	r19, 0x11	; 17
 17a:	fc 01       	movw	r30, r24
 17c:	30 83       	st	Z, r19
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	22 e2       	ldi	r18, 0x22	; 34
 182:	20 83       	st	Z, r18
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	a3 e3       	ldi	r26, 0x33	; 51
 188:	a0 83       	st	Z, r26
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	60 83       	st	Z, r22
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	70 83       	st	Z, r23
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	10 82       	st	Z, r1
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	60 e8       	ldi	r22, 0x80	; 128
 19a:	60 83       	st	Z, r22
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	10 82       	st	Z, r1
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	60 83       	st	Z, r22
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	63 e0       	ldi	r22, 0x03	; 3
 1aa:	60 83       	st	Z, r22
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	64 e0       	ldi	r22, 0x04	; 4
 1b0:	60 83       	st	Z, r22
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	65 e0       	ldi	r22, 0x05	; 5
 1b6:	60 83       	st	Z, r22
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	66 e0       	ldi	r22, 0x06	; 6
 1bc:	60 83       	st	Z, r22
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	67 e0       	ldi	r22, 0x07	; 7
 1c2:	60 83       	st	Z, r22
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	68 e0       	ldi	r22, 0x08	; 8
 1c8:	60 83       	st	Z, r22
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	69 e0       	ldi	r22, 0x09	; 9
 1ce:	60 83       	st	Z, r22
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	60 e1       	ldi	r22, 0x10	; 16
 1d4:	60 83       	st	Z, r22
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	30 83       	st	Z, r19
 1da:	31 97       	sbiw	r30, 0x01	; 1
 1dc:	32 e1       	ldi	r19, 0x12	; 18
 1de:	30 83       	st	Z, r19
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	33 e1       	ldi	r19, 0x13	; 19
 1e4:	30 83       	st	Z, r19
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	34 e1       	ldi	r19, 0x14	; 20
 1ea:	30 83       	st	Z, r19
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	35 e1       	ldi	r19, 0x15	; 21
 1f0:	30 83       	st	Z, r19
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	36 e1       	ldi	r19, 0x16	; 22
 1f6:	30 83       	st	Z, r19
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	37 e1       	ldi	r19, 0x17	; 23
 1fc:	30 83       	st	Z, r19
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	38 e1       	ldi	r19, 0x18	; 24
 202:	30 83       	st	Z, r19
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	39 e1       	ldi	r19, 0x19	; 25
 208:	30 83       	st	Z, r19
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	30 e2       	ldi	r19, 0x20	; 32
 20e:	30 83       	st	Z, r19
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	31 e2       	ldi	r19, 0x21	; 33
 214:	30 83       	st	Z, r19
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	20 83       	st	Z, r18
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	23 e2       	ldi	r18, 0x23	; 35
 21e:	20 83       	st	Z, r18
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	40 83       	st	Z, r20
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	50 83       	st	Z, r21
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	26 e2       	ldi	r18, 0x26	; 38
 22c:	20 83       	st	Z, r18
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	27 e2       	ldi	r18, 0x27	; 39
 232:	20 83       	st	Z, r18
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	28 e2       	ldi	r18, 0x28	; 40
 238:	20 83       	st	Z, r18
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	29 e2       	ldi	r18, 0x29	; 41
 23e:	20 83       	st	Z, r18
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	20 e3       	ldi	r18, 0x30	; 48
 244:	20 83       	st	Z, r18
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	21 e3       	ldi	r18, 0x31	; 49
 24a:	20 83       	st	Z, r18
 24c:	86 97       	sbiw	r24, 0x26	; 38
 24e:	08 95       	ret

00000250 <xPortStartScheduler>:
 250:	1b bc       	out	0x2b, r1	; 43
 252:	8c e7       	ldi	r24, 0x7C	; 124
 254:	8a bd       	out	0x2a, r24	; 42
 256:	8b e0       	ldi	r24, 0x0B	; 11
 258:	8e bd       	out	0x2e, r24	; 46
 25a:	89 b7       	in	r24, 0x39	; 57
 25c:	80 61       	ori	r24, 0x10	; 16
 25e:	89 bf       	out	0x39, r24	; 57
 260:	a0 91 02 07 	lds	r26, 0x0702	; 0x800702 <pxCurrentTCB>
 264:	b0 91 03 07 	lds	r27, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 268:	cd 91       	ld	r28, X+
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	dd 91       	ld	r29, X+
 26e:	de bf       	out	0x3e, r29	; 62
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	af 90       	pop	r10
 29c:	9f 90       	pop	r9
 29e:	8f 90       	pop	r8
 2a0:	7f 90       	pop	r7
 2a2:	6f 90       	pop	r6
 2a4:	5f 90       	pop	r5
 2a6:	4f 90       	pop	r4
 2a8:	3f 90       	pop	r3
 2aa:	2f 90       	pop	r2
 2ac:	1f 90       	pop	r1
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	08 95       	ret
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	08 95       	ret

000002ba <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	0f 92       	push	r0
 2c2:	1f 92       	push	r1
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 92       	push	r2
 2c8:	3f 92       	push	r3
 2ca:	4f 92       	push	r4
 2cc:	5f 92       	push	r5
 2ce:	6f 92       	push	r6
 2d0:	7f 92       	push	r7
 2d2:	8f 92       	push	r8
 2d4:	9f 92       	push	r9
 2d6:	af 92       	push	r10
 2d8:	bf 92       	push	r11
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
 302:	a0 91 02 07 	lds	r26, 0x0702	; 0x800702 <pxCurrentTCB>
 306:	b0 91 03 07 	lds	r27, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 30a:	0d b6       	in	r0, 0x3d	; 61
 30c:	0d 92       	st	X+, r0
 30e:	0e b6       	in	r0, 0x3e	; 62
 310:	0d 92       	st	X+, r0
    vTaskSwitchContext();
 312:	0e 94 f6 05 	call	0xbec	; 0xbec <vTaskSwitchContext>
    portRESTORE_CONTEXT();
 316:	a0 91 02 07 	lds	r26, 0x0702	; 0x800702 <pxCurrentTCB>
 31a:	b0 91 03 07 	lds	r27, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 31e:	cd 91       	ld	r28, X+
 320:	cd bf       	out	0x3d, r28	; 61
 322:	dd 91       	ld	r29, X+
 324:	de bf       	out	0x3e, r29	; 62
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	bf 90       	pop	r11
 350:	af 90       	pop	r10
 352:	9f 90       	pop	r9
 354:	8f 90       	pop	r8
 356:	7f 90       	pop	r7
 358:	6f 90       	pop	r6
 35a:	5f 90       	pop	r5
 35c:	4f 90       	pop	r4
 35e:	3f 90       	pop	r3
 360:	2f 90       	pop	r2
 362:	1f 90       	pop	r1
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0

    asm volatile ( "ret" );
 36a:	08 95       	ret

0000036c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__( ( naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	0f 92       	push	r0
 374:	1f 92       	push	r1
 376:	11 24       	eor	r1, r1
 378:	2f 92       	push	r2
 37a:	3f 92       	push	r3
 37c:	4f 92       	push	r4
 37e:	5f 92       	push	r5
 380:	6f 92       	push	r6
 382:	7f 92       	push	r7
 384:	8f 92       	push	r8
 386:	9f 92       	push	r9
 388:	af 92       	push	r10
 38a:	bf 92       	push	r11
 38c:	cf 92       	push	r12
 38e:	df 92       	push	r13
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	4f 93       	push	r20
 39e:	5f 93       	push	r21
 3a0:	6f 93       	push	r22
 3a2:	7f 93       	push	r23
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	af 93       	push	r26
 3aa:	bf 93       	push	r27
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
 3b4:	a0 91 02 07 	lds	r26, 0x0702	; 0x800702 <pxCurrentTCB>
 3b8:	b0 91 03 07 	lds	r27, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 3bc:	0d b6       	in	r0, 0x3d	; 61
 3be:	0d 92       	st	X+, r0
 3c0:	0e b6       	in	r0, 0x3e	; 62
 3c2:	0d 92       	st	X+, r0

    if( xTaskIncrementTick() != pdFALSE )
 3c4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <xTaskIncrementTick>
 3c8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
 3ca:	0e 94 f6 05 	call	0xbec	; 0xbec <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
 3ce:	a0 91 02 07 	lds	r26, 0x0702	; 0x800702 <pxCurrentTCB>
 3d2:	b0 91 03 07 	lds	r27, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 3d6:	cd 91       	ld	r28, X+
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	dd 91       	ld	r29, X+
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	bf 90       	pop	r11
 408:	af 90       	pop	r10
 40a:	9f 90       	pop	r9
 40c:	8f 90       	pop	r8
 40e:	7f 90       	pop	r7
 410:	6f 90       	pop	r6
 412:	5f 90       	pop	r5
 414:	4f 90       	pop	r4
 416:	3f 90       	pop	r3
 418:	2f 90       	pop	r2
 41a:	1f 90       	pop	r1
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0

    asm volatile ( "ret" );
 422:	08 95       	ret

00000424 <__vector_7>:
 * count is incremented after the context is saved.
 */
    void TIMER1_COMPA_vect( void ) __attribute__( ( signal, naked ) );
    void TIMER1_COMPA_vect( void )
    {
        vPortYieldFromTick();
 424:	0e 94 b6 01 	call	0x36c	; 0x36c <vPortYieldFromTick>
        asm volatile ( "reti" );
 428:	18 95       	reti

0000042a <prvResetNextTaskUnblockTime>:
    xYieldOccurred = xTaskResumeAll();

    traceRETURN_xTaskCatchUpTicks( xYieldOccurred );

    return xYieldOccurred;
}
 42a:	e0 91 ca 06 	lds	r30, 0x06CA	; 0x8006ca <pxDelayedTaskList>
 42e:	f0 91 cb 06 	lds	r31, 0x06CB	; 0x8006cb <pxDelayedTaskList+0x1>
 432:	80 81       	ld	r24, Z
 434:	81 11       	cpse	r24, r1
 436:	07 c0       	rjmp	.+14     	; 0x446 <prvResetNextTaskUnblockTime+0x1c>
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <xNextTaskUnblockTime+0x1>
 440:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <xNextTaskUnblockTime>
 444:	08 95       	ret
 446:	e0 91 ca 06 	lds	r30, 0x06CA	; 0x8006ca <pxDelayedTaskList>
 44a:	f0 91 cb 06 	lds	r31, 0x06CB	; 0x8006cb <pxDelayedTaskList+0x1>
 44e:	05 80       	ldd	r0, Z+5	; 0x05
 450:	f6 81       	ldd	r31, Z+6	; 0x06
 452:	e0 2d       	mov	r30, r0
 454:	80 81       	ld	r24, Z
 456:	91 81       	ldd	r25, Z+1	; 0x01
 458:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <xNextTaskUnblockTime+0x1>
 45c:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <xNextTaskUnblockTime>
 460:	08 95       	ret

00000462 <prvCheckTasksWaitingTermination>:
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <uxDeletedTasksWaitingCleanUp>
 46e:	88 23       	and	r24, r24
 470:	39 f1       	breq	.+78     	; 0x4c0 <prvCheckTasksWaitingTermination+0x5e>
 472:	06 eb       	ldi	r16, 0xB6	; 182
 474:	16 e0       	ldi	r17, 0x06	; 6
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	f8 94       	cli
 47a:	0f 92       	push	r0
 47c:	d8 01       	movw	r26, r16
 47e:	15 96       	adiw	r26, 0x05	; 5
 480:	ed 91       	ld	r30, X+
 482:	fc 91       	ld	r31, X
 484:	16 97       	sbiw	r26, 0x06	; 6
 486:	c6 81       	ldd	r28, Z+6	; 0x06
 488:	d7 81       	ldd	r29, Z+7	; 0x07
 48a:	ce 01       	movw	r24, r28
 48c:	02 96       	adiw	r24, 0x02	; 2
 48e:	0e 94 96 00 	call	0x12c	; 0x12c <uxListRemove>
 492:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxCurrentNumberOfTasks>
 496:	81 50       	subi	r24, 0x01	; 1
 498:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <uxCurrentNumberOfTasks>
 49c:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <uxDeletedTasksWaitingCleanUp>
 4a0:	81 50       	subi	r24, 0x01	; 1
 4a2:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <uxDeletedTasksWaitingCleanUp>
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	8f 89       	ldd	r24, Y+23	; 0x17
 4ac:	98 8d       	ldd	r25, Y+24	; 0x18
 4ae:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
 4b2:	ce 01       	movw	r24, r28
 4b4:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
 4b8:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <uxDeletedTasksWaitingCleanUp>
 4bc:	81 11       	cpse	r24, r1
 4be:	db cf       	rjmp	.-74     	; 0x476 <prvCheckTasksWaitingTermination+0x14>
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	08 95       	ret

000004ca <prvIdleTask>:
 4ca:	ce ed       	ldi	r28, 0xDE	; 222
 4cc:	d6 e0       	ldi	r29, 0x06	; 6
 4ce:	0e 94 31 02 	call	0x462	; 0x462 <prvCheckTasksWaitingTermination>
 4d2:	88 81       	ld	r24, Y
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	d8 f3       	brcs	.-10     	; 0x4ce <prvIdleTask+0x4>
 4d8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vPortYield>
 4dc:	f8 cf       	rjmp	.-16     	; 0x4ce <prvIdleTask+0x4>

000004de <xTaskCreate>:
 4de:	4f 92       	push	r4
 4e0:	5f 92       	push	r5
 4e2:	6f 92       	push	r6
 4e4:	7f 92       	push	r7
 4e6:	8f 92       	push	r8
 4e8:	9f 92       	push	r9
 4ea:	af 92       	push	r10
 4ec:	bf 92       	push	r11
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	4c 01       	movw	r8, r24
 4fe:	6b 01       	movw	r12, r22
 500:	29 01       	movw	r4, r18
 502:	a4 2e       	mov	r10, r20
 504:	b1 2c       	mov	r11, r1
 506:	c5 01       	movw	r24, r10
 508:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
 50c:	3c 01       	movw	r6, r24
 50e:	89 2b       	or	r24, r25
 510:	09 f4       	brne	.+2      	; 0x514 <xTaskCreate+0x36>
 512:	f4 c0       	rjmp	.+488    	; 0x6fc <xTaskCreate+0x21e>
 514:	86 e2       	ldi	r24, 0x26	; 38
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
 51c:	ec 01       	movw	r28, r24
 51e:	89 2b       	or	r24, r25
 520:	81 f0       	breq	.+32     	; 0x542 <xTaskCreate+0x64>
 522:	86 e2       	ldi	r24, 0x26	; 38
 524:	de 01       	movw	r26, r28
 526:	1d 92       	st	X+, r1
 528:	8a 95       	dec	r24
 52a:	e9 f7       	brne	.-6      	; 0x526 <xTaskCreate+0x48>
 52c:	78 8e       	std	Y+24, r7	; 0x18
 52e:	6f 8a       	std	Y+23, r6	; 0x17
 530:	b1 e0       	ldi	r27, 0x01	; 1
 532:	ab 1a       	sub	r10, r27
 534:	b1 08       	sbc	r11, r1
 536:	a6 0c       	add	r10, r6
 538:	b7 1c       	adc	r11, r7
 53a:	c1 14       	cp	r12, r1
 53c:	d1 04       	cpc	r13, r1
 53e:	29 f4       	brne	.+10     	; 0x54a <xTaskCreate+0x6c>
 540:	1e c0       	rjmp	.+60     	; 0x57e <xTaskCreate+0xa0>
 542:	c3 01       	movw	r24, r6
 544:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
 548:	d9 c0       	rjmp	.+434    	; 0x6fc <xTaskCreate+0x21e>
 54a:	f6 01       	movw	r30, r12
 54c:	80 81       	ld	r24, Z
 54e:	89 8f       	std	Y+25, r24	; 0x19
 550:	80 81       	ld	r24, Z
 552:	88 23       	and	r24, r24
 554:	99 f0       	breq	.+38     	; 0x57c <xTaskCreate+0x9e>
 556:	ae 01       	movw	r20, r28
 558:	46 5e       	subi	r20, 0xE6	; 230
 55a:	5f 4f       	sbci	r21, 0xFF	; 255
 55c:	31 96       	adiw	r30, 0x01	; 1
 55e:	88 e0       	ldi	r24, 0x08	; 8
 560:	c8 0e       	add	r12, r24
 562:	d1 1c       	adc	r13, r1
 564:	cf 01       	movw	r24, r30
 566:	21 91       	ld	r18, Z+
 568:	da 01       	movw	r26, r20
 56a:	2d 93       	st	X+, r18
 56c:	ad 01       	movw	r20, r26
 56e:	dc 01       	movw	r26, r24
 570:	8c 91       	ld	r24, X
 572:	88 23       	and	r24, r24
 574:	19 f0       	breq	.+6      	; 0x57c <xTaskCreate+0x9e>
 576:	ec 15       	cp	r30, r12
 578:	fd 05       	cpc	r31, r13
 57a:	a1 f7       	brne	.-24     	; 0x564 <xTaskCreate+0x86>
 57c:	18 a2       	std	Y+32, r1	; 0x20
 57e:	04 30       	cpi	r16, 0x04	; 4
 580:	08 f0       	brcs	.+2      	; 0x584 <xTaskCreate+0xa6>
 582:	03 e0       	ldi	r16, 0x03	; 3
 584:	0e 8b       	std	Y+22, r16	; 0x16
 586:	6e 01       	movw	r12, r28
 588:	b2 e0       	ldi	r27, 0x02	; 2
 58a:	cb 0e       	add	r12, r27
 58c:	d1 1c       	adc	r13, r1
 58e:	c6 01       	movw	r24, r12
 590:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
 594:	ce 01       	movw	r24, r28
 596:	0c 96       	adiw	r24, 0x0c	; 12
 598:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
 59c:	d9 87       	std	Y+9, r29	; 0x09
 59e:	c8 87       	std	Y+8, r28	; 0x08
 5a0:	84 e0       	ldi	r24, 0x04	; 4
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	80 1b       	sub	r24, r16
 5a6:	91 09       	sbc	r25, r1
 5a8:	9d 87       	std	Y+13, r25	; 0x0d
 5aa:	8c 87       	std	Y+12, r24	; 0x0c
 5ac:	db 8b       	std	Y+19, r29	; 0x13
 5ae:	ca 8b       	std	Y+18, r28	; 0x12
 5b0:	a2 01       	movw	r20, r4
 5b2:	b4 01       	movw	r22, r8
 5b4:	c5 01       	movw	r24, r10
 5b6:	0e 94 bc 00 	call	0x178	; 0x178 <pxPortInitialiseStack>
 5ba:	99 83       	std	Y+1, r25	; 0x01
 5bc:	88 83       	st	Y, r24
 5be:	e1 14       	cp	r14, r1
 5c0:	f1 04       	cpc	r15, r1
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <xTaskCreate+0xe8>
 5c4:	9d c0       	rjmp	.+314    	; 0x700 <xTaskCreate+0x222>
 5c6:	f7 01       	movw	r30, r14
 5c8:	d1 83       	std	Z+1, r29	; 0x01
 5ca:	c0 83       	st	Z, r28
 5cc:	99 c0       	rjmp	.+306    	; 0x700 <xTaskCreate+0x222>
 5ce:	d0 93 03 07 	sts	0x0703, r29	; 0x800703 <pxCurrentTCB+0x1>
 5d2:	c0 93 02 07 	sts	0x0702, r28	; 0x800702 <pxCurrentTCB>
 5d6:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxCurrentNumberOfTasks>
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	e9 f5       	brne	.+122    	; 0x658 <xTaskCreate+0x17a>
 5de:	8e ed       	ldi	r24, 0xDE	; 222
 5e0:	96 e0       	ldi	r25, 0x06	; 6
 5e2:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 5e6:	87 ee       	ldi	r24, 0xE7	; 231
 5e8:	96 e0       	ldi	r25, 0x06	; 6
 5ea:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 5ee:	80 ef       	ldi	r24, 0xF0	; 240
 5f0:	96 e0       	ldi	r25, 0x06	; 6
 5f2:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 5f6:	89 ef       	ldi	r24, 0xF9	; 249
 5f8:	96 e0       	ldi	r25, 0x06	; 6
 5fa:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 5fe:	85 ed       	ldi	r24, 0xD5	; 213
 600:	96 e0       	ldi	r25, 0x06	; 6
 602:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 606:	8c ec       	ldi	r24, 0xCC	; 204
 608:	96 e0       	ldi	r25, 0x06	; 6
 60a:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 60e:	8f eb       	ldi	r24, 0xBF	; 191
 610:	96 e0       	ldi	r25, 0x06	; 6
 612:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 616:	86 eb       	ldi	r24, 0xB6	; 182
 618:	96 e0       	ldi	r25, 0x06	; 6
 61a:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 61e:	85 ed       	ldi	r24, 0xD5	; 213
 620:	96 e0       	ldi	r25, 0x06	; 6
 622:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <pxDelayedTaskList+0x1>
 626:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <pxDelayedTaskList>
 62a:	8c ec       	ldi	r24, 0xCC	; 204
 62c:	96 e0       	ldi	r25, 0x06	; 6
 62e:	90 93 c9 06 	sts	0x06C9, r25	; 0x8006c9 <pxOverflowDelayedTaskList+0x1>
 632:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <pxOverflowDelayedTaskList>
 636:	10 c0       	rjmp	.+32     	; 0x658 <xTaskCreate+0x17a>
 638:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <xSchedulerRunning>
 63c:	81 11       	cpse	r24, r1
 63e:	0c c0       	rjmp	.+24     	; 0x658 <xTaskCreate+0x17a>
 640:	e0 91 02 07 	lds	r30, 0x0702	; 0x800702 <pxCurrentTCB>
 644:	f0 91 03 07 	lds	r31, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 648:	96 89       	ldd	r25, Z+22	; 0x16
 64a:	8e 89       	ldd	r24, Y+22	; 0x16
 64c:	89 17       	cp	r24, r25
 64e:	20 f0       	brcs	.+8      	; 0x658 <xTaskCreate+0x17a>
 650:	d0 93 03 07 	sts	0x0703, r29	; 0x800703 <pxCurrentTCB+0x1>
 654:	c0 93 02 07 	sts	0x0702, r28	; 0x800702 <pxCurrentTCB>
 658:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <uxTaskNumber>
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <uxTaskNumber>
 662:	8e 89       	ldd	r24, Y+22	; 0x16
 664:	90 91 b1 06 	lds	r25, 0x06B1	; 0x8006b1 <uxTopReadyPriority>
 668:	98 17       	cp	r25, r24
 66a:	10 f4       	brcc	.+4      	; 0x670 <xTaskCreate+0x192>
 66c:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <uxTopReadyPriority>
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	fc 01       	movw	r30, r24
 674:	ee 0f       	add	r30, r30
 676:	ff 1f       	adc	r31, r31
 678:	ee 0f       	add	r30, r30
 67a:	ff 1f       	adc	r31, r31
 67c:	ee 0f       	add	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	8e 0f       	add	r24, r30
 682:	9f 1f       	adc	r25, r31
 684:	fc 01       	movw	r30, r24
 686:	e2 52       	subi	r30, 0x22	; 34
 688:	f9 4f       	sbci	r31, 0xF9	; 249
 68a:	01 80       	ldd	r0, Z+1	; 0x01
 68c:	f2 81       	ldd	r31, Z+2	; 0x02
 68e:	e0 2d       	mov	r30, r0
 690:	fd 83       	std	Y+5, r31	; 0x05
 692:	ec 83       	std	Y+4, r30	; 0x04
 694:	84 81       	ldd	r24, Z+4	; 0x04
 696:	95 81       	ldd	r25, Z+5	; 0x05
 698:	9f 83       	std	Y+7, r25	; 0x07
 69a:	8e 83       	std	Y+6, r24	; 0x06
 69c:	a4 81       	ldd	r26, Z+4	; 0x04
 69e:	b5 81       	ldd	r27, Z+5	; 0x05
 6a0:	13 96       	adiw	r26, 0x03	; 3
 6a2:	dc 92       	st	X, r13
 6a4:	ce 92       	st	-X, r12
 6a6:	12 97       	sbiw	r26, 0x02	; 2
 6a8:	d5 82       	std	Z+5, r13	; 0x05
 6aa:	c4 82       	std	Z+4, r12	; 0x04
 6ac:	ee 89       	ldd	r30, Y+22	; 0x16
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	cf 01       	movw	r24, r30
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	e8 0f       	add	r30, r24
 6c0:	f9 1f       	adc	r31, r25
 6c2:	e2 52       	subi	r30, 0x22	; 34
 6c4:	f9 4f       	sbci	r31, 0xF9	; 249
 6c6:	fb 87       	std	Y+11, r31	; 0x0b
 6c8:	ea 87       	std	Y+10, r30	; 0x0a
 6ca:	80 81       	ld	r24, Z
 6cc:	8f 5f       	subi	r24, 0xFF	; 255
 6ce:	80 83       	st	Z, r24
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <xSchedulerRunning>
 6d8:	88 23       	and	r24, r24
 6da:	61 f0       	breq	.+24     	; 0x6f4 <xTaskCreate+0x216>
 6dc:	e0 91 02 07 	lds	r30, 0x0702	; 0x800702 <pxCurrentTCB>
 6e0:	f0 91 03 07 	lds	r31, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 6e4:	96 89       	ldd	r25, Z+22	; 0x16
 6e6:	8e 89       	ldd	r24, Y+22	; 0x16
 6e8:	98 17       	cp	r25, r24
 6ea:	30 f4       	brcc	.+12     	; 0x6f8 <xTaskCreate+0x21a>
 6ec:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vPortYield>
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	16 c0       	rjmp	.+44     	; 0x720 <xTaskCreate+0x242>
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	14 c0       	rjmp	.+40     	; 0x720 <xTaskCreate+0x242>
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	12 c0       	rjmp	.+36     	; 0x720 <xTaskCreate+0x242>
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	10 c0       	rjmp	.+32     	; 0x720 <xTaskCreate+0x242>
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	0f 92       	push	r0
 706:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxCurrentNumberOfTasks>
 70a:	8f 5f       	subi	r24, 0xFF	; 255
 70c:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <uxCurrentNumberOfTasks>
 710:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <pxCurrentTCB>
 714:	90 91 03 07 	lds	r25, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 718:	89 2b       	or	r24, r25
 71a:	09 f0       	breq	.+2      	; 0x71e <xTaskCreate+0x240>
 71c:	8d cf       	rjmp	.-230    	; 0x638 <xTaskCreate+0x15a>
 71e:	57 cf       	rjmp	.-338    	; 0x5ce <xTaskCreate+0xf0>
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	0f 91       	pop	r16
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	df 90       	pop	r13
 72c:	cf 90       	pop	r12
 72e:	bf 90       	pop	r11
 730:	af 90       	pop	r10
 732:	9f 90       	pop	r9
 734:	8f 90       	pop	r8
 736:	7f 90       	pop	r7
 738:	6f 90       	pop	r6
 73a:	5f 90       	pop	r5
 73c:	4f 90       	pop	r4
 73e:	08 95       	ret

00000740 <vTaskStartScheduler>:
 740:	ef 92       	push	r14
 742:	ff 92       	push	r15
 744:	0f 93       	push	r16
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	28 97       	sbiw	r28, 0x08	; 8
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	f8 94       	cli
 754:	de bf       	out	0x3e, r29	; 62
 756:	0f be       	out	0x3f, r0	; 63
 758:	cd bf       	out	0x3d, r28	; 61
 75a:	89 e4       	ldi	r24, 0x49	; 73
 75c:	89 83       	std	Y+1, r24	; 0x01
 75e:	e2 e6       	ldi	r30, 0x62	; 98
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	de 01       	movw	r26, r28
 764:	12 96       	adiw	r26, 0x02	; 2
 766:	29 e6       	ldi	r18, 0x69	; 105
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	81 91       	ld	r24, Z+
 76c:	8d 93       	st	X+, r24
 76e:	88 23       	and	r24, r24
 770:	19 f0       	breq	.+6      	; 0x778 <vTaskStartScheduler+0x38>
 772:	e2 17       	cp	r30, r18
 774:	f3 07       	cpc	r31, r19
 776:	c9 f7       	brne	.-14     	; 0x76a <vTaskStartScheduler+0x2a>
 778:	0f 2e       	mov	r0, r31
 77a:	f7 ea       	ldi	r31, 0xA7	; 167
 77c:	ef 2e       	mov	r14, r31
 77e:	f6 e0       	ldi	r31, 0x06	; 6
 780:	ff 2e       	mov	r15, r31
 782:	f0 2d       	mov	r31, r0
 784:	00 e0       	ldi	r16, 0x00	; 0
 786:	20 e0       	ldi	r18, 0x00	; 0
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	45 e5       	ldi	r20, 0x55	; 85
 78c:	be 01       	movw	r22, r28
 78e:	6f 5f       	subi	r22, 0xFF	; 255
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	85 e6       	ldi	r24, 0x65	; 101
 794:	92 e0       	ldi	r25, 0x02	; 2
 796:	0e 94 6f 02 	call	0x4de	; 0x4de <xTaskCreate>
 79a:	88 23       	and	r24, r24
 79c:	91 f0       	breq	.+36     	; 0x7c2 <vTaskStartScheduler+0x82>
 79e:	81 30       	cpi	r24, 0x01	; 1
 7a0:	81 f4       	brne	.+32     	; 0x7c2 <vTaskStartScheduler+0x82>
 7a2:	f8 94       	cli
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	9f ef       	ldi	r25, 0xFF	; 255
 7a8:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <xNextTaskUnblockTime+0x1>
 7ac:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <xNextTaskUnblockTime>
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <xSchedulerRunning>
 7b6:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <xTickCount+0x1>
 7ba:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <xTickCount>
 7be:	0e 94 28 01 	call	0x250	; 0x250 <xPortStartScheduler>
 7c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7c6:	28 96       	adiw	r28, 0x08	; 8
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	0f 91       	pop	r16
 7d8:	ff 90       	pop	r15
 7da:	ef 90       	pop	r14
 7dc:	08 95       	ret

000007de <vTaskSuspendAll>:
 7de:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <uxSchedulerSuspended>
 7e2:	8f 5f       	subi	r24, 0xFF	; 255
 7e4:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxSchedulerSuspended>
 7e8:	08 95       	ret

000007ea <xTaskIncrementTick>:
 7ea:	ef 92       	push	r14
 7ec:	ff 92       	push	r15
 7ee:	0f 93       	push	r16
 7f0:	1f 93       	push	r17
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <uxSchedulerSuspended>
 7fa:	81 11       	cpse	r24, r1
 7fc:	04 c1       	rjmp	.+520    	; 0xa06 <__stack+0x1a7>
 7fe:	c0 91 b2 06 	lds	r28, 0x06B2	; 0x8006b2 <xTickCount>
 802:	d0 91 b3 06 	lds	r29, 0x06B3	; 0x8006b3 <xTickCount+0x1>
 806:	7e 01       	movw	r14, r28
 808:	8f ef       	ldi	r24, 0xFF	; 255
 80a:	e8 1a       	sub	r14, r24
 80c:	f8 0a       	sbc	r15, r24
 80e:	f0 92 b3 06 	sts	0x06B3, r15	; 0x8006b3 <xTickCount+0x1>
 812:	e0 92 b2 06 	sts	0x06B2, r14	; 0x8006b2 <xTickCount>
 816:	e1 14       	cp	r14, r1
 818:	f1 04       	cpc	r15, r1
 81a:	b9 f4       	brne	.+46     	; 0x84a <xTaskIncrementTick+0x60>
 81c:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <pxDelayedTaskList>
 820:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <pxDelayedTaskList+0x1>
 824:	20 91 c8 06 	lds	r18, 0x06C8	; 0x8006c8 <pxOverflowDelayedTaskList>
 828:	30 91 c9 06 	lds	r19, 0x06C9	; 0x8006c9 <pxOverflowDelayedTaskList+0x1>
 82c:	30 93 cb 06 	sts	0x06CB, r19	; 0x8006cb <pxDelayedTaskList+0x1>
 830:	20 93 ca 06 	sts	0x06CA, r18	; 0x8006ca <pxDelayedTaskList>
 834:	90 93 c9 06 	sts	0x06C9, r25	; 0x8006c9 <pxOverflowDelayedTaskList+0x1>
 838:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <pxOverflowDelayedTaskList>
 83c:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <xNumOfOverflows>
 840:	8f 5f       	subi	r24, 0xFF	; 255
 842:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <xNumOfOverflows>
 846:	0e 94 15 02 	call	0x42a	; 0x42a <prvResetNextTaskUnblockTime>
 84a:	80 91 a9 06 	lds	r24, 0x06A9	; 0x8006a9 <xNextTaskUnblockTime>
 84e:	90 91 aa 06 	lds	r25, 0x06AA	; 0x8006aa <xNextTaskUnblockTime+0x1>
 852:	e8 16       	cp	r14, r24
 854:	f9 06       	cpc	r15, r25
 856:	10 f4       	brcc	.+4      	; 0x85c <xTaskIncrementTick+0x72>
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	b9 c0       	rjmp	.+370    	; 0x9ce <__stack+0x16f>
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	61 e0       	ldi	r22, 0x01	; 1
 860:	e0 91 ca 06 	lds	r30, 0x06CA	; 0x8006ca <pxDelayedTaskList>
 864:	f0 91 cb 06 	lds	r31, 0x06CB	; 0x8006cb <pxDelayedTaskList+0x1>
 868:	90 81       	ld	r25, Z
 86a:	91 11       	cpse	r25, r1
 86c:	07 c0       	rjmp	.+14     	; 0x87c <__stack+0x1d>
 86e:	2f ef       	ldi	r18, 0xFF	; 255
 870:	3f ef       	ldi	r19, 0xFF	; 255
 872:	30 93 aa 06 	sts	0x06AA, r19	; 0x8006aa <xNextTaskUnblockTime+0x1>
 876:	20 93 a9 06 	sts	0x06A9, r18	; 0x8006a9 <xNextTaskUnblockTime>
 87a:	a9 c0       	rjmp	.+338    	; 0x9ce <__stack+0x16f>
 87c:	e0 91 ca 06 	lds	r30, 0x06CA	; 0x8006ca <pxDelayedTaskList>
 880:	f0 91 cb 06 	lds	r31, 0x06CB	; 0x8006cb <pxDelayedTaskList+0x1>
 884:	05 80       	ldd	r0, Z+5	; 0x05
 886:	f6 81       	ldd	r31, Z+6	; 0x06
 888:	e0 2d       	mov	r30, r0
 88a:	06 80       	ldd	r0, Z+6	; 0x06
 88c:	f7 81       	ldd	r31, Z+7	; 0x07
 88e:	e0 2d       	mov	r30, r0
 890:	22 81       	ldd	r18, Z+2	; 0x02
 892:	33 81       	ldd	r19, Z+3	; 0x03
 894:	e2 16       	cp	r14, r18
 896:	f3 06       	cpc	r15, r19
 898:	28 f4       	brcc	.+10     	; 0x8a4 <__stack+0x45>
 89a:	30 93 aa 06 	sts	0x06AA, r19	; 0x8006aa <xNextTaskUnblockTime+0x1>
 89e:	20 93 a9 06 	sts	0x06A9, r18	; 0x8006a9 <xNextTaskUnblockTime>
 8a2:	95 c0       	rjmp	.+298    	; 0x9ce <__stack+0x16f>
 8a4:	a2 85       	ldd	r26, Z+10	; 0x0a
 8a6:	b3 85       	ldd	r27, Z+11	; 0x0b
 8a8:	24 81       	ldd	r18, Z+4	; 0x04
 8aa:	35 81       	ldd	r19, Z+5	; 0x05
 8ac:	46 81       	ldd	r20, Z+6	; 0x06
 8ae:	57 81       	ldd	r21, Z+7	; 0x07
 8b0:	e9 01       	movw	r28, r18
 8b2:	5d 83       	std	Y+5, r21	; 0x05
 8b4:	4c 83       	std	Y+4, r20	; 0x04
 8b6:	26 81       	ldd	r18, Z+6	; 0x06
 8b8:	37 81       	ldd	r19, Z+7	; 0x07
 8ba:	44 81       	ldd	r20, Z+4	; 0x04
 8bc:	55 81       	ldd	r21, Z+5	; 0x05
 8be:	e9 01       	movw	r28, r18
 8c0:	5b 83       	std	Y+3, r21	; 0x03
 8c2:	4a 83       	std	Y+2, r20	; 0x02
 8c4:	af 01       	movw	r20, r30
 8c6:	4e 5f       	subi	r20, 0xFE	; 254
 8c8:	5f 4f       	sbci	r21, 0xFF	; 255
 8ca:	11 96       	adiw	r26, 0x01	; 1
 8cc:	2d 91       	ld	r18, X+
 8ce:	3c 91       	ld	r19, X
 8d0:	12 97       	sbiw	r26, 0x02	; 2
 8d2:	24 17       	cp	r18, r20
 8d4:	35 07       	cpc	r19, r21
 8d6:	31 f4       	brne	.+12     	; 0x8e4 <__stack+0x85>
 8d8:	26 81       	ldd	r18, Z+6	; 0x06
 8da:	37 81       	ldd	r19, Z+7	; 0x07
 8dc:	12 96       	adiw	r26, 0x02	; 2
 8de:	3c 93       	st	X, r19
 8e0:	2e 93       	st	-X, r18
 8e2:	11 97       	sbiw	r26, 0x01	; 1
 8e4:	13 86       	std	Z+11, r1	; 0x0b
 8e6:	12 86       	std	Z+10, r1	; 0x0a
 8e8:	9c 91       	ld	r25, X
 8ea:	91 50       	subi	r25, 0x01	; 1
 8ec:	9c 93       	st	X, r25
 8ee:	a4 89       	ldd	r26, Z+20	; 0x14
 8f0:	b5 89       	ldd	r27, Z+21	; 0x15
 8f2:	10 97       	sbiw	r26, 0x00	; 0
 8f4:	19 f1       	breq	.+70     	; 0x93c <__stack+0xdd>
 8f6:	26 85       	ldd	r18, Z+14	; 0x0e
 8f8:	37 85       	ldd	r19, Z+15	; 0x0f
 8fa:	00 89       	ldd	r16, Z+16	; 0x10
 8fc:	11 89       	ldd	r17, Z+17	; 0x11
 8fe:	e9 01       	movw	r28, r18
 900:	1d 83       	std	Y+5, r17	; 0x05
 902:	0c 83       	std	Y+4, r16	; 0x04
 904:	20 89       	ldd	r18, Z+16	; 0x10
 906:	31 89       	ldd	r19, Z+17	; 0x11
 908:	06 85       	ldd	r16, Z+14	; 0x0e
 90a:	17 85       	ldd	r17, Z+15	; 0x0f
 90c:	e9 01       	movw	r28, r18
 90e:	1b 83       	std	Y+3, r17	; 0x03
 910:	0a 83       	std	Y+2, r16	; 0x02
 912:	11 96       	adiw	r26, 0x01	; 1
 914:	0d 91       	ld	r16, X+
 916:	1c 91       	ld	r17, X
 918:	12 97       	sbiw	r26, 0x02	; 2
 91a:	9f 01       	movw	r18, r30
 91c:	24 5f       	subi	r18, 0xF4	; 244
 91e:	3f 4f       	sbci	r19, 0xFF	; 255
 920:	02 17       	cp	r16, r18
 922:	13 07       	cpc	r17, r19
 924:	31 f4       	brne	.+12     	; 0x932 <__stack+0xd3>
 926:	20 89       	ldd	r18, Z+16	; 0x10
 928:	31 89       	ldd	r19, Z+17	; 0x11
 92a:	12 96       	adiw	r26, 0x02	; 2
 92c:	3c 93       	st	X, r19
 92e:	2e 93       	st	-X, r18
 930:	11 97       	sbiw	r26, 0x01	; 1
 932:	15 8a       	std	Z+21, r1	; 0x15
 934:	14 8a       	std	Z+20, r1	; 0x14
 936:	9c 91       	ld	r25, X
 938:	91 50       	subi	r25, 0x01	; 1
 93a:	9c 93       	st	X, r25
 93c:	26 89       	ldd	r18, Z+22	; 0x16
 93e:	90 91 b1 06 	lds	r25, 0x06B1	; 0x8006b1 <uxTopReadyPriority>
 942:	92 17       	cp	r25, r18
 944:	10 f4       	brcc	.+4      	; 0x94a <__stack+0xeb>
 946:	20 93 b1 06 	sts	0x06B1, r18	; 0x8006b1 <uxTopReadyPriority>
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	d9 01       	movw	r26, r18
 94e:	aa 0f       	add	r26, r26
 950:	bb 1f       	adc	r27, r27
 952:	aa 0f       	add	r26, r26
 954:	bb 1f       	adc	r27, r27
 956:	aa 0f       	add	r26, r26
 958:	bb 1f       	adc	r27, r27
 95a:	2a 0f       	add	r18, r26
 95c:	3b 1f       	adc	r19, r27
 95e:	d9 01       	movw	r26, r18
 960:	a2 52       	subi	r26, 0x22	; 34
 962:	b9 4f       	sbci	r27, 0xF9	; 249
 964:	11 96       	adiw	r26, 0x01	; 1
 966:	0d 90       	ld	r0, X+
 968:	bc 91       	ld	r27, X
 96a:	a0 2d       	mov	r26, r0
 96c:	b5 83       	std	Z+5, r27	; 0x05
 96e:	a4 83       	std	Z+4, r26	; 0x04
 970:	14 96       	adiw	r26, 0x04	; 4
 972:	2d 91       	ld	r18, X+
 974:	3c 91       	ld	r19, X
 976:	15 97       	sbiw	r26, 0x05	; 5
 978:	37 83       	std	Z+7, r19	; 0x07
 97a:	26 83       	std	Z+6, r18	; 0x06
 97c:	14 96       	adiw	r26, 0x04	; 4
 97e:	2d 91       	ld	r18, X+
 980:	3c 91       	ld	r19, X
 982:	15 97       	sbiw	r26, 0x05	; 5
 984:	e9 01       	movw	r28, r18
 986:	5b 83       	std	Y+3, r21	; 0x03
 988:	4a 83       	std	Y+2, r20	; 0x02
 98a:	15 96       	adiw	r26, 0x05	; 5
 98c:	5c 93       	st	X, r21
 98e:	4e 93       	st	-X, r20
 990:	14 97       	sbiw	r26, 0x04	; 4
 992:	a6 89       	ldd	r26, Z+22	; 0x16
 994:	b0 e0       	ldi	r27, 0x00	; 0
 996:	9d 01       	movw	r18, r26
 998:	22 0f       	add	r18, r18
 99a:	33 1f       	adc	r19, r19
 99c:	22 0f       	add	r18, r18
 99e:	33 1f       	adc	r19, r19
 9a0:	22 0f       	add	r18, r18
 9a2:	33 1f       	adc	r19, r19
 9a4:	a2 0f       	add	r26, r18
 9a6:	b3 1f       	adc	r27, r19
 9a8:	a2 52       	subi	r26, 0x22	; 34
 9aa:	b9 4f       	sbci	r27, 0xF9	; 249
 9ac:	b3 87       	std	Z+11, r27	; 0x0b
 9ae:	a2 87       	std	Z+10, r26	; 0x0a
 9b0:	9c 91       	ld	r25, X
 9b2:	9f 5f       	subi	r25, 0xFF	; 255
 9b4:	9c 93       	st	X, r25
 9b6:	a0 91 02 07 	lds	r26, 0x0702	; 0x800702 <pxCurrentTCB>
 9ba:	b0 91 03 07 	lds	r27, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 9be:	26 89       	ldd	r18, Z+22	; 0x16
 9c0:	56 96       	adiw	r26, 0x16	; 22
 9c2:	9c 91       	ld	r25, X
 9c4:	92 17       	cp	r25, r18
 9c6:	08 f0       	brcs	.+2      	; 0x9ca <__stack+0x16b>
 9c8:	4b cf       	rjmp	.-362    	; 0x860 <__stack+0x1>
 9ca:	86 2f       	mov	r24, r22
 9cc:	49 cf       	rjmp	.-366    	; 0x860 <__stack+0x1>
 9ce:	e0 91 02 07 	lds	r30, 0x0702	; 0x800702 <pxCurrentTCB>
 9d2:	f0 91 03 07 	lds	r31, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 9d6:	26 89       	ldd	r18, Z+22	; 0x16
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	f9 01       	movw	r30, r18
 9dc:	ee 0f       	add	r30, r30
 9de:	ff 1f       	adc	r31, r31
 9e0:	ee 0f       	add	r30, r30
 9e2:	ff 1f       	adc	r31, r31
 9e4:	ee 0f       	add	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	2e 0f       	add	r18, r30
 9ea:	3f 1f       	adc	r19, r31
 9ec:	f9 01       	movw	r30, r18
 9ee:	e2 52       	subi	r30, 0x22	; 34
 9f0:	f9 4f       	sbci	r31, 0xF9	; 249
 9f2:	90 81       	ld	r25, Z
 9f4:	92 30       	cpi	r25, 0x02	; 2
 9f6:	08 f0       	brcs	.+2      	; 0x9fa <__stack+0x19b>
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <xYieldPendings>
 9fe:	99 23       	and	r25, r25
 a00:	61 f0       	breq	.+24     	; 0xa1a <__stack+0x1bb>
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	0a c0       	rjmp	.+20     	; 0xa1a <__stack+0x1bb>
 a06:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <xPendedTicks>
 a0a:	90 91 af 06 	lds	r25, 0x06AF	; 0x8006af <xPendedTicks+0x1>
 a0e:	01 96       	adiw	r24, 0x01	; 1
 a10:	90 93 af 06 	sts	0x06AF, r25	; 0x8006af <xPendedTicks+0x1>
 a14:	80 93 ae 06 	sts	0x06AE, r24	; 0x8006ae <xPendedTicks>
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	1f 91       	pop	r17
 a20:	0f 91       	pop	r16
 a22:	ff 90       	pop	r15
 a24:	ef 90       	pop	r14
 a26:	08 95       	ret

00000a28 <xTaskResumeAll>:
 a28:	1f 93       	push	r17
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	0f 92       	push	r0
 a34:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <uxSchedulerSuspended>
 a38:	81 50       	subi	r24, 0x01	; 1
 a3a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <uxSchedulerSuspended>
 a3e:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <uxSchedulerSuspended>
 a42:	81 11       	cpse	r24, r1
 a44:	ca c0       	rjmp	.+404    	; 0xbda <xTaskResumeAll+0x1b2>
 a46:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxCurrentNumberOfTasks>
 a4a:	81 11       	cpse	r24, r1
 a4c:	9b c0       	rjmp	.+310    	; 0xb84 <xTaskResumeAll+0x15c>
 a4e:	c8 c0       	rjmp	.+400    	; 0xbe0 <xTaskResumeAll+0x1b8>
 a50:	db 01       	movw	r26, r22
 a52:	15 96       	adiw	r26, 0x05	; 5
 a54:	ed 91       	ld	r30, X+
 a56:	fc 91       	ld	r31, X
 a58:	16 97       	sbiw	r26, 0x06	; 6
 a5a:	06 80       	ldd	r0, Z+6	; 0x06
 a5c:	f7 81       	ldd	r31, Z+7	; 0x07
 a5e:	e0 2d       	mov	r30, r0
 a60:	a4 89       	ldd	r26, Z+20	; 0x14
 a62:	b5 89       	ldd	r27, Z+21	; 0x15
 a64:	86 85       	ldd	r24, Z+14	; 0x0e
 a66:	97 85       	ldd	r25, Z+15	; 0x0f
 a68:	20 89       	ldd	r18, Z+16	; 0x10
 a6a:	31 89       	ldd	r19, Z+17	; 0x11
 a6c:	ec 01       	movw	r28, r24
 a6e:	3d 83       	std	Y+5, r19	; 0x05
 a70:	2c 83       	std	Y+4, r18	; 0x04
 a72:	80 89       	ldd	r24, Z+16	; 0x10
 a74:	91 89       	ldd	r25, Z+17	; 0x11
 a76:	26 85       	ldd	r18, Z+14	; 0x0e
 a78:	37 85       	ldd	r19, Z+15	; 0x0f
 a7a:	ec 01       	movw	r28, r24
 a7c:	3b 83       	std	Y+3, r19	; 0x03
 a7e:	2a 83       	std	Y+2, r18	; 0x02
 a80:	cf 01       	movw	r24, r30
 a82:	0c 96       	adiw	r24, 0x0c	; 12
 a84:	11 96       	adiw	r26, 0x01	; 1
 a86:	2d 91       	ld	r18, X+
 a88:	3c 91       	ld	r19, X
 a8a:	12 97       	sbiw	r26, 0x02	; 2
 a8c:	28 17       	cp	r18, r24
 a8e:	39 07       	cpc	r19, r25
 a90:	31 f4       	brne	.+12     	; 0xa9e <xTaskResumeAll+0x76>
 a92:	80 89       	ldd	r24, Z+16	; 0x10
 a94:	91 89       	ldd	r25, Z+17	; 0x11
 a96:	12 96       	adiw	r26, 0x02	; 2
 a98:	9c 93       	st	X, r25
 a9a:	8e 93       	st	-X, r24
 a9c:	11 97       	sbiw	r26, 0x01	; 1
 a9e:	15 8a       	std	Z+21, r1	; 0x15
 aa0:	14 8a       	std	Z+20, r1	; 0x14
 aa2:	8c 91       	ld	r24, X
 aa4:	81 50       	subi	r24, 0x01	; 1
 aa6:	8c 93       	st	X, r24
 aa8:	a2 85       	ldd	r26, Z+10	; 0x0a
 aaa:	b3 85       	ldd	r27, Z+11	; 0x0b
 aac:	84 81       	ldd	r24, Z+4	; 0x04
 aae:	95 81       	ldd	r25, Z+5	; 0x05
 ab0:	26 81       	ldd	r18, Z+6	; 0x06
 ab2:	37 81       	ldd	r19, Z+7	; 0x07
 ab4:	ec 01       	movw	r28, r24
 ab6:	3d 83       	std	Y+5, r19	; 0x05
 ab8:	2c 83       	std	Y+4, r18	; 0x04
 aba:	86 81       	ldd	r24, Z+6	; 0x06
 abc:	97 81       	ldd	r25, Z+7	; 0x07
 abe:	24 81       	ldd	r18, Z+4	; 0x04
 ac0:	35 81       	ldd	r19, Z+5	; 0x05
 ac2:	ec 01       	movw	r28, r24
 ac4:	3b 83       	std	Y+3, r19	; 0x03
 ac6:	2a 83       	std	Y+2, r18	; 0x02
 ac8:	9f 01       	movw	r18, r30
 aca:	2e 5f       	subi	r18, 0xFE	; 254
 acc:	3f 4f       	sbci	r19, 0xFF	; 255
 ace:	11 96       	adiw	r26, 0x01	; 1
 ad0:	8d 91       	ld	r24, X+
 ad2:	9c 91       	ld	r25, X
 ad4:	12 97       	sbiw	r26, 0x02	; 2
 ad6:	82 17       	cp	r24, r18
 ad8:	93 07       	cpc	r25, r19
 ada:	31 f4       	brne	.+12     	; 0xae8 <xTaskResumeAll+0xc0>
 adc:	86 81       	ldd	r24, Z+6	; 0x06
 ade:	97 81       	ldd	r25, Z+7	; 0x07
 ae0:	12 96       	adiw	r26, 0x02	; 2
 ae2:	9c 93       	st	X, r25
 ae4:	8e 93       	st	-X, r24
 ae6:	11 97       	sbiw	r26, 0x01	; 1
 ae8:	13 86       	std	Z+11, r1	; 0x0b
 aea:	12 86       	std	Z+10, r1	; 0x0a
 aec:	8c 91       	ld	r24, X
 aee:	81 50       	subi	r24, 0x01	; 1
 af0:	8c 93       	st	X, r24
 af2:	86 89       	ldd	r24, Z+22	; 0x16
 af4:	90 91 b1 06 	lds	r25, 0x06B1	; 0x8006b1 <uxTopReadyPriority>
 af8:	98 17       	cp	r25, r24
 afa:	10 f4       	brcc	.+4      	; 0xb00 <xTaskResumeAll+0xd8>
 afc:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <uxTopReadyPriority>
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	dc 01       	movw	r26, r24
 b04:	aa 0f       	add	r26, r26
 b06:	bb 1f       	adc	r27, r27
 b08:	aa 0f       	add	r26, r26
 b0a:	bb 1f       	adc	r27, r27
 b0c:	aa 0f       	add	r26, r26
 b0e:	bb 1f       	adc	r27, r27
 b10:	8a 0f       	add	r24, r26
 b12:	9b 1f       	adc	r25, r27
 b14:	dc 01       	movw	r26, r24
 b16:	a2 52       	subi	r26, 0x22	; 34
 b18:	b9 4f       	sbci	r27, 0xF9	; 249
 b1a:	11 96       	adiw	r26, 0x01	; 1
 b1c:	0d 90       	ld	r0, X+
 b1e:	bc 91       	ld	r27, X
 b20:	a0 2d       	mov	r26, r0
 b22:	b5 83       	std	Z+5, r27	; 0x05
 b24:	a4 83       	std	Z+4, r26	; 0x04
 b26:	14 96       	adiw	r26, 0x04	; 4
 b28:	8d 91       	ld	r24, X+
 b2a:	9c 91       	ld	r25, X
 b2c:	15 97       	sbiw	r26, 0x05	; 5
 b2e:	97 83       	std	Z+7, r25	; 0x07
 b30:	86 83       	std	Z+6, r24	; 0x06
 b32:	14 96       	adiw	r26, 0x04	; 4
 b34:	8d 91       	ld	r24, X+
 b36:	9c 91       	ld	r25, X
 b38:	15 97       	sbiw	r26, 0x05	; 5
 b3a:	ec 01       	movw	r28, r24
 b3c:	3b 83       	std	Y+3, r19	; 0x03
 b3e:	2a 83       	std	Y+2, r18	; 0x02
 b40:	15 96       	adiw	r26, 0x05	; 5
 b42:	3c 93       	st	X, r19
 b44:	2e 93       	st	-X, r18
 b46:	14 97       	sbiw	r26, 0x04	; 4
 b48:	a6 89       	ldd	r26, Z+22	; 0x16
 b4a:	b0 e0       	ldi	r27, 0x00	; 0
 b4c:	cd 01       	movw	r24, r26
 b4e:	88 0f       	add	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	88 0f       	add	r24, r24
 b54:	99 1f       	adc	r25, r25
 b56:	88 0f       	add	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	a8 0f       	add	r26, r24
 b5c:	b9 1f       	adc	r27, r25
 b5e:	a2 52       	subi	r26, 0x22	; 34
 b60:	b9 4f       	sbci	r27, 0xF9	; 249
 b62:	b3 87       	std	Z+11, r27	; 0x0b
 b64:	a2 87       	std	Z+10, r26	; 0x0a
 b66:	8c 91       	ld	r24, X
 b68:	8f 5f       	subi	r24, 0xFF	; 255
 b6a:	8c 93       	st	X, r24
 b6c:	a0 91 02 07 	lds	r26, 0x0702	; 0x800702 <pxCurrentTCB>
 b70:	b0 91 03 07 	lds	r27, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 b74:	96 89       	ldd	r25, Z+22	; 0x16
 b76:	56 96       	adiw	r26, 0x16	; 22
 b78:	8c 91       	ld	r24, X
 b7a:	89 17       	cp	r24, r25
 b7c:	40 f4       	brcc	.+16     	; 0xb8e <xTaskResumeAll+0x166>
 b7e:	40 93 ad 06 	sts	0x06AD, r20	; 0x8006ad <xYieldPendings>
 b82:	05 c0       	rjmp	.+10     	; 0xb8e <xTaskResumeAll+0x166>
 b84:	e0 e0       	ldi	r30, 0x00	; 0
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	6f eb       	ldi	r22, 0xBF	; 191
 b8a:	76 e0       	ldi	r23, 0x06	; 6
 b8c:	41 e0       	ldi	r20, 0x01	; 1
 b8e:	db 01       	movw	r26, r22
 b90:	8c 91       	ld	r24, X
 b92:	81 11       	cpse	r24, r1
 b94:	5d cf       	rjmp	.-326    	; 0xa50 <xTaskResumeAll+0x28>
 b96:	ef 2b       	or	r30, r31
 b98:	11 f0       	breq	.+4      	; 0xb9e <xTaskResumeAll+0x176>
 b9a:	0e 94 15 02 	call	0x42a	; 0x42a <prvResetNextTaskUnblockTime>
 b9e:	c0 91 ae 06 	lds	r28, 0x06AE	; 0x8006ae <xPendedTicks>
 ba2:	d0 91 af 06 	lds	r29, 0x06AF	; 0x8006af <xPendedTicks+0x1>
 ba6:	20 97       	sbiw	r28, 0x00	; 0
 ba8:	61 f0       	breq	.+24     	; 0xbc2 <xTaskResumeAll+0x19a>
 baa:	11 e0       	ldi	r17, 0x01	; 1
 bac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <xTaskIncrementTick>
 bb0:	81 11       	cpse	r24, r1
 bb2:	10 93 ad 06 	sts	0x06AD, r17	; 0x8006ad <xYieldPendings>
 bb6:	21 97       	sbiw	r28, 0x01	; 1
 bb8:	c9 f7       	brne	.-14     	; 0xbac <xTaskResumeAll+0x184>
 bba:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <xPendedTicks+0x1>
 bbe:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <xPendedTicks>
 bc2:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <xYieldPendings>
 bc6:	88 23       	and	r24, r24
 bc8:	51 f0       	breq	.+20     	; 0xbde <xTaskResumeAll+0x1b6>
 bca:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <pxCurrentTCB>
 bce:	90 91 03 07 	lds	r25, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 bd2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vPortYield>
 bd6:	81 e0       	ldi	r24, 0x01	; 1
 bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <xTaskResumeAll+0x1b8>
 bda:	80 e0       	ldi	r24, 0x00	; 0
 bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <xTaskResumeAll+0x1b8>
 bde:	80 e0       	ldi	r24, 0x00	; 0
 be0:	0f 90       	pop	r0
 be2:	0f be       	out	0x3f, r0	; 63
 be4:	df 91       	pop	r29
 be6:	cf 91       	pop	r28
 be8:	1f 91       	pop	r17
 bea:	08 95       	ret

00000bec <vTaskSwitchContext>:
#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 bec:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <uxSchedulerSuspended>
 bf0:	88 23       	and	r24, r24
 bf2:	21 f0       	breq	.+8      	; 0xbfc <vTaskSwitchContext+0x10>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 bf4:	81 e0       	ldi	r24, 0x01	; 1
 bf6:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xYieldPendings>
 bfa:	08 95       	ret
        }
        else
        {
            xYieldPendings[ 0 ] = pdFALSE;
 bfc:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <xYieldPendings>
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
 c00:	20 91 b1 06 	lds	r18, 0x06B1	; 0x8006b1 <uxTopReadyPriority>
 c04:	82 2f       	mov	r24, r18
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	fc 01       	movw	r30, r24
 c0a:	ee 0f       	add	r30, r30
 c0c:	ff 1f       	adc	r31, r31
 c0e:	ee 0f       	add	r30, r30
 c10:	ff 1f       	adc	r31, r31
 c12:	ee 0f       	add	r30, r30
 c14:	ff 1f       	adc	r31, r31
 c16:	e8 0f       	add	r30, r24
 c18:	f9 1f       	adc	r31, r25
 c1a:	e2 52       	subi	r30, 0x22	; 34
 c1c:	f9 4f       	sbci	r31, 0xF9	; 249
 c1e:	30 81       	ld	r19, Z
 c20:	31 11       	cpse	r19, r1
 c22:	11 c0       	rjmp	.+34     	; 0xc46 <vTaskSwitchContext+0x5a>
 c24:	21 50       	subi	r18, 0x01	; 1
 c26:	82 2f       	mov	r24, r18
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	fc 01       	movw	r30, r24
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	ee 0f       	add	r30, r30
 c32:	ff 1f       	adc	r31, r31
 c34:	ee 0f       	add	r30, r30
 c36:	ff 1f       	adc	r31, r31
 c38:	e8 0f       	add	r30, r24
 c3a:	f9 1f       	adc	r31, r25
 c3c:	e2 52       	subi	r30, 0x22	; 34
 c3e:	f9 4f       	sbci	r31, 0xF9	; 249
 c40:	30 81       	ld	r19, Z
 c42:	33 23       	and	r19, r19
 c44:	79 f3       	breq	.-34     	; 0xc24 <vTaskSwitchContext+0x38>
 c46:	ac 01       	movw	r20, r24
 c48:	44 0f       	add	r20, r20
 c4a:	55 1f       	adc	r21, r21
 c4c:	44 0f       	add	r20, r20
 c4e:	55 1f       	adc	r21, r21
 c50:	44 0f       	add	r20, r20
 c52:	55 1f       	adc	r21, r21
 c54:	48 0f       	add	r20, r24
 c56:	59 1f       	adc	r21, r25
 c58:	fa 01       	movw	r30, r20
 c5a:	e2 52       	subi	r30, 0x22	; 34
 c5c:	f9 4f       	sbci	r31, 0xF9	; 249
 c5e:	a1 81       	ldd	r26, Z+1	; 0x01
 c60:	b2 81       	ldd	r27, Z+2	; 0x02
 c62:	12 96       	adiw	r26, 0x02	; 2
 c64:	6d 91       	ld	r22, X+
 c66:	7c 91       	ld	r23, X
 c68:	13 97       	sbiw	r26, 0x03	; 3
 c6a:	72 83       	std	Z+2, r23	; 0x02
 c6c:	61 83       	std	Z+1, r22	; 0x01
 c6e:	4f 51       	subi	r20, 0x1F	; 31
 c70:	59 4f       	sbci	r21, 0xF9	; 249
 c72:	64 17       	cp	r22, r20
 c74:	75 07       	cpc	r23, r21
 c76:	79 f4       	brne	.+30     	; 0xc96 <vTaskSwitchContext+0xaa>
 c78:	fc 01       	movw	r30, r24
 c7a:	ee 0f       	add	r30, r30
 c7c:	ff 1f       	adc	r31, r31
 c7e:	ee 0f       	add	r30, r30
 c80:	ff 1f       	adc	r31, r31
 c82:	ee 0f       	add	r30, r30
 c84:	ff 1f       	adc	r31, r31
 c86:	e8 0f       	add	r30, r24
 c88:	f9 1f       	adc	r31, r25
 c8a:	e2 52       	subi	r30, 0x22	; 34
 c8c:	f9 4f       	sbci	r31, 0xF9	; 249
 c8e:	45 81       	ldd	r20, Z+5	; 0x05
 c90:	56 81       	ldd	r21, Z+6	; 0x06
 c92:	52 83       	std	Z+2, r21	; 0x02
 c94:	41 83       	std	Z+1, r20	; 0x01
 c96:	fc 01       	movw	r30, r24
 c98:	ee 0f       	add	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	ee 0f       	add	r30, r30
 c9e:	ff 1f       	adc	r31, r31
 ca0:	ee 0f       	add	r30, r30
 ca2:	ff 1f       	adc	r31, r31
 ca4:	8e 0f       	add	r24, r30
 ca6:	9f 1f       	adc	r25, r31
 ca8:	fc 01       	movw	r30, r24
 caa:	e2 52       	subi	r30, 0x22	; 34
 cac:	f9 4f       	sbci	r31, 0xF9	; 249
 cae:	01 80       	ldd	r0, Z+1	; 0x01
 cb0:	f2 81       	ldd	r31, Z+2	; 0x02
 cb2:	e0 2d       	mov	r30, r0
 cb4:	86 81       	ldd	r24, Z+6	; 0x06
 cb6:	97 81       	ldd	r25, Z+7	; 0x07
 cb8:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <pxCurrentTCB+0x1>
 cbc:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <pxCurrentTCB>
 cc0:	20 93 b1 06 	sts	0x06B1, r18	; 0x8006b1 <uxTopReadyPriority>
            traceTASK_SWITCHED_IN();

            /* Macro to inject port specific behaviour immediately after
             * switching tasks, such as setting an end of stack watchpoint
             * or reconfiguring the MPU. */
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 cc4:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <pxCurrentTCB>
 cc8:	90 91 03 07 	lds	r25, 0x0703	; 0x800703 <pxCurrentTCB+0x1>
 ccc:	08 95       	ret

00000cce <LCD_Command>:
 *  Author: Ahmed
 */ 
#include "lcd.h"
void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
 cce:	98 b3       	in	r25, 0x18	; 24
 cd0:	9f 70       	andi	r25, 0x0F	; 15
 cd2:	28 2f       	mov	r18, r24
 cd4:	20 7f       	andi	r18, 0xF0	; 240
 cd6:	92 2b       	or	r25, r18
 cd8:	98 bb       	out	0x18, r25	; 24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
 cda:	c0 98       	cbi	0x18, 0	; 24
	LCD_Port |= (1<<EN);		/* Enable pulse */
 cdc:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 cde:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 ce0:	c1 98       	cbi	0x18, 1	; 24
 ce2:	32 e4       	ldi	r19, 0x42	; 66
 ce4:	3a 95       	dec	r19
 ce6:	f1 f7       	brne	.-4      	; 0xce4 <LCD_Command+0x16>
 ce8:	00 c0       	rjmp	.+0      	; 0xcea <LCD_Command+0x1c>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
 cea:	28 b3       	in	r18, 0x18	; 24
 cec:	2f 70       	andi	r18, 0x0F	; 15
 cee:	30 e1       	ldi	r19, 0x10	; 16
 cf0:	83 9f       	mul	r24, r19
 cf2:	c0 01       	movw	r24, r0
 cf4:	11 24       	eor	r1, r1
 cf6:	82 2b       	or	r24, r18
 cf8:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
 cfa:	c1 9a       	sbi	0x18, 1	; 24
 cfc:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 cfe:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d00:	83 ef       	ldi	r24, 0xF3	; 243
 d02:	91 e0       	ldi	r25, 0x01	; 1
 d04:	01 97       	sbiw	r24, 0x01	; 1
 d06:	f1 f7       	brne	.-4      	; 0xd04 <LCD_Command+0x36>
 d08:	00 c0       	rjmp	.+0      	; 0xd0a <LCD_Command+0x3c>
 d0a:	00 00       	nop
 d0c:	08 95       	ret

00000d0e <LCD_Char>:
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
 d0e:	98 b3       	in	r25, 0x18	; 24
 d10:	9f 70       	andi	r25, 0x0F	; 15
 d12:	28 2f       	mov	r18, r24
 d14:	20 7f       	andi	r18, 0xF0	; 240
 d16:	92 2b       	or	r25, r18
 d18:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
 d1a:	c0 9a       	sbi	0x18, 0	; 24
	LCD_Port|= (1<<EN);
 d1c:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d1e:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 d20:	c1 98       	cbi	0x18, 1	; 24
 d22:	32 e4       	ldi	r19, 0x42	; 66
 d24:	3a 95       	dec	r19
 d26:	f1 f7       	brne	.-4      	; 0xd24 <LCD_Char+0x16>
 d28:	00 c0       	rjmp	.+0      	; 0xd2a <LCD_Char+0x1c>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
 d2a:	28 b3       	in	r18, 0x18	; 24
 d2c:	2f 70       	andi	r18, 0x0F	; 15
 d2e:	30 e1       	ldi	r19, 0x10	; 16
 d30:	83 9f       	mul	r24, r19
 d32:	c0 01       	movw	r24, r0
 d34:	11 24       	eor	r1, r1
 d36:	82 2b       	or	r24, r18
 d38:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
 d3a:	c1 9a       	sbi	0x18, 1	; 24
 d3c:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 d3e:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d40:	83 ef       	ldi	r24, 0xF3	; 243
 d42:	91 e0       	ldi	r25, 0x01	; 1
 d44:	01 97       	sbiw	r24, 0x01	; 1
 d46:	f1 f7       	brne	.-4      	; 0xd44 <LCD_Char+0x36>
 d48:	00 c0       	rjmp	.+0      	; 0xd4a <LCD_Char+0x3c>
 d4a:	00 00       	nop
 d4c:	08 95       	ret

00000d4e <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
 d4e:	8f ef       	ldi	r24, 0xFF	; 255
 d50:	87 bb       	out	0x17, r24	; 23
 d52:	87 e8       	ldi	r24, 0x87	; 135
 d54:	93 e1       	ldi	r25, 0x13	; 19
 d56:	01 97       	sbiw	r24, 0x01	; 1
 d58:	f1 f7       	brne	.-4      	; 0xd56 <LCD_Init+0x8>
 d5a:	00 c0       	rjmp	.+0      	; 0xd5c <LCD_Init+0xe>
 d5c:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
 d5e:	82 e0       	ldi	r24, 0x02	; 2
 d60:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 d64:	88 e2       	ldi	r24, 0x28	; 40
 d66:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
 d6a:	8c e0       	ldi	r24, 0x0C	; 12
 d6c:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 d70:	86 e0       	ldi	r24, 0x06	; 6
 d72:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
 d76:	81 e0       	ldi	r24, 0x01	; 1
 d78:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_Command>
 d7c:	83 ef       	ldi	r24, 0xF3	; 243
 d7e:	91 e0       	ldi	r25, 0x01	; 1
 d80:	01 97       	sbiw	r24, 0x01	; 1
 d82:	f1 f7       	brne	.-4      	; 0xd80 <LCD_Init+0x32>
 d84:	00 c0       	rjmp	.+0      	; 0xd86 <LCD_Init+0x38>
 d86:	00 00       	nop
 d88:	08 95       	ret

00000d8a <LCD_String>:
	_delay_ms(2);
}

void LCD_String (char *str)		/* Send string to LCD function */
{
 d8a:	cf 93       	push	r28
 d8c:	df 93       	push	r29
 d8e:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 d90:	88 81       	ld	r24, Y
 d92:	88 23       	and	r24, r24
 d94:	31 f0       	breq	.+12     	; 0xda2 <LCD_String+0x18>
 d96:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
 d98:	0e 94 87 06 	call	0xd0e	; 0xd0e <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 d9c:	89 91       	ld	r24, Y+
 d9e:	81 11       	cpse	r24, r1
 da0:	fb cf       	rjmp	.-10     	; 0xd98 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
 da2:	df 91       	pop	r29
 da4:	cf 91       	pop	r28
 da6:	08 95       	ret

00000da8 <TaskChargingStart>:
	while (1) {
	}
}

// Charging Session Start Task (200ms)
void TaskChargingStart(void *pvParameters) {
 da8:	ff cf       	rjmp	.-2      	; 0xda8 <TaskChargingStart>

00000daa <TaskStopSession>:

	}
}

// Stop Session Task (100ms)
void TaskStopSession(void *pvParameters) {
 daa:	ff cf       	rjmp	.-2      	; 0xdaa <TaskStopSession>

00000dac <TaskDisplayRefresh>:

	}
}

// Display Refresh Task (100ms)
void TaskDisplayRefresh(void *pvParameters) {
 dac:	ff cf       	rjmp	.-2      	; 0xdac <TaskDisplayRefresh>

00000dae <TaskUserCommand>:

	}
}

// User Command Response Task (100ms)
void TaskUserCommand(void *pvParameters) {
 dae:	ff cf       	rjmp	.-2      	; 0xdae <TaskUserCommand>

00000db0 <TaskFaultDetection>:

	}
}

// Fault Detection Task (150ms)
void TaskFaultDetection(void *pvParameters) {
 db0:	ff cf       	rjmp	.-2      	; 0xdb0 <TaskFaultDetection>

00000db2 <main>:
void TaskUserCommand(void *pvParameters);
void TaskFaultDetection(void *pvParameters);

int main(void) {

	LCD_Init();
 db2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <LCD_Init>
	LCD_String("ElectronicWINGS");
 db6:	86 e6       	ldi	r24, 0x66	; 102
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	0e 94 c5 06 	call	0xd8a	; 0xd8a <LCD_String>
	LCD_Command(0xC0);      /* Go to 2nd line */
 dbe:	80 ec       	ldi	r24, 0xC0	; 192
 dc0:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_Command>
	LCD_String("Hello World");
 dc4:	86 e7       	ldi	r24, 0x76	; 118
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <LCD_String>

	xTaskCreate(TaskChargingStart, "ChargingStart", 128, NULL, 3, &TaskChargingStartHandle);
 dcc:	0f 2e       	mov	r0, r31
 dce:	f8 e0       	ldi	r31, 0x08	; 8
 dd0:	ef 2e       	mov	r14, r31
 dd2:	f7 e0       	ldi	r31, 0x07	; 7
 dd4:	ff 2e       	mov	r15, r31
 dd6:	f0 2d       	mov	r31, r0
 dd8:	03 e0       	ldi	r16, 0x03	; 3
 dda:	20 e0       	ldi	r18, 0x00	; 0
 ddc:	30 e0       	ldi	r19, 0x00	; 0
 dde:	40 e8       	ldi	r20, 0x80	; 128
 de0:	62 e8       	ldi	r22, 0x82	; 130
 de2:	70 e0       	ldi	r23, 0x00	; 0
 de4:	84 ed       	ldi	r24, 0xD4	; 212
 de6:	96 e0       	ldi	r25, 0x06	; 6
 de8:	0e 94 6f 02 	call	0x4de	; 0x4de <xTaskCreate>
	xTaskCreate(TaskStopSession, "StopSession", 128, NULL, 3, &TaskStopSessionHandle);
 dec:	0f 2e       	mov	r0, r31
 dee:	fc e0       	ldi	r31, 0x0C	; 12
 df0:	ef 2e       	mov	r14, r31
 df2:	f7 e0       	ldi	r31, 0x07	; 7
 df4:	ff 2e       	mov	r15, r31
 df6:	f0 2d       	mov	r31, r0
 df8:	20 e0       	ldi	r18, 0x00	; 0
 dfa:	30 e0       	ldi	r19, 0x00	; 0
 dfc:	40 e8       	ldi	r20, 0x80	; 128
 dfe:	60 e9       	ldi	r22, 0x90	; 144
 e00:	70 e0       	ldi	r23, 0x00	; 0
 e02:	85 ed       	ldi	r24, 0xD5	; 213
 e04:	96 e0       	ldi	r25, 0x06	; 6
 e06:	0e 94 6f 02 	call	0x4de	; 0x4de <xTaskCreate>
	xTaskCreate(TaskDisplayRefresh, "DisplayRefresh", 128, NULL, 2, &TaskDisplayRefreshHandle);
 e0a:	0f 2e       	mov	r0, r31
 e0c:	f4 e0       	ldi	r31, 0x04	; 4
 e0e:	ef 2e       	mov	r14, r31
 e10:	f7 e0       	ldi	r31, 0x07	; 7
 e12:	ff 2e       	mov	r15, r31
 e14:	f0 2d       	mov	r31, r0
 e16:	02 e0       	ldi	r16, 0x02	; 2
 e18:	20 e0       	ldi	r18, 0x00	; 0
 e1a:	30 e0       	ldi	r19, 0x00	; 0
 e1c:	40 e8       	ldi	r20, 0x80	; 128
 e1e:	6c e9       	ldi	r22, 0x9C	; 156
 e20:	70 e0       	ldi	r23, 0x00	; 0
 e22:	86 ed       	ldi	r24, 0xD6	; 214
 e24:	96 e0       	ldi	r25, 0x06	; 6
 e26:	0e 94 6f 02 	call	0x4de	; 0x4de <xTaskCreate>
	xTaskCreate(TaskUserCommand, "UserCommand", 128, NULL, 2, &TaskUserCommandHandle);
 e2a:	0f 2e       	mov	r0, r31
 e2c:	f6 e0       	ldi	r31, 0x06	; 6
 e2e:	ef 2e       	mov	r14, r31
 e30:	f7 e0       	ldi	r31, 0x07	; 7
 e32:	ff 2e       	mov	r15, r31
 e34:	f0 2d       	mov	r31, r0
 e36:	20 e0       	ldi	r18, 0x00	; 0
 e38:	30 e0       	ldi	r19, 0x00	; 0
 e3a:	40 e8       	ldi	r20, 0x80	; 128
 e3c:	6b ea       	ldi	r22, 0xAB	; 171
 e3e:	70 e0       	ldi	r23, 0x00	; 0
 e40:	87 ed       	ldi	r24, 0xD7	; 215
 e42:	96 e0       	ldi	r25, 0x06	; 6
 e44:	0e 94 6f 02 	call	0x4de	; 0x4de <xTaskCreate>
	xTaskCreate(TaskFaultDetection, "FaultDetection", 128, NULL, 4, &TaskFaultDetectionHandle);
 e48:	0f 2e       	mov	r0, r31
 e4a:	fa e0       	ldi	r31, 0x0A	; 10
 e4c:	ef 2e       	mov	r14, r31
 e4e:	f7 e0       	ldi	r31, 0x07	; 7
 e50:	ff 2e       	mov	r15, r31
 e52:	f0 2d       	mov	r31, r0
 e54:	04 e0       	ldi	r16, 0x04	; 4
 e56:	20 e0       	ldi	r18, 0x00	; 0
 e58:	30 e0       	ldi	r19, 0x00	; 0
 e5a:	40 e8       	ldi	r20, 0x80	; 128
 e5c:	67 eb       	ldi	r22, 0xB7	; 183
 e5e:	70 e0       	ldi	r23, 0x00	; 0
 e60:	88 ed       	ldi	r24, 0xD8	; 216
 e62:	96 e0       	ldi	r25, 0x06	; 6
 e64:	0e 94 6f 02 	call	0x4de	; 0x4de <xTaskCreate>

	vTaskStartScheduler();
 e68:	0e 94 a0 03 	call	0x740	; 0x740 <vTaskStartScheduler>
 e6c:	ff cf       	rjmp	.-2      	; 0xe6c <main+0xba>

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
