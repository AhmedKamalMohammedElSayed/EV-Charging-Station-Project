
EV_charging_station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004948  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00004948  000049dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000685  0080011a  0080011a  00004a96  2**0
                  ALLOC
  3 .stab         0000ab90  00000000  00000000  00004a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006725  00000000  00000000  0000f628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000005c  00000000  00000000  00015d4d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00015dac  2**2
                  CONTENTS, READONLY
  7 .avr.prop     00000016  00000000  00000000  00015de8  2**0
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  00015dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  000162e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00016787  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  000167a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_7>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <xEventGroupSetBits+0x60>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <vCoRoutineSchedule+0x10a>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <LCD_String>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <ADC_PRESCALER_SET+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 e4       	ldi	r30, 0x48	; 72
     162:	f9 e4       	ldi	r31, 0x49	; 73
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	aa 31       	cpi	r26, 0x1A	; 26
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	27 e0       	ldi	r18, 0x07	; 7
     172:	aa e1       	ldi	r26, 0x1A	; 26
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	af 39       	cpi	r26, 0x9F	; 159
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <main>
     184:	0c 94 a2 24 	jmp	0x4944	; 0x4944 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <ADC_PRESCALER_SET>:
     18c:	96 b1       	in	r25, 0x06	; 6
     18e:	98 7f       	andi	r25, 0xF8	; 248
     190:	96 b9       	out	0x06, r25	; 6
     192:	80 31       	cpi	r24, 0x10	; 16
     194:	c1 f0       	breq	.+48     	; 0x1c6 <ADC_PRESCALER_SET+0x3a>
     196:	40 f4       	brcc	.+16     	; 0x1a8 <ADC_PRESCALER_SET+0x1c>
     198:	84 30       	cpi	r24, 0x04	; 4
     19a:	79 f0       	breq	.+30     	; 0x1ba <ADC_PRESCALER_SET+0x2e>
     19c:	88 30       	cpi	r24, 0x08	; 8
     19e:	79 f0       	breq	.+30     	; 0x1be <ADC_PRESCALER_SET+0x32>
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	c9 f4       	brne	.+50     	; 0x1d6 <ADC_PRESCALER_SET+0x4a>
     1a4:	30 9a       	sbi	0x06, 0	; 6
     1a6:	08 95       	ret
     1a8:	80 34       	cpi	r24, 0x40	; 64
     1aa:	79 f0       	breq	.+30     	; 0x1ca <ADC_PRESCALER_SET+0x3e>
     1ac:	80 38       	cpi	r24, 0x80	; 128
     1ae:	81 f0       	breq	.+32     	; 0x1d0 <ADC_PRESCALER_SET+0x44>
     1b0:	80 32       	cpi	r24, 0x20	; 32
     1b2:	89 f4       	brne	.+34     	; 0x1d6 <ADC_PRESCALER_SET+0x4a>
     1b4:	86 b1       	in	r24, 0x06	; 6
     1b6:	85 60       	ori	r24, 0x05	; 5
     1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <ADC_PRESCALER_SET+0x36>
     1ba:	31 9a       	sbi	0x06, 1	; 6
     1bc:	08 95       	ret
     1be:	86 b1       	in	r24, 0x06	; 6
     1c0:	83 60       	ori	r24, 0x03	; 3
     1c2:	86 b9       	out	0x06, r24	; 6
     1c4:	08 95       	ret
     1c6:	32 9a       	sbi	0x06, 2	; 6
     1c8:	08 95       	ret
     1ca:	86 b1       	in	r24, 0x06	; 6
     1cc:	86 60       	ori	r24, 0x06	; 6
     1ce:	f9 cf       	rjmp	.-14     	; 0x1c2 <ADC_PRESCALER_SET+0x36>
     1d0:	86 b1       	in	r24, 0x06	; 6
     1d2:	87 60       	ori	r24, 0x07	; 7
     1d4:	f6 cf       	rjmp	.-20     	; 0x1c2 <ADC_PRESCALER_SET+0x36>
     1d6:	86 b1       	in	r24, 0x06	; 6
     1d8:	88 7f       	andi	r24, 0xF8	; 248
     1da:	f3 cf       	rjmp	.-26     	; 0x1c2 <ADC_PRESCALER_SET+0x36>

000001dc <ADC_voltage_Reference>:

//This function selects the voltage reference
//by default AVCC has been selected
void ADC_voltage_Reference(uint8_t Reference_Voltage)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
     1dc:	97 b1       	in	r25, 0x07	; 7
     1de:	9f 73       	andi	r25, 0x3F	; 63
     1e0:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1<<REFS0); // Default AVCC has been set
     1e2:	3e 9a       	sbi	0x07, 6	; 7


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
     1e4:	81 11       	cpse	r24, r1
     1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <ADC_voltage_Reference+0x14>
     1e8:	87 b1       	in	r24, 0x07	; 7
     1ea:	8f 73       	andi	r24, 0x3F	; 63
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     1ec:	87 b9       	out	0x07, r24	; 7
     1ee:	08 95       	ret
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	11 f4       	brne	.+4      	; 0x1f8 <ADC_voltage_Reference+0x1c>
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
	else{ADMUX |= (1<<REFS0);}
     1f4:	3e 9a       	sbi	0x07, 6	; 7

}
     1f6:	08 95       	ret
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     1f8:	83 30       	cpi	r24, 0x03	; 3
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <ADC_voltage_Reference+0x18>
     1fc:	87 b1       	in	r24, 0x07	; 7
     1fe:	80 6c       	ori	r24, 0xC0	; 192
     200:	f5 cf       	rjmp	.-22     	; 0x1ec <ADC_voltage_Reference+0x10>

00000202 <ADC_INIT>:
/*------------possible parameter---------
prescaler = 2,4,8,16,32,64,128
 Voltage_Reference = AREF,AVCC,INTERNAL
*/
void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
     202:	cf 93       	push	r28
     204:	c6 2f       	mov	r28, r22
	2) set prescaler
	3) reference voltage select
	4) left adjust of for data register
	*/

	ADCSRA |= (1<<ADEN); // ADC Enable
     206:	37 9a       	sbi	0x06, 7	; 6
	ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
     208:	0e 94 c6 00 	call	0x18c	; 0x18c <ADC_PRESCALER_SET>
	ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
     20c:	8c 2f       	mov	r24, r28
     20e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <ADC_voltage_Reference>
	ADMUX &= ~(1<<ADLAR); //left adjust off // Though bu default left adjust off // this line use for more convenient for future developer
     212:	3d 98       	cbi	0x07, 5	; 7
}
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <ADC_READ>:

//########################################################################################
//########################################################################################
uint16_t ADC_READ(uint8_t channel)
{
	ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     218:	97 b1       	in	r25, 0x07	; 7
     21a:	90 7e       	andi	r25, 0xE0	; 224
     21c:	97 b9       	out	0x07, r25	; 7

	switch(channel)
     21e:	88 30       	cpi	r24, 0x08	; 8
     220:	30 f5       	brcc	.+76     	; 0x26e <ADC_READ+0x56>
     222:	e8 2f       	mov	r30, r24
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	e9 5e       	subi	r30, 0xE9	; 233
     228:	fe 4f       	sbci	r31, 0xFE	; 254
     22a:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__tablejump2__>
     22e:	37 01       	movw	r6, r14
     230:	1f 01       	movw	r2, r30
     232:	26 01       	movw	r4, r12
     234:	28 01       	movw	r4, r16
     236:	2c 01       	movw	r4, r24
     238:	2e 01       	movw	r4, r28
     23a:	31 01       	movw	r6, r2
     23c:	34 01       	movw	r6, r8
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
     23e:	38 9a       	sbi	0x07, 0	; 7
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
	}
	ADCSRA |=(1<<ADSC); // ADC conversion start
     240:	36 9a       	sbi	0x06, 6	; 6

	while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
     242:	34 9b       	sbis	0x06, 4	; 6
     244:	fe cf       	rjmp	.-4      	; 0x242 <ADC_READ+0x2a>
	//uint8_t high,low;
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
     246:	84 b1       	in	r24, 0x04	; 4
     248:	95 b1       	in	r25, 0x05	; 5
}
     24a:	08 95       	ret
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
     24c:	39 9a       	sbi	0x07, 1	; 7
		       break;
     24e:	f8 cf       	rjmp	.-16     	; 0x240 <ADC_READ+0x28>
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
     250:	87 b1       	in	r24, 0x07	; 7
     252:	83 60       	ori	r24, 0x03	; 3
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     254:	87 b9       	out	0x07, r24	; 7
     256:	f4 cf       	rjmp	.-24     	; 0x240 <ADC_READ+0x28>
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
		       break;
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
			   break;
		case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
     258:	3a 9a       	sbi	0x07, 2	; 7
			   break;
     25a:	f2 cf       	rjmp	.-28     	; 0x240 <ADC_READ+0x28>
		case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
     25c:	87 b1       	in	r24, 0x07	; 7
     25e:	85 60       	ori	r24, 0x05	; 5
     260:	f9 cf       	rjmp	.-14     	; 0x254 <ADC_READ+0x3c>
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
     262:	87 b1       	in	r24, 0x07	; 7
     264:	86 60       	ori	r24, 0x06	; 6
     266:	f6 cf       	rjmp	.-20     	; 0x254 <ADC_READ+0x3c>
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
     268:	87 b1       	in	r24, 0x07	; 7
     26a:	87 60       	ori	r24, 0x07	; 7
     26c:	f3 cf       	rjmp	.-26     	; 0x254 <ADC_READ+0x3c>
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     26e:	87 b1       	in	r24, 0x07	; 7
     270:	80 7e       	andi	r24, 0xE0	; 224
     272:	f0 cf       	rjmp	.-32     	; 0x254 <ADC_READ+0x3c>

00000274 <ADC_GetVoltage>:
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
}
// Calculate the actual voltage from the ADC value
float ADC_GetVoltage(uint16_t adc_value) {
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
     27c:	2c 97       	sbiw	r28, 0x0c	; 12
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	de bf       	out	0x3e, r29	; 62
     284:	0f be       	out	0x3f, r0	; 63
     286:	cd bf       	out	0x3d, r28	; 61
    // Calculate voltage at the ADC pin
    float v_adc = (float)(adc_value / ADC_RESOLUTION) * VREF;
     288:	bc 01       	movw	r22, r24
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__floatunsisf>
     292:	69 87       	std	Y+9, r22	; 0x09
     294:	7a 87       	std	Y+10, r23	; 0x0a
     296:	8b 87       	std	Y+11, r24	; 0x0b
     298:	9c 87       	std	Y+12, r25	; 0x0c
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 ec       	ldi	r19, 0xC0	; 192
     29e:	4f e7       	ldi	r20, 0x7F	; 127
     2a0:	54 e4       	ldi	r21, 0x44	; 68
     2a2:	69 85       	ldd	r22, Y+9	; 0x09
     2a4:	7a 85       	ldd	r23, Y+10	; 0x0a
     2a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     2a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     2aa:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__divsf3>
     2ae:	6d 83       	std	Y+5, r22	; 0x05
     2b0:	7e 83       	std	Y+6, r23	; 0x06
     2b2:	8f 83       	std	Y+7, r24	; 0x07
     2b4:	98 87       	std	Y+8, r25	; 0x08
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	40 ea       	ldi	r20, 0xA0	; 160
     2bc:	50 e4       	ldi	r21, 0x40	; 64
     2be:	6d 81       	ldd	r22, Y+5	; 0x05
     2c0:	7e 81       	ldd	r23, Y+6	; 0x06
     2c2:	8f 81       	ldd	r24, Y+7	; 0x07
     2c4:	98 85       	ldd	r25, Y+8	; 0x08
     2c6:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__mulsf3>
     2ca:	69 83       	std	Y+1, r22	; 0x01
     2cc:	7a 83       	std	Y+2, r23	; 0x02
     2ce:	8b 83       	std	Y+3, r24	; 0x03
     2d0:	9c 83       	std	Y+4, r25	; 0x04

    // Scale the voltage using the voltage divider ratio
    return v_adc ;
     2d2:	69 81       	ldd	r22, Y+1	; 0x01
     2d4:	7a 81       	ldd	r23, Y+2	; 0x02
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	9c 81       	ldd	r25, Y+4	; 0x04
}
     2da:	2c 96       	adiw	r28, 0x0c	; 12
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <LCD_Command>:
 *  Author: Ahmed
 */ 
#include "lcd.h"
void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
     2ec:	98 b3       	in	r25, 0x18	; 24
     2ee:	9f 70       	andi	r25, 0x0F	; 15
     2f0:	28 2f       	mov	r18, r24
     2f2:	20 7f       	andi	r18, 0xF0	; 240
     2f4:	92 2b       	or	r25, r18
     2f6:	98 bb       	out	0x18, r25	; 24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
     2f8:	c0 98       	cbi	0x18, 0	; 24
	LCD_Port |= (1<<EN);		/* Enable pulse */
     2fa:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fc:	42 e0       	ldi	r20, 0x02	; 2
     2fe:	4a 95       	dec	r20
     300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_Command+0x12>
     302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_Command+0x18>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     304:	c1 98       	cbi	0x18, 1	; 24
     306:	ef e8       	ldi	r30, 0x8F	; 143
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_Command+0x1e>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_Command+0x24>
     310:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
     312:	98 b3       	in	r25, 0x18	; 24
     314:	9f 70       	andi	r25, 0x0F	; 15
     316:	f0 e1       	ldi	r31, 0x10	; 16
     318:	8f 9f       	mul	r24, r31
     31a:	90 01       	movw	r18, r0
     31c:	11 24       	eor	r1, r1
     31e:	89 2f       	mov	r24, r25
     320:	82 2b       	or	r24, r18
     322:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
     324:	c1 9a       	sbi	0x18, 1	; 24
     326:	42 e0       	ldi	r20, 0x02	; 2
     328:	4a 95       	dec	r20
     32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_Command+0x3c>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_Command+0x42>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     32e:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     330:	8f e9       	ldi	r24, 0x9F	; 159
     332:	9f e0       	ldi	r25, 0x0F	; 15
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <LCD_Command+0x48>
     338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_Command+0x4e>
     33a:	00 00       	nop
	_delay_ms(2);
}
     33c:	08 95       	ret

0000033e <LCD_Char>:

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
     33e:	98 b3       	in	r25, 0x18	; 24
     340:	9f 70       	andi	r25, 0x0F	; 15
     342:	28 2f       	mov	r18, r24
     344:	20 7f       	andi	r18, 0xF0	; 240
     346:	92 2b       	or	r25, r18
     348:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
     34a:	c0 9a       	sbi	0x18, 0	; 24
	LCD_Port|= (1<<EN);
     34c:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34e:	42 e0       	ldi	r20, 0x02	; 2
     350:	4a 95       	dec	r20
     352:	f1 f7       	brne	.-4      	; 0x350 <LCD_Char+0x12>
     354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_Char+0x18>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     356:	c1 98       	cbi	0x18, 1	; 24
     358:	ef e8       	ldi	r30, 0x8F	; 143
     35a:	f1 e0       	ldi	r31, 0x01	; 1
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_Char+0x1e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_Char+0x24>
     362:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
     364:	98 b3       	in	r25, 0x18	; 24
     366:	9f 70       	andi	r25, 0x0F	; 15
     368:	f0 e1       	ldi	r31, 0x10	; 16
     36a:	8f 9f       	mul	r24, r31
     36c:	90 01       	movw	r18, r0
     36e:	11 24       	eor	r1, r1
     370:	89 2f       	mov	r24, r25
     372:	82 2b       	or	r24, r18
     374:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
     376:	c1 9a       	sbi	0x18, 1	; 24
     378:	42 e0       	ldi	r20, 0x02	; 2
     37a:	4a 95       	dec	r20
     37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_Char+0x3c>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_Char+0x42>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     380:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     382:	8f e9       	ldi	r24, 0x9F	; 159
     384:	9f e0       	ldi	r25, 0x0F	; 15
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <LCD_Char+0x48>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_Char+0x4e>
     38c:	00 00       	nop
	_delay_ms(2);
}
     38e:	08 95       	ret

00000390 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	87 bb       	out	0x17, r24	; 23
     394:	8f e3       	ldi	r24, 0x3F	; 63
     396:	9c e9       	ldi	r25, 0x9C	; 156
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <LCD_Init+0x8>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <LCD_Init+0xe>
     39e:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
     3a6:	88 e2       	ldi	r24, 0x28	; 40
     3a8:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
     3ac:	8c e0       	ldi	r24, 0x0C	; 12
     3ae:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
     3b2:	86 e0       	ldi	r24, 0x06	; 6
     3b4:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Command>
     3be:	8f e9       	ldi	r24, 0x9F	; 159
     3c0:	9f e0       	ldi	r25, 0x0F	; 15
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <LCD_Init+0x32>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <LCD_Init+0x38>
     3c8:	00 00       	nop
	_delay_ms(2);
}
     3ca:	08 95       	ret

000003cc <LCD_String>:

void LCD_String (char *str)		/* Send string to LCD function */
{
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     3d2:	89 91       	ld	r24, Y+
     3d4:	81 11       	cpse	r24, r1
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <LCD_String+0x12>
	{
		LCD_Char (str[i]);
	}
}
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret
void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
     3de:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_Char>
     3e2:	f7 cf       	rjmp	.-18     	; 0x3d2 <LCD_String+0x6>

000003e4 <LCD_String_xy>:
	}
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
     3ea:	81 11       	cpse	r24, r1
     3ec:	09 c0       	rjmp	.+18     	; 0x400 <__EEPROM_REGION_LENGTH__>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
     3ee:	86 2f       	mov	r24, r22
     3f0:	80 68       	ori	r24, 0x80	; 128
	}
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
     3f2:	60 31       	cpi	r22, 0x10	; 16
     3f4:	58 f0       	brcs	.+22     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
     3f6:	ce 01       	movw	r24, r28
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
     3fc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <LCD_String>

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
     400:	81 30       	cpi	r24, 0x01	; 1
     402:	c9 f7       	brne	.-14     	; 0x3f6 <LCD_String_xy+0x12>
     404:	60 31       	cpi	r22, 0x10	; 16
     406:	b8 f7       	brcc	.-18     	; 0x3f6 <LCD_String_xy+0x12>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
     408:	86 2f       	mov	r24, r22
     40a:	80 6c       	ori	r24, 0xC0	; 192
     40c:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Command>
     410:	f2 cf       	rjmp	.-28     	; 0x3f6 <LCD_String_xy+0x12>

00000412 <LCD_Clear>:
	LCD_String(str);		/* Call LCD string function */
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Command>
     418:	8f e9       	ldi	r24, 0x9F	; 159
     41a:	9f e0       	ldi	r25, 0x0F	; 15
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <LCD_Clear+0xa>
     420:	00 c0       	rjmp	.+0      	; 0x422 <LCD_Clear+0x10>
     422:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
     424:	80 e8       	ldi	r24, 0x80	; 128
     426:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <LCD_Command>

0000042a <xCoRoutineCreate>:
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode,
                                 UBaseType_t uxPriority,
                                 UBaseType_t uxIndex )
    {
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	6c 01       	movw	r12, r24
     43a:	16 2f       	mov	r17, r22
     43c:	f4 2e       	mov	r15, r20

        /* Allocate the memory that will store the co-routine control block. */
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     43e:	8a e1       	ldi	r24, 0x1A	; 26
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <pvPortMalloc>
     446:	ec 01       	movw	r28, r24

            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     448:	8f ef       	ldi	r24, 0xFF	; 255
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );

        if( pxCoRoutine )
     44a:	20 97       	sbiw	r28, 0x00	; 0
     44c:	09 f4       	brne	.+2      	; 0x450 <xCoRoutineCreate+0x26>
     44e:	56 c0       	rjmp	.+172    	; 0x4fc <xCoRoutineCreate+0xd2>
        {
            /* If pxCurrentCoRoutine is NULL then this is the first co-routine to
            * be created and the co-routine data structures need initialising. */
            if( pxCurrentCoRoutine == NULL )
     450:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <pxCurrentCoRoutine>
     454:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <pxCurrentCoRoutine+0x1>
     458:	89 2b       	or	r24, r25
     45a:	21 f5       	brne	.+72     	; 0x4a4 <xCoRoutineCreate+0x7a>
            {
                pxCurrentCoRoutine = pxCoRoutine;
     45c:	d0 93 22 01 	sts	0x0122, r29	; 0x800122 <pxCurrentCoRoutine+0x1>
     460:	c0 93 21 01 	sts	0x0121, r28	; 0x800121 <pxCurrentCoRoutine>
    {
        UBaseType_t uxPriority;

        for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
        {
            vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     464:	82 e4       	ldi	r24, 0x42	; 66
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
     46c:	8b e4       	ldi	r24, 0x4B	; 75
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
        }

        vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     474:	89 e3       	ldi	r24, 0x39	; 57
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
        vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
     47c:	80 e3       	ldi	r24, 0x30	; 48
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
        vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
     484:	83 e2       	ldi	r24, 0x23	; 35
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>

        /* Start with pxDelayedCoRoutineList using list1 and the
         * pxOverflowDelayedCoRoutineList using list2. */
        pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     48c:	89 e3       	ldi	r24, 0x39	; 57
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <pxDelayedCoRoutineList+0x1>
     494:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     498:	80 e3       	ldi	r24, 0x30	; 48
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <pxOverflowDelayedCoRoutineList+0x1>
     4a0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <pxOverflowDelayedCoRoutineList>
     4a4:	11 11       	cpse	r17, r1
     4a6:	11 e0       	ldi	r17, 0x01	; 1
            {
                uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
            }

            /* Fill out the co-routine control block from the function parameters. */
            pxCoRoutine->uxState = corINITIAL_STATE;
     4a8:	19 8e       	std	Y+25, r1	; 0x19
     4aa:	18 8e       	std	Y+24, r1	; 0x18
            pxCoRoutine->uxPriority = uxPriority;
     4ac:	1e 8b       	std	Y+22, r17	; 0x16
            pxCoRoutine->uxIndex = uxIndex;
     4ae:	ff 8a       	std	Y+23, r15	; 0x17
            pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     4b0:	fe 01       	movw	r30, r28
     4b2:	c1 92       	st	Z+, r12
     4b4:	d1 92       	st	Z+, r13
     4b6:	7f 01       	movw	r14, r30

            /* Initialise all the other co-routine control block parameters. */
            vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     4b8:	cf 01       	movw	r24, r30
     4ba:	0e 94 d6 05 	call	0xbac	; 0xbac <vListInitialiseItem>
            vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     4be:	ce 01       	movw	r24, r28
     4c0:	0c 96       	adiw	r24, 0x0c	; 12
     4c2:	0e 94 d6 05 	call	0xbac	; 0xbac <vListInitialiseItem>

            /* Set the co-routine control block as a link back from the ListItem_t.
             * This is so we can get back to the containing CRCB from a generic item
             * in a list. */
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     4c6:	d9 87       	std	Y+9, r29	; 0x09
     4c8:	c8 87       	std	Y+8, r28	; 0x08
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     4ca:	db 8b       	std	Y+19, r29	; 0x13
     4cc:	ca 8b       	std	Y+18, r28	; 0x12

            /* Event lists are always in priority order. */
            listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	81 1b       	sub	r24, r17
     4d4:	91 09       	sbc	r25, r1
     4d6:	9d 87       	std	Y+13, r25	; 0x0d
     4d8:	8c 87       	std	Y+12, r24	; 0x0c

            /* Now the co-routine has been initialised it can be added to the ready
             * list at the correct priority. */
            prvAddCoRoutineToReadyQueue( pxCoRoutine );
     4da:	8e 89       	ldd	r24, Y+22	; 0x16
     4dc:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <uxTopCoRoutineReadyPriority>
     4e0:	98 17       	cp	r25, r24
     4e2:	10 f4       	brcc	.+4      	; 0x4e8 <xCoRoutineCreate+0xbe>
     4e4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxTopCoRoutineReadyPriority>
     4e8:	f9 e0       	ldi	r31, 0x09	; 9
     4ea:	8f 9f       	mul	r24, r31
     4ec:	c0 01       	movw	r24, r0
     4ee:	11 24       	eor	r1, r1
     4f0:	b7 01       	movw	r22, r14
     4f2:	8e 5b       	subi	r24, 0xBE	; 190
     4f4:	9e 4f       	sbci	r25, 0xFE	; 254
     4f6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsertEnd>

            xReturn = pdPASS;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xCoRoutineCreate( xReturn );

        return xReturn;
    }
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	08 95       	ret

0000050c <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

    void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay,
                                     List_t * pxEventList )
    {
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	8b 01       	movw	r16, r22

        traceENTER_vCoRoutineAddToDelayedList( xTicksToDelay, pxEventList );

        /* Calculate the time to wake - this may overflow but this is
         * not a problem. */
        xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     516:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <xCoRoutineTickCount>
     51a:	d0 91 1f 01 	lds	r29, 0x011F	; 0x80011f <xCoRoutineTickCount+0x1>
     51e:	c8 0f       	add	r28, r24
     520:	d9 1f       	adc	r29, r25

        /* We must remove ourselves from the ready list before adding
         * ourselves to the blocked list as the same list item is used for
         * both lists. */
        ( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     522:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <pxCurrentCoRoutine>
     526:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <pxCurrentCoRoutine+0x1>
     52a:	02 96       	adiw	r24, 0x02	; 2
     52c:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     530:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <pxCurrentCoRoutine>
     534:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <pxCurrentCoRoutine+0x1>
     538:	fb 01       	movw	r30, r22
     53a:	d3 83       	std	Z+3, r29	; 0x03
     53c:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xCoRoutineTickCount )
     53e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <xCoRoutineTickCount>
     542:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <xCoRoutineTickCount+0x1>
     546:	6e 5f       	subi	r22, 0xFE	; 254
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	c8 17       	cp	r28, r24
     54c:	d9 07       	cpc	r29, r25
     54e:	b0 f4       	brcc	.+44     	; 0x57c <vCoRoutineAddToDelayedList+0x70>
        {
            /* Wake time has overflowed.  Place this item in the
             * overflow list. */
            vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     550:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <pxOverflowDelayedCoRoutineList>
     554:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <pxOverflowDelayedCoRoutineList+0x1>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     558:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <vListInsert>
        }

        if( pxEventList )
     55c:	01 15       	cp	r16, r1
     55e:	11 05       	cpc	r17, r1
     560:	91 f0       	breq	.+36     	; 0x586 <vCoRoutineAddToDelayedList+0x7a>
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     562:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <pxCurrentCoRoutine>
     566:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <pxCurrentCoRoutine+0x1>
     56a:	64 5f       	subi	r22, 0xF4	; 244
     56c:	7f 4f       	sbci	r23, 0xFF	; 255
     56e:	c8 01       	movw	r24, r16
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16

        if( pxEventList )
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     578:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <vListInsert>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     57c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <pxDelayedCoRoutineList>
     580:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <pxDelayedCoRoutineList+0x1>
     584:	e9 cf       	rjmp	.-46     	; 0x558 <vCoRoutineAddToDelayedList+0x4c>
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <vCoRoutineSchedule>:
        xLastTickCount = xCoRoutineTickCount;
    }
/*-----------------------------------------------------------*/

    void vCoRoutineSchedule( void )
    {
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
        traceENTER_vCoRoutineSchedule();

        /* Only run a co-routine after prvInitialiseCoRoutineLists() has been
         * called.  prvInitialiseCoRoutineLists() is called automatically when a
         * co-routine is created. */
        if( pxDelayedCoRoutineList != NULL )
     59a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <pxDelayedCoRoutineList>
     59e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <pxDelayedCoRoutineList+0x1>
     5a2:	89 2b       	or	r24, r25
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <vCoRoutineSchedule+0x18>
     5a6:	44 c0       	rjmp	.+136    	; 0x630 <vCoRoutineSchedule+0xa0>
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
            }
            portENABLE_INTERRUPTS();

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     5a8:	99 e0       	ldi	r25, 0x09	; 9
     5aa:	f9 2e       	mov	r15, r25
    static void prvCheckPendingReadyList( void )
    {
        /* Are there any co-routines waiting to get moved to the ready list?  These
         * are co-routines that have been readied by an ISR.  The ISR cannot access
         * the ready lists itself. */
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     5ac:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <xPendingReadyCoRoutineList>
     5b0:	81 11       	cpse	r24, r1
     5b2:	44 c0       	rjmp	.+136    	; 0x63c <vCoRoutineSchedule+0xac>

    static void prvCheckDelayedList( void )
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     5b4:	0e 94 57 13 	call	0x26ae	; 0x26ae <xTaskGetTickCount>
     5b8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <xLastTickCount>
     5bc:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <xLastTickCount+0x1>
     5c0:	82 1b       	sub	r24, r18
     5c2:	93 0b       	sbc	r25, r19
     5c4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
     5c8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
                    }
                }
                portENABLE_INTERRUPTS();

                prvAddCoRoutineToReadyQueue( pxCRCB );
     5cc:	89 e0       	ldi	r24, 0x09	; 9
     5ce:	f8 2e       	mov	r15, r24
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
     5d0:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
     5d4:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
     5d8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <xCoRoutineTickCount>
     5dc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <xCoRoutineTickCount+0x1>
     5e0:	21 15       	cp	r18, r1
     5e2:	31 05       	cpc	r19, r1
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <vCoRoutineSchedule+0x58>
     5e6:	4c c0       	rjmp	.+152    	; 0x680 <vCoRoutineSchedule+0xf0>

                prvAddCoRoutineToReadyQueue( pxCRCB );
            }
        }

        xLastTickCount = xCoRoutineTickCount;
     5e8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <xLastTickCount+0x1>
     5ec:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <xLastTickCount>
     5f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxTopCoRoutineReadyPriority>

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     5f4:	28 2f       	mov	r18, r24
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	99 e0       	ldi	r25, 0x09	; 9
     5fa:	92 9f       	mul	r25, r18
     5fc:	f0 01       	movw	r30, r0
     5fe:	93 9f       	mul	r25, r19
     600:	f0 0d       	add	r31, r0
     602:	11 24       	eor	r1, r1
     604:	ee 5b       	subi	r30, 0xBE	; 190
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	40 81       	ld	r20, Z
     60a:	41 11       	cpse	r20, r1
     60c:	8d c0       	rjmp	.+282    	; 0x728 <vCoRoutineSchedule+0x198>
            {
                if( uxTopCoRoutineReadyPriority == 0 )
     60e:	88 23       	and	r24, r24
     610:	69 f0       	breq	.+26     	; 0x62c <vCoRoutineSchedule+0x9c>
                {
                    /* No more co-routines to check. */
                    return;
                }

                --uxTopCoRoutineReadyPriority;
     612:	81 50       	subi	r24, 0x01	; 1

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     614:	28 2f       	mov	r18, r24
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	92 9f       	mul	r25, r18
     61a:	f0 01       	movw	r30, r0
     61c:	93 9f       	mul	r25, r19
     61e:	f0 0d       	add	r31, r0
     620:	11 24       	eor	r1, r1
     622:	ee 5b       	subi	r30, 0xBE	; 190
     624:	fe 4f       	sbci	r31, 0xFE	; 254
     626:	90 81       	ld	r25, Z
     628:	91 11       	cpse	r25, r1
     62a:	7e c0       	rjmp	.+252    	; 0x728 <vCoRoutineSchedule+0x198>
     62c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxTopCoRoutineReadyPriority>
            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
        }

        traceRETURN_vCoRoutineSchedule();
    }
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	ff 90       	pop	r15
     63a:	08 95       	ret
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
        {
            CRCB_t * pxUnblockedCRCB;

            /* The pending ready list can be accessed by an ISR. */
            portDISABLE_INTERRUPTS();
     63c:	f8 94       	cli
            {
                pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyCoRoutineList ) );
     63e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <xPendingReadyCoRoutineList+0x5>
     642:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <xPendingReadyCoRoutineList+0x6>
     646:	c6 81       	ldd	r28, Z+6	; 0x06
     648:	d7 81       	ldd	r29, Z+7	; 0x07
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     64a:	ce 01       	movw	r24, r28
     64c:	0c 96       	adiw	r24, 0x0c	; 12
     64e:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
            }
            portENABLE_INTERRUPTS();
     652:	78 94       	sei

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     654:	8e 01       	movw	r16, r28
     656:	0e 5f       	subi	r16, 0xFE	; 254
     658:	1f 4f       	sbci	r17, 0xFF	; 255
     65a:	c8 01       	movw	r24, r16
     65c:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     660:	8e 89       	ldd	r24, Y+22	; 0x16
     662:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <uxTopCoRoutineReadyPriority>
     666:	98 17       	cp	r25, r24
     668:	10 f4       	brcc	.+4      	; 0x66e <vCoRoutineSchedule+0xde>
     66a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxTopCoRoutineReadyPriority>
     66e:	8f 9d       	mul	r24, r15
     670:	c0 01       	movw	r24, r0
     672:	11 24       	eor	r1, r1
     674:	b8 01       	movw	r22, r16
     676:	8e 5b       	subi	r24, 0xBE	; 190
     678:	9e 4f       	sbci	r25, 0xFE	; 254
     67a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsertEnd>
     67e:	96 cf       	rjmp	.-212    	; 0x5ac <vCoRoutineSchedule+0x1c>

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
        {
            xCoRoutineTickCount++;
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <xCoRoutineTickCount+0x1>
     686:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <xCoRoutineTickCount>
            xPassedTicks--;
     68a:	21 50       	subi	r18, 0x01	; 1
     68c:	31 09       	sbc	r19, r1
     68e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
     692:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>

            /* If the tick count has overflowed we need to swap the ready lists. */
            if( xCoRoutineTickCount == 0 )
     696:	89 2b       	or	r24, r25
     698:	81 f4       	brne	.+32     	; 0x6ba <vCoRoutineSchedule+0x12a>
     69a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <pxDelayedCoRoutineList>
     69e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <pxDelayedCoRoutineList+0x1>
                List_t * pxTemp;

                /* Tick count has overflowed so we need to swap the delay lists.  If there are
                 * any items in pxDelayedCoRoutineList here then there is an error! */
                pxTemp = pxDelayedCoRoutineList;
                pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     6a2:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <pxOverflowDelayedCoRoutineList>
     6a6:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <pxOverflowDelayedCoRoutineList+0x1>
     6aa:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <pxDelayedCoRoutineList+0x1>
     6ae:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <pxDelayedCoRoutineList>
                pxOverflowDelayedCoRoutineList = pxTemp;
     6b2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <pxOverflowDelayedCoRoutineList+0x1>
     6b6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <pxOverflowDelayedCoRoutineList>
            }

            /* See if this tick has made a timeout expire. */
            while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     6ba:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <pxDelayedCoRoutineList>
     6be:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <pxDelayedCoRoutineList+0x1>
     6c2:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <xCoRoutineTickCount>
     6c6:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <xCoRoutineTickCount+0x1>
     6ca:	80 81       	ld	r24, Z
     6cc:	88 23       	and	r24, r24
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <vCoRoutineSchedule+0x142>
     6d0:	7f cf       	rjmp	.-258    	; 0x5d0 <vCoRoutineSchedule+0x40>
            {
                pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     6d2:	05 80       	ldd	r0, Z+5	; 0x05
     6d4:	f6 81       	ldd	r31, Z+6	; 0x06
     6d6:	e0 2d       	mov	r30, r0
     6d8:	c6 81       	ldd	r28, Z+6	; 0x06
     6da:	d7 81       	ldd	r29, Z+7	; 0x07

                if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     6dc:	8a 81       	ldd	r24, Y+2	; 0x02
     6de:	9b 81       	ldd	r25, Y+3	; 0x03
     6e0:	28 17       	cp	r18, r24
     6e2:	39 07       	cpc	r19, r25
     6e4:	08 f4       	brcc	.+2      	; 0x6e8 <vCoRoutineSchedule+0x158>
     6e6:	74 cf       	rjmp	.-280    	; 0x5d0 <vCoRoutineSchedule+0x40>
                {
                    /* Timeout not yet expired. */
                    break;
                }

                portDISABLE_INTERRUPTS();
     6e8:	f8 94       	cli
                    /* The event could have occurred just before this critical
                     *  section.  If this is the case then the generic list item will
                     *  have been moved to the pending ready list and the following
                     *  line is still valid.  Also the pvContainer parameter will have
                     *  been set to NULL so the following lines are also valid. */
                    ( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     6ea:	8e 01       	movw	r16, r28
     6ec:	0e 5f       	subi	r16, 0xFE	; 254
     6ee:	1f 4f       	sbci	r17, 0xFF	; 255
     6f0:	c8 01       	movw	r24, r16
     6f2:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>

                    /* Is the co-routine waiting on an event also? */
                    if( pxCRCB->xEventListItem.pxContainer )
     6f6:	8c 89       	ldd	r24, Y+20	; 0x14
     6f8:	9d 89       	ldd	r25, Y+21	; 0x15
     6fa:	89 2b       	or	r24, r25
     6fc:	21 f0       	breq	.+8      	; 0x706 <vCoRoutineSchedule+0x176>
                    {
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     6fe:	ce 01       	movw	r24, r28
     700:	0c 96       	adiw	r24, 0x0c	; 12
     702:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
                    }
                }
                portENABLE_INTERRUPTS();
     706:	78 94       	sei

                prvAddCoRoutineToReadyQueue( pxCRCB );
     708:	8e 89       	ldd	r24, Y+22	; 0x16
     70a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <uxTopCoRoutineReadyPriority>
     70e:	98 17       	cp	r25, r24
     710:	10 f4       	brcc	.+4      	; 0x716 <vCoRoutineSchedule+0x186>
     712:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxTopCoRoutineReadyPriority>
     716:	8f 9d       	mul	r24, r15
     718:	c0 01       	movw	r24, r0
     71a:	11 24       	eor	r1, r1
     71c:	b8 01       	movw	r22, r16
     71e:	8e 5b       	subi	r24, 0xBE	; 190
     720:	9e 4f       	sbci	r25, 0xFE	; 254
     722:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsertEnd>
     726:	c9 cf       	rjmp	.-110    	; 0x6ba <vCoRoutineSchedule+0x12a>
     728:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxTopCoRoutineReadyPriority>
                --uxTopCoRoutineReadyPriority;
            }

            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     72c:	49 e0       	ldi	r20, 0x09	; 9
     72e:	42 9f       	mul	r20, r18
     730:	c0 01       	movw	r24, r0
     732:	43 9f       	mul	r20, r19
     734:	90 0d       	add	r25, r0
     736:	11 24       	eor	r1, r1
     738:	fc 01       	movw	r30, r24
     73a:	ee 5b       	subi	r30, 0xBE	; 190
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	a1 81       	ldd	r26, Z+1	; 0x01
     740:	b2 81       	ldd	r27, Z+2	; 0x02
     742:	12 96       	adiw	r26, 0x02	; 2
     744:	4d 91       	ld	r20, X+
     746:	5c 91       	ld	r21, X
     748:	52 83       	std	Z+2, r21	; 0x02
     74a:	41 83       	std	Z+1, r20	; 0x01
     74c:	8b 5b       	subi	r24, 0xBB	; 187
     74e:	9e 4f       	sbci	r25, 0xFE	; 254
     750:	48 17       	cp	r20, r24
     752:	59 07       	cpc	r21, r25
     754:	21 f4       	brne	.+8      	; 0x75e <vCoRoutineSchedule+0x1ce>
     756:	85 81       	ldd	r24, Z+5	; 0x05
     758:	96 81       	ldd	r25, Z+6	; 0x06
     75a:	92 83       	std	Z+2, r25	; 0x02
     75c:	81 83       	std	Z+1, r24	; 0x01
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	82 9f       	mul	r24, r18
     762:	f0 01       	movw	r30, r0
     764:	83 9f       	mul	r24, r19
     766:	f0 0d       	add	r31, r0
     768:	11 24       	eor	r1, r1
     76a:	ee 5b       	subi	r30, 0xBE	; 190
     76c:	fe 4f       	sbci	r31, 0xFE	; 254
     76e:	01 80       	ldd	r0, Z+1	; 0x01
     770:	f2 81       	ldd	r31, Z+2	; 0x02
     772:	e0 2d       	mov	r30, r0
     774:	86 81       	ldd	r24, Z+6	; 0x06
     776:	97 81       	ldd	r25, Z+7	; 0x07
     778:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <pxCurrentCoRoutine+0x1>
     77c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <pxCurrentCoRoutine>

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     780:	dc 01       	movw	r26, r24
     782:	ed 91       	ld	r30, X+
     784:	fc 91       	ld	r31, X
     786:	11 97       	sbiw	r26, 0x01	; 1
     788:	57 96       	adiw	r26, 0x17	; 23
     78a:	6c 91       	ld	r22, X
        }

        traceRETURN_vCoRoutineSchedule();
    }
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     796:	09 94       	ijmp

00000798 <xCoRoutineRemoveFromEventList>:
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    }
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineRemoveFromEventList( const List_t * pxEventList )
    {
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
        traceENTER_xCoRoutineRemoveFromEventList( pxEventList );

        /* This function is called from within an interrupt.  It can only access
         * event lists and the pending ready list.  This function assumes that a
         * check has already been made to ensure pxEventList is not empty. */
        pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     7a0:	dc 01       	movw	r26, r24
     7a2:	15 96       	adiw	r26, 0x05	; 5
     7a4:	ed 91       	ld	r30, X+
     7a6:	fc 91       	ld	r31, X
     7a8:	c6 81       	ldd	r28, Z+6	; 0x06
     7aa:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     7ac:	8e 01       	movw	r16, r28
     7ae:	04 5f       	subi	r16, 0xF4	; 244
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	c8 01       	movw	r24, r16
     7b4:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
        vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     7b8:	b8 01       	movw	r22, r16
     7ba:	83 e2       	ldi	r24, 0x23	; 35
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsertEnd>

        if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     7c2:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <pxCurrentCoRoutine>
     7c6:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <pxCurrentCoRoutine+0x1>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	2e 89       	ldd	r18, Y+22	; 0x16
     7ce:	96 89       	ldd	r25, Z+22	; 0x16
     7d0:	29 17       	cp	r18, r25
     7d2:	08 f4       	brcc	.+2      	; 0x7d6 <xCoRoutineRemoveFromEventList+0x3e>
     7d4:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xCoRoutineRemoveFromEventList( xReturn );

        return xReturn;
    }
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <vCoRoutineResetState>:
 * scheduler.
 */
    void vCoRoutineResetState( void )
    {
        /* Lists for ready and blocked co-routines. */
        pxDelayedCoRoutineList = NULL;
     7e0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <pxDelayedCoRoutineList+0x1>
     7e4:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = NULL;
     7e8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <pxOverflowDelayedCoRoutineList+0x1>
     7ec:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <pxOverflowDelayedCoRoutineList>

        /* Other file private variables. */
        pxCurrentCoRoutine = NULL;
     7f0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <pxCurrentCoRoutine+0x1>
     7f4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <pxCurrentCoRoutine>
        uxTopCoRoutineReadyPriority = ( UBaseType_t ) 0U;
     7f8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <uxTopCoRoutineReadyPriority>
        xCoRoutineTickCount = ( TickType_t ) 0U;
     7fc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <xCoRoutineTickCount+0x1>
     800:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xCoRoutineTickCount>
        xLastTickCount = ( TickType_t ) 0U;
     804:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xLastTickCount+0x1>
     808:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <xLastTickCount>
        xPassedTicks = ( TickType_t ) 0U;
     80c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
     810:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
    }
     814:	08 95       	ret

00000816 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
     81a:	8b e0       	ldi	r24, 0x0B	; 11
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <pvPortMalloc>
     822:	ec 01       	movw	r28, r24

            if( pxEventBits != NULL )
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	31 f0       	breq	.+12     	; 0x834 <xEventGroupCreate+0x1e>
            {
                pxEventBits->uxEventBits = 0;
     828:	fc 01       	movw	r30, r24
     82a:	11 92       	st	Z+, r1
     82c:	11 92       	st	Z+, r1
     82e:	cf 01       	movw	r24, r30
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     830:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
        }
     834:	ce 01       	movw	r24, r28
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
     83c:	af 92       	push	r10
     83e:	bf 92       	push	r11
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	6c 01       	movw	r12, r24
     852:	7b 01       	movw	r14, r22
     854:	b4 2e       	mov	r11, r20
     856:	a2 2e       	mov	r10, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
     858:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     85c:	f6 01       	movw	r30, r12
     85e:	c0 81       	ld	r28, Z
     860:	d1 81       	ldd	r29, Z+1	; 0x01
     862:	ce 01       	movw	r24, r28
     864:	8e 21       	and	r24, r14
     866:	9f 21       	and	r25, r15
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
     868:	a1 10       	cpse	r10, r1
     86a:	40 c0       	rjmp	.+128    	; 0x8ec <__stack+0x8d>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     86c:	89 2b       	or	r24, r25
     86e:	09 f0       	breq	.+2      	; 0x872 <__stack+0x13>
     870:	41 c0       	rjmp	.+130    	; 0x8f4 <__stack+0x95>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
     872:	01 15       	cp	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	89 f0       	breq	.+34     	; 0x89a <__stack+0x3b>
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
        EventGroup_t * pxEventBits = xEventGroup;
        EventBits_t uxReturn, uxControlBits = 0;
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	60 e0       	ldi	r22, 0x00	; 0
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
     87c:	bb 20       	and	r11, r11
     87e:	11 f0       	breq	.+4      	; 0x884 <__stack+0x25>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	71 e0       	ldi	r23, 0x01	; 1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
     884:	a1 10       	cpse	r10, r1
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
     886:	74 60       	ori	r23, 0x04	; 4
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     888:	6e 29       	or	r22, r14
     88a:	7f 29       	or	r23, r15
     88c:	a8 01       	movw	r20, r16
     88e:	c6 01       	movw	r24, r12
     890:	02 96       	adiw	r24, 0x02	; 2
     892:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
     896:	d0 e0       	ldi	r29, 0x00	; 0
     898:	c0 e0       	ldi	r28, 0x00	; 0

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
     89a:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
     89e:	01 2b       	or	r16, r17
     8a0:	c9 f0       	breq	.+50     	; 0x8d4 <__stack+0x75>
        {
            if( xAlreadyYielded == pdFALSE )
     8a2:	81 11       	cpse	r24, r1
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
            {
                taskYIELD_WITHIN_API();
     8a6:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
     8aa:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     8ae:	91 fd       	sbrc	r25, 1
     8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <__stack+0x71>
            {
                taskENTER_CRITICAL();
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	0f 92       	push	r0
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
     8b8:	f6 01       	movw	r30, r12
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	97 01       	movw	r18, r14
     8c0:	28 23       	and	r18, r24
     8c2:	39 23       	and	r19, r25
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
     8c4:	a1 10       	cpse	r10, r1
     8c6:	23 c0       	rjmp	.+70     	; 0x90e <__stack+0xaf>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     8c8:	23 2b       	or	r18, r19
     8ca:	21 f5       	brne	.+72     	; 0x914 <__stack+0xb5>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
                }
                taskEXIT_CRITICAL();
     8cc:	0f 90       	pop	r0
     8ce:	0f be       	out	0x3f, r0	; 63
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     8d0:	ec 01       	movw	r28, r24
     8d2:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
    }
     8d4:	ce 01       	movw	r24, r28
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	08 95       	ret
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     8ec:	e8 16       	cp	r14, r24
     8ee:	f9 06       	cpc	r15, r25
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <__stack+0x95>
     8f2:	bf cf       	rjmp	.-130    	; 0x872 <__stack+0x13>
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
     8f4:	bb 20       	and	r11, r11
     8f6:	41 f0       	breq	.+16     	; 0x908 <__stack+0xa9>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     8f8:	c7 01       	movw	r24, r14
     8fa:	80 95       	com	r24
     8fc:	90 95       	com	r25
     8fe:	8c 23       	and	r24, r28
     900:	9d 23       	and	r25, r29
     902:	f6 01       	movw	r30, r12
     904:	91 83       	std	Z+1, r25	; 0x01
     906:	80 83       	st	Z, r24
            if( xWaitConditionMet != pdFALSE )
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	00 e0       	ldi	r16, 0x00	; 0
     90c:	c6 cf       	rjmp	.-116    	; 0x89a <__stack+0x3b>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     90e:	e2 16       	cp	r14, r18
     910:	f3 06       	cpc	r15, r19
     912:	e1 f6       	brne	.-72     	; 0x8cc <__stack+0x6d>

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
                    {
                        if( xClearOnExit != pdFALSE )
     914:	bb 20       	and	r11, r11
     916:	d1 f2       	breq	.-76     	; 0x8cc <__stack+0x6d>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     918:	e0 94       	com	r14
     91a:	f0 94       	com	r15
     91c:	e8 22       	and	r14, r24
     91e:	f9 22       	and	r15, r25
     920:	f6 01       	movw	r30, r12
     922:	f1 82       	std	Z+1, r15	; 0x01
     924:	e0 82       	st	Z, r14
     926:	d2 cf       	rjmp	.-92     	; 0x8cc <__stack+0x6d>

00000928 <xEventGroupClearBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
     928:	fc 01       	movw	r30, r24
        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        taskENTER_CRITICAL();
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	0f 92       	push	r0
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
     934:	60 95       	com	r22
     936:	70 95       	com	r23
     938:	68 23       	and	r22, r24
     93a:	79 23       	and	r23, r25
     93c:	71 83       	std	Z+1, r23	; 0x01
     93e:	60 83       	st	Z, r22
        }
        taskEXIT_CRITICAL();
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
    }
     944:	08 95       	ret

00000946 <xEventGroupGetBitsFromISR>:
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xEventGroupGetBitsFromISR( uxReturn );

        return uxReturn;
    }
     946:	fc 01       	movw	r30, r24
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	08 95       	ret

0000094e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
     94e:	cf 92       	push	r12
     950:	df 92       	push	r13
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	8b 01       	movw	r16, r22
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        pxList = &( pxEventBits->xTasksWaitingForBits );
        pxListEnd = listGET_END_MARKER( pxList );
     962:	7c 01       	movw	r14, r24
     964:	85 e0       	ldi	r24, 0x05	; 5
     966:	e8 0e       	add	r14, r24
     968:	f1 1c       	adc	r15, r1
        vTaskSuspendAll();
     96a:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
     96e:	ef 81       	ldd	r30, Y+7	; 0x07
     970:	f8 85       	ldd	r31, Y+8	; 0x08

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
     972:	68 81       	ld	r22, Y
     974:	79 81       	ldd	r23, Y+1	; 0x01
     976:	60 2b       	or	r22, r16
     978:	71 2b       	or	r23, r17
     97a:	79 83       	std	Y+1, r23	; 0x01
     97c:	68 83       	st	Y, r22
    {
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	00 e0       	ldi	r16, 0x00	; 0
     982:	68 81       	ld	r22, Y
     984:	79 81       	ldd	r23, Y+1	; 0x01

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
     986:	ee 15       	cp	r30, r14
     988:	ff 05       	cpc	r31, r15
     98a:	99 f4       	brne	.+38     	; 0x9b2 <xEventGroupSetBits+0x64>
                pxListItem = pxNext;
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
     98c:	00 95       	com	r16
     98e:	10 95       	com	r17
     990:	06 23       	and	r16, r22
     992:	17 23       	and	r17, r23
     994:	19 83       	std	Y+1, r17	; 0x01
     996:	08 83       	st	Y, r16
        }
        ( void ) xTaskResumeAll();
     998:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
    }
     99c:	88 81       	ld	r24, Y
     99e:	99 81       	ldd	r25, Y+1	; 0x01
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	08 95       	ret
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
            {
                pxNext = listGET_NEXT( pxListItem );
     9b2:	c2 80       	ldd	r12, Z+2	; 0x02
     9b4:	d3 80       	ldd	r13, Z+3	; 0x03
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     9b6:	20 81       	ld	r18, Z
     9b8:	31 81       	ldd	r19, Z+1	; 0x01
                xMatchFound = pdFALSE;

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     9ba:	c9 01       	movw	r24, r18
     9bc:	99 27       	eor	r25, r25
     9be:	ac 01       	movw	r20, r24
     9c0:	46 23       	and	r20, r22
     9c2:	57 23       	and	r21, r23

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     9c4:	32 fd       	sbrc	r19, 2
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <xEventGroupSetBits+0x82>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     9c8:	45 2b       	or	r20, r21
     9ca:	29 f4       	brne	.+10     	; 0x9d6 <xEventGroupSetBits+0x88>
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
     9cc:	f6 01       	movw	r30, r12
     9ce:	d9 cf       	rjmp	.-78     	; 0x982 <xEventGroupSetBits+0x34>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     9d0:	84 17       	cp	r24, r20
     9d2:	95 07       	cpc	r25, r21
     9d4:	d9 f7       	brne	.-10     	; 0x9cc <xEventGroupSetBits+0x7e>
                }

                if( xMatchFound != pdFALSE )
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     9d6:	30 ff       	sbrs	r19, 0
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <xEventGroupSetBits+0x90>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
     9da:	08 2b       	or	r16, r24
     9dc:	19 2b       	or	r17, r25
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     9de:	72 60       	ori	r23, 0x02	; 2
     9e0:	cf 01       	movw	r24, r30
     9e2:	0e 94 d7 16 	call	0x2dae	; 0x2dae <vTaskRemoveFromUnorderedEventList>
     9e6:	f2 cf       	rjmp	.-28     	; 0x9cc <xEventGroupSetBits+0x7e>

000009e8 <xEventGroupSync>:

    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait )
    {
     9e8:	af 92       	push	r10
     9ea:	bf 92       	push	r11
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	7c 01       	movw	r14, r24
     9fe:	eb 01       	movw	r28, r22
     a00:	8a 01       	movw	r16, r20
     a02:	69 01       	movw	r12, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
     a04:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        {
            uxOriginalBitValue = pxEventBits->uxEventBits;
     a08:	f7 01       	movw	r30, r14
     a0a:	a0 80       	ld	r10, Z
     a0c:	b1 80       	ldd	r11, Z+1	; 0x01

            ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     a0e:	be 01       	movw	r22, r28
     a10:	c7 01       	movw	r24, r14
     a12:	0e 94 a7 04 	call	0x94e	; 0x94e <xEventGroupSetBits>

            if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     a16:	ca 29       	or	r28, r10
     a18:	db 29       	or	r29, r11
     a1a:	ce 01       	movw	r24, r28
     a1c:	80 23       	and	r24, r16
     a1e:	91 23       	and	r25, r17
     a20:	80 17       	cp	r24, r16
     a22:	91 07       	cpc	r25, r17
     a24:	09 f0       	breq	.+2      	; 0xa28 <xEventGroupSync+0x40>
     a26:	3b c0       	rjmp	.+118    	; 0xa9e <xEventGroupSync+0xb6>
                /* All the rendezvous bits are now set - no need to block. */
                uxReturn = ( uxOriginalBitValue | uxBitsToSet );

                /* Rendezvous always clear the bits.  They will have been cleared
                 * already unless this is the only task in the rendezvous. */
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a28:	f7 01       	movw	r30, r14
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	98 01       	movw	r18, r16
     a30:	20 95       	com	r18
     a32:	30 95       	com	r19
     a34:	82 23       	and	r24, r18
     a36:	93 23       	and	r25, r19
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24

                xTicksToWait = 0;
     a3c:	d1 2c       	mov	r13, r1
     a3e:	c1 2c       	mov	r12, r1
                    uxReturn = pxEventBits->uxEventBits;
                    xTimeoutOccurred = pdTRUE;
                }
            }
        }
        xAlreadyYielded = xTaskResumeAll();
     a40:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
     a44:	cd 28       	or	r12, r13
     a46:	f9 f0       	breq	.+62     	; 0xa86 <xEventGroupSync+0x9e>
        {
            if( xAlreadyYielded == pdFALSE )
     a48:	81 11       	cpse	r24, r1
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <xEventGroupSync+0x68>
            {
                taskYIELD_WITHIN_API();
     a4c:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
     a50:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     a54:	91 fd       	sbrc	r25, 1
     a56:	15 c0       	rjmp	.+42     	; 0xa82 <xEventGroupSync+0x9a>
            {
                /* The task timed out, just return the current event bit value. */
                taskENTER_CRITICAL();
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	0f 92       	push	r0
                {
                    uxReturn = pxEventBits->uxEventBits;
     a5e:	f7 01       	movw	r30, r14
     a60:	80 81       	ld	r24, Z
     a62:	91 81       	ldd	r25, Z+1	; 0x01

                    /* Although the task got here because it timed out before the
                     * bits it was waiting for were set, it is possible that since it
                     * unblocked another task has set the bits.  If this is the case
                     * then it needs to clear the bits before exiting. */
                    if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     a64:	98 01       	movw	r18, r16
     a66:	28 23       	and	r18, r24
     a68:	39 23       	and	r19, r25
     a6a:	20 17       	cp	r18, r16
     a6c:	31 07       	cpc	r19, r17
     a6e:	39 f4       	brne	.+14     	; 0xa7e <xEventGroupSync+0x96>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a70:	a8 01       	movw	r20, r16
     a72:	40 95       	com	r20
     a74:	50 95       	com	r21
     a76:	48 23       	and	r20, r24
     a78:	59 23       	and	r21, r25
     a7a:	51 83       	std	Z+1, r21	; 0x01
     a7c:	40 83       	st	Z, r20
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
                /* The task unblocked because the bits were set. */
            }

            /* Control bits might be set as the task had blocked should not be
             * returned. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a82:	ec 01       	movw	r28, r24
     a84:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupSync( uxReturn );

        return uxReturn;
    }
     a86:	ce 01       	movw	r24, r28
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	bf 90       	pop	r11
     a9a:	af 90       	pop	r10
     a9c:	08 95       	ret

                xTicksToWait = 0;
            }
            else
            {
                if( xTicksToWait != ( TickType_t ) 0 )
     a9e:	c1 14       	cp	r12, r1
     aa0:	d1 04       	cpc	r13, r1
     aa2:	51 f0       	breq	.+20     	; 0xab8 <xEventGroupSync+0xd0>
                    traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

                    /* Store the bits that the calling task is waiting for in the
                     * task's event list item so the kernel knows when a match is
                     * found.  Then enter the blocked state. */
                    vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     aa4:	a6 01       	movw	r20, r12
     aa6:	b8 01       	movw	r22, r16
     aa8:	75 60       	ori	r23, 0x05	; 5
     aaa:	c7 01       	movw	r24, r14
     aac:	02 96       	adiw	r24, 0x02	; 2
     aae:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <vTaskPlaceOnUnorderedEventList>

                    /* This assignment is obsolete as uxReturn will get set after
                     * the task unblocks, but some compilers mistakenly generate a
                     * warning about uxReturn being returned without being set if the
                     * assignment is omitted. */
                    uxReturn = 0;
     ab2:	d0 e0       	ldi	r29, 0x00	; 0
     ab4:	c0 e0       	ldi	r28, 0x00	; 0
     ab6:	c4 cf       	rjmp	.-120    	; 0xa40 <xEventGroupSync+0x58>
                }
                else
                {
                    /* The rendezvous bits were not set, but no block time was
                     * specified - just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
     ab8:	f7 01       	movw	r30, r14
     aba:	c0 81       	ld	r28, Z
     abc:	d1 81       	ldd	r29, Z+1	; 0x01
     abe:	c0 cf       	rjmp	.-128    	; 0xa40 <xEventGroupSync+0x58>

00000ac0 <vEventGroupDelete>:
        return pxEventBits->uxEventBits;
    }
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	ec 01       	movw	r28, r24

        configASSERT( pxEventBits );

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

        vTaskSuspendAll();
     ac6:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	81 11       	cpse	r24, r1
     ace:	07 c0       	rjmp	.+14     	; 0xade <vEventGroupDelete+0x1e>
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
            }
        }
        ( void ) xTaskResumeAll();
     ad0:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
     ad4:	ce 01       	movw	r24, r28
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
     ada:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <vPortFree>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	72 e0       	ldi	r23, 0x02	; 2
     ae2:	8f 81       	ldd	r24, Y+7	; 0x07
     ae4:	98 85       	ldd	r25, Y+8	; 0x08
     ae6:	0e 94 d7 16 	call	0x2dae	; 0x2dae <vTaskRemoveFromUnorderedEventList>
     aea:	ef cf       	rjmp	.-34     	; 0xaca <vEventGroupDelete+0xa>

00000aec <vEventGroupSetBitsCallback>:
        traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     aec:	ba 01       	movw	r22, r20
     aee:	0c 94 a7 04 	jmp	0x94e	; 0x94e <xEventGroupSetBits>

00000af2 <vEventGroupClearBitsCallback>:
        traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     af2:	ba 01       	movw	r22, r20
     af4:	0c 94 94 04 	jmp	0x928	; 0x928 <xEventGroupClearBits>

00000af8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	8c 01       	movw	r16, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
     b02:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     b06:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <pucAlignedHeap.1975>
     b0a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <pucAlignedHeap.1975+0x1>
     b0e:	89 2b       	or	r24, r25
     b10:	31 f4       	brne	.+12     	; 0xb1e <pvPortMalloc+0x26>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     b12:	88 e5       	ldi	r24, 0x58	; 88
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <pucAlignedHeap.1975+0x1>
     b1a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <pucAlignedHeap.1975>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     b1e:	01 15       	cp	r16, r1
     b20:	11 05       	cpc	r17, r1
     b22:	f9 f0       	breq	.+62     	; 0xb62 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     b24:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <xNextFreeByte>
     b28:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <xNextFreeByte+0x1>
     b2c:	02 0f       	add	r16, r18
     b2e:	13 1f       	adc	r17, r19
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     b30:	0b 3d       	cpi	r16, 0xDB	; 219
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	18 07       	cpc	r17, r24
     b36:	a8 f4       	brcc	.+42     	; 0xb62 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     b38:	20 17       	cp	r18, r16
     b3a:	31 07       	cpc	r19, r17
     b3c:	90 f4       	brcc	.+36     	; 0xb62 <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     b3e:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <pucAlignedHeap.1975>
     b42:	d0 91 55 01 	lds	r29, 0x0155	; 0x800155 <pucAlignedHeap.1975+0x1>
     b46:	c2 0f       	add	r28, r18
     b48:	d3 1f       	adc	r29, r19
            xNextFreeByte += xWantedSize;
     b4a:	10 93 57 01 	sts	0x0157, r17	; 0x800157 <xNextFreeByte+0x1>
     b4e:	00 93 56 01 	sts	0x0156, r16	; 0x800156 <xNextFreeByte>
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b52:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     b56:	ce 01       	movw	r24, r28
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	08 95       	ret

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     b62:	d0 e0       	ldi	r29, 0x00	; 0
     b64:	c0 e0       	ldi	r28, 0x00	; 0
     b66:	f5 cf       	rjmp	.-22     	; 0xb52 <pvPortMalloc+0x5a>

00000b68 <vPortFree>:
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
     b68:	08 95       	ret

00000b6a <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* Only required when static memory is not cleared. */
    xNextFreeByte = ( size_t ) 0;
     b6a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <xNextFreeByte+0x1>
     b6e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <xNextFreeByte>
}
     b72:	08 95       	ret

00000b74 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
     b74:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <xNextFreeByte>
     b78:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <xNextFreeByte+0x1>
}
     b7c:	8b ed       	ldi	r24, 0xDB	; 219
     b7e:	95 e0       	ldi	r25, 0x05	; 5
     b80:	82 1b       	sub	r24, r18
     b82:	93 0b       	sbc	r25, r19
     b84:	08 95       	ret

00000b86 <vPortHeapResetState>:
     b86:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <xNextFreeByte+0x1>
     b8a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <xNextFreeByte>
     b8e:	08 95       	ret

00000b90 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b90:	fc 01       	movw	r30, r24
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
     b92:	03 96       	adiw	r24, 0x03	; 3
     b94:	92 83       	std	Z+2, r25	; 0x02
     b96:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     b98:	2f ef       	ldi	r18, 0xFF	; 255
     b9a:	3f ef       	ldi	r19, 0xFF	; 255
     b9c:	34 83       	std	Z+4, r19	; 0x04
     b9e:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
     ba0:	96 83       	std	Z+6, r25	; 0x06
     ba2:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
     ba4:	90 87       	std	Z+8, r25	; 0x08
     ba6:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     ba8:	10 82       	st	Z, r1
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
     baa:	08 95       	ret

00000bac <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     bac:	fc 01       	movw	r30, r24
     bae:	11 86       	std	Z+9, r1	; 0x09
     bb0:	10 86       	std	Z+8, r1	; 0x08
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
     bb2:	08 95       	ret

00000bb4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	9c 01       	movw	r18, r24
     bba:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     bbc:	dc 01       	movw	r26, r24
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	cd 91       	ld	r28, X+
     bc2:	dc 91       	ld	r29, X
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     bc4:	d3 83       	std	Z+3, r29	; 0x03
     bc6:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	9d 81       	ldd	r25, Y+5	; 0x05
     bcc:	95 83       	std	Z+5, r25	; 0x05
     bce:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     bd0:	8c 81       	ldd	r24, Y+4	; 0x04
     bd2:	9d 81       	ldd	r25, Y+5	; 0x05
     bd4:	dc 01       	movw	r26, r24
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	7c 93       	st	X, r23
     bda:	6e 93       	st	-X, r22
     bdc:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     bde:	7d 83       	std	Y+5, r23	; 0x05
     be0:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     be2:	31 87       	std	Z+9, r19	; 0x09
     be4:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
     be6:	f9 01       	movw	r30, r18
     be8:	80 81       	ld	r24, Z
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 83       	st	Z, r24

    traceRETURN_vListInsertEnd();
}
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	8c 01       	movw	r16, r24
     bfe:	fb 01       	movw	r30, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c00:	80 81       	ld	r24, Z
     c02:	91 81       	ldd	r25, Z+1	; 0x01
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     c04:	d8 01       	movw	r26, r16
     c06:	13 96       	adiw	r26, 0x03	; 3
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c08:	8f 3f       	cpi	r24, 0xFF	; 255
     c0a:	98 07       	cpc	r25, r24
     c0c:	f1 f4       	brne	.+60     	; 0xc4a <vListInsert+0x56>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c0e:	e8 01       	movw	r28, r16
     c10:	af 81       	ldd	r26, Y+7	; 0x07
     c12:	b8 85       	ldd	r27, Y+8	; 0x08
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c14:	12 96       	adiw	r26, 0x02	; 2
     c16:	8d 91       	ld	r24, X+
     c18:	9c 91       	ld	r25, X
     c1a:	13 97       	sbiw	r26, 0x03	; 3
     c1c:	93 83       	std	Z+3, r25	; 0x03
     c1e:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c20:	ec 01       	movw	r28, r24
     c22:	fd 83       	std	Y+5, r31	; 0x05
     c24:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     c26:	b5 83       	std	Z+5, r27	; 0x05
     c28:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     c2a:	13 96       	adiw	r26, 0x03	; 3
     c2c:	fc 93       	st	X, r31
     c2e:	ee 93       	st	-X, r30
     c30:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c32:	11 87       	std	Z+9, r17	; 0x09
     c34:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
     c36:	f8 01       	movw	r30, r16
     c38:	80 81       	ld	r24, Z
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	80 83       	st	Z, r24

    traceRETURN_vListInsert();
}
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	08 95       	ret
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     c48:	d9 01       	movw	r26, r18
     c4a:	12 96       	adiw	r26, 0x02	; 2
     c4c:	2d 91       	ld	r18, X+
     c4e:	3c 91       	ld	r19, X
     c50:	13 97       	sbiw	r26, 0x03	; 3
     c52:	e9 01       	movw	r28, r18
     c54:	48 81       	ld	r20, Y
     c56:	59 81       	ldd	r21, Y+1	; 0x01
     c58:	84 17       	cp	r24, r20
     c5a:	95 07       	cpc	r25, r21
     c5c:	a8 f7       	brcc	.-22     	; 0xc48 <vListInsert+0x54>
     c5e:	da cf       	rjmp	.-76     	; 0xc14 <vListInsert+0x20>

00000c60 <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	fc 01       	movw	r30, r24
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c66:	a0 85       	ldd	r26, Z+8	; 0x08
     c68:	b1 85       	ldd	r27, Z+9	; 0x09

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c6a:	82 81       	ldd	r24, Z+2	; 0x02
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	24 81       	ldd	r18, Z+4	; 0x04
     c70:	35 81       	ldd	r19, Z+5	; 0x05
     c72:	ec 01       	movw	r28, r24
     c74:	3d 83       	std	Y+5, r19	; 0x05
     c76:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c78:	c4 81       	ldd	r28, Z+4	; 0x04
     c7a:	d5 81       	ldd	r29, Z+5	; 0x05
     c7c:	9b 83       	std	Y+3, r25	; 0x03
     c7e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c80:	11 96       	adiw	r26, 0x01	; 1
     c82:	8d 91       	ld	r24, X+
     c84:	9c 91       	ld	r25, X
     c86:	12 97       	sbiw	r26, 0x02	; 2
     c88:	8e 17       	cp	r24, r30
     c8a:	9f 07       	cpc	r25, r31
     c8c:	21 f4       	brne	.+8      	; 0xc96 <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c8e:	12 96       	adiw	r26, 0x02	; 2
     c90:	dc 93       	st	X, r29
     c92:	ce 93       	st	-X, r28
     c94:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c96:	11 86       	std	Z+9, r1	; 0x09
     c98:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
     c9a:	8c 91       	ld	r24, X
     c9c:	81 50       	subi	r24, 0x01	; 1
     c9e:	8c 93       	st	X, r24

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <pxPortInitialiseStack>:
    uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
     * This is just useful for debugging. */

    *pxTopOfStack = 0x11;
     ca6:	31 e1       	ldi	r19, 0x11	; 17
     ca8:	fc 01       	movw	r30, r24
     caa:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	22 e2       	ldi	r18, 0x22	; 34
     cb0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	a3 e3       	ldi	r26, 0x33	; 51
     cb6:	a0 83       	st	Z, r26
    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
     * it on first. */
    usAddress = ( uint16_t ) pxCode;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	60 83       	st	Z, r22
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	70 83       	st	Z, r23

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
     *  portSAVE_CONTEXT places the flags on the stack immediately after r0
     *  to ensure the interrupts get disabled as soon as possible, and so ensuring
     *  the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R0 */
     cc0:	31 97       	sbiw	r30, 0x01	; 1
     cc2:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
     cc4:	31 97       	sbiw	r30, 0x01	; 1
     cc6:	60 e8       	ldi	r22, 0x80	; 128
     cc8:	60 83       	st	Z, r22
    pxTopOfStack--;


    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R1 */
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02; /* R2 */
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	62 e0       	ldi	r22, 0x02	; 2
     cd2:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03; /* R3 */
     cd4:	31 97       	sbiw	r30, 0x01	; 1
     cd6:	63 e0       	ldi	r22, 0x03	; 3
     cd8:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04; /* R4 */
     cda:	31 97       	sbiw	r30, 0x01	; 1
     cdc:	64 e0       	ldi	r22, 0x04	; 4
     cde:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05; /* R5 */
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	65 e0       	ldi	r22, 0x05	; 5
     ce4:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06; /* R6 */
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	66 e0       	ldi	r22, 0x06	; 6
     cea:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07; /* R7 */
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	67 e0       	ldi	r22, 0x07	; 7
     cf0:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08; /* R8 */
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	68 e0       	ldi	r22, 0x08	; 8
     cf6:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09; /* R9 */
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	69 e0       	ldi	r22, 0x09	; 9
     cfc:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10; /* R10 */
     cfe:	31 97       	sbiw	r30, 0x01	; 1
     d00:	60 e1       	ldi	r22, 0x10	; 16
     d02:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11; /* R11 */
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12; /* R12 */
     d08:	31 97       	sbiw	r30, 0x01	; 1
     d0a:	32 e1       	ldi	r19, 0x12	; 18
     d0c:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13; /* R13 */
     d0e:	31 97       	sbiw	r30, 0x01	; 1
     d10:	33 e1       	ldi	r19, 0x13	; 19
     d12:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14; /* R14 */
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	34 e1       	ldi	r19, 0x14	; 20
     d18:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15; /* R15 */
     d1a:	31 97       	sbiw	r30, 0x01	; 1
     d1c:	35 e1       	ldi	r19, 0x15	; 21
     d1e:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16; /* R16 */
     d20:	31 97       	sbiw	r30, 0x01	; 1
     d22:	36 e1       	ldi	r19, 0x16	; 22
     d24:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17; /* R17 */
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	37 e1       	ldi	r19, 0x17	; 23
     d2a:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18; /* R18 */
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	38 e1       	ldi	r19, 0x18	; 24
     d30:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19; /* R19 */
     d32:	31 97       	sbiw	r30, 0x01	; 1
     d34:	39 e1       	ldi	r19, 0x19	; 25
     d36:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20; /* R20 */
     d38:	31 97       	sbiw	r30, 0x01	; 1
     d3a:	30 e2       	ldi	r19, 0x20	; 32
     d3c:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21; /* R21 */
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	31 e2       	ldi	r19, 0x21	; 33
     d42:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22; /* R22 */
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23; /* R23 */
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	23 e2       	ldi	r18, 0x23	; 35
     d4c:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;  /* R26 X */
     d56:	31 97       	sbiw	r30, 0x01	; 1
     d58:	26 e2       	ldi	r18, 0x26	; 38
     d5a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;  /* R27 */
     d5c:	31 97       	sbiw	r30, 0x01	; 1
     d5e:	27 e2       	ldi	r18, 0x27	; 39
     d60:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;  /* R28 Y */
     d62:	31 97       	sbiw	r30, 0x01	; 1
     d64:	28 e2       	ldi	r18, 0x28	; 40
     d66:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;  /* R29 */
     d68:	31 97       	sbiw	r30, 0x01	; 1
     d6a:	29 e2       	ldi	r18, 0x29	; 41
     d6c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;  /* R30 Z */
     d6e:	31 97       	sbiw	r30, 0x01	; 1
     d70:	20 e3       	ldi	r18, 0x30	; 48
     d72:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x031; /* R31 */
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	21 e3       	ldi	r18, 0x31	; 49
     d78:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
     d7a:	86 97       	sbiw	r24, 0x26	; 38
     d7c:	08 95       	ret

00000d7e <xPortStartScheduler>:
    /* Setup compare match value for compare match A.  Interrupts are disabled
     * before this is called so we need not worry here. */
    ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    ulCompareMatch >>= 8;
    ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    OCR1AH = ucHighByte;
     d7e:	1b bc       	out	0x2b, r1	; 43
    OCR1AL = ucLowByte;
     d80:	8c e7       	ldi	r24, 0x7C	; 124
     d82:	8a bd       	out	0x2a, r24	; 42

    /* Setup clock source and compare match behaviour. */
    ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    TCCR1B = ucLowByte;
     d84:	8b e0       	ldi	r24, 0x0B	; 11
     d86:	8e bd       	out	0x2e, r24	; 46

    /* Enable the interrupt - this is okay as interrupt are currently globally
     * disabled. */
    ucLowByte = TIMSK;
     d88:	89 b7       	in	r24, 0x39	; 57
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     d8a:	80 61       	ori	r24, 0x10	; 16
    TIMSK = ucLowByte;
     d8c:	89 bf       	out	0x39, r24	; 57
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
     d8e:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
     d92:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
     d96:	cd 91       	ld	r28, X+
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	dd 91       	ld	r29, X+
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	ff 91       	pop	r31
     da0:	ef 91       	pop	r30
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	bf 91       	pop	r27
     da8:	af 91       	pop	r26
     daa:	9f 91       	pop	r25
     dac:	8f 91       	pop	r24
     dae:	7f 91       	pop	r23
     db0:	6f 91       	pop	r22
     db2:	5f 91       	pop	r21
     db4:	4f 91       	pop	r20
     db6:	3f 91       	pop	r19
     db8:	2f 91       	pop	r18
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	bf 90       	pop	r11
     dc8:	af 90       	pop	r10
     dca:	9f 90       	pop	r9
     dcc:	8f 90       	pop	r8
     dce:	7f 90       	pop	r7
     dd0:	6f 90       	pop	r6
     dd2:	5f 90       	pop	r5
     dd4:	4f 90       	pop	r4
     dd6:	3f 90       	pop	r3
     dd8:	2f 90       	pop	r2
     dda:	1f 90       	pop	r1
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
     * jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
     de2:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	08 95       	ret

00000de8 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
     * disable the tick interrupt here. */
}
     de8:	08 95       	ret

00000dea <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	0f 92       	push	r0
     df2:	1f 92       	push	r1
     df4:	11 24       	eor	r1, r1
     df6:	2f 92       	push	r2
     df8:	3f 92       	push	r3
     dfa:	4f 92       	push	r4
     dfc:	5f 92       	push	r5
     dfe:	6f 92       	push	r6
     e00:	7f 92       	push	r7
     e02:	8f 92       	push	r8
     e04:	9f 92       	push	r9
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	2f 93       	push	r18
     e18:	3f 93       	push	r19
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ef 93       	push	r30
     e30:	ff 93       	push	r31
     e32:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
     e36:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
     e3a:	0d b6       	in	r0, 0x3d	; 61
     e3c:	0d 92       	st	X+, r0
     e3e:	0e b6       	in	r0, 0x3e	; 62
     e40:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     e42:	0e 94 98 15 	call	0x2b30	; 0x2b30 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     e46:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
     e4a:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
     e4e:	cd 91       	ld	r28, X+
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	dd 91       	ld	r29, X+
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	ff 91       	pop	r31
     e58:	ef 91       	pop	r30
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	bf 91       	pop	r27
     e60:	af 91       	pop	r26
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	7f 91       	pop	r23
     e68:	6f 91       	pop	r22
     e6a:	5f 91       	pop	r21
     e6c:	4f 91       	pop	r20
     e6e:	3f 91       	pop	r19
     e70:	2f 91       	pop	r18
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	7f 90       	pop	r7
     e88:	6f 90       	pop	r6
     e8a:	5f 90       	pop	r5
     e8c:	4f 90       	pop	r4
     e8e:	3f 90       	pop	r3
     e90:	2f 90       	pop	r2
     e92:	1f 90       	pop	r1
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0

    asm volatile ( "ret" );
     e9a:	08 95       	ret

00000e9c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__( ( naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	0f 92       	push	r0
     ea4:	1f 92       	push	r1
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 92       	push	r2
     eaa:	3f 92       	push	r3
     eac:	4f 92       	push	r4
     eae:	5f 92       	push	r5
     eb0:	6f 92       	push	r6
     eb2:	7f 92       	push	r7
     eb4:	8f 92       	push	r8
     eb6:	9f 92       	push	r9
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	5f 93       	push	r21
     ed0:	6f 93       	push	r22
     ed2:	7f 93       	push	r23
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	af 93       	push	r26
     eda:	bf 93       	push	r27
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ef 93       	push	r30
     ee2:	ff 93       	push	r31
     ee4:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
     ee8:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
     eec:	0d b6       	in	r0, 0x3d	; 61
     eee:	0d 92       	st	X+, r0
     ef0:	0e b6       	in	r0, 0x3e	; 62
     ef2:	0d 92       	st	X+, r0

    if( xTaskIncrementTick() != pdFALSE )
     ef4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <xTaskIncrementTick>
     ef8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     efa:	0e 94 98 15 	call	0x2b30	; 0x2b30 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     efe:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
     f02:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
     f06:	cd 91       	ld	r28, X+
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	dd 91       	ld	r29, X+
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	ff 91       	pop	r31
     f10:	ef 91       	pop	r30
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	bf 91       	pop	r27
     f18:	af 91       	pop	r26
     f1a:	9f 91       	pop	r25
     f1c:	8f 91       	pop	r24
     f1e:	7f 91       	pop	r23
     f20:	6f 91       	pop	r22
     f22:	5f 91       	pop	r21
     f24:	4f 91       	pop	r20
     f26:	3f 91       	pop	r19
     f28:	2f 91       	pop	r18
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	9f 90       	pop	r9
     f3c:	8f 90       	pop	r8
     f3e:	7f 90       	pop	r7
     f40:	6f 90       	pop	r6
     f42:	5f 90       	pop	r5
     f44:	4f 90       	pop	r4
     f46:	3f 90       	pop	r3
     f48:	2f 90       	pop	r2
     f4a:	1f 90       	pop	r1
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0

    asm volatile ( "ret" );
     f52:	08 95       	ret

00000f54 <__vector_7>:
 * count is incremented after the context is saved.
 */
    void TIMER1_COMPA_vect( void ) __attribute__( ( signal, naked ) );
    void TIMER1_COMPA_vect( void )
    {
        vPortYieldFromTick();
     f54:	0e 94 4e 07 	call	0xe9c	; 0xe9c <vPortYieldFromTick>
        asm volatile ( "reti" );
     f58:	18 95       	reti

00000f5a <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
     f60:	fc 01       	movw	r30, r24
     f62:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	91 11       	cpse	r25, r1
     f6c:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    taskEXIT_CRITICAL();

    return xReturn;
}
     f6e:	08 95       	ret

00000f70 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	ec 01       	movw	r28, r24
     f7a:	04 2f       	mov	r16, r20
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     f7c:	1a 8d       	ldd	r17, Y+26	; 0x1a

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     f7e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     f80:	44 23       	and	r20, r20
     f82:	c1 f0       	breq	.+48     	; 0xfb4 <prvCopyDataToQueue+0x44>
     f84:	50 e0       	ldi	r21, 0x00	; 0
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
     f86:	01 11       	cpse	r16, r1
     f88:	1d c0       	rjmp	.+58     	; 0xfc4 <prvCopyDataToQueue+0x54>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
     f92:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f94:	2a 81       	ldd	r18, Y+2	; 0x02
     f96:	3b 81       	ldd	r19, Y+3	; 0x03
     f98:	82 0f       	add	r24, r18
     f9a:	93 2f       	mov	r25, r19
     f9c:	91 1d       	adc	r25, r1
     f9e:	9b 83       	std	Y+3, r25	; 0x03
     fa0:	8a 83       	std	Y+2, r24	; 0x02

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
     fa2:	2c 81       	ldd	r18, Y+4	; 0x04
     fa4:	3d 81       	ldd	r19, Y+5	; 0x05
     fa6:	82 17       	cp	r24, r18
     fa8:	93 07       	cpc	r25, r19
     faa:	20 f0       	brcs	.+8      	; 0xfb4 <prvCopyDataToQueue+0x44>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
     fac:	88 81       	ld	r24, Y
     fae:	99 81       	ldd	r25, Y+1	; 0x01
     fb0:	9b 83       	std	Y+3, r25	; 0x03
     fb2:	8a 83       	std	Y+2, r24	; 0x02
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
     fb4:	1f 5f       	subi	r17, 0xFF	; 255
     fb6:	1a 8f       	std	Y+26, r17	; 0x1a

    return xReturn;
}
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     fc4:	8e 81       	ldd	r24, Y+6	; 0x06
     fc6:	9f 81       	ldd	r25, Y+7	; 0x07
     fc8:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
     fcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	91 95       	neg	r25
     fd2:	81 95       	neg	r24
     fd4:	91 09       	sbc	r25, r1
     fd6:	2e 81       	ldd	r18, Y+6	; 0x06
     fd8:	3f 81       	ldd	r19, Y+7	; 0x07
     fda:	28 0f       	add	r18, r24
     fdc:	39 1f       	adc	r19, r25
     fde:	3f 83       	std	Y+7, r19	; 0x07
     fe0:	2e 83       	std	Y+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
     fe2:	48 81       	ld	r20, Y
     fe4:	59 81       	ldd	r21, Y+1	; 0x01
     fe6:	24 17       	cp	r18, r20
     fe8:	35 07       	cpc	r19, r21
     fea:	30 f4       	brcc	.+12     	; 0xff8 <prvCopyDataToQueue+0x88>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
     fec:	2c 81       	ldd	r18, Y+4	; 0x04
     fee:	3d 81       	ldd	r19, Y+5	; 0x05
     ff0:	82 0f       	add	r24, r18
     ff2:	93 1f       	adc	r25, r19
     ff4:	9f 83       	std	Y+7, r25	; 0x07
     ff6:	8e 83       	std	Y+6, r24	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
     ff8:	02 30       	cpi	r16, 0x02	; 2
     ffa:	e1 f6       	brne	.-72     	; 0xfb4 <prvCopyDataToQueue+0x44>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     ffc:	11 23       	and	r17, r17
     ffe:	d1 f2       	breq	.-76     	; 0xfb4 <prvCopyDataToQueue+0x44>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
    1000:	11 50       	subi	r17, 0x01	; 1
    1002:	d8 cf       	rjmp	.-80     	; 0xfb4 <prvCopyDataToQueue+0x44>

00001004 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    1004:	fc 01       	movw	r30, r24
    1006:	cb 01       	movw	r24, r22
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1008:	44 8d       	ldd	r20, Z+28	; 0x1c
    100a:	44 23       	and	r20, r20
    100c:	a1 f0       	breq	.+40     	; 0x1036 <prvCopyDataFromQueue+0x32>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	26 81       	ldd	r18, Z+6	; 0x06
    1012:	37 81       	ldd	r19, Z+7	; 0x07
    1014:	24 0f       	add	r18, r20
    1016:	35 1f       	adc	r19, r21
    1018:	37 83       	std	Z+7, r19	; 0x07
    101a:	26 83       	std	Z+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    101c:	64 81       	ldd	r22, Z+4	; 0x04
    101e:	75 81       	ldd	r23, Z+5	; 0x05
    1020:	26 17       	cp	r18, r22
    1022:	37 07       	cpc	r19, r23
    1024:	20 f0       	brcs	.+8      	; 0x102e <prvCopyDataFromQueue+0x2a>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    1026:	20 81       	ld	r18, Z
    1028:	31 81       	ldd	r19, Z+1	; 0x01
    102a:	37 83       	std	Z+7, r19	; 0x07
    102c:	26 83       	std	Z+6, r18	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
    102e:	66 81       	ldd	r22, Z+6	; 0x06
    1030:	77 81       	ldd	r23, Z+7	; 0x07
    1032:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <memcpy>
    }
}
    1036:	08 95       	ret

00001038 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ec 01       	movw	r28, r24

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	0f 92       	push	r0
    {
        int8_t cTxLock = pxQueue->cTxLock;
    104a:	1e 8d       	ldd	r17, Y+30	; 0x1e
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    104c:	7c 01       	movw	r14, r24
    104e:	81 e1       	ldi	r24, 0x11	; 17
    1050:	e8 0e       	add	r14, r24
    1052:	f1 1c       	adc	r15, r1
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
    1054:	11 16       	cp	r1, r17
    1056:	c4 f0       	brlt	.+48     	; 0x1088 <prvUnlockQueue+0x50>
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
        }

        pxQueue->cTxLock = queueUNLOCKED;
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	8e 8f       	std	Y+30, r24	; 0x1e
    }
    taskEXIT_CRITICAL();
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	0f 92       	push	r0
    {
        int8_t cRxLock = pxQueue->cRxLock;
    1066:	1d 8d       	ldd	r17, Y+29	; 0x1d

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1068:	7e 01       	movw	r14, r28
    106a:	88 e0       	ldi	r24, 0x08	; 8
    106c:	e8 0e       	add	r14, r24
    106e:	f1 1c       	adc	r15, r1
    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
    1070:	11 16       	cp	r1, r17
    1072:	ac f0       	brlt	.+42     	; 0x109e <prvUnlockQueue+0x66>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	8d 8f       	std	Y+29, r24	; 0x1d
    }
    taskEXIT_CRITICAL();
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	08 95       	ret
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1088:	89 89       	ldd	r24, Y+17	; 0x11
    108a:	88 23       	and	r24, r24
    108c:	29 f3       	breq	.-54     	; 0x1058 <prvUnlockQueue+0x20>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    108e:	c7 01       	movw	r24, r14
    1090:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    1094:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
    1096:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <vTaskMissedYield>
    109a:	11 50       	subi	r17, 0x01	; 1
    109c:	db cf       	rjmp	.-74     	; 0x1054 <prvUnlockQueue+0x1c>
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    109e:	88 85       	ldd	r24, Y+8	; 0x08
    10a0:	88 23       	and	r24, r24
    10a2:	41 f3       	breq	.-48     	; 0x1074 <prvUnlockQueue+0x3c>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    10a4:	c7 01       	movw	r24, r14
    10a6:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    10aa:	81 11       	cpse	r24, r1
                {
                    vTaskMissedYield();
    10ac:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <vTaskMissedYield>
    10b0:	11 50       	subi	r17, 0x01	; 1
    10b2:	de cf       	rjmp	.-68     	; 0x1070 <prvUnlockQueue+0x38>

000010b4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	09 f4       	brne	.+2      	; 0x10be <xQueueGenericReset+0xa>
    10bc:	3f c0       	rjmp	.+126    	; 0x113c <xQueueGenericReset+0x88>
        ( pxQueue->uxLength >= 1U ) &&
    10be:	fc 01       	movw	r30, r24
    10c0:	23 8d       	ldd	r18, Z+27	; 0x1b

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    10c2:	22 23       	and	r18, r18
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <xQueueGenericReset+0x14>
    10c6:	3a c0       	rjmp	.+116    	; 0x113c <xQueueGenericReset+0x88>
    10c8:	ec 01       	movw	r28, r24
        ( pxQueue->uxLength >= 1U ) &&
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    10ca:	44 8d       	ldd	r20, Z+28	; 0x1c
    {
        taskENTER_CRITICAL();
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	0f 92       	push	r0
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	fc 01       	movw	r30, r24
    10d8:	24 9f       	mul	r18, r20
    10da:	e0 0d       	add	r30, r0
    10dc:	f1 1d       	adc	r31, r1
    10de:	11 24       	eor	r1, r1
    10e0:	fd 83       	std	Y+5, r31	; 0x05
    10e2:	ec 83       	std	Y+4, r30	; 0x04
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    10e4:	1a 8e       	std	Y+26, r1	; 0x1a
            pxQueue->pcWriteTo = pxQueue->pcHead;
    10e6:	9b 83       	std	Y+3, r25	; 0x03
    10e8:	8a 83       	std	Y+2, r24	; 0x02
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
    10ea:	21 50       	subi	r18, 0x01	; 1
    10ec:	33 0b       	sbc	r19, r19
    10ee:	42 9f       	mul	r20, r18
    10f0:	f0 01       	movw	r30, r0
    10f2:	43 9f       	mul	r20, r19
    10f4:	f0 0d       	add	r31, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	8e 0f       	add	r24, r30
    10fa:	9f 1f       	adc	r25, r31
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
            pxQueue->cRxLock = queueUNLOCKED;
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	8d 8f       	std	Y+29, r24	; 0x1d
            pxQueue->cTxLock = queueUNLOCKED;
    1104:	8e 8f       	std	Y+30, r24	; 0x1e

            if( xNewQueue == pdFALSE )
    1106:	61 11       	cpse	r22, r1
    1108:	10 c0       	rjmp	.+32     	; 0x112a <xQueueGenericReset+0x76>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    110a:	88 85       	ldd	r24, Y+8	; 0x08
    110c:	88 23       	and	r24, r24
    110e:	39 f0       	breq	.+14     	; 0x111e <xQueueGenericReset+0x6a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1110:	ce 01       	movw	r24, r28
    1112:	08 96       	adiw	r24, 0x08	; 8
    1114:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    1118:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    111a:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
            }
        }
        taskEXIT_CRITICAL();
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    BaseType_t xReturn = pdPASS;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    112a:	ce 01       	movw	r24, r28
    112c:	08 96       	adiw	r24, 0x08	; 8
    112e:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1132:	ce 01       	movw	r24, r28
    1134:	41 96       	adiw	r24, 0x11	; 17
    1136:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
    113a:	f1 cf       	rjmp	.-30     	; 0x111e <xQueueGenericReset+0x6a>
        }
        taskEXIT_CRITICAL();
    }
    else
    {
        xReturn = pdFAIL;
    113c:	80 e0       	ldi	r24, 0x00	; 0

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
    113e:	f2 cf       	rjmp	.-28     	; 0x1124 <xQueueGenericReset+0x70>

00001140 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    1148:	81 11       	cpse	r24, r1
    114a:	08 c0       	rjmp	.+16     	; 0x115c <xQueueGenericCreate+0x1c>

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
        Queue_t * pxNewQueue = NULL;
    114c:	d0 e0       	ldi	r29, 0x00	; 0
    114e:	c0 e0       	ldi	r28, 0x00	; 0
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    }
    1150:	ce 01       	movw	r24, r28
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	08 95       	ret

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
    115c:	86 9f       	mul	r24, r22
    115e:	90 01       	movw	r18, r0
    1160:	11 24       	eor	r1, r1

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    1162:	21 3e       	cpi	r18, 0xE1	; 225
    1164:	31 05       	cpc	r19, r1
    1166:	94 f7       	brge	.-28     	; 0x114c <xQueueGenericCreate+0xc>
    1168:	16 2f       	mov	r17, r22
    116a:	08 2f       	mov	r16, r24
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    116c:	c9 01       	movw	r24, r18
    116e:	4f 96       	adiw	r24, 0x1f	; 31
    1170:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <pvPortMalloc>
    1174:	ec 01       	movw	r28, r24

            if( pxNewQueue != NULL )
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	49 f3       	breq	.-46     	; 0x114c <xQueueGenericCreate+0xc>
{
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
    117a:	11 11       	cpse	r17, r1
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <xQueueGenericCreate+0x50>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    117e:	99 83       	std	Y+1, r25	; 0x01
    1180:	88 83       	st	Y, r24
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
    1182:	0b 8f       	std	Y+27, r16	; 0x1b
    pxNewQueue->uxItemSize = uxItemSize;
    1184:	1c 8f       	std	Y+28, r17	; 0x1c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <xQueueGenericReset>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    118e:	e0 cf       	rjmp	.-64     	; 0x1150 <xQueueGenericCreate+0x10>
            if( pxNewQueue != NULL )
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
                pucQueueStorage += sizeof( Queue_t );
    1190:	4f 96       	adiw	r24, 0x1f	; 31
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1192:	99 83       	std	Y+1, r25	; 0x01
    1194:	88 83       	st	Y, r24
    1196:	f5 cf       	rjmp	.-22     	; 0x1182 <xQueueGenericCreate+0x42>

00001198 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
    1198:	af 92       	push	r10
    119a:	bf 92       	push	r11
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <xQueueGenericSend+0x14>
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <xQueueGenericSend+0x16>
    11ae:	1f 92       	push	r1
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	8c 01       	movw	r16, r24
    11b6:	6b 01       	movw	r12, r22
    11b8:	5d 83       	std	Y+5, r21	; 0x05
    11ba:	4c 83       	std	Y+4, r20	; 0x04
    11bc:	f2 2e       	mov	r15, r18
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    11be:	80 e0       	ldi	r24, 0x00	; 0
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    11c0:	58 01       	movw	r10, r16
    11c2:	98 e0       	ldi	r25, 0x08	; 8
    11c4:	a9 0e       	add	r10, r25
    11c6:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	0f 92       	push	r0
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    11ce:	f8 01       	movw	r30, r16
    11d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    11d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    11d4:	29 17       	cp	r18, r25
    11d6:	18 f0       	brcs	.+6      	; 0x11de <xQueueGenericSend+0x46>
    11d8:	f2 e0       	ldi	r31, 0x02	; 2
    11da:	ff 12       	cpse	r15, r31
    11dc:	22 c0       	rjmp	.+68     	; 0x1222 <xQueueGenericSend+0x8a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    11de:	4f 2d       	mov	r20, r15
    11e0:	b6 01       	movw	r22, r12
    11e2:	c8 01       	movw	r24, r16
    11e4:	0e 94 b8 07 	call	0xf70	; 0xf70 <prvCopyDataToQueue>

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    11e8:	f8 01       	movw	r30, r16
    11ea:	91 89       	ldd	r25, Z+17	; 0x11
    11ec:	99 23       	and	r25, r25
    11ee:	21 f0       	breq	.+8      	; 0x11f8 <xQueueGenericSend+0x60>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    11f0:	c8 01       	movw	r24, r16
    11f2:	41 96       	adiw	r24, 0x11	; 17
    11f4:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    11f8:	81 11       	cpse	r24, r1
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
    11fa:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
    1202:	81 e0       	ldi	r24, 0x01	; 1
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
        }
    }
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	bf 90       	pop	r11
    121e:	af 90       	pop	r10
    1220:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1222:	2c 81       	ldd	r18, Y+4	; 0x04
    1224:	3d 81       	ldd	r19, Y+5	; 0x05
    1226:	23 2b       	or	r18, r19
    1228:	21 f4       	brne	.+8      	; 0x1232 <xQueueGenericSend+0x9a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
            ( void ) xTaskResumeAll();

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	e9 cf       	rjmp	.-46     	; 0x1204 <xQueueGenericSend+0x6c>
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
                }
                else if( xEntryTimeSet == pdFALSE )
    1232:	81 11       	cpse	r24, r1
    1234:	04 c0       	rjmp	.+8      	; 0x123e <xQueueGenericSend+0xa6>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	0e 94 6e 17 	call	0x2edc	; 0x2edc <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1242:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	0f 92       	push	r0
    124c:	f8 01       	movw	r30, r16
    124e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1250:	8f 3f       	cpi	r24, 0xFF	; 255
    1252:	09 f4       	brne	.+2      	; 0x1256 <xQueueGenericSend+0xbe>
    1254:	15 8e       	std	Z+29, r1	; 0x1d
    1256:	f8 01       	movw	r30, r16
    1258:	86 8d       	ldd	r24, Z+30	; 0x1e
    125a:	8f 3f       	cpi	r24, 0xFF	; 255
    125c:	09 f4       	brne	.+2      	; 0x1260 <xQueueGenericSend+0xc8>
    125e:	16 8e       	std	Z+30, r1	; 0x1e
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1264:	be 01       	movw	r22, r28
    1266:	6c 5f       	subi	r22, 0xFC	; 252
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <xTaskCheckForTimeOut>
    1272:	81 11       	cpse	r24, r1
    1274:	20 c0       	rjmp	.+64     	; 0x12b6 <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    127c:	f8 01       	movw	r30, r16
    127e:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
        prvLockQueue( pxQueue );

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1284:	83 8d       	ldd	r24, Z+27	; 0x1b
    1286:	98 13       	cpse	r25, r24
    1288:	10 c0       	rjmp	.+32     	; 0x12aa <xQueueGenericSend+0x112>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    128a:	6c 81       	ldd	r22, Y+4	; 0x04
    128c:	7d 81       	ldd	r23, Y+5	; 0x05
    128e:	c5 01       	movw	r24, r10
    1290:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    1294:	c8 01       	movw	r24, r16
    1296:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    129a:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    129e:	81 11       	cpse	r24, r1
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <xQueueGenericSend+0x10e>
                {
                    taskYIELD_WITHIN_API();
    12a2:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	8f cf       	rjmp	.-226    	; 0x11c8 <xQueueGenericSend+0x30>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    12aa:	c8 01       	movw	r24, r16
    12ac:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    12b0:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    12b4:	f8 cf       	rjmp	.-16     	; 0x12a6 <xQueueGenericSend+0x10e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    12b6:	c8 01       	movw	r24, r16
    12b8:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    12bc:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    12c0:	b6 cf       	rjmp	.-148    	; 0x122e <xQueueGenericSend+0x96>

000012c2 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    12ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d2:	98 17       	cp	r25, r24
    12d4:	18 f0       	brcs	.+6      	; 0x12dc <xQueueGenericSendFromISR+0x1a>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	d1 f4       	brne	.+52     	; 0x1310 <xQueueGenericSendFromISR+0x4e>
    12dc:	7a 01       	movw	r14, r20
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    12de:	1e 8d       	ldd	r17, Y+30	; 0x1e
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    12e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    12e2:	42 2f       	mov	r20, r18
    12e4:	ce 01       	movw	r24, r28
    12e6:	0e 94 b8 07 	call	0xf70	; 0xf70 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    12ea:	1f 3f       	cpi	r17, 0xFF	; 255
    12ec:	b9 f4       	brne	.+46     	; 0x131c <xQueueGenericSendFromISR+0x5a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    12ee:	89 89       	ldd	r24, Y+17	; 0x11
    12f0:	81 11       	cpse	r24, r1
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <xQueueGenericSendFromISR+0x36>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	0c c0       	rjmp	.+24     	; 0x1310 <xQueueGenericSendFromISR+0x4e>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    12f8:	ce 01       	movw	r24, r28
    12fa:	41 96       	adiw	r24, 0x11	; 17
    12fc:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    1300:	88 23       	and	r24, r24
    1302:	c1 f3       	breq	.-16     	; 0x12f4 <xQueueGenericSendFromISR+0x32>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    1304:	e1 14       	cp	r14, r1
    1306:	f1 04       	cpc	r15, r1
    1308:	a9 f3       	breq	.-22     	; 0x12f4 <xQueueGenericSendFromISR+0x32>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	f7 01       	movw	r30, r14
    130e:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
}
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    131c:	0e 94 66 13 	call	0x26cc	; 0x26cc <uxTaskGetNumberOfTasks>
    1320:	18 17       	cp	r17, r24
    1322:	40 f7       	brcc	.-48     	; 0x12f4 <xQueueGenericSendFromISR+0x32>
    1324:	1f 5f       	subi	r17, 0xFF	; 255
    1326:	1e 8f       	std	Y+30, r17	; 0x1e
    1328:	e5 cf       	rjmp	.-54     	; 0x12f4 <xQueueGenericSendFromISR+0x32>

0000132a <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1336:	8a 8d       	ldd	r24, Y+26	; 0x1a

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
    1338:	9b 8d       	ldd	r25, Y+27	; 0x1b
    133a:	89 17       	cp	r24, r25
    133c:	20 f5       	brcc	.+72     	; 0x1386 <xQueueGiveFromISR+0x5c>
    133e:	7b 01       	movw	r14, r22
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    1340:	1e 8d       	ldd	r17, Y+30	; 0x1e
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	8a 8f       	std	Y+26, r24	; 0x1a

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    1346:	1f 3f       	cpi	r17, 0xFF	; 255
    1348:	b9 f4       	brne	.+46     	; 0x1378 <xQueueGiveFromISR+0x4e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    134a:	89 89       	ldd	r24, Y+17	; 0x11
    134c:	81 11       	cpse	r24, r1
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <xQueueGiveFromISR+0x2a>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	0c c0       	rjmp	.+24     	; 0x136c <xQueueGiveFromISR+0x42>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1354:	ce 01       	movw	r24, r28
    1356:	41 96       	adiw	r24, 0x11	; 17
    1358:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    135c:	88 23       	and	r24, r24
    135e:	c1 f3       	breq	.-16     	; 0x1350 <xQueueGiveFromISR+0x26>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    1360:	e1 14       	cp	r14, r1
    1362:	f1 04       	cpc	r15, r1
    1364:	a9 f3       	breq	.-22     	; 0x1350 <xQueueGiveFromISR+0x26>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	f7 01       	movw	r30, r14
    136a:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
}
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    1378:	0e 94 66 13 	call	0x26cc	; 0x26cc <uxTaskGetNumberOfTasks>
    137c:	18 17       	cp	r17, r24
    137e:	40 f7       	brcc	.-48     	; 0x1350 <xQueueGiveFromISR+0x26>
    1380:	1f 5f       	subi	r17, 0xFF	; 255
    1382:	1e 8f       	std	Y+30, r17	; 0x1e
    1384:	e5 cf       	rjmp	.-54     	; 0x1350 <xQueueGiveFromISR+0x26>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    1386:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
    1388:	f1 cf       	rjmp	.-30     	; 0x136c <xQueueGiveFromISR+0x42>

0000138a <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	00 d0       	rcall	.+0      	; 0x139e <xQueueReceive+0x14>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <xQueueReceive+0x16>
    13a0:	1f 92       	push	r1
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	8c 01       	movw	r16, r24
    13a8:	6b 01       	movw	r12, r22
    13aa:	5d 83       	std	Y+5, r21	; 0x05
    13ac:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    13ae:	80 e0       	ldi	r24, 0x00	; 0
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    13b0:	58 01       	movw	r10, r16
    13b2:	91 e1       	ldi	r25, 0x11	; 17
    13b4:	a9 0e       	add	r10, r25
    13b6:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    13be:	f8 01       	movw	r30, r16
    13c0:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    13c2:	ff 20       	and	r15, r15
    13c4:	19 f1       	breq	.+70     	; 0x140c <xQueueReceive+0x82>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
    13c6:	b6 01       	movw	r22, r12
    13c8:	c8 01       	movw	r24, r16
    13ca:	0e 94 02 08 	call	0x1004	; 0x1004 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    13ce:	fa 94       	dec	r15
    13d0:	f8 01       	movw	r30, r16
    13d2:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13d4:	80 85       	ldd	r24, Z+8	; 0x08
    13d6:	88 23       	and	r24, r24
    13d8:	39 f0       	breq	.+14     	; 0x13e8 <xQueueReceive+0x5e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    13da:	c8 01       	movw	r24, r16
    13dc:	08 96       	adiw	r24, 0x08	; 8
    13de:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    13e2:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    13e4:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	df 90       	pop	r13
    1404:	cf 90       	pop	r12
    1406:	bf 90       	pop	r11
    1408:	af 90       	pop	r10
    140a:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    140c:	2c 81       	ldd	r18, Y+4	; 0x04
    140e:	3d 81       	ldd	r19, Y+5	; 0x05
    1410:	23 2b       	or	r18, r19
    1412:	21 f4       	brne	.+8      	; 0x141c <xQueueReceive+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	e9 cf       	rjmp	.-46     	; 0x13ee <xQueueReceive+0x64>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    141c:	81 11       	cpse	r24, r1
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <xQueueReceive+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1420:	ce 01       	movw	r24, r28
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	0e 94 6e 17 	call	0x2edc	; 0x2edc <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    142c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	0f 92       	push	r0
    1436:	f8 01       	movw	r30, r16
    1438:	85 8d       	ldd	r24, Z+29	; 0x1d
    143a:	8f 3f       	cpi	r24, 0xFF	; 255
    143c:	09 f4       	brne	.+2      	; 0x1440 <xQueueReceive+0xb6>
    143e:	15 8e       	std	Z+29, r1	; 0x1d
    1440:	f8 01       	movw	r30, r16
    1442:	86 8d       	ldd	r24, Z+30	; 0x1e
    1444:	8f 3f       	cpi	r24, 0xFF	; 255
    1446:	09 f4       	brne	.+2      	; 0x144a <xQueueReceive+0xc0>
    1448:	16 8e       	std	Z+30, r1	; 0x1e
    144a:	0f 90       	pop	r0
    144c:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    144e:	be 01       	movw	r22, r28
    1450:	6c 5f       	subi	r22, 0xFC	; 252
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	ce 01       	movw	r24, r28
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <xTaskCheckForTimeOut>
    145c:	81 11       	cpse	r24, r1
    145e:	1b c0       	rjmp	.+54     	; 0x1496 <xQueueReceive+0x10c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1460:	c8 01       	movw	r24, r16
    1462:	0e 94 ad 07 	call	0xf5a	; 0xf5a <prvIsQueueEmpty>
    1466:	88 23       	and	r24, r24
    1468:	81 f0       	breq	.+32     	; 0x148a <xQueueReceive+0x100>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    146a:	6c 81       	ldd	r22, Y+4	; 0x04
    146c:	7d 81       	ldd	r23, Y+5	; 0x05
    146e:	c5 01       	movw	r24, r10
    1470:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1474:	c8 01       	movw	r24, r16
    1476:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    147a:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    147e:	81 11       	cpse	r24, r1
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <xQueueReceive+0xfc>
                {
                    taskYIELD_WITHIN_API();
    1482:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	97 cf       	rjmp	.-210    	; 0x13b8 <xQueueReceive+0x2e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
    148a:	c8 01       	movw	r24, r16
    148c:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1490:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    1494:	f8 cf       	rjmp	.-16     	; 0x1486 <xQueueReceive+0xfc>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
    1496:	c8 01       	movw	r24, r16
    1498:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    149c:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    14a0:	c8 01       	movw	r24, r16
    14a2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <prvIsQueueEmpty>
    14a6:	88 23       	and	r24, r24
    14a8:	71 f3       	breq	.-36     	; 0x1486 <xQueueReceive+0xfc>
    14aa:	b6 cf       	rjmp	.-148    	; 0x1418 <xQueueReceive+0x8e>

000014ac <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <xQueueSemaphoreTake+0xe>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <xQueueSemaphoreTake+0x10>
    14bc:	1f 92       	push	r1
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	8c 01       	movw	r16, r24
    14c4:	7d 83       	std	Y+5, r23	; 0x05
    14c6:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    14c8:	90 e0       	ldi	r25, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    14ca:	78 01       	movw	r14, r16
    14cc:	81 e1       	ldi	r24, 0x11	; 17
    14ce:	e8 0e       	add	r14, r24
    14d0:	f1 1c       	adc	r15, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    14d8:	f8 01       	movw	r30, r16
    14da:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    14dc:	88 23       	and	r24, r24
    14de:	d9 f0       	breq	.+54     	; 0x1516 <xQueueSemaphoreTake+0x6a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
    14e0:	81 50       	subi	r24, 0x01	; 1
    14e2:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    14e4:	80 85       	ldd	r24, Z+8	; 0x08
    14e6:	88 23       	and	r24, r24
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <xQueueSemaphoreTake+0x4c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    14ea:	c8 01       	movw	r24, r16
    14ec:	08 96       	adiw	r24, 0x08	; 8
    14ee:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    14f2:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    14f4:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1516:	2c 81       	ldd	r18, Y+4	; 0x04
    1518:	3d 81       	ldd	r19, Y+5	; 0x05
    151a:	23 2b       	or	r18, r19
    151c:	21 f4       	brne	.+8      	; 0x1526 <xQueueSemaphoreTake+0x7a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	ec cf       	rjmp	.-40     	; 0x14fe <xQueueSemaphoreTake+0x52>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    1526:	91 11       	cpse	r25, r1
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <xQueueSemaphoreTake+0x86>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    152a:	ce 01       	movw	r24, r28
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	0e 94 6e 17 	call	0x2edc	; 0x2edc <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1536:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	0f 92       	push	r0
    1540:	f8 01       	movw	r30, r16
    1542:	85 8d       	ldd	r24, Z+29	; 0x1d
    1544:	8f 3f       	cpi	r24, 0xFF	; 255
    1546:	09 f4       	brne	.+2      	; 0x154a <xQueueSemaphoreTake+0x9e>
    1548:	15 8e       	std	Z+29, r1	; 0x1d
    154a:	f8 01       	movw	r30, r16
    154c:	86 8d       	ldd	r24, Z+30	; 0x1e
    154e:	8f 3f       	cpi	r24, 0xFF	; 255
    1550:	09 f4       	brne	.+2      	; 0x1554 <xQueueSemaphoreTake+0xa8>
    1552:	16 8e       	std	Z+30, r1	; 0x1e
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1558:	be 01       	movw	r22, r28
    155a:	6c 5f       	subi	r22, 0xFC	; 252
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	ce 01       	movw	r24, r28
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <xTaskCheckForTimeOut>
    1566:	81 11       	cpse	r24, r1
    1568:	1b c0       	rjmp	.+54     	; 0x15a0 <xQueueSemaphoreTake+0xf4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    156a:	c8 01       	movw	r24, r16
    156c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <prvIsQueueEmpty>
    1570:	88 23       	and	r24, r24
    1572:	81 f0       	breq	.+32     	; 0x1594 <xQueueSemaphoreTake+0xe8>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1574:	6c 81       	ldd	r22, Y+4	; 0x04
    1576:	7d 81       	ldd	r23, Y+5	; 0x05
    1578:	c7 01       	movw	r24, r14
    157a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    157e:	c8 01       	movw	r24, r16
    1580:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    1584:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    1588:	81 11       	cpse	r24, r1
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <xQueueSemaphoreTake+0xe4>
                {
                    taskYIELD_WITHIN_API();
    158c:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	9f cf       	rjmp	.-194    	; 0x14d2 <xQueueSemaphoreTake+0x26>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    1594:	c8 01       	movw	r24, r16
    1596:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    159a:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    159e:	f8 cf       	rjmp	.-16     	; 0x1590 <xQueueSemaphoreTake+0xe4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    15a0:	c8 01       	movw	r24, r16
    15a2:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    15a6:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    15aa:	c8 01       	movw	r24, r16
    15ac:	0e 94 ad 07 	call	0xf5a	; 0xf5a <prvIsQueueEmpty>
    15b0:	88 23       	and	r24, r24
    15b2:	71 f3       	breq	.-36     	; 0x1590 <xQueueSemaphoreTake+0xe4>
    15b4:	b6 cf       	rjmp	.-148    	; 0x1522 <xQueueSemaphoreTake+0x76>

000015b6 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <xQueuePeek+0x12>
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <xQueuePeek+0x14>
    15ca:	1f 92       	push	r1
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	8c 01       	movw	r16, r24
    15d2:	7b 01       	movw	r14, r22
    15d4:	5d 83       	std	Y+5, r21	; 0x05
    15d6:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    15d8:	80 e0       	ldi	r24, 0x00	; 0
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    15da:	68 01       	movw	r12, r16
    15dc:	91 e1       	ldi	r25, 0x11	; 17
    15de:	c9 0e       	add	r12, r25
    15e0:	d1 1c       	adc	r13, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    15e8:	f8 01       	movw	r30, r16
    15ea:	92 8d       	ldd	r25, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    15ec:	99 23       	and	r25, r25
    15ee:	21 f1       	breq	.+72     	; 0x1638 <xQueuePeek+0x82>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    15f0:	c6 80       	ldd	r12, Z+6	; 0x06
    15f2:	d7 80       	ldd	r13, Z+7	; 0x07

                prvCopyDataFromQueue( pxQueue, pvBuffer );
    15f4:	b7 01       	movw	r22, r14
    15f6:	c8 01       	movw	r24, r16
    15f8:	0e 94 02 08 	call	0x1004	; 0x1004 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    15fc:	f8 01       	movw	r30, r16
    15fe:	d7 82       	std	Z+7, r13	; 0x07
    1600:	c6 82       	std	Z+6, r12	; 0x06

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1602:	81 89       	ldd	r24, Z+17	; 0x11
    1604:	88 23       	and	r24, r24
    1606:	39 f0       	breq	.+14     	; 0x1616 <xQueuePeek+0x60>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1608:	c8 01       	movw	r24, r16
    160a:	41 96       	adiw	r24, 0x11	; 17
    160c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    1610:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
    1612:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
    161a:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1638:	2c 81       	ldd	r18, Y+4	; 0x04
    163a:	3d 81       	ldd	r19, Y+5	; 0x05
    163c:	23 2b       	or	r18, r19
    163e:	21 f4       	brne	.+8      	; 0x1648 <xQueuePeek+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	ea cf       	rjmp	.-44     	; 0x161c <xQueuePeek+0x66>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    1648:	81 11       	cpse	r24, r1
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <xQueuePeek+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    164c:	ce 01       	movw	r24, r28
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	0e 94 6e 17 	call	0x2edc	; 0x2edc <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
    1658:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	0f 92       	push	r0
    1662:	f8 01       	movw	r30, r16
    1664:	85 8d       	ldd	r24, Z+29	; 0x1d
    1666:	8f 3f       	cpi	r24, 0xFF	; 255
    1668:	09 f4       	brne	.+2      	; 0x166c <xQueuePeek+0xb6>
    166a:	15 8e       	std	Z+29, r1	; 0x1d
    166c:	f8 01       	movw	r30, r16
    166e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1670:	8f 3f       	cpi	r24, 0xFF	; 255
    1672:	09 f4       	brne	.+2      	; 0x1676 <xQueuePeek+0xc0>
    1674:	16 8e       	std	Z+30, r1	; 0x1e
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    167a:	be 01       	movw	r22, r28
    167c:	6c 5f       	subi	r22, 0xFC	; 252
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	ce 01       	movw	r24, r28
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <xTaskCheckForTimeOut>
    1688:	81 11       	cpse	r24, r1
    168a:	1b c0       	rjmp	.+54     	; 0x16c2 <xQueuePeek+0x10c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    168c:	c8 01       	movw	r24, r16
    168e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <prvIsQueueEmpty>
    1692:	88 23       	and	r24, r24
    1694:	81 f0       	breq	.+32     	; 0x16b6 <xQueuePeek+0x100>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1696:	6c 81       	ldd	r22, Y+4	; 0x04
    1698:	7d 81       	ldd	r23, Y+5	; 0x05
    169a:	c6 01       	movw	r24, r12
    169c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    16a0:	c8 01       	movw	r24, r16
    16a2:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    16a6:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    16aa:	81 11       	cpse	r24, r1
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <xQueuePeek+0xfc>
                {
                    taskYIELD_WITHIN_API();
    16ae:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	96 cf       	rjmp	.-212    	; 0x15e2 <xQueuePeek+0x2c>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
    16b6:	c8 01       	movw	r24, r16
    16b8:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    16bc:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    16c0:	f8 cf       	rjmp	.-16     	; 0x16b2 <xQueuePeek+0xfc>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
    16c2:	c8 01       	movw	r24, r16
    16c4:	0e 94 1c 08 	call	0x1038	; 0x1038 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    16c8:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    16cc:	c8 01       	movw	r24, r16
    16ce:	0e 94 ad 07 	call	0xf5a	; 0xf5a <prvIsQueueEmpty>
    16d2:	88 23       	and	r24, r24
    16d4:	71 f3       	breq	.-36     	; 0x16b2 <xQueuePeek+0xfc>
    16d6:	b6 cf       	rjmp	.-148    	; 0x1644 <xQueuePeek+0x8e>

000016d8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    16e4:	fc 01       	movw	r30, r24
    16e6:	02 8d       	ldd	r16, Z+26	; 0x1a

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    16e8:	00 23       	and	r16, r16
    16ea:	41 f1       	breq	.+80     	; 0x173c <xQueueReceiveFromISR+0x64>
    16ec:	7a 01       	movw	r14, r20
    16ee:	ec 01       	movw	r28, r24
        {
            const int8_t cRxLock = pxQueue->cRxLock;
    16f0:	15 8d       	ldd	r17, Z+29	; 0x1d

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
    16f2:	0e 94 02 08 	call	0x1004	; 0x1004 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    16f6:	01 50       	subi	r16, 0x01	; 1
    16f8:	0a 8f       	std	Y+26, r16	; 0x1a

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
    16fa:	1f 3f       	cpi	r17, 0xFF	; 255
    16fc:	c1 f4       	brne	.+48     	; 0x172e <xQueueReceiveFromISR+0x56>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16fe:	88 85       	ldd	r24, Y+8	; 0x08
    1700:	81 11       	cpse	r24, r1
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <xQueueReceiveFromISR+0x30>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
            }

            xReturn = pdPASS;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0c c0       	rjmp	.+24     	; 0x1720 <xQueueReceiveFromISR+0x48>
             * locked. */
            if( cRxLock == queueUNLOCKED )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1708:	ce 01       	movw	r24, r28
    170a:	08 96       	adiw	r24, 0x08	; 8
    170c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <xTaskRemoveFromEventList>
    1710:	88 23       	and	r24, r24
    1712:	c1 f3       	breq	.-16     	; 0x1704 <xQueueReceiveFromISR+0x2c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
    1714:	e1 14       	cp	r14, r1
    1716:	f1 04       	cpc	r15, r1
    1718:	a9 f3       	breq	.-22     	; 0x1704 <xQueueReceiveFromISR+0x2c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	f7 01       	movw	r30, r14
    171e:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
}
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
    172e:	0e 94 66 13 	call	0x26cc	; 0x26cc <uxTaskGetNumberOfTasks>
    1732:	18 17       	cp	r17, r24
    1734:	38 f7       	brcc	.-50     	; 0x1704 <xQueueReceiveFromISR+0x2c>
    1736:	1f 5f       	subi	r17, 0xFF	; 255
    1738:	1d 8f       	std	Y+29, r17	; 0x1d
    173a:	e4 cf       	rjmp	.-56     	; 0x1704 <xQueueReceiveFromISR+0x2c>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    173c:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
    173e:	f0 cf       	rjmp	.-32     	; 0x1720 <xQueueReceiveFromISR+0x48>

00001740 <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1748:	fc 01       	movw	r30, r24
    174a:	22 8d       	ldd	r18, Z+26	; 0x1a
    174c:	22 23       	and	r18, r18
    174e:	69 f0       	breq	.+26     	; 0x176a <xQueuePeekFromISR+0x2a>
    1750:	ec 01       	movw	r28, r24
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    1752:	06 81       	ldd	r16, Z+6	; 0x06
    1754:	17 81       	ldd	r17, Z+7	; 0x07
            prvCopyDataFromQueue( pxQueue, pvBuffer );
    1756:	0e 94 02 08 	call	0x1004	; 0x1004 <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    175a:	1f 83       	std	Y+7, r17	; 0x07
    175c:	0e 83       	std	Y+6, r16	; 0x06

            xReturn = pdPASS;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
}
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	08 95       	ret

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    176a:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
    176c:	f9 cf       	rjmp	.-14     	; 0x1760 <xQueuePeekFromISR+0x20>

0000176e <uxQueueMessagesWaiting>:

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );

    taskENTER_CRITICAL();
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	0f 92       	push	r0
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1774:	fc 01       	movw	r30, r24
    1776:	82 8d       	ldd	r24, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
}
    177c:	08 95       	ret

0000177e <uxQueueSpacesAvailable>:

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	0f 92       	push	r0
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    1784:	fc 01       	movw	r30, r24
    1786:	22 8d       	ldd	r18, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    178c:	83 8d       	ldd	r24, Z+27	; 0x1b
    taskEXIT_CRITICAL();

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
}
    178e:	82 1b       	sub	r24, r18
    1790:	08 95       	ret

00001792 <uxQueueMessagesWaitingFromISR>:
    Queue_t * const pxQueue = xQueue;

    traceENTER_uxQueueMessagesWaitingFromISR( xQueue );

    configASSERT( pxQueue );
    uxReturn = pxQueue->uxMessagesWaiting;
    1792:	fc 01       	movw	r30, r24
    1794:	82 8d       	ldd	r24, Z+26	; 0x1a

    traceRETURN_uxQueueMessagesWaitingFromISR( uxReturn );

    return uxReturn;
}
    1796:	08 95       	ret

00001798 <vQueueDelete>:

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
    1798:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <vPortFree>

0000179c <uxQueueGetQueueItemSize>:
    traceENTER_uxQueueGetQueueItemSize( xQueue );

    traceRETURN_uxQueueGetQueueItemSize( ( ( Queue_t * ) xQueue )->uxItemSize );

    return ( ( Queue_t * ) xQueue )->uxItemSize;
}
    179c:	fc 01       	movw	r30, r24
    179e:	84 8d       	ldd	r24, Z+28	; 0x1c
    17a0:	08 95       	ret

000017a2 <uxQueueGetQueueLength>:
    traceENTER_uxQueueGetQueueLength( xQueue );

    traceRETURN_uxQueueGetQueueLength( ( ( Queue_t * ) xQueue )->uxLength );

    return ( ( Queue_t * ) xQueue )->uxLength;
}
    17a2:	fc 01       	movw	r30, r24
    17a4:	83 8d       	ldd	r24, Z+27	; 0x1b
    17a6:	08 95       	ret

000017a8 <xQueueIsQueueEmptyFromISR>:

    traceENTER_xQueueIsQueueEmptyFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    17a8:	fc 01       	movw	r30, r24
    17aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	91 11       	cpse	r25, r1
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueEmptyFromISR( xReturn );

    return xReturn;
}
    17b2:	08 95       	ret

000017b4 <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    17b4:	fc 01       	movw	r30, r24

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    17b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	23 8d       	ldd	r18, Z+27	; 0x1b
    17bc:	29 13       	cpse	r18, r25
    17be:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
}
    17c0:	08 95       	ret

000017c2 <xQueueCRSend>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSend( QueueHandle_t xQueue,
                             const void * pvItemToQueue,
                             TickType_t xTicksToWait )
    {
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
        traceENTER_xQueueCRSend( xQueue, pvItemToQueue, xTicksToWait );

        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    17c8:	f8 94       	cli

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    17d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    17d8:	89 13       	cpse	r24, r25
    17da:	11 c0       	rjmp	.+34     	; 0x17fe <xQueueCRSend+0x3c>
            {
                /* The queue is full - do we want to block or just leave without
                 * posting? */
                if( xTicksToWait > ( TickType_t ) 0 )
    17dc:	41 15       	cp	r20, r1
    17de:	51 05       	cpc	r21, r1
    17e0:	59 f0       	breq	.+22     	; 0x17f8 <xQueueCRSend+0x36>
                {
                    /* As this is called from a coroutine we cannot block directly, but
                     * return indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    17e2:	be 01       	movw	r22, r28
    17e4:	68 5f       	subi	r22, 0xF8	; 248
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	ca 01       	movw	r24, r20
    17ea:	0e 94 86 02 	call	0x50c	; 0x50c <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    17ee:	78 94       	sei
                    return errQUEUE_BLOCKED;
    17f0:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    }
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    17f8:	78 94       	sei
                    return errQUEUE_FULL;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	fa cf       	rjmp	.-12     	; 0x17f2 <xQueueCRSend+0x30>
                }
            }
        }
        portENABLE_INTERRUPTS();
    17fe:	78 94       	sei

        portDISABLE_INTERRUPTS();
    1800:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1802:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1804:	89 17       	cp	r24, r25
    1806:	90 f4       	brcc	.+36     	; 0x182c <xQueueCRSend+0x6a>
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	ce 01       	movw	r24, r28
    180c:	0e 94 b8 07 	call	0xf70	; 0xf70 <prvCopyDataToQueue>
                xReturn = pdPASS;

                /* Were any co-routines waiting for data to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1810:	89 89       	ldd	r24, Y+17	; 0x11
    1812:	81 11       	cpse	r24, r1
    1814:	03 c0       	rjmp	.+6      	; 0x181c <xQueueCRSend+0x5a>
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
                xReturn = pdPASS;
    1816:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = errQUEUE_FULL;
            }
        }
        portENABLE_INTERRUPTS();
    1818:	78 94       	sei

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    181a:	eb cf       	rjmp	.-42     	; 0x17f2 <xQueueCRSend+0x30>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    181c:	ce 01       	movw	r24, r28
    181e:	41 96       	adiw	r24, 0x11	; 17
    1820:	0e 94 cc 03 	call	0x798	; 0x798 <xCoRoutineRemoveFromEventList>
    1824:	88 23       	and	r24, r24
    1826:	b9 f3       	breq	.-18     	; 0x1816 <xQueueCRSend+0x54>
                    {
                        /* The co-routine waiting has a higher priority so record
                         * that a yield might be appropriate. */
                        xReturn = errQUEUE_YIELD;
    1828:	8b ef       	ldi	r24, 0xFB	; 251
    182a:	f6 cf       	rjmp	.-20     	; 0x1818 <xQueueCRSend+0x56>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = errQUEUE_FULL;
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	f4 cf       	rjmp	.-24     	; 0x1818 <xQueueCRSend+0x56>

00001830 <xQueueCRReceive>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
                                void * pvBuffer,
                                TickType_t xTicksToWait )
    {
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	ec 01       	movw	r28, r24
    1836:	fb 01       	movw	r30, r22
        traceENTER_xQueueCRReceive( xQueue, pvBuffer, xTicksToWait );

        /* If the queue is already empty we may have to block.  A critical section
         * is required to prevent an interrupt adding something to the queue
         * between the check to see if the queue is empty and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    1838:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    183a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    183c:	81 11       	cpse	r24, r1
    183e:	11 c0       	rjmp	.+34     	; 0x1862 <xQueueCRReceive+0x32>
            {
                /* There are no messages in the queue, do we want to block or just
                 * leave with nothing? */
                if( xTicksToWait > ( TickType_t ) 0 )
    1840:	41 15       	cp	r20, r1
    1842:	51 05       	cpc	r21, r1
    1844:	59 f0       	breq	.+22     	; 0x185c <xQueueCRReceive+0x2c>
                {
                    /* As this is a co-routine we cannot block directly, but return
                     * indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    1846:	be 01       	movw	r22, r28
    1848:	6f 5e       	subi	r22, 0xEF	; 239
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	ca 01       	movw	r24, r20
    184e:	0e 94 86 02 	call	0x50c	; 0x50c <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    1852:	78 94       	sei
                    return errQUEUE_BLOCKED;
    1854:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    }
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    185c:	78 94       	sei
                    return errQUEUE_FULL;
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	fa cf       	rjmp	.-12     	; 0x1856 <xQueueCRReceive+0x26>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portENABLE_INTERRUPTS();
    1862:	78 94       	sei

        portDISABLE_INTERRUPTS();
    1864:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1866:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1868:	88 23       	and	r24, r24
    186a:	39 f1       	breq	.+78     	; 0x18ba <xQueueCRReceive+0x8a>
            {
                /* Data is available from the queue. */
                pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    186c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	2e 81       	ldd	r18, Y+6	; 0x06
    1872:	3f 81       	ldd	r19, Y+7	; 0x07
    1874:	24 0f       	add	r18, r20
    1876:	35 1f       	adc	r19, r21
    1878:	3f 83       	std	Y+7, r19	; 0x07
    187a:	2e 83       	std	Y+6, r18	; 0x06

                if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	9d 81       	ldd	r25, Y+5	; 0x05
    1880:	28 17       	cp	r18, r24
    1882:	39 07       	cpc	r19, r25
    1884:	20 f0       	brcs	.+8      	; 0x188e <xQueueCRReceive+0x5e>
                {
                    pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    1886:	88 81       	ld	r24, Y
    1888:	99 81       	ldd	r25, Y+1	; 0x01
    188a:	9f 83       	std	Y+7, r25	; 0x07
    188c:	8e 83       	std	Y+6, r24	; 0x06
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --( pxQueue->uxMessagesWaiting );
    188e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1890:	91 50       	subi	r25, 0x01	; 1
    1892:	9a 8f       	std	Y+26, r25	; 0x1a
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1894:	6e 81       	ldd	r22, Y+6	; 0x06
    1896:	7f 81       	ldd	r23, Y+7	; 0x07
    1898:	cf 01       	movw	r24, r30
    189a:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>

                xReturn = pdPASS;

                /* Were any co-routines waiting for space to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    189e:	88 85       	ldd	r24, Y+8	; 0x08
    18a0:	81 11       	cpse	r24, r1
    18a2:	03 c0       	rjmp	.+6      	; 0x18aa <xQueueCRReceive+0x7a>
                }

                --( pxQueue->uxMessagesWaiting );
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

                xReturn = pdPASS;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        portENABLE_INTERRUPTS();
    18a6:	78 94       	sei

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    18a8:	d6 cf       	rjmp	.-84     	; 0x1856 <xQueueCRReceive+0x26>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18aa:	ce 01       	movw	r24, r28
    18ac:	08 96       	adiw	r24, 0x08	; 8
    18ae:	0e 94 cc 03 	call	0x798	; 0x798 <xCoRoutineRemoveFromEventList>
    18b2:	88 23       	and	r24, r24
    18b4:	b9 f3       	breq	.-18     	; 0x18a4 <xQueueCRReceive+0x74>
                    {
                        xReturn = errQUEUE_YIELD;
    18b6:	8b ef       	ldi	r24, 0xFB	; 251
    18b8:	f6 cf       	rjmp	.-20     	; 0x18a6 <xQueueCRReceive+0x76>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = pdFAIL;
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	f4 cf       	rjmp	.-24     	; 0x18a6 <xQueueCRReceive+0x76>

000018be <xQueueCRSendFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
                                    const void * pvItemToQueue,
                                    BaseType_t xCoRoutinePreviouslyWoken )
    {
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	ec 01       	movw	r28, r24
    18c6:	14 2f       	mov	r17, r20

        traceENTER_xQueueCRSendFromISR( xQueue, pvItemToQueue, xCoRoutinePreviouslyWoken );

        /* Cannot block within an ISR so if there is no space on the queue then
         * exit without doing anything. */
        if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    18c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18cc:	98 17       	cp	r25, r24
    18ce:	88 f4       	brcc	.+34     	; 0x18f2 <xQueueCRSendFromISR+0x34>
        {
            prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	ce 01       	movw	r24, r28
    18d4:	0e 94 b8 07 	call	0xf70	; 0xf70 <prvCopyDataToQueue>

            /* We only want to wake one co-routine per ISR, so check that a
             * co-routine has not already been woken. */
            if( xCoRoutinePreviouslyWoken == pdFALSE )
    18d8:	11 11       	cpse	r17, r1
    18da:	0b c0       	rjmp	.+22     	; 0x18f2 <xQueueCRSendFromISR+0x34>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18dc:	89 89       	ldd	r24, Y+17	; 0x11
    18de:	88 23       	and	r24, r24
    18e0:	41 f0       	breq	.+16     	; 0x18f2 <xQueueCRSendFromISR+0x34>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18e2:	ce 01       	movw	r24, r28
    18e4:	41 96       	adiw	r24, 0x11	; 17
    18e6:	0e 94 cc 03 	call	0x798	; 0x798 <xCoRoutineRemoveFromEventList>
    18ea:	11 e0       	ldi	r17, 0x01	; 1
    18ec:	81 11       	cpse	r24, r1
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <xQueueCRSendFromISR+0x34>
    18f0:	10 e0       	ldi	r17, 0x00	; 0
        }

        traceRETURN_xQueueCRSendFromISR( xCoRoutinePreviouslyWoken );

        return xCoRoutinePreviouslyWoken;
    }
    18f2:	81 2f       	mov	r24, r17
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	08 95       	ret

000018fc <xQueueCRReceiveFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
                                       void * pvBuffer,
                                       BaseType_t * pxCoRoutineWoken )
    {
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	ec 01       	movw	r28, r24

        traceENTER_xQueueCRReceiveFromISR( xQueue, pvBuffer, pxCoRoutineWoken );

        /* We cannot block from an ISR, so check there is data available. If
         * not then just leave without doing anything. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1906:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1908:	88 23       	and	r24, r24
    190a:	91 f1       	breq	.+100    	; 0x1970 <xQueueCRReceiveFromISR+0x74>
        {
            /* Copy the data from the queue. */
            pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    190c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	ae 81       	ldd	r26, Y+6	; 0x06
    1912:	bf 81       	ldd	r27, Y+7	; 0x07
    1914:	a2 0f       	add	r26, r18
    1916:	b3 1f       	adc	r27, r19
    1918:	bf 83       	std	Y+7, r27	; 0x07
    191a:	ae 83       	std	Y+6, r26	; 0x06

            if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	9d 81       	ldd	r25, Y+5	; 0x05
    1920:	a8 17       	cp	r26, r24
    1922:	b9 07       	cpc	r27, r25
    1924:	20 f0       	brcs	.+8      	; 0x192e <xQueueCRReceiveFromISR+0x32>
            {
                pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    1926:	88 81       	ld	r24, Y
    1928:	99 81       	ldd	r25, Y+1	; 0x01
    192a:	9f 83       	std	Y+7, r25	; 0x07
    192c:	8e 83       	std	Y+6, r24	; 0x06
    192e:	8a 01       	movw	r16, r20
    1930:	cb 01       	movw	r24, r22
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            --( pxQueue->uxMessagesWaiting );
    1932:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1934:	41 50       	subi	r20, 0x01	; 1
    1936:	4a 8f       	std	Y+26, r20	; 0x1a
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1938:	6e 81       	ldd	r22, Y+6	; 0x06
    193a:	7f 81       	ldd	r23, Y+7	; 0x07
    193c:	a9 01       	movw	r20, r18
    193e:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>

            if( ( *pxCoRoutineWoken ) == pdFALSE )
    1942:	f8 01       	movw	r30, r16
    1944:	80 81       	ld	r24, Z
    1946:	88 23       	and	r24, r24
    1948:	31 f0       	breq	.+12     	; 0x1956 <xQueueCRReceiveFromISR+0x5a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
    194a:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    }
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret
            --( pxQueue->uxMessagesWaiting );
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

            if( ( *pxCoRoutineWoken ) == pdFALSE )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1956:	88 85       	ldd	r24, Y+8	; 0x08
    1958:	88 23       	and	r24, r24
    195a:	b9 f3       	breq	.-18     	; 0x194a <xQueueCRReceiveFromISR+0x4e>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    195c:	ce 01       	movw	r24, r28
    195e:	08 96       	adiw	r24, 0x08	; 8
    1960:	0e 94 cc 03 	call	0x798	; 0x798 <xCoRoutineRemoveFromEventList>
    1964:	88 23       	and	r24, r24
    1966:	89 f3       	breq	.-30     	; 0x194a <xQueueCRReceiveFromISR+0x4e>
                    {
                        *pxCoRoutineWoken = pdTRUE;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	f8 01       	movw	r30, r16
    196c:	80 83       	st	Z, r24
    196e:	ee cf       	rjmp	.-36     	; 0x194c <xQueueCRReceiveFromISR+0x50>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    1970:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    1972:	ec cf       	rjmp	.-40     	; 0x194c <xQueueCRReceiveFromISR+0x50>

00001974 <prvBytesInBuffer>:
    return xTail;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    1974:	fc 01       	movw	r30, r24
    /* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    1976:	44 81       	ldd	r20, Z+4	; 0x04
    1978:	55 81       	ldd	r21, Z+5	; 0x05
    197a:	22 81       	ldd	r18, Z+2	; 0x02
    197c:	33 81       	ldd	r19, Z+3	; 0x03
    197e:	24 0f       	add	r18, r20
    1980:	35 1f       	adc	r19, r21
    xCount -= pxStreamBuffer->xTail;
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	b9 01       	movw	r22, r18
    1988:	68 1b       	sub	r22, r24
    198a:	79 0b       	sbc	r23, r25
    198c:	cb 01       	movw	r24, r22

    if( xCount >= pxStreamBuffer->xLength )
    198e:	64 17       	cp	r22, r20
    1990:	75 07       	cpc	r23, r21
    1992:	10 f0       	brcs	.+4      	; 0x1998 <prvBytesInBuffer+0x24>
    {
        xCount -= pxStreamBuffer->xLength;
    1994:	84 1b       	sub	r24, r20
    1996:	95 0b       	sbc	r25, r21
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
}
    1998:	08 95       	ret

0000199a <prvWriteBytesToBuffer>:

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount,
                                     size_t xHead )
{
    199a:	af 92       	push	r10
    199c:	bf 92       	push	r11
    199e:	cf 92       	push	r12
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	6c 01       	movw	r12, r24
    19b0:	5b 01       	movw	r10, r22
    19b2:	7a 01       	movw	r14, r20
    19b4:	e9 01       	movw	r28, r18
    configASSERT( xCount > ( size_t ) 0 );

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
    19b6:	fc 01       	movw	r30, r24
    19b8:	04 81       	ldd	r16, Z+4	; 0x04
    19ba:	15 81       	ldd	r17, Z+5	; 0x05
    19bc:	02 1b       	sub	r16, r18
    19be:	13 0b       	sbc	r17, r19
    19c0:	40 17       	cp	r20, r16
    19c2:	51 07       	cpc	r21, r17
    19c4:	08 f4       	brcc	.+2      	; 0x19c8 <prvWriteBytesToBuffer+0x2e>
    19c6:	8a 01       	movw	r16, r20

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength );
    19c8:	f6 01       	movw	r30, r12
    19ca:	84 85       	ldd	r24, Z+12	; 0x0c
    19cc:	95 85       	ldd	r25, Z+13	; 0x0d
    19ce:	a8 01       	movw	r20, r16
    19d0:	b5 01       	movw	r22, r10
    19d2:	8c 0f       	add	r24, r28
    19d4:	9d 1f       	adc	r25, r29
    19d6:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    19da:	0e 15       	cp	r16, r14
    19dc:	1f 05       	cpc	r17, r15
    19de:	58 f4       	brcc	.+22     	; 0x19f6 <prvWriteBytesToBuffer+0x5c>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength );
    19e0:	a7 01       	movw	r20, r14
    19e2:	40 1b       	sub	r20, r16
    19e4:	51 0b       	sbc	r21, r17
    19e6:	b5 01       	movw	r22, r10
    19e8:	60 0f       	add	r22, r16
    19ea:	71 1f       	adc	r23, r17
    19ec:	f6 01       	movw	r30, r12
    19ee:	84 85       	ldd	r24, Z+12	; 0x0c
    19f0:	95 85       	ldd	r25, Z+13	; 0x0d
    19f2:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xHead += xCount;
    19f6:	ce 01       	movw	r24, r28
    19f8:	8e 0d       	add	r24, r14
    19fa:	9f 1d       	adc	r25, r15

    if( xHead >= pxStreamBuffer->xLength )
    19fc:	f6 01       	movw	r30, r12
    19fe:	24 81       	ldd	r18, Z+4	; 0x04
    1a00:	35 81       	ldd	r19, Z+5	; 0x05
    1a02:	82 17       	cp	r24, r18
    1a04:	93 07       	cpc	r25, r19
    1a06:	10 f0       	brcs	.+4      	; 0x1a0c <prvWriteBytesToBuffer+0x72>
    {
        xHead -= pxStreamBuffer->xLength;
    1a08:	82 1b       	sub	r24, r18
    1a0a:	93 0b       	sbc	r25, r19
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xHead;
}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	bf 90       	pop	r11
    1a1e:	af 90       	pop	r10
    1a20:	08 95       	ret

00001a22 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
    1a22:	af 92       	push	r10
    1a24:	bf 92       	push	r11
    1a26:	cf 92       	push	r12
    1a28:	df 92       	push	r13
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <prvWriteMessageToBuffer+0x16>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	6c 01       	movw	r12, r24
    1a3e:	5b 01       	movw	r10, r22
    1a40:	7a 01       	movw	r14, r20
    size_t xNextHead = pxStreamBuffer->xHead;
    1a42:	fc 01       	movw	r30, r24
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    configMESSAGE_BUFFER_LENGTH_TYPE xMessageLength;

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a48:	46 85       	ldd	r20, Z+14	; 0x0e
    1a4a:	40 ff       	sbrs	r20, 0
    1a4c:	28 c0       	rjmp	.+80     	; 0x1a9e <prvWriteMessageToBuffer+0x7c>
    {
        /* This is a message buffer, as opposed to a stream buffer. */

        /* Convert xDataLengthBytes to the message length type. */
        xMessageLength = ( configMESSAGE_BUFFER_LENGTH_TYPE ) xDataLengthBytes;
    1a4e:	fa 82       	std	Y+2, r15	; 0x02
    1a50:	e9 82       	std	Y+1, r14	; 0x01

        /* Ensure the data length given fits within configMESSAGE_BUFFER_LENGTH_TYPE. */
        configASSERT( ( size_t ) xMessageLength == xDataLengthBytes );

        if( xSpace >= xRequiredSpace )
    1a52:	20 17       	cp	r18, r16
    1a54:	31 07       	cpc	r19, r17
    1a56:	40 f1       	brcs	.+80     	; 0x1aa8 <prvWriteMessageToBuffer+0x86>
        {
            /* There is enough space to write both the message length and the message
             * itself into the buffer.  Start by writing the length of the data, the data
             * itself will be written later in this function. */
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
    1a58:	9c 01       	movw	r18, r24
    1a5a:	42 e0       	ldi	r20, 0x02	; 2
    1a5c:	50 e0       	ldi	r21, 0x00	; 0
    1a5e:	be 01       	movw	r22, r28
    1a60:	6f 5f       	subi	r22, 0xFF	; 255
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	c6 01       	movw	r24, r12
    1a66:	0e 94 cd 0c 	call	0x199a	; 0x199a <prvWriteBytesToBuffer>
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    }

    if( xDataLengthBytes != ( size_t ) 0 )
    1a6a:	e1 14       	cp	r14, r1
    1a6c:	f1 04       	cpc	r15, r1
    1a6e:	49 f0       	breq	.+18     	; 0x1a82 <prvWriteMessageToBuffer+0x60>
    {
        /* Write the data to the buffer. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead );
    1a70:	9c 01       	movw	r18, r24
    1a72:	a7 01       	movw	r20, r14
    1a74:	b5 01       	movw	r22, r10
    1a76:	c6 01       	movw	r24, r12
    1a78:	0e 94 cd 0c 	call	0x199a	; 0x199a <prvWriteBytesToBuffer>
    1a7c:	f6 01       	movw	r30, r12
    1a7e:	93 83       	std	Z+3, r25	; 0x03
    1a80:	82 83       	std	Z+2, r24	; 0x02
    }

    return xDataLengthBytes;
}
    1a82:	c7 01       	movw	r24, r14
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	df 90       	pop	r13
    1a96:	cf 90       	pop	r12
    1a98:	bf 90       	pop	r11
    1a9a:	af 90       	pop	r10
    1a9c:	08 95       	ret
    else
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    1a9e:	2e 15       	cp	r18, r14
    1aa0:	3f 05       	cpc	r19, r15
    1aa2:	18 f7       	brcc	.-58     	; 0x1a6a <prvWriteMessageToBuffer+0x48>
    1aa4:	79 01       	movw	r14, r18
    1aa6:	e1 cf       	rjmp	.-62     	; 0x1a6a <prvWriteMessageToBuffer+0x48>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
        }
        else
        {
            /* Not enough space, so do not write data to the buffer. */
            xDataLengthBytes = 0;
    1aa8:	f1 2c       	mov	r15, r1
    1aaa:	e1 2c       	mov	r14, r1
    1aac:	ea cf       	rjmp	.-44     	; 0x1a82 <prvWriteMessageToBuffer+0x60>

00001aae <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xCount,
                                      size_t xTail )
{
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	6c 01       	movw	r12, r24
    1ac4:	5b 01       	movw	r10, r22
    1ac6:	7a 01       	movw	r14, r20
    1ac8:	e9 01       	movw	r28, r18
    configASSERT( xCount != ( size_t ) 0 );

    /* Calculate the number of bytes that can be read - which may be
     * less than the number wanted if the data wraps around to the start of
     * the buffer. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
    1aca:	fc 01       	movw	r30, r24
    1acc:	04 81       	ldd	r16, Z+4	; 0x04
    1ace:	15 81       	ldd	r17, Z+5	; 0x05
    1ad0:	02 1b       	sub	r16, r18
    1ad2:	13 0b       	sbc	r17, r19
    1ad4:	40 17       	cp	r20, r16
    1ad6:	51 07       	cpc	r21, r17
    1ad8:	08 f4       	brcc	.+2      	; 0x1adc <prvReadBytesFromBuffer+0x2e>
    1ada:	8a 01       	movw	r16, r20

    /* Obtain the number of bytes it is possible to obtain in the first
     * read.  Asserts check bounds of read and write. */
    configASSERT( xFirstLength <= xCount );
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength );
    1adc:	f6 01       	movw	r30, r12
    1ade:	64 85       	ldd	r22, Z+12	; 0x0c
    1ae0:	75 85       	ldd	r23, Z+13	; 0x0d
    1ae2:	6c 0f       	add	r22, r28
    1ae4:	7d 1f       	adc	r23, r29
    1ae6:	a8 01       	movw	r20, r16
    1ae8:	c5 01       	movw	r24, r10
    1aea:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>

    /* If the total number of wanted bytes is greater than the number
     * that could be read in the first read... */
    if( xCount > xFirstLength )
    1aee:	0e 15       	cp	r16, r14
    1af0:	1f 05       	cpc	r17, r15
    1af2:	58 f4       	brcc	.+22     	; 0x1b0a <prvReadBytesFromBuffer+0x5c>
    {
        /* ...then read the remaining bytes from the start of the buffer. */
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength );
    1af4:	a7 01       	movw	r20, r14
    1af6:	40 1b       	sub	r20, r16
    1af8:	51 0b       	sbc	r21, r17
    1afa:	f6 01       	movw	r30, r12
    1afc:	64 85       	ldd	r22, Z+12	; 0x0c
    1afe:	75 85       	ldd	r23, Z+13	; 0x0d
    1b00:	c5 01       	movw	r24, r10
    1b02:	80 0f       	add	r24, r16
    1b04:	91 1f       	adc	r25, r17
    1b06:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Move the tail pointer to effectively remove the data read from the buffer. */
    xTail += xCount;
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	8e 0d       	add	r24, r14
    1b0e:	9f 1d       	adc	r25, r15

    if( xTail >= pxStreamBuffer->xLength )
    1b10:	f6 01       	movw	r30, r12
    1b12:	24 81       	ldd	r18, Z+4	; 0x04
    1b14:	35 81       	ldd	r19, Z+5	; 0x05
    1b16:	82 17       	cp	r24, r18
    1b18:	93 07       	cpc	r25, r19
    1b1a:	10 f0       	brcs	.+4      	; 0x1b20 <prvReadBytesFromBuffer+0x72>
    {
        xTail -= pxStreamBuffer->xLength;
    1b1c:	82 1b       	sub	r24, r18
    1b1e:	93 0b       	sbc	r25, r19
    }

    return xTail;
}
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	df 90       	pop	r13
    1b2e:	cf 90       	pop	r12
    1b30:	bf 90       	pop	r11
    1b32:	af 90       	pop	r10
    1b34:	08 95       	ret

00001b36 <prvReadMessageFromBuffer>:

static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable )
{
    1b36:	af 92       	push	r10
    1b38:	bf 92       	push	r11
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <prvReadMessageFromBuffer+0x16>
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	7c 01       	movw	r14, r24
    1b52:	5b 01       	movw	r10, r22
    1b54:	6a 01       	movw	r12, r20
    1b56:	89 01       	movw	r16, r18
    size_t xCount, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
    size_t xNextTail = pxStreamBuffer->xTail;
    1b58:	fc 01       	movw	r30, r24
    1b5a:	20 81       	ld	r18, Z
    1b5c:	31 81       	ldd	r19, Z+1	; 0x01

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b5e:	86 85       	ldd	r24, Z+14	; 0x0e
    1b60:	80 ff       	sbrs	r24, 0
    1b62:	12 c0       	rjmp	.+36     	; 0x1b88 <prvReadMessageFromBuffer+0x52>
    {
        /* A discrete message is being received.  First receive the length
         * of the message. */
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
    1b64:	42 e0       	ldi	r20, 0x02	; 2
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	be 01       	movw	r22, r28
    1b6a:	6f 5f       	subi	r22, 0xFF	; 255
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	c7 01       	movw	r24, r14
    1b70:	0e 94 57 0d 	call	0x1aae	; 0x1aae <prvReadBytesFromBuffer>
    1b74:	9c 01       	movw	r18, r24
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b7a:	02 50       	subi	r16, 0x02	; 2
    1b7c:	11 09       	sbc	r17, r1

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1b7e:	c8 16       	cp	r12, r24
    1b80:	d9 06       	cpc	r13, r25
    1b82:	f8 f4       	brcc	.+62     	; 0x1bc2 <prvReadMessageFromBuffer+0x8c>
        {
            /* The user has provided insufficient space to read the message. */
            xNextMessageLength = 0;
    1b84:	d1 2c       	mov	r13, r1
    1b86:	c1 2c       	mov	r12, r1
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
    1b88:	c0 16       	cp	r12, r16
    1b8a:	d1 06       	cpc	r13, r17
    1b8c:	08 f4       	brcc	.+2      	; 0x1b90 <prvReadMessageFromBuffer+0x5a>
    1b8e:	86 01       	movw	r16, r12

    if( xCount != ( size_t ) 0 )
    1b90:	01 15       	cp	r16, r1
    1b92:	11 05       	cpc	r17, r1
    1b94:	41 f0       	breq	.+16     	; 0x1ba6 <prvReadMessageFromBuffer+0x70>
    {
        /* Read the actual data and update the tail to mark the data as officially consumed. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail );
    1b96:	a8 01       	movw	r20, r16
    1b98:	b5 01       	movw	r22, r10
    1b9a:	c7 01       	movw	r24, r14
    1b9c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <prvReadBytesFromBuffer>
    1ba0:	f7 01       	movw	r30, r14
    1ba2:	91 83       	std	Z+1, r25	; 0x01
    1ba4:	80 83       	st	Z, r24
    }

    return xCount;
}
    1ba6:	c8 01       	movw	r24, r16
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	cf 90       	pop	r12
    1bbc:	bf 90       	pop	r11
    1bbe:	af 90       	pop	r10
    1bc0:	08 95       	ret
    1bc2:	6c 01       	movw	r12, r24
    1bc4:	e1 cf       	rjmp	.-62     	; 0x1b88 <prvReadMessageFromBuffer+0x52>

00001bc6 <xStreamBufferGenericCreate>:
    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xStreamBufferType,
                                                     StreamBufferCallbackFunction_t pxSendCompletedCallback,
                                                     StreamBufferCallbackFunction_t pxReceiveCompletedCallback )
    {
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	ec 01       	movw	r28, r24
    1bd2:	7b 01       	movw	r14, r22
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    1bd4:	11 e0       	ldi	r17, 0x01	; 1

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
    1bd6:	41 30       	cpi	r20, 0x01	; 1
    1bd8:	21 f0       	breq	.+8      	; 0x1be2 <xStreamBufferGenericCreate+0x1c>
            configASSERT( xBufferSizeBytes > 0 );
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
    1bda:	10 e0       	ldi	r17, 0x00	; 0
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
        }
        else if( xStreamBufferType == sbTYPE_STREAM_BATCHING_BUFFER )
    1bdc:	42 30       	cpi	r20, 0x02	; 2
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <xStreamBufferGenericCreate+0x1c>
        {
            /* Is a batching buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_BATCHING_BUFFER;
    1be0:	14 e0       	ldi	r17, 0x04	; 4

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
    1be2:	e1 14       	cp	r14, r1
    1be4:	f1 04       	cpc	r15, r1
    1be6:	19 f4       	brne	.+6      	; 0x1bee <xStreamBufferGenericCreate+0x28>
        {
            xTriggerLevelBytes = ( size_t ) 1;
    1be8:	ee 24       	eor	r14, r14
    1bea:	e3 94       	inc	r14
    1bec:	f1 2c       	mov	r15, r1
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
        }
        else
        {
            pvAllocatedMemory = NULL;
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	e0 e0       	ldi	r30, 0x00	; 0
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
    1bf2:	cf 3e       	cpi	r28, 0xEF	; 239
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	d8 07       	cpc	r29, r24
    1bf8:	b8 f4       	brcc	.+46     	; 0x1c28 <xStreamBufferGenericCreate+0x62>
        {
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	41 96       	adiw	r24, 0x11	; 17
    1bfe:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <pvPortMalloc>
    1c02:	fc 01       	movw	r30, r24
        else
        {
            pvAllocatedMemory = NULL;
        }

        if( pvAllocatedMemory != NULL )
    1c04:	89 2b       	or	r24, r25
    1c06:	81 f0       	breq	.+32     	; 0x1c28 <xStreamBufferGenericCreate+0x62>
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    1c08:	8c e0       	ldi	r24, 0x0C	; 12
    1c0a:	df 01       	movw	r26, r30
    1c0c:	1d 92       	st	X+, r1
    1c0e:	8a 95       	dec	r24
    1c10:	e9 f7       	brne	.-6      	; 0x1c0c <xStreamBufferGenericCreate+0x46>
        if( pvAllocatedMemory != NULL )
        {
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */
    1c12:	cf 01       	movw	r24, r30
    1c14:	40 96       	adiw	r24, 0x10	; 16
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    1c16:	95 87       	std	Z+13, r25	; 0x0d
    1c18:	84 87       	std	Z+12, r24	; 0x0c
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
        {
            xBufferSizeBytes++;
    1c1a:	21 96       	adiw	r28, 0x01	; 1
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    1c1c:	d5 83       	std	Z+5, r29	; 0x05
    1c1e:	c4 83       	std	Z+4, r28	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    1c20:	f7 82       	std	Z+7, r15	; 0x07
    1c22:	e6 82       	std	Z+6, r14	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    1c24:	16 87       	std	Z+14, r17	; 0x0e
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    1c26:	17 86       	std	Z+15, r1	; 0x0f

        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        return ( StreamBufferHandle_t ) pvAllocatedMemory;
    }
    1c28:	cf 01       	movw	r24, r30
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	1f 91       	pop	r17
    1c30:	ff 90       	pop	r15
    1c32:	ef 90       	pop	r14
    1c34:	08 95       	ret

00001c36 <vStreamBufferDelete>:

    configASSERT( pxStreamBuffer );

    traceSTREAM_BUFFER_DELETE( xStreamBuffer );

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    1c36:	fc 01       	movw	r30, r24
    1c38:	26 85       	ldd	r18, Z+14	; 0x0e
    1c3a:	21 ff       	sbrs	r18, 1
    {
        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
        {
            /* Both the structure and the buffer were allocated using a single call
            * to pvPortMalloc(), hence only one call to vPortFree() is required. */
            vPortFree( ( void * ) pxStreamBuffer );
    1c3c:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <vPortFree>
    }
    else
    {
        /* The structure and buffer were not allocated dynamically and cannot be
         * freed - just scrub the structure so future use will assert. */
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    1c40:	20 e1       	ldi	r18, 0x10	; 16
    1c42:	11 92       	st	Z+, r1
    1c44:	2a 95       	dec	r18
    1c46:	e9 f7       	brne	.-6      	; 0x1c42 <vStreamBufferDelete+0xc>
    }

    traceRETURN_vStreamBufferDelete();
}
    1c48:	08 95       	ret

00001c4a <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    1c4a:	fc 01       	movw	r30, r24
        uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
    }
    #endif

    /* Can only reset a message buffer if there are no tasks blocked on it. */
    taskENTER_CRITICAL();
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	0f 92       	push	r0
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    1c52:	80 85       	ldd	r24, Z+8	; 0x08
    1c54:	91 85       	ldd	r25, Z+9	; 0x09
    1c56:	89 2b       	or	r24, r25
    1c58:	b1 f4       	brne	.+44     	; 0x1c86 <xStreamBufferReset+0x3c>
    1c5a:	82 85       	ldd	r24, Z+10	; 0x0a
    1c5c:	93 85       	ldd	r25, Z+11	; 0x0b
    1c5e:	89 2b       	or	r24, r25
    1c60:	91 f4       	brne	.+36     	; 0x1c86 <xStreamBufferReset+0x3c>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    1c62:	86 81       	ldd	r24, Z+6	; 0x06
    1c64:	97 81       	ldd	r25, Z+7	; 0x07
    1c66:	24 81       	ldd	r18, Z+4	; 0x04
    1c68:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    1c6a:	4c e0       	ldi	r20, 0x0C	; 12
    1c6c:	df 01       	movw	r26, r30
    1c6e:	1d 92       	st	X+, r1
    1c70:	4a 95       	dec	r20
    1c72:	e9 f7       	brne	.-6      	; 0x1c6e <xStreamBufferReset+0x24>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    1c74:	35 83       	std	Z+5, r19	; 0x05
    1c76:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    1c78:	97 83       	std	Z+7, r25	; 0x07
    1c7a:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    1c7c:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET( xStreamBuffer );

            xReturn = pdPASS;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xStreamBufferReset( xReturn );

    return xReturn;
}
    1c84:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	fb cf       	rjmp	.-10     	; 0x1c80 <xStreamBufferReset+0x36>

00001c8a <xStreamBufferResetFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    1c8a:	fc 01       	movw	r30, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    1c8c:	80 85       	ldd	r24, Z+8	; 0x08
    1c8e:	91 85       	ldd	r25, Z+9	; 0x09
    1c90:	89 2b       	or	r24, r25
    1c92:	a1 f4       	brne	.+40     	; 0x1cbc <xStreamBufferResetFromISR+0x32>
    1c94:	82 85       	ldd	r24, Z+10	; 0x0a
    1c96:	93 85       	ldd	r25, Z+11	; 0x0b
    1c98:	89 2b       	or	r24, r25
    1c9a:	81 f4       	brne	.+32     	; 0x1cbc <xStreamBufferResetFromISR+0x32>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    1c9c:	86 81       	ldd	r24, Z+6	; 0x06
    1c9e:	97 81       	ldd	r25, Z+7	; 0x07
    1ca0:	24 81       	ldd	r18, Z+4	; 0x04
    1ca2:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    1ca4:	4c e0       	ldi	r20, 0x0C	; 12
    1ca6:	df 01       	movw	r26, r30
    1ca8:	1d 92       	st	X+, r1
    1caa:	4a 95       	dec	r20
    1cac:	e9 f7       	brne	.-6      	; 0x1ca8 <xStreamBufferResetFromISR+0x1e>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    1cae:	35 83       	std	Z+5, r19	; 0x05
    1cb0:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    1cb2:	97 83       	std	Z+7, r25	; 0x07
    1cb4:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    1cb6:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET_FROM_ISR( xStreamBuffer );

            xReturn = pdPASS;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferResetFromISR( xReturn );

    return xReturn;
}
    1cbe:	08 95       	ret

00001cc0 <xStreamBufferSetTriggerLevel>:
    traceENTER_xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );

    configASSERT( pxStreamBuffer );

    /* It is not valid for the trigger level to be 0. */
    if( xTriggerLevel == ( size_t ) 0 )
    1cc0:	61 15       	cp	r22, r1
    1cc2:	71 05       	cpc	r23, r1
    1cc4:	11 f4       	brne	.+4      	; 0x1cca <xStreamBufferSetTriggerLevel+0xa>
    {
        xTriggerLevel = ( size_t ) 1;
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    }

    /* The trigger level is the number of bytes that must be in the stream
     * buffer before a task that is waiting for data is unblocked. */
    if( xTriggerLevel < pxStreamBuffer->xLength )
    1cca:	fc 01       	movw	r30, r24
    1ccc:	24 81       	ldd	r18, Z+4	; 0x04
    1cce:	35 81       	ldd	r19, Z+5	; 0x05
    1cd0:	62 17       	cp	r22, r18
    1cd2:	73 07       	cpc	r23, r19
    1cd4:	20 f4       	brcc	.+8      	; 0x1cde <xStreamBufferSetTriggerLevel+0x1e>
    {
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    1cd6:	77 83       	std	Z+7, r23	; 0x07
    1cd8:	66 83       	std	Z+6, r22	; 0x06
        xReturn = pdPASS;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	08 95       	ret
    }
    else
    {
        xReturn = pdFALSE;
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferSetTriggerLevel( xReturn );

    return xReturn;
}
    1ce0:	08 95       	ret

00001ce2 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    1ce2:	fc 01       	movw	r30, r24
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    1ce4:	24 81       	ldd	r18, Z+4	; 0x04
    1ce6:	35 81       	ldd	r19, Z+5	; 0x05
    /* The code below reads xTail and then xHead.  This is safe if the stream
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
        xSpace -= pxStreamBuffer->xHead;
    1cf0:	42 81       	ldd	r20, Z+2	; 0x02
    1cf2:	53 81       	ldd	r21, Z+3	; 0x03
    } while( xOriginalTail != pxStreamBuffer->xTail );
    1cf4:	a0 81       	ld	r26, Z
    1cf6:	b1 81       	ldd	r27, Z+1	; 0x01
    1cf8:	a8 17       	cp	r26, r24
    1cfa:	b9 07       	cpc	r27, r25
    1cfc:	a9 f7       	brne	.-22     	; 0x1ce8 <xStreamBufferSpacesAvailable+0x6>

    xSpace -= ( size_t ) 1;
    1cfe:	c9 01       	movw	r24, r18
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	86 0f       	add	r24, r22
    1d04:	97 1f       	adc	r25, r23
    1d06:	84 1b       	sub	r24, r20
    1d08:	95 0b       	sbc	r25, r21

    if( xSpace >= pxStreamBuffer->xLength )
    1d0a:	82 17       	cp	r24, r18
    1d0c:	93 07       	cpc	r25, r19
    1d0e:	10 f0       	brcs	.+4      	; 0x1d14 <xStreamBufferSpacesAvailable+0x32>
    {
        xSpace -= pxStreamBuffer->xLength;
    1d10:	82 1b       	sub	r24, r18
    1d12:	93 0b       	sbc	r25, r19
    }

    traceRETURN_xStreamBufferSpacesAvailable( xSpace );

    return xSpace;
}
    1d14:	08 95       	ret

00001d16 <xStreamBufferBytesAvailable>:

    traceENTER_xStreamBufferBytesAvailable( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    1d16:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <prvBytesInBuffer>

00001d1a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1d1a:	2f 92       	push	r2
    1d1c:	3f 92       	push	r3
    1d1e:	4f 92       	push	r4
    1d20:	5f 92       	push	r5
    1d22:	6f 92       	push	r6
    1d24:	7f 92       	push	r7
    1d26:	8f 92       	push	r8
    1d28:	9f 92       	push	r9
    1d2a:	af 92       	push	r10
    1d2c:	bf 92       	push	r11
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <xStreamBufferSend+0x26>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <xStreamBufferSend+0x28>
    1d42:	1f 92       	push	r1
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	5c 01       	movw	r10, r24
    1d4a:	1b 01       	movw	r2, r22
    1d4c:	2a 01       	movw	r4, r20
    1d4e:	3d 83       	std	Y+5, r19	; 0x05
    1d50:	2c 83       	std	Y+4, r18	; 0x04
    configASSERT( pvTxData );
    configASSERT( pxStreamBuffer );

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1d52:	fc 01       	movw	r30, r24
    1d54:	84 81       	ldd	r24, Z+4	; 0x04
    1d56:	95 81       	ldd	r25, Z+5	; 0x05
    1d58:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1d5a:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1d5c:	4a 01       	movw	r8, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1d5e:	20 ff       	sbrs	r18, 0
    1d60:	54 c0       	rjmp	.+168    	; 0x1e0a <xStreamBufferSend+0xf0>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1d62:	f2 e0       	ldi	r31, 0x02	; 2
    1d64:	8f 0e       	add	r8, r31
    1d66:	91 1c       	adc	r9, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1d68:	88 15       	cp	r24, r8
    1d6a:	99 05       	cpc	r25, r9
    1d6c:	10 f4       	brcc	.+4      	; 0x1d72 <xStreamBufferSend+0x58>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1d6e:	1d 82       	std	Y+5, r1	; 0x05
    1d70:	1c 82       	std	Y+4, r1	; 0x04
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	9d 81       	ldd	r25, Y+5	; 0x05
    1d76:	89 2b       	or	r24, r25
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <xStreamBufferSend+0x62>
    1d7a:	4d c0       	rjmp	.+154    	; 0x1e16 <xStreamBufferSend+0xfc>
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1d7c:	c5 01       	movw	r24, r10
    1d7e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xStreamBufferSpacesAvailable>
    1d82:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1d84:	84 01       	movw	r16, r8
    1d86:	93 01       	movw	r18, r6
    1d88:	a2 01       	movw	r20, r4
    1d8a:	b1 01       	movw	r22, r2
    1d8c:	c5 01       	movw	r24, r10
    1d8e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <prvWriteMessageToBuffer>
    1d92:	4c 01       	movw	r8, r24

    if( xReturn > ( size_t ) 0 )
    1d94:	89 2b       	or	r24, r25
    1d96:	01 f1       	breq	.+64     	; 0x1dd8 <xStreamBufferSend+0xbe>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1d98:	c5 01       	movw	r24, r10
    1d9a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <prvBytesInBuffer>
    1d9e:	f5 01       	movw	r30, r10
    1da0:	26 81       	ldd	r18, Z+6	; 0x06
    1da2:	37 81       	ldd	r19, Z+7	; 0x07
    1da4:	82 17       	cp	r24, r18
    1da6:	93 07       	cpc	r25, r19
    1da8:	b8 f0       	brcs	.+46     	; 0x1dd8 <xStreamBufferSend+0xbe>
        {
            prvSEND_COMPLETED( pxStreamBuffer );
    1daa:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
    1dae:	f5 01       	movw	r30, r10
    1db0:	80 85       	ldd	r24, Z+8	; 0x08
    1db2:	91 85       	ldd	r25, Z+9	; 0x09
    1db4:	89 2b       	or	r24, r25
    1db6:	71 f0       	breq	.+28     	; 0x1dd4 <xStreamBufferSend+0xba>
    1db8:	80 85       	ldd	r24, Z+8	; 0x08
    1dba:	91 85       	ldd	r25, Z+9	; 0x09
    1dbc:	f1 2c       	mov	r15, r1
    1dbe:	e1 2c       	mov	r14, r1
    1dc0:	00 e0       	ldi	r16, 0x00	; 0
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	a9 01       	movw	r20, r18
    1dc8:	67 85       	ldd	r22, Z+15	; 0x0f
    1dca:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskGenericNotify>
    1dce:	f5 01       	movw	r30, r10
    1dd0:	11 86       	std	Z+9, r1	; 0x09
    1dd2:	10 86       	std	Z+8, r1	; 0x08
    1dd4:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
    }

    traceRETURN_xStreamBufferSend( xReturn );

    return xReturn;
}
    1dd8:	c4 01       	movw	r24, r8
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	df 90       	pop	r13
    1df2:	cf 90       	pop	r12
    1df4:	bf 90       	pop	r11
    1df6:	af 90       	pop	r10
    1df8:	9f 90       	pop	r9
    1dfa:	8f 90       	pop	r8
    1dfc:	7f 90       	pop	r7
    1dfe:	6f 90       	pop	r6
    1e00:	5f 90       	pop	r5
    1e02:	4f 90       	pop	r4
    1e04:	3f 90       	pop	r3
    1e06:	2f 90       	pop	r2
    1e08:	08 95       	ret
    1e0a:	84 17       	cp	r24, r20
    1e0c:	95 07       	cpc	r25, r21
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <xStreamBufferSend+0xf8>
    1e10:	b0 cf       	rjmp	.-160    	; 0x1d72 <xStreamBufferSend+0x58>
    1e12:	4c 01       	movw	r8, r24
    1e14:	ae cf       	rjmp	.-164    	; 0x1d72 <xStreamBufferSend+0x58>
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    {
        vTaskSetTimeOutState( &xTimeOut );
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1e24:	c5 01       	movw	r24, r10
    1e26:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xStreamBufferSpacesAvailable>
    1e2a:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1e2c:	88 15       	cp	r24, r8
    1e2e:	99 05       	cpc	r25, r9
    1e30:	58 f5       	brcc	.+86     	; 0x1e88 <xStreamBufferSend+0x16e>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    1e32:	f5 01       	movw	r30, r10
    1e34:	67 85       	ldd	r22, Z+15	; 0x0f
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	0e 94 9a 1b 	call	0x3734	; 0x3734 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1e3e:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <xTaskGetCurrentTaskHandle>
    1e42:	f5 01       	movw	r30, r10
    1e44:	93 87       	std	Z+11, r25	; 0x0b
    1e46:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1e48:	0f 90       	pop	r0
    1e4a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1e4c:	cc 80       	ldd	r12, Y+4	; 0x04
    1e4e:	dd 80       	ldd	r13, Y+5	; 0x05
    1e50:	f1 2c       	mov	r15, r1
    1e52:	e1 2c       	mov	r14, r1
    1e54:	00 e0       	ldi	r16, 0x00	; 0
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    1e58:	98 01       	movw	r18, r16
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	ba 01       	movw	r22, r20
    1e60:	87 85       	ldd	r24, Z+15	; 0x0f
    1e62:	0e 94 50 18 	call	0x30a0	; 0x30a0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1e66:	f5 01       	movw	r30, r10
    1e68:	13 86       	std	Z+11, r1	; 0x0b
    1e6a:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1e6c:	be 01       	movw	r22, r28
    1e6e:	6c 5f       	subi	r22, 0xFC	; 252
    1e70:	7f 4f       	sbci	r23, 0xFF	; 255
    1e72:	ce 01       	movw	r24, r28
    1e74:	01 96       	adiw	r24, 0x01	; 1
    1e76:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <xTaskCheckForTimeOut>
    1e7a:	88 23       	and	r24, r24
    1e7c:	81 f2       	breq	.-96     	; 0x1e1e <xStreamBufferSend+0x104>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1e7e:	61 14       	cp	r6, r1
    1e80:	71 04       	cpc	r7, r1
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <xStreamBufferSend+0x16c>
    1e84:	7b cf       	rjmp	.-266    	; 0x1d7c <xStreamBufferSend+0x62>
    1e86:	7e cf       	rjmp	.-260    	; 0x1d84 <xStreamBufferSend+0x6a>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1e88:	0f 90       	pop	r0
    1e8a:	0f be       	out	0x3f, r0	; 63
                    break;
    1e8c:	f8 cf       	rjmp	.-16     	; 0x1e7e <xStreamBufferSend+0x164>

00001e8e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1e8e:	af 92       	push	r10
    1e90:	bf 92       	push	r11
    1e92:	cf 92       	push	r12
    1e94:	df 92       	push	r13
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	ec 01       	movw	r28, r24
    1ea4:	5b 01       	movw	r10, r22
    1ea6:	7a 01       	movw	r14, r20
    1ea8:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1eaa:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1eac:	8a 01       	movw	r16, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1eae:	80 ff       	sbrs	r24, 0
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <xStreamBufferSendFromISR+0x28>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1eb2:	0e 5f       	subi	r16, 0xFE	; 254
    1eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1ebc:	9c 01       	movw	r18, r24
    1ebe:	a7 01       	movw	r20, r14
    1ec0:	b5 01       	movw	r22, r10
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <prvWriteMessageToBuffer>
    1ec8:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1eca:	89 2b       	or	r24, r25
    1ecc:	c9 f0       	breq	.+50     	; 0x1f00 <xStreamBufferSendFromISR+0x72>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1ece:	ce 01       	movw	r24, r28
    1ed0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <prvBytesInBuffer>
    1ed4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ed6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ed8:	82 17       	cp	r24, r18
    1eda:	93 07       	cpc	r25, r19
    1edc:	88 f0       	brcs	.+34     	; 0x1f00 <xStreamBufferSendFromISR+0x72>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1ede:	88 85       	ldd	r24, Y+8	; 0x08
    1ee0:	99 85       	ldd	r25, Y+9	; 0x09
    1ee2:	89 2b       	or	r24, r25
    1ee4:	69 f0       	breq	.+26     	; 0x1f00 <xStreamBufferSendFromISR+0x72>
    1ee6:	88 85       	ldd	r24, Y+8	; 0x08
    1ee8:	99 85       	ldd	r25, Y+9	; 0x09
    1eea:	f1 2c       	mov	r15, r1
    1eec:	e1 2c       	mov	r14, r1
    1eee:	00 e0       	ldi	r16, 0x00	; 0
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	a9 01       	movw	r20, r18
    1ef6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ef8:	0e 94 e6 19 	call	0x33cc	; 0x33cc <xTaskGenericNotifyFromISR>
    1efc:	19 86       	std	Y+9, r1	; 0x09
    1efe:	18 86       	std	Y+8, r1	; 0x08

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
    traceRETURN_xStreamBufferSendFromISR( xReturn );

    return xReturn;
}
    1f00:	c5 01       	movw	r24, r10
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	bf 90       	pop	r11
    1f14:	af 90       	pop	r10
    1f16:	08 95       	ret

00001f18 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1f18:	6f 92       	push	r6
    1f1a:	7f 92       	push	r7
    1f1c:	8f 92       	push	r8
    1f1e:	9f 92       	push	r9
    1f20:	af 92       	push	r10
    1f22:	bf 92       	push	r11
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	ec 01       	movw	r28, r24
    1f36:	4b 01       	movw	r8, r22
    1f38:	3a 01       	movw	r6, r20
    1f3a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1f3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f3e:	80 fd       	sbrc	r24, 0
    1f40:	47 c0       	rjmp	.+142    	; 0x1fd0 <xStreamBufferReceive+0xb8>
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1f42:	b1 2c       	mov	r11, r1
    1f44:	a1 2c       	mov	r10, r1
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_BATCHING_BUFFER ) != ( uint8_t ) 0 )
    1f46:	82 ff       	sbrs	r24, 2
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <xStreamBufferReceive+0x36>
    {
        /* Force task to block if the batching buffer contains less bytes than
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    1f4a:	ae 80       	ldd	r10, Y+6	; 0x06
    1f4c:	bf 80       	ldd	r11, Y+7	; 0x07
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1f4e:	c1 14       	cp	r12, r1
    1f50:	d1 04       	cpc	r13, r1
    1f52:	29 f1       	breq	.+74     	; 0x1f9e <xStreamBufferReceive+0x86>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <prvBytesInBuffer>
    1f60:	8c 01       	movw	r16, r24
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. If this function was invoked by a stream batch buffer read
             * then xBytesToStoreMessageLength will be xTriggerLevelBytes value
             * for the buffer.*/
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1f62:	a8 16       	cp	r10, r24
    1f64:	b9 06       	cpc	r11, r25
    1f66:	48 f0       	brcs	.+18     	; 0x1f7a <xStreamBufferReceive+0x62>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    1f68:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	0e 94 9a 1b 	call	0x3734	; 0x3734 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1f72:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <xTaskGetCurrentTaskHandle>
    1f76:	99 87       	std	Y+9, r25	; 0x09
    1f78:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1f7a:	0f 90       	pop	r0
    1f7c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1f7e:	a0 16       	cp	r10, r16
    1f80:	b1 06       	cpc	r11, r17
    1f82:	50 f1       	brcs	.+84     	; 0x1fd8 <xStreamBufferReceive+0xc0>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1f84:	f1 2c       	mov	r15, r1
    1f86:	e1 2c       	mov	r14, r1
    1f88:	00 e0       	ldi	r16, 0x00	; 0
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	98 01       	movw	r18, r16
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	ba 01       	movw	r22, r20
    1f94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f96:	0e 94 50 18 	call	0x30a0	; 0x30a0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1f9a:	19 86       	std	Y+9, r1	; 0x09
    1f9c:	18 86       	std	Y+8, r1	; 0x08
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <prvBytesInBuffer>
    1fa4:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1fa6:	a8 16       	cp	r10, r24
    1fa8:	b9 06       	cpc	r11, r25
    1faa:	b0 f0       	brcs	.+44     	; 0x1fd8 <xStreamBufferReceive+0xc0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1fac:	b1 2c       	mov	r11, r1
    1fae:	a1 2c       	mov	r10, r1
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
}
    1fb0:	c5 01       	movw	r24, r10
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	ff 90       	pop	r15
    1fbc:	ef 90       	pop	r14
    1fbe:	df 90       	pop	r13
    1fc0:	cf 90       	pop	r12
    1fc2:	bf 90       	pop	r11
    1fc4:	af 90       	pop	r10
    1fc6:	9f 90       	pop	r9
    1fc8:	8f 90       	pop	r8
    1fca:	7f 90       	pop	r7
    1fcc:	6f 90       	pop	r6
    1fce:	08 95       	ret
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	a8 2e       	mov	r10, r24
    1fd4:	b1 2c       	mov	r11, r1
    1fd6:	bb cf       	rjmp	.-138    	; 0x1f4e <xStreamBufferReceive+0x36>
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    1fd8:	98 01       	movw	r18, r16
    1fda:	a3 01       	movw	r20, r6
    1fdc:	b4 01       	movw	r22, r8
    1fde:	ce 01       	movw	r24, r28
    1fe0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <prvReadMessageFromBuffer>
    1fe4:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1fe6:	89 2b       	or	r24, r25
    1fe8:	09 f3       	breq	.-62     	; 0x1fac <xStreamBufferReceive+0x94>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            prvRECEIVE_COMPLETED( xStreamBuffer );
    1fea:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
    1fee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ff0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ff2:	89 2b       	or	r24, r25
    1ff4:	69 f0       	breq	.+26     	; 0x2010 <xStreamBufferReceive+0xf8>
    1ff6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ff8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ffa:	f1 2c       	mov	r15, r1
    1ffc:	e1 2c       	mov	r14, r1
    1ffe:	00 e0       	ldi	r16, 0x00	; 0
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	a9 01       	movw	r20, r18
    2006:	6f 85       	ldd	r22, Y+15	; 0x0f
    2008:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskGenericNotify>
    200c:	1b 86       	std	Y+11, r1	; 0x0b
    200e:	1a 86       	std	Y+10, r1	; 0x0a
    2010:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
    2014:	cd cf       	rjmp	.-102    	; 0x1fb0 <xStreamBufferReceive+0x98>

00002016 <xStreamBufferNextMessageLengthBytes>:
}
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	00 d0       	rcall	.+0      	; 0x2020 <xStreamBufferNextMessageLengthBytes+0xa>
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    traceENTER_xStreamBufferNextMessageLengthBytes( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2024:	fc 01       	movw	r30, r24
    2026:	26 85       	ldd	r18, Z+14	; 0x0e
    2028:	20 fd       	sbrc	r18, 0
    202a:	09 c0       	rjmp	.+18     	; 0x203e <xStreamBufferNextMessageLengthBytes+0x28>
            xReturn = 0;
        }
    }
    else
    {
        xReturn = 0;
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	08 95       	ret
    203e:	8c 01       	movw	r16, r24
    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2040:	0e 94 ba 0c 	call	0x1974	; 0x1974 <prvBytesInBuffer>

        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    2044:	03 97       	sbiw	r24, 0x03	; 3
    2046:	90 f3       	brcs	.-28     	; 0x202c <xStreamBufferNextMessageLengthBytes+0x16>
        {
            /* The number of bytes available is greater than the number of bytes
             * required to hold the length of the next message, so another message
             * is available. */
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
    2048:	f8 01       	movw	r30, r16
    204a:	20 81       	ld	r18, Z
    204c:	31 81       	ldd	r19, Z+1	; 0x01
    204e:	42 e0       	ldi	r20, 0x02	; 2
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	be 01       	movw	r22, r28
    2054:	6f 5f       	subi	r22, 0xFF	; 255
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	c8 01       	movw	r24, r16
    205a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
        xReturn = 0;
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
    2062:	e6 cf       	rjmp	.-52     	; 0x2030 <xStreamBufferNextMessageLengthBytes+0x1a>

00002064 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    2064:	af 92       	push	r10
    2066:	bf 92       	push	r11
    2068:	cf 92       	push	r12
    206a:	df 92       	push	r13
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	ec 01       	movw	r28, r24
    207a:	5b 01       	movw	r10, r22
    207c:	7a 01       	movw	r14, r20
    207e:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2080:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2082:	10 e0       	ldi	r17, 0x00	; 0
    2084:	00 e0       	ldi	r16, 0x00	; 0
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2086:	80 ff       	sbrs	r24, 0
    2088:	02 c0       	rjmp	.+4      	; 0x208e <xStreamBufferReceiveFromISR+0x2a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    208a:	02 e0       	ldi	r16, 0x02	; 2
    208c:	10 e0       	ldi	r17, 0x00	; 0
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    208e:	ce 01       	movw	r24, r28
    2090:	0e 94 ba 0c 	call	0x1974	; 0x1974 <prvBytesInBuffer>
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2094:	08 17       	cp	r16, r24
    2096:	19 07       	cpc	r17, r25
    2098:	70 f0       	brcs	.+28     	; 0x20b6 <xStreamBufferReceiveFromISR+0x52>
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    209a:	b1 2c       	mov	r11, r1
    209c:	a1 2c       	mov	r10, r1

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
}
    209e:	c5 01       	movw	r24, r10
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	df 90       	pop	r13
    20ae:	cf 90       	pop	r12
    20b0:	bf 90       	pop	r11
    20b2:	af 90       	pop	r10
    20b4:	08 95       	ret
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    20b6:	9c 01       	movw	r18, r24
    20b8:	a7 01       	movw	r20, r14
    20ba:	b5 01       	movw	r22, r10
    20bc:	ce 01       	movw	r24, r28
    20be:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <prvReadMessageFromBuffer>
    20c2:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    20c4:	89 2b       	or	r24, r25
    20c6:	49 f3       	breq	.-46     	; 0x209a <xStreamBufferReceiveFromISR+0x36>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    20c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    20cc:	89 2b       	or	r24, r25
    20ce:	39 f3       	breq	.-50     	; 0x209e <xStreamBufferReceiveFromISR+0x3a>
    20d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d4:	f1 2c       	mov	r15, r1
    20d6:	e1 2c       	mov	r14, r1
    20d8:	00 e0       	ldi	r16, 0x00	; 0
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	a9 01       	movw	r20, r18
    20e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    20e2:	0e 94 e6 19 	call	0x33cc	; 0x33cc <xTaskGenericNotifyFromISR>
    20e6:	1b 86       	std	Y+11, r1	; 0x0b
    20e8:	1a 86       	std	Y+10, r1	; 0x0a
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
    20ea:	d9 cf       	rjmp	.-78     	; 0x209e <xStreamBufferReceiveFromISR+0x3a>

000020ec <xStreamBufferIsEmpty>:
    traceENTER_xStreamBufferIsEmpty( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* True if no bytes are available. */
    xTail = pxStreamBuffer->xTail;
    20ec:	fc 01       	movw	r30, r24
    20ee:	20 81       	ld	r18, Z
    20f0:	31 81       	ldd	r19, Z+1	; 0x01

    if( pxStreamBuffer->xHead == xTail )
    20f2:	42 81       	ldd	r20, Z+2	; 0x02
    20f4:	53 81       	ldd	r21, Z+3	; 0x03
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	42 17       	cp	r20, r18
    20fa:	53 07       	cpc	r21, r19
    20fc:	09 f0       	breq	.+2      	; 0x2100 <xStreamBufferIsEmpty+0x14>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsEmpty( xReturn );

    return xReturn;
}
    2100:	08 95       	ret

00002102 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2106:	fc 01       	movw	r30, r24
    2108:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    210a:	d0 e0       	ldi	r29, 0x00	; 0
    210c:	c0 e0       	ldi	r28, 0x00	; 0

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    210e:	20 ff       	sbrs	r18, 0
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <xStreamBufferIsFull+0x14>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2112:	c2 e0       	ldi	r28, 0x02	; 2
    2114:	d0 e0       	ldi	r29, 0x00	; 0
    {
        xBytesToStoreMessageLength = 0;
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    2116:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <xStreamBufferSpacesAvailable>
    211a:	21 e0       	ldi	r18, 0x01	; 1
    211c:	c8 17       	cp	r28, r24
    211e:	d9 07       	cpc	r29, r25
    2120:	08 f4       	brcc	.+2      	; 0x2124 <xStreamBufferIsFull+0x22>
    2122:	20 e0       	ldi	r18, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsFull( xReturn );

    return xReturn;
}
    2124:	82 2f       	mov	r24, r18
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	08 95       	ret

0000212c <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
    212c:	cf 92       	push	r12
    212e:	df 92       	push	r13
    2130:	ef 92       	push	r14
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    213a:	fc 01       	movw	r30, r24
    213c:	20 85       	ldd	r18, Z+8	; 0x08
    213e:	31 85       	ldd	r19, Z+9	; 0x09
    2140:	23 2b       	or	r18, r19
    2142:	c1 f0       	breq	.+48     	; 0x2174 <xStreamBufferSendCompletedFromISR+0x48>
    2144:	6b 01       	movw	r12, r22
    2146:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    2148:	80 85       	ldd	r24, Z+8	; 0x08
    214a:	91 85       	ldd	r25, Z+9	; 0x09
    214c:	f1 2c       	mov	r15, r1
    214e:	e1 2c       	mov	r14, r1
    2150:	00 e0       	ldi	r16, 0x00	; 0
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	a9 01       	movw	r20, r18
    2158:	67 85       	ldd	r22, Z+15	; 0x0f
    215a:	0e 94 e6 19 	call	0x33cc	; 0x33cc <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    215e:	19 86       	std	Y+9, r1	; 0x09
    2160:	18 86       	std	Y+8, r1	; 0x08
            xReturn = pdTRUE;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
}
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	0f 91       	pop	r16
    216a:	ff 90       	pop	r15
    216c:	ef 90       	pop	r14
    216e:	df 90       	pop	r13
    2170:	cf 90       	pop	r12
    2172:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2174:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
    2176:	f6 cf       	rjmp	.-20     	; 0x2164 <xStreamBufferSendCompletedFromISR+0x38>

00002178 <xStreamBufferReceiveCompletedFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
    2178:	cf 92       	push	r12
    217a:	df 92       	push	r13
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    2186:	fc 01       	movw	r30, r24
    2188:	22 85       	ldd	r18, Z+10	; 0x0a
    218a:	33 85       	ldd	r19, Z+11	; 0x0b
    218c:	23 2b       	or	r18, r19
    218e:	c1 f0       	breq	.+48     	; 0x21c0 <xStreamBufferReceiveCompletedFromISR+0x48>
    2190:	6b 01       	movw	r12, r22
    2192:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    2194:	82 85       	ldd	r24, Z+10	; 0x0a
    2196:	93 85       	ldd	r25, Z+11	; 0x0b
    2198:	f1 2c       	mov	r15, r1
    219a:	e1 2c       	mov	r14, r1
    219c:	00 e0       	ldi	r16, 0x00	; 0
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	a9 01       	movw	r20, r18
    21a4:	67 85       	ldd	r22, Z+15	; 0x0f
    21a6:	0e 94 e6 19 	call	0x33cc	; 0x33cc <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    21aa:	1b 86       	std	Y+11, r1	; 0x0b
    21ac:	1a 86       	std	Y+10, r1	; 0x0a
            xReturn = pdTRUE;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
}
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
    21c2:	f6 cf       	rjmp	.-20     	; 0x21b0 <xStreamBufferReceiveCompletedFromISR+0x38>

000021c4 <uxStreamBufferGetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer );

    traceRETURN_uxStreamBufferGetStreamBufferNotificationIndex( pxStreamBuffer->uxNotificationIndex );

    return pxStreamBuffer->uxNotificationIndex;
}
    21c4:	fc 01       	movw	r30, r24
    21c6:	87 85       	ldd	r24, Z+15	; 0x0f
    21c8:	08 95       	ret

000021ca <vStreamBufferSetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );

    /* Check that the task notification index is valid. */
    configASSERT( uxNotificationIndex < configTASK_NOTIFICATION_ARRAY_ENTRIES );

    pxStreamBuffer->uxNotificationIndex = uxNotificationIndex;
    21ca:	fc 01       	movw	r30, r24
    21cc:	67 87       	std	Z+15, r22	; 0x0f

    traceRETURN_vStreamBufferSetStreamBufferNotificationIndex();
}
    21ce:	08 95       	ret

000021d0 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    21d0:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <pxDelayedTaskList>
    21d4:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <pxDelayedTaskList+0x1>
    21d8:	80 81       	ld	r24, Z
    21da:	81 11       	cpse	r24, r1
    21dc:	07 c0       	rjmp	.+14     	; 0x21ec <prvResetNextTaskUnblockTime+0x1c>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
    21de:	8f ef       	ldi	r24, 0xFF	; 255
    21e0:	9f ef       	ldi	r25, 0xFF	; 255
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    21e2:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <xNextTaskUnblockTime+0x1>
    21e6:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <xNextTaskUnblockTime>
    }
}
    21ea:	08 95       	ret
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    21ec:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <pxDelayedTaskList>
    21f0:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <pxDelayedTaskList+0x1>
    21f4:	05 80       	ldd	r0, Z+5	; 0x05
    21f6:	f6 81       	ldd	r31, Z+6	; 0x06
    21f8:	e0 2d       	mov	r30, r0
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	f1 cf       	rjmp	.-30     	; 0x21e2 <prvResetNextTaskUnblockTime+0x12>

00002200 <prvAddCurrentTaskToDelayedList.isra.2>:
    }

#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	ec 01       	movw	r28, r24
                                            const BaseType_t xCanBlockIndefinitely )
{
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    2212:	c0 90 40 07 	lds	r12, 0x0740	; 0x800740 <xTickCount>
    2216:	d0 90 41 07 	lds	r13, 0x0741	; 0x800741 <xTickCount+0x1>
    List_t * const pxDelayedList = pxDelayedTaskList;
    221a:	00 91 58 07 	lds	r16, 0x0758	; 0x800758 <pxDelayedTaskList>
    221e:	10 91 59 07 	lds	r17, 0x0759	; 0x800759 <pxDelayedTaskList+0x1>
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
    2222:	e0 90 56 07 	lds	r14, 0x0756	; 0x800756 <pxOverflowDelayedTaskList>
    2226:	f0 90 57 07 	lds	r15, 0x0757	; 0x800757 <pxOverflowDelayedTaskList+0x1>
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    222a:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    222e:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2232:	02 96       	adiw	r24, 0x02	; 2
    2234:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
    2238:	cc 0d       	add	r28, r12
    223a:	dd 1d       	adc	r29, r13

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    223c:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    2240:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2244:	d3 83       	std	Z+3, r29	; 0x03
    2246:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2248:	60 91 90 07 	lds	r22, 0x0790	; 0x800790 <pxCurrentTCB>
    224c:	70 91 91 07 	lds	r23, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2250:	6e 5f       	subi	r22, 0xFE	; 254
    2252:	7f 4f       	sbci	r23, 0xFF	; 255
        xTimeToWake = xConstTickCount + xTicksToWait;

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );

        if( xTimeToWake < xConstTickCount )
    2254:	cc 15       	cp	r28, r12
    2256:	dd 05       	cpc	r29, r13
    2258:	58 f4       	brcc	.+22     	; 0x2270 <prvAddCurrentTaskToDelayedList.isra.2+0x70>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    225a:	c7 01       	movw	r24, r14

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	df 90       	pop	r13
    226a:	cf 90       	pop	r12

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    226c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <vListInsert>
        }
        else
        {
            traceMOVED_TASK_TO_DELAYED_LIST();
            /* The wake time has not overflowed, so the current block list is used. */
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2270:	c8 01       	movw	r24, r16
    2272:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <vListInsert>

            /* If the task entering the blocked state was placed at the head of the
             * list of blocked tasks then xNextTaskUnblockTime needs to be updated
             * too. */
            if( xTimeToWake < xNextTaskUnblockTime )
    2276:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <xNextTaskUnblockTime>
    227a:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <xNextTaskUnblockTime+0x1>
    227e:	c8 17       	cp	r28, r24
    2280:	d9 07       	cpc	r29, r25
    2282:	20 f4       	brcc	.+8      	; 0x228c <prvAddCurrentTaskToDelayedList.isra.2+0x8c>
            {
                xNextTaskUnblockTime = xTimeToWake;
    2284:	d0 93 38 07 	sts	0x0738, r29	; 0x800738 <xNextTaskUnblockTime+0x1>
    2288:	c0 93 37 07 	sts	0x0737, r28	; 0x800737 <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	df 90       	pop	r13
    229a:	cf 90       	pop	r12
    229c:	08 95       	ret

0000229e <prvCheckTasksWaitingTermination>:
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    22a2:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxDeletedTasksWaitingCleanUp>
    22a6:	81 11       	cpse	r24, r1
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <prvCheckTasksWaitingTermination+0x12>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	08 95       	ret
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	0f 92       	push	r0
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    22b6:	e0 91 49 07 	lds	r30, 0x0749	; 0x800749 <xTasksWaitingTermination+0x5>
    22ba:	f0 91 4a 07 	lds	r31, 0x074A	; 0x80074a <xTasksWaitingTermination+0x6>
    22be:	c6 81       	ldd	r28, Z+6	; 0x06
    22c0:	d7 81       	ldd	r29, Z+7	; 0x07
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    22c2:	ce 01       	movw	r24, r28
    22c4:	02 96       	adiw	r24, 0x02	; 2
    22c6:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
                        --uxCurrentNumberOfTasks;
    22ca:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxCurrentNumberOfTasks>
    22ce:	81 50       	subi	r24, 0x01	; 1
    22d0:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxCurrentNumberOfTasks>
                        --uxDeletedTasksWaitingCleanUp;
    22d4:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxDeletedTasksWaitingCleanUp>
    22d8:	81 50       	subi	r24, 0x01	; 1
    22da:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <uxDeletedTasksWaitingCleanUp>
                    }
                }
                taskEXIT_CRITICAL();
    22de:	0f 90       	pop	r0
    22e0:	0f be       	out	0x3f, r0	; 63

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	98 8d       	ldd	r25, Y+24	; 0x18
    22e6:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortFree>
            vPortFree( pxTCB );
    22ea:	ce 01       	movw	r24, r28
    22ec:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortFree>
    22f0:	d8 cf       	rjmp	.-80     	; 0x22a2 <prvCheckTasksWaitingTermination+0x4>

000022f2 <prvIdleTask>:

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
    22f2:	0e 94 4f 11 	call	0x229e	; 0x229e <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
    22f6:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <pxReadyTasksLists>
    22fa:	82 30       	cpi	r24, 0x02	; 2
    22fc:	d0 f3       	brcs	.-12     	; 0x22f2 <prvIdleTask>
            {
                taskYIELD();
    22fe:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
    2302:	f7 cf       	rjmp	.-18     	; 0x22f2 <prvIdleTask>

00002304 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
    2304:	4f 92       	push	r4
    2306:	5f 92       	push	r5
    2308:	6f 92       	push	r6
    230a:	7f 92       	push	r7
    230c:	8f 92       	push	r8
    230e:	9f 92       	push	r9
    2310:	af 92       	push	r10
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	4c 01       	movw	r8, r24
    2324:	5b 01       	movw	r10, r22
    2326:	29 01       	movw	r4, r18

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
    2328:	c4 2e       	mov	r12, r20
    232a:	d1 2c       	mov	r13, r1
    232c:	c6 01       	movw	r24, r12
    232e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <pvPortMalloc>
    2332:	3c 01       	movw	r6, r24

            if( pxStack != NULL )
    2334:	89 2b       	or	r24, r25
    2336:	09 f4       	brne	.+2      	; 0x233a <xTaskCreate+0x36>
    2338:	c9 c0       	rjmp	.+402    	; 0x24cc <xTaskCreate+0x1c8>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    233a:	86 e2       	ldi	r24, 0x26	; 38
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <pvPortMalloc>
    2342:	ec 01       	movw	r28, r24

                if( pxNewTCB != NULL )
    2344:	89 2b       	or	r24, r25
    2346:	09 f4       	brne	.+2      	; 0x234a <xTaskCreate+0x46>
    2348:	be c0       	rjmp	.+380    	; 0x24c6 <xTaskCreate+0x1c2>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
    234a:	86 e2       	ldi	r24, 0x26	; 38
    234c:	de 01       	movw	r26, r28
    234e:	1d 92       	st	X+, r1
    2350:	8a 95       	dec	r24
    2352:	e9 f7       	brne	.-6      	; 0x234e <xTaskCreate+0x4a>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
    2354:	78 8e       	std	Y+24, r7	; 0x18
    2356:	6f 8a       	std	Y+23, r6	; 0x17
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
    2358:	b1 e0       	ldi	r27, 0x01	; 1
    235a:	cb 1a       	sub	r12, r27
    235c:	d1 08       	sbc	r13, r1
    235e:	c6 0c       	add	r12, r6
    2360:	d7 1c       	adc	r13, r7
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    2362:	a1 14       	cp	r10, r1
    2364:	b1 04       	cpc	r11, r1
    2366:	09 f0       	breq	.+2      	; 0x236a <xTaskCreate+0x66>
    2368:	c2 c0       	rjmp	.+388    	; 0x24ee <xTaskCreate+0x1ea>
    236a:	04 30       	cpi	r16, 0x04	; 4
    236c:	08 f0       	brcs	.+2      	; 0x2370 <xTaskCreate+0x6c>
    236e:	03 e0       	ldi	r16, 0x03	; 3
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
    2370:	0e 8b       	std	Y+22, r16	; 0x16
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2372:	5e 01       	movw	r10, r28
    2374:	b2 e0       	ldi	r27, 0x02	; 2
    2376:	ab 0e       	add	r10, r27
    2378:	b1 1c       	adc	r11, r1
    237a:	c5 01       	movw	r24, r10
    237c:	0e 94 d6 05 	call	0xbac	; 0xbac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2380:	ce 01       	movw	r24, r28
    2382:	0c 96       	adiw	r24, 0x0c	; 12
    2384:	0e 94 d6 05 	call	0xbac	; 0xbac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2388:	d9 87       	std	Y+9, r29	; 0x09
    238a:	c8 87       	std	Y+8, r28	; 0x08

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
    238c:	84 e0       	ldi	r24, 0x04	; 4
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	80 1b       	sub	r24, r16
    2392:	91 09       	sbc	r25, r1
    2394:	9d 87       	std	Y+13, r25	; 0x0d
    2396:	8c 87       	std	Y+12, r24	; 0x0c
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2398:	db 8b       	std	Y+19, r29	; 0x13
    239a:	ca 8b       	std	Y+18, r28	; 0x12
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    239c:	a2 01       	movw	r20, r4
    239e:	b4 01       	movw	r22, r8
    23a0:	c6 01       	movw	r24, r12
    23a2:	0e 94 53 06 	call	0xca6	; 0xca6 <pxPortInitialiseStack>
    23a6:	99 83       	std	Y+1, r25	; 0x01
    23a8:	88 83       	st	Y, r24
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
    23aa:	e1 14       	cp	r14, r1
    23ac:	f1 04       	cpc	r15, r1
    23ae:	19 f0       	breq	.+6      	; 0x23b6 <xTaskCreate+0xb2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    23b0:	f7 01       	movw	r30, r14
    23b2:	d1 83       	std	Z+1, r29	; 0x01
    23b4:	c0 83       	st	Z, r28

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	0f 92       	push	r0
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
    23bc:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxCurrentNumberOfTasks>
    23c0:	8f 5f       	subi	r24, 0xFF	; 255
    23c2:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxCurrentNumberOfTasks>

            if( pxCurrentTCB == NULL )
    23c6:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    23ca:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    23ce:	89 2b       	or	r24, r25
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <xTaskCreate+0xd0>
    23d2:	a3 c0       	rjmp	.+326    	; 0x251a <xTaskCreate+0x216>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
    23d4:	d0 93 91 07 	sts	0x0791, r29	; 0x800791 <pxCurrentTCB+0x1>
    23d8:	c0 93 90 07 	sts	0x0790, r28	; 0x800790 <pxCurrentTCB>

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    23dc:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxCurrentNumberOfTasks>
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	61 f5       	brne	.+88     	; 0x243c <xTaskCreate+0x138>
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    23e4:	8c e6       	ldi	r24, 0x6C	; 108
    23e6:	97 e0       	ldi	r25, 0x07	; 7
    23e8:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
    23ec:	85 e7       	ldi	r24, 0x75	; 117
    23ee:	97 e0       	ldi	r25, 0x07	; 7
    23f0:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
    23f4:	8e e7       	ldi	r24, 0x7E	; 126
    23f6:	97 e0       	ldi	r25, 0x07	; 7
    23f8:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
    23fc:	87 e8       	ldi	r24, 0x87	; 135
    23fe:	97 e0       	ldi	r25, 0x07	; 7
    2400:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
    }

    vListInitialise( &xDelayedTaskList1 );
    2404:	83 e6       	ldi	r24, 0x63	; 99
    2406:	97 e0       	ldi	r25, 0x07	; 7
    2408:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
    240c:	8a e5       	ldi	r24, 0x5A	; 90
    240e:	97 e0       	ldi	r25, 0x07	; 7
    2410:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
    vListInitialise( &xPendingReadyList );
    2414:	8d e4       	ldi	r24, 0x4D	; 77
    2416:	97 e0       	ldi	r25, 0x07	; 7
    2418:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
    241c:	84 e4       	ldi	r24, 0x44	; 68
    241e:	97 e0       	ldi	r25, 0x07	; 7
    2420:	0e 94 c8 05 	call	0xb90	; 0xb90 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
    2424:	83 e6       	ldi	r24, 0x63	; 99
    2426:	97 e0       	ldi	r25, 0x07	; 7
    2428:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <pxDelayedTaskList+0x1>
    242c:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <pxDelayedTaskList>
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2430:	8a e5       	ldi	r24, 0x5A	; 90
    2432:	97 e0       	ldi	r25, 0x07	; 7
    2434:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <pxOverflowDelayedTaskList+0x1>
    2438:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <pxOverflowDelayedTaskList>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
    243c:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <uxTaskNumber>
    2440:	8f 5f       	subi	r24, 0xFF	; 255
    2442:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <uxTaskNumber>
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
    2446:	ae 89       	ldd	r26, Y+22	; 0x16
    2448:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxTopReadyPriority>
    244c:	8a 17       	cp	r24, r26
    244e:	10 f4       	brcc	.+4      	; 0x2454 <xTaskCreate+0x150>
    2450:	a0 93 3f 07 	sts	0x073F, r26	; 0x80073f <uxTopReadyPriority>
    2454:	29 e0       	ldi	r18, 0x09	; 9
    2456:	2a 9f       	mul	r18, r26
    2458:	d0 01       	movw	r26, r0
    245a:	11 24       	eor	r1, r1
    245c:	a4 59       	subi	r26, 0x94	; 148
    245e:	b8 4f       	sbci	r27, 0xF8	; 248
    2460:	11 96       	adiw	r26, 0x01	; 1
    2462:	0d 90       	ld	r0, X+
    2464:	bc 91       	ld	r27, X
    2466:	a0 2d       	mov	r26, r0
    2468:	bd 83       	std	Y+5, r27	; 0x05
    246a:	ac 83       	std	Y+4, r26	; 0x04
    246c:	14 96       	adiw	r26, 0x04	; 4
    246e:	8d 91       	ld	r24, X+
    2470:	9c 91       	ld	r25, X
    2472:	15 97       	sbiw	r26, 0x05	; 5
    2474:	9f 83       	std	Y+7, r25	; 0x07
    2476:	8e 83       	std	Y+6, r24	; 0x06
    2478:	14 96       	adiw	r26, 0x04	; 4
    247a:	8d 91       	ld	r24, X+
    247c:	9c 91       	ld	r25, X
    247e:	15 97       	sbiw	r26, 0x05	; 5
    2480:	fc 01       	movw	r30, r24
    2482:	b3 82       	std	Z+3, r11	; 0x03
    2484:	a2 82       	std	Z+2, r10	; 0x02
    2486:	15 96       	adiw	r26, 0x05	; 5
    2488:	bc 92       	st	X, r11
    248a:	ae 92       	st	-X, r10
    248c:	14 97       	sbiw	r26, 0x04	; 4
    248e:	9e 89       	ldd	r25, Y+22	; 0x16
    2490:	92 9f       	mul	r25, r18
    2492:	f0 01       	movw	r30, r0
    2494:	11 24       	eor	r1, r1
    2496:	e4 59       	subi	r30, 0x94	; 148
    2498:	f8 4f       	sbci	r31, 0xF8	; 248
    249a:	fb 87       	std	Y+11, r31	; 0x0b
    249c:	ea 87       	std	Y+10, r30	; 0x0a
    249e:	80 81       	ld	r24, Z
    24a0:	8f 5f       	subi	r24, 0xFF	; 255
    24a2:	80 83       	st	Z, r24

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
    24a4:	0f 90       	pop	r0
    24a6:	0f be       	out	0x3f, r0	; 63

        if( xSchedulerRunning != pdFALSE )
    24a8:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xSchedulerRunning>
    24ac:	88 23       	and	r24, r24
    24ae:	49 f0       	breq	.+18     	; 0x24c2 <xTaskCreate+0x1be>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
    24b0:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    24b4:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    24b8:	86 89       	ldd	r24, Z+22	; 0x16
    24ba:	89 17       	cp	r24, r25
    24bc:	10 f4       	brcc	.+4      	; 0x24c2 <xTaskCreate+0x1be>
    24be:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <xTaskCreate+0x1ca>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
    24c6:	c3 01       	movw	r24, r6
    24c8:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortFree>
            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24cc:	8f ef       	ldi	r24, 0xFF	; 255
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    }
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	df 90       	pop	r13
    24da:	cf 90       	pop	r12
    24dc:	bf 90       	pop	r11
    24de:	af 90       	pop	r10
    24e0:	9f 90       	pop	r9
    24e2:	8f 90       	pop	r8
    24e4:	7f 90       	pop	r7
    24e6:	6f 90       	pop	r6
    24e8:	5f 90       	pop	r5
    24ea:	4f 90       	pop	r4
    24ec:	08 95       	ret
    24ee:	f5 01       	movw	r30, r10
    24f0:	ae 01       	movw	r20, r28
    24f2:	47 5e       	subi	r20, 0xE7	; 231
    24f4:	5f 4f       	sbci	r21, 0xFF	; 255
    24f6:	c5 01       	movw	r24, r10
    24f8:	08 96       	adiw	r24, 0x08	; 8
    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    24fa:	21 91       	ld	r18, Z+
    24fc:	da 01       	movw	r26, r20
    24fe:	2d 93       	st	X+, r18
    2500:	ad 01       	movw	r20, r26

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
    2502:	9f 01       	movw	r18, r30
    2504:	21 50       	subi	r18, 0x01	; 1
    2506:	31 09       	sbc	r19, r1
    2508:	d9 01       	movw	r26, r18
    250a:	2c 91       	ld	r18, X
    250c:	22 23       	and	r18, r18
    250e:	19 f0       	breq	.+6      	; 0x2516 <xTaskCreate+0x212>
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2510:	e8 17       	cp	r30, r24
    2512:	f9 07       	cpc	r31, r25
    2514:	91 f7       	brne	.-28     	; 0x24fa <xTaskCreate+0x1f6>
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
    2516:	18 a2       	std	Y+32, r1	; 0x20
    2518:	28 cf       	rjmp	.-432    	; 0x236a <xTaskCreate+0x66>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
    251a:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xSchedulerRunning>
    251e:	81 11       	cpse	r24, r1
    2520:	8d cf       	rjmp	.-230    	; 0x243c <xTaskCreate+0x138>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2522:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    2526:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    252a:	9e 89       	ldd	r25, Y+22	; 0x16
    252c:	86 89       	ldd	r24, Z+22	; 0x16
    252e:	98 17       	cp	r25, r24
    2530:	08 f4       	brcc	.+2      	; 0x2534 <xTaskCreate+0x230>
    2532:	84 cf       	rjmp	.-248    	; 0x243c <xTaskCreate+0x138>
                    {
                        pxCurrentTCB = pxNewTCB;
    2534:	d0 93 91 07 	sts	0x0791, r29	; 0x800791 <pxCurrentTCB+0x1>
    2538:	c0 93 90 07 	sts	0x0790, r28	; 0x800790 <pxCurrentTCB>
    253c:	7f cf       	rjmp	.-258    	; 0x243c <xTaskCreate+0x138>

0000253e <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	ec 01       	movw	r28, r24
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	0f 92       	push	r0
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    254e:	89 2b       	or	r24, r25
    2550:	21 f4       	brne	.+8      	; 0x255a <vTaskDelete+0x1c>
    2552:	c0 91 90 07 	lds	r28, 0x0790	; 0x800790 <pxCurrentTCB>
    2556:	d0 91 91 07 	lds	r29, 0x0791	; 0x800791 <pxCurrentTCB+0x1>

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    255a:	8e 01       	movw	r16, r28
    255c:	0e 5f       	subi	r16, 0xFE	; 254
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	c8 01       	movw	r24, r16
    2562:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2566:	8c 89       	ldd	r24, Y+20	; 0x14
    2568:	9d 89       	ldd	r25, Y+21	; 0x15
    256a:	89 2b       	or	r24, r25
    256c:	21 f0       	breq	.+8      	; 0x2576 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    256e:	ce 01       	movw	r24, r28
    2570:	0c 96       	adiw	r24, 0x0c	; 12
    2572:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
    2576:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <uxTaskNumber>
    257a:	8f 5f       	subi	r24, 0xFF	; 255
    257c:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <uxTaskNumber>

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
    2580:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    2584:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
    2588:	20 91 3e 07 	lds	r18, 0x073E	; 0x80073e <xSchedulerRunning>
    258c:	22 23       	and	r18, r18
    258e:	59 f1       	breq	.+86     	; 0x25e6 <vTaskDelete+0xa8>
    2590:	8c 17       	cp	r24, r28
    2592:	9d 07       	cpc	r25, r29
    2594:	41 f5       	brne	.+80     	; 0x25e6 <vTaskDelete+0xa8>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    2596:	b8 01       	movw	r22, r16
    2598:	84 e4       	ldi	r24, 0x44	; 68
    259a:	97 e0       	ldi	r25, 0x07	; 7
    259c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
    25a0:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxDeletedTasksWaitingCleanUp>
    25a4:	8f 5f       	subi	r24, 0xFF	; 255
    25a6:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <uxDeletedTasksWaitingCleanUp>
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
            }
        }
        taskEXIT_CRITICAL();
    25ac:	0f 90       	pop	r0
    25ae:	0f be       	out	0x3f, r0	; 63

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	39 f0       	breq	.+14     	; 0x25c2 <vTaskDelete+0x84>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    25b4:	8f 89       	ldd	r24, Y+23	; 0x17
    25b6:	98 8d       	ldd	r25, Y+24	; 0x18
    25b8:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortFree>
            vPortFree( pxTCB );
    25bc:	ce 01       	movw	r24, r28
    25be:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortFree>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
    25c2:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xSchedulerRunning>
    25c6:	88 23       	and	r24, r24
    25c8:	49 f0       	breq	.+18     	; 0x25dc <vTaskDelete+0x9e>
            {
                if( pxTCB == pxCurrentTCB )
    25ca:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    25ce:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    25d2:	8c 17       	cp	r24, r28
    25d4:	9d 07       	cpc	r25, r29
    25d6:	11 f4       	brne	.+4      	; 0x25dc <vTaskDelete+0x9e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
                    taskYIELD_WITHIN_API();
    25d8:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
    25e6:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxCurrentNumberOfTasks>
    25ea:	81 50       	subi	r24, 0x01	; 1
    25ec:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxCurrentNumberOfTasks>
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
    25f0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <prvResetNextTaskUnblockTime>
#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	da cf       	rjmp	.-76     	; 0x25ac <vTaskDelete+0x6e>

000025f8 <vTaskStartScheduler>:
}

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    25f8:	ef 92       	push	r14
    25fa:	ff 92       	push	r15
    25fc:	0f 93       	push	r16
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	28 97       	sbiw	r28, 0x08	; 8
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	a1 e6       	ldi	r26, 0x61	; 97
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	fe 01       	movw	r30, r28
    2618:	31 96       	adiw	r30, 0x01	; 1
    261a:	29 e6       	ldi	r18, 0x69	; 105
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	bf 01       	movw	r22, r30
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
    2620:	8d 91       	ld	r24, X+
    2622:	81 93       	st	Z+, r24

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
    2624:	88 23       	and	r24, r24
    2626:	19 f0       	breq	.+6      	; 0x262e <vTaskStartScheduler+0x36>
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    2628:	2a 17       	cp	r18, r26
    262a:	3b 07       	cpc	r19, r27
    262c:	c9 f7       	brne	.-14     	; 0x2620 <vTaskStartScheduler+0x28>
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
    262e:	85 e3       	ldi	r24, 0x35	; 53
    2630:	e8 2e       	mov	r14, r24
    2632:	87 e0       	ldi	r24, 0x07	; 7
    2634:	f8 2e       	mov	r15, r24
    2636:	00 e0       	ldi	r16, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	45 e5       	ldi	r20, 0x55	; 85
    263e:	89 e7       	ldi	r24, 0x79	; 121
    2640:	91 e1       	ldi	r25, 0x11	; 17
    2642:	0e 94 82 11 	call	0x2304	; 0x2304 <xTaskCreate>
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
    2646:	88 23       	and	r24, r24
    2648:	89 f0       	breq	.+34     	; 0x266c <vTaskStartScheduler+0x74>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	79 f4       	brne	.+30     	; 0x266c <vTaskStartScheduler+0x74>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
    264e:	f8 94       	cli
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
    2650:	2f ef       	ldi	r18, 0xFF	; 255
    2652:	3f ef       	ldi	r19, 0xFF	; 255
    2654:	30 93 38 07 	sts	0x0738, r19	; 0x800738 <xNextTaskUnblockTime+0x1>
    2658:	20 93 37 07 	sts	0x0737, r18	; 0x800737 <xNextTaskUnblockTime>
        xSchedulerRunning = pdTRUE;
    265c:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <xSchedulerRunning>
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    2660:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <xTickCount+0x1>
    2664:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <xTickCount>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
    2668:	0e 94 bf 06 	call	0xd7e	; 0xd7e <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
    266c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>

    traceRETURN_vTaskStartScheduler();
}
    2670:	28 96       	adiw	r28, 0x08	; 8
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	0f 91       	pop	r16
    2682:	ff 90       	pop	r15
    2684:	ef 90       	pop	r14
    2686:	08 95       	ret

00002688 <vTaskEndScheduler>:
        #endif /* #if ( configUSE_TIMERS == 1 ) */

        /* Delete Idle tasks created by the kernel.*/
        for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
        {
            vTaskDelete( xIdleTaskHandles[ xCoreID ] );
    2688:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <xIdleTaskHandles>
    268c:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <xIdleTaskHandles+0x1>
    2690:	0e 94 9f 12 	call	0x253e	; 0x253e <vTaskDelete>

        /* Idle task is responsible for reclaiming the resources of the tasks in
         * xTasksWaitingTermination list. Since the idle task is now deleted and
         * no longer going to run, we need to reclaim resources of all the tasks
         * in the xTasksWaitingTermination list. */
        prvCheckTasksWaitingTermination();
    2694:	0e 94 4f 11 	call	0x229e	; 0x229e <prvCheckTasksWaitingTermination>
    #endif /* #if ( INCLUDE_vTaskDelete == 1 ) */

    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    2698:	f8 94       	cli
    xSchedulerRunning = pdFALSE;
    269a:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <xSchedulerRunning>

    /* This function must be called from a task and the application is
     * responsible for deleting that task after the scheduler is stopped. */
    vPortEndScheduler();
    269e:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <vPortEndScheduler>

000026a2 <vTaskSuspendAll>:
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
    26a2:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <uxSchedulerSuspended>
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <uxSchedulerSuspended>
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
    26ac:	08 95       	ret

000026ae <xTaskGetTickCount>:
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	0f 92       	push	r0
    {
        xTicks = xTickCount;
    26b4:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <xTickCount>
    26b8:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <xTickCount+0x1>
    }
    portTICK_TYPE_EXIT_CRITICAL();
    26bc:	0f 90       	pop	r0
    26be:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
}
    26c0:	08 95       	ret

000026c2 <xTaskGetTickCountFromISR>:
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    {
        xReturn = xTickCount;
    26c2:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <xTickCount>
    26c6:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <xTickCount+0x1>
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
}
    26ca:	08 95       	ret

000026cc <uxTaskGetNumberOfTasks>:

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
    26cc:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxCurrentNumberOfTasks>
}
    26d0:	08 95       	ret

000026d2 <pcTaskGetName>:

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	21 f4       	brne	.+8      	; 0x26de <pcTaskGetName+0xc>
    26d6:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    26da:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    configASSERT( pxTCB );

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
}
    26de:	49 96       	adiw	r24, 0x19	; 25
    26e0:	08 95       	ret

000026e2 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    26f2:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <uxSchedulerSuspended>
    26f6:	81 11       	cpse	r24, r1
    26f8:	e5 c0       	rjmp	.+458    	; 0x28c4 <xTaskIncrementTick+0x1e2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    26fa:	c0 91 40 07 	lds	r28, 0x0740	; 0x800740 <xTickCount>
    26fe:	d0 91 41 07 	lds	r29, 0x0741	; 0x800741 <xTickCount+0x1>
    2702:	6e 01       	movw	r12, r28
    2704:	8f ef       	ldi	r24, 0xFF	; 255
    2706:	c8 1a       	sub	r12, r24
    2708:	d8 0a       	sbc	r13, r24

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
    270a:	d0 92 41 07 	sts	0x0741, r13	; 0x800741 <xTickCount+0x1>
    270e:	c0 92 40 07 	sts	0x0740, r12	; 0x800740 <xTickCount>

        if( xConstTickCount == ( TickType_t ) 0U )
    2712:	c1 14       	cp	r12, r1
    2714:	d1 04       	cpc	r13, r1
    2716:	b9 f4       	brne	.+46     	; 0x2746 <xTaskIncrementTick+0x64>
        {
            taskSWITCH_DELAYED_LISTS();
    2718:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <pxDelayedTaskList>
    271c:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <pxDelayedTaskList+0x1>
    2720:	20 91 56 07 	lds	r18, 0x0756	; 0x800756 <pxOverflowDelayedTaskList>
    2724:	30 91 57 07 	lds	r19, 0x0757	; 0x800757 <pxOverflowDelayedTaskList+0x1>
    2728:	30 93 59 07 	sts	0x0759, r19	; 0x800759 <pxDelayedTaskList+0x1>
    272c:	20 93 58 07 	sts	0x0758, r18	; 0x800758 <pxDelayedTaskList>
    2730:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <pxOverflowDelayedTaskList+0x1>
    2734:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <pxOverflowDelayedTaskList>
    2738:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xNumOfOverflows>
    273c:	8f 5f       	subi	r24, 0xFF	; 255
    273e:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xNumOfOverflows>
    2742:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
    2746:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <xNextTaskUnblockTime>
    274a:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <xNextTaskUnblockTime+0x1>
    274e:	c8 16       	cp	r12, r24
    2750:	d9 06       	cpc	r13, r25
    2752:	e8 f4       	brcc	.+58     	; 0x278e <xTaskIncrementTick+0xac>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    2754:	80 e0       	ldi	r24, 0x00	; 0
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
    2756:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    275a:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    275e:	e6 89       	ldd	r30, Z+22	; 0x16
    2760:	d9 e0       	ldi	r29, 0x09	; 9
    2762:	ed 9f       	mul	r30, r29
    2764:	f0 01       	movw	r30, r0
    2766:	11 24       	eor	r1, r1
    2768:	e4 59       	subi	r30, 0x94	; 148
    276a:	f8 4f       	sbci	r31, 0xF8	; 248
    276c:	90 81       	ld	r25, Z
    276e:	92 30       	cpi	r25, 0x02	; 2
    2770:	08 f0       	brcs	.+2      	; 0x2774 <xTaskIncrementTick+0x92>
                {
                    xSwitchRequired = pdTRUE;
    2772:	81 e0       	ldi	r24, 0x01	; 1
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
    2774:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <xYieldPendings>
    2778:	91 11       	cpse	r25, r1
                {
                    xSwitchRequired = pdTRUE;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
}
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	08 95       	ret

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    278e:	80 e0       	ldi	r24, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    2790:	69 e0       	ldi	r22, 0x09	; 9
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2792:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <pxDelayedTaskList>
    2796:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <pxDelayedTaskList+0x1>
    279a:	90 81       	ld	r25, Z
    279c:	91 11       	cpse	r25, r1
    279e:	07 c0       	rjmp	.+14     	; 0x27ae <xTaskIncrementTick+0xcc>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
    27a0:	2f ef       	ldi	r18, 0xFF	; 255
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
    27a4:	30 93 38 07 	sts	0x0738, r19	; 0x800738 <xNextTaskUnblockTime+0x1>
    27a8:	20 93 37 07 	sts	0x0737, r18	; 0x800737 <xNextTaskUnblockTime>
    27ac:	d4 cf       	rjmp	.-88     	; 0x2756 <xTaskIncrementTick+0x74>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    27ae:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <pxDelayedTaskList>
    27b2:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <pxDelayedTaskList+0x1>
    27b6:	05 80       	ldd	r0, Z+5	; 0x05
    27b8:	f6 81       	ldd	r31, Z+6	; 0x06
    27ba:	e0 2d       	mov	r30, r0
    27bc:	06 80       	ldd	r0, Z+6	; 0x06
    27be:	f7 81       	ldd	r31, Z+7	; 0x07
    27c0:	e0 2d       	mov	r30, r0
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    27c2:	22 81       	ldd	r18, Z+2	; 0x02
    27c4:	33 81       	ldd	r19, Z+3	; 0x03

                    if( xConstTickCount < xItemValue )
    27c6:	c2 16       	cp	r12, r18
    27c8:	d3 06       	cpc	r13, r19
    27ca:	60 f3       	brcs	.-40     	; 0x27a4 <xTaskIncrementTick+0xc2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    27cc:	c2 85       	ldd	r28, Z+10	; 0x0a
    27ce:	d3 85       	ldd	r29, Z+11	; 0x0b
    27d0:	24 81       	ldd	r18, Z+4	; 0x04
    27d2:	35 81       	ldd	r19, Z+5	; 0x05
    27d4:	46 81       	ldd	r20, Z+6	; 0x06
    27d6:	57 81       	ldd	r21, Z+7	; 0x07
    27d8:	d9 01       	movw	r26, r18
    27da:	15 96       	adiw	r26, 0x05	; 5
    27dc:	5c 93       	st	X, r21
    27de:	4e 93       	st	-X, r20
    27e0:	14 97       	sbiw	r26, 0x04	; 4
    27e2:	46 81       	ldd	r20, Z+6	; 0x06
    27e4:	57 81       	ldd	r21, Z+7	; 0x07
    27e6:	da 01       	movw	r26, r20
    27e8:	13 96       	adiw	r26, 0x03	; 3
    27ea:	3c 93       	st	X, r19
    27ec:	2e 93       	st	-X, r18
    27ee:	12 97       	sbiw	r26, 0x02	; 2
    27f0:	9f 01       	movw	r18, r30
    27f2:	2e 5f       	subi	r18, 0xFE	; 254
    27f4:	3f 4f       	sbci	r19, 0xFF	; 255
    27f6:	09 81       	ldd	r16, Y+1	; 0x01
    27f8:	1a 81       	ldd	r17, Y+2	; 0x02
    27fa:	02 17       	cp	r16, r18
    27fc:	13 07       	cpc	r17, r19
    27fe:	11 f4       	brne	.+4      	; 0x2804 <xTaskIncrementTick+0x122>
    2800:	5a 83       	std	Y+2, r21	; 0x02
    2802:	49 83       	std	Y+1, r20	; 0x01
    2804:	13 86       	std	Z+11, r1	; 0x0b
    2806:	12 86       	std	Z+10, r1	; 0x0a
    2808:	98 81       	ld	r25, Y
    280a:	91 50       	subi	r25, 0x01	; 1
    280c:	98 83       	st	Y, r25

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    280e:	a4 89       	ldd	r26, Z+20	; 0x14
    2810:	b5 89       	ldd	r27, Z+21	; 0x15
    2812:	10 97       	sbiw	r26, 0x00	; 0
    2814:	f9 f0       	breq	.+62     	; 0x2854 <xTaskIncrementTick+0x172>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    2816:	46 85       	ldd	r20, Z+14	; 0x0e
    2818:	57 85       	ldd	r21, Z+15	; 0x0f
    281a:	00 89       	ldd	r16, Z+16	; 0x10
    281c:	11 89       	ldd	r17, Z+17	; 0x11
    281e:	ea 01       	movw	r28, r20
    2820:	1d 83       	std	Y+5, r17	; 0x05
    2822:	0c 83       	std	Y+4, r16	; 0x04
    2824:	00 89       	ldd	r16, Z+16	; 0x10
    2826:	11 89       	ldd	r17, Z+17	; 0x11
    2828:	e8 01       	movw	r28, r16
    282a:	5b 83       	std	Y+3, r21	; 0x03
    282c:	4a 83       	std	Y+2, r20	; 0x02
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	ed 90       	ld	r14, X+
    2832:	fc 90       	ld	r15, X
    2834:	12 97       	sbiw	r26, 0x02	; 2
    2836:	af 01       	movw	r20, r30
    2838:	44 5f       	subi	r20, 0xF4	; 244
    283a:	5f 4f       	sbci	r21, 0xFF	; 255
    283c:	e4 16       	cp	r14, r20
    283e:	f5 06       	cpc	r15, r21
    2840:	21 f4       	brne	.+8      	; 0x284a <xTaskIncrementTick+0x168>
    2842:	12 96       	adiw	r26, 0x02	; 2
    2844:	1c 93       	st	X, r17
    2846:	0e 93       	st	-X, r16
    2848:	11 97       	sbiw	r26, 0x01	; 1
    284a:	15 8a       	std	Z+21, r1	; 0x15
    284c:	14 8a       	std	Z+20, r1	; 0x14
    284e:	9c 91       	ld	r25, X
    2850:	91 50       	subi	r25, 0x01	; 1
    2852:	9c 93       	st	X, r25
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    2854:	a6 89       	ldd	r26, Z+22	; 0x16
    2856:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <uxTopReadyPriority>
    285a:	9a 17       	cp	r25, r26
    285c:	10 f4       	brcc	.+4      	; 0x2862 <xTaskIncrementTick+0x180>
    285e:	a0 93 3f 07 	sts	0x073F, r26	; 0x80073f <uxTopReadyPriority>
    2862:	6a 9f       	mul	r22, r26
    2864:	d0 01       	movw	r26, r0
    2866:	11 24       	eor	r1, r1
    2868:	a4 59       	subi	r26, 0x94	; 148
    286a:	b8 4f       	sbci	r27, 0xF8	; 248
    286c:	11 96       	adiw	r26, 0x01	; 1
    286e:	0d 90       	ld	r0, X+
    2870:	bc 91       	ld	r27, X
    2872:	a0 2d       	mov	r26, r0
    2874:	b5 83       	std	Z+5, r27	; 0x05
    2876:	a4 83       	std	Z+4, r26	; 0x04
    2878:	14 96       	adiw	r26, 0x04	; 4
    287a:	4d 91       	ld	r20, X+
    287c:	5c 91       	ld	r21, X
    287e:	15 97       	sbiw	r26, 0x05	; 5
    2880:	57 83       	std	Z+7, r21	; 0x07
    2882:	46 83       	std	Z+6, r20	; 0x06
    2884:	14 96       	adiw	r26, 0x04	; 4
    2886:	4d 91       	ld	r20, X+
    2888:	5c 91       	ld	r21, X
    288a:	15 97       	sbiw	r26, 0x05	; 5
    288c:	ea 01       	movw	r28, r20
    288e:	3b 83       	std	Y+3, r19	; 0x03
    2890:	2a 83       	std	Y+2, r18	; 0x02
    2892:	15 96       	adiw	r26, 0x05	; 5
    2894:	3c 93       	st	X, r19
    2896:	2e 93       	st	-X, r18
    2898:	14 97       	sbiw	r26, 0x04	; 4
    289a:	26 89       	ldd	r18, Z+22	; 0x16
    289c:	26 9f       	mul	r18, r22
    289e:	d0 01       	movw	r26, r0
    28a0:	11 24       	eor	r1, r1
    28a2:	a4 59       	subi	r26, 0x94	; 148
    28a4:	b8 4f       	sbci	r27, 0xF8	; 248
    28a6:	b3 87       	std	Z+11, r27	; 0x0b
    28a8:	a2 87       	std	Z+10, r26	; 0x0a
    28aa:	9c 91       	ld	r25, X
    28ac:	9f 5f       	subi	r25, 0xFF	; 255
    28ae:	9c 93       	st	X, r25
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    28b0:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    28b4:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    28b8:	96 89       	ldd	r25, Z+22	; 0x16
    28ba:	92 17       	cp	r25, r18
    28bc:	08 f0       	brcs	.+2      	; 0x28c0 <xTaskIncrementTick+0x1de>
    28be:	69 cf       	rjmp	.-302    	; 0x2792 <xTaskIncrementTick+0xb0>
                            {
                                xSwitchRequired = pdTRUE;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	67 cf       	rjmp	.-306    	; 0x2792 <xTaskIncrementTick+0xb0>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
    28c4:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xPendedTicks>
    28c8:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xPendedTicks+0x1>
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <xPendedTicks+0x1>
    28d2:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <xPendedTicks>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    28d6:	80 e0       	ldi	r24, 0x00	; 0
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
    28d8:	51 cf       	rjmp	.-350    	; 0x277c <xTaskIncrementTick+0x9a>

000028da <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    28da:	ef 92       	push	r14
    28dc:	ff 92       	push	r15
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	0f 92       	push	r0

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
    28ec:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <uxSchedulerSuspended>
    28f0:	81 50       	subi	r24, 0x01	; 1
    28f2:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <uxSchedulerSuspended>
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    28f6:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <uxSchedulerSuspended>
    28fa:	88 23       	and	r24, r24
    28fc:	51 f0       	breq	.+20     	; 0x2912 <xTaskResumeAll+0x38>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    BaseType_t xAlreadyYielded = pdFALSE;
    28fe:	80 e0       	ldi	r24, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2900:	0f 90       	pop	r0
    2902:	0f be       	out	0x3f, r0	; 63
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
}
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	ff 90       	pop	r15
    290e:	ef 90       	pop	r14
    2910:	08 95       	ret
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2912:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxCurrentNumberOfTasks>
    2916:	88 23       	and	r24, r24
    2918:	91 f3       	breq	.-28     	; 0x28fe <xTaskResumeAll+0x24>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    291a:	e0 90 52 07 	lds	r14, 0x0752	; 0x800752 <xPendingReadyList+0x5>
    291e:	f0 90 53 07 	lds	r15, 0x0753	; 0x800753 <xPendingReadyList+0x6>
#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	e0 e0       	ldi	r30, 0x00	; 0
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
                        prvAddTaskToReadyList( pxTCB );
    2926:	39 e0       	ldi	r19, 0x09	; 9
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    2928:	41 e0       	ldi	r20, 0x01	; 1
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    292a:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <xPendingReadyList>
    292e:	81 11       	cpse	r24, r1
    2930:	22 c0       	rjmp	.+68     	; 0x2976 <xTaskResumeAll+0x9c>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
    2932:	ef 2b       	or	r30, r31
    2934:	11 f0       	breq	.+4      	; 0x293a <xTaskResumeAll+0x60>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
    2936:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    293a:	c0 91 3c 07 	lds	r28, 0x073C	; 0x80073c <xPendedTicks>
    293e:	d0 91 3d 07 	lds	r29, 0x073D	; 0x80073d <xPendedTicks+0x1>

                        if( xPendedCounts > ( TickType_t ) 0U )
    2942:	20 97       	sbiw	r28, 0x00	; 0
    2944:	61 f0       	breq	.+24     	; 0x295e <xTaskResumeAll+0x84>
                            {
                                if( xTaskIncrementTick() != pdFALSE )
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    2946:	11 e0       	ldi	r17, 0x01	; 1

                        if( xPendedCounts > ( TickType_t ) 0U )
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
    2948:	0e 94 71 13 	call	0x26e2	; 0x26e2 <xTaskIncrementTick>
    294c:	81 11       	cpse	r24, r1
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    294e:	10 93 3b 07 	sts	0x073B, r17	; 0x80073b <xYieldPendings>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
    2952:	21 97       	sbiw	r28, 0x01	; 1
                            } while( xPendedCounts > ( TickType_t ) 0U );
    2954:	c9 f7       	brne	.-14     	; 0x2948 <xTaskResumeAll+0x6e>

                            xPendedTicks = 0;
    2956:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <xPendedTicks+0x1>
    295a:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <xPendedTicks>
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
    295e:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <xYieldPendings>
    2962:	88 23       	and	r24, r24
    2964:	61 f2       	breq	.-104    	; 0x28fe <xTaskResumeAll+0x24>
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
    2966:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    296a:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    296e:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	c5 cf       	rjmp	.-118    	; 0x2900 <xTaskResumeAll+0x26>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2976:	d7 01       	movw	r26, r14
    2978:	16 96       	adiw	r26, 0x06	; 6
    297a:	ed 91       	ld	r30, X+
    297c:	fc 91       	ld	r31, X
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    297e:	a4 89       	ldd	r26, Z+20	; 0x14
    2980:	b5 89       	ldd	r27, Z+21	; 0x15
    2982:	66 85       	ldd	r22, Z+14	; 0x0e
    2984:	77 85       	ldd	r23, Z+15	; 0x0f
    2986:	80 89       	ldd	r24, Z+16	; 0x10
    2988:	91 89       	ldd	r25, Z+17	; 0x11
    298a:	eb 01       	movw	r28, r22
    298c:	9d 83       	std	Y+5, r25	; 0x05
    298e:	8c 83       	std	Y+4, r24	; 0x04
    2990:	80 89       	ldd	r24, Z+16	; 0x10
    2992:	91 89       	ldd	r25, Z+17	; 0x11
    2994:	ec 01       	movw	r28, r24
    2996:	7b 83       	std	Y+3, r23	; 0x03
    2998:	6a 83       	std	Y+2, r22	; 0x02
    299a:	bf 01       	movw	r22, r30
    299c:	64 5f       	subi	r22, 0xF4	; 244
    299e:	7f 4f       	sbci	r23, 0xFF	; 255
    29a0:	11 96       	adiw	r26, 0x01	; 1
    29a2:	0d 91       	ld	r16, X+
    29a4:	1c 91       	ld	r17, X
    29a6:	12 97       	sbiw	r26, 0x02	; 2
    29a8:	06 17       	cp	r16, r22
    29aa:	17 07       	cpc	r17, r23
    29ac:	21 f4       	brne	.+8      	; 0x29b6 <xTaskResumeAll+0xdc>
    29ae:	12 96       	adiw	r26, 0x02	; 2
    29b0:	9c 93       	st	X, r25
    29b2:	8e 93       	st	-X, r24
    29b4:	11 97       	sbiw	r26, 0x01	; 1
    29b6:	15 8a       	std	Z+21, r1	; 0x15
    29b8:	14 8a       	std	Z+20, r1	; 0x14
    29ba:	8c 91       	ld	r24, X
    29bc:	81 50       	subi	r24, 0x01	; 1
    29be:	8c 93       	st	X, r24
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    29c0:	a2 85       	ldd	r26, Z+10	; 0x0a
    29c2:	b3 85       	ldd	r27, Z+11	; 0x0b
    29c4:	84 81       	ldd	r24, Z+4	; 0x04
    29c6:	95 81       	ldd	r25, Z+5	; 0x05
    29c8:	66 81       	ldd	r22, Z+6	; 0x06
    29ca:	77 81       	ldd	r23, Z+7	; 0x07
    29cc:	ec 01       	movw	r28, r24
    29ce:	7d 83       	std	Y+5, r23	; 0x05
    29d0:	6c 83       	std	Y+4, r22	; 0x04
    29d2:	66 81       	ldd	r22, Z+6	; 0x06
    29d4:	77 81       	ldd	r23, Z+7	; 0x07
    29d6:	eb 01       	movw	r28, r22
    29d8:	9b 83       	std	Y+3, r25	; 0x03
    29da:	8a 83       	std	Y+2, r24	; 0x02
    29dc:	cf 01       	movw	r24, r30
    29de:	02 96       	adiw	r24, 0x02	; 2
    29e0:	11 96       	adiw	r26, 0x01	; 1
    29e2:	0d 91       	ld	r16, X+
    29e4:	1c 91       	ld	r17, X
    29e6:	12 97       	sbiw	r26, 0x02	; 2
    29e8:	08 17       	cp	r16, r24
    29ea:	19 07       	cpc	r17, r25
    29ec:	21 f4       	brne	.+8      	; 0x29f6 <xTaskResumeAll+0x11c>
    29ee:	12 96       	adiw	r26, 0x02	; 2
    29f0:	7c 93       	st	X, r23
    29f2:	6e 93       	st	-X, r22
    29f4:	11 97       	sbiw	r26, 0x01	; 1
    29f6:	13 86       	std	Z+11, r1	; 0x0b
    29f8:	12 86       	std	Z+10, r1	; 0x0a
    29fa:	2c 91       	ld	r18, X
    29fc:	21 50       	subi	r18, 0x01	; 1
    29fe:	2c 93       	st	X, r18
                        prvAddTaskToReadyList( pxTCB );
    2a00:	a6 89       	ldd	r26, Z+22	; 0x16
    2a02:	20 91 3f 07 	lds	r18, 0x073F	; 0x80073f <uxTopReadyPriority>
    2a06:	2a 17       	cp	r18, r26
    2a08:	10 f4       	brcc	.+4      	; 0x2a0e <xTaskResumeAll+0x134>
    2a0a:	a0 93 3f 07 	sts	0x073F, r26	; 0x80073f <uxTopReadyPriority>
    2a0e:	3a 9f       	mul	r19, r26
    2a10:	d0 01       	movw	r26, r0
    2a12:	11 24       	eor	r1, r1
    2a14:	a4 59       	subi	r26, 0x94	; 148
    2a16:	b8 4f       	sbci	r27, 0xF8	; 248
    2a18:	11 96       	adiw	r26, 0x01	; 1
    2a1a:	0d 90       	ld	r0, X+
    2a1c:	bc 91       	ld	r27, X
    2a1e:	a0 2d       	mov	r26, r0
    2a20:	b5 83       	std	Z+5, r27	; 0x05
    2a22:	a4 83       	std	Z+4, r26	; 0x04
    2a24:	14 96       	adiw	r26, 0x04	; 4
    2a26:	6d 91       	ld	r22, X+
    2a28:	7c 91       	ld	r23, X
    2a2a:	15 97       	sbiw	r26, 0x05	; 5
    2a2c:	77 83       	std	Z+7, r23	; 0x07
    2a2e:	66 83       	std	Z+6, r22	; 0x06
    2a30:	14 96       	adiw	r26, 0x04	; 4
    2a32:	6d 91       	ld	r22, X+
    2a34:	7c 91       	ld	r23, X
    2a36:	15 97       	sbiw	r26, 0x05	; 5
    2a38:	eb 01       	movw	r28, r22
    2a3a:	9b 83       	std	Y+3, r25	; 0x03
    2a3c:	8a 83       	std	Y+2, r24	; 0x02
    2a3e:	15 96       	adiw	r26, 0x05	; 5
    2a40:	9c 93       	st	X, r25
    2a42:	8e 93       	st	-X, r24
    2a44:	14 97       	sbiw	r26, 0x04	; 4
    2a46:	96 89       	ldd	r25, Z+22	; 0x16
    2a48:	93 9f       	mul	r25, r19
    2a4a:	d0 01       	movw	r26, r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	a4 59       	subi	r26, 0x94	; 148
    2a50:	b8 4f       	sbci	r27, 0xF8	; 248
    2a52:	b3 87       	std	Z+11, r27	; 0x0b
    2a54:	a2 87       	std	Z+10, r26	; 0x0a
    2a56:	8c 91       	ld	r24, X
    2a58:	8f 5f       	subi	r24, 0xFF	; 255
    2a5a:	8c 93       	st	X, r24

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2a5c:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
    2a60:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2a64:	56 96       	adiw	r26, 0x16	; 22
    2a66:	8c 91       	ld	r24, X
    2a68:	89 17       	cp	r24, r25
    2a6a:	08 f0       	brcs	.+2      	; 0x2a6e <xTaskResumeAll+0x194>
    2a6c:	5e cf       	rjmp	.-324    	; 0x292a <xTaskResumeAll+0x50>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    2a6e:	40 93 3b 07 	sts	0x073B, r20	; 0x80073b <xYieldPendings>
    2a72:	5b cf       	rjmp	.-330    	; 0x292a <xTaskResumeAll+0x50>

00002a74 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	ec 01       	movw	r28, r24
    2a7e:	8b 01       	movw	r16, r22
        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
        configASSERT( ( xTimeIncrement > 0U ) );

        vTaskSuspendAll();
    2a80:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
    2a84:	20 91 40 07 	lds	r18, 0x0740	; 0x800740 <xTickCount>
    2a88:	30 91 41 07 	lds	r19, 0x0741	; 0x800741 <xTickCount+0x1>

            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2a8c:	48 81       	ld	r20, Y
    2a8e:	59 81       	ldd	r21, Y+1	; 0x01
    2a90:	ca 01       	movw	r24, r20
    2a92:	80 0f       	add	r24, r16
    2a94:	91 1f       	adc	r25, r17
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
    2a96:	99 83       	std	Y+1, r25	; 0x01
    2a98:	88 83       	st	Y, r24
            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

            if( xConstTickCount < *pxPreviousWakeTime )
    2a9a:	24 17       	cp	r18, r20
    2a9c:	35 07       	cpc	r19, r21
    2a9e:	80 f4       	brcc	.+32     	; 0x2ac0 <xTaskDelayUntil+0x4c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    2aa0:	84 17       	cp	r24, r20
    2aa2:	95 07       	cpc	r25, r21
    2aa4:	80 f0       	brcs	.+32     	; 0x2ac6 <xTaskDelayUntil+0x52>

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    2aa6:	c0 e0       	ldi	r28, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    2aa8:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    2aac:	81 11       	cpse	r24, r1
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <xTaskDelayUntil+0x40>
        {
            taskYIELD_WITHIN_API();
    2ab0:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );

        return xShouldDelay;
    }
    2ab4:	8c 2f       	mov	r24, r28
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	08 95       	ret
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    2ac0:	84 17       	cp	r24, r20
    2ac2:	95 07       	cpc	r25, r21
    2ac4:	18 f0       	brcs	.+6      	; 0x2acc <xTaskDelayUntil+0x58>
    2ac6:	28 17       	cp	r18, r24
    2ac8:	39 07       	cpc	r19, r25
    2aca:	68 f7       	brcc	.-38     	; 0x2aa6 <xTaskDelayUntil+0x32>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    2acc:	82 1b       	sub	r24, r18
    2ace:	93 0b       	sbc	r25, r19
    2ad0:	0e 94 00 11 	call	0x2200	; 0x2200 <prvAddCurrentTaskToDelayedList.isra.2>
    2ad4:	c1 e0       	ldi	r28, 0x01	; 1
    2ad6:	e8 cf       	rjmp	.-48     	; 0x2aa8 <xTaskDelayUntil+0x34>

00002ad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	ec 01       	movw	r28, r24
        BaseType_t xAlreadyYielded = pdFALSE;

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
    2ade:	89 2b       	or	r24, r25
    2ae0:	29 f4       	brne	.+10     	; 0x2aec <vTaskDelay+0x14>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
        {
            taskYIELD_WITHIN_API();
    2ae2:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	08 95       	ret
        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
        {
            vTaskSuspendAll();
    2aec:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    2af0:	ce 01       	movw	r24, r28
    2af2:	0e 94 00 11 	call	0x2200	; 0x2200 <prvAddCurrentTaskToDelayedList.isra.2>
            }
            xAlreadyYielded = xTaskResumeAll();
    2af6:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    2afa:	88 23       	and	r24, r24
    2afc:	91 f3       	breq	.-28     	; 0x2ae2 <vTaskDelay+0xa>
    2afe:	f3 cf       	rjmp	.-26     	; 0x2ae6 <vTaskDelay+0xe>

00002b00 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	ec 01       	movw	r28, r24
     * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
    configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );

    /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
    vTaskSuspendAll();
    2b06:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>

    /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
    taskENTER_CRITICAL();
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	0f 92       	push	r0
    {
        xPendedTicks += xTicksToCatchUp;
    2b10:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xPendedTicks>
    2b14:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xPendedTicks+0x1>
    2b18:	8c 0f       	add	r24, r28
    2b1a:	9d 1f       	adc	r25, r29
    2b1c:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <xPendedTicks+0x1>
    2b20:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <xPendedTicks>
    }
    taskEXIT_CRITICAL();
    2b24:	0f 90       	pop	r0
    2b26:	0f be       	out	0x3f, r0	; 63
    xYieldOccurred = xTaskResumeAll();

    traceRETURN_xTaskCatchUpTicks( xYieldOccurred );

    return xYieldOccurred;
}
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    taskENTER_CRITICAL();
    {
        xPendedTicks += xTicksToCatchUp;
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();
    2b2c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <xTaskResumeAll>

00002b30 <vTaskSwitchContext>:
#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
    2b30:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <uxSchedulerSuspended>
    2b34:	88 23       	and	r24, r24
    2b36:	21 f0       	breq	.+8      	; 0x2b40 <vTaskSwitchContext+0x10>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <xYieldPendings>
    2b3e:	08 95       	ret
        }
        else
        {
            xYieldPendings[ 0 ] = pdFALSE;
    2b40:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <xYieldPendings>
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    2b44:	20 91 3f 07 	lds	r18, 0x073F	; 0x80073f <uxTopReadyPriority>
    2b48:	89 e0       	ldi	r24, 0x09	; 9
    2b4a:	42 2f       	mov	r20, r18
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	84 9f       	mul	r24, r20
    2b50:	f0 01       	movw	r30, r0
    2b52:	85 9f       	mul	r24, r21
    2b54:	f0 0d       	add	r31, r0
    2b56:	11 24       	eor	r1, r1
    2b58:	e4 59       	subi	r30, 0x94	; 148
    2b5a:	f8 4f       	sbci	r31, 0xF8	; 248
    2b5c:	90 81       	ld	r25, Z
    2b5e:	99 23       	and	r25, r25
    2b60:	59 f1       	breq	.+86     	; 0x2bb8 <vTaskSwitchContext+0x88>
    2b62:	a1 81       	ldd	r26, Z+1	; 0x01
    2b64:	b2 81       	ldd	r27, Z+2	; 0x02
    2b66:	12 96       	adiw	r26, 0x02	; 2
    2b68:	6d 91       	ld	r22, X+
    2b6a:	7c 91       	ld	r23, X
    2b6c:	72 83       	std	Z+2, r23	; 0x02
    2b6e:	61 83       	std	Z+1, r22	; 0x01
    2b70:	28 9f       	mul	r18, r24
    2b72:	c0 01       	movw	r24, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	81 59       	subi	r24, 0x91	; 145
    2b78:	98 4f       	sbci	r25, 0xF8	; 248
    2b7a:	68 17       	cp	r22, r24
    2b7c:	79 07       	cpc	r23, r25
    2b7e:	21 f4       	brne	.+8      	; 0x2b88 <vTaskSwitchContext+0x58>
    2b80:	85 81       	ldd	r24, Z+5	; 0x05
    2b82:	96 81       	ldd	r25, Z+6	; 0x06
    2b84:	92 83       	std	Z+2, r25	; 0x02
    2b86:	81 83       	std	Z+1, r24	; 0x01
    2b88:	89 e0       	ldi	r24, 0x09	; 9
    2b8a:	84 9f       	mul	r24, r20
    2b8c:	f0 01       	movw	r30, r0
    2b8e:	85 9f       	mul	r24, r21
    2b90:	f0 0d       	add	r31, r0
    2b92:	11 24       	eor	r1, r1
    2b94:	e4 59       	subi	r30, 0x94	; 148
    2b96:	f8 4f       	sbci	r31, 0xF8	; 248
    2b98:	01 80       	ldd	r0, Z+1	; 0x01
    2b9a:	f2 81       	ldd	r31, Z+2	; 0x02
    2b9c:	e0 2d       	mov	r30, r0
    2b9e:	86 81       	ldd	r24, Z+6	; 0x06
    2ba0:	97 81       	ldd	r25, Z+7	; 0x07
    2ba2:	90 93 91 07 	sts	0x0791, r25	; 0x800791 <pxCurrentTCB+0x1>
    2ba6:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <pxCurrentTCB>
    2baa:	20 93 3f 07 	sts	0x073F, r18	; 0x80073f <uxTopReadyPriority>
            traceTASK_SWITCHED_IN();

            /* Macro to inject port specific behaviour immediately after
             * switching tasks, such as setting an end of stack watchpoint
             * or reconfiguring the MPU. */
            portTASK_SWITCH_HOOK( pxCurrentTCB );
    2bae:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    2bb2:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
    2bb6:	08 95       	ret
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    2bb8:	21 50       	subi	r18, 0x01	; 1
    2bba:	c7 cf       	rjmp	.-114    	; 0x2b4a <vTaskSwitchContext+0x1a>

00002bbc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	eb 01       	movw	r28, r22
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2bc2:	60 91 90 07 	lds	r22, 0x0790	; 0x800790 <pxCurrentTCB>
    2bc6:	70 91 91 07 	lds	r23, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2bca:	64 5f       	subi	r22, 0xF4	; 244
    2bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2bd2:	ce 01       	movw	r24, r28

    traceRETURN_vTaskPlaceOnEventList();
}
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2bd8:	0c 94 00 11 	jmp	0x2200	; 0x2200 <prvAddCurrentTaskToDelayedList.isra.2>

00002bdc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	fc 01       	movw	r30, r24
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    2be2:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
    2be6:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2bea:	70 68       	ori	r23, 0x80	; 128
    2bec:	1d 96       	adiw	r26, 0x0d	; 13
    2bee:	7c 93       	st	X, r23
    2bf0:	6e 93       	st	-X, r22
    2bf2:	1c 97       	sbiw	r26, 0x0c	; 12
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2bf4:	a1 81       	ldd	r26, Z+1	; 0x01
    2bf6:	b2 81       	ldd	r27, Z+2	; 0x02
    2bf8:	c0 91 90 07 	lds	r28, 0x0790	; 0x800790 <pxCurrentTCB>
    2bfc:	d0 91 91 07 	lds	r29, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2c00:	bf 87       	std	Y+15, r27	; 0x0f
    2c02:	ae 87       	std	Y+14, r26	; 0x0e
    2c04:	c0 91 90 07 	lds	r28, 0x0790	; 0x800790 <pxCurrentTCB>
    2c08:	d0 91 91 07 	lds	r29, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2c0c:	14 96       	adiw	r26, 0x04	; 4
    2c0e:	8d 91       	ld	r24, X+
    2c10:	9c 91       	ld	r25, X
    2c12:	15 97       	sbiw	r26, 0x05	; 5
    2c14:	99 8b       	std	Y+17, r25	; 0x11
    2c16:	88 8b       	std	Y+16, r24	; 0x10
    2c18:	20 91 90 07 	lds	r18, 0x0790	; 0x800790 <pxCurrentTCB>
    2c1c:	30 91 91 07 	lds	r19, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2c20:	14 96       	adiw	r26, 0x04	; 4
    2c22:	cd 91       	ld	r28, X+
    2c24:	dc 91       	ld	r29, X
    2c26:	15 97       	sbiw	r26, 0x05	; 5
    2c28:	24 5f       	subi	r18, 0xF4	; 244
    2c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2c:	3b 83       	std	Y+3, r19	; 0x03
    2c2e:	2a 83       	std	Y+2, r18	; 0x02
    2c30:	20 91 90 07 	lds	r18, 0x0790	; 0x800790 <pxCurrentTCB>
    2c34:	30 91 91 07 	lds	r19, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2c38:	24 5f       	subi	r18, 0xF4	; 244
    2c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3c:	15 96       	adiw	r26, 0x05	; 5
    2c3e:	3c 93       	st	X, r19
    2c40:	2e 93       	st	-X, r18
    2c42:	14 97       	sbiw	r26, 0x04	; 4
    2c44:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
    2c48:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2c4c:	55 96       	adiw	r26, 0x15	; 21
    2c4e:	fc 93       	st	X, r31
    2c50:	ee 93       	st	-X, r30
    2c52:	54 97       	sbiw	r26, 0x14	; 20
    2c54:	90 81       	ld	r25, Z
    2c56:	9f 5f       	subi	r25, 0xFF	; 255
    2c58:	90 83       	st	Z, r25

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2c5a:	ca 01       	movw	r24, r20

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2c60:	0c 94 00 11 	jmp	0x2200	; 0x2200 <prvAddCurrentTaskToDelayedList.isra.2>

00002c64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2c68:	dc 01       	movw	r26, r24
    2c6a:	15 96       	adiw	r26, 0x05	; 5
    2c6c:	ed 91       	ld	r30, X+
    2c6e:	fc 91       	ld	r31, X
    2c70:	06 80       	ldd	r0, Z+6	; 0x06
    2c72:	f7 81       	ldd	r31, Z+7	; 0x07
    2c74:	e0 2d       	mov	r30, r0
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    2c76:	a4 89       	ldd	r26, Z+20	; 0x14
    2c78:	b5 89       	ldd	r27, Z+21	; 0x15
    2c7a:	86 85       	ldd	r24, Z+14	; 0x0e
    2c7c:	97 85       	ldd	r25, Z+15	; 0x0f
    2c7e:	20 89       	ldd	r18, Z+16	; 0x10
    2c80:	31 89       	ldd	r19, Z+17	; 0x11
    2c82:	ec 01       	movw	r28, r24
    2c84:	3d 83       	std	Y+5, r19	; 0x05
    2c86:	2c 83       	std	Y+4, r18	; 0x04
    2c88:	c0 89       	ldd	r28, Z+16	; 0x10
    2c8a:	d1 89       	ldd	r29, Z+17	; 0x11
    2c8c:	9b 83       	std	Y+3, r25	; 0x03
    2c8e:	8a 83       	std	Y+2, r24	; 0x02
    2c90:	cf 01       	movw	r24, r30
    2c92:	0c 96       	adiw	r24, 0x0c	; 12
    2c94:	11 96       	adiw	r26, 0x01	; 1
    2c96:	2d 91       	ld	r18, X+
    2c98:	3c 91       	ld	r19, X
    2c9a:	12 97       	sbiw	r26, 0x02	; 2
    2c9c:	28 17       	cp	r18, r24
    2c9e:	39 07       	cpc	r19, r25
    2ca0:	21 f4       	brne	.+8      	; 0x2caa <xTaskRemoveFromEventList+0x46>
    2ca2:	12 96       	adiw	r26, 0x02	; 2
    2ca4:	dc 93       	st	X, r29
    2ca6:	ce 93       	st	-X, r28
    2ca8:	11 97       	sbiw	r26, 0x01	; 1
    2caa:	15 8a       	std	Z+21, r1	; 0x15
    2cac:	14 8a       	std	Z+20, r1	; 0x14
    2cae:	2c 91       	ld	r18, X
    2cb0:	21 50       	subi	r18, 0x01	; 1
    2cb2:	2c 93       	st	X, r18

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    2cb4:	20 91 34 07 	lds	r18, 0x0734	; 0x800734 <uxSchedulerSuspended>
    2cb8:	21 11       	cpse	r18, r1
    2cba:	57 c0       	rjmp	.+174    	; 0x2d6a <xTaskRemoveFromEventList+0x106>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    2cbc:	a2 85       	ldd	r26, Z+10	; 0x0a
    2cbe:	b3 85       	ldd	r27, Z+11	; 0x0b
    2cc0:	84 81       	ldd	r24, Z+4	; 0x04
    2cc2:	95 81       	ldd	r25, Z+5	; 0x05
    2cc4:	26 81       	ldd	r18, Z+6	; 0x06
    2cc6:	37 81       	ldd	r19, Z+7	; 0x07
    2cc8:	ec 01       	movw	r28, r24
    2cca:	3d 83       	std	Y+5, r19	; 0x05
    2ccc:	2c 83       	std	Y+4, r18	; 0x04
    2cce:	c6 81       	ldd	r28, Z+6	; 0x06
    2cd0:	d7 81       	ldd	r29, Z+7	; 0x07
    2cd2:	9b 83       	std	Y+3, r25	; 0x03
    2cd4:	8a 83       	std	Y+2, r24	; 0x02
    2cd6:	cf 01       	movw	r24, r30
    2cd8:	02 96       	adiw	r24, 0x02	; 2
    2cda:	11 96       	adiw	r26, 0x01	; 1
    2cdc:	2d 91       	ld	r18, X+
    2cde:	3c 91       	ld	r19, X
    2ce0:	12 97       	sbiw	r26, 0x02	; 2
    2ce2:	28 17       	cp	r18, r24
    2ce4:	39 07       	cpc	r19, r25
    2ce6:	21 f4       	brne	.+8      	; 0x2cf0 <xTaskRemoveFromEventList+0x8c>
    2ce8:	12 96       	adiw	r26, 0x02	; 2
    2cea:	dc 93       	st	X, r29
    2cec:	ce 93       	st	-X, r28
    2cee:	11 97       	sbiw	r26, 0x01	; 1
    2cf0:	13 86       	std	Z+11, r1	; 0x0b
    2cf2:	12 86       	std	Z+10, r1	; 0x0a
    2cf4:	2c 91       	ld	r18, X
    2cf6:	21 50       	subi	r18, 0x01	; 1
    2cf8:	2c 93       	st	X, r18
        prvAddTaskToReadyList( pxUnblockedTCB );
    2cfa:	c6 89       	ldd	r28, Z+22	; 0x16
    2cfc:	20 91 3f 07 	lds	r18, 0x073F	; 0x80073f <uxTopReadyPriority>
    2d00:	2c 17       	cp	r18, r28
    2d02:	10 f4       	brcc	.+4      	; 0x2d08 <xTaskRemoveFromEventList+0xa4>
    2d04:	c0 93 3f 07 	sts	0x073F, r28	; 0x80073f <uxTopReadyPriority>
    2d08:	29 e0       	ldi	r18, 0x09	; 9
    2d0a:	2c 9f       	mul	r18, r28
    2d0c:	e0 01       	movw	r28, r0
    2d0e:	11 24       	eor	r1, r1
    2d10:	c4 59       	subi	r28, 0x94	; 148
    2d12:	d8 4f       	sbci	r29, 0xF8	; 248
    2d14:	09 80       	ldd	r0, Y+1	; 0x01
    2d16:	da 81       	ldd	r29, Y+2	; 0x02
    2d18:	c0 2d       	mov	r28, r0
    2d1a:	d5 83       	std	Z+5, r29	; 0x05
    2d1c:	c4 83       	std	Z+4, r28	; 0x04
    2d1e:	4c 81       	ldd	r20, Y+4	; 0x04
    2d20:	5d 81       	ldd	r21, Y+5	; 0x05
    2d22:	57 83       	std	Z+7, r21	; 0x07
    2d24:	46 83       	std	Z+6, r20	; 0x06
    2d26:	ac 81       	ldd	r26, Y+4	; 0x04
    2d28:	bd 81       	ldd	r27, Y+5	; 0x05
    2d2a:	13 96       	adiw	r26, 0x03	; 3
    2d2c:	9c 93       	st	X, r25
    2d2e:	8e 93       	st	-X, r24
    2d30:	12 97       	sbiw	r26, 0x02	; 2
    2d32:	9d 83       	std	Y+5, r25	; 0x05
    2d34:	8c 83       	std	Y+4, r24	; 0x04
    2d36:	a6 89       	ldd	r26, Z+22	; 0x16
    2d38:	a2 9f       	mul	r26, r18
    2d3a:	d0 01       	movw	r26, r0
    2d3c:	11 24       	eor	r1, r1
    2d3e:	a4 59       	subi	r26, 0x94	; 148
    2d40:	b8 4f       	sbci	r27, 0xF8	; 248
    2d42:	b3 87       	std	Z+11, r27	; 0x0b
    2d44:	a2 87       	std	Z+10, r26	; 0x0a
    2d46:	8c 91       	ld	r24, X
    2d48:	8f 5f       	subi	r24, 0xFF	; 255
    2d4a:	8c 93       	st	X, r24
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2d4c:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
    2d50:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2d54:	96 89       	ldd	r25, Z+22	; 0x16
    2d56:	56 96       	adiw	r26, 0x16	; 22
    2d58:	8c 91       	ld	r24, X
    2d5a:	89 17       	cp	r24, r25
    2d5c:	30 f5       	brcc	.+76     	; 0x2daa <xTaskRemoveFromEventList+0x146>
             * it should force a context switch now. */
            xReturn = pdTRUE;

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <xYieldPendings>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
}
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	08 95       	ret
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2d6a:	a0 91 4e 07 	lds	r26, 0x074E	; 0x80074e <xPendingReadyList+0x1>
    2d6e:	b0 91 4f 07 	lds	r27, 0x074F	; 0x80074f <xPendingReadyList+0x2>
    2d72:	b7 87       	std	Z+15, r27	; 0x0f
    2d74:	a6 87       	std	Z+14, r26	; 0x0e
    2d76:	14 96       	adiw	r26, 0x04	; 4
    2d78:	2d 91       	ld	r18, X+
    2d7a:	3c 91       	ld	r19, X
    2d7c:	15 97       	sbiw	r26, 0x05	; 5
    2d7e:	31 8b       	std	Z+17, r19	; 0x11
    2d80:	20 8b       	std	Z+16, r18	; 0x10
    2d82:	14 96       	adiw	r26, 0x04	; 4
    2d84:	cd 91       	ld	r28, X+
    2d86:	dc 91       	ld	r29, X
    2d88:	15 97       	sbiw	r26, 0x05	; 5
    2d8a:	9b 83       	std	Y+3, r25	; 0x03
    2d8c:	8a 83       	std	Y+2, r24	; 0x02
    2d8e:	15 96       	adiw	r26, 0x05	; 5
    2d90:	9c 93       	st	X, r25
    2d92:	8e 93       	st	-X, r24
    2d94:	14 97       	sbiw	r26, 0x04	; 4
    2d96:	8d e4       	ldi	r24, 0x4D	; 77
    2d98:	97 e0       	ldi	r25, 0x07	; 7
    2d9a:	95 8b       	std	Z+21, r25	; 0x15
    2d9c:	84 8b       	std	Z+20, r24	; 0x14
    2d9e:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <xPendingReadyList>
    2da2:	8f 5f       	subi	r24, 0xFF	; 255
    2da4:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <xPendingReadyList>
    2da8:	d1 cf       	rjmp	.-94     	; 0x2d4c <xTaskRemoveFromEventList+0xe8>
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2daa:	80 e0       	ldi	r24, 0x00	; 0
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
    2dac:	db cf       	rjmp	.-74     	; 0x2d64 <xTaskRemoveFromEventList+0x100>

00002dae <vTaskRemoveFromUnorderedEventList>:
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	dc 01       	movw	r26, r24
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    2db4:	70 68       	ori	r23, 0x80	; 128
    2db6:	11 96       	adiw	r26, 0x01	; 1
    2db8:	7c 93       	st	X, r23
    2dba:	6e 93       	st	-X, r22
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
    2dbc:	16 96       	adiw	r26, 0x06	; 6
    2dbe:	ed 91       	ld	r30, X+
    2dc0:	fc 91       	ld	r31, X
    2dc2:	17 97       	sbiw	r26, 0x07	; 7
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( pxEventListItem );
    2dc4:	18 96       	adiw	r26, 0x08	; 8
    2dc6:	4d 91       	ld	r20, X+
    2dc8:	5c 91       	ld	r21, X
    2dca:	19 97       	sbiw	r26, 0x09	; 9
    2dcc:	12 96       	adiw	r26, 0x02	; 2
    2dce:	2d 91       	ld	r18, X+
    2dd0:	3c 91       	ld	r19, X
    2dd2:	13 97       	sbiw	r26, 0x03	; 3
    2dd4:	14 96       	adiw	r26, 0x04	; 4
    2dd6:	8d 91       	ld	r24, X+
    2dd8:	9c 91       	ld	r25, X
    2dda:	15 97       	sbiw	r26, 0x05	; 5
    2ddc:	e9 01       	movw	r28, r18
    2dde:	9d 83       	std	Y+5, r25	; 0x05
    2de0:	8c 83       	std	Y+4, r24	; 0x04
    2de2:	14 96       	adiw	r26, 0x04	; 4
    2de4:	8d 91       	ld	r24, X+
    2de6:	9c 91       	ld	r25, X
    2de8:	15 97       	sbiw	r26, 0x05	; 5
    2dea:	ec 01       	movw	r28, r24
    2dec:	3b 83       	std	Y+3, r19	; 0x03
    2dee:	2a 83       	std	Y+2, r18	; 0x02
    2df0:	ea 01       	movw	r28, r20
    2df2:	29 81       	ldd	r18, Y+1	; 0x01
    2df4:	3a 81       	ldd	r19, Y+2	; 0x02
    2df6:	2a 17       	cp	r18, r26
    2df8:	3b 07       	cpc	r19, r27
    2dfa:	11 f4       	brne	.+4      	; 0x2e00 <vTaskRemoveFromUnorderedEventList+0x52>
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	19 96       	adiw	r26, 0x09	; 9
    2e02:	1c 92       	st	X, r1
    2e04:	1e 92       	st	-X, r1
    2e06:	18 97       	sbiw	r26, 0x08	; 8
    2e08:	da 01       	movw	r26, r20
    2e0a:	8c 91       	ld	r24, X
    2e0c:	81 50       	subi	r24, 0x01	; 1
    2e0e:	8c 93       	st	X, r24
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    2e10:	a2 85       	ldd	r26, Z+10	; 0x0a
    2e12:	b3 85       	ldd	r27, Z+11	; 0x0b
    2e14:	84 81       	ldd	r24, Z+4	; 0x04
    2e16:	95 81       	ldd	r25, Z+5	; 0x05
    2e18:	26 81       	ldd	r18, Z+6	; 0x06
    2e1a:	37 81       	ldd	r19, Z+7	; 0x07
    2e1c:	ec 01       	movw	r28, r24
    2e1e:	3d 83       	std	Y+5, r19	; 0x05
    2e20:	2c 83       	std	Y+4, r18	; 0x04
    2e22:	c6 81       	ldd	r28, Z+6	; 0x06
    2e24:	d7 81       	ldd	r29, Z+7	; 0x07
    2e26:	9b 83       	std	Y+3, r25	; 0x03
    2e28:	8a 83       	std	Y+2, r24	; 0x02
    2e2a:	cf 01       	movw	r24, r30
    2e2c:	02 96       	adiw	r24, 0x02	; 2
    2e2e:	11 96       	adiw	r26, 0x01	; 1
    2e30:	2d 91       	ld	r18, X+
    2e32:	3c 91       	ld	r19, X
    2e34:	12 97       	sbiw	r26, 0x02	; 2
    2e36:	28 17       	cp	r18, r24
    2e38:	39 07       	cpc	r19, r25
    2e3a:	21 f4       	brne	.+8      	; 0x2e44 <vTaskRemoveFromUnorderedEventList+0x96>
    2e3c:	12 96       	adiw	r26, 0x02	; 2
    2e3e:	dc 93       	st	X, r29
    2e40:	ce 93       	st	-X, r28
    2e42:	11 97       	sbiw	r26, 0x01	; 1
    2e44:	13 86       	std	Z+11, r1	; 0x0b
    2e46:	12 86       	std	Z+10, r1	; 0x0a
    2e48:	2c 91       	ld	r18, X
    2e4a:	21 50       	subi	r18, 0x01	; 1
    2e4c:	2c 93       	st	X, r18
    prvAddTaskToReadyList( pxUnblockedTCB );
    2e4e:	c6 89       	ldd	r28, Z+22	; 0x16
    2e50:	20 91 3f 07 	lds	r18, 0x073F	; 0x80073f <uxTopReadyPriority>
    2e54:	2c 17       	cp	r18, r28
    2e56:	10 f4       	brcc	.+4      	; 0x2e5c <vTaskRemoveFromUnorderedEventList+0xae>
    2e58:	c0 93 3f 07 	sts	0x073F, r28	; 0x80073f <uxTopReadyPriority>
    2e5c:	49 e0       	ldi	r20, 0x09	; 9
    2e5e:	4c 9f       	mul	r20, r28
    2e60:	e0 01       	movw	r28, r0
    2e62:	11 24       	eor	r1, r1
    2e64:	c4 59       	subi	r28, 0x94	; 148
    2e66:	d8 4f       	sbci	r29, 0xF8	; 248
    2e68:	09 80       	ldd	r0, Y+1	; 0x01
    2e6a:	da 81       	ldd	r29, Y+2	; 0x02
    2e6c:	c0 2d       	mov	r28, r0
    2e6e:	d5 83       	std	Z+5, r29	; 0x05
    2e70:	c4 83       	std	Z+4, r28	; 0x04
    2e72:	2c 81       	ldd	r18, Y+4	; 0x04
    2e74:	3d 81       	ldd	r19, Y+5	; 0x05
    2e76:	37 83       	std	Z+7, r19	; 0x07
    2e78:	26 83       	std	Z+6, r18	; 0x06
    2e7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2e7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2e7e:	d9 01       	movw	r26, r18
    2e80:	13 96       	adiw	r26, 0x03	; 3
    2e82:	9c 93       	st	X, r25
    2e84:	8e 93       	st	-X, r24
    2e86:	12 97       	sbiw	r26, 0x02	; 2
    2e88:	9d 83       	std	Y+5, r25	; 0x05
    2e8a:	8c 83       	std	Y+4, r24	; 0x04
    2e8c:	96 89       	ldd	r25, Z+22	; 0x16
    2e8e:	94 9f       	mul	r25, r20
    2e90:	d0 01       	movw	r26, r0
    2e92:	11 24       	eor	r1, r1
    2e94:	a4 59       	subi	r26, 0x94	; 148
    2e96:	b8 4f       	sbci	r27, 0xF8	; 248
    2e98:	b3 87       	std	Z+11, r27	; 0x0b
    2e9a:	a2 87       	std	Z+10, r26	; 0x0a
    2e9c:	8c 91       	ld	r24, X
    2e9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ea0:	8c 93       	st	X, r24

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2ea2:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    2ea6:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2eaa:	86 89       	ldd	r24, Z+22	; 0x16
    2eac:	89 17       	cp	r24, r25
    2eae:	18 f4       	brcc	.+6      	; 0x2eb6 <vTaskRemoveFromUnorderedEventList+0x108>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <xYieldPendings>
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <vTaskSetTimeOutState>:
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
    taskENTER_CRITICAL();
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	0f 92       	push	r0
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
    2ec2:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <xNumOfOverflows>
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	20 83       	st	Z, r18
        pxTimeOut->xTimeOnEntering = xTickCount;
    2eca:	20 91 40 07 	lds	r18, 0x0740	; 0x800740 <xTickCount>
    2ece:	30 91 41 07 	lds	r19, 0x0741	; 0x800741 <xTickCount+0x1>
    2ed2:	32 83       	std	Z+2, r19	; 0x02
    2ed4:	21 83       	std	Z+1, r18	; 0x01
    }
    taskEXIT_CRITICAL();
    2ed6:	0f 90       	pop	r0
    2ed8:	0f be       	out	0x3f, r0	; 63

    traceRETURN_vTaskSetTimeOutState();
}
    2eda:	08 95       	ret

00002edc <vTaskInternalSetTimeOutState>:
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    2edc:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <xNumOfOverflows>
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    2ee4:	20 91 40 07 	lds	r18, 0x0740	; 0x800740 <xTickCount>
    2ee8:	30 91 41 07 	lds	r19, 0x0741	; 0x800741 <xTickCount+0x1>
    2eec:	32 83       	std	Z+2, r19	; 0x02
    2eee:	21 83       	std	Z+1, r18	; 0x01

    traceRETURN_vTaskInternalSetTimeOutState();
}
    2ef0:	08 95       	ret

00002ef2 <xTaskCheckForTimeOut>:
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    2ef8:	20 91 40 07 	lds	r18, 0x0740	; 0x800740 <xTickCount>
    2efc:	30 91 41 07 	lds	r19, 0x0741	; 0x800741 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2f00:	dc 01       	movw	r26, r24
    2f02:	11 96       	adiw	r26, 0x01	; 1
    2f04:	4d 91       	ld	r20, X+
    2f06:	5c 91       	ld	r21, X
    2f08:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
    2f0a:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <xNumOfOverflows>
    2f0e:	fc 91       	ld	r31, X
    2f10:	fe 17       	cp	r31, r30
    2f12:	51 f0       	breq	.+20     	; 0x2f28 <xTaskCheckForTimeOut+0x36>
    2f14:	24 17       	cp	r18, r20
    2f16:	35 07       	cpc	r19, r21
    2f18:	38 f0       	brcs	.+14     	; 0x2f28 <xTaskCheckForTimeOut+0x36>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    2f1a:	fb 01       	movw	r30, r22
    2f1c:	11 82       	std	Z+1, r1	; 0x01
    2f1e:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    2f22:	0f 90       	pop	r0
    2f24:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
}
    2f26:	08 95       	ret

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2f28:	24 1b       	sub	r18, r20
    2f2a:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait )
    2f2c:	db 01       	movw	r26, r22
    2f2e:	4d 91       	ld	r20, X+
    2f30:	5c 91       	ld	r21, X
    2f32:	24 17       	cp	r18, r20
    2f34:	35 07       	cpc	r19, r21
    2f36:	88 f7       	brcc	.-30     	; 0x2f1a <xTaskCheckForTimeOut+0x28>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    2f38:	42 1b       	sub	r20, r18
    2f3a:	53 0b       	sbc	r21, r19
    2f3c:	fb 01       	movw	r30, r22
    2f3e:	51 83       	std	Z+1, r21	; 0x01
    2f40:	40 83       	st	Z, r20
            vTaskInternalSetTimeOutState( pxTimeOut );
    2f42:	0e 94 6e 17 	call	0x2edc	; 0x2edc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	ec cf       	rjmp	.-40     	; 0x2f22 <xTaskCheckForTimeOut+0x30>

00002f4a <vTaskMissedYield>:
void vTaskMissedYield( void )
{
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <xYieldPendings>

    traceRETURN_vTaskMissedYield();
}
    2f50:	08 95       	ret

00002f52 <xTaskGetCurrentTaskHandle>:
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
    2f52:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    2f56:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
        }
    2f5a:	08 95       	ret

00002f5c <xTaskGetCurrentTaskHandleForCore>:
    {
        TaskHandle_t xReturn = NULL;

        traceENTER_xTaskGetCurrentTaskHandleForCore( xCoreID );

        if( taskVALID_CORE_ID( xCoreID ) != pdFALSE )
    2f5c:	81 11       	cpse	r24, r1
    2f5e:	05 c0       	rjmp	.+10     	; 0x2f6a <xTaskGetCurrentTaskHandleForCore+0xe>
        {
            #if ( configNUMBER_OF_CORES == 1 )
                xReturn = pxCurrentTCB;
    2f60:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    2f64:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2f68:	08 95       	ret
        }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    TaskHandle_t xTaskGetCurrentTaskHandleForCore( BaseType_t xCoreID )
    {
        TaskHandle_t xReturn = NULL;
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTaskGetCurrentTaskHandleForCore( xReturn );

        return xReturn;
    }
    2f6e:	08 95       	ret

00002f70 <uxTaskResetEventItemValue>:
{
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    2f70:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    2f74:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2f78:	84 85       	ldd	r24, Z+12	; 0x0c
    2f7a:	95 85       	ldd	r25, Z+13	; 0x0d

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
    2f7c:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
    2f80:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2f84:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    2f88:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2f8c:	56 96       	adiw	r26, 0x16	; 22
    2f8e:	4c 91       	ld	r20, X
    2f90:	24 e0       	ldi	r18, 0x04	; 4
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	24 1b       	sub	r18, r20
    2f96:	31 09       	sbc	r19, r1
    2f98:	35 87       	std	Z+13, r19	; 0x0d
    2f9a:	24 87       	std	Z+12, r18	; 0x0c

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
}
    2f9c:	08 95       	ret

00002f9e <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
    2f9e:	cf 92       	push	r12
    2fa0:	df 92       	push	r13
    2fa2:	ef 92       	push	r14
    2fa4:	ff 92       	push	r15
    2fa6:	0f 93       	push	r16
    2fa8:	1f 93       	push	r17
    2faa:	cf 93       	push	r28
    2fac:	df 93       	push	r29
    2fae:	c8 2f       	mov	r28, r24
    2fb0:	e6 2e       	mov	r14, r22
    2fb2:	6a 01       	movw	r12, r20

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    2fb4:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	0f 92       	push	r0
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
    2fbe:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    2fc2:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2fc6:	d0 e0       	ldi	r29, 0x00	; 0
    2fc8:	8e 01       	movw	r16, r28
    2fca:	00 0f       	add	r16, r16
    2fcc:	11 1f       	adc	r17, r17
    2fce:	00 0f       	add	r16, r16
    2fd0:	11 1f       	adc	r17, r17
    2fd2:	e0 0f       	add	r30, r16
    2fd4:	f1 1f       	adc	r31, r17
    2fd6:	81 a1       	ldd	r24, Z+33	; 0x21
    2fd8:	92 a1       	ldd	r25, Z+34	; 0x22
    2fda:	a3 a1       	ldd	r26, Z+35	; 0x23
    2fdc:	b4 a1       	ldd	r27, Z+36	; 0x24
    2fde:	89 2b       	or	r24, r25
    2fe0:	8a 2b       	or	r24, r26
    2fe2:	8b 2b       	or	r24, r27
    2fe4:	69 f4       	brne	.+26     	; 0x3000 <ulTaskGenericNotifyTake+0x62>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    2fe6:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    2fea:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    2fee:	ec 0f       	add	r30, r28
    2ff0:	fd 1f       	adc	r31, r29
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    2ff6:	ff 24       	eor	r15, r15
    2ff8:	f3 94       	inc	r15
    2ffa:	c1 14       	cp	r12, r1
    2ffc:	d1 04       	cpc	r13, r1
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <ulTaskGenericNotifyTake+0x64>
    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
    3000:	f1 2c       	mov	r15, r1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3002:	0f 90       	pop	r0
    3004:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    3006:	21 e0       	ldi	r18, 0x01	; 1
    3008:	f2 12       	cpse	r15, r18
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <ulTaskGenericNotifyTake+0x74>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    300c:	c6 01       	movw	r24, r12
    300e:	0e 94 00 11 	call	0x2200	; 0x2200 <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3012:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    3016:	91 e0       	ldi	r25, 0x01	; 1
    3018:	f9 12       	cpse	r15, r25
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <ulTaskGenericNotifyTake+0x86>
    301c:	81 11       	cpse	r24, r1
    301e:	02 c0       	rjmp	.+4      	; 0x3024 <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
    3020:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    302a:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    302e:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    3032:	e0 0f       	add	r30, r16
    3034:	f1 1f       	adc	r31, r17
    3036:	61 a1       	ldd	r22, Z+33	; 0x21
    3038:	72 a1       	ldd	r23, Z+34	; 0x22
    303a:	83 a1       	ldd	r24, Z+35	; 0x23
    303c:	94 a1       	ldd	r25, Z+36	; 0x24

            if( ulReturn != 0U )
    303e:	61 15       	cp	r22, r1
    3040:	71 05       	cpc	r23, r1
    3042:	81 05       	cpc	r24, r1
    3044:	91 05       	cpc	r25, r1
    3046:	69 f0       	breq	.+26     	; 0x3062 <ulTaskGenericNotifyTake+0xc4>
            {
                if( xClearCountOnExit != pdFALSE )
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3048:	20 91 90 07 	lds	r18, 0x0790	; 0x800790 <pxCurrentTCB>
    304c:	30 91 91 07 	lds	r19, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    3050:	02 0f       	add	r16, r18
    3052:	13 1f       	adc	r17, r19
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];

            if( ulReturn != 0U )
            {
                if( xClearCountOnExit != pdFALSE )
    3054:	ee 20       	and	r14, r14
    3056:	b9 f0       	breq	.+46     	; 0x3086 <ulTaskGenericNotifyTake+0xe8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3058:	f8 01       	movw	r30, r16
    305a:	11 a2       	std	Z+33, r1	; 0x21
    305c:	12 a2       	std	Z+34, r1	; 0x22
    305e:	13 a2       	std	Z+35, r1	; 0x23
    3060:	14 a2       	std	Z+36, r1	; 0x24
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    3062:	20 91 90 07 	lds	r18, 0x0790	; 0x800790 <pxCurrentTCB>
    3066:	30 91 91 07 	lds	r19, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    306a:	c2 0f       	add	r28, r18
    306c:	d3 1f       	adc	r29, r19
    306e:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    3070:	0f 90       	pop	r0
    3072:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
    }
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	ff 90       	pop	r15
    307e:	ef 90       	pop	r14
    3080:	df 90       	pop	r13
    3082:	cf 90       	pop	r12
    3084:	08 95       	ret
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
    3086:	6b 01       	movw	r12, r22
    3088:	7c 01       	movw	r14, r24
    308a:	f1 e0       	ldi	r31, 0x01	; 1
    308c:	cf 1a       	sub	r12, r31
    308e:	d1 08       	sbc	r13, r1
    3090:	e1 08       	sbc	r14, r1
    3092:	f1 08       	sbc	r15, r1
    3094:	f8 01       	movw	r30, r16
    3096:	c1 a2       	std	Z+33, r12	; 0x21
    3098:	d2 a2       	std	Z+34, r13	; 0x22
    309a:	e3 a2       	std	Z+35, r14	; 0x23
    309c:	f4 a2       	std	Z+36, r15	; 0x24
    309e:	e1 cf       	rjmp	.-62     	; 0x3062 <ulTaskGenericNotifyTake+0xc4>

000030a0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
    30a0:	4f 92       	push	r4
    30a2:	5f 92       	push	r5
    30a4:	6f 92       	push	r6
    30a6:	7f 92       	push	r7
    30a8:	8f 92       	push	r8
    30aa:	9f 92       	push	r9
    30ac:	af 92       	push	r10
    30ae:	bf 92       	push	r11
    30b0:	cf 92       	push	r12
    30b2:	df 92       	push	r13
    30b4:	ef 92       	push	r14
    30b6:	ff 92       	push	r15
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	cf 93       	push	r28
    30be:	df 93       	push	r29
    30c0:	c8 2f       	mov	r28, r24
    30c2:	2a 01       	movw	r4, r20
    30c4:	3b 01       	movw	r6, r22
    30c6:	48 01       	movw	r8, r16
    30c8:	59 01       	movw	r10, r18

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    30ca:	0e 94 51 13 	call	0x26a2	; 0x26a2 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	0f 92       	push	r0
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    30d4:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    30d8:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    30dc:	d0 e0       	ldi	r29, 0x00	; 0
    30de:	ec 0f       	add	r30, r28
    30e0:	fd 1f       	adc	r31, r29
    30e2:	85 a1       	ldd	r24, Z+37	; 0x25
    30e4:	82 30       	cpi	r24, 0x02	; 2
    30e6:	39 f1       	breq	.+78     	; 0x3136 <xTaskGenericNotifyWait+0x96>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
    30e8:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    30ec:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    30f0:	ce 01       	movw	r24, r28
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	e8 0f       	add	r30, r24
    30fc:	f9 1f       	adc	r31, r25
    30fe:	81 a1       	ldd	r24, Z+33	; 0x21
    3100:	92 a1       	ldd	r25, Z+34	; 0x22
    3102:	a3 a1       	ldd	r26, Z+35	; 0x23
    3104:	b4 a1       	ldd	r27, Z+36	; 0x24
    3106:	40 94       	com	r4
    3108:	50 94       	com	r5
    310a:	60 94       	com	r6
    310c:	70 94       	com	r7
    310e:	84 21       	and	r24, r4
    3110:	95 21       	and	r25, r5
    3112:	a6 21       	and	r26, r6
    3114:	b7 21       	and	r27, r7
    3116:	81 a3       	std	Z+33, r24	; 0x21
    3118:	92 a3       	std	Z+34, r25	; 0x22
    311a:	a3 a3       	std	Z+35, r26	; 0x23
    311c:	b4 a3       	std	Z+36, r27	; 0x24

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    311e:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    3122:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    3126:	ec 0f       	add	r30, r28
    3128:	fd 1f       	adc	r31, r29
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    312e:	11 e0       	ldi	r17, 0x01	; 1
    3130:	c1 14       	cp	r12, r1
    3132:	d1 04       	cpc	r13, r1
    3134:	09 f4       	brne	.+2      	; 0x3138 <xTaskGenericNotifyWait+0x98>
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
    3136:	10 e0       	ldi	r17, 0x00	; 0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3138:	0f 90       	pop	r0
    313a:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    313c:	11 30       	cpi	r17, 0x01	; 1
    313e:	19 f4       	brne	.+6      	; 0x3146 <xTaskGenericNotifyWait+0xa6>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3140:	c6 01       	movw	r24, r12
    3142:	0e 94 00 11 	call	0x2200	; 0x2200 <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3146:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    314a:	11 30       	cpi	r17, 0x01	; 1
    314c:	21 f4       	brne	.+8      	; 0x3156 <xTaskGenericNotifyWait+0xb6>
    314e:	81 11       	cpse	r24, r1
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <xTaskGenericNotifyWait+0xb6>
        {
            taskYIELD_WITHIN_API();
    3152:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
    315c:	e1 14       	cp	r14, r1
    315e:	f1 04       	cpc	r15, r1
    3160:	a1 f0       	breq	.+40     	; 0x318a <xTaskGenericNotifyWait+0xea>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    3162:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    3166:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    316a:	ce 01       	movw	r24, r28
    316c:	88 0f       	add	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	88 0f       	add	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	e8 0f       	add	r30, r24
    3176:	f9 1f       	adc	r31, r25
    3178:	81 a1       	ldd	r24, Z+33	; 0x21
    317a:	92 a1       	ldd	r25, Z+34	; 0x22
    317c:	a3 a1       	ldd	r26, Z+35	; 0x23
    317e:	b4 a1       	ldd	r27, Z+36	; 0x24
    3180:	f7 01       	movw	r30, r14
    3182:	80 83       	st	Z, r24
    3184:	91 83       	std	Z+1, r25	; 0x01
    3186:	a2 83       	std	Z+2, r26	; 0x02
    3188:	b3 83       	std	Z+3, r27	; 0x03

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    318a:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    318e:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    3192:	ec 0f       	add	r30, r28
    3194:	fd 1f       	adc	r31, r29
    3196:	85 a1       	ldd	r24, Z+37	; 0x25
    3198:	82 30       	cpi	r24, 0x02	; 2
    319a:	b1 f5       	brne	.+108    	; 0x3208 <xTaskGenericNotifyWait+0x168>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
    319c:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    31a0:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    31a4:	ce 01       	movw	r24, r28
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	e8 0f       	add	r30, r24
    31b0:	f9 1f       	adc	r31, r25
    31b2:	81 a1       	ldd	r24, Z+33	; 0x21
    31b4:	92 a1       	ldd	r25, Z+34	; 0x22
    31b6:	a3 a1       	ldd	r26, Z+35	; 0x23
    31b8:	b4 a1       	ldd	r27, Z+36	; 0x24
    31ba:	80 94       	com	r8
    31bc:	90 94       	com	r9
    31be:	a0 94       	com	r10
    31c0:	b0 94       	com	r11
    31c2:	88 21       	and	r24, r8
    31c4:	99 21       	and	r25, r9
    31c6:	aa 21       	and	r26, r10
    31c8:	bb 21       	and	r27, r11
    31ca:	81 a3       	std	Z+33, r24	; 0x21
    31cc:	92 a3       	std	Z+34, r25	; 0x22
    31ce:	a3 a3       	std	Z+35, r26	; 0x23
    31d0:	b4 a3       	std	Z+36, r27	; 0x24
                xReturn = pdTRUE;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    31d4:	20 91 90 07 	lds	r18, 0x0790	; 0x800790 <pxCurrentTCB>
    31d8:	30 91 91 07 	lds	r19, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    31dc:	c2 0f       	add	r28, r18
    31de:	d3 1f       	adc	r29, r19
    31e0:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    31e2:	0f 90       	pop	r0
    31e4:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
    }
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	bf 90       	pop	r11
    31f8:	af 90       	pop	r10
    31fa:	9f 90       	pop	r9
    31fc:	8f 90       	pop	r8
    31fe:	7f 90       	pop	r7
    3200:	6f 90       	pop	r6
    3202:	5f 90       	pop	r5
    3204:	4f 90       	pop	r4
    3206:	08 95       	ret
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	e4 cf       	rjmp	.-56     	; 0x31d4 <xTaskGenericNotifyWait+0x134>

0000320c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
    320c:	8f 92       	push	r8
    320e:	9f 92       	push	r9
    3210:	af 92       	push	r10
    3212:	bf 92       	push	r11
    3214:	cf 92       	push	r12
    3216:	df 92       	push	r13
    3218:	ef 92       	push	r14
    321a:	ff 92       	push	r15
    321c:	0f 93       	push	r16
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	dc 01       	movw	r26, r24

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;

        taskENTER_CRITICAL();
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	0f 92       	push	r0
    322a:	70 e0       	ldi	r23, 0x00	; 0
        {
            if( pulPreviousNotificationValue != NULL )
    322c:	e1 14       	cp	r14, r1
    322e:	f1 04       	cpc	r15, r1
    3230:	81 f0       	breq	.+32     	; 0x3252 <xTaskGenericNotify+0x46>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    3232:	fb 01       	movw	r30, r22
    3234:	ee 0f       	add	r30, r30
    3236:	ff 1f       	adc	r31, r31
    3238:	ee 0f       	add	r30, r30
    323a:	ff 1f       	adc	r31, r31
    323c:	e8 0f       	add	r30, r24
    323e:	f9 1f       	adc	r31, r25
    3240:	81 a0       	ldd	r8, Z+33	; 0x21
    3242:	92 a0       	ldd	r9, Z+34	; 0x22
    3244:	a3 a0       	ldd	r10, Z+35	; 0x23
    3246:	b4 a0       	ldd	r11, Z+36	; 0x24
    3248:	e7 01       	movw	r28, r14
    324a:	88 82       	st	Y, r8
    324c:	99 82       	std	Y+1, r9	; 0x01
    324e:	aa 82       	std	Y+2, r10	; 0x02
    3250:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    3252:	fd 01       	movw	r30, r26
    3254:	e6 0f       	add	r30, r22
    3256:	f7 1f       	adc	r31, r23
    3258:	85 a1       	ldd	r24, Z+37	; 0x25

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    325a:	92 e0       	ldi	r25, 0x02	; 2
    325c:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    325e:	02 30       	cpi	r16, 0x02	; 2
    3260:	e1 f1       	breq	.+120    	; 0x32da <xTaskGenericNotify+0xce>
    3262:	a0 f4       	brcc	.+40     	; 0x328c <xTaskGenericNotify+0x80>
    3264:	01 30       	cpi	r16, 0x01	; 1
    3266:	29 f1       	breq	.+74     	; 0x32b2 <xTaskGenericNotify+0xa6>

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    3268:	81 30       	cpi	r24, 0x01	; 1
    326a:	09 f4       	brne	.+2      	; 0x326e <xTaskGenericNotify+0x62>
    326c:	4a c0       	rjmp	.+148    	; 0x3302 <xTaskGenericNotify+0xf6>
    326e:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    3270:	0f 90       	pop	r0
    3272:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
    }
    3274:	df 91       	pop	r29
    3276:	cf 91       	pop	r28
    3278:	0f 91       	pop	r16
    327a:	ff 90       	pop	r15
    327c:	ef 90       	pop	r14
    327e:	df 90       	pop	r13
    3280:	cf 90       	pop	r12
    3282:	bf 90       	pop	r11
    3284:	af 90       	pop	r10
    3286:	9f 90       	pop	r9
    3288:	8f 90       	pop	r8
    328a:	08 95       	ret

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    328c:	03 30       	cpi	r16, 0x03	; 3
    328e:	29 f0       	breq	.+10     	; 0x329a <xTaskGenericNotify+0x8e>
    3290:	04 30       	cpi	r16, 0x04	; 4
    3292:	51 f7       	brne	.-44     	; 0x3268 <xTaskGenericNotify+0x5c>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    3294:	82 30       	cpi	r24, 0x02	; 2
    3296:	09 f4       	brne	.+2      	; 0x329a <xTaskGenericNotify+0x8e>
    3298:	97 c0       	rjmp	.+302    	; 0x33c8 <xTaskGenericNotify+0x1bc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    329a:	66 0f       	add	r22, r22
    329c:	77 1f       	adc	r23, r23
    329e:	66 0f       	add	r22, r22
    32a0:	77 1f       	adc	r23, r23
    32a2:	fd 01       	movw	r30, r26
    32a4:	e6 0f       	add	r30, r22
    32a6:	f7 1f       	adc	r31, r23
    32a8:	21 a3       	std	Z+33, r18	; 0x21
    32aa:	32 a3       	std	Z+34, r19	; 0x22
    32ac:	43 a3       	std	Z+35, r20	; 0x23
    32ae:	54 a3       	std	Z+36, r21	; 0x24
    32b0:	db cf       	rjmp	.-74     	; 0x3268 <xTaskGenericNotify+0x5c>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    32b2:	66 0f       	add	r22, r22
    32b4:	77 1f       	adc	r23, r23
    32b6:	66 0f       	add	r22, r22
    32b8:	77 1f       	adc	r23, r23
    32ba:	fd 01       	movw	r30, r26
    32bc:	e6 0f       	add	r30, r22
    32be:	f7 1f       	adc	r31, r23
    32c0:	c1 a0       	ldd	r12, Z+33	; 0x21
    32c2:	d2 a0       	ldd	r13, Z+34	; 0x22
    32c4:	e3 a0       	ldd	r14, Z+35	; 0x23
    32c6:	f4 a0       	ldd	r15, Z+36	; 0x24
    32c8:	c2 2a       	or	r12, r18
    32ca:	d3 2a       	or	r13, r19
    32cc:	e4 2a       	or	r14, r20
    32ce:	f5 2a       	or	r15, r21
    32d0:	c1 a2       	std	Z+33, r12	; 0x21
    32d2:	d2 a2       	std	Z+34, r13	; 0x22
    32d4:	e3 a2       	std	Z+35, r14	; 0x23
    32d6:	f4 a2       	std	Z+36, r15	; 0x24
                    break;
    32d8:	c7 cf       	rjmp	.-114    	; 0x3268 <xTaskGenericNotify+0x5c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    32da:	66 0f       	add	r22, r22
    32dc:	77 1f       	adc	r23, r23
    32de:	66 0f       	add	r22, r22
    32e0:	77 1f       	adc	r23, r23
    32e2:	fd 01       	movw	r30, r26
    32e4:	e6 0f       	add	r30, r22
    32e6:	f7 1f       	adc	r31, r23
    32e8:	41 a1       	ldd	r20, Z+33	; 0x21
    32ea:	52 a1       	ldd	r21, Z+34	; 0x22
    32ec:	63 a1       	ldd	r22, Z+35	; 0x23
    32ee:	74 a1       	ldd	r23, Z+36	; 0x24
    32f0:	4f 5f       	subi	r20, 0xFF	; 255
    32f2:	5f 4f       	sbci	r21, 0xFF	; 255
    32f4:	6f 4f       	sbci	r22, 0xFF	; 255
    32f6:	7f 4f       	sbci	r23, 0xFF	; 255
    32f8:	41 a3       	std	Z+33, r20	; 0x21
    32fa:	52 a3       	std	Z+34, r21	; 0x22
    32fc:	63 a3       	std	Z+35, r22	; 0x23
    32fe:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    3300:	b3 cf       	rjmp	.-154    	; 0x3268 <xTaskGenericNotify+0x5c>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    3302:	1a 96       	adiw	r26, 0x0a	; 10
    3304:	ed 91       	ld	r30, X+
    3306:	fc 91       	ld	r31, X
    3308:	1b 97       	sbiw	r26, 0x0b	; 11
    330a:	14 96       	adiw	r26, 0x04	; 4
    330c:	8d 91       	ld	r24, X+
    330e:	9c 91       	ld	r25, X
    3310:	15 97       	sbiw	r26, 0x05	; 5
    3312:	16 96       	adiw	r26, 0x06	; 6
    3314:	2d 91       	ld	r18, X+
    3316:	3c 91       	ld	r19, X
    3318:	17 97       	sbiw	r26, 0x07	; 7
    331a:	ec 01       	movw	r28, r24
    331c:	3d 83       	std	Y+5, r19	; 0x05
    331e:	2c 83       	std	Y+4, r18	; 0x04
    3320:	16 96       	adiw	r26, 0x06	; 6
    3322:	cd 91       	ld	r28, X+
    3324:	dc 91       	ld	r29, X
    3326:	17 97       	sbiw	r26, 0x07	; 7
    3328:	9b 83       	std	Y+3, r25	; 0x03
    332a:	8a 83       	std	Y+2, r24	; 0x02
    332c:	9d 01       	movw	r18, r26
    332e:	2e 5f       	subi	r18, 0xFE	; 254
    3330:	3f 4f       	sbci	r19, 0xFF	; 255
    3332:	81 81       	ldd	r24, Z+1	; 0x01
    3334:	92 81       	ldd	r25, Z+2	; 0x02
    3336:	82 17       	cp	r24, r18
    3338:	93 07       	cpc	r25, r19
    333a:	11 f4       	brne	.+4      	; 0x3340 <xTaskGenericNotify+0x134>
    333c:	d2 83       	std	Z+2, r29	; 0x02
    333e:	c1 83       	std	Z+1, r28	; 0x01
    3340:	1b 96       	adiw	r26, 0x0b	; 11
    3342:	1c 92       	st	X, r1
    3344:	1e 92       	st	-X, r1
    3346:	1a 97       	sbiw	r26, 0x0a	; 10
    3348:	80 81       	ld	r24, Z
    334a:	81 50       	subi	r24, 0x01	; 1
    334c:	80 83       	st	Z, r24
                prvAddTaskToReadyList( pxTCB );
    334e:	56 96       	adiw	r26, 0x16	; 22
    3350:	cc 91       	ld	r28, X
    3352:	56 97       	sbiw	r26, 0x16	; 22
    3354:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxTopReadyPriority>
    3358:	8c 17       	cp	r24, r28
    335a:	10 f4       	brcc	.+4      	; 0x3360 <xTaskGenericNotify+0x154>
    335c:	c0 93 3f 07 	sts	0x073F, r28	; 0x80073f <uxTopReadyPriority>
    3360:	49 e0       	ldi	r20, 0x09	; 9
    3362:	4c 9f       	mul	r20, r28
    3364:	e0 01       	movw	r28, r0
    3366:	11 24       	eor	r1, r1
    3368:	c4 59       	subi	r28, 0x94	; 148
    336a:	d8 4f       	sbci	r29, 0xF8	; 248
    336c:	09 80       	ldd	r0, Y+1	; 0x01
    336e:	da 81       	ldd	r29, Y+2	; 0x02
    3370:	c0 2d       	mov	r28, r0
    3372:	15 96       	adiw	r26, 0x05	; 5
    3374:	dc 93       	st	X, r29
    3376:	ce 93       	st	-X, r28
    3378:	14 97       	sbiw	r26, 0x04	; 4
    337a:	8c 81       	ldd	r24, Y+4	; 0x04
    337c:	9d 81       	ldd	r25, Y+5	; 0x05
    337e:	17 96       	adiw	r26, 0x07	; 7
    3380:	9c 93       	st	X, r25
    3382:	8e 93       	st	-X, r24
    3384:	16 97       	sbiw	r26, 0x06	; 6
    3386:	8c 81       	ldd	r24, Y+4	; 0x04
    3388:	9d 81       	ldd	r25, Y+5	; 0x05
    338a:	fc 01       	movw	r30, r24
    338c:	33 83       	std	Z+3, r19	; 0x03
    338e:	22 83       	std	Z+2, r18	; 0x02
    3390:	3d 83       	std	Y+5, r19	; 0x05
    3392:	2c 83       	std	Y+4, r18	; 0x04
    3394:	56 96       	adiw	r26, 0x16	; 22
    3396:	9c 91       	ld	r25, X
    3398:	56 97       	sbiw	r26, 0x16	; 22
    339a:	94 9f       	mul	r25, r20
    339c:	f0 01       	movw	r30, r0
    339e:	11 24       	eor	r1, r1
    33a0:	e4 59       	subi	r30, 0x94	; 148
    33a2:	f8 4f       	sbci	r31, 0xF8	; 248
    33a4:	1b 96       	adiw	r26, 0x0b	; 11
    33a6:	fc 93       	st	X, r31
    33a8:	ee 93       	st	-X, r30
    33aa:	1a 97       	sbiw	r26, 0x0a	; 10
    33ac:	80 81       	ld	r24, Z
    33ae:	8f 5f       	subi	r24, 0xFF	; 255
    33b0:	80 83       	st	Z, r24
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
    33b2:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    33b6:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    33ba:	86 89       	ldd	r24, Z+22	; 0x16
    33bc:	89 17       	cp	r24, r25
    33be:	08 f0       	brcs	.+2      	; 0x33c2 <xTaskGenericNotify+0x1b6>
    33c0:	56 cf       	rjmp	.-340    	; 0x326e <xTaskGenericNotify+0x62>
    33c2:	0e 94 f5 06 	call	0xdea	; 0xdea <vPortYield>
    33c6:	53 cf       	rjmp	.-346    	; 0x326e <xTaskGenericNotify+0x62>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	52 cf       	rjmp	.-348    	; 0x3270 <xTaskGenericNotify+0x64>

000033cc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    33cc:	8f 92       	push	r8
    33ce:	9f 92       	push	r9
    33d0:	af 92       	push	r10
    33d2:	bf 92       	push	r11
    33d4:	cf 92       	push	r12
    33d6:	df 92       	push	r13
    33d8:	ef 92       	push	r14
    33da:	ff 92       	push	r15
    33dc:	0f 93       	push	r16
    33de:	cf 93       	push	r28
    33e0:	df 93       	push	r29
    33e2:	dc 01       	movw	r26, r24
    33e4:	70 e0       	ldi	r23, 0x00	; 0
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            if( pulPreviousNotificationValue != NULL )
    33e6:	e1 14       	cp	r14, r1
    33e8:	f1 04       	cpc	r15, r1
    33ea:	81 f0       	breq	.+32     	; 0x340c <xTaskGenericNotifyFromISR+0x40>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    33ec:	fb 01       	movw	r30, r22
    33ee:	ee 0f       	add	r30, r30
    33f0:	ff 1f       	adc	r31, r31
    33f2:	ee 0f       	add	r30, r30
    33f4:	ff 1f       	adc	r31, r31
    33f6:	e8 0f       	add	r30, r24
    33f8:	f9 1f       	adc	r31, r25
    33fa:	81 a0       	ldd	r8, Z+33	; 0x21
    33fc:	92 a0       	ldd	r9, Z+34	; 0x22
    33fe:	a3 a0       	ldd	r10, Z+35	; 0x23
    3400:	b4 a0       	ldd	r11, Z+36	; 0x24
    3402:	e7 01       	movw	r28, r14
    3404:	88 82       	st	Y, r8
    3406:	99 82       	std	Y+1, r9	; 0x01
    3408:	aa 82       	std	Y+2, r10	; 0x02
    340a:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    340c:	fd 01       	movw	r30, r26
    340e:	e6 0f       	add	r30, r22
    3410:	f7 1f       	adc	r31, r23
    3412:	85 a1       	ldd	r24, Z+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    3414:	92 e0       	ldi	r25, 0x02	; 2
    3416:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    3418:	02 30       	cpi	r16, 0x02	; 2
    341a:	d1 f1       	breq	.+116    	; 0x3490 <xTaskGenericNotifyFromISR+0xc4>
    341c:	90 f4       	brcc	.+36     	; 0x3442 <xTaskGenericNotifyFromISR+0x76>
    341e:	01 30       	cpi	r16, 0x01	; 1
    3420:	19 f1       	breq	.+70     	; 0x3468 <xTaskGenericNotifyFromISR+0x9c>

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    3422:	81 30       	cpi	r24, 0x01	; 1
    3424:	09 f4       	brne	.+2      	; 0x3428 <xTaskGenericNotifyFromISR+0x5c>
    3426:	48 c0       	rjmp	.+144    	; 0x34b8 <xTaskGenericNotifyFromISR+0xec>
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    3428:	81 e0       	ldi	r24, 0x01	; 1
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    }
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	0f 91       	pop	r16
    3430:	ff 90       	pop	r15
    3432:	ef 90       	pop	r14
    3434:	df 90       	pop	r13
    3436:	cf 90       	pop	r12
    3438:	bf 90       	pop	r11
    343a:	af 90       	pop	r10
    343c:	9f 90       	pop	r9
    343e:	8f 90       	pop	r8
    3440:	08 95       	ret
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    3442:	03 30       	cpi	r16, 0x03	; 3
    3444:	29 f0       	breq	.+10     	; 0x3450 <xTaskGenericNotifyFromISR+0x84>
    3446:	04 30       	cpi	r16, 0x04	; 4
    3448:	61 f7       	brne	.-40     	; 0x3422 <xTaskGenericNotifyFromISR+0x56>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    344a:	82 30       	cpi	r24, 0x02	; 2
    344c:	09 f4       	brne	.+2      	; 0x3450 <xTaskGenericNotifyFromISR+0x84>
    344e:	c5 c0       	rjmp	.+394    	; 0x35da <xTaskGenericNotifyFromISR+0x20e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    3450:	66 0f       	add	r22, r22
    3452:	77 1f       	adc	r23, r23
    3454:	66 0f       	add	r22, r22
    3456:	77 1f       	adc	r23, r23
    3458:	fd 01       	movw	r30, r26
    345a:	e6 0f       	add	r30, r22
    345c:	f7 1f       	adc	r31, r23
    345e:	21 a3       	std	Z+33, r18	; 0x21
    3460:	32 a3       	std	Z+34, r19	; 0x22
    3462:	43 a3       	std	Z+35, r20	; 0x23
    3464:	54 a3       	std	Z+36, r21	; 0x24
    3466:	dd cf       	rjmp	.-70     	; 0x3422 <xTaskGenericNotifyFromISR+0x56>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    3468:	66 0f       	add	r22, r22
    346a:	77 1f       	adc	r23, r23
    346c:	66 0f       	add	r22, r22
    346e:	77 1f       	adc	r23, r23
    3470:	fd 01       	movw	r30, r26
    3472:	e6 0f       	add	r30, r22
    3474:	f7 1f       	adc	r31, r23
    3476:	81 a0       	ldd	r8, Z+33	; 0x21
    3478:	92 a0       	ldd	r9, Z+34	; 0x22
    347a:	a3 a0       	ldd	r10, Z+35	; 0x23
    347c:	b4 a0       	ldd	r11, Z+36	; 0x24
    347e:	82 2a       	or	r8, r18
    3480:	93 2a       	or	r9, r19
    3482:	a4 2a       	or	r10, r20
    3484:	b5 2a       	or	r11, r21
    3486:	81 a2       	std	Z+33, r8	; 0x21
    3488:	92 a2       	std	Z+34, r9	; 0x22
    348a:	a3 a2       	std	Z+35, r10	; 0x23
    348c:	b4 a2       	std	Z+36, r11	; 0x24
                    break;
    348e:	c9 cf       	rjmp	.-110    	; 0x3422 <xTaskGenericNotifyFromISR+0x56>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    3490:	66 0f       	add	r22, r22
    3492:	77 1f       	adc	r23, r23
    3494:	66 0f       	add	r22, r22
    3496:	77 1f       	adc	r23, r23
    3498:	fd 01       	movw	r30, r26
    349a:	e6 0f       	add	r30, r22
    349c:	f7 1f       	adc	r31, r23
    349e:	41 a1       	ldd	r20, Z+33	; 0x21
    34a0:	52 a1       	ldd	r21, Z+34	; 0x22
    34a2:	63 a1       	ldd	r22, Z+35	; 0x23
    34a4:	74 a1       	ldd	r23, Z+36	; 0x24
    34a6:	4f 5f       	subi	r20, 0xFF	; 255
    34a8:	5f 4f       	sbci	r21, 0xFF	; 255
    34aa:	6f 4f       	sbci	r22, 0xFF	; 255
    34ac:	7f 4f       	sbci	r23, 0xFF	; 255
    34ae:	41 a3       	std	Z+33, r20	; 0x21
    34b0:	52 a3       	std	Z+34, r21	; 0x22
    34b2:	63 a3       	std	Z+35, r22	; 0x23
    34b4:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    34b6:	b5 cf       	rjmp	.-150    	; 0x3422 <xTaskGenericNotifyFromISR+0x56>
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    34b8:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <uxSchedulerSuspended>
    34bc:	81 11       	cpse	r24, r1
    34be:	6b c0       	rjmp	.+214    	; 0x3596 <xTaskGenericNotifyFromISR+0x1ca>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    34c0:	1a 96       	adiw	r26, 0x0a	; 10
    34c2:	ed 91       	ld	r30, X+
    34c4:	fc 91       	ld	r31, X
    34c6:	1b 97       	sbiw	r26, 0x0b	; 11
    34c8:	14 96       	adiw	r26, 0x04	; 4
    34ca:	8d 91       	ld	r24, X+
    34cc:	9c 91       	ld	r25, X
    34ce:	15 97       	sbiw	r26, 0x05	; 5
    34d0:	16 96       	adiw	r26, 0x06	; 6
    34d2:	2d 91       	ld	r18, X+
    34d4:	3c 91       	ld	r19, X
    34d6:	17 97       	sbiw	r26, 0x07	; 7
    34d8:	ec 01       	movw	r28, r24
    34da:	3d 83       	std	Y+5, r19	; 0x05
    34dc:	2c 83       	std	Y+4, r18	; 0x04
    34de:	16 96       	adiw	r26, 0x06	; 6
    34e0:	cd 91       	ld	r28, X+
    34e2:	dc 91       	ld	r29, X
    34e4:	17 97       	sbiw	r26, 0x07	; 7
    34e6:	9b 83       	std	Y+3, r25	; 0x03
    34e8:	8a 83       	std	Y+2, r24	; 0x02
    34ea:	9d 01       	movw	r18, r26
    34ec:	2e 5f       	subi	r18, 0xFE	; 254
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	81 81       	ldd	r24, Z+1	; 0x01
    34f2:	92 81       	ldd	r25, Z+2	; 0x02
    34f4:	82 17       	cp	r24, r18
    34f6:	93 07       	cpc	r25, r19
    34f8:	11 f4       	brne	.+4      	; 0x34fe <xTaskGenericNotifyFromISR+0x132>
    34fa:	d2 83       	std	Z+2, r29	; 0x02
    34fc:	c1 83       	std	Z+1, r28	; 0x01
    34fe:	1b 96       	adiw	r26, 0x0b	; 11
    3500:	1c 92       	st	X, r1
    3502:	1e 92       	st	-X, r1
    3504:	1a 97       	sbiw	r26, 0x0a	; 10
    3506:	80 81       	ld	r24, Z
    3508:	81 50       	subi	r24, 0x01	; 1
    350a:	80 83       	st	Z, r24
                    prvAddTaskToReadyList( pxTCB );
    350c:	56 96       	adiw	r26, 0x16	; 22
    350e:	cc 91       	ld	r28, X
    3510:	56 97       	sbiw	r26, 0x16	; 22
    3512:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxTopReadyPriority>
    3516:	8c 17       	cp	r24, r28
    3518:	10 f4       	brcc	.+4      	; 0x351e <xTaskGenericNotifyFromISR+0x152>
    351a:	c0 93 3f 07 	sts	0x073F, r28	; 0x80073f <uxTopReadyPriority>
    351e:	89 e0       	ldi	r24, 0x09	; 9
    3520:	8c 9f       	mul	r24, r28
    3522:	e0 01       	movw	r28, r0
    3524:	11 24       	eor	r1, r1
    3526:	c4 59       	subi	r28, 0x94	; 148
    3528:	d8 4f       	sbci	r29, 0xF8	; 248
    352a:	09 80       	ldd	r0, Y+1	; 0x01
    352c:	da 81       	ldd	r29, Y+2	; 0x02
    352e:	c0 2d       	mov	r28, r0
    3530:	15 96       	adiw	r26, 0x05	; 5
    3532:	dc 93       	st	X, r29
    3534:	ce 93       	st	-X, r28
    3536:	14 97       	sbiw	r26, 0x04	; 4
    3538:	4c 81       	ldd	r20, Y+4	; 0x04
    353a:	5d 81       	ldd	r21, Y+5	; 0x05
    353c:	17 96       	adiw	r26, 0x07	; 7
    353e:	5c 93       	st	X, r21
    3540:	4e 93       	st	-X, r20
    3542:	16 97       	sbiw	r26, 0x06	; 6
    3544:	ec 81       	ldd	r30, Y+4	; 0x04
    3546:	fd 81       	ldd	r31, Y+5	; 0x05
    3548:	33 83       	std	Z+3, r19	; 0x03
    354a:	22 83       	std	Z+2, r18	; 0x02
    354c:	3d 83       	std	Y+5, r19	; 0x05
    354e:	2c 83       	std	Y+4, r18	; 0x04
    3550:	56 96       	adiw	r26, 0x16	; 22
    3552:	ec 91       	ld	r30, X
    3554:	56 97       	sbiw	r26, 0x16	; 22
    3556:	e8 9f       	mul	r30, r24
    3558:	f0 01       	movw	r30, r0
    355a:	11 24       	eor	r1, r1
    355c:	e4 59       	subi	r30, 0x94	; 148
    355e:	f8 4f       	sbci	r31, 0xF8	; 248
    3560:	1b 96       	adiw	r26, 0x0b	; 11
    3562:	fc 93       	st	X, r31
    3564:	ee 93       	st	-X, r30
    3566:	1a 97       	sbiw	r26, 0x0a	; 10
    3568:	80 81       	ld	r24, Z
    356a:	8f 5f       	subi	r24, 0xFF	; 255
    356c:	80 83       	st	Z, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    356e:	e0 91 90 07 	lds	r30, 0x0790	; 0x800790 <pxCurrentTCB>
    3572:	f0 91 91 07 	lds	r31, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    3576:	56 96       	adiw	r26, 0x16	; 22
    3578:	9c 91       	ld	r25, X
    357a:	86 89       	ldd	r24, Z+22	; 0x16
    357c:	89 17       	cp	r24, r25
    357e:	08 f0       	brcs	.+2      	; 0x3582 <xTaskGenericNotifyFromISR+0x1b6>
    3580:	53 cf       	rjmp	.-346    	; 0x3428 <xTaskGenericNotifyFromISR+0x5c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    3582:	c1 14       	cp	r12, r1
    3584:	d1 04       	cpc	r13, r1
    3586:	19 f0       	breq	.+6      	; 0x358e <xTaskGenericNotifyFromISR+0x1c2>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	f6 01       	movw	r30, r12
    358c:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <xYieldPendings>
    3594:	4a cf       	rjmp	.-364    	; 0x342a <xTaskGenericNotifyFromISR+0x5e>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3596:	e0 91 4e 07 	lds	r30, 0x074E	; 0x80074e <xPendingReadyList+0x1>
    359a:	f0 91 4f 07 	lds	r31, 0x074F	; 0x80074f <xPendingReadyList+0x2>
    359e:	1f 96       	adiw	r26, 0x0f	; 15
    35a0:	fc 93       	st	X, r31
    35a2:	ee 93       	st	-X, r30
    35a4:	1e 97       	sbiw	r26, 0x0e	; 14
    35a6:	84 81       	ldd	r24, Z+4	; 0x04
    35a8:	95 81       	ldd	r25, Z+5	; 0x05
    35aa:	51 96       	adiw	r26, 0x11	; 17
    35ac:	9c 93       	st	X, r25
    35ae:	8e 93       	st	-X, r24
    35b0:	50 97       	sbiw	r26, 0x10	; 16
    35b2:	c4 81       	ldd	r28, Z+4	; 0x04
    35b4:	d5 81       	ldd	r29, Z+5	; 0x05
    35b6:	cd 01       	movw	r24, r26
    35b8:	0c 96       	adiw	r24, 0x0c	; 12
    35ba:	9b 83       	std	Y+3, r25	; 0x03
    35bc:	8a 83       	std	Y+2, r24	; 0x02
    35be:	95 83       	std	Z+5, r25	; 0x05
    35c0:	84 83       	std	Z+4, r24	; 0x04
    35c2:	8d e4       	ldi	r24, 0x4D	; 77
    35c4:	97 e0       	ldi	r25, 0x07	; 7
    35c6:	55 96       	adiw	r26, 0x15	; 21
    35c8:	9c 93       	st	X, r25
    35ca:	8e 93       	st	-X, r24
    35cc:	54 97       	sbiw	r26, 0x14	; 20
    35ce:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <xPendingReadyList>
    35d2:	8f 5f       	subi	r24, 0xFF	; 255
    35d4:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <xPendingReadyList>
    35d8:	ca cf       	rjmp	.-108    	; 0x356e <xTaskGenericNotifyFromISR+0x1a2>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    35da:	80 e0       	ldi	r24, 0x00	; 0
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    35dc:	26 cf       	rjmp	.-436    	; 0x342a <xTaskGenericNotifyFromISR+0x5e>

000035de <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
    35de:	0f 93       	push	r16
    35e0:	1f 93       	push	r17
    35e2:	cf 93       	push	r28
    35e4:	df 93       	push	r29
    35e6:	fc 01       	movw	r30, r24
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    35e8:	a6 2f       	mov	r26, r22
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	ec 01       	movw	r28, r24
    35ee:	ca 0f       	add	r28, r26
    35f0:	db 1f       	adc	r29, r27
    35f2:	8d a1       	ldd	r24, Y+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    35f4:	92 e0       	ldi	r25, 0x02	; 2
    35f6:	9d a3       	std	Y+37, r25	; 0x25

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    35f8:	aa 0f       	add	r26, r26
    35fa:	bb 1f       	adc	r27, r27
    35fc:	aa 0f       	add	r26, r26
    35fe:	bb 1f       	adc	r27, r27
    3600:	ae 0f       	add	r26, r30
    3602:	bf 1f       	adc	r27, r31
    3604:	91 96       	adiw	r26, 0x21	; 33
    3606:	0d 91       	ld	r16, X+
    3608:	1d 91       	ld	r17, X+
    360a:	2d 91       	ld	r18, X+
    360c:	3c 91       	ld	r19, X
    360e:	94 97       	sbiw	r26, 0x24	; 36
    3610:	0f 5f       	subi	r16, 0xFF	; 255
    3612:	1f 4f       	sbci	r17, 0xFF	; 255
    3614:	2f 4f       	sbci	r18, 0xFF	; 255
    3616:	3f 4f       	sbci	r19, 0xFF	; 255
    3618:	91 96       	adiw	r26, 0x21	; 33
    361a:	0d 93       	st	X+, r16
    361c:	1d 93       	st	X+, r17
    361e:	2d 93       	st	X+, r18
    3620:	3c 93       	st	X, r19
    3622:	94 97       	sbiw	r26, 0x24	; 36

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    3624:	81 30       	cpi	r24, 0x01	; 1
    3626:	09 f0       	breq	.+2      	; 0x362a <vTaskGenericNotifyGiveFromISR+0x4c>
    3628:	5e c0       	rjmp	.+188    	; 0x36e6 <vTaskGenericNotifyGiveFromISR+0x108>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    362a:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <uxSchedulerSuspended>
    362e:	81 11       	cpse	r24, r1
    3630:	5f c0       	rjmp	.+190    	; 0x36f0 <vTaskGenericNotifyGiveFromISR+0x112>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    3632:	a2 85       	ldd	r26, Z+10	; 0x0a
    3634:	b3 85       	ldd	r27, Z+11	; 0x0b
    3636:	84 81       	ldd	r24, Z+4	; 0x04
    3638:	95 81       	ldd	r25, Z+5	; 0x05
    363a:	26 81       	ldd	r18, Z+6	; 0x06
    363c:	37 81       	ldd	r19, Z+7	; 0x07
    363e:	ec 01       	movw	r28, r24
    3640:	3d 83       	std	Y+5, r19	; 0x05
    3642:	2c 83       	std	Y+4, r18	; 0x04
    3644:	c6 81       	ldd	r28, Z+6	; 0x06
    3646:	d7 81       	ldd	r29, Z+7	; 0x07
    3648:	9b 83       	std	Y+3, r25	; 0x03
    364a:	8a 83       	std	Y+2, r24	; 0x02
    364c:	cf 01       	movw	r24, r30
    364e:	02 96       	adiw	r24, 0x02	; 2
    3650:	11 96       	adiw	r26, 0x01	; 1
    3652:	2d 91       	ld	r18, X+
    3654:	3c 91       	ld	r19, X
    3656:	12 97       	sbiw	r26, 0x02	; 2
    3658:	28 17       	cp	r18, r24
    365a:	39 07       	cpc	r19, r25
    365c:	21 f4       	brne	.+8      	; 0x3666 <vTaskGenericNotifyGiveFromISR+0x88>
    365e:	12 96       	adiw	r26, 0x02	; 2
    3660:	dc 93       	st	X, r29
    3662:	ce 93       	st	-X, r28
    3664:	11 97       	sbiw	r26, 0x01	; 1
    3666:	13 86       	std	Z+11, r1	; 0x0b
    3668:	12 86       	std	Z+10, r1	; 0x0a
    366a:	2c 91       	ld	r18, X
    366c:	21 50       	subi	r18, 0x01	; 1
    366e:	2c 93       	st	X, r18
                    prvAddTaskToReadyList( pxTCB );
    3670:	c6 89       	ldd	r28, Z+22	; 0x16
    3672:	20 91 3f 07 	lds	r18, 0x073F	; 0x80073f <uxTopReadyPriority>
    3676:	2c 17       	cp	r18, r28
    3678:	10 f4       	brcc	.+4      	; 0x367e <vTaskGenericNotifyGiveFromISR+0xa0>
    367a:	c0 93 3f 07 	sts	0x073F, r28	; 0x80073f <uxTopReadyPriority>
    367e:	29 e0       	ldi	r18, 0x09	; 9
    3680:	2c 9f       	mul	r18, r28
    3682:	e0 01       	movw	r28, r0
    3684:	11 24       	eor	r1, r1
    3686:	c4 59       	subi	r28, 0x94	; 148
    3688:	d8 4f       	sbci	r29, 0xF8	; 248
    368a:	09 80       	ldd	r0, Y+1	; 0x01
    368c:	da 81       	ldd	r29, Y+2	; 0x02
    368e:	c0 2d       	mov	r28, r0
    3690:	d5 83       	std	Z+5, r29	; 0x05
    3692:	c4 83       	std	Z+4, r28	; 0x04
    3694:	6c 81       	ldd	r22, Y+4	; 0x04
    3696:	7d 81       	ldd	r23, Y+5	; 0x05
    3698:	77 83       	std	Z+7, r23	; 0x07
    369a:	66 83       	std	Z+6, r22	; 0x06
    369c:	ac 81       	ldd	r26, Y+4	; 0x04
    369e:	bd 81       	ldd	r27, Y+5	; 0x05
    36a0:	13 96       	adiw	r26, 0x03	; 3
    36a2:	9c 93       	st	X, r25
    36a4:	8e 93       	st	-X, r24
    36a6:	12 97       	sbiw	r26, 0x02	; 2
    36a8:	9d 83       	std	Y+5, r25	; 0x05
    36aa:	8c 83       	std	Y+4, r24	; 0x04
    36ac:	a6 89       	ldd	r26, Z+22	; 0x16
    36ae:	a2 9f       	mul	r26, r18
    36b0:	d0 01       	movw	r26, r0
    36b2:	11 24       	eor	r1, r1
    36b4:	a4 59       	subi	r26, 0x94	; 148
    36b6:	b8 4f       	sbci	r27, 0xF8	; 248
    36b8:	b3 87       	std	Z+11, r27	; 0x0b
    36ba:	a2 87       	std	Z+10, r26	; 0x0a
    36bc:	8c 91       	ld	r24, X
    36be:	8f 5f       	subi	r24, 0xFF	; 255
    36c0:	8c 93       	st	X, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    36c2:	a0 91 90 07 	lds	r26, 0x0790	; 0x800790 <pxCurrentTCB>
    36c6:	b0 91 91 07 	lds	r27, 0x0791	; 0x800791 <pxCurrentTCB+0x1>
    36ca:	96 89       	ldd	r25, Z+22	; 0x16
    36cc:	56 96       	adiw	r26, 0x16	; 22
    36ce:	8c 91       	ld	r24, X
    36d0:	89 17       	cp	r24, r25
    36d2:	48 f4       	brcc	.+18     	; 0x36e6 <vTaskGenericNotifyGiveFromISR+0x108>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    36d4:	41 15       	cp	r20, r1
    36d6:	51 05       	cpc	r21, r1
    36d8:	19 f0       	breq	.+6      	; 0x36e0 <vTaskGenericNotifyGiveFromISR+0x102>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	fa 01       	movw	r30, r20
    36de:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <xYieldPendings>
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	1f 91       	pop	r17
    36ec:	0f 91       	pop	r16
    36ee:	08 95       	ret
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    36f0:	a0 91 4e 07 	lds	r26, 0x074E	; 0x80074e <xPendingReadyList+0x1>
    36f4:	b0 91 4f 07 	lds	r27, 0x074F	; 0x80074f <xPendingReadyList+0x2>
    36f8:	b7 87       	std	Z+15, r27	; 0x0f
    36fa:	a6 87       	std	Z+14, r26	; 0x0e
    36fc:	14 96       	adiw	r26, 0x04	; 4
    36fe:	8d 91       	ld	r24, X+
    3700:	9c 91       	ld	r25, X
    3702:	15 97       	sbiw	r26, 0x05	; 5
    3704:	91 8b       	std	Z+17, r25	; 0x11
    3706:	80 8b       	std	Z+16, r24	; 0x10
    3708:	14 96       	adiw	r26, 0x04	; 4
    370a:	cd 91       	ld	r28, X+
    370c:	dc 91       	ld	r29, X
    370e:	15 97       	sbiw	r26, 0x05	; 5
    3710:	cf 01       	movw	r24, r30
    3712:	0c 96       	adiw	r24, 0x0c	; 12
    3714:	9b 83       	std	Y+3, r25	; 0x03
    3716:	8a 83       	std	Y+2, r24	; 0x02
    3718:	15 96       	adiw	r26, 0x05	; 5
    371a:	9c 93       	st	X, r25
    371c:	8e 93       	st	-X, r24
    371e:	14 97       	sbiw	r26, 0x04	; 4
    3720:	8d e4       	ldi	r24, 0x4D	; 77
    3722:	97 e0       	ldi	r25, 0x07	; 7
    3724:	95 8b       	std	Z+21, r25	; 0x15
    3726:	84 8b       	std	Z+20, r24	; 0x14
    3728:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <xPendingReadyList>
    372c:	8f 5f       	subi	r24, 0xFF	; 255
    372e:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <xPendingReadyList>
    3732:	c7 cf       	rjmp	.-114    	; 0x36c2 <vTaskGenericNotifyGiveFromISR+0xe4>

00003734 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	21 f4       	brne	.+8      	; 0x3740 <xTaskGenericNotifyStateClear+0xc>
    3738:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    373c:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3746:	fc 01       	movw	r30, r24
    3748:	e6 0f       	add	r30, r22
    374a:	f1 1d       	adc	r31, r1
    374c:	85 a1       	ldd	r24, Z+37	; 0x25
    374e:	82 30       	cpi	r24, 0x02	; 2
    3750:	29 f4       	brne	.+10     	; 0x375c <xTaskGenericNotifyStateClear+0x28>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3752:	15 a2       	std	Z+37, r1	; 0x25
                xReturn = pdPASS;
    3754:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        taskEXIT_CRITICAL();
    3756:	0f 90       	pop	r0
    3758:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyStateClear( xReturn );

        return xReturn;
    }
    375a:	08 95       	ret
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
                xReturn = pdPASS;
            }
            else
            {
                xReturn = pdFAIL;
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	fb cf       	rjmp	.-10     	; 0x3756 <xTaskGenericNotifyStateClear+0x22>

00003760 <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
    3760:	cf 92       	push	r12
    3762:	df 92       	push	r13
    3764:	ef 92       	push	r14
    3766:	ff 92       	push	r15

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3768:	00 97       	sbiw	r24, 0x00	; 0
    376a:	21 f4       	brne	.+8      	; 0x3774 <ulTaskGenericNotifyValueClear+0x14>
    376c:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <pxCurrentTCB>
    3770:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	0f 92       	push	r0
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
    377a:	74 e0       	ldi	r23, 0x04	; 4
    377c:	67 9f       	mul	r22, r23
    377e:	f0 01       	movw	r30, r0
    3780:	11 24       	eor	r1, r1
    3782:	e8 0f       	add	r30, r24
    3784:	f9 1f       	adc	r31, r25
    3786:	61 a1       	ldd	r22, Z+33	; 0x21
    3788:	72 a1       	ldd	r23, Z+34	; 0x22
    378a:	83 a1       	ldd	r24, Z+35	; 0x23
    378c:	94 a1       	ldd	r25, Z+36	; 0x24
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
    378e:	c1 a0       	ldd	r12, Z+33	; 0x21
    3790:	d2 a0       	ldd	r13, Z+34	; 0x22
    3792:	e3 a0       	ldd	r14, Z+35	; 0x23
    3794:	f4 a0       	ldd	r15, Z+36	; 0x24
    3796:	20 95       	com	r18
    3798:	30 95       	com	r19
    379a:	40 95       	com	r20
    379c:	50 95       	com	r21
    379e:	c2 22       	and	r12, r18
    37a0:	d3 22       	and	r13, r19
    37a2:	e4 22       	and	r14, r20
    37a4:	f5 22       	and	r15, r21
    37a6:	c1 a2       	std	Z+33, r12	; 0x21
    37a8:	d2 a2       	std	Z+34, r13	; 0x22
    37aa:	e3 a2       	std	Z+35, r14	; 0x23
    37ac:	f4 a2       	std	Z+36, r15	; 0x24
        }
        taskEXIT_CRITICAL();
    37ae:	0f 90       	pop	r0
    37b0:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyValueClear( ulReturn );

        return ulReturn;
    }
    37b2:	ff 90       	pop	r15
    37b4:	ef 90       	pop	r14
    37b6:	df 90       	pop	r13
    37b8:	cf 90       	pop	r12
    37ba:	08 95       	ret

000037bc <vTaskResetState>:
    BaseType_t xCoreID;

    /* Task control block. */
    #if ( configNUMBER_OF_CORES == 1 )
    {
        pxCurrentTCB = NULL;
    37bc:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <pxCurrentTCB+0x1>
    37c0:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <pxCurrentTCB>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
    37c4:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <uxDeletedTasksWaitingCleanUp>
        FreeRTOS_errno = 0;
    }
    #endif /* #if ( configUSE_POSIX_ERRNO == 1 ) */

    /* Other file private variables. */
    uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
    37c8:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <uxCurrentNumberOfTasks>
    xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    37cc:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <xTickCount+0x1>
    37d0:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <xTickCount>
    uxTopReadyPriority = tskIDLE_PRIORITY;
    37d4:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <uxTopReadyPriority>
    xSchedulerRunning = pdFALSE;
    37d8:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <xSchedulerRunning>
    xPendedTicks = ( TickType_t ) 0U;
    37dc:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <xPendedTicks+0x1>
    37e0:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <xPendedTicks>

    for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
    {
        xYieldPendings[ xCoreID ] = pdFALSE;
    37e4:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <xYieldPendings>
    }

    xNumOfOverflows = ( BaseType_t ) 0;
    37e8:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <xNumOfOverflows>
    uxTaskNumber = ( UBaseType_t ) 0U;
    37ec:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <uxTaskNumber>
    xNextTaskUnblockTime = ( TickType_t ) 0U;
    37f0:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <xNextTaskUnblockTime+0x1>
    37f4:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <xNextTaskUnblockTime>

    uxSchedulerSuspended = ( UBaseType_t ) 0U;
    37f8:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <uxSchedulerSuspended>
            ulTaskSwitchedInTime[ xCoreID ] = 0U;
            ulTotalRunTime[ xCoreID ] = 0U;
        }
    }
    #endif /* #if ( configGENERATE_RUN_TIME_STATS == 1 ) */
}
    37fc:	08 95       	ret

000037fe <ADC_Task>:
    static uint16_t adc_OC_value = 0;  // Raw ADC value from overcurrent sensor
    static uint16_t adc_vehicle_connected = 0;  // Raw ADC value from overcurrent sensor

    while (1) {
        // Read the ADC value from channel 0 (ADC0)
        adc_value = ADC_READ(0);
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	0e 94 0c 01 	call	0x218	; 0x218 <ADC_READ>

        // Read the ADC value from channel 1 (ADC1)
        adc_OC_value = ADC_READ(1);
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	0e 94 0c 01 	call	0x218	; 0x218 <ADC_READ>

        // adc_vehicle_connected = ADC_READ(VEHICLE_CHECK_PIN);

        // Check if the ADC value is above the threshold
        if (adc_OC_value > ADC_THRESHOLD) {
    380a:	4a 97       	sbiw	r24, 0x1a	; 26
    380c:	68 f0       	brcs	.+26     	; 0x3828 <ADC_Task+0x2a>
            // Set the overcurrent flag
            xTaskNotifyGive(xOverCurrent_Task_Handle);
    380e:	f1 2c       	mov	r15, r1
    3810:	e1 2c       	mov	r14, r1
    3812:	02 e0       	ldi	r16, 0x02	; 2
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	a9 01       	movw	r20, r18
    381a:	60 e0       	ldi	r22, 0x00	; 0
    381c:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <xOverCurrent_Task_Handle>
    3820:	90 91 99 07 	lds	r25, 0x0799	; 0x800799 <xOverCurrent_Task_Handle+0x1>
    3824:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskGenericNotify>
        }

        // Task delay for 500ms
        vTaskDelay(pdMS_TO_TICKS(300));
    3828:	8c e2       	ldi	r24, 0x2C	; 44
    382a:	91 e0       	ldi	r25, 0x01	; 1
    382c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelay>
    static uint16_t adc_OC_value = 0;  // Raw ADC value from overcurrent sensor
    static uint16_t adc_vehicle_connected = 0;  // Raw ADC value from overcurrent sensor

    while (1) {
        // Read the ADC value from channel 0 (ADC0)
        adc_value = ADC_READ(0);
    3830:	e6 cf       	rjmp	.-52     	; 0x37fe <ADC_Task>

00003832 <prd_VehicleCheck>:
        adc_load_value = ADC_READ(VEHICLE_CHECK_PIN);


        // Check if the ADC value is above the threshold
        if (adc_load_value < CONNECTION_THRESHOLD) {
            is_vehicle_connected = 1;
    3832:	c1 e0       	ldi	r28, 0x01	; 1
    
    static uint16_t adc_load_value = 0;
    
    while (1) {
        
        adc_load_value = ADC_READ(VEHICLE_CHECK_PIN);
    3834:	82 e0       	ldi	r24, 0x02	; 2
    3836:	0e 94 0c 01 	call	0x218	; 0x218 <ADC_READ>


        // Check if the ADC value is above the threshold
        if (adc_load_value < CONNECTION_THRESHOLD) {
    383a:	84 38       	cpi	r24, 0x84	; 132
    383c:	93 40       	sbci	r25, 0x03	; 3
    383e:	68 f4       	brcc	.+26     	; 0x385a <prd_VehicleCheck+0x28>
            is_vehicle_connected = 1;
    3840:	c0 93 9e 07 	sts	0x079E, r28	; 0x80079e <is_vehicle_connected>
            if (charging_state == IDLE) {
    3844:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <charging_state>
    3848:	81 11       	cpse	r24, r1
    384a:	02 c0       	rjmp	.+4      	; 0x3850 <prd_VehicleCheck+0x1e>
                
                charging_state = READY;
    384c:	c0 93 93 07 	sts	0x0793, r28	; 0x800793 <charging_state>
                charging_state = IDLE;
            }
        }

        // vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(VEHICLE_CHECK_PERIOD));
        vTaskDelay(pdMS_TO_TICKS(200));
    3850:	88 ec       	ldi	r24, 0xC8	; 200
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelay>
    
    static uint16_t adc_load_value = 0;
    
    while (1) {
        
        adc_load_value = ADC_READ(VEHICLE_CHECK_PIN);
    3858:	ed cf       	rjmp	.-38     	; 0x3834 <prd_VehicleCheck+0x2>
                charging_state = READY;
                
            }
        
        } else {
            is_vehicle_connected = 0;
    385a:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <is_vehicle_connected>
            if ((charging_state == CHARGING) | (charging_state == PAUSED) ) {
    385e:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <charging_state>
    3862:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <charging_state>
    3866:	92 30       	cpi	r25, 0x02	; 2
    3868:	11 f0       	breq	.+4      	; 0x386e <prd_VehicleCheck+0x3c>
    386a:	84 30       	cpi	r24, 0x04	; 4
    386c:	71 f4       	brne	.+28     	; 0x388a <prd_VehicleCheck+0x58>
                
                // charging_state = STOP;
                xTaskNotifyGive(xSuddenDisconnect_Task_Handle);
    386e:	f1 2c       	mov	r15, r1
    3870:	e1 2c       	mov	r14, r1
    3872:	02 e0       	ldi	r16, 0x02	; 2
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	a9 01       	movw	r20, r18
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <xSuddenDisconnect_Task_Handle>
    3880:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <xSuddenDisconnect_Task_Handle+0x1>
    3884:	0e 94 06 19 	call	0x320c	; 0x320c <xTaskGenericNotify>
    3888:	e3 cf       	rjmp	.-58     	; 0x3850 <prd_VehicleCheck+0x1e>
            } else {
                charging_state = IDLE;
    388a:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <charging_state>
    388e:	e0 cf       	rjmp	.-64     	; 0x3850 <prd_VehicleCheck+0x1e>

00003890 <prd_LED_MANAGEMENT>:

void prd_LED_MANAGEMENT(void *pvParameters) {
    // TickType_t xLastWakeTime = xTaskGetTickCount(); 
    while (1) {

        switch (charging_state) {
    3890:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <charging_state>
    3894:	82 30       	cpi	r24, 0x02	; 2
    3896:	f1 f0       	breq	.+60     	; 0x38d4 <prd_LED_MANAGEMENT+0x44>
    3898:	48 f4       	brcc	.+18     	; 0x38ac <prd_LED_MANAGEMENT+0x1c>
    389a:	88 23       	and	r24, r24
    389c:	91 f0       	breq	.+36     	; 0x38c2 <prd_LED_MANAGEMENT+0x32>
    389e:	81 30       	cpi	r24, 0x01	; 1
    38a0:	b1 f0       	breq	.+44     	; 0x38ce <prd_LED_MANAGEMENT+0x3e>
                break;
            default:
                break;
        }
        // vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
        vTaskDelay(pdMS_TO_TICKS(200));
    38a2:	88 ec       	ldi	r24, 0xC8	; 200
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelay>

void prd_LED_MANAGEMENT(void *pvParameters) {
    // TickType_t xLastWakeTime = xTaskGetTickCount(); 
    while (1) {

        switch (charging_state) {
    38aa:	f2 cf       	rjmp	.-28     	; 0x3890 <prd_LED_MANAGEMENT>
    38ac:	83 30       	cpi	r24, 0x03	; 3
    38ae:	b9 f0       	breq	.+46     	; 0x38de <prd_LED_MANAGEMENT+0x4e>
    38b0:	84 30       	cpi	r24, 0x04	; 4
    38b2:	b9 f7       	brne	.-18     	; 0x38a2 <prd_LED_MANAGEMENT+0x12>
                PORTC &= ~(1 << PC4);  // Set 'Stop' LED to low
                PORTC &= ~(1 << PC6); // Set PC6 to low
                break;

            case PAUSED:
                PORTC |= (1 << PC6); // Set PC6 to high
    38b4:	ae 9a       	sbi	0x15, 6	; 21

                PORTC &= ~(1 << PC5); // Set PC5 to low
    38b6:	ad 98       	cbi	0x15, 5	; 21

                PORTC &= ~(1 << PC3);  // Set 'Charging' LED to low
    38b8:	ab 98       	cbi	0x15, 3	; 21
                PORTC &= ~(1 << PC1);  // Set 'Idle' LED to low
    38ba:	a9 98       	cbi	0x15, 1	; 21
                PORTC &= ~(1 << PC2);  // Set 'Ready' LED to low
    38bc:	aa 98       	cbi	0x15, 2	; 21
                PORTC &= ~(1 << PC4);  // Set 'Stop' LED to low
    38be:	ac 98       	cbi	0x15, 4	; 21
                break;
    38c0:	f0 cf       	rjmp	.-32     	; 0x38a2 <prd_LED_MANAGEMENT+0x12>
    // TickType_t xLastWakeTime = xTaskGetTickCount(); 
    while (1) {

        switch (charging_state) {
            case IDLE:
                PORTC |= (1 << PC1);  // Set 'Idle' LED to high
    38c2:	a9 9a       	sbi	0x15, 1	; 21
        
                PORTC &= ~(1 << PC2);  // Set 'Ready' LED to low
    38c4:	aa 98       	cbi	0x15, 2	; 21
                break;
                
            case READY:
                PORTC |= (1 << PC2);  // Set 'Ready' LED to high
                PORTC &= ~(1 << PC1);  // Set 'Idle' LED to low
                PORTC &= ~(1 << PC3);  // Set 'Charging' LED to low
    38c6:	ab 98       	cbi	0x15, 3	; 21
                PORTC &= ~(1 << PC4);  // Set 'Stop' LED to low
    38c8:	ac 98       	cbi	0x15, 4	; 21

                PORTC |= (1 << PC4);  // Set 'Stop' LED to high
                PORTC &= ~(1 << PC2);  // Set 'Ready' LED to low
                PORTC &= ~(1 << PC3);  // Set 'Charging' LED to low
                PORTC &= ~(1 << PC1);  // Set 'IDLE' LED to low
                PORTC &= ~(1 << PC6); // Set PC6 to low
    38ca:	ae 98       	cbi	0x15, 6	; 21
                
                break;
    38cc:	ea cf       	rjmp	.-44     	; 0x38a2 <prd_LED_MANAGEMENT+0x12>
                PORTC &= ~(1 << PC4);  // Set 'Stop' LED to low
                PORTC &= ~(1 << PC6); // Set PC6 to low
                break;
                
            case READY:
                PORTC |= (1 << PC2);  // Set 'Ready' LED to high
    38ce:	aa 9a       	sbi	0x15, 2	; 21
                PORTC &= ~(1 << PC1);  // Set 'Idle' LED to low
    38d0:	a9 98       	cbi	0x15, 1	; 21
    38d2:	f9 cf       	rjmp	.-14     	; 0x38c6 <prd_LED_MANAGEMENT+0x36>
                PORTC &= ~(1 << PC4);  // Set 'Stop' LED to low
                PORTC &= ~(1 << PC6); // Set PC6 to low
                break;

            case CHARGING:
                PORTC |= (1 << PC5); // Set PC5 to high
    38d4:	ad 9a       	sbi	0x15, 5	; 21

                PORTC |= (1 << PC3);  // Set 'Charging' LED to high 
    38d6:	ab 9a       	sbi	0x15, 3	; 21
                PORTC &= ~(1 << PC1);  // Set 'Idle' LED to low
    38d8:	a9 98       	cbi	0x15, 1	; 21
                PORTC &= ~(1 << PC2);  // Set 'Ready' LED to low
    38da:	aa 98       	cbi	0x15, 2	; 21
    38dc:	f5 cf       	rjmp	.-22     	; 0x38c8 <prd_LED_MANAGEMENT+0x38>
                PORTC &= ~(1 << PC2);  // Set 'Ready' LED to low
                PORTC &= ~(1 << PC4);  // Set 'Stop' LED to low
                break;

            case STOP:
                PORTC &= ~(1 << PC5); // Set PC5 to low
    38de:	ad 98       	cbi	0x15, 5	; 21

                PORTC |= (1 << PC4);  // Set 'Stop' LED to high
    38e0:	ac 9a       	sbi	0x15, 4	; 21
                PORTC &= ~(1 << PC2);  // Set 'Ready' LED to low
    38e2:	aa 98       	cbi	0x15, 2	; 21
                PORTC &= ~(1 << PC3);  // Set 'Charging' LED to low
    38e4:	ab 98       	cbi	0x15, 3	; 21
                PORTC &= ~(1 << PC1);  // Set 'IDLE' LED to low
    38e6:	a9 98       	cbi	0x15, 1	; 21
    38e8:	f0 cf       	rjmp	.-32     	; 0x38ca <prd_LED_MANAGEMENT+0x3a>

000038ea <prd_Buttons>:
            if (PINB & (1 << PB1)) {
                charging_state = STOP;
            }

            if (PINB & (1 << PB2)) {
                charging_state = PAUSED;
    38ea:	c4 e0       	ldi	r28, 0x04	; 4
                charging_state = CHARGING;
            }

            // If stop is pressed
            if (PINB & (1 << PB1)) {
                charging_state = STOP;
    38ec:	d3 e0       	ldi	r29, 0x03	; 3
    while (1) {
        if(charging_state != IDLE){
            
            // If start is pressed
            if (PINB & (1 << PB0)) {
                charging_state = CHARGING;
    38ee:	12 e0       	ldi	r17, 0x02	; 2


void prd_Buttons(void *pvParameters) {
    // TickType_t xLastWakeTime = xTaskGetTickCount(); 
    while (1) {
        if(charging_state != IDLE){
    38f0:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <charging_state>
    38f4:	88 23       	and	r24, r24
    38f6:	49 f0       	breq	.+18     	; 0x390a <prd_Buttons+0x20>
            
            // If start is pressed
            if (PINB & (1 << PB0)) {
    38f8:	b0 99       	sbic	0x16, 0	; 22
                charging_state = CHARGING;
    38fa:	10 93 93 07 	sts	0x0793, r17	; 0x800793 <charging_state>
            }

            // If stop is pressed
            if (PINB & (1 << PB1)) {
    38fe:	b1 99       	sbic	0x16, 1	; 22
                charging_state = STOP;
    3900:	d0 93 93 07 	sts	0x0793, r29	; 0x800793 <charging_state>
            }

            if (PINB & (1 << PB2)) {
    3904:	b2 99       	sbic	0x16, 2	; 22
                charging_state = PAUSED;
    3906:	c0 93 93 07 	sts	0x0793, r28	; 0x800793 <charging_state>
            }

        }
        vTaskDelay(pdMS_TO_TICKS(200));
    390a:	88 ec       	ldi	r24, 0xC8	; 200
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelay>


void prd_Buttons(void *pvParameters) {
    // TickType_t xLastWakeTime = xTaskGetTickCount(); 
    while (1) {
        if(charging_state != IDLE){
    3912:	ee cf       	rjmp	.-36     	; 0x38f0 <prd_Buttons+0x6>

00003914 <Overcurrent_Task>:
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

        overcurrent_flag = 1;

        // Stop Charging
        charging_state = STOP;
    3914:	c3 e0       	ldi	r28, 0x03	; 3

// Overcurrent detection task
void Overcurrent_Task(void *pvParameters) {
    while (1) {
        // Wait for the overcurrent flag to be set
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    3916:	4f ef       	ldi	r20, 0xFF	; 255
    3918:	5f ef       	ldi	r21, 0xFF	; 255
    391a:	61 e0       	ldi	r22, 0x01	; 1
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <ulTaskGenericNotifyTake>

        overcurrent_flag = 1;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <overcurrent_flag>

        // Stop Charging
        charging_state = STOP;
    3928:	c0 93 93 07 	sts	0x0793, r28	; 0x800793 <charging_state>

        PORTC |= (1 << PC0); // Set PC0 to high
    392c:	a8 9a       	sbi	0x15, 0	; 21
        vTaskDelay(pdMS_TO_TICKS(1000));
    392e:	88 ee       	ldi	r24, 0xE8	; 232
    3930:	93 e0       	ldi	r25, 0x03	; 3
    3932:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelay>
        PORTC &= ~(1 << PC0);  // Set PC0 to low
    3936:	a8 98       	cbi	0x15, 0	; 21

        overcurrent_flag = 0;
    3938:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <overcurrent_flag>
    393c:	ec cf       	rjmp	.-40     	; 0x3916 <Overcurrent_Task+0x2>

0000393e <SuddenDisconnect_Task>:
    while (1) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

        // SET FLAG
        suddenDisconnect_flag = 1;
        charging_state = STOP;
    393e:	c3 e0       	ldi	r28, 0x03	; 3
    }
}

void SuddenDisconnect_Task(void *pvParameters) {
    while (1) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
    3940:	4f ef       	ldi	r20, 0xFF	; 255
    3942:	5f ef       	ldi	r21, 0xFF	; 255
    3944:	61 e0       	ldi	r22, 0x01	; 1
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <ulTaskGenericNotifyTake>

        // SET FLAG
        suddenDisconnect_flag = 1;
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <suddenDisconnect_flag>
        charging_state = STOP;
    3952:	c0 93 93 07 	sts	0x0793, r28	; 0x800793 <charging_state>
        PORTC |= (1 << PC7); // Set PC7 "Disconnected" to high
    3956:	af 9a       	sbi	0x15, 7	; 21
        vTaskDelay(pdMS_TO_TICKS(2000));
    3958:	80 ed       	ldi	r24, 0xD0	; 208
    395a:	97 e0       	ldi	r25, 0x07	; 7
    395c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelay>
        PORTC &= ~(1 << PC7);  // Set PC7 "Disconnected" to low
    3960:	af 98       	cbi	0x15, 7	; 21
        suddenDisconnect_flag = 0;
    3962:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <suddenDisconnect_flag>
        charging_state = IDLE;
    3966:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <charging_state>
    396a:	ea cf       	rjmp	.-44     	; 0x3940 <SuddenDisconnect_Task+0x2>

0000396c <UART_Init>:
volatile uint8_t charging_state = IDLE;
volatile uint8_t prev_charging_state = IDLE;

// Function to initialize UART for debugging (optional)
void UART_Init(unsigned int baud) {
    unsigned int ubrr = (F_CPU / 16 / baud) - 1;
    396c:	9c 01       	movw	r18, r24
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	40 e0       	ldi	r20, 0x00	; 0
    3972:	60 e2       	ldi	r22, 0x20	; 32
    3974:	71 ea       	ldi	r23, 0xA1	; 161
    3976:	87 e0       	ldi	r24, 0x07	; 7
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__udivmodsi4>
    397e:	21 50       	subi	r18, 0x01	; 1
    3980:	31 09       	sbc	r19, r1
    UBRRH = (unsigned char)(ubrr >> 8);  // Set high byte of baud rate
    3982:	30 bd       	out	0x20, r19	; 32
    UBRRL = (unsigned char)ubrr;        // Set low byte of baud rate
    3984:	29 b9       	out	0x09, r18	; 9
    UCSRB = (1 << TXEN);                // Enable transmitter
    3986:	88 e0       	ldi	r24, 0x08	; 8
    3988:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << URSEL) | (3 << UCSZ0); // 8-bit data, 1 stop bit
    398a:	86 e8       	ldi	r24, 0x86	; 134
    398c:	80 bd       	out	0x20, r24	; 32
}
    398e:	08 95       	ret

00003990 <UART_Transmit>:

// Function to send a character via UART
void UART_Transmit(char data) {
    while (!(UCSRA & (1 << UDRE)));  // Wait for the buffer to be empty
    3990:	5d 9b       	sbis	0x0b, 5	; 11
    3992:	fe cf       	rjmp	.-4      	; 0x3990 <UART_Transmit>
    UDR = data;                     // Send the character
    3994:	8c b9       	out	0x0c, r24	; 12
}
    3996:	08 95       	ret

00003998 <UART_SendString>:

// Function to send a string via UART
void UART_SendString(const char *str) {
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	ec 01       	movw	r28, r24
    while (*str) {
    399e:	89 91       	ld	r24, Y+
    39a0:	81 11       	cpse	r24, r1
    39a2:	03 c0       	rjmp	.+6      	; 0x39aa <UART_SendString+0x12>
        UART_Transmit(*str++);
    }
}
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	08 95       	ret
}

// Function to send a string via UART
void UART_SendString(const char *str) {
    while (*str) {
        UART_Transmit(*str++);
    39aa:	0e 94 c8 1c 	call	0x3990	; 0x3990 <UART_Transmit>
    39ae:	f7 cf       	rjmp	.-18     	; 0x399e <UART_SendString+0x6>

000039b0 <UART_Task>:
        vTaskDelay(pdMS_TO_TICKS(300));
    }
}

// UART communication task
void UART_Task(void *pvParameters) {
    39b0:	cf 93       	push	r28
    39b2:	df 93       	push	r29
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	a8 97       	sbiw	r28, 0x28	; 40
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
        adc_value = ADC_READ(0);
        voltage = ADC_GetVoltage(adc_value);


        // Format and send the values via UART
        snprintf(buffer, sizeof(buffer), "ADC: %d, Voltage: ", adc_value);
    39c4:	86 e6       	ldi	r24, 0x66	; 102
    39c6:	68 2e       	mov	r6, r24
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	78 2e       	mov	r7, r24
    39cc:	90 e2       	ldi	r25, 0x20	; 32
    39ce:	d9 2e       	mov	r13, r25
    39d0:	ce 01       	movw	r24, r28
    39d2:	01 96       	adiw	r24, 0x01	; 1
    39d4:	7c 01       	movw	r14, r24
        adc_value = ADC_READ(1);
        voltage = ADC_GetVoltage(adc_value);


        // Format and send the values via UART
        snprintf(buffer, sizeof(buffer), "ADC_OC: %d, Voltage: ", adc_value);
    39d6:	2e e7       	ldi	r18, 0x7E	; 126
    39d8:	82 2e       	mov	r8, r18
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	92 2e       	mov	r9, r18
        UART_SendString(buffer);
        dtostrf(voltage, -6, 2, buffer);
        UART_SendString(buffer);
        UART_SendString(" V\r\n");
        snprintf(buffer, sizeof(buffer), "Charging state: %d \r\n", charging_state);
    39de:	34 e9       	ldi	r19, 0x94	; 148
    39e0:	a3 2e       	mov	r10, r19
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	b3 2e       	mov	r11, r19
    float voltage = 0;
    char buffer[32];
//    float test_val = 3.3;
    while (1) {
        // Retrieve the ADC value (could be shared from ADC task via queue/semaphore)
        adc_value = ADC_READ(0);
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	0e 94 0c 01 	call	0x218	; 0x218 <ADC_READ>
    39ec:	18 2f       	mov	r17, r24
    39ee:	09 2f       	mov	r16, r25
        voltage = ADC_GetVoltage(adc_value);
    39f0:	0e 94 3a 01 	call	0x274	; 0x274 <ADC_GetVoltage>
    39f4:	6d a3       	std	Y+37, r22	; 0x25
    39f6:	7e a3       	std	Y+38, r23	; 0x26
    39f8:	8f a3       	std	Y+39, r24	; 0x27
    39fa:	98 a7       	std	Y+40, r25	; 0x28


        // Format and send the values via UART
        snprintf(buffer, sizeof(buffer), "ADC: %d, Voltage: ", adc_value);
    39fc:	0f 93       	push	r16
    39fe:	1f 93       	push	r17
    3a00:	7f 92       	push	r7
    3a02:	6f 92       	push	r6
    3a04:	1f 92       	push	r1
    3a06:	df 92       	push	r13
    3a08:	ff 92       	push	r15
    3a0a:	ef 92       	push	r14
    3a0c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <snprintf>
        UART_SendString(buffer);
    3a10:	c7 01       	movw	r24, r14
    3a12:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_SendString>
        dtostrf(voltage, -6, 2, buffer);
    3a16:	6d a1       	ldd	r22, Y+37	; 0x25
    3a18:	7e a1       	ldd	r23, Y+38	; 0x26
    3a1a:	8f a1       	ldd	r24, Y+39	; 0x27
    3a1c:	98 a5       	ldd	r25, Y+40	; 0x28
    3a1e:	87 01       	movw	r16, r14
    3a20:	22 e0       	ldi	r18, 0x02	; 2
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	4a ef       	ldi	r20, 0xFA	; 250
    3a26:	5f ef       	ldi	r21, 0xFF	; 255
    3a28:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <dtostrf>
        UART_SendString(buffer);
    3a2c:	c7 01       	movw	r24, r14
    3a2e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_SendString>
        UART_SendString(" V\r\n");
    3a32:	89 e7       	ldi	r24, 0x79	; 121
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_SendString>

        adc_value = ADC_READ(1);
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	0e 94 0c 01 	call	0x218	; 0x218 <ADC_READ>
    3a40:	18 2f       	mov	r17, r24
    3a42:	09 2f       	mov	r16, r25
        voltage = ADC_GetVoltage(adc_value);
    3a44:	0e 94 3a 01 	call	0x274	; 0x274 <ADC_GetVoltage>
    3a48:	69 a3       	std	Y+33, r22	; 0x21
    3a4a:	7a a3       	std	Y+34, r23	; 0x22
    3a4c:	8b a3       	std	Y+35, r24	; 0x23
    3a4e:	9c a3       	std	Y+36, r25	; 0x24


        // Format and send the values via UART
        snprintf(buffer, sizeof(buffer), "ADC_OC: %d, Voltage: ", adc_value);
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	9f 92       	push	r9
    3a56:	8f 92       	push	r8
    3a58:	1f 92       	push	r1
    3a5a:	df 92       	push	r13
    3a5c:	ff 92       	push	r15
    3a5e:	ef 92       	push	r14
    3a60:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <snprintf>
        UART_SendString(buffer);
    3a64:	c7 01       	movw	r24, r14
    3a66:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_SendString>
        dtostrf(voltage, -6, 2, buffer);
    3a6a:	69 a1       	ldd	r22, Y+33	; 0x21
    3a6c:	7a a1       	ldd	r23, Y+34	; 0x22
    3a6e:	8b a1       	ldd	r24, Y+35	; 0x23
    3a70:	9c a1       	ldd	r25, Y+36	; 0x24
    3a72:	87 01       	movw	r16, r14
    3a74:	22 e0       	ldi	r18, 0x02	; 2
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	4a ef       	ldi	r20, 0xFA	; 250
    3a7a:	5f ef       	ldi	r21, 0xFF	; 255
    3a7c:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <dtostrf>
        UART_SendString(buffer);
    3a80:	c7 01       	movw	r24, r14
    3a82:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_SendString>
        UART_SendString(" V\r\n");
    3a86:	89 e7       	ldi	r24, 0x79	; 121
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_SendString>
        snprintf(buffer, sizeof(buffer), "Charging state: %d \r\n", charging_state);
    3a8e:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <charging_state>
    3a92:	1f 92       	push	r1
    3a94:	8f 93       	push	r24
    3a96:	bf 92       	push	r11
    3a98:	af 92       	push	r10
    3a9a:	1f 92       	push	r1
    3a9c:	df 92       	push	r13
    3a9e:	ff 92       	push	r15
    3aa0:	ef 92       	push	r14
    3aa2:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <snprintf>

        UART_SendString(buffer);
    3aa6:	c7 01       	movw	r24, r14
    3aa8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <UART_SendString>
        // Task delay for 500ms
        vTaskDelay(pdMS_TO_TICKS(500));
    3aac:	84 ef       	ldi	r24, 0xF4	; 244
    3aae:	91 e0       	ldi	r25, 0x01	; 1
    3ab0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelay>
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	93 cf       	rjmp	.-218    	; 0x39e6 <UART_Task+0x36>

00003ac0 <main>:
}


int main(void) {
    // Initialize the ADC and UART
    ADC_INIT(prescaler, AREF);
    3ac0:	60 e0       	ldi	r22, 0x00	; 0
    3ac2:	80 e8       	ldi	r24, 0x80	; 128
    3ac4:	0e 94 01 01 	call	0x202	; 0x202 <ADC_INIT>
    UART_Init(9600);
    3ac8:	80 e8       	ldi	r24, 0x80	; 128
    3aca:	95 e2       	ldi	r25, 0x25	; 37
    3acc:	0e 94 b6 1c 	call	0x396c	; 0x396c <UART_Init>

    // DDRC |= (0x7F); // Set PC0-7 as output
    DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4) | (1 << PC5) | (1 << PC6) | (1 << PC7); // Set PC0-7 as output
    3ad0:	84 b3       	in	r24, 0x14	; 20
    3ad2:	8f ef       	ldi	r24, 0xFF	; 255
    3ad4:	84 bb       	out	0x14, r24	; 20

    // Create the ADC reading task
    xTaskCreate(ADC_Task, "ADC Task", 128, NULL, 1, &xADC_Task_Handle);
    3ad6:	8c e9       	ldi	r24, 0x9C	; 156
    3ad8:	e8 2e       	mov	r14, r24
    3ada:	87 e0       	ldi	r24, 0x07	; 7
    3adc:	f8 2e       	mov	r15, r24
    3ade:	01 e0       	ldi	r16, 0x01	; 1
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	40 e8       	ldi	r20, 0x80	; 128
    3ae6:	6a ea       	ldi	r22, 0xAA	; 170
    3ae8:	70 e0       	ldi	r23, 0x00	; 0
    3aea:	8f ef       	ldi	r24, 0xFF	; 255
    3aec:	9b e1       	ldi	r25, 0x1B	; 27
    3aee:	0e 94 82 11 	call	0x2304	; 0x2304 <xTaskCreate>

    // Create the UART communication task
    xTaskCreate(UART_Task, "UART Task", 128, NULL, 5, NULL);
    3af2:	f1 2c       	mov	r15, r1
    3af4:	e1 2c       	mov	r14, r1
    3af6:	05 e0       	ldi	r16, 0x05	; 5
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	63 eb       	ldi	r22, 0xB3	; 179
    3b00:	70 e0       	ldi	r23, 0x00	; 0
    3b02:	88 ed       	ldi	r24, 0xD8	; 216
    3b04:	9c e1       	ldi	r25, 0x1C	; 28
    3b06:	0e 94 82 11 	call	0x2304	; 0x2304 <xTaskCreate>

    // Create the overcurrent detection task
    xTaskCreate(Overcurrent_Task, "Overcurrent Task", 128, NULL, 1, &xOverCurrent_Task_Handle);
    3b0a:	98 e9       	ldi	r25, 0x98	; 152
    3b0c:	e9 2e       	mov	r14, r25
    3b0e:	97 e0       	ldi	r25, 0x07	; 7
    3b10:	f9 2e       	mov	r15, r25
    3b12:	01 e0       	ldi	r16, 0x01	; 1
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	40 e8       	ldi	r20, 0x80	; 128
    3b1a:	6d eb       	ldi	r22, 0xBD	; 189
    3b1c:	70 e0       	ldi	r23, 0x00	; 0
    3b1e:	8a e8       	ldi	r24, 0x8A	; 138
    3b20:	9c e1       	ldi	r25, 0x1C	; 28
    3b22:	0e 94 82 11 	call	0x2304	; 0x2304 <xTaskCreate>

    // Create the sudden disconnect detection task
    xTaskCreate(SuddenDisconnect_Task, "Sudden Disconnect Task", 128, NULL, 2, &xSuddenDisconnect_Task_Handle);
    3b26:	26 e9       	ldi	r18, 0x96	; 150
    3b28:	e2 2e       	mov	r14, r18
    3b2a:	27 e0       	ldi	r18, 0x07	; 7
    3b2c:	f2 2e       	mov	r15, r18
    3b2e:	02 e0       	ldi	r16, 0x02	; 2
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	40 e8       	ldi	r20, 0x80	; 128
    3b36:	6e ec       	ldi	r22, 0xCE	; 206
    3b38:	70 e0       	ldi	r23, 0x00	; 0
    3b3a:	8f e9       	ldi	r24, 0x9F	; 159
    3b3c:	9c e1       	ldi	r25, 0x1C	; 28
    3b3e:	0e 94 82 11 	call	0x2304	; 0x2304 <xTaskCreate>

    // Create the LED management task
    xTaskCreate(prd_LED_MANAGEMENT, "LED Management Task", 128, NULL, 4, NULL);
    3b42:	f1 2c       	mov	r15, r1
    3b44:	e1 2c       	mov	r14, r1
    3b46:	04 e0       	ldi	r16, 0x04	; 4
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	40 e8       	ldi	r20, 0x80	; 128
    3b4e:	65 ee       	ldi	r22, 0xE5	; 229
    3b50:	70 e0       	ldi	r23, 0x00	; 0
    3b52:	88 e4       	ldi	r24, 0x48	; 72
    3b54:	9c e1       	ldi	r25, 0x1C	; 28
    3b56:	0e 94 82 11 	call	0x2304	; 0x2304 <xTaskCreate>

    // Create the vehicle check task
    xTaskCreate(prd_VehicleCheck, "Vehicle Check Task", 128, NULL, 2, &xVehicleCheck_Task_Handle);
    3b5a:	3a e9       	ldi	r19, 0x9A	; 154
    3b5c:	e3 2e       	mov	r14, r19
    3b5e:	37 e0       	ldi	r19, 0x07	; 7
    3b60:	f3 2e       	mov	r15, r19
    3b62:	02 e0       	ldi	r16, 0x02	; 2
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	40 e8       	ldi	r20, 0x80	; 128
    3b6a:	69 ef       	ldi	r22, 0xF9	; 249
    3b6c:	70 e0       	ldi	r23, 0x00	; 0
    3b6e:	89 e1       	ldi	r24, 0x19	; 25
    3b70:	9c e1       	ldi	r25, 0x1C	; 28
    3b72:	0e 94 82 11 	call	0x2304	; 0x2304 <xTaskCreate>

    // Create the buttons task
    xTaskCreate(prd_Buttons, "Buttons Task", 128, NULL, 3, NULL);
    3b76:	f1 2c       	mov	r15, r1
    3b78:	e1 2c       	mov	r14, r1
    3b7a:	03 e0       	ldi	r16, 0x03	; 3
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	40 e8       	ldi	r20, 0x80	; 128
    3b82:	6c e0       	ldi	r22, 0x0C	; 12
    3b84:	71 e0       	ldi	r23, 0x01	; 1
    3b86:	85 e7       	ldi	r24, 0x75	; 117
    3b88:	9c e1       	ldi	r25, 0x1C	; 28
    3b8a:	0e 94 82 11 	call	0x2304	; 0x2304 <xTaskCreate>

    // Start the scheduler to begin executing tasks
    vTaskStartScheduler();
    3b8e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <vTaskStartScheduler>
    3b92:	ff cf       	rjmp	.-2      	; 0x3b92 <main+0xd2>

00003b94 <__divsf3>:
    3b94:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divsf3x>
    3b98:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__fp_round>
    3b9c:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__fp_pscB>
    3ba0:	58 f0       	brcs	.+22     	; 0x3bb8 <__divsf3+0x24>
    3ba2:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__fp_pscA>
    3ba6:	40 f0       	brcs	.+16     	; 0x3bb8 <__divsf3+0x24>
    3ba8:	29 f4       	brne	.+10     	; 0x3bb4 <__divsf3+0x20>
    3baa:	5f 3f       	cpi	r21, 0xFF	; 255
    3bac:	29 f0       	breq	.+10     	; 0x3bb8 <__divsf3+0x24>
    3bae:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_inf>
    3bb2:	51 11       	cpse	r21, r1
    3bb4:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__fp_szero>
    3bb8:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_nan>

00003bbc <__divsf3x>:
    3bbc:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_split3>
    3bc0:	68 f3       	brcs	.-38     	; 0x3b9c <__divsf3+0x8>

00003bc2 <__divsf3_pse>:
    3bc2:	99 23       	and	r25, r25
    3bc4:	b1 f3       	breq	.-20     	; 0x3bb2 <__divsf3+0x1e>
    3bc6:	55 23       	and	r21, r21
    3bc8:	91 f3       	breq	.-28     	; 0x3bae <__divsf3+0x1a>
    3bca:	95 1b       	sub	r25, r21
    3bcc:	55 0b       	sbc	r21, r21
    3bce:	bb 27       	eor	r27, r27
    3bd0:	aa 27       	eor	r26, r26
    3bd2:	62 17       	cp	r22, r18
    3bd4:	73 07       	cpc	r23, r19
    3bd6:	84 07       	cpc	r24, r20
    3bd8:	38 f0       	brcs	.+14     	; 0x3be8 <__divsf3_pse+0x26>
    3bda:	9f 5f       	subi	r25, 0xFF	; 255
    3bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    3bde:	22 0f       	add	r18, r18
    3be0:	33 1f       	adc	r19, r19
    3be2:	44 1f       	adc	r20, r20
    3be4:	aa 1f       	adc	r26, r26
    3be6:	a9 f3       	breq	.-22     	; 0x3bd2 <__divsf3_pse+0x10>
    3be8:	35 d0       	rcall	.+106    	; 0x3c54 <__divsf3_pse+0x92>
    3bea:	0e 2e       	mov	r0, r30
    3bec:	3a f0       	brmi	.+14     	; 0x3bfc <__divsf3_pse+0x3a>
    3bee:	e0 e8       	ldi	r30, 0x80	; 128
    3bf0:	32 d0       	rcall	.+100    	; 0x3c56 <__divsf3_pse+0x94>
    3bf2:	91 50       	subi	r25, 0x01	; 1
    3bf4:	50 40       	sbci	r21, 0x00	; 0
    3bf6:	e6 95       	lsr	r30
    3bf8:	00 1c       	adc	r0, r0
    3bfa:	ca f7       	brpl	.-14     	; 0x3bee <__divsf3_pse+0x2c>
    3bfc:	2b d0       	rcall	.+86     	; 0x3c54 <__divsf3_pse+0x92>
    3bfe:	fe 2f       	mov	r31, r30
    3c00:	29 d0       	rcall	.+82     	; 0x3c54 <__divsf3_pse+0x92>
    3c02:	66 0f       	add	r22, r22
    3c04:	77 1f       	adc	r23, r23
    3c06:	88 1f       	adc	r24, r24
    3c08:	bb 1f       	adc	r27, r27
    3c0a:	26 17       	cp	r18, r22
    3c0c:	37 07       	cpc	r19, r23
    3c0e:	48 07       	cpc	r20, r24
    3c10:	ab 07       	cpc	r26, r27
    3c12:	b0 e8       	ldi	r27, 0x80	; 128
    3c14:	09 f0       	breq	.+2      	; 0x3c18 <__divsf3_pse+0x56>
    3c16:	bb 0b       	sbc	r27, r27
    3c18:	80 2d       	mov	r24, r0
    3c1a:	bf 01       	movw	r22, r30
    3c1c:	ff 27       	eor	r31, r31
    3c1e:	93 58       	subi	r25, 0x83	; 131
    3c20:	5f 4f       	sbci	r21, 0xFF	; 255
    3c22:	3a f0       	brmi	.+14     	; 0x3c32 <__divsf3_pse+0x70>
    3c24:	9e 3f       	cpi	r25, 0xFE	; 254
    3c26:	51 05       	cpc	r21, r1
    3c28:	78 f0       	brcs	.+30     	; 0x3c48 <__divsf3_pse+0x86>
    3c2a:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_inf>
    3c2e:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__fp_szero>
    3c32:	5f 3f       	cpi	r21, 0xFF	; 255
    3c34:	e4 f3       	brlt	.-8      	; 0x3c2e <__divsf3_pse+0x6c>
    3c36:	98 3e       	cpi	r25, 0xE8	; 232
    3c38:	d4 f3       	brlt	.-12     	; 0x3c2e <__divsf3_pse+0x6c>
    3c3a:	86 95       	lsr	r24
    3c3c:	77 95       	ror	r23
    3c3e:	67 95       	ror	r22
    3c40:	b7 95       	ror	r27
    3c42:	f7 95       	ror	r31
    3c44:	9f 5f       	subi	r25, 0xFF	; 255
    3c46:	c9 f7       	brne	.-14     	; 0x3c3a <__divsf3_pse+0x78>
    3c48:	88 0f       	add	r24, r24
    3c4a:	91 1d       	adc	r25, r1
    3c4c:	96 95       	lsr	r25
    3c4e:	87 95       	ror	r24
    3c50:	97 f9       	bld	r25, 7
    3c52:	08 95       	ret
    3c54:	e1 e0       	ldi	r30, 0x01	; 1
    3c56:	66 0f       	add	r22, r22
    3c58:	77 1f       	adc	r23, r23
    3c5a:	88 1f       	adc	r24, r24
    3c5c:	bb 1f       	adc	r27, r27
    3c5e:	62 17       	cp	r22, r18
    3c60:	73 07       	cpc	r23, r19
    3c62:	84 07       	cpc	r24, r20
    3c64:	ba 07       	cpc	r27, r26
    3c66:	20 f0       	brcs	.+8      	; 0x3c70 <__divsf3_pse+0xae>
    3c68:	62 1b       	sub	r22, r18
    3c6a:	73 0b       	sbc	r23, r19
    3c6c:	84 0b       	sbc	r24, r20
    3c6e:	ba 0b       	sbc	r27, r26
    3c70:	ee 1f       	adc	r30, r30
    3c72:	88 f7       	brcc	.-30     	; 0x3c56 <__divsf3_pse+0x94>
    3c74:	e0 95       	com	r30
    3c76:	08 95       	ret

00003c78 <__floatunsisf>:
    3c78:	e8 94       	clt
    3c7a:	09 c0       	rjmp	.+18     	; 0x3c8e <__floatsisf+0x12>

00003c7c <__floatsisf>:
    3c7c:	97 fb       	bst	r25, 7
    3c7e:	3e f4       	brtc	.+14     	; 0x3c8e <__floatsisf+0x12>
    3c80:	90 95       	com	r25
    3c82:	80 95       	com	r24
    3c84:	70 95       	com	r23
    3c86:	61 95       	neg	r22
    3c88:	7f 4f       	sbci	r23, 0xFF	; 255
    3c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8e:	99 23       	and	r25, r25
    3c90:	a9 f0       	breq	.+42     	; 0x3cbc <__floatsisf+0x40>
    3c92:	f9 2f       	mov	r31, r25
    3c94:	96 e9       	ldi	r25, 0x96	; 150
    3c96:	bb 27       	eor	r27, r27
    3c98:	93 95       	inc	r25
    3c9a:	f6 95       	lsr	r31
    3c9c:	87 95       	ror	r24
    3c9e:	77 95       	ror	r23
    3ca0:	67 95       	ror	r22
    3ca2:	b7 95       	ror	r27
    3ca4:	f1 11       	cpse	r31, r1
    3ca6:	f8 cf       	rjmp	.-16     	; 0x3c98 <__floatsisf+0x1c>
    3ca8:	fa f4       	brpl	.+62     	; 0x3ce8 <__floatsisf+0x6c>
    3caa:	bb 0f       	add	r27, r27
    3cac:	11 f4       	brne	.+4      	; 0x3cb2 <__floatsisf+0x36>
    3cae:	60 ff       	sbrs	r22, 0
    3cb0:	1b c0       	rjmp	.+54     	; 0x3ce8 <__floatsisf+0x6c>
    3cb2:	6f 5f       	subi	r22, 0xFF	; 255
    3cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    3cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cba:	16 c0       	rjmp	.+44     	; 0x3ce8 <__floatsisf+0x6c>
    3cbc:	88 23       	and	r24, r24
    3cbe:	11 f0       	breq	.+4      	; 0x3cc4 <__floatsisf+0x48>
    3cc0:	96 e9       	ldi	r25, 0x96	; 150
    3cc2:	11 c0       	rjmp	.+34     	; 0x3ce6 <__floatsisf+0x6a>
    3cc4:	77 23       	and	r23, r23
    3cc6:	21 f0       	breq	.+8      	; 0x3cd0 <__floatsisf+0x54>
    3cc8:	9e e8       	ldi	r25, 0x8E	; 142
    3cca:	87 2f       	mov	r24, r23
    3ccc:	76 2f       	mov	r23, r22
    3cce:	05 c0       	rjmp	.+10     	; 0x3cda <__floatsisf+0x5e>
    3cd0:	66 23       	and	r22, r22
    3cd2:	71 f0       	breq	.+28     	; 0x3cf0 <__floatsisf+0x74>
    3cd4:	96 e8       	ldi	r25, 0x86	; 134
    3cd6:	86 2f       	mov	r24, r22
    3cd8:	70 e0       	ldi	r23, 0x00	; 0
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	2a f0       	brmi	.+10     	; 0x3ce8 <__floatsisf+0x6c>
    3cde:	9a 95       	dec	r25
    3ce0:	66 0f       	add	r22, r22
    3ce2:	77 1f       	adc	r23, r23
    3ce4:	88 1f       	adc	r24, r24
    3ce6:	da f7       	brpl	.-10     	; 0x3cde <__floatsisf+0x62>
    3ce8:	88 0f       	add	r24, r24
    3cea:	96 95       	lsr	r25
    3cec:	87 95       	ror	r24
    3cee:	97 f9       	bld	r25, 7
    3cf0:	08 95       	ret

00003cf2 <__fp_inf>:
    3cf2:	97 f9       	bld	r25, 7
    3cf4:	9f 67       	ori	r25, 0x7F	; 127
    3cf6:	80 e8       	ldi	r24, 0x80	; 128
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	60 e0       	ldi	r22, 0x00	; 0
    3cfc:	08 95       	ret

00003cfe <__fp_nan>:
    3cfe:	9f ef       	ldi	r25, 0xFF	; 255
    3d00:	80 ec       	ldi	r24, 0xC0	; 192
    3d02:	08 95       	ret

00003d04 <__fp_pscA>:
    3d04:	00 24       	eor	r0, r0
    3d06:	0a 94       	dec	r0
    3d08:	16 16       	cp	r1, r22
    3d0a:	17 06       	cpc	r1, r23
    3d0c:	18 06       	cpc	r1, r24
    3d0e:	09 06       	cpc	r0, r25
    3d10:	08 95       	ret

00003d12 <__fp_pscB>:
    3d12:	00 24       	eor	r0, r0
    3d14:	0a 94       	dec	r0
    3d16:	12 16       	cp	r1, r18
    3d18:	13 06       	cpc	r1, r19
    3d1a:	14 06       	cpc	r1, r20
    3d1c:	05 06       	cpc	r0, r21
    3d1e:	08 95       	ret

00003d20 <__fp_round>:
    3d20:	09 2e       	mov	r0, r25
    3d22:	03 94       	inc	r0
    3d24:	00 0c       	add	r0, r0
    3d26:	11 f4       	brne	.+4      	; 0x3d2c <__fp_round+0xc>
    3d28:	88 23       	and	r24, r24
    3d2a:	52 f0       	brmi	.+20     	; 0x3d40 <__fp_round+0x20>
    3d2c:	bb 0f       	add	r27, r27
    3d2e:	40 f4       	brcc	.+16     	; 0x3d40 <__fp_round+0x20>
    3d30:	bf 2b       	or	r27, r31
    3d32:	11 f4       	brne	.+4      	; 0x3d38 <__fp_round+0x18>
    3d34:	60 ff       	sbrs	r22, 0
    3d36:	04 c0       	rjmp	.+8      	; 0x3d40 <__fp_round+0x20>
    3d38:	6f 5f       	subi	r22, 0xFF	; 255
    3d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d40:	08 95       	ret

00003d42 <__fp_split3>:
    3d42:	57 fd       	sbrc	r21, 7
    3d44:	90 58       	subi	r25, 0x80	; 128
    3d46:	44 0f       	add	r20, r20
    3d48:	55 1f       	adc	r21, r21
    3d4a:	59 f0       	breq	.+22     	; 0x3d62 <__fp_splitA+0x10>
    3d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d4e:	71 f0       	breq	.+28     	; 0x3d6c <__fp_splitA+0x1a>
    3d50:	47 95       	ror	r20

00003d52 <__fp_splitA>:
    3d52:	88 0f       	add	r24, r24
    3d54:	97 fb       	bst	r25, 7
    3d56:	99 1f       	adc	r25, r25
    3d58:	61 f0       	breq	.+24     	; 0x3d72 <__fp_splitA+0x20>
    3d5a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d5c:	79 f0       	breq	.+30     	; 0x3d7c <__fp_splitA+0x2a>
    3d5e:	87 95       	ror	r24
    3d60:	08 95       	ret
    3d62:	12 16       	cp	r1, r18
    3d64:	13 06       	cpc	r1, r19
    3d66:	14 06       	cpc	r1, r20
    3d68:	55 1f       	adc	r21, r21
    3d6a:	f2 cf       	rjmp	.-28     	; 0x3d50 <__fp_split3+0xe>
    3d6c:	46 95       	lsr	r20
    3d6e:	f1 df       	rcall	.-30     	; 0x3d52 <__fp_splitA>
    3d70:	08 c0       	rjmp	.+16     	; 0x3d82 <__fp_splitA+0x30>
    3d72:	16 16       	cp	r1, r22
    3d74:	17 06       	cpc	r1, r23
    3d76:	18 06       	cpc	r1, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	f1 cf       	rjmp	.-30     	; 0x3d5e <__fp_splitA+0xc>
    3d7c:	86 95       	lsr	r24
    3d7e:	71 05       	cpc	r23, r1
    3d80:	61 05       	cpc	r22, r1
    3d82:	08 94       	sec
    3d84:	08 95       	ret

00003d86 <__fp_zero>:
    3d86:	e8 94       	clt

00003d88 <__fp_szero>:
    3d88:	bb 27       	eor	r27, r27
    3d8a:	66 27       	eor	r22, r22
    3d8c:	77 27       	eor	r23, r23
    3d8e:	cb 01       	movw	r24, r22
    3d90:	97 f9       	bld	r25, 7
    3d92:	08 95       	ret

00003d94 <__mulsf3>:
    3d94:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__mulsf3x>
    3d98:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__fp_round>
    3d9c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__fp_pscA>
    3da0:	38 f0       	brcs	.+14     	; 0x3db0 <__mulsf3+0x1c>
    3da2:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__fp_pscB>
    3da6:	20 f0       	brcs	.+8      	; 0x3db0 <__mulsf3+0x1c>
    3da8:	95 23       	and	r25, r21
    3daa:	11 f0       	breq	.+4      	; 0x3db0 <__mulsf3+0x1c>
    3dac:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_inf>
    3db0:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_nan>
    3db4:	11 24       	eor	r1, r1
    3db6:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__fp_szero>

00003dba <__mulsf3x>:
    3dba:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_split3>
    3dbe:	70 f3       	brcs	.-36     	; 0x3d9c <__mulsf3+0x8>

00003dc0 <__mulsf3_pse>:
    3dc0:	95 9f       	mul	r25, r21
    3dc2:	c1 f3       	breq	.-16     	; 0x3db4 <__mulsf3+0x20>
    3dc4:	95 0f       	add	r25, r21
    3dc6:	50 e0       	ldi	r21, 0x00	; 0
    3dc8:	55 1f       	adc	r21, r21
    3dca:	62 9f       	mul	r22, r18
    3dcc:	f0 01       	movw	r30, r0
    3dce:	72 9f       	mul	r23, r18
    3dd0:	bb 27       	eor	r27, r27
    3dd2:	f0 0d       	add	r31, r0
    3dd4:	b1 1d       	adc	r27, r1
    3dd6:	63 9f       	mul	r22, r19
    3dd8:	aa 27       	eor	r26, r26
    3dda:	f0 0d       	add	r31, r0
    3ddc:	b1 1d       	adc	r27, r1
    3dde:	aa 1f       	adc	r26, r26
    3de0:	64 9f       	mul	r22, r20
    3de2:	66 27       	eor	r22, r22
    3de4:	b0 0d       	add	r27, r0
    3de6:	a1 1d       	adc	r26, r1
    3de8:	66 1f       	adc	r22, r22
    3dea:	82 9f       	mul	r24, r18
    3dec:	22 27       	eor	r18, r18
    3dee:	b0 0d       	add	r27, r0
    3df0:	a1 1d       	adc	r26, r1
    3df2:	62 1f       	adc	r22, r18
    3df4:	73 9f       	mul	r23, r19
    3df6:	b0 0d       	add	r27, r0
    3df8:	a1 1d       	adc	r26, r1
    3dfa:	62 1f       	adc	r22, r18
    3dfc:	83 9f       	mul	r24, r19
    3dfe:	a0 0d       	add	r26, r0
    3e00:	61 1d       	adc	r22, r1
    3e02:	22 1f       	adc	r18, r18
    3e04:	74 9f       	mul	r23, r20
    3e06:	33 27       	eor	r19, r19
    3e08:	a0 0d       	add	r26, r0
    3e0a:	61 1d       	adc	r22, r1
    3e0c:	23 1f       	adc	r18, r19
    3e0e:	84 9f       	mul	r24, r20
    3e10:	60 0d       	add	r22, r0
    3e12:	21 1d       	adc	r18, r1
    3e14:	82 2f       	mov	r24, r18
    3e16:	76 2f       	mov	r23, r22
    3e18:	6a 2f       	mov	r22, r26
    3e1a:	11 24       	eor	r1, r1
    3e1c:	9f 57       	subi	r25, 0x7F	; 127
    3e1e:	50 40       	sbci	r21, 0x00	; 0
    3e20:	9a f0       	brmi	.+38     	; 0x3e48 <__mulsf3_pse+0x88>
    3e22:	f1 f0       	breq	.+60     	; 0x3e60 <__mulsf3_pse+0xa0>
    3e24:	88 23       	and	r24, r24
    3e26:	4a f0       	brmi	.+18     	; 0x3e3a <__mulsf3_pse+0x7a>
    3e28:	ee 0f       	add	r30, r30
    3e2a:	ff 1f       	adc	r31, r31
    3e2c:	bb 1f       	adc	r27, r27
    3e2e:	66 1f       	adc	r22, r22
    3e30:	77 1f       	adc	r23, r23
    3e32:	88 1f       	adc	r24, r24
    3e34:	91 50       	subi	r25, 0x01	; 1
    3e36:	50 40       	sbci	r21, 0x00	; 0
    3e38:	a9 f7       	brne	.-22     	; 0x3e24 <__mulsf3_pse+0x64>
    3e3a:	9e 3f       	cpi	r25, 0xFE	; 254
    3e3c:	51 05       	cpc	r21, r1
    3e3e:	80 f0       	brcs	.+32     	; 0x3e60 <__mulsf3_pse+0xa0>
    3e40:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_inf>
    3e44:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__fp_szero>
    3e48:	5f 3f       	cpi	r21, 0xFF	; 255
    3e4a:	e4 f3       	brlt	.-8      	; 0x3e44 <__mulsf3_pse+0x84>
    3e4c:	98 3e       	cpi	r25, 0xE8	; 232
    3e4e:	d4 f3       	brlt	.-12     	; 0x3e44 <__mulsf3_pse+0x84>
    3e50:	86 95       	lsr	r24
    3e52:	77 95       	ror	r23
    3e54:	67 95       	ror	r22
    3e56:	b7 95       	ror	r27
    3e58:	f7 95       	ror	r31
    3e5a:	e7 95       	ror	r30
    3e5c:	9f 5f       	subi	r25, 0xFF	; 255
    3e5e:	c1 f7       	brne	.-16     	; 0x3e50 <__mulsf3_pse+0x90>
    3e60:	fe 2b       	or	r31, r30
    3e62:	88 0f       	add	r24, r24
    3e64:	91 1d       	adc	r25, r1
    3e66:	96 95       	lsr	r25
    3e68:	87 95       	ror	r24
    3e6a:	97 f9       	bld	r25, 7
    3e6c:	08 95       	ret

00003e6e <__udivmodsi4>:
    3e6e:	a1 e2       	ldi	r26, 0x21	; 33
    3e70:	1a 2e       	mov	r1, r26
    3e72:	aa 1b       	sub	r26, r26
    3e74:	bb 1b       	sub	r27, r27
    3e76:	fd 01       	movw	r30, r26
    3e78:	0d c0       	rjmp	.+26     	; 0x3e94 <__udivmodsi4_ep>

00003e7a <__udivmodsi4_loop>:
    3e7a:	aa 1f       	adc	r26, r26
    3e7c:	bb 1f       	adc	r27, r27
    3e7e:	ee 1f       	adc	r30, r30
    3e80:	ff 1f       	adc	r31, r31
    3e82:	a2 17       	cp	r26, r18
    3e84:	b3 07       	cpc	r27, r19
    3e86:	e4 07       	cpc	r30, r20
    3e88:	f5 07       	cpc	r31, r21
    3e8a:	20 f0       	brcs	.+8      	; 0x3e94 <__udivmodsi4_ep>
    3e8c:	a2 1b       	sub	r26, r18
    3e8e:	b3 0b       	sbc	r27, r19
    3e90:	e4 0b       	sbc	r30, r20
    3e92:	f5 0b       	sbc	r31, r21

00003e94 <__udivmodsi4_ep>:
    3e94:	66 1f       	adc	r22, r22
    3e96:	77 1f       	adc	r23, r23
    3e98:	88 1f       	adc	r24, r24
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	1a 94       	dec	r1
    3e9e:	69 f7       	brne	.-38     	; 0x3e7a <__udivmodsi4_loop>
    3ea0:	60 95       	com	r22
    3ea2:	70 95       	com	r23
    3ea4:	80 95       	com	r24
    3ea6:	90 95       	com	r25
    3ea8:	9b 01       	movw	r18, r22
    3eaa:	ac 01       	movw	r20, r24
    3eac:	bd 01       	movw	r22, r26
    3eae:	cf 01       	movw	r24, r30
    3eb0:	08 95       	ret

00003eb2 <__tablejump2__>:
    3eb2:	ee 0f       	add	r30, r30
    3eb4:	ff 1f       	adc	r31, r31
    3eb6:	05 90       	lpm	r0, Z+
    3eb8:	f4 91       	lpm	r31, Z
    3eba:	e0 2d       	mov	r30, r0
    3ebc:	09 94       	ijmp

00003ebe <dtostrf>:
    3ebe:	ef 92       	push	r14
    3ec0:	0f 93       	push	r16
    3ec2:	1f 93       	push	r17
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	e8 01       	movw	r28, r16
    3eca:	34 e0       	ldi	r19, 0x04	; 4
    3ecc:	47 fd       	sbrc	r20, 7
    3ece:	34 e1       	ldi	r19, 0x14	; 20
    3ed0:	04 2e       	mov	r0, r20
    3ed2:	00 0c       	add	r0, r0
    3ed4:	55 0b       	sbc	r21, r21
    3ed6:	57 ff       	sbrs	r21, 7
    3ed8:	03 c0       	rjmp	.+6      	; 0x3ee0 <dtostrf+0x22>
    3eda:	51 95       	neg	r21
    3edc:	41 95       	neg	r20
    3ede:	51 09       	sbc	r21, r1
    3ee0:	e3 2e       	mov	r14, r19
    3ee2:	02 2f       	mov	r16, r18
    3ee4:	24 2f       	mov	r18, r20
    3ee6:	ae 01       	movw	r20, r28
    3ee8:	0e 94 90 21 	call	0x4320	; 0x4320 <dtoa_prf>
    3eec:	ce 01       	movw	r24, r28
    3eee:	df 91       	pop	r29
    3ef0:	cf 91       	pop	r28
    3ef2:	1f 91       	pop	r17
    3ef4:	0f 91       	pop	r16
    3ef6:	ef 90       	pop	r14
    3ef8:	08 95       	ret

00003efa <memcpy>:
    3efa:	fb 01       	movw	r30, r22
    3efc:	dc 01       	movw	r26, r24
    3efe:	02 c0       	rjmp	.+4      	; 0x3f04 <memcpy+0xa>
    3f00:	01 90       	ld	r0, Z+
    3f02:	0d 92       	st	X+, r0
    3f04:	41 50       	subi	r20, 0x01	; 1
    3f06:	50 40       	sbci	r21, 0x00	; 0
    3f08:	d8 f7       	brcc	.-10     	; 0x3f00 <memcpy+0x6>
    3f0a:	08 95       	ret

00003f0c <snprintf>:
    3f0c:	ae e0       	ldi	r26, 0x0E	; 14
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	ec e8       	ldi	r30, 0x8C	; 140
    3f12:	ff e1       	ldi	r31, 0x1F	; 31
    3f14:	0c 94 79 24 	jmp	0x48f2	; 0x48f2 <__prologue_saves__+0x1c>
    3f18:	0d 89       	ldd	r16, Y+21	; 0x15
    3f1a:	1e 89       	ldd	r17, Y+22	; 0x16
    3f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f20:	26 e0       	ldi	r18, 0x06	; 6
    3f22:	2c 83       	std	Y+4, r18	; 0x04
    3f24:	1a 83       	std	Y+2, r17	; 0x02
    3f26:	09 83       	std	Y+1, r16	; 0x01
    3f28:	97 ff       	sbrs	r25, 7
    3f2a:	02 c0       	rjmp	.+4      	; 0x3f30 <snprintf+0x24>
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	90 e8       	ldi	r25, 0x80	; 128
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	9e 83       	std	Y+6, r25	; 0x06
    3f34:	8d 83       	std	Y+5, r24	; 0x05
    3f36:	ae 01       	movw	r20, r28
    3f38:	45 5e       	subi	r20, 0xE5	; 229
    3f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3c:	69 8d       	ldd	r22, Y+25	; 0x19
    3f3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f40:	ce 01       	movw	r24, r28
    3f42:	01 96       	adiw	r24, 0x01	; 1
    3f44:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <vfprintf>
    3f48:	4d 81       	ldd	r20, Y+5	; 0x05
    3f4a:	5e 81       	ldd	r21, Y+6	; 0x06
    3f4c:	57 fd       	sbrc	r21, 7
    3f4e:	0a c0       	rjmp	.+20     	; 0x3f64 <snprintf+0x58>
    3f50:	2f 81       	ldd	r18, Y+7	; 0x07
    3f52:	38 85       	ldd	r19, Y+8	; 0x08
    3f54:	42 17       	cp	r20, r18
    3f56:	53 07       	cpc	r21, r19
    3f58:	0c f4       	brge	.+2      	; 0x3f5c <snprintf+0x50>
    3f5a:	9a 01       	movw	r18, r20
    3f5c:	02 0f       	add	r16, r18
    3f5e:	13 1f       	adc	r17, r19
    3f60:	f8 01       	movw	r30, r16
    3f62:	10 82       	st	Z, r1
    3f64:	2e 96       	adiw	r28, 0x0e	; 14
    3f66:	e4 e0       	ldi	r30, 0x04	; 4
    3f68:	0c 94 95 24 	jmp	0x492a	; 0x492a <__epilogue_restores__+0x1c>

00003f6c <vfprintf>:
    3f6c:	ab e0       	ldi	r26, 0x0B	; 11
    3f6e:	b0 e0       	ldi	r27, 0x00	; 0
    3f70:	ec eb       	ldi	r30, 0xBC	; 188
    3f72:	ff e1       	ldi	r31, 0x1F	; 31
    3f74:	0c 94 6b 24 	jmp	0x48d6	; 0x48d6 <__prologue_saves__>
    3f78:	7c 01       	movw	r14, r24
    3f7a:	3b 01       	movw	r6, r22
    3f7c:	8a 01       	movw	r16, r20
    3f7e:	fc 01       	movw	r30, r24
    3f80:	17 82       	std	Z+7, r1	; 0x07
    3f82:	16 82       	std	Z+6, r1	; 0x06
    3f84:	83 81       	ldd	r24, Z+3	; 0x03
    3f86:	81 ff       	sbrs	r24, 1
    3f88:	c8 c1       	rjmp	.+912    	; 0x431a <vfprintf+0x3ae>
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	01 96       	adiw	r24, 0x01	; 1
    3f8e:	5c 01       	movw	r10, r24
    3f90:	f7 01       	movw	r30, r14
    3f92:	93 81       	ldd	r25, Z+3	; 0x03
    3f94:	f3 01       	movw	r30, r6
    3f96:	93 fd       	sbrc	r25, 3
    3f98:	85 91       	lpm	r24, Z+
    3f9a:	93 ff       	sbrs	r25, 3
    3f9c:	81 91       	ld	r24, Z+
    3f9e:	3f 01       	movw	r6, r30
    3fa0:	88 23       	and	r24, r24
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <vfprintf+0x3a>
    3fa4:	53 c1       	rjmp	.+678    	; 0x424c <vfprintf+0x2e0>
    3fa6:	85 32       	cpi	r24, 0x25	; 37
    3fa8:	39 f4       	brne	.+14     	; 0x3fb8 <vfprintf+0x4c>
    3faa:	93 fd       	sbrc	r25, 3
    3fac:	85 91       	lpm	r24, Z+
    3fae:	93 ff       	sbrs	r25, 3
    3fb0:	81 91       	ld	r24, Z+
    3fb2:	3f 01       	movw	r6, r30
    3fb4:	85 32       	cpi	r24, 0x25	; 37
    3fb6:	29 f4       	brne	.+10     	; 0x3fc2 <vfprintf+0x56>
    3fb8:	b7 01       	movw	r22, r14
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 dd 23 	call	0x47ba	; 0x47ba <fputc>
    3fc0:	e7 cf       	rjmp	.-50     	; 0x3f90 <vfprintf+0x24>
    3fc2:	91 2c       	mov	r9, r1
    3fc4:	21 2c       	mov	r2, r1
    3fc6:	31 2c       	mov	r3, r1
    3fc8:	ff e1       	ldi	r31, 0x1F	; 31
    3fca:	f3 15       	cp	r31, r3
    3fcc:	38 f0       	brcs	.+14     	; 0x3fdc <vfprintf+0x70>
    3fce:	8b 32       	cpi	r24, 0x2B	; 43
    3fd0:	11 f1       	breq	.+68     	; 0x4016 <vfprintf+0xaa>
    3fd2:	90 f4       	brcc	.+36     	; 0x3ff8 <vfprintf+0x8c>
    3fd4:	80 32       	cpi	r24, 0x20	; 32
    3fd6:	09 f1       	breq	.+66     	; 0x401a <vfprintf+0xae>
    3fd8:	83 32       	cpi	r24, 0x23	; 35
    3fda:	29 f1       	breq	.+74     	; 0x4026 <vfprintf+0xba>
    3fdc:	37 fc       	sbrc	r3, 7
    3fde:	3c c0       	rjmp	.+120    	; 0x4058 <vfprintf+0xec>
    3fe0:	20 ed       	ldi	r18, 0xD0	; 208
    3fe2:	28 0f       	add	r18, r24
    3fe4:	2a 30       	cpi	r18, 0x0A	; 10
    3fe6:	50 f5       	brcc	.+84     	; 0x403c <vfprintf+0xd0>
    3fe8:	36 fe       	sbrs	r3, 6
    3fea:	20 c0       	rjmp	.+64     	; 0x402c <vfprintf+0xc0>
    3fec:	8a e0       	ldi	r24, 0x0A	; 10
    3fee:	98 9e       	mul	r9, r24
    3ff0:	20 0d       	add	r18, r0
    3ff2:	11 24       	eor	r1, r1
    3ff4:	92 2e       	mov	r9, r18
    3ff6:	06 c0       	rjmp	.+12     	; 0x4004 <vfprintf+0x98>
    3ff8:	8d 32       	cpi	r24, 0x2D	; 45
    3ffa:	91 f0       	breq	.+36     	; 0x4020 <vfprintf+0xb4>
    3ffc:	80 33       	cpi	r24, 0x30	; 48
    3ffe:	71 f7       	brne	.-36     	; 0x3fdc <vfprintf+0x70>
    4000:	68 94       	set
    4002:	30 f8       	bld	r3, 0
    4004:	f3 01       	movw	r30, r6
    4006:	93 fd       	sbrc	r25, 3
    4008:	85 91       	lpm	r24, Z+
    400a:	93 ff       	sbrs	r25, 3
    400c:	81 91       	ld	r24, Z+
    400e:	3f 01       	movw	r6, r30
    4010:	81 11       	cpse	r24, r1
    4012:	da cf       	rjmp	.-76     	; 0x3fc8 <vfprintf+0x5c>
    4014:	21 c0       	rjmp	.+66     	; 0x4058 <vfprintf+0xec>
    4016:	68 94       	set
    4018:	31 f8       	bld	r3, 1
    401a:	68 94       	set
    401c:	32 f8       	bld	r3, 2
    401e:	f2 cf       	rjmp	.-28     	; 0x4004 <vfprintf+0x98>
    4020:	68 94       	set
    4022:	33 f8       	bld	r3, 3
    4024:	ef cf       	rjmp	.-34     	; 0x4004 <vfprintf+0x98>
    4026:	68 94       	set
    4028:	34 f8       	bld	r3, 4
    402a:	ec cf       	rjmp	.-40     	; 0x4004 <vfprintf+0x98>
    402c:	ea e0       	ldi	r30, 0x0A	; 10
    402e:	2e 9e       	mul	r2, r30
    4030:	20 0d       	add	r18, r0
    4032:	11 24       	eor	r1, r1
    4034:	22 2e       	mov	r2, r18
    4036:	68 94       	set
    4038:	35 f8       	bld	r3, 5
    403a:	e4 cf       	rjmp	.-56     	; 0x4004 <vfprintf+0x98>
    403c:	8e 32       	cpi	r24, 0x2E	; 46
    403e:	29 f4       	brne	.+10     	; 0x404a <vfprintf+0xde>
    4040:	36 fc       	sbrc	r3, 6
    4042:	04 c1       	rjmp	.+520    	; 0x424c <vfprintf+0x2e0>
    4044:	68 94       	set
    4046:	36 f8       	bld	r3, 6
    4048:	dd cf       	rjmp	.-70     	; 0x4004 <vfprintf+0x98>
    404a:	8c 36       	cpi	r24, 0x6C	; 108
    404c:	19 f4       	brne	.+6      	; 0x4054 <vfprintf+0xe8>
    404e:	68 94       	set
    4050:	37 f8       	bld	r3, 7
    4052:	d8 cf       	rjmp	.-80     	; 0x4004 <vfprintf+0x98>
    4054:	88 36       	cpi	r24, 0x68	; 104
    4056:	b1 f2       	breq	.-84     	; 0x4004 <vfprintf+0x98>
    4058:	98 2f       	mov	r25, r24
    405a:	9f 7d       	andi	r25, 0xDF	; 223
    405c:	95 54       	subi	r25, 0x45	; 69
    405e:	93 30       	cpi	r25, 0x03	; 3
    4060:	e0 f0       	brcs	.+56     	; 0x409a <vfprintf+0x12e>
    4062:	83 36       	cpi	r24, 0x63	; 99
    4064:	a1 f1       	breq	.+104    	; 0x40ce <vfprintf+0x162>
    4066:	83 37       	cpi	r24, 0x73	; 115
    4068:	c1 f1       	breq	.+112    	; 0x40da <vfprintf+0x16e>
    406a:	83 35       	cpi	r24, 0x53	; 83
    406c:	09 f0       	breq	.+2      	; 0x4070 <vfprintf+0x104>
    406e:	63 c0       	rjmp	.+198    	; 0x4136 <vfprintf+0x1ca>
    4070:	28 01       	movw	r4, r16
    4072:	f2 e0       	ldi	r31, 0x02	; 2
    4074:	4f 0e       	add	r4, r31
    4076:	51 1c       	adc	r5, r1
    4078:	f8 01       	movw	r30, r16
    407a:	c0 80       	ld	r12, Z
    407c:	d1 80       	ldd	r13, Z+1	; 0x01
    407e:	69 2d       	mov	r22, r9
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	36 fc       	sbrc	r3, 6
    4084:	02 c0       	rjmp	.+4      	; 0x408a <vfprintf+0x11e>
    4086:	6f ef       	ldi	r22, 0xFF	; 255
    4088:	7f ef       	ldi	r23, 0xFF	; 255
    408a:	c6 01       	movw	r24, r12
    408c:	0e 94 c7 23 	call	0x478e	; 0x478e <strnlen_P>
    4090:	4c 01       	movw	r8, r24
    4092:	68 94       	set
    4094:	37 f8       	bld	r3, 7
    4096:	82 01       	movw	r16, r4
    4098:	0a c0       	rjmp	.+20     	; 0x40ae <vfprintf+0x142>
    409a:	0c 5f       	subi	r16, 0xFC	; 252
    409c:	1f 4f       	sbci	r17, 0xFF	; 255
    409e:	ff e3       	ldi	r31, 0x3F	; 63
    40a0:	f9 83       	std	Y+1, r31	; 0x01
    40a2:	88 24       	eor	r8, r8
    40a4:	83 94       	inc	r8
    40a6:	91 2c       	mov	r9, r1
    40a8:	65 01       	movw	r12, r10
    40aa:	e8 94       	clt
    40ac:	37 f8       	bld	r3, 7
    40ae:	33 fe       	sbrs	r3, 3
    40b0:	2d c0       	rjmp	.+90     	; 0x410c <vfprintf+0x1a0>
    40b2:	52 2c       	mov	r5, r2
    40b4:	81 14       	cp	r8, r1
    40b6:	91 04       	cpc	r9, r1
    40b8:	71 f5       	brne	.+92     	; 0x4116 <vfprintf+0x1aa>
    40ba:	55 20       	and	r5, r5
    40bc:	09 f4       	brne	.+2      	; 0x40c0 <vfprintf+0x154>
    40be:	68 cf       	rjmp	.-304    	; 0x3f90 <vfprintf+0x24>
    40c0:	b7 01       	movw	r22, r14
    40c2:	80 e2       	ldi	r24, 0x20	; 32
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	0e 94 dd 23 	call	0x47ba	; 0x47ba <fputc>
    40ca:	5a 94       	dec	r5
    40cc:	f6 cf       	rjmp	.-20     	; 0x40ba <vfprintf+0x14e>
    40ce:	f8 01       	movw	r30, r16
    40d0:	80 81       	ld	r24, Z
    40d2:	89 83       	std	Y+1, r24	; 0x01
    40d4:	0e 5f       	subi	r16, 0xFE	; 254
    40d6:	1f 4f       	sbci	r17, 0xFF	; 255
    40d8:	e4 cf       	rjmp	.-56     	; 0x40a2 <vfprintf+0x136>
    40da:	28 01       	movw	r4, r16
    40dc:	f2 e0       	ldi	r31, 0x02	; 2
    40de:	4f 0e       	add	r4, r31
    40e0:	51 1c       	adc	r5, r1
    40e2:	f8 01       	movw	r30, r16
    40e4:	c0 80       	ld	r12, Z
    40e6:	d1 80       	ldd	r13, Z+1	; 0x01
    40e8:	69 2d       	mov	r22, r9
    40ea:	70 e0       	ldi	r23, 0x00	; 0
    40ec:	36 fc       	sbrc	r3, 6
    40ee:	02 c0       	rjmp	.+4      	; 0x40f4 <vfprintf+0x188>
    40f0:	6f ef       	ldi	r22, 0xFF	; 255
    40f2:	7f ef       	ldi	r23, 0xFF	; 255
    40f4:	c6 01       	movw	r24, r12
    40f6:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <strnlen>
    40fa:	4c 01       	movw	r8, r24
    40fc:	82 01       	movw	r16, r4
    40fe:	d5 cf       	rjmp	.-86     	; 0x40aa <vfprintf+0x13e>
    4100:	b7 01       	movw	r22, r14
    4102:	80 e2       	ldi	r24, 0x20	; 32
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	0e 94 dd 23 	call	0x47ba	; 0x47ba <fputc>
    410a:	2a 94       	dec	r2
    410c:	28 14       	cp	r2, r8
    410e:	19 04       	cpc	r1, r9
    4110:	09 f0       	breq	.+2      	; 0x4114 <vfprintf+0x1a8>
    4112:	b0 f7       	brcc	.-20     	; 0x4100 <vfprintf+0x194>
    4114:	ce cf       	rjmp	.-100    	; 0x40b2 <vfprintf+0x146>
    4116:	f6 01       	movw	r30, r12
    4118:	37 fc       	sbrc	r3, 7
    411a:	85 91       	lpm	r24, Z+
    411c:	37 fe       	sbrs	r3, 7
    411e:	81 91       	ld	r24, Z+
    4120:	6f 01       	movw	r12, r30
    4122:	b7 01       	movw	r22, r14
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 dd 23 	call	0x47ba	; 0x47ba <fputc>
    412a:	51 10       	cpse	r5, r1
    412c:	5a 94       	dec	r5
    412e:	f1 e0       	ldi	r31, 0x01	; 1
    4130:	8f 1a       	sub	r8, r31
    4132:	91 08       	sbc	r9, r1
    4134:	bf cf       	rjmp	.-130    	; 0x40b4 <vfprintf+0x148>
    4136:	84 36       	cpi	r24, 0x64	; 100
    4138:	19 f0       	breq	.+6      	; 0x4140 <vfprintf+0x1d4>
    413a:	89 36       	cpi	r24, 0x69	; 105
    413c:	09 f0       	breq	.+2      	; 0x4140 <vfprintf+0x1d4>
    413e:	77 c0       	rjmp	.+238    	; 0x422e <vfprintf+0x2c2>
    4140:	f8 01       	movw	r30, r16
    4142:	37 fe       	sbrs	r3, 7
    4144:	6b c0       	rjmp	.+214    	; 0x421c <vfprintf+0x2b0>
    4146:	60 81       	ld	r22, Z
    4148:	71 81       	ldd	r23, Z+1	; 0x01
    414a:	82 81       	ldd	r24, Z+2	; 0x02
    414c:	93 81       	ldd	r25, Z+3	; 0x03
    414e:	0c 5f       	subi	r16, 0xFC	; 252
    4150:	1f 4f       	sbci	r17, 0xFF	; 255
    4152:	f3 2d       	mov	r31, r3
    4154:	ff 76       	andi	r31, 0x6F	; 111
    4156:	3f 2e       	mov	r3, r31
    4158:	97 ff       	sbrs	r25, 7
    415a:	09 c0       	rjmp	.+18     	; 0x416e <vfprintf+0x202>
    415c:	90 95       	com	r25
    415e:	80 95       	com	r24
    4160:	70 95       	com	r23
    4162:	61 95       	neg	r22
    4164:	7f 4f       	sbci	r23, 0xFF	; 255
    4166:	8f 4f       	sbci	r24, 0xFF	; 255
    4168:	9f 4f       	sbci	r25, 0xFF	; 255
    416a:	68 94       	set
    416c:	37 f8       	bld	r3, 7
    416e:	2a e0       	ldi	r18, 0x0A	; 10
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	a5 01       	movw	r20, r10
    4174:	0e 94 0d 24 	call	0x481a	; 0x481a <__ultoa_invert>
    4178:	c8 2e       	mov	r12, r24
    417a:	ca 18       	sub	r12, r10
    417c:	8c 2c       	mov	r8, r12
    417e:	43 2c       	mov	r4, r3
    4180:	36 fe       	sbrs	r3, 6
    4182:	0c c0       	rjmp	.+24     	; 0x419c <vfprintf+0x230>
    4184:	e8 94       	clt
    4186:	40 f8       	bld	r4, 0
    4188:	c9 14       	cp	r12, r9
    418a:	40 f4       	brcc	.+16     	; 0x419c <vfprintf+0x230>
    418c:	34 fe       	sbrs	r3, 4
    418e:	05 c0       	rjmp	.+10     	; 0x419a <vfprintf+0x22e>
    4190:	32 fc       	sbrc	r3, 2
    4192:	03 c0       	rjmp	.+6      	; 0x419a <vfprintf+0x22e>
    4194:	f3 2d       	mov	r31, r3
    4196:	fe 7e       	andi	r31, 0xEE	; 238
    4198:	4f 2e       	mov	r4, r31
    419a:	89 2c       	mov	r8, r9
    419c:	44 fe       	sbrs	r4, 4
    419e:	95 c0       	rjmp	.+298    	; 0x42ca <vfprintf+0x35e>
    41a0:	fe 01       	movw	r30, r28
    41a2:	ec 0d       	add	r30, r12
    41a4:	f1 1d       	adc	r31, r1
    41a6:	80 81       	ld	r24, Z
    41a8:	80 33       	cpi	r24, 0x30	; 48
    41aa:	09 f0       	breq	.+2      	; 0x41ae <vfprintf+0x242>
    41ac:	87 c0       	rjmp	.+270    	; 0x42bc <vfprintf+0x350>
    41ae:	24 2d       	mov	r18, r4
    41b0:	29 7e       	andi	r18, 0xE9	; 233
    41b2:	42 2e       	mov	r4, r18
    41b4:	84 2d       	mov	r24, r4
    41b6:	88 70       	andi	r24, 0x08	; 8
    41b8:	58 2e       	mov	r5, r24
    41ba:	43 fc       	sbrc	r4, 3
    41bc:	95 c0       	rjmp	.+298    	; 0x42e8 <vfprintf+0x37c>
    41be:	40 fe       	sbrs	r4, 0
    41c0:	8f c0       	rjmp	.+286    	; 0x42e0 <vfprintf+0x374>
    41c2:	9c 2c       	mov	r9, r12
    41c4:	82 14       	cp	r8, r2
    41c6:	18 f4       	brcc	.+6      	; 0x41ce <vfprintf+0x262>
    41c8:	2c 0c       	add	r2, r12
    41ca:	92 2c       	mov	r9, r2
    41cc:	98 18       	sub	r9, r8
    41ce:	44 fe       	sbrs	r4, 4
    41d0:	91 c0       	rjmp	.+290    	; 0x42f4 <vfprintf+0x388>
    41d2:	b7 01       	movw	r22, r14
    41d4:	80 e3       	ldi	r24, 0x30	; 48
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	0e 94 dd 23 	call	0x47ba	; 0x47ba <fputc>
    41dc:	42 fe       	sbrs	r4, 2
    41de:	09 c0       	rjmp	.+18     	; 0x41f2 <vfprintf+0x286>
    41e0:	88 e7       	ldi	r24, 0x78	; 120
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	41 fe       	sbrs	r4, 1
    41e6:	02 c0       	rjmp	.+4      	; 0x41ec <vfprintf+0x280>
    41e8:	88 e5       	ldi	r24, 0x58	; 88
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	b7 01       	movw	r22, r14
    41ee:	0e 94 dd 23 	call	0x47ba	; 0x47ba <fputc>
    41f2:	c9 14       	cp	r12, r9
    41f4:	08 f4       	brcc	.+2      	; 0x41f8 <vfprintf+0x28c>
    41f6:	8a c0       	rjmp	.+276    	; 0x430c <vfprintf+0x3a0>
    41f8:	ca 94       	dec	r12
    41fa:	d1 2c       	mov	r13, r1
    41fc:	9f ef       	ldi	r25, 0xFF	; 255
    41fe:	c9 1a       	sub	r12, r25
    4200:	d9 0a       	sbc	r13, r25
    4202:	ca 0c       	add	r12, r10
    4204:	db 1c       	adc	r13, r11
    4206:	f6 01       	movw	r30, r12
    4208:	82 91       	ld	r24, -Z
    420a:	6f 01       	movw	r12, r30
    420c:	b7 01       	movw	r22, r14
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	0e 94 dd 23 	call	0x47ba	; 0x47ba <fputc>
    4214:	ac 14       	cp	r10, r12
    4216:	bd 04       	cpc	r11, r13
    4218:	b1 f7       	brne	.-20     	; 0x4206 <vfprintf+0x29a>
    421a:	4f cf       	rjmp	.-354    	; 0x40ba <vfprintf+0x14e>
    421c:	60 81       	ld	r22, Z
    421e:	71 81       	ldd	r23, Z+1	; 0x01
    4220:	07 2e       	mov	r0, r23
    4222:	00 0c       	add	r0, r0
    4224:	88 0b       	sbc	r24, r24
    4226:	99 0b       	sbc	r25, r25
    4228:	0e 5f       	subi	r16, 0xFE	; 254
    422a:	1f 4f       	sbci	r17, 0xFF	; 255
    422c:	92 cf       	rjmp	.-220    	; 0x4152 <vfprintf+0x1e6>
    422e:	d3 2c       	mov	r13, r3
    4230:	e8 94       	clt
    4232:	d4 f8       	bld	r13, 4
    4234:	2a e0       	ldi	r18, 0x0A	; 10
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	85 37       	cpi	r24, 0x75	; 117
    423a:	39 f1       	breq	.+78     	; 0x428a <vfprintf+0x31e>
    423c:	23 2d       	mov	r18, r3
    423e:	29 7f       	andi	r18, 0xF9	; 249
    4240:	d2 2e       	mov	r13, r18
    4242:	8f 36       	cpi	r24, 0x6F	; 111
    4244:	01 f1       	breq	.+64     	; 0x4286 <vfprintf+0x31a>
    4246:	48 f4       	brcc	.+18     	; 0x425a <vfprintf+0x2ee>
    4248:	88 35       	cpi	r24, 0x58	; 88
    424a:	a9 f0       	breq	.+42     	; 0x4276 <vfprintf+0x30a>
    424c:	f7 01       	movw	r30, r14
    424e:	86 81       	ldd	r24, Z+6	; 0x06
    4250:	97 81       	ldd	r25, Z+7	; 0x07
    4252:	2b 96       	adiw	r28, 0x0b	; 11
    4254:	e2 e1       	ldi	r30, 0x12	; 18
    4256:	0c 94 87 24 	jmp	0x490e	; 0x490e <__epilogue_restores__>
    425a:	80 37       	cpi	r24, 0x70	; 112
    425c:	49 f0       	breq	.+18     	; 0x4270 <vfprintf+0x304>
    425e:	88 37       	cpi	r24, 0x78	; 120
    4260:	a9 f7       	brne	.-22     	; 0x424c <vfprintf+0x2e0>
    4262:	d4 fe       	sbrs	r13, 4
    4264:	02 c0       	rjmp	.+4      	; 0x426a <vfprintf+0x2fe>
    4266:	68 94       	set
    4268:	d2 f8       	bld	r13, 2
    426a:	20 e1       	ldi	r18, 0x10	; 16
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	0d c0       	rjmp	.+26     	; 0x428a <vfprintf+0x31e>
    4270:	68 94       	set
    4272:	d4 f8       	bld	r13, 4
    4274:	f6 cf       	rjmp	.-20     	; 0x4262 <vfprintf+0x2f6>
    4276:	34 fe       	sbrs	r3, 4
    4278:	03 c0       	rjmp	.+6      	; 0x4280 <vfprintf+0x314>
    427a:	82 2f       	mov	r24, r18
    427c:	86 60       	ori	r24, 0x06	; 6
    427e:	d8 2e       	mov	r13, r24
    4280:	20 e1       	ldi	r18, 0x10	; 16
    4282:	32 e0       	ldi	r19, 0x02	; 2
    4284:	02 c0       	rjmp	.+4      	; 0x428a <vfprintf+0x31e>
    4286:	28 e0       	ldi	r18, 0x08	; 8
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	f8 01       	movw	r30, r16
    428c:	d7 fe       	sbrs	r13, 7
    428e:	0f c0       	rjmp	.+30     	; 0x42ae <vfprintf+0x342>
    4290:	60 81       	ld	r22, Z
    4292:	71 81       	ldd	r23, Z+1	; 0x01
    4294:	82 81       	ldd	r24, Z+2	; 0x02
    4296:	93 81       	ldd	r25, Z+3	; 0x03
    4298:	0c 5f       	subi	r16, 0xFC	; 252
    429a:	1f 4f       	sbci	r17, 0xFF	; 255
    429c:	a5 01       	movw	r20, r10
    429e:	0e 94 0d 24 	call	0x481a	; 0x481a <__ultoa_invert>
    42a2:	c8 2e       	mov	r12, r24
    42a4:	ca 18       	sub	r12, r10
    42a6:	3d 2c       	mov	r3, r13
    42a8:	e8 94       	clt
    42aa:	37 f8       	bld	r3, 7
    42ac:	67 cf       	rjmp	.-306    	; 0x417c <vfprintf+0x210>
    42ae:	60 81       	ld	r22, Z
    42b0:	71 81       	ldd	r23, Z+1	; 0x01
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	0e 5f       	subi	r16, 0xFE	; 254
    42b8:	1f 4f       	sbci	r17, 0xFF	; 255
    42ba:	f0 cf       	rjmp	.-32     	; 0x429c <vfprintf+0x330>
    42bc:	42 fc       	sbrc	r4, 2
    42be:	02 c0       	rjmp	.+4      	; 0x42c4 <vfprintf+0x358>
    42c0:	83 94       	inc	r8
    42c2:	78 cf       	rjmp	.-272    	; 0x41b4 <vfprintf+0x248>
    42c4:	83 94       	inc	r8
    42c6:	83 94       	inc	r8
    42c8:	75 cf       	rjmp	.-278    	; 0x41b4 <vfprintf+0x248>
    42ca:	84 2d       	mov	r24, r4
    42cc:	86 78       	andi	r24, 0x86	; 134
    42ce:	09 f4       	brne	.+2      	; 0x42d2 <vfprintf+0x366>
    42d0:	71 cf       	rjmp	.-286    	; 0x41b4 <vfprintf+0x248>
    42d2:	f6 cf       	rjmp	.-20     	; 0x42c0 <vfprintf+0x354>
    42d4:	b7 01       	movw	r22, r14
    42d6:	80 e2       	ldi	r24, 0x20	; 32
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0e 94 dd 23 	call	0x47ba	; 0x47ba <fputc>
    42de:	83 94       	inc	r8
    42e0:	82 14       	cp	r8, r2
    42e2:	c0 f3       	brcs	.-16     	; 0x42d4 <vfprintf+0x368>
    42e4:	51 2c       	mov	r5, r1
    42e6:	73 cf       	rjmp	.-282    	; 0x41ce <vfprintf+0x262>
    42e8:	52 2c       	mov	r5, r2
    42ea:	58 18       	sub	r5, r8
    42ec:	82 14       	cp	r8, r2
    42ee:	08 f4       	brcc	.+2      	; 0x42f2 <vfprintf+0x386>
    42f0:	6e cf       	rjmp	.-292    	; 0x41ce <vfprintf+0x262>
    42f2:	f8 cf       	rjmp	.-16     	; 0x42e4 <vfprintf+0x378>
    42f4:	84 2d       	mov	r24, r4
    42f6:	86 78       	andi	r24, 0x86	; 134
    42f8:	09 f4       	brne	.+2      	; 0x42fc <vfprintf+0x390>
    42fa:	7b cf       	rjmp	.-266    	; 0x41f2 <vfprintf+0x286>
    42fc:	8b e2       	ldi	r24, 0x2B	; 43
    42fe:	41 fe       	sbrs	r4, 1
    4300:	80 e2       	ldi	r24, 0x20	; 32
    4302:	47 fc       	sbrc	r4, 7
    4304:	8d e2       	ldi	r24, 0x2D	; 45
    4306:	b7 01       	movw	r22, r14
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	71 cf       	rjmp	.-286    	; 0x41ee <vfprintf+0x282>
    430c:	b7 01       	movw	r22, r14
    430e:	80 e3       	ldi	r24, 0x30	; 48
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	0e 94 dd 23 	call	0x47ba	; 0x47ba <fputc>
    4316:	9a 94       	dec	r9
    4318:	6c cf       	rjmp	.-296    	; 0x41f2 <vfprintf+0x286>
    431a:	8f ef       	ldi	r24, 0xFF	; 255
    431c:	9f ef       	ldi	r25, 0xFF	; 255
    431e:	99 cf       	rjmp	.-206    	; 0x4252 <vfprintf+0x2e6>

00004320 <dtoa_prf>:
    4320:	a9 e0       	ldi	r26, 0x09	; 9
    4322:	b0 e0       	ldi	r27, 0x00	; 0
    4324:	e6 e9       	ldi	r30, 0x96	; 150
    4326:	f1 e2       	ldi	r31, 0x21	; 33
    4328:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__prologue_saves__+0xc>
    432c:	6a 01       	movw	r12, r20
    432e:	f2 2e       	mov	r15, r18
    4330:	b0 2e       	mov	r11, r16
    4332:	10 2f       	mov	r17, r16
    4334:	fb e3       	ldi	r31, 0x3B	; 59
    4336:	af 2e       	mov	r10, r31
    4338:	a0 16       	cp	r10, r16
    433a:	08 f4       	brcc	.+2      	; 0x433e <dtoa_prf+0x1e>
    433c:	1b e3       	ldi	r17, 0x3B	; 59
    433e:	1f 5f       	subi	r17, 0xFF	; 255
    4340:	01 2f       	mov	r16, r17
    4342:	27 e0       	ldi	r18, 0x07	; 7
    4344:	ae 01       	movw	r20, r28
    4346:	4f 5f       	subi	r20, 0xFF	; 255
    4348:	5f 4f       	sbci	r21, 0xFF	; 255
    434a:	0e 94 ef 22 	call	0x45de	; 0x45de <__ftoa_engine>
    434e:	bc 01       	movw	r22, r24
    4350:	89 81       	ldd	r24, Y+1	; 0x01
    4352:	98 2f       	mov	r25, r24
    4354:	99 70       	andi	r25, 0x09	; 9
    4356:	91 30       	cpi	r25, 0x01	; 1
    4358:	09 f4       	brne	.+2      	; 0x435c <dtoa_prf+0x3c>
    435a:	3f c0       	rjmp	.+126    	; 0x43da <dtoa_prf+0xba>
    435c:	9b e2       	ldi	r25, 0x2B	; 43
    435e:	e1 fc       	sbrc	r14, 1
    4360:	04 c0       	rjmp	.+8      	; 0x436a <dtoa_prf+0x4a>
    4362:	9e 2d       	mov	r25, r14
    4364:	91 70       	andi	r25, 0x01	; 1
    4366:	e0 fc       	sbrc	r14, 0
    4368:	3a c0       	rjmp	.+116    	; 0x43de <dtoa_prf+0xbe>
    436a:	5e 2d       	mov	r21, r14
    436c:	50 71       	andi	r21, 0x10	; 16
    436e:	e8 2f       	mov	r30, r24
    4370:	e8 70       	andi	r30, 0x08	; 8
    4372:	83 ff       	sbrs	r24, 3
    4374:	46 c0       	rjmp	.+140    	; 0x4402 <dtoa_prf+0xe2>
    4376:	84 e0       	ldi	r24, 0x04	; 4
    4378:	91 11       	cpse	r25, r1
    437a:	01 c0       	rjmp	.+2      	; 0x437e <dtoa_prf+0x5e>
    437c:	83 e0       	ldi	r24, 0x03	; 3
    437e:	ef 2d       	mov	r30, r15
    4380:	e8 1b       	sub	r30, r24
    4382:	8f 15       	cp	r24, r15
    4384:	08 f0       	brcs	.+2      	; 0x4388 <dtoa_prf+0x68>
    4386:	e0 e0       	ldi	r30, 0x00	; 0
    4388:	d6 01       	movw	r26, r12
    438a:	8e 2f       	mov	r24, r30
    438c:	20 e2       	ldi	r18, 0x20	; 32
    438e:	55 23       	and	r21, r21
    4390:	51 f1       	breq	.+84     	; 0x43e6 <dtoa_prf+0xc6>
    4392:	99 23       	and	r25, r25
    4394:	29 f0       	breq	.+10     	; 0x43a0 <dtoa_prf+0x80>
    4396:	d6 01       	movw	r26, r12
    4398:	9c 93       	st	X, r25
    439a:	c6 01       	movw	r24, r12
    439c:	01 96       	adiw	r24, 0x01	; 1
    439e:	6c 01       	movw	r12, r24
    43a0:	96 01       	movw	r18, r12
    43a2:	2d 5f       	subi	r18, 0xFD	; 253
    43a4:	3f 4f       	sbci	r19, 0xFF	; 255
    43a6:	e2 fe       	sbrs	r14, 2
    43a8:	24 c0       	rjmp	.+72     	; 0x43f2 <dtoa_prf+0xd2>
    43aa:	8e e4       	ldi	r24, 0x4E	; 78
    43ac:	d6 01       	movw	r26, r12
    43ae:	8c 93       	st	X, r24
    43b0:	91 e4       	ldi	r25, 0x41	; 65
    43b2:	11 96       	adiw	r26, 0x01	; 1
    43b4:	9c 93       	st	X, r25
    43b6:	11 97       	sbiw	r26, 0x01	; 1
    43b8:	12 96       	adiw	r26, 0x02	; 2
    43ba:	8c 93       	st	X, r24
    43bc:	d9 01       	movw	r26, r18
    43be:	8e 2f       	mov	r24, r30
    43c0:	90 e2       	ldi	r25, 0x20	; 32
    43c2:	81 11       	cpse	r24, r1
    43c4:	1b c0       	rjmp	.+54     	; 0x43fc <dtoa_prf+0xdc>
    43c6:	e2 0f       	add	r30, r18
    43c8:	f3 2f       	mov	r31, r19
    43ca:	f1 1d       	adc	r31, r1
    43cc:	10 82       	st	Z, r1
    43ce:	8e ef       	ldi	r24, 0xFE	; 254
    43d0:	9f ef       	ldi	r25, 0xFF	; 255
    43d2:	29 96       	adiw	r28, 0x09	; 9
    43d4:	ec e0       	ldi	r30, 0x0C	; 12
    43d6:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__epilogue_restores__+0xc>
    43da:	9d e2       	ldi	r25, 0x2D	; 45
    43dc:	c6 cf       	rjmp	.-116    	; 0x436a <dtoa_prf+0x4a>
    43de:	90 e2       	ldi	r25, 0x20	; 32
    43e0:	c4 cf       	rjmp	.-120    	; 0x436a <dtoa_prf+0x4a>
    43e2:	2d 93       	st	X+, r18
    43e4:	81 50       	subi	r24, 0x01	; 1
    43e6:	81 11       	cpse	r24, r1
    43e8:	fc cf       	rjmp	.-8      	; 0x43e2 <dtoa_prf+0xc2>
    43ea:	ce 0e       	add	r12, r30
    43ec:	d1 1c       	adc	r13, r1
    43ee:	e0 e0       	ldi	r30, 0x00	; 0
    43f0:	d0 cf       	rjmp	.-96     	; 0x4392 <dtoa_prf+0x72>
    43f2:	8e e6       	ldi	r24, 0x6E	; 110
    43f4:	d6 01       	movw	r26, r12
    43f6:	8c 93       	st	X, r24
    43f8:	91 e6       	ldi	r25, 0x61	; 97
    43fa:	db cf       	rjmp	.-74     	; 0x43b2 <dtoa_prf+0x92>
    43fc:	9d 93       	st	X+, r25
    43fe:	81 50       	subi	r24, 0x01	; 1
    4400:	e0 cf       	rjmp	.-64     	; 0x43c2 <dtoa_prf+0xa2>
    4402:	48 2f       	mov	r20, r24
    4404:	44 70       	andi	r20, 0x04	; 4
    4406:	82 ff       	sbrs	r24, 2
    4408:	3d c0       	rjmp	.+122    	; 0x4484 <dtoa_prf+0x164>
    440a:	84 e0       	ldi	r24, 0x04	; 4
    440c:	91 11       	cpse	r25, r1
    440e:	01 c0       	rjmp	.+2      	; 0x4412 <dtoa_prf+0xf2>
    4410:	83 e0       	ldi	r24, 0x03	; 3
    4412:	8f 15       	cp	r24, r15
    4414:	10 f4       	brcc	.+4      	; 0x441a <dtoa_prf+0xfa>
    4416:	ef 2d       	mov	r30, r15
    4418:	e8 1b       	sub	r30, r24
    441a:	d6 01       	movw	r26, r12
    441c:	8e 2f       	mov	r24, r30
    441e:	20 e2       	ldi	r18, 0x20	; 32
    4420:	55 23       	and	r21, r21
    4422:	09 f1       	breq	.+66     	; 0x4466 <dtoa_prf+0x146>
    4424:	99 23       	and	r25, r25
    4426:	29 f0       	breq	.+10     	; 0x4432 <dtoa_prf+0x112>
    4428:	d6 01       	movw	r26, r12
    442a:	9c 93       	st	X, r25
    442c:	c6 01       	movw	r24, r12
    442e:	01 96       	adiw	r24, 0x01	; 1
    4430:	6c 01       	movw	r12, r24
    4432:	96 01       	movw	r18, r12
    4434:	2d 5f       	subi	r18, 0xFD	; 253
    4436:	3f 4f       	sbci	r19, 0xFF	; 255
    4438:	e2 fe       	sbrs	r14, 2
    443a:	1b c0       	rjmp	.+54     	; 0x4472 <dtoa_prf+0x152>
    443c:	89 e4       	ldi	r24, 0x49	; 73
    443e:	d6 01       	movw	r26, r12
    4440:	8c 93       	st	X, r24
    4442:	8e e4       	ldi	r24, 0x4E	; 78
    4444:	11 96       	adiw	r26, 0x01	; 1
    4446:	8c 93       	st	X, r24
    4448:	11 97       	sbiw	r26, 0x01	; 1
    444a:	86 e4       	ldi	r24, 0x46	; 70
    444c:	12 96       	adiw	r26, 0x02	; 2
    444e:	8c 93       	st	X, r24
    4450:	d9 01       	movw	r26, r18
    4452:	8e 2f       	mov	r24, r30
    4454:	90 e2       	ldi	r25, 0x20	; 32
    4456:	88 23       	and	r24, r24
    4458:	09 f4       	brne	.+2      	; 0x445c <dtoa_prf+0x13c>
    445a:	b5 cf       	rjmp	.-150    	; 0x43c6 <dtoa_prf+0xa6>
    445c:	9d 93       	st	X+, r25
    445e:	81 50       	subi	r24, 0x01	; 1
    4460:	fa cf       	rjmp	.-12     	; 0x4456 <dtoa_prf+0x136>
    4462:	2d 93       	st	X+, r18
    4464:	81 50       	subi	r24, 0x01	; 1
    4466:	81 11       	cpse	r24, r1
    4468:	fc cf       	rjmp	.-8      	; 0x4462 <dtoa_prf+0x142>
    446a:	ce 0e       	add	r12, r30
    446c:	d1 1c       	adc	r13, r1
    446e:	e0 e0       	ldi	r30, 0x00	; 0
    4470:	d9 cf       	rjmp	.-78     	; 0x4424 <dtoa_prf+0x104>
    4472:	89 e6       	ldi	r24, 0x69	; 105
    4474:	d6 01       	movw	r26, r12
    4476:	8c 93       	st	X, r24
    4478:	8e e6       	ldi	r24, 0x6E	; 110
    447a:	11 96       	adiw	r26, 0x01	; 1
    447c:	8c 93       	st	X, r24
    447e:	11 97       	sbiw	r26, 0x01	; 1
    4480:	86 e6       	ldi	r24, 0x66	; 102
    4482:	e4 cf       	rjmp	.-56     	; 0x444c <dtoa_prf+0x12c>
    4484:	9b 01       	movw	r18, r22
    4486:	77 ff       	sbrs	r23, 7
    4488:	02 c0       	rjmp	.+4      	; 0x448e <dtoa_prf+0x16e>
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	a1 e0       	ldi	r26, 0x01	; 1
    4490:	b0 e0       	ldi	r27, 0x00	; 0
    4492:	91 11       	cpse	r25, r1
    4494:	02 c0       	rjmp	.+4      	; 0x449a <dtoa_prf+0x17a>
    4496:	b0 e0       	ldi	r27, 0x00	; 0
    4498:	a0 e0       	ldi	r26, 0x00	; 0
    449a:	f9 01       	movw	r30, r18
    449c:	31 96       	adiw	r30, 0x01	; 1
    449e:	ae 0f       	add	r26, r30
    44a0:	bf 1f       	adc	r27, r31
    44a2:	8b 2c       	mov	r8, r11
    44a4:	91 2c       	mov	r9, r1
    44a6:	bb 20       	and	r11, r11
    44a8:	09 f4       	brne	.+2      	; 0x44ac <dtoa_prf+0x18c>
    44aa:	61 c0       	rjmp	.+194    	; 0x456e <dtoa_prf+0x24e>
    44ac:	54 01       	movw	r10, r8
    44ae:	ef ef       	ldi	r30, 0xFF	; 255
    44b0:	ae 1a       	sub	r10, r30
    44b2:	be 0a       	sbc	r11, r30
    44b4:	aa 0d       	add	r26, r10
    44b6:	bb 1d       	adc	r27, r11
    44b8:	fa 16       	cp	r15, r26
    44ba:	1b 06       	cpc	r1, r27
    44bc:	19 f0       	breq	.+6      	; 0x44c4 <dtoa_prf+0x1a4>
    44be:	14 f0       	brlt	.+4      	; 0x44c4 <dtoa_prf+0x1a4>
    44c0:	4f 2d       	mov	r20, r15
    44c2:	4a 1b       	sub	r20, r26
    44c4:	51 11       	cpse	r21, r1
    44c6:	88 c0       	rjmp	.+272    	; 0x45d8 <dtoa_prf+0x2b8>
    44c8:	e3 fc       	sbrc	r14, 3
    44ca:	59 c0       	rjmp	.+178    	; 0x457e <dtoa_prf+0x25e>
    44cc:	76 01       	movw	r14, r12
    44ce:	a4 2f       	mov	r26, r20
    44d0:	b0 e2       	ldi	r27, 0x20	; 32
    44d2:	a1 11       	cpse	r26, r1
    44d4:	4f c0       	rjmp	.+158    	; 0x4574 <dtoa_prf+0x254>
    44d6:	c4 0e       	add	r12, r20
    44d8:	d1 1c       	adc	r13, r1
    44da:	99 23       	and	r25, r25
    44dc:	09 f4       	brne	.+2      	; 0x44e0 <dtoa_prf+0x1c0>
    44de:	5b c0       	rjmp	.+182    	; 0x4596 <dtoa_prf+0x276>
    44e0:	40 e0       	ldi	r20, 0x00	; 0
    44e2:	d6 01       	movw	r26, r12
    44e4:	11 96       	adiw	r26, 0x01	; 1
    44e6:	f6 01       	movw	r30, r12
    44e8:	90 83       	st	Z, r25
    44ea:	6d 01       	movw	r12, r26
    44ec:	55 23       	and	r21, r21
    44ee:	09 f4       	brne	.+2      	; 0x44f2 <dtoa_prf+0x1d2>
    44f0:	48 c0       	rjmp	.+144    	; 0x4582 <dtoa_prf+0x262>
    44f2:	01 2f       	mov	r16, r17
    44f4:	06 0f       	add	r16, r22
    44f6:	9a 81       	ldd	r25, Y+2	; 0x02
    44f8:	58 2f       	mov	r21, r24
    44fa:	50 71       	andi	r21, 0x10	; 16
    44fc:	84 ff       	sbrs	r24, 4
    44fe:	03 c0       	rjmp	.+6      	; 0x4506 <dtoa_prf+0x1e6>
    4500:	91 33       	cpi	r25, 0x31	; 49
    4502:	09 f4       	brne	.+2      	; 0x4506 <dtoa_prf+0x1e6>
    4504:	01 50       	subi	r16, 0x01	; 1
    4506:	10 16       	cp	r1, r16
    4508:	0c f0       	brlt	.+2      	; 0x450c <dtoa_prf+0x1ec>
    450a:	47 c0       	rjmp	.+142    	; 0x459a <dtoa_prf+0x27a>
    450c:	09 30       	cpi	r16, 0x09	; 9
    450e:	08 f0       	brcs	.+2      	; 0x4512 <dtoa_prf+0x1f2>
    4510:	08 e0       	ldi	r16, 0x08	; 8
    4512:	ee e2       	ldi	r30, 0x2E	; 46
    4514:	fe 2e       	mov	r15, r30
    4516:	5b 01       	movw	r10, r22
    4518:	a0 1a       	sub	r10, r16
    451a:	b1 08       	sbc	r11, r1
    451c:	85 01       	movw	r16, r10
    451e:	91 94       	neg	r9
    4520:	81 94       	neg	r8
    4522:	91 08       	sbc	r9, r1
    4524:	2f 3f       	cpi	r18, 0xFF	; 255
    4526:	32 07       	cpc	r19, r18
    4528:	29 f4       	brne	.+10     	; 0x4534 <dtoa_prf+0x214>
    452a:	d6 01       	movw	r26, r12
    452c:	fc 92       	st	X, r15
    452e:	f6 01       	movw	r30, r12
    4530:	31 96       	adiw	r30, 0x01	; 1
    4532:	6f 01       	movw	r12, r30
    4534:	62 17       	cp	r22, r18
    4536:	73 07       	cpc	r23, r19
    4538:	94 f1       	brlt	.+100    	; 0x459e <dtoa_prf+0x27e>
    453a:	02 17       	cp	r16, r18
    453c:	13 07       	cpc	r17, r19
    453e:	7c f5       	brge	.+94     	; 0x459e <dtoa_prf+0x27e>
    4540:	db 01       	movw	r26, r22
    4542:	a2 1b       	sub	r26, r18
    4544:	b3 0b       	sbc	r27, r19
    4546:	aa 24       	eor	r10, r10
    4548:	a3 94       	inc	r10
    454a:	b1 2c       	mov	r11, r1
    454c:	ac 0e       	add	r10, r28
    454e:	bd 1e       	adc	r11, r29
    4550:	aa 0d       	add	r26, r10
    4552:	bb 1d       	adc	r27, r11
    4554:	11 96       	adiw	r26, 0x01	; 1
    4556:	8c 91       	ld	r24, X
    4558:	21 50       	subi	r18, 0x01	; 1
    455a:	31 09       	sbc	r19, r1
    455c:	d6 01       	movw	r26, r12
    455e:	11 96       	adiw	r26, 0x01	; 1
    4560:	28 15       	cp	r18, r8
    4562:	39 05       	cpc	r19, r9
    4564:	f4 f0       	brlt	.+60     	; 0x45a2 <dtoa_prf+0x282>
    4566:	f6 01       	movw	r30, r12
    4568:	80 83       	st	Z, r24
    456a:	6d 01       	movw	r12, r26
    456c:	db cf       	rjmp	.-74     	; 0x4524 <dtoa_prf+0x204>
    456e:	b1 2c       	mov	r11, r1
    4570:	a1 2c       	mov	r10, r1
    4572:	a0 cf       	rjmp	.-192    	; 0x44b4 <dtoa_prf+0x194>
    4574:	f7 01       	movw	r30, r14
    4576:	b1 93       	st	Z+, r27
    4578:	7f 01       	movw	r14, r30
    457a:	a1 50       	subi	r26, 0x01	; 1
    457c:	aa cf       	rjmp	.-172    	; 0x44d2 <dtoa_prf+0x1b2>
    457e:	91 11       	cpse	r25, r1
    4580:	b0 cf       	rjmp	.-160    	; 0x44e2 <dtoa_prf+0x1c2>
    4582:	d6 01       	movw	r26, r12
    4584:	94 2f       	mov	r25, r20
    4586:	50 e3       	ldi	r21, 0x30	; 48
    4588:	02 c0       	rjmp	.+4      	; 0x458e <dtoa_prf+0x26e>
    458a:	5d 93       	st	X+, r21
    458c:	91 50       	subi	r25, 0x01	; 1
    458e:	91 11       	cpse	r25, r1
    4590:	fc cf       	rjmp	.-8      	; 0x458a <dtoa_prf+0x26a>
    4592:	c4 0e       	add	r12, r20
    4594:	d1 1c       	adc	r13, r1
    4596:	40 e0       	ldi	r20, 0x00	; 0
    4598:	ac cf       	rjmp	.-168    	; 0x44f2 <dtoa_prf+0x1d2>
    459a:	01 e0       	ldi	r16, 0x01	; 1
    459c:	ba cf       	rjmp	.-140    	; 0x4512 <dtoa_prf+0x1f2>
    459e:	80 e3       	ldi	r24, 0x30	; 48
    45a0:	db cf       	rjmp	.-74     	; 0x4558 <dtoa_prf+0x238>
    45a2:	62 17       	cp	r22, r18
    45a4:	73 07       	cpc	r23, r19
    45a6:	31 f4       	brne	.+12     	; 0x45b4 <dtoa_prf+0x294>
    45a8:	96 33       	cpi	r25, 0x36	; 54
    45aa:	88 f4       	brcc	.+34     	; 0x45ce <dtoa_prf+0x2ae>
    45ac:	95 33       	cpi	r25, 0x35	; 53
    45ae:	11 f4       	brne	.+4      	; 0x45b4 <dtoa_prf+0x294>
    45b0:	55 23       	and	r21, r21
    45b2:	69 f0       	breq	.+26     	; 0x45ce <dtoa_prf+0x2ae>
    45b4:	f6 01       	movw	r30, r12
    45b6:	80 83       	st	Z, r24
    45b8:	fd 01       	movw	r30, r26
    45ba:	84 2f       	mov	r24, r20
    45bc:	90 e2       	ldi	r25, 0x20	; 32
    45be:	81 11       	cpse	r24, r1
    45c0:	08 c0       	rjmp	.+16     	; 0x45d2 <dtoa_prf+0x2b2>
    45c2:	a4 0f       	add	r26, r20
    45c4:	b1 1d       	adc	r27, r1
    45c6:	1c 92       	st	X, r1
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	02 cf       	rjmp	.-508    	; 0x43d2 <dtoa_prf+0xb2>
    45ce:	81 e3       	ldi	r24, 0x31	; 49
    45d0:	f1 cf       	rjmp	.-30     	; 0x45b4 <dtoa_prf+0x294>
    45d2:	91 93       	st	Z+, r25
    45d4:	81 50       	subi	r24, 0x01	; 1
    45d6:	f3 cf       	rjmp	.-26     	; 0x45be <dtoa_prf+0x29e>
    45d8:	91 11       	cpse	r25, r1
    45da:	83 cf       	rjmp	.-250    	; 0x44e2 <dtoa_prf+0x1c2>
    45dc:	8a cf       	rjmp	.-236    	; 0x44f2 <dtoa_prf+0x1d2>

000045de <__ftoa_engine>:
    45de:	28 30       	cpi	r18, 0x08	; 8
    45e0:	08 f0       	brcs	.+2      	; 0x45e4 <__ftoa_engine+0x6>
    45e2:	27 e0       	ldi	r18, 0x07	; 7
    45e4:	33 27       	eor	r19, r19
    45e6:	da 01       	movw	r26, r20
    45e8:	99 0f       	add	r25, r25
    45ea:	31 1d       	adc	r19, r1
    45ec:	87 fd       	sbrc	r24, 7
    45ee:	91 60       	ori	r25, 0x01	; 1
    45f0:	00 96       	adiw	r24, 0x00	; 0
    45f2:	61 05       	cpc	r22, r1
    45f4:	71 05       	cpc	r23, r1
    45f6:	39 f4       	brne	.+14     	; 0x4606 <__ftoa_engine+0x28>
    45f8:	32 60       	ori	r19, 0x02	; 2
    45fa:	2e 5f       	subi	r18, 0xFE	; 254
    45fc:	3d 93       	st	X+, r19
    45fe:	30 e3       	ldi	r19, 0x30	; 48
    4600:	2a 95       	dec	r18
    4602:	e1 f7       	brne	.-8      	; 0x45fc <__ftoa_engine+0x1e>
    4604:	08 95       	ret
    4606:	9f 3f       	cpi	r25, 0xFF	; 255
    4608:	30 f0       	brcs	.+12     	; 0x4616 <__ftoa_engine+0x38>
    460a:	80 38       	cpi	r24, 0x80	; 128
    460c:	71 05       	cpc	r23, r1
    460e:	61 05       	cpc	r22, r1
    4610:	09 f0       	breq	.+2      	; 0x4614 <__ftoa_engine+0x36>
    4612:	3c 5f       	subi	r19, 0xFC	; 252
    4614:	3c 5f       	subi	r19, 0xFC	; 252
    4616:	3d 93       	st	X+, r19
    4618:	91 30       	cpi	r25, 0x01	; 1
    461a:	08 f0       	brcs	.+2      	; 0x461e <__ftoa_engine+0x40>
    461c:	80 68       	ori	r24, 0x80	; 128
    461e:	91 1d       	adc	r25, r1
    4620:	df 93       	push	r29
    4622:	cf 93       	push	r28
    4624:	1f 93       	push	r17
    4626:	0f 93       	push	r16
    4628:	ff 92       	push	r15
    462a:	ef 92       	push	r14
    462c:	19 2f       	mov	r17, r25
    462e:	98 7f       	andi	r25, 0xF8	; 248
    4630:	96 95       	lsr	r25
    4632:	e9 2f       	mov	r30, r25
    4634:	96 95       	lsr	r25
    4636:	96 95       	lsr	r25
    4638:	e9 0f       	add	r30, r25
    463a:	ff 27       	eor	r31, r31
    463c:	e2 55       	subi	r30, 0x52	; 82
    463e:	ff 4f       	sbci	r31, 0xFF	; 255
    4640:	99 27       	eor	r25, r25
    4642:	33 27       	eor	r19, r19
    4644:	ee 24       	eor	r14, r14
    4646:	ff 24       	eor	r15, r15
    4648:	a7 01       	movw	r20, r14
    464a:	e7 01       	movw	r28, r14
    464c:	05 90       	lpm	r0, Z+
    464e:	08 94       	sec
    4650:	07 94       	ror	r0
    4652:	28 f4       	brcc	.+10     	; 0x465e <__ftoa_engine+0x80>
    4654:	36 0f       	add	r19, r22
    4656:	e7 1e       	adc	r14, r23
    4658:	f8 1e       	adc	r15, r24
    465a:	49 1f       	adc	r20, r25
    465c:	51 1d       	adc	r21, r1
    465e:	66 0f       	add	r22, r22
    4660:	77 1f       	adc	r23, r23
    4662:	88 1f       	adc	r24, r24
    4664:	99 1f       	adc	r25, r25
    4666:	06 94       	lsr	r0
    4668:	a1 f7       	brne	.-24     	; 0x4652 <__ftoa_engine+0x74>
    466a:	05 90       	lpm	r0, Z+
    466c:	07 94       	ror	r0
    466e:	28 f4       	brcc	.+10     	; 0x467a <__ftoa_engine+0x9c>
    4670:	e7 0e       	add	r14, r23
    4672:	f8 1e       	adc	r15, r24
    4674:	49 1f       	adc	r20, r25
    4676:	56 1f       	adc	r21, r22
    4678:	c1 1d       	adc	r28, r1
    467a:	77 0f       	add	r23, r23
    467c:	88 1f       	adc	r24, r24
    467e:	99 1f       	adc	r25, r25
    4680:	66 1f       	adc	r22, r22
    4682:	06 94       	lsr	r0
    4684:	a1 f7       	brne	.-24     	; 0x466e <__ftoa_engine+0x90>
    4686:	05 90       	lpm	r0, Z+
    4688:	07 94       	ror	r0
    468a:	28 f4       	brcc	.+10     	; 0x4696 <__ftoa_engine+0xb8>
    468c:	f8 0e       	add	r15, r24
    468e:	49 1f       	adc	r20, r25
    4690:	56 1f       	adc	r21, r22
    4692:	c7 1f       	adc	r28, r23
    4694:	d1 1d       	adc	r29, r1
    4696:	88 0f       	add	r24, r24
    4698:	99 1f       	adc	r25, r25
    469a:	66 1f       	adc	r22, r22
    469c:	77 1f       	adc	r23, r23
    469e:	06 94       	lsr	r0
    46a0:	a1 f7       	brne	.-24     	; 0x468a <__ftoa_engine+0xac>
    46a2:	05 90       	lpm	r0, Z+
    46a4:	07 94       	ror	r0
    46a6:	20 f4       	brcc	.+8      	; 0x46b0 <__ftoa_engine+0xd2>
    46a8:	49 0f       	add	r20, r25
    46aa:	56 1f       	adc	r21, r22
    46ac:	c7 1f       	adc	r28, r23
    46ae:	d8 1f       	adc	r29, r24
    46b0:	99 0f       	add	r25, r25
    46b2:	66 1f       	adc	r22, r22
    46b4:	77 1f       	adc	r23, r23
    46b6:	88 1f       	adc	r24, r24
    46b8:	06 94       	lsr	r0
    46ba:	a9 f7       	brne	.-22     	; 0x46a6 <__ftoa_engine+0xc8>
    46bc:	84 91       	lpm	r24, Z
    46be:	10 95       	com	r17
    46c0:	17 70       	andi	r17, 0x07	; 7
    46c2:	41 f0       	breq	.+16     	; 0x46d4 <__ftoa_engine+0xf6>
    46c4:	d6 95       	lsr	r29
    46c6:	c7 95       	ror	r28
    46c8:	57 95       	ror	r21
    46ca:	47 95       	ror	r20
    46cc:	f7 94       	ror	r15
    46ce:	e7 94       	ror	r14
    46d0:	1a 95       	dec	r17
    46d2:	c1 f7       	brne	.-16     	; 0x46c4 <__ftoa_engine+0xe6>
    46d4:	e4 e5       	ldi	r30, 0x54	; 84
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	68 94       	set
    46da:	15 90       	lpm	r1, Z+
    46dc:	15 91       	lpm	r17, Z+
    46de:	35 91       	lpm	r19, Z+
    46e0:	65 91       	lpm	r22, Z+
    46e2:	95 91       	lpm	r25, Z+
    46e4:	05 90       	lpm	r0, Z+
    46e6:	7f e2       	ldi	r23, 0x2F	; 47
    46e8:	73 95       	inc	r23
    46ea:	e1 18       	sub	r14, r1
    46ec:	f1 0a       	sbc	r15, r17
    46ee:	43 0b       	sbc	r20, r19
    46f0:	56 0b       	sbc	r21, r22
    46f2:	c9 0b       	sbc	r28, r25
    46f4:	d0 09       	sbc	r29, r0
    46f6:	c0 f7       	brcc	.-16     	; 0x46e8 <__ftoa_engine+0x10a>
    46f8:	e1 0c       	add	r14, r1
    46fa:	f1 1e       	adc	r15, r17
    46fc:	43 1f       	adc	r20, r19
    46fe:	56 1f       	adc	r21, r22
    4700:	c9 1f       	adc	r28, r25
    4702:	d0 1d       	adc	r29, r0
    4704:	7e f4       	brtc	.+30     	; 0x4724 <__ftoa_engine+0x146>
    4706:	70 33       	cpi	r23, 0x30	; 48
    4708:	11 f4       	brne	.+4      	; 0x470e <__ftoa_engine+0x130>
    470a:	8a 95       	dec	r24
    470c:	e6 cf       	rjmp	.-52     	; 0x46da <__ftoa_engine+0xfc>
    470e:	e8 94       	clt
    4710:	01 50       	subi	r16, 0x01	; 1
    4712:	30 f0       	brcs	.+12     	; 0x4720 <__ftoa_engine+0x142>
    4714:	08 0f       	add	r16, r24
    4716:	0a f4       	brpl	.+2      	; 0x471a <__ftoa_engine+0x13c>
    4718:	00 27       	eor	r16, r16
    471a:	02 17       	cp	r16, r18
    471c:	08 f4       	brcc	.+2      	; 0x4720 <__ftoa_engine+0x142>
    471e:	20 2f       	mov	r18, r16
    4720:	23 95       	inc	r18
    4722:	02 2f       	mov	r16, r18
    4724:	7a 33       	cpi	r23, 0x3A	; 58
    4726:	28 f0       	brcs	.+10     	; 0x4732 <__ftoa_engine+0x154>
    4728:	79 e3       	ldi	r23, 0x39	; 57
    472a:	7d 93       	st	X+, r23
    472c:	2a 95       	dec	r18
    472e:	e9 f7       	brne	.-6      	; 0x472a <__ftoa_engine+0x14c>
    4730:	10 c0       	rjmp	.+32     	; 0x4752 <__ftoa_engine+0x174>
    4732:	7d 93       	st	X+, r23
    4734:	2a 95       	dec	r18
    4736:	89 f6       	brne	.-94     	; 0x46da <__ftoa_engine+0xfc>
    4738:	06 94       	lsr	r0
    473a:	97 95       	ror	r25
    473c:	67 95       	ror	r22
    473e:	37 95       	ror	r19
    4740:	17 95       	ror	r17
    4742:	17 94       	ror	r1
    4744:	e1 18       	sub	r14, r1
    4746:	f1 0a       	sbc	r15, r17
    4748:	43 0b       	sbc	r20, r19
    474a:	56 0b       	sbc	r21, r22
    474c:	c9 0b       	sbc	r28, r25
    474e:	d0 09       	sbc	r29, r0
    4750:	98 f0       	brcs	.+38     	; 0x4778 <__ftoa_engine+0x19a>
    4752:	23 95       	inc	r18
    4754:	7e 91       	ld	r23, -X
    4756:	73 95       	inc	r23
    4758:	7a 33       	cpi	r23, 0x3A	; 58
    475a:	08 f0       	brcs	.+2      	; 0x475e <__ftoa_engine+0x180>
    475c:	70 e3       	ldi	r23, 0x30	; 48
    475e:	7c 93       	st	X, r23
    4760:	20 13       	cpse	r18, r16
    4762:	b8 f7       	brcc	.-18     	; 0x4752 <__ftoa_engine+0x174>
    4764:	7e 91       	ld	r23, -X
    4766:	70 61       	ori	r23, 0x10	; 16
    4768:	7d 93       	st	X+, r23
    476a:	30 f0       	brcs	.+12     	; 0x4778 <__ftoa_engine+0x19a>
    476c:	83 95       	inc	r24
    476e:	71 e3       	ldi	r23, 0x31	; 49
    4770:	7d 93       	st	X+, r23
    4772:	70 e3       	ldi	r23, 0x30	; 48
    4774:	2a 95       	dec	r18
    4776:	e1 f7       	brne	.-8      	; 0x4770 <__ftoa_engine+0x192>
    4778:	11 24       	eor	r1, r1
    477a:	ef 90       	pop	r14
    477c:	ff 90       	pop	r15
    477e:	0f 91       	pop	r16
    4780:	1f 91       	pop	r17
    4782:	cf 91       	pop	r28
    4784:	df 91       	pop	r29
    4786:	99 27       	eor	r25, r25
    4788:	87 fd       	sbrc	r24, 7
    478a:	90 95       	com	r25
    478c:	08 95       	ret

0000478e <strnlen_P>:
    478e:	fc 01       	movw	r30, r24
    4790:	05 90       	lpm	r0, Z+
    4792:	61 50       	subi	r22, 0x01	; 1
    4794:	70 40       	sbci	r23, 0x00	; 0
    4796:	01 10       	cpse	r0, r1
    4798:	d8 f7       	brcc	.-10     	; 0x4790 <strnlen_P+0x2>
    479a:	80 95       	com	r24
    479c:	90 95       	com	r25
    479e:	8e 0f       	add	r24, r30
    47a0:	9f 1f       	adc	r25, r31
    47a2:	08 95       	ret

000047a4 <strnlen>:
    47a4:	fc 01       	movw	r30, r24
    47a6:	61 50       	subi	r22, 0x01	; 1
    47a8:	70 40       	sbci	r23, 0x00	; 0
    47aa:	01 90       	ld	r0, Z+
    47ac:	01 10       	cpse	r0, r1
    47ae:	d8 f7       	brcc	.-10     	; 0x47a6 <strnlen+0x2>
    47b0:	80 95       	com	r24
    47b2:	90 95       	com	r25
    47b4:	8e 0f       	add	r24, r30
    47b6:	9f 1f       	adc	r25, r31
    47b8:	08 95       	ret

000047ba <fputc>:
    47ba:	0f 93       	push	r16
    47bc:	1f 93       	push	r17
    47be:	cf 93       	push	r28
    47c0:	df 93       	push	r29
    47c2:	18 2f       	mov	r17, r24
    47c4:	09 2f       	mov	r16, r25
    47c6:	eb 01       	movw	r28, r22
    47c8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ca:	81 fd       	sbrc	r24, 1
    47cc:	09 c0       	rjmp	.+18     	; 0x47e0 <fputc+0x26>
    47ce:	1f ef       	ldi	r17, 0xFF	; 255
    47d0:	0f ef       	ldi	r16, 0xFF	; 255
    47d2:	81 2f       	mov	r24, r17
    47d4:	90 2f       	mov	r25, r16
    47d6:	df 91       	pop	r29
    47d8:	cf 91       	pop	r28
    47da:	1f 91       	pop	r17
    47dc:	0f 91       	pop	r16
    47de:	08 95       	ret
    47e0:	82 ff       	sbrs	r24, 2
    47e2:	14 c0       	rjmp	.+40     	; 0x480c <fputc+0x52>
    47e4:	2e 81       	ldd	r18, Y+6	; 0x06
    47e6:	3f 81       	ldd	r19, Y+7	; 0x07
    47e8:	8c 81       	ldd	r24, Y+4	; 0x04
    47ea:	9d 81       	ldd	r25, Y+5	; 0x05
    47ec:	28 17       	cp	r18, r24
    47ee:	39 07       	cpc	r19, r25
    47f0:	3c f4       	brge	.+14     	; 0x4800 <fputc+0x46>
    47f2:	e8 81       	ld	r30, Y
    47f4:	f9 81       	ldd	r31, Y+1	; 0x01
    47f6:	cf 01       	movw	r24, r30
    47f8:	01 96       	adiw	r24, 0x01	; 1
    47fa:	99 83       	std	Y+1, r25	; 0x01
    47fc:	88 83       	st	Y, r24
    47fe:	10 83       	st	Z, r17
    4800:	8e 81       	ldd	r24, Y+6	; 0x06
    4802:	9f 81       	ldd	r25, Y+7	; 0x07
    4804:	01 96       	adiw	r24, 0x01	; 1
    4806:	9f 83       	std	Y+7, r25	; 0x07
    4808:	8e 83       	std	Y+6, r24	; 0x06
    480a:	e3 cf       	rjmp	.-58     	; 0x47d2 <fputc+0x18>
    480c:	e8 85       	ldd	r30, Y+8	; 0x08
    480e:	f9 85       	ldd	r31, Y+9	; 0x09
    4810:	81 2f       	mov	r24, r17
    4812:	09 95       	icall
    4814:	89 2b       	or	r24, r25
    4816:	a1 f3       	breq	.-24     	; 0x4800 <fputc+0x46>
    4818:	da cf       	rjmp	.-76     	; 0x47ce <fputc+0x14>

0000481a <__ultoa_invert>:
    481a:	fa 01       	movw	r30, r20
    481c:	aa 27       	eor	r26, r26
    481e:	28 30       	cpi	r18, 0x08	; 8
    4820:	51 f1       	breq	.+84     	; 0x4876 <__ultoa_invert+0x5c>
    4822:	20 31       	cpi	r18, 0x10	; 16
    4824:	81 f1       	breq	.+96     	; 0x4886 <__ultoa_invert+0x6c>
    4826:	e8 94       	clt
    4828:	6f 93       	push	r22
    482a:	6e 7f       	andi	r22, 0xFE	; 254
    482c:	6e 5f       	subi	r22, 0xFE	; 254
    482e:	7f 4f       	sbci	r23, 0xFF	; 255
    4830:	8f 4f       	sbci	r24, 0xFF	; 255
    4832:	9f 4f       	sbci	r25, 0xFF	; 255
    4834:	af 4f       	sbci	r26, 0xFF	; 255
    4836:	b1 e0       	ldi	r27, 0x01	; 1
    4838:	3e d0       	rcall	.+124    	; 0x48b6 <__ultoa_invert+0x9c>
    483a:	b4 e0       	ldi	r27, 0x04	; 4
    483c:	3c d0       	rcall	.+120    	; 0x48b6 <__ultoa_invert+0x9c>
    483e:	67 0f       	add	r22, r23
    4840:	78 1f       	adc	r23, r24
    4842:	89 1f       	adc	r24, r25
    4844:	9a 1f       	adc	r25, r26
    4846:	a1 1d       	adc	r26, r1
    4848:	68 0f       	add	r22, r24
    484a:	79 1f       	adc	r23, r25
    484c:	8a 1f       	adc	r24, r26
    484e:	91 1d       	adc	r25, r1
    4850:	a1 1d       	adc	r26, r1
    4852:	6a 0f       	add	r22, r26
    4854:	71 1d       	adc	r23, r1
    4856:	81 1d       	adc	r24, r1
    4858:	91 1d       	adc	r25, r1
    485a:	a1 1d       	adc	r26, r1
    485c:	20 d0       	rcall	.+64     	; 0x489e <__ultoa_invert+0x84>
    485e:	09 f4       	brne	.+2      	; 0x4862 <__ultoa_invert+0x48>
    4860:	68 94       	set
    4862:	3f 91       	pop	r19
    4864:	2a e0       	ldi	r18, 0x0A	; 10
    4866:	26 9f       	mul	r18, r22
    4868:	11 24       	eor	r1, r1
    486a:	30 19       	sub	r19, r0
    486c:	30 5d       	subi	r19, 0xD0	; 208
    486e:	31 93       	st	Z+, r19
    4870:	de f6       	brtc	.-74     	; 0x4828 <__ultoa_invert+0xe>
    4872:	cf 01       	movw	r24, r30
    4874:	08 95       	ret
    4876:	46 2f       	mov	r20, r22
    4878:	47 70       	andi	r20, 0x07	; 7
    487a:	40 5d       	subi	r20, 0xD0	; 208
    487c:	41 93       	st	Z+, r20
    487e:	b3 e0       	ldi	r27, 0x03	; 3
    4880:	0f d0       	rcall	.+30     	; 0x48a0 <__ultoa_invert+0x86>
    4882:	c9 f7       	brne	.-14     	; 0x4876 <__ultoa_invert+0x5c>
    4884:	f6 cf       	rjmp	.-20     	; 0x4872 <__ultoa_invert+0x58>
    4886:	46 2f       	mov	r20, r22
    4888:	4f 70       	andi	r20, 0x0F	; 15
    488a:	40 5d       	subi	r20, 0xD0	; 208
    488c:	4a 33       	cpi	r20, 0x3A	; 58
    488e:	18 f0       	brcs	.+6      	; 0x4896 <__ultoa_invert+0x7c>
    4890:	49 5d       	subi	r20, 0xD9	; 217
    4892:	31 fd       	sbrc	r19, 1
    4894:	40 52       	subi	r20, 0x20	; 32
    4896:	41 93       	st	Z+, r20
    4898:	02 d0       	rcall	.+4      	; 0x489e <__ultoa_invert+0x84>
    489a:	a9 f7       	brne	.-22     	; 0x4886 <__ultoa_invert+0x6c>
    489c:	ea cf       	rjmp	.-44     	; 0x4872 <__ultoa_invert+0x58>
    489e:	b4 e0       	ldi	r27, 0x04	; 4
    48a0:	a6 95       	lsr	r26
    48a2:	97 95       	ror	r25
    48a4:	87 95       	ror	r24
    48a6:	77 95       	ror	r23
    48a8:	67 95       	ror	r22
    48aa:	ba 95       	dec	r27
    48ac:	c9 f7       	brne	.-14     	; 0x48a0 <__ultoa_invert+0x86>
    48ae:	00 97       	sbiw	r24, 0x00	; 0
    48b0:	61 05       	cpc	r22, r1
    48b2:	71 05       	cpc	r23, r1
    48b4:	08 95       	ret
    48b6:	9b 01       	movw	r18, r22
    48b8:	ac 01       	movw	r20, r24
    48ba:	0a 2e       	mov	r0, r26
    48bc:	06 94       	lsr	r0
    48be:	57 95       	ror	r21
    48c0:	47 95       	ror	r20
    48c2:	37 95       	ror	r19
    48c4:	27 95       	ror	r18
    48c6:	ba 95       	dec	r27
    48c8:	c9 f7       	brne	.-14     	; 0x48bc <__ultoa_invert+0xa2>
    48ca:	62 0f       	add	r22, r18
    48cc:	73 1f       	adc	r23, r19
    48ce:	84 1f       	adc	r24, r20
    48d0:	95 1f       	adc	r25, r21
    48d2:	a0 1d       	adc	r26, r0
    48d4:	08 95       	ret

000048d6 <__prologue_saves__>:
    48d6:	2f 92       	push	r2
    48d8:	3f 92       	push	r3
    48da:	4f 92       	push	r4
    48dc:	5f 92       	push	r5
    48de:	6f 92       	push	r6
    48e0:	7f 92       	push	r7
    48e2:	8f 92       	push	r8
    48e4:	9f 92       	push	r9
    48e6:	af 92       	push	r10
    48e8:	bf 92       	push	r11
    48ea:	cf 92       	push	r12
    48ec:	df 92       	push	r13
    48ee:	ef 92       	push	r14
    48f0:	ff 92       	push	r15
    48f2:	0f 93       	push	r16
    48f4:	1f 93       	push	r17
    48f6:	cf 93       	push	r28
    48f8:	df 93       	push	r29
    48fa:	cd b7       	in	r28, 0x3d	; 61
    48fc:	de b7       	in	r29, 0x3e	; 62
    48fe:	ca 1b       	sub	r28, r26
    4900:	db 0b       	sbc	r29, r27
    4902:	0f b6       	in	r0, 0x3f	; 63
    4904:	f8 94       	cli
    4906:	de bf       	out	0x3e, r29	; 62
    4908:	0f be       	out	0x3f, r0	; 63
    490a:	cd bf       	out	0x3d, r28	; 61
    490c:	09 94       	ijmp

0000490e <__epilogue_restores__>:
    490e:	2a 88       	ldd	r2, Y+18	; 0x12
    4910:	39 88       	ldd	r3, Y+17	; 0x11
    4912:	48 88       	ldd	r4, Y+16	; 0x10
    4914:	5f 84       	ldd	r5, Y+15	; 0x0f
    4916:	6e 84       	ldd	r6, Y+14	; 0x0e
    4918:	7d 84       	ldd	r7, Y+13	; 0x0d
    491a:	8c 84       	ldd	r8, Y+12	; 0x0c
    491c:	9b 84       	ldd	r9, Y+11	; 0x0b
    491e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4920:	b9 84       	ldd	r11, Y+9	; 0x09
    4922:	c8 84       	ldd	r12, Y+8	; 0x08
    4924:	df 80       	ldd	r13, Y+7	; 0x07
    4926:	ee 80       	ldd	r14, Y+6	; 0x06
    4928:	fd 80       	ldd	r15, Y+5	; 0x05
    492a:	0c 81       	ldd	r16, Y+4	; 0x04
    492c:	1b 81       	ldd	r17, Y+3	; 0x03
    492e:	aa 81       	ldd	r26, Y+2	; 0x02
    4930:	b9 81       	ldd	r27, Y+1	; 0x01
    4932:	ce 0f       	add	r28, r30
    4934:	d1 1d       	adc	r29, r1
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	f8 94       	cli
    493a:	de bf       	out	0x3e, r29	; 62
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	cd bf       	out	0x3d, r28	; 61
    4940:	ed 01       	movw	r28, r26
    4942:	08 95       	ret

00004944 <_exit>:
    4944:	f8 94       	cli

00004946 <__stop_program>:
    4946:	ff cf       	rjmp	.-2      	; 0x4946 <__stop_program>
