
EV_charging_station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  00005624  000056b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006cc  00800144  00800144  0000579c  2**0
                  ALLOC
  3 .stab         0000e370  00000000  00000000  0000579c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007697  00000000  00000000  00013b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0001b1a3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0001b1d4  2**2
                  CONTENTS, READONLY
  7 .avr.prop     0000002c  00000000  00000000  0001b210  2**0
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  0001b23c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  0001b722  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0001bbc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0001bbdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_1>
       8:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_2>
       c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      10:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      14:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      18:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      1c:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__vector_7>
      20:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      24:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      28:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      34:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      3c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      44:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      4c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <ADC_voltage_Reference+0x1a>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
	...

000000ae <__trampolines_end>:
      ae:	00 40       	sbci	r16, 0x00	; 0
      b0:	7a 10       	cpse	r7, r10
      b2:	f3 5a       	subi	r31, 0xA3	; 163
      b4:	00 a0       	ldd	r0, Z+32	; 0x20
      b6:	72 4e       	sbci	r23, 0xE2	; 226
      b8:	18 09       	sbc	r17, r8
      ba:	00 10       	cpse	r0, r0
      bc:	a5 d4       	rcall	.+2378   	; 0xa08 <unsubscribe>
      be:	e8 00       	.word	0x00e8	; ????
      c0:	00 e8       	ldi	r16, 0x80	; 128
      c2:	76 48       	sbci	r23, 0x86	; 134
      c4:	17 00       	.word	0x0017	; ????
      c6:	00 e4       	ldi	r16, 0x40	; 64
      c8:	0b 54       	subi	r16, 0x4B	; 75
      ca:	02 00       	.word	0x0002	; ????
      cc:	00 ca       	rjmp	.-3072   	; 0xfffff4ce <__eeprom_end+0xff7ef4ce>
      ce:	9a 3b       	cpi	r25, 0xBA	; 186
      d0:	00 00       	nop
      d2:	00 e1       	ldi	r16, 0x10	; 16
      d4:	f5 05       	cpc	r31, r5
      d6:	00 00       	nop
      d8:	80 96       	adiw	r24, 0x20	; 32
      da:	98 00       	.word	0x0098	; ????
      dc:	00 00       	nop
      de:	40 42       	sbci	r20, 0x20	; 32
      e0:	0f 00       	.word	0x000f	; ????
      e2:	00 00       	nop
      e4:	a0 86       	std	Z+8, r10	; 0x08
      e6:	01 00       	.word	0x0001	; ????
      e8:	00 00       	nop
      ea:	10 27       	eor	r17, r16
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	e8 03       	fmulsu	r22, r16
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	64 00       	.word	0x0064	; ????
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	0a 00       	.word	0x000a	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	2c 76       	andi	r18, 0x6C	; 108
     10a:	d8 88       	ldd	r13, Y+16	; 0x10
     10c:	dc 67       	ori	r29, 0x7C	; 124
     10e:	4f 08       	sbc	r4, r15
     110:	23 df       	rcall	.-442    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     112:	c1 df       	rcall	.-126    	; 0x96 <__SREG__+0x57>
     114:	ae 59       	subi	r26, 0x9E	; 158
     116:	e1 b1       	in	r30, 0x01	; 1
     118:	b7 96       	adiw	r30, 0x27	; 39
     11a:	e5 e3       	ldi	r30, 0x35	; 53
     11c:	e4 53       	subi	r30, 0x34	; 52
     11e:	c6 3a       	cpi	r28, 0xA6	; 166
     120:	e6 51       	subi	r30, 0x16	; 22
     122:	99 76       	andi	r25, 0x69	; 105
     124:	96 e8       	ldi	r25, 0x86	; 134
     126:	e6 c2       	rjmp	.+1484   	; 0x6f4 <Timer_vidStartTimer1+0xe>
     128:	84 26       	eor	r8, r20
     12a:	eb 89       	ldd	r30, Y+19	; 0x13
     12c:	8c 9b       	sbis	0x11, 4	; 17
     12e:	62 ed       	ldi	r22, 0xD2	; 210
     130:	40 7c       	andi	r20, 0xC0	; 192
     132:	6f fc       	.word	0xfc6f	; ????
     134:	ef bc       	out	0x2f, r14	; 47
     136:	9c 9f       	mul	r25, r28
     138:	40 f2       	brcs	.-112    	; 0xca <__trampolines_end+0x1c>
     13a:	ba a5       	ldd	r27, Y+42	; 0x2a
     13c:	6f a5       	ldd	r22, Y+47	; 0x2f
     13e:	f4 90       	lpm	r15, Z
     140:	05 5a       	subi	r16, 0xA5	; 165
     142:	2a f7       	brpl	.-54     	; 0x10e <__trampolines_end+0x60>
     144:	5c 93       	st	X, r21
     146:	6b 6c       	ori	r22, 0xCB	; 203
     148:	f9 67       	ori	r31, 0x79	; 121
     14a:	6d c1       	rjmp	.+730    	; 0x426 <TaskChargingStart+0x10>
     14c:	1b fc       	.word	0xfc1b	; ????
     14e:	e0 e4       	ldi	r30, 0x40	; 64
     150:	0d 47       	sbci	r16, 0x7D	; 125
     152:	fe f5       	brtc	.+126    	; 0x1d2 <.do_clear_bss_loop>
     154:	20 e6       	ldi	r18, 0x60	; 96
     156:	b5 00       	.word	0x00b5	; ????
     158:	d0 ed       	ldi	r29, 0xD0	; 208
     15a:	90 2e       	mov	r9, r16
     15c:	03 00       	.word	0x0003	; ????
     15e:	94 35       	cpi	r25, 0x54	; 84
     160:	77 05       	cpc	r23, r7
     162:	00 80       	ld	r0, Z
     164:	84 1e       	adc	r8, r20
     166:	08 00       	.word	0x0008	; ????
     168:	00 20       	and	r0, r0
     16a:	4e 0a       	sbc	r4, r30
     16c:	00 00       	nop
     16e:	00 c8       	rjmp	.-4096   	; 0xfffff170 <__eeprom_end+0xff7ef170>
     170:	0c 33       	cpi	r16, 0x3C	; 60
     172:	33 33       	cpi	r19, 0x33	; 51
     174:	33 0f       	add	r19, r19
     176:	98 6e       	ori	r25, 0xE8	; 232
     178:	12 83       	std	Z+2, r17	; 0x02
     17a:	11 41       	sbci	r17, 0x11	; 17
     17c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     17e:	21 14       	cp	r2, r1
     180:	89 3b       	cpi	r24, 0xB9	; 185
     182:	e6 55       	subi	r30, 0x56	; 86
     184:	16 cf       	rjmp	.-468    	; 0xffffffb2 <__eeprom_end+0xff7effb2>
     186:	fe e6       	ldi	r31, 0x6E	; 110
     188:	db 18       	sub	r13, r11
     18a:	d1 84       	ldd	r13, Z+9	; 0x09
     18c:	4b 38       	cpi	r20, 0x8B	; 139
     18e:	1b f7       	brvc	.-58     	; 0x156 <__trampolines_end+0xa8>
     190:	7c 1d       	adc	r23, r12
     192:	90 1d       	adc	r25, r0
     194:	a4 bb       	out	0x14, r26	; 20
     196:	e4 24       	eor	r14, r4
     198:	20 32       	cpi	r18, 0x20	; 32
     19a:	84 72       	andi	r24, 0x24	; 36
     19c:	5e 22       	and	r5, r30
     19e:	81 00       	.word	0x0081	; ????
     1a0:	c9 f1       	breq	.+114    	; 0x214 <TaskDisplayRefresh+0x2e>
     1a2:	24 ec       	ldi	r18, 0xC4	; 196
     1a4:	a1 e5       	ldi	r26, 0x51	; 81
     1a6:	3d 27       	eor	r19, r29

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf e5       	ldi	r28, 0x5F	; 95
     1ae:	d8 e0       	ldi	r29, 0x08	; 8
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e6       	ldi	r26, 0x60	; 96
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e4 e2       	ldi	r30, 0x24	; 36
     1bc:	f6 e5       	ldi	r31, 0x56	; 86
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
     1c0:	05 90       	lpm	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	a4 34       	cpi	r26, 0x44	; 68
     1c6:	b1 07       	cpc	r27, r17
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
     1ca:	28 e0       	ldi	r18, 0x08	; 8
     1cc:	a4 e4       	ldi	r26, 0x44	; 68
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
     1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
     1d4:	a0 31       	cpi	r26, 0x10	; 16
     1d6:	b2 07       	cpc	r27, r18
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
     1da:	0e 94 93 25 	call	0x4b26	; 0x4b26 <main>
     1de:	0c 94 10 2b 	jmp	0x5620	; 0x5620 <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e6 <TaskDisplayRefresh>:
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	2a 97       	sbiw	r28, 0x0a	; 10
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <xTaskGetTickCount>
     1fe:	9a 87       	std	Y+10, r25	; 0x0a
     200:	89 87       	std	Y+9, r24	; 0x09
     202:	00 e4       	ldi	r16, 0x40	; 64
     204:	8e 9a       	sbi	0x11, 6	; 17
     206:	82 b3       	in	r24, 0x12	; 18
     208:	80 27       	eor	r24, r16
     20a:	82 bb       	out	0x12, r24	; 18
     20c:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_Clear>
     210:	8b e8       	ldi	r24, 0x8B	; 139
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <LCD_String>
     218:	6a e0       	ldi	r22, 0x0A	; 10
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     220:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     224:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <xQueueSemaphoreTake>
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <TaskDisplayRefresh+0x60>
     22c:	10 91 46 01 	lds	r17, 0x0146	; 0x800146 <globalState>
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     23e:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     242:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
     246:	12 30       	cpi	r17, 0x02	; 2
     248:	31 f1       	breq	.+76     	; 0x296 <TaskDisplayRefresh+0xb0>
     24a:	68 f4       	brcc	.+26     	; 0x266 <TaskDisplayRefresh+0x80>
     24c:	11 23       	and	r17, r17
     24e:	f1 f0       	breq	.+60     	; 0x28c <TaskDisplayRefresh+0xa6>
     250:	87 e9       	ldi	r24, 0x97	; 151
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	11 30       	cpi	r17, 0x01	; 1
     256:	e1 f0       	breq	.+56     	; 0x290 <TaskDisplayRefresh+0xaa>
     258:	64 e6       	ldi	r22, 0x64	; 100
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	ce 01       	movw	r24, r28
     25e:	09 96       	adiw	r24, 0x09	; 9
     260:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <xTaskDelayUntil>
     264:	cf cf       	rjmp	.-98     	; 0x204 <TaskDisplayRefresh+0x1e>
     266:	13 30       	cpi	r17, 0x03	; 3
     268:	b1 f1       	breq	.+108    	; 0x2d6 <TaskDisplayRefresh+0xf0>
     26a:	14 30       	cpi	r17, 0x04	; 4
     26c:	a9 f7       	brne	.-22     	; 0x258 <TaskDisplayRefresh+0x72>
     26e:	81 eb       	ldi	r24, 0xB1	; 177
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <LCD_String>
     276:	80 ec       	ldi	r24, 0xC0	; 192
     278:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
     27c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <is_overcurrent>
     280:	88 23       	and	r24, r24
     282:	09 f4       	brne	.+2      	; 0x286 <TaskDisplayRefresh+0xa0>
     284:	44 c0       	rjmp	.+136    	; 0x30e <TaskDisplayRefresh+0x128>
     286:	87 eb       	ldi	r24, 0xB7	; 183
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <TaskDisplayRefresh+0xaa>
     28c:	82 e9       	ldi	r24, 0x92	; 146
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <LCD_String>
     294:	e1 cf       	rjmp	.-62     	; 0x258 <TaskDisplayRefresh+0x72>
     296:	8d e9       	ldi	r24, 0x9D	; 157
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <LCD_String>
     29e:	80 ec       	ldi	r24, 0xC0	; 192
     2a0:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
     2a4:	8b e2       	ldi	r24, 0x2B	; 43
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <LCD_String>
     2ac:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cap_percentage>
     2b0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cap_percentage+0x1>
     2b4:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <cap_percentage+0x2>
     2b8:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <cap_percentage+0x3>
     2bc:	8d 83       	std	Y+5, r24	; 0x05
     2be:	9e 83       	std	Y+6, r25	; 0x06
     2c0:	af 83       	std	Y+7, r26	; 0x07
     2c2:	b8 87       	std	Y+8, r27	; 0x08
     2c4:	6d 81       	ldd	r22, Y+5	; 0x05
     2c6:	7e 81       	ldd	r23, Y+6	; 0x06
     2c8:	8f 81       	ldd	r24, Y+7	; 0x07
     2ca:	98 85       	ldd	r25, Y+8	; 0x08
     2cc:	0e 94 1b 08 	call	0x1036	; 0x1036 <LCD_Float>
     2d0:	84 ea       	ldi	r24, 0xA4	; 164
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	dd cf       	rjmp	.-70     	; 0x290 <TaskDisplayRefresh+0xaa>
     2d6:	87 ea       	ldi	r24, 0xA7	; 167
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <LCD_String>
     2de:	80 ec       	ldi	r24, 0xC0	; 192
     2e0:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
     2e4:	8b e2       	ldi	r24, 0x2B	; 43
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <LCD_String>
     2ec:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cap_percentage>
     2f0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cap_percentage+0x1>
     2f4:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <cap_percentage+0x2>
     2f8:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <cap_percentage+0x3>
     2fc:	89 83       	std	Y+1, r24	; 0x01
     2fe:	9a 83       	std	Y+2, r25	; 0x02
     300:	ab 83       	std	Y+3, r26	; 0x03
     302:	bc 83       	std	Y+4, r27	; 0x04
     304:	69 81       	ldd	r22, Y+1	; 0x01
     306:	7a 81       	ldd	r23, Y+2	; 0x02
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	df cf       	rjmp	.-66     	; 0x2cc <TaskDisplayRefresh+0xe6>
     30e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <is_sudden_disconnect>
     312:	88 23       	and	r24, r24
     314:	09 f4       	brne	.+2      	; 0x318 <TaskDisplayRefresh+0x132>
     316:	a0 cf       	rjmp	.-192    	; 0x258 <TaskDisplayRefresh+0x72>
     318:	84 ec       	ldi	r24, 0xC4	; 196
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	b9 cf       	rjmp	.-142    	; 0x290 <TaskDisplayRefresh+0xaa>

0000031e <VehicleCheckTask>:




void VehicleCheckTask(void *pvParameters) {
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     31e:	4f ef       	ldi	r20, 0xFF	; 255
     320:	5f ef       	ldi	r21, 0xFF	; 255
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <ulTaskGenericNotifyTake>
    // TickType_t xLastWakeTime = xTaskGetTickCount(); 
    
    static uint16_t adc_OC_Check_value = 0;
    static uint16_t adc_connection_check = 0;
    SystemState local_state = globalState;
     32a:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <globalState>
    
    while (1) {
        
        adc_connection_check = ADC_READ(VEHICLE_CONNECTION_CHECK_PIN);
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	0e 94 65 04 	call	0x8ca	; 0x8ca <ADC_READ>
     334:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
     338:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
        adc_OC_Check_value = ADC_READ(VEHICLE_OVERCURRENT_CHECK_PIN);
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	0e 94 65 04 	call	0x8ca	; 0x8ca <ADC_READ>


        // Check if the ADC value is above the threshold
        if (adc_connection_check < CONNECTION_THRESHOLD) {
     342:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__data_end>
     346:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__data_end+0x1>
     34a:	24 38       	cpi	r18, 0x84	; 132
     34c:	43 e0       	ldi	r20, 0x03	; 3
     34e:	34 07       	cpc	r19, r20
     350:	38 f5       	brcc	.+78     	; 0x3a0 <VehicleCheckTask+0x82>
            is_connected = 1;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <is_connected>
            if ((globalState == IDLE)) {
     358:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
     35c:	81 11       	cpse	r24, r1
     35e:	01 c0       	rjmp	.+2      	; 0x362 <VehicleCheckTask+0x44>
                
                local_state = READY;
     360:	c1 e0       	ldi	r28, 0x01	; 1
            is_overcurrent = 1;
            local_state = FAULT_DETECTION;

        }

        if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     362:	6f ef       	ldi	r22, 0xFF	; 255
     364:	7f ef       	ldi	r23, 0xFF	; 255
     366:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     36a:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     36e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <xQueueSemaphoreTake>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	81 f4       	brne	.+32     	; 0x396 <VehicleCheckTask+0x78>
            if (globalState != local_state) {
     376:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
     37a:	8c 13       	cpse	r24, r28
                
                globalState = local_state;
     37c:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <globalState>
                
            }
            xSemaphoreGive(stateSemaphore);
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     38e:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     392:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
        }

        // vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(VEHICLE_CHECK_PERIOD));
        vTaskDelay(pdMS_TO_TICKS(200));
     396:	88 ec       	ldi	r24, 0xC8	; 200
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 0e 1c 	call	0x381c	; 0x381c <vTaskDelay>
    static uint16_t adc_connection_check = 0;
    SystemState local_state = globalState;
    
    while (1) {
        
        adc_connection_check = ADC_READ(VEHICLE_CONNECTION_CHECK_PIN);
     39e:	c7 cf       	rjmp	.-114    	; 0x32e <VehicleCheckTask+0x10>
            if ((globalState == IDLE)) {
                
                local_state = READY;
                
            }
        } else if (adc_connection_check > CONNECTION_THRESHOLD){
     3a0:	24 38       	cpi	r18, 0x84	; 132
     3a2:	33 40       	sbci	r19, 0x03	; 3
     3a4:	61 f0       	breq	.+24     	; 0x3be <VehicleCheckTask+0xa0>
            is_connected = 0;
     3a6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <is_connected>
            if ((globalState == CHARGING)) {    
     3aa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <globalState>
                // charging_state = STOP;
                // xTaskNotifyGive(xSuddenDisconnect_Task_Handle);
                is_sudden_disconnect = 1;
                local_state = FAULT_DETECTION;
            } else {
                local_state = IDLE;
     3ae:	c0 e0       	ldi	r28, 0x00	; 0
                local_state = READY;
                
            }
        } else if (adc_connection_check > CONNECTION_THRESHOLD){
            is_connected = 0;
            if ((globalState == CHARGING)) {    
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	b9 f6       	brne	.-82     	; 0x362 <VehicleCheckTask+0x44>
                // charging_state = STOP;
                // xTaskNotifyGive(xSuddenDisconnect_Task_Handle);
                is_sudden_disconnect = 1;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <is_sudden_disconnect>
            } else {
                local_state = IDLE;
            }
        } else if (adc_OC_Check_value > OVERCURRENT_THRESHOLD){
            is_overcurrent = 1;
            local_state = FAULT_DETECTION;
     3ba:	c4 e0       	ldi	r28, 0x04	; 4
     3bc:	d2 cf       	rjmp	.-92     	; 0x362 <VehicleCheckTask+0x44>
                is_sudden_disconnect = 1;
                local_state = FAULT_DETECTION;
            } else {
                local_state = IDLE;
            }
        } else if (adc_OC_Check_value > OVERCURRENT_THRESHOLD){
     3be:	4a 97       	sbiw	r24, 0x1a	; 26
     3c0:	80 f2       	brcs	.-96     	; 0x362 <VehicleCheckTask+0x44>
            is_overcurrent = 1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <is_overcurrent>
     3c8:	f8 cf       	rjmp	.-16     	; 0x3ba <VehicleCheckTask+0x9c>

000003ca <Overcurrent_Task>:
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

        is_overcurrent = 1;
        
        if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
            globalState = FAULT_DETECTION;
     3ca:	c4 e0       	ldi	r28, 0x04	; 4

// Overcurrent detection task
void Overcurrent_Task(void *pvParameters) {
    while (1) {
        // Wait for the overcurrent flag to be set
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     3cc:	4f ef       	ldi	r20, 0xFF	; 255
     3ce:	5f ef       	ldi	r21, 0xFF	; 255
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <ulTaskGenericNotifyTake>

        is_overcurrent = 1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <is_overcurrent>
        
        if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     3de:	6f ef       	ldi	r22, 0xFF	; 255
     3e0:	7f ef       	ldi	r23, 0xFF	; 255
     3e2:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     3e6:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     3ea:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <xQueueSemaphoreTake>
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	69 f4       	brne	.+26     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
            globalState = FAULT_DETECTION;
     3f2:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <globalState>
            xSemaphoreGive(stateSemaphore);
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     404:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     408:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
        }
        // PORTC |= (1 << PC0); // Set PC0 to high
        vTaskDelay(pdMS_TO_TICKS(1000));
     40c:	88 ee       	ldi	r24, 0xE8	; 232
     40e:	93 e0       	ldi	r25, 0x03	; 3
     410:	0e 94 0e 1c 	call	0x381c	; 0x381c <vTaskDelay>

// Overcurrent detection task
void Overcurrent_Task(void *pvParameters) {
    while (1) {
        // Wait for the overcurrent flag to be set
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     414:	db cf       	rjmp	.-74     	; 0x3cc <Overcurrent_Task+0x2>

00000416 <TaskChargingStart>:




// Task to Handle Charging Start
void TaskChargingStart(void *pvParameters) {
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	1f 92       	push	r1
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
            if (event == START_BUTTON_EVENT) {
                Charge_Logic();

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
                    globalState = CHARGING;
     420:	12 e0       	ldi	r17, 0x02	; 2

// Task to Handle Charging Start
void TaskChargingStart(void *pvParameters) {
    uint8_t event;
    for (;;) {
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
     422:	4f ef       	ldi	r20, 0xFF	; 255
     424:	5f ef       	ldi	r21, 0xFF	; 255
     426:	be 01       	movw	r22, r28
     428:	6f 5f       	subi	r22, 0xFF	; 255
     42a:	7f 4f       	sbci	r23, 0xFF	; 255
     42c:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <buttonQueue>
     430:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <buttonQueue+0x1>
     434:	0e 94 43 10 	call	0x2086	; 0x2086 <xQueueReceive>
     438:	88 23       	and	r24, r24
     43a:	99 f3       	breq	.-26     	; 0x422 <TaskChargingStart+0xc>
            if (event == START_BUTTON_EVENT) {
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	81 f7       	brne	.-32     	; 0x422 <TaskChargingStart+0xc>
                Charge_Logic();
     442:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <Charge_Logic>

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     446:	6f ef       	ldi	r22, 0xFF	; 255
     448:	7f ef       	ldi	r23, 0xFF	; 255
     44a:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     44e:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     452:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <xQueueSemaphoreTake>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	21 f7       	brne	.-56     	; 0x422 <TaskChargingStart+0xc>
                    globalState = CHARGING;
     45a:	10 93 46 01 	sts	0x0146, r17	; 0x800146 <globalState>
                    xSemaphoreGive(stateSemaphore);
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     46c:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     470:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
     474:	d6 cf       	rjmp	.-84     	; 0x422 <TaskChargingStart+0xc>

00000476 <TaskStopSession>:
        }
    }
}

// Task to Handle Stop Session
void TaskStopSession(void *pvParameters) {
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	1f 92       	push	r1
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
            if (event == STOP_BUTTON_EVENT) {
                Stop_Charge_Logic();

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
                    globalState = DISCHARGING;
     480:	13 e0       	ldi	r17, 0x03	; 3

// Task to Handle Stop Session
void TaskStopSession(void *pvParameters) {
    uint8_t event;
    for (;;) {
        if (xQueueReceive(buttonQueue, &event, portMAX_DELAY)) {
     482:	4f ef       	ldi	r20, 0xFF	; 255
     484:	5f ef       	ldi	r21, 0xFF	; 255
     486:	be 01       	movw	r22, r28
     488:	6f 5f       	subi	r22, 0xFF	; 255
     48a:	7f 4f       	sbci	r23, 0xFF	; 255
     48c:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <buttonQueue>
     490:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <buttonQueue+0x1>
     494:	0e 94 43 10 	call	0x2086	; 0x2086 <xQueueReceive>
     498:	88 23       	and	r24, r24
     49a:	99 f3       	breq	.-26     	; 0x482 <TaskStopSession+0xc>
            if (event == STOP_BUTTON_EVENT) {
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	81 f7       	brne	.-32     	; 0x482 <TaskStopSession+0xc>
                Stop_Charge_Logic();
     4a2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Stop_Charge_Logic>

                if (xSemaphoreTake(stateSemaphore, portMAX_DELAY) == pdTRUE) {
     4a6:	6f ef       	ldi	r22, 0xFF	; 255
     4a8:	7f ef       	ldi	r23, 0xFF	; 255
     4aa:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     4ae:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     4b2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <xQueueSemaphoreTake>
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	21 f7       	brne	.-56     	; 0x482 <TaskStopSession+0xc>
                    globalState = DISCHARGING;
     4ba:	10 93 46 01 	sts	0x0146, r17	; 0x800146 <globalState>
                    xSemaphoreGive(stateSemaphore);
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <stateSemaphore>
     4cc:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <stateSemaphore+0x1>
     4d0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
     4d4:	d6 cf       	rjmp	.-84     	; 0x482 <TaskStopSession+0xc>

000004d6 <__vector_1>:
volatile SystemState globalState = IDLE; // Default state




ISR(INT0_vect) {
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	2f 93       	push	r18
     4e2:	3f 93       	push	r19
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	af 93       	push	r26
     4f2:	bf 93       	push	r27
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <__vector_1+0x28>
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     502:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t event = START_BUTTON_EVENT;
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendFromISR(buttonQueue, &event, &xHigherPriorityTaskWoken);
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	ae 01       	movw	r20, r28
     50c:	4e 5f       	subi	r20, 0xFE	; 254
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
     510:	be 01       	movw	r22, r28
     512:	6f 5f       	subi	r22, 0xFF	; 255
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <buttonQueue>
     51a:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <buttonQueue+0x1>
     51e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xQueueGenericSendFromISR>

    if (xHigherPriorityTaskWoken) {
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	81 11       	cpse	r24, r1
        portYIELD();
     526:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
    }
}
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	ff 91       	pop	r31
     534:	ef 91       	pop	r30
     536:	bf 91       	pop	r27
     538:	af 91       	pop	r26
     53a:	9f 91       	pop	r25
     53c:	8f 91       	pop	r24
     53e:	7f 91       	pop	r23
     540:	6f 91       	pop	r22
     542:	5f 91       	pop	r21
     544:	4f 91       	pop	r20
     546:	3f 91       	pop	r19
     548:	2f 91       	pop	r18
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <__vector_2>:

// Interrupt Service Routine for STOP Button (INT1)
ISR(INT1_vect) {
     554:	1f 92       	push	r1
     556:	0f 92       	push	r0
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	0f 92       	push	r0
     55c:	11 24       	eor	r1, r1
     55e:	2f 93       	push	r18
     560:	3f 93       	push	r19
     562:	4f 93       	push	r20
     564:	5f 93       	push	r21
     566:	6f 93       	push	r22
     568:	7f 93       	push	r23
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
     56e:	af 93       	push	r26
     570:	bf 93       	push	r27
     572:	ef 93       	push	r30
     574:	ff 93       	push	r31
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	00 d0       	rcall	.+0      	; 0x57c <__vector_2+0x28>
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     580:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t event = STOP_BUTTON_EVENT;
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	89 83       	std	Y+1, r24	; 0x01
    xQueueSendFromISR(buttonQueue, &event, &xHigherPriorityTaskWoken);
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	ae 01       	movw	r20, r28
     58a:	4e 5f       	subi	r20, 0xFE	; 254
     58c:	5f 4f       	sbci	r21, 0xFF	; 255
     58e:	be 01       	movw	r22, r28
     590:	6f 5f       	subi	r22, 0xFF	; 255
     592:	7f 4f       	sbci	r23, 0xFF	; 255
     594:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <buttonQueue>
     598:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <buttonQueue+0x1>
     59c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xQueueGenericSendFromISR>

    if (xHigherPriorityTaskWoken) {
     5a0:	8a 81       	ldd	r24, Y+2	; 0x02
     5a2:	81 11       	cpse	r24, r1
        portYIELD();
     5a4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
    }
}
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	0f 90       	pop	r0
     5ce:	1f 90       	pop	r1
     5d0:	18 95       	reti

000005d2 <SuddenDisconnect_Task>:
// ######################### TEMPORARY TASKS ################# //
// ######################################################### //

void SuddenDisconnect_Task(void *pvParameters) {
    while (1) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     5d2:	4f ef       	ldi	r20, 0xFF	; 255
     5d4:	5f ef       	ldi	r21, 0xFF	; 255
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <ulTaskGenericNotifyTake>

        PORTC |= (1 << PC7); // Set PC7 "Disconnected" to high
     5de:	af 9a       	sbi	0x15, 7	; 21
        vTaskDelay(pdMS_TO_TICKS(2000));
     5e0:	80 ed       	ldi	r24, 0xD0	; 208
     5e2:	97 e0       	ldi	r25, 0x07	; 7
     5e4:	0e 94 0e 1c 	call	0x381c	; 0x381c <vTaskDelay>
        PORTC &= ~(1 << PC7);  // Set PC7 "Disconnected" to low
     5e8:	af 98       	cbi	0x15, 7	; 21
     5ea:	f3 cf       	rjmp	.-26     	; 0x5d2 <SuddenDisconnect_Task>

000005ec <Os_Init>:




// OS Initialization
void Os_Init(void) {
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
    // Initialize peripherals
	LCD_Init();
     5f2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <LCD_Init>



    // Create binary semaphore for global state
    stateSemaphore = xSemaphoreCreateBinary();
     5f6:	43 e0       	ldi	r20, 0x03	; 3
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xQueueGenericCreate>
     600:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <stateSemaphore+0x1>
     604:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <stateSemaphore>

    xSemaphoreGive(stateSemaphore);
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>

    // Create the button queue
    buttonQueue = xQueueCreate(5, sizeof(uint8_t));
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	85 e0       	ldi	r24, 0x05	; 5
     61c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xQueueGenericCreate>
     620:	90 93 fb 07 	sts	0x07FB, r25	; 0x8007fb <buttonQueue+0x1>
     624:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <buttonQueue>

//     Create tasks
    xTaskCreate(TaskDisplayRefresh, "DisplayRefresh", 128, NULL, 4, &taskHandleDisplayRefresh);
     628:	8c e0       	ldi	r24, 0x0C	; 12
     62a:	e8 2e       	mov	r14, r24
     62c:	88 e0       	ldi	r24, 0x08	; 8
     62e:	f8 2e       	mov	r15, r24
     630:	04 e0       	ldi	r16, 0x04	; 4
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	40 e8       	ldi	r20, 0x80	; 128
     638:	66 ed       	ldi	r22, 0xD6	; 214
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	83 ef       	ldi	r24, 0xF3	; 243
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 1c 18 	call	0x3038	; 0x3038 <xTaskCreate>
    xTaskCreate(TaskChargingStart, "ChargingStart", 128, NULL, 2, NULL);
     644:	f1 2c       	mov	r15, r1
     646:	e1 2c       	mov	r14, r1
     648:	02 e0       	ldi	r16, 0x02	; 2
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	40 e8       	ldi	r20, 0x80	; 128
     650:	65 ee       	ldi	r22, 0xE5	; 229
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	8b e0       	ldi	r24, 0x0B	; 11
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	0e 94 1c 18 	call	0x3038	; 0x3038 <xTaskCreate>
    xTaskCreate(TaskStopSession, "StopSession", 128, NULL, 2, NULL);
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	40 e8       	ldi	r20, 0x80	; 128
     662:	63 ef       	ldi	r22, 0xF3	; 243
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	8b e3       	ldi	r24, 0x3B	; 59
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	0e 94 1c 18 	call	0x3038	; 0x3038 <xTaskCreate>
    xTaskCreate(VehicleCheckTask, "VehicleCheck", 128, NULL, 2, &VehicleCheckTaskHandle);
     66e:	96 ef       	ldi	r25, 0xF6	; 246
     670:	e9 2e       	mov	r14, r25
     672:	97 e0       	ldi	r25, 0x07	; 7
     674:	f9 2e       	mov	r15, r25
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	40 e8       	ldi	r20, 0x80	; 128
     67c:	6f ef       	ldi	r22, 0xFF	; 255
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	8f e8       	ldi	r24, 0x8F	; 143
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 1c 18 	call	0x3038	; 0x3038 <xTaskCreate>
    xTaskCreate(Overcurrent_Task, "Overcurrent Task", 128, NULL, 4, &Overcurrent_TaskHandle);
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	e2 2e       	mov	r14, r18
     68c:	28 e0       	ldi	r18, 0x08	; 8
     68e:	f2 2e       	mov	r15, r18
     690:	04 e0       	ldi	r16, 0x04	; 4
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	40 e8       	ldi	r20, 0x80	; 128
     698:	6c e0       	ldi	r22, 0x0C	; 12
     69a:	71 e0       	ldi	r23, 0x01	; 1
     69c:	85 ee       	ldi	r24, 0xE5	; 229
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	0e 94 1c 18 	call	0x3038	; 0x3038 <xTaskCreate>
    
//    xTaskCreate(prd_Buttons, "prd_Buttons", 128, NULL, 4, NULL);

    // Start the scheduler
    vTaskStartScheduler();
}
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
    xTaskCreate(Overcurrent_Task, "Overcurrent Task", 128, NULL, 4, &Overcurrent_TaskHandle);
    
//    xTaskCreate(prd_Buttons, "prd_Buttons", 128, NULL, 4, NULL);

    // Start the scheduler
    vTaskStartScheduler();
     6aa:	0c 94 96 19 	jmp	0x332c	; 0x332c <vTaskStartScheduler>

000006ae <vTimer1Callback>:
#define NULLPtr ((void *)0)
static TimerHandle_t xTimer1 = NULL;
static void (*Timer1Callback)(void) = NULLPtr;

static void vTimer1Callback(TimerHandle_t xTimer) {
    if (Timer1Callback != NULLPtr) {
     6ae:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Timer1Callback>
     6b2:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Timer1Callback+0x1>
     6b6:	30 97       	sbiw	r30, 0x00	; 0
     6b8:	09 f0       	breq	.+2      	; 0x6bc <vTimer1Callback+0xe>
        (*Timer1Callback)(); // Call the user callback function
     6ba:	09 94       	ijmp
    }
}
     6bc:	08 95       	ret

000006be <Timer_vidInitTimer1>:

// Initialize Timer1 (FreeRTOS Software Timer)
void Timer_vidInitTimer1(void) {
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
    // Create the software timer
    xTimer1 = xTimerCreate(
     6c2:	07 e5       	ldi	r16, 0x57	; 87
     6c4:	13 e0       	ldi	r17, 0x03	; 3
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	64 e1       	ldi	r22, 0x14	; 20
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	8d e1       	ldi	r24, 0x1D	; 29
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 b2 24 	call	0x4964	; 0x4964 <xTimerCreate>
     6d8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <xTimer1+0x1>
     6dc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <xTimer1>
        NULL,                                 // Timer ID (not used)
		vTimer1Callback                       // Callback function
    );


}
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	08 95       	ret

000006e6 <Timer_vidStartTimer1>:

// Start Timer1 (FreeRTOS Software Timer)
void Timer_vidStartTimer1(void) {
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
    if (xTimer1 != NULL) {
     6ea:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <xTimer1>
     6ee:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <xTimer1+0x1>
     6f2:	89 2b       	or	r24, r25
     6f4:	71 f0       	breq	.+28     	; 0x712 <Timer_vidStartTimer1+0x2c>
        xTimerStart(xTimer1, 0);
     6f6:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <xTaskGetTickCount>
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	00 e0       	ldi	r16, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	ac 01       	movw	r20, r24
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <xTimer1>
     70a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <xTimer1+0x1>
     70e:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <xTimerGenericCommandFromTask>
    }
}
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	08 95       	ret

00000718 <Timer_vidStopTimer1>:

// Stop Timer1 (FreeRTOS Software Timer)
void Timer_vidStopTimer1(void) {
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
    if (xTimer1 != NULL) {
     71c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <xTimer1>
     720:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <xTimer1+0x1>
     724:	00 97       	sbiw	r24, 0x00	; 0
     726:	49 f0       	breq	.+18     	; 0x73a <Timer_vidStopTimer1+0x22>
        xTimerStop(xTimer1, 0);
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	00 e0       	ldi	r16, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	63 e0       	ldi	r22, 0x03	; 3
     736:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <xTimerGenericCommandFromTask>
    }
}
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <Timer_vidSetCallBackTimer1>:

// Set the callback function for Timer1
void Timer_vidSetCallBackTimer1(void (*TimerCallback)(void)) {
    if (TimerCallback != NULLPtr) {
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	21 f0       	breq	.+8      	; 0x74c <Timer_vidSetCallBackTimer1+0xc>
        Timer1Callback = TimerCallback;
     744:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <Timer1Callback+0x1>
     748:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <Timer1Callback>
    }
}
     74c:	08 95       	ret

0000074e <CreateGpioProxy>:

#include "Gpio.h"
#include "Gpio_Config.h"

// Create a GpioProxy for a specific port (portDir and port are pointers to the direction and data registers)
GpioProxy CreateGpioProxy(volatile uint8_t *portDir, volatile uint8_t *port) {
     74e:	9b 01       	movw	r18, r22
    GpioProxy gpioProxy;
    gpioProxy.portDir = portDir;
    gpioProxy.port = port;
    return gpioProxy;
     750:	ac 01       	movw	r20, r24
}
     752:	c9 01       	movw	r24, r18
     754:	ba 01       	movw	r22, r20
     756:	08 95       	ret

00000758 <Proxy_SetPortDirection>:

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     758:	dc 01       	movw	r26, r24
     75a:	ed 91       	ld	r30, X+
     75c:	fc 91       	ld	r31, X
     75e:	60 83       	st	Z, r22
}
     760:	08 95       	ret

00000762 <Proxy_WritePort>:

// Write a value to the port
void Proxy_WritePort(GpioProxy *gpioProxy, uint8_t value) {
    *(gpioProxy->port) = value;
     762:	dc 01       	movw	r26, r24
     764:	12 96       	adiw	r26, 0x02	; 2
     766:	ed 91       	ld	r30, X+
     768:	fc 91       	ld	r31, X
     76a:	60 83       	st	Z, r22
}
     76c:	08 95       	ret

0000076e <Proxy_ReadPort>:

// Read the value of the port
uint8_t Proxy_ReadPort(GpioProxy *gpioProxy) {
    return *(gpioProxy->port);
     76e:	dc 01       	movw	r26, r24
     770:	12 96       	adiw	r26, 0x02	; 2
     772:	ed 91       	ld	r30, X+
     774:	fc 91       	ld	r31, X
     776:	80 81       	ld	r24, Z
}
     778:	08 95       	ret

0000077a <Proxy_SetPin>:

// Set a specific pin high
void Proxy_SetPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) |= (1 << pin);
     77a:	dc 01       	movw	r26, r24
     77c:	12 96       	adiw	r26, 0x02	; 2
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	80 81       	ld	r24, Z
     784:	21 e0       	ldi	r18, 0x01	; 1
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	01 c0       	rjmp	.+2      	; 0x78c <Proxy_SetPin+0x12>
     78a:	22 0f       	add	r18, r18
     78c:	6a 95       	dec	r22
     78e:	ea f7       	brpl	.-6      	; 0x78a <Proxy_SetPin+0x10>
     790:	82 2b       	or	r24, r18
     792:	80 83       	st	Z, r24
}
     794:	08 95       	ret

00000796 <Proxy_ClearPin>:

// Clear a specific pin (set it low)
void Proxy_ClearPin(GpioProxy *gpioProxy, uint8_t pin) {
    *(gpioProxy->port) &= ~(1 << pin);
     796:	dc 01       	movw	r26, r24
     798:	12 96       	adiw	r26, 0x02	; 2
     79a:	ed 91       	ld	r30, X+
     79c:	fc 91       	ld	r31, X
     79e:	20 81       	ld	r18, Z
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <Proxy_ClearPin+0x12>
     7a6:	88 0f       	add	r24, r24
     7a8:	6a 95       	dec	r22
     7aa:	ea f7       	brpl	.-6      	; 0x7a6 <Proxy_ClearPin+0x10>
     7ac:	80 95       	com	r24
     7ae:	82 23       	and	r24, r18
     7b0:	80 83       	st	Z, r24
}
     7b2:	08 95       	ret

000007b4 <Proxy_ReadPin>:

// Read the state of a specific pin
uint8_t Proxy_ReadPin(GpioProxy *gpioProxy, uint8_t pin) {
    return (*(gpioProxy->port) & (1 << pin)) >> pin;
     7b4:	dc 01       	movw	r26, r24
     7b6:	12 96       	adiw	r26, 0x02	; 2
     7b8:	ed 91       	ld	r30, X+
     7ba:	fc 91       	ld	r31, X
     7bc:	20 81       	ld	r18, Z
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	06 2e       	mov	r0, r22
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <Proxy_ReadPin+0x16>
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	0a 94       	dec	r0
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <Proxy_ReadPin+0x12>
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	82 23       	and	r24, r18
     7d2:	93 23       	and	r25, r19
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <Proxy_ReadPin+0x26>
     7d6:	95 95       	asr	r25
     7d8:	87 95       	ror	r24
     7da:	6a 95       	dec	r22
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <Proxy_ReadPin+0x22>
}
     7de:	08 95       	ret

000007e0 <ConfigurePins>:

// Function to configure pins based on the pinConfigs array
void ConfigurePins(void) {
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	c0 e6       	ldi	r28, 0x60	; 96
     7ea:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i < index_no; i++) {
        PinConfig *pin = &pinConfigs[i];

        // Set pin direction
        if (pin->direction == 1) {
            Proxy_SetPortDirection(pin->gpioProxy, (1 << pin->pin));  // Set as output
     7ec:	01 e0       	ldi	r16, 0x01	; 1
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	e8 81       	ld	r30, Y
     7f2:	f9 81       	ldd	r31, Y+1	; 0x01
     7f4:	01 90       	ld	r0, Z+
     7f6:	f0 81       	ld	r31, Z
     7f8:	e0 2d       	mov	r30, r0

    for (i = 0; i < index_no; i++) {
        PinConfig *pin = &pinConfigs[i];

        // Set pin direction
        if (pin->direction == 1) {
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	d1 f4       	brne	.+52     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
            Proxy_SetPortDirection(pin->gpioProxy, (1 << pin->pin));  // Set as output
     800:	8a 81       	ldd	r24, Y+2	; 0x02
     802:	98 01       	movw	r18, r16
     804:	02 c0       	rjmp	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	8a 95       	dec	r24
     80c:	e2 f7       	brpl	.-8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
    return gpioProxy;
}

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     80e:	20 83       	st	Z, r18
     810:	2c 81       	ldd	r18, Y+4	; 0x04
     812:	6a 81       	ldd	r22, Y+2	; 0x02
     814:	88 81       	ld	r24, Y
     816:	99 81       	ldd	r25, Y+1	; 0x01
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Set pin low
            }
        } else {
            // For input pins, we can enable pull-up resistors if required
            if (pin->value == 1) {
     818:	21 30       	cpi	r18, 0x01	; 1
     81a:	71 f4       	brne	.+28     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
                Proxy_SetPin(pin->gpioProxy, pin->pin);  // Enable pull-up resistor
     81c:	0e 94 bd 03 	call	0x77a	; 0x77a <Proxy_SetPin>
     820:	25 96       	adiw	r28, 0x05	; 5
    uint8_t i;
	uint8_t index_no = NUM_INDECIES;

    //uint8_t numPins = sizeof(pinConfigs) / sizeof(pinConfigs[0]);

    for (i = 0; i < index_no; i++) {
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	ce 37       	cpi	r28, 0x7E	; 126
     826:	d3 07       	cpc	r29, r19
     828:	19 f7       	brne	.-58     	; 0x7f0 <ConfigurePins+0x10>
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Disable pull-up resistor
            }
        }
    }
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	08 95       	ret
    return gpioProxy;
}

// Set port direction (0 for input, 1 for output)
void Proxy_SetPortDirection(GpioProxy *gpioProxy, uint8_t direction) {
    *(gpioProxy->portDir) = direction;
     834:	10 82       	st	Z, r1
     836:	ec cf       	rjmp	.-40     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
        } else {
            // For input pins, we can enable pull-up resistors if required
            if (pin->value == 1) {
                Proxy_SetPin(pin->gpioProxy, pin->pin);  // Enable pull-up resistor
            } else {
                Proxy_ClearPin(pin->gpioProxy, pin->pin);  // Disable pull-up resistor
     838:	0e 94 cb 03 	call	0x796	; 0x796 <Proxy_ClearPin>
     83c:	f1 cf       	rjmp	.-30     	; 0x820 <__DATA_REGION_LENGTH__+0x20>

0000083e <ADC_PRESCALER_SET>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// This function selects sampling frequency of ADC by selecting the prescaler bit
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
     83e:	96 b1       	in	r25, 0x06	; 6
     840:	98 7f       	andi	r25, 0xF8	; 248
     842:	96 b9       	out	0x06, r25	; 6

	switch(prescaler)
     844:	80 31       	cpi	r24, 0x10	; 16
     846:	c1 f0       	breq	.+48     	; 0x878 <__stack+0x19>
     848:	40 f4       	brcc	.+16     	; 0x85a <ADC_PRESCALER_SET+0x1c>
     84a:	84 30       	cpi	r24, 0x04	; 4
     84c:	79 f0       	breq	.+30     	; 0x86c <__stack+0xd>
     84e:	88 30       	cpi	r24, 0x08	; 8
     850:	79 f0       	breq	.+30     	; 0x870 <__stack+0x11>
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	c9 f4       	brne	.+50     	; 0x888 <__stack+0x29>
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
     856:	30 9a       	sbi	0x06, 0	; 6
			   break;
     858:	08 95       	ret
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization

	switch(prescaler)
     85a:	80 34       	cpi	r24, 0x40	; 64
     85c:	79 f0       	breq	.+30     	; 0x87c <__stack+0x1d>
     85e:	80 38       	cpi	r24, 0x80	; 128
     860:	81 f0       	breq	.+32     	; 0x882 <__stack+0x23>
     862:	80 32       	cpi	r24, 0x20	; 32
     864:	89 f4       	brne	.+34     	; 0x888 <__stack+0x29>
			   break;
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
			   break;
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
			   break;
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
     866:	86 b1       	in	r24, 0x06	; 6
     868:	85 60       	ori	r24, 0x05	; 5
     86a:	04 c0       	rjmp	.+8      	; 0x874 <__stack+0x15>

	switch(prescaler)
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
			   break;
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
     86c:	31 9a       	sbi	0x06, 1	; 6
			   break;
     86e:	08 95       	ret
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
     870:	86 b1       	in	r24, 0x06	; 6
     872:	83 60       	ori	r24, 0x03	; 3
			   break;
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
			   break;
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
			   break;
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
     874:	86 b9       	out	0x06, r24	; 6
	}

}
     876:	08 95       	ret
			   break;
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
			   break;
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
			   break;
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
     878:	32 9a       	sbi	0x06, 2	; 6
			   break;
     87a:	08 95       	ret
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
			   break;
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
     87c:	86 b1       	in	r24, 0x06	; 6
     87e:	86 60       	ori	r24, 0x06	; 6
     880:	f9 cf       	rjmp	.-14     	; 0x874 <__stack+0x15>
			   break;
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
     882:	86 b1       	in	r24, 0x06	; 6
     884:	87 60       	ori	r24, 0x07	; 7
     886:	f6 cf       	rjmp	.-20     	; 0x874 <__stack+0x15>
			   break;
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
     888:	86 b1       	in	r24, 0x06	; 6
     88a:	88 7f       	andi	r24, 0xF8	; 248
     88c:	f3 cf       	rjmp	.-26     	; 0x874 <__stack+0x15>

0000088e <ADC_voltage_Reference>:

//This function selects the voltage reference
//by default AVCC has been selected
void ADC_voltage_Reference(uint8_t Reference_Voltage)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
     88e:	97 b1       	in	r25, 0x07	; 7
     890:	9f 73       	andi	r25, 0x3F	; 63
     892:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1<<REFS0); // Default AVCC has been set
     894:	3e 9a       	sbi	0x07, 6	; 7


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
     896:	81 11       	cpse	r24, r1
     898:	04 c0       	rjmp	.+8      	; 0x8a2 <ADC_voltage_Reference+0x14>
     89a:	87 b1       	in	r24, 0x07	; 7
     89c:	8f 73       	andi	r24, 0x3F	; 63
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     89e:	87 b9       	out	0x07, r24	; 7
     8a0:	08 95       	ret
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	11 f4       	brne	.+4      	; 0x8aa <ADC_voltage_Reference+0x1c>
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
	else{ADMUX |= (1<<REFS0);}
     8a6:	3e 9a       	sbi	0x07, 6	; 7

}
     8a8:	08 95       	ret
	ADMUX |= (1<<REFS0); // Default AVCC has been set


	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <ADC_voltage_Reference+0x18>
     8ae:	87 b1       	in	r24, 0x07	; 7
     8b0:	80 6c       	ori	r24, 0xC0	; 192
     8b2:	f5 cf       	rjmp	.-22     	; 0x89e <ADC_voltage_Reference+0x10>

000008b4 <ADC_INIT>:
/*------------possible parameter---------
prescaler = 2,4,8,16,32,64,128
 Voltage_Reference = AREF,AVCC,INTERNAL
*/
void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
     8b4:	cf 93       	push	r28
     8b6:	c6 2f       	mov	r28, r22
	2) set prescaler
	3) reference voltage select
	4) left adjust of for data register
	*/

	ADCSRA |= (1<<ADEN); // ADC Enable
     8b8:	37 9a       	sbi	0x06, 7	; 6
	ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
     8ba:	0e 94 1f 04 	call	0x83e	; 0x83e <ADC_PRESCALER_SET>
	ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
     8be:	8c 2f       	mov	r24, r28
     8c0:	0e 94 47 04 	call	0x88e	; 0x88e <ADC_voltage_Reference>
	ADMUX &= ~(1<<ADLAR); //left adjust off // Though bu default left adjust off // this line use for more convenient for future developer
     8c4:	3d 98       	cbi	0x07, 5	; 7
}
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <ADC_READ>:

//########################################################################################
//########################################################################################
uint16_t ADC_READ(uint8_t channel)
{
	ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     8ca:	97 b1       	in	r25, 0x07	; 7
     8cc:	90 7e       	andi	r25, 0xE0	; 224
     8ce:	97 b9       	out	0x07, r25	; 7

	switch(channel)
     8d0:	88 30       	cpi	r24, 0x08	; 8
     8d2:	30 f5       	brcc	.+76     	; 0x920 <ADC_READ+0x56>
     8d4:	e8 2f       	mov	r30, r24
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	e0 59       	subi	r30, 0x90	; 144
     8da:	fb 4f       	sbci	r31, 0xFB	; 251
     8dc:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <__tablejump2__>
     8e0:	90 04       	cpc	r9, r0
     8e2:	78 04       	cpc	r7, r8
     8e4:	7f 04       	cpc	r7, r15
     8e6:	81 04       	cpc	r8, r1
     8e8:	85 04       	cpc	r8, r5
     8ea:	87 04       	cpc	r8, r7
     8ec:	8a 04       	cpc	r8, r10
     8ee:	8d 04       	cpc	r8, r13
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
     8f0:	38 9a       	sbi	0x07, 0	; 7
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
	}
	ADCSRA |=(1<<ADSC); // ADC conversion start
     8f2:	36 9a       	sbi	0x06, 6	; 6

	while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
     8f4:	34 9b       	sbis	0x06, 4	; 6
     8f6:	fe cf       	rjmp	.-4      	; 0x8f4 <ADC_READ+0x2a>
	//uint8_t high,low;
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
     8f8:	84 b1       	in	r24, 0x04	; 4
     8fa:	95 b1       	in	r25, 0x05	; 5
}
     8fc:	08 95       	ret
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
			   break;
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
     8fe:	39 9a       	sbi	0x07, 1	; 7
		       break;
     900:	f8 cf       	rjmp	.-16     	; 0x8f2 <ADC_READ+0x28>
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
     902:	87 b1       	in	r24, 0x07	; 7
     904:	83 60       	ori	r24, 0x03	; 3
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     906:	87 b9       	out	0x07, r24	; 7
     908:	f4 cf       	rjmp	.-24     	; 0x8f2 <ADC_READ+0x28>
			   break;
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
		       break;
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
			   break;
		case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
     90a:	3a 9a       	sbi	0x07, 2	; 7
			   break;
     90c:	f2 cf       	rjmp	.-28     	; 0x8f2 <ADC_READ+0x28>
		case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
     90e:	87 b1       	in	r24, 0x07	; 7
     910:	85 60       	ori	r24, 0x05	; 5
     912:	f9 cf       	rjmp	.-14     	; 0x906 <ADC_READ+0x3c>
			   break;
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
     914:	87 b1       	in	r24, 0x07	; 7
     916:	86 60       	ori	r24, 0x06	; 6
     918:	f6 cf       	rjmp	.-20     	; 0x906 <ADC_READ+0x3c>
			   break;
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
     91a:	87 b1       	in	r24, 0x07	; 7
     91c:	87 60       	ori	r24, 0x07	; 7
     91e:	f3 cf       	rjmp	.-26     	; 0x906 <ADC_READ+0x3c>
			   break;
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
     920:	87 b1       	in	r24, 0x07	; 7
     922:	80 7e       	andi	r24, 0xE0	; 224
     924:	f0 cf       	rjmp	.-32     	; 0x906 <ADC_READ+0x3c>

00000926 <ADC_GetVoltage>:
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
}
// Calculate the actual voltage from the ADC value
float ADC_GetVoltage(uint16_t adc_value) {
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	2c 97       	sbiw	r28, 0x0c	; 12
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
    // Calculate voltage at the ADC pin
    float v_adc = (adc_value / ADC_RESOLUTION) * VREF;
     93a:	bc 01       	movw	r22, r24
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <__floatunsisf>
     944:	69 87       	std	Y+9, r22	; 0x09
     946:	7a 87       	std	Y+10, r23	; 0x0a
     948:	8b 87       	std	Y+11, r24	; 0x0b
     94a:	9c 87       	std	Y+12, r25	; 0x0c
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 ec       	ldi	r19, 0xC0	; 192
     950:	4f e7       	ldi	r20, 0x7F	; 127
     952:	54 e4       	ldi	r21, 0x44	; 68
     954:	69 85       	ldd	r22, Y+9	; 0x09
     956:	7a 85       	ldd	r23, Y+10	; 0x0a
     958:	8b 85       	ldd	r24, Y+11	; 0x0b
     95a:	9c 85       	ldd	r25, Y+12	; 0x0c
     95c:	0e 94 19 26 	call	0x4c32	; 0x4c32 <__divsf3>
     960:	6d 83       	std	Y+5, r22	; 0x05
     962:	7e 83       	std	Y+6, r23	; 0x06
     964:	8f 83       	std	Y+7, r24	; 0x07
     966:	98 87       	std	Y+8, r25	; 0x08
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 ea       	ldi	r20, 0xA0	; 160
     96e:	50 e4       	ldi	r21, 0x40	; 64
     970:	6d 81       	ldd	r22, Y+5	; 0x05
     972:	7e 81       	ldd	r23, Y+6	; 0x06
     974:	8f 81       	ldd	r24, Y+7	; 0x07
     976:	98 85       	ldd	r25, Y+8	; 0x08
     978:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__mulsf3>
     97c:	69 83       	std	Y+1, r22	; 0x01
     97e:	7a 83       	std	Y+2, r23	; 0x02
     980:	8b 83       	std	Y+3, r24	; 0x03
     982:	9c 83       	std	Y+4, r25	; 0x04

    // Scale the voltage using the voltage divider ratio
    return v_adc ;
     984:	69 81       	ldd	r22, Y+1	; 0x01
     986:	7a 81       	ldd	r23, Y+2	; 0x02
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
}
     98c:	2c 96       	adiw	r28, 0x0c	; 12
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <subscribe>:
 *
 * @param func Pointer to the client's callback function.
 */
void subscribe(SubscriberFunc func) {
	/* if there is space in the subscribers array and the function pointer (func) is valid.*/
    if (subscriber_count < MAX_SUBSCRIBERS && func != NULL) {
     99e:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <subscriber_count>
     9a2:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <subscriber_count+0x1>
     9a6:	25 30       	cpi	r18, 0x05	; 5
     9a8:	31 05       	cpc	r19, r1
     9aa:	84 f4       	brge	.+32     	; 0x9cc <subscribe+0x2e>
     9ac:	00 97       	sbiw	r24, 0x00	; 0
     9ae:	71 f0       	breq	.+28     	; 0x9cc <subscribe+0x2e>
    	/* stores the function pointer in the array */
        subscribers[subscriber_count++] = func;
     9b0:	a9 01       	movw	r20, r18
     9b2:	4f 5f       	subi	r20, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	50 93 4f 01 	sts	0x014F, r21	; 0x80014f <subscriber_count+0x1>
     9ba:	40 93 4e 01 	sts	0x014E, r20	; 0x80014e <subscriber_count>
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	f9 01       	movw	r30, r18
     9c4:	e0 5b       	subi	r30, 0xB0	; 176
     9c6:	fe 4f       	sbci	r31, 0xFE	; 254
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	80 83       	st	Z, r24
    }
}
     9cc:	08 95       	ret

000009ce <notify>:

/**
 * @brief Notifies all subscribed clients by calling their callback functions.
 */
void notify(void) {
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	00 e5       	ldi	r16, 0x50	; 80
     9d8:	11 e0       	ldi	r17, 0x01	; 1
	/* Iterates through the subscribers array. */
    for (int i = 0; i < subscriber_count; i++) {
     9da:	d0 e0       	ldi	r29, 0x00	; 0
     9dc:	c0 e0       	ldi	r28, 0x00	; 0
     9de:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <subscriber_count>
     9e2:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <subscriber_count+0x1>
     9e6:	c8 17       	cp	r28, r24
     9e8:	d9 07       	cpc	r29, r25
     9ea:	2c f0       	brlt	.+10     	; 0x9f6 <notify+0x28>
    	/* If a valid function pointer is found, it calls the function.*/
        if (subscribers[i] != NULL) {
            subscribers[i]();
        }
    }
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret
 */
void notify(void) {
	/* Iterates through the subscribers array. */
    for (int i = 0; i < subscriber_count; i++) {
    	/* If a valid function pointer is found, it calls the function.*/
        if (subscribers[i] != NULL) {
     9f6:	d8 01       	movw	r26, r16
     9f8:	ed 91       	ld	r30, X+
     9fa:	fd 91       	ld	r31, X+
     9fc:	8d 01       	movw	r16, r26
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	09 f0       	breq	.+2      	; 0xa04 <notify+0x36>
            subscribers[i]();
     a02:	09 95       	icall
/**
 * @brief Notifies all subscribed clients by calling their callback functions.
 */
void notify(void) {
	/* Iterates through the subscribers array. */
    for (int i = 0; i < subscriber_count; i++) {
     a04:	21 96       	adiw	r28, 0x01	; 1
     a06:	eb cf       	rjmp	.-42     	; 0x9de <notify+0x10>

00000a08 <unsubscribe>:
 *
 * @param func Pointer to the client's callback function to be removed.
 */
void unsubscribe(SubscriberFunc func) {
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
     a08:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <subscriber_count>
     a0c:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <subscriber_count+0x1>
     a10:	e0 e5       	ldi	r30, 0x50	; 80
     a12:	f1 e0       	ldi	r31, 0x01	; 1
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	42 17       	cp	r20, r18
     a1a:	53 07       	cpc	r21, r19
     a1c:	0c f0       	brlt	.+2      	; 0xa20 <unsubscribe+0x18>
            }
            subscribers[--subscriber_count] = NULL;
            break;
        }
    }
}
     a1e:	08 95       	ret
 * @param func Pointer to the client's callback function to be removed.
 */
void unsubscribe(SubscriberFunc func) {
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
        if (subscribers[i] == func) {
     a20:	61 91       	ld	r22, Z+
     a22:	71 91       	ld	r23, Z+
     a24:	68 17       	cp	r22, r24
     a26:	79 07       	cpc	r23, r25
     a28:	e9 f4       	brne	.+58     	; 0xa64 <unsubscribe+0x5c>
     a2a:	fa 01       	movw	r30, r20
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	e0 5b       	subi	r30, 0xB0	; 176
     a32:	fe 4f       	sbci	r31, 0xFE	; 254
            // Remove the subscriber and shift others (remove the gaps of unsubscriber in the array)
            for (int j = i; j < subscriber_count - 1; j++) {
     a34:	c9 01       	movw	r24, r18
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	48 17       	cp	r20, r24
     a3a:	59 07       	cpc	r21, r25
     a3c:	64 f0       	brlt	.+24     	; 0xa56 <unsubscribe+0x4e>
                subscribers[j] = subscribers[j + 1];
            }
            subscribers[--subscriber_count] = NULL;
     a3e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <subscriber_count+0x1>
     a42:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <subscriber_count>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	fc 01       	movw	r30, r24
     a4c:	e0 5b       	subi	r30, 0xB0	; 176
     a4e:	fe 4f       	sbci	r31, 0xFE	; 254
     a50:	11 82       	std	Z+1, r1	; 0x01
     a52:	10 82       	st	Z, r1
            break;
     a54:	08 95       	ret
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
        if (subscribers[i] == func) {
            // Remove the subscriber and shift others (remove the gaps of unsubscriber in the array)
            for (int j = i; j < subscriber_count - 1; j++) {
                subscribers[j] = subscribers[j + 1];
     a56:	4f 5f       	subi	r20, 0xFF	; 255
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	22 81       	ldd	r18, Z+2	; 0x02
     a5c:	33 81       	ldd	r19, Z+3	; 0x03
     a5e:	21 93       	st	Z+, r18
     a60:	31 93       	st	Z+, r19
     a62:	ea cf       	rjmp	.-44     	; 0xa38 <unsubscribe+0x30>
 *
 * @param func Pointer to the client's callback function to be removed.
 */
void unsubscribe(SubscriberFunc func) {
	/* Loop on the unsubscriber function pointer (func) in the subscribers array.*/
    for (int i = 0; i < subscriber_count; i++) {
     a64:	4f 5f       	subi	r20, 0xFF	; 255
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	d7 cf       	rjmp	.-82     	; 0xa18 <unsubscribe+0x10>

00000a6a <updatePollCounter>:
		}
	}
}

void updatePollCounter(void) {
	pollCounter += 1; 
     a6a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <pollCounter>
     a6e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <pollCounter+0x1>
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <pollCounter+0x1>
     a78:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <pollCounter>
}
     a7c:	08 95       	ret

00000a7e <poll>:
uint16 static pollTimeCounter=0;

float cap_percentage = 0;


void poll(void) {
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	2c 97       	sbiw	r28, 0x0c	; 12
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
	UART_Init(9600);
     a9c:	80 e8       	ldi	r24, 0x80	; 128
     a9e:	95 e2       	ldi	r25, 0x25	; 37
     aa0:	0e 94 46 08 	call	0x108c	; 0x108c <UART_Init>
	updatePollCounter();
     aa4:	0e 94 35 05 	call	0xa6a	; 0xa6a <updatePollCounter>
	if ((pollCounter == pollTimeCounter)) {
     aa8:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <pollCounter>
     aac:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <pollCounter+0x1>
     ab0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <pollTimeCounter>
     ab4:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <pollTimeCounter+0x1>
     ab8:	28 17       	cp	r18, r24
     aba:	39 07       	cpc	r19, r25
     abc:	09 f0       	breq	.+2      	; 0xac0 <poll+0x42>
     abe:	76 c0       	rjmp	.+236    	; 0xbac <poll+0x12e>
		pollCounter=0;
     ac0:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <pollCounter+0x1>
     ac4:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <pollCounter>
				float adc_voltage = 0;


//
//				 Read the ADC value from channel 0 (ADC0)
				adc_value = ADC_READ(0);
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 65 04 	call	0x8ca	; 0x8ca <ADC_READ>
//				 Convert ADC value to voltage
				adc_voltage = ADC_GetVoltage(adc_value);
     ace:	0e 94 93 04 	call	0x926	; 0x926 <ADC_GetVoltage>
     ad2:	69 87       	std	Y+9, r22	; 0x09
     ad4:	7a 87       	std	Y+10, r23	; 0x0a
     ad6:	8b 87       	std	Y+11, r24	; 0x0b
     ad8:	9c 87       	std	Y+12, r25	; 0x0c
				cap_percentage = calculateChargePercentage(adc_voltage);
     ada:	69 85       	ldd	r22, Y+9	; 0x09
     adc:	7a 85       	ldd	r23, Y+10	; 0x0a
     ade:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ae2:	0e 94 14 06 	call	0xc28	; 0xc28 <calculateChargePercentage>
     ae6:	6d 83       	std	Y+5, r22	; 0x05
     ae8:	7e 83       	std	Y+6, r23	; 0x06
     aea:	8f 83       	std	Y+7, r24	; 0x07
     aec:	98 87       	std	Y+8, r25	; 0x08
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	af 81       	ldd	r26, Y+7	; 0x07
     af4:	b8 85       	ldd	r27, Y+8	; 0x08
     af6:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <cap_percentage>
     afa:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <cap_percentage+0x1>
     afe:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <cap_percentage+0x2>
     b02:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <cap_percentage+0x3>


				adc_connection_check = ADC_READ(VEHICLE_CONNECTION_CHECK_PIN);
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	0e 94 65 04 	call	0x8ca	; 0x8ca <ADC_READ>
     b0c:	6c 01       	movw	r12, r24

				adc_OC_Check_value = ADC_READ(VEHICLE_OVERCURRENT_CHECK_PIN);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	0e 94 65 04 	call	0x8ca	; 0x8ca <ADC_READ>

				if ((adc_OC_Check_value > OVERCURRENT_THRESHOLD)){
     b14:	4a 97       	sbiw	r24, 0x1a	; 26
     b16:	68 f0       	brcs	.+26     	; 0xb32 <poll+0xb4>
					xTaskNotifyGive(Overcurrent_TaskHandle);
     b18:	f1 2c       	mov	r15, r1
     b1a:	e1 2c       	mov	r14, r1
     b1c:	02 e0       	ldi	r16, 0x02	; 2
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	a9 01       	movw	r20, r18
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <Overcurrent_TaskHandle>
     b2a:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <Overcurrent_TaskHandle+0x1>
     b2e:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <xTaskGenericNotify>
				}

				if ((adc_connection_check < CONNECTION_THRESHOLD) && (is_connected == 0)){
     b32:	84 e8       	ldi	r24, 0x84	; 132
     b34:	c8 16       	cp	r12, r24
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	d8 06       	cpc	r13, r24
     b3a:	88 f4       	brcc	.+34     	; 0xb5e <poll+0xe0>
     b3c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <is_connected>
     b40:	81 11       	cpse	r24, r1
     b42:	0d c0       	rjmp	.+26     	; 0xb5e <poll+0xe0>
					xTaskNotifyGive(VehicleCheckTaskHandle);
     b44:	f1 2c       	mov	r15, r1
     b46:	e1 2c       	mov	r14, r1
     b48:	02 e0       	ldi	r16, 0x02	; 2
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	a9 01       	movw	r20, r18
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <VehicleCheckTaskHandle>
     b56:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <VehicleCheckTaskHandle+0x1>
     b5a:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <xTaskGenericNotify>
				// 	xTaskNotifyGive(SuddenDisconnect_TaskHandle);

				// }

				// Print results to virtual terminal
				UART_Print("Charge Percentage: ");
     b5e:	84 e2       	ldi	r24, 0x24	; 36
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <UART_Print>
				UART_PrintFloat(cap_percentage);
     b66:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cap_percentage>
     b6a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cap_percentage+0x1>
     b6e:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <cap_percentage+0x2>
     b72:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <cap_percentage+0x3>
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	9a 83       	std	Y+2, r25	; 0x02
     b7a:	ab 83       	std	Y+3, r26	; 0x03
     b7c:	bc 83       	std	Y+4, r27	; 0x04
     b7e:	69 81       	ldd	r22, Y+1	; 0x01
     b80:	7a 81       	ldd	r23, Y+2	; 0x02
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	0e 94 68 08 	call	0x10d0	; 0x10d0 <UART_PrintFloat>
				UART_Print("%\r\n");
     b8a:	88 e3       	ldi	r24, 0x38	; 56
     b8c:	91 e0       	ldi	r25, 0x01	; 1


		}
	}
}
     b8e:	2c 96       	adiw	r28, 0x0c	; 12
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
				// }

				// Print results to virtual terminal
				UART_Print("Charge Percentage: ");
				UART_PrintFloat(cap_percentage);
				UART_Print("%\r\n");
     ba8:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <UART_Print>


		}
	}
}
     bac:	2c 96       	adiw	r28, 0x0c	; 12
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	08 95       	ret

00000bc8 <poller_Init>:
void updatePollCounter(void) {
	pollCounter += 1; 
}

void poller_Init(void) {
	Timer_vidInitTimer1();
     bc8:	0e 94 5f 03 	call	0x6be	; 0x6be <Timer_vidInitTimer1>
	Timer_vidSetCallBackTimer1(poll);
     bcc:	8f e3       	ldi	r24, 0x3F	; 63
     bce:	95 e0       	ldi	r25, 0x05	; 5
     bd0:	0c 94 a0 03 	jmp	0x740	; 0x740 <Timer_vidSetCallBackTimer1>

00000bd4 <Poller__StartPolling>:
}

void Poller__StartPolling(void) {
	Timer_vidStartTimer1();
     bd4:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <Timer_vidStartTimer1>

00000bd8 <Poller__StopPolling>:
}

void Poller__StopPolling(void) {
	Timer_vidStopTimer1();
     bd8:	0c 94 8c 03 	jmp	0x718	; 0x718 <Timer_vidStopTimer1>

00000bdc <poller_SetPollTime>:
}


void poller_SetPollTime(uint32 time) {

	pollTimeCounter = time / time_ms;
     bdc:	24 e1       	ldi	r18, 0x14	; 20
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	0e 94 34 28 	call	0x5068	; 0x5068 <__udivmodsi4>
     be8:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <pollTimeCounter+0x1>
     bec:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <pollTimeCounter>

}
     bf0:	08 95       	ret

00000bf2 <Charge_Logic>:
#include "avr/interrupt.h"
#include <math.h>

void Charge_Logic(void) {
	// Enable an alternative functionality on PC1
	DDRC &= ~(1 << PC1);  // Set PC1 as output
     bf2:	a1 98       	cbi	0x14, 1	; 20
	PORTC &= ~(1 << PC1); // Turn on alternative indicator
     bf4:	a9 98       	cbi	0x15, 1	; 21
    // Set PC0 as output and drive it HIGH
    DDRC |= (1 << PC0);  // Set PC0 as output
     bf6:	a0 9a       	sbi	0x14, 0	; 20
    PORTC |= (1 << PC0); // Turn on charging
     bf8:	a8 9a       	sbi	0x15, 0	; 21
}
     bfa:	08 95       	ret

00000bfc <Stop_Charge_Logic>:

void Stop_Charge_Logic(void) {
    // Stop charging by clearing PC0
    PORTC &= ~(1 << PC0); // Turn off charging
     bfc:	a8 98       	cbi	0x15, 0	; 21
    DDRC &= ~(1 << PC0);  // Optionally, set PC0 as input (optional)
     bfe:	a0 98       	cbi	0x14, 0	; 20

    // Enable an alternative functionality on PC1
    DDRC |= (1 << PC1);  // Set PC1 as output
     c00:	a1 9a       	sbi	0x14, 1	; 20
    PORTC |= (1 << PC1); // Turn on alternative indicator
     c02:	a9 9a       	sbi	0x15, 1	; 21
}
     c04:	08 95       	ret

00000c06 <Button_Init>:



void Button_Init(void) {
    // Configure PD2 (INT0) and PD3 (INT1) as inputs
    DDRD &= ~((1 << PD2) | (1 << PD3)); // Set PD2 and PD3 as input
     c06:	81 b3       	in	r24, 0x11	; 17
     c08:	83 7f       	andi	r24, 0xF3	; 243
     c0a:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1 << PD2) | (1 << PD3);   // Enable internal pull-up resistors
     c0c:	82 b3       	in	r24, 0x12	; 18
     c0e:	8c 60       	ori	r24, 0x0C	; 12
     c10:	82 bb       	out	0x12, r24	; 18

    // Configure falling-edge interrupt for INT0 (PD2) and INT1 (PD3)
    MCUCR |= (1 << ISC01) | (1 << ISC11); // Falling edge triggers
     c12:	85 b7       	in	r24, 0x35	; 53
     c14:	8a 60       	ori	r24, 0x0A	; 10
     c16:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~((1 << ISC00) | (1 << ISC10)); // Ensure falling edge mode
     c18:	85 b7       	in	r24, 0x35	; 53
     c1a:	8a 7f       	andi	r24, 0xFA	; 250
     c1c:	85 bf       	out	0x35, r24	; 53

    // Enable INT0 and INT1
    GICR |= (1 << INT0) | (1 << INT1);
     c1e:	8b b7       	in	r24, 0x3b	; 59
     c20:	80 6c       	ori	r24, 0xC0	; 192
     c22:	8b bf       	out	0x3b, r24	; 59

    // Enable global interrupts
    sei();
     c24:	78 94       	sei
}
     c26:	08 95       	ret

00000c28 <calculateChargePercentage>:
/**
 * @brief Calculate the charge percentage based on the current voltage.
 * @param voltage The current voltage of the capacitor.
 * @return Charge percentage (0 to 100).
 */
float calculateChargePercentage(float voltage) {
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	60 97       	sbiw	r28, 0x10	; 16
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	6d 87       	std	Y+13, r22	; 0x0d
     c3e:	7e 87       	std	Y+14, r23	; 0x0e
     c40:	8f 87       	std	Y+15, r24	; 0x0f
     c42:	98 8b       	std	Y+16, r25	; 0x10
    if (voltage < MIN_VOLTAGE) {
     c44:	2e ea       	ldi	r18, 0xAE	; 174
     c46:	37 e4       	ldi	r19, 0x47	; 71
     c48:	41 e2       	ldi	r20, 0x21	; 33
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c4e:	7e 85       	ldd	r23, Y+14	; 0x0e
     c50:	8f 85       	ldd	r24, Y+15	; 0x0f
     c52:	98 89       	ldd	r25, Y+16	; 0x10
     c54:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__cmpsf2>
     c58:	87 fd       	sbrc	r24, 7
     c5a:	43 c0       	rjmp	.+134    	; 0xce2 <calculateChargePercentage+0xba>
        return 0.0; // Below minimum voltage
    } else if (voltage > MAX_VOLTAGE) {
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	48 e8       	ldi	r20, 0x88	; 136
     c62:	50 e4       	ldi	r21, 0x40	; 64
     c64:	6d 85       	ldd	r22, Y+13	; 0x0d
     c66:	7e 85       	ldd	r23, Y+14	; 0x0e
     c68:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6a:	98 89       	ldd	r25, Y+16	; 0x10
     c6c:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gesf2>
     c70:	18 16       	cp	r1, r24
     c72:	e4 f1       	brlt	.+120    	; 0xcec <calculateChargePercentage+0xc4>
        return 100.0; // Above maximum voltage
    }
    return ((voltage - MIN_VOLTAGE) / (MAX_VOLTAGE - MIN_VOLTAGE)) * 100.0;
     c74:	2e ea       	ldi	r18, 0xAE	; 174
     c76:	37 e4       	ldi	r19, 0x47	; 71
     c78:	41 e2       	ldi	r20, 0x21	; 33
     c7a:	5f e3       	ldi	r21, 0x3F	; 63
     c7c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c7e:	7e 85       	ldd	r23, Y+14	; 0x0e
     c80:	8f 85       	ldd	r24, Y+15	; 0x0f
     c82:	98 89       	ldd	r25, Y+16	; 0x10
     c84:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <__subsf3>
     c88:	69 87       	std	Y+9, r22	; 0x09
     c8a:	7a 87       	std	Y+10, r23	; 0x0a
     c8c:	8b 87       	std	Y+11, r24	; 0x0b
     c8e:	9c 87       	std	Y+12, r25	; 0x0c
     c90:	24 e1       	ldi	r18, 0x14	; 20
     c92:	3e ea       	ldi	r19, 0xAE	; 174
     c94:	47 e6       	ldi	r20, 0x67	; 103
     c96:	50 e4       	ldi	r21, 0x40	; 64
     c98:	69 85       	ldd	r22, Y+9	; 0x09
     c9a:	7a 85       	ldd	r23, Y+10	; 0x0a
     c9c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     ca0:	0e 94 19 26 	call	0x4c32	; 0x4c32 <__divsf3>
     ca4:	6d 83       	std	Y+5, r22	; 0x05
     ca6:	7e 83       	std	Y+6, r23	; 0x06
     ca8:	8f 83       	std	Y+7, r24	; 0x07
     caa:	98 87       	std	Y+8, r25	; 0x08
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	48 ec       	ldi	r20, 0xC8	; 200
     cb2:	52 e4       	ldi	r21, 0x42	; 66
     cb4:	6d 81       	ldd	r22, Y+5	; 0x05
     cb6:	7e 81       	ldd	r23, Y+6	; 0x06
     cb8:	8f 81       	ldd	r24, Y+7	; 0x07
     cba:	98 85       	ldd	r25, Y+8	; 0x08
     cbc:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__mulsf3>
     cc0:	69 83       	std	Y+1, r22	; 0x01
     cc2:	7a 83       	std	Y+2, r23	; 0x02
     cc4:	8b 83       	std	Y+3, r24	; 0x03
     cc6:	9c 83       	std	Y+4, r25	; 0x04
     cc8:	69 81       	ldd	r22, Y+1	; 0x01
     cca:	7a 81       	ldd	r23, Y+2	; 0x02
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
}
     cd0:	60 96       	adiw	r28, 0x10	; 16
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret
 * @param voltage The current voltage of the capacitor.
 * @return Charge percentage (0 to 100).
 */
float calculateChargePercentage(float voltage) {
    if (voltage < MIN_VOLTAGE) {
        return 0.0; // Below minimum voltage
     ce2:	19 82       	std	Y+1, r1	; 0x01
     ce4:	1a 82       	std	Y+2, r1	; 0x02
     ce6:	1b 82       	std	Y+3, r1	; 0x03
     ce8:	1c 82       	std	Y+4, r1	; 0x04
     cea:	ee cf       	rjmp	.-36     	; 0xcc8 <calculateChargePercentage+0xa0>
    } else if (voltage > MAX_VOLTAGE) {
        return 100.0; // Above maximum voltage
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	a8 ec       	ldi	r26, 0xC8	; 200
     cf2:	b2 e4       	ldi	r27, 0x42	; 66
     cf4:	89 83       	std	Y+1, r24	; 0x01
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	ab 83       	std	Y+3, r26	; 0x03
     cfa:	bc 83       	std	Y+4, r27	; 0x04
     cfc:	e5 cf       	rjmp	.-54     	; 0xcc8 <calculateChargePercentage+0xa0>

00000cfe <calculateTimeRemaining>:
 * @param targetVoltage The target voltage to reach.
 * @param chargingCurrent The current used for charging (in amps).
 * @param capacitorValue The capacitance value of the capacitor (in farads).
 * @return Time remaining for charging (in seconds).
 */
float calculateTimeRemaining(float currentVoltage, float targetVoltage, float chargingCurrent, float capacitorValue) {
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	ac 97       	sbiw	r28, 0x2c	; 44
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	6d 8f       	std	Y+29, r22	; 0x1d
     d24:	7e 8f       	std	Y+30, r23	; 0x1e
     d26:	8f 8f       	std	Y+31, r24	; 0x1f
     d28:	98 a3       	std	Y+32, r25	; 0x20
     d2a:	29 a3       	std	Y+33, r18	; 0x21
     d2c:	3a a3       	std	Y+34, r19	; 0x22
     d2e:	4b a3       	std	Y+35, r20	; 0x23
     d30:	5c a3       	std	Y+36, r21	; 0x24
     d32:	ed a2       	std	Y+37, r14	; 0x25
     d34:	fe a2       	std	Y+38, r15	; 0x26
     d36:	0f a3       	std	Y+39, r16	; 0x27
     d38:	18 a7       	std	Y+40, r17	; 0x28
     d3a:	a9 a6       	std	Y+41, r10	; 0x29
     d3c:	ba a6       	std	Y+42, r11	; 0x2a
     d3e:	cb a6       	std	Y+43, r12	; 0x2b
     d40:	dc a6       	std	Y+44, r13	; 0x2c
    if (currentVoltage >= targetVoltage || chargingCurrent <= 0 || capacitorValue <= 0) {
     d42:	29 a1       	ldd	r18, Y+33	; 0x21
     d44:	3a a1       	ldd	r19, Y+34	; 0x22
     d46:	4b a1       	ldd	r20, Y+35	; 0x23
     d48:	5c a1       	ldd	r21, Y+36	; 0x24
     d4a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d4c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     d4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d50:	98 a1       	ldd	r25, Y+32	; 0x20
     d52:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gesf2>
     d56:	87 ff       	sbrs	r24, 7
     d58:	86 c0       	rjmp	.+268    	; 0xe66 <calculateTimeRemaining+0x168>
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	a9 01       	movw	r20, r18
     d60:	6d a1       	ldd	r22, Y+37	; 0x25
     d62:	7e a1       	ldd	r23, Y+38	; 0x26
     d64:	8f a1       	ldd	r24, Y+39	; 0x27
     d66:	98 a5       	ldd	r25, Y+40	; 0x28
     d68:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__cmpsf2>
     d6c:	18 16       	cp	r1, r24
     d6e:	0c f0       	brlt	.+2      	; 0xd72 <calculateTimeRemaining+0x74>
     d70:	7a c0       	rjmp	.+244    	; 0xe66 <calculateTimeRemaining+0x168>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	a9 01       	movw	r20, r18
     d78:	69 a5       	ldd	r22, Y+41	; 0x29
     d7a:	7a a5       	ldd	r23, Y+42	; 0x2a
     d7c:	8b a5       	ldd	r24, Y+43	; 0x2b
     d7e:	9c a5       	ldd	r25, Y+44	; 0x2c
     d80:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__cmpsf2>
     d84:	18 16       	cp	r1, r24
     d86:	0c f0       	brlt	.+2      	; 0xd8a <calculateTimeRemaining+0x8c>
     d88:	6e c0       	rjmp	.+220    	; 0xe66 <calculateTimeRemaining+0x168>
        return 0.0; // No time remaining if already charged or invalid input
    }

    // Calculate equivalent resistance (Ohm's law)
    float resistance = MAX_VOLTAGE / chargingCurrent;
     d8a:	2d a1       	ldd	r18, Y+37	; 0x25
     d8c:	3e a1       	ldd	r19, Y+38	; 0x26
     d8e:	4f a1       	ldd	r20, Y+39	; 0x27
     d90:	58 a5       	ldd	r21, Y+40	; 0x28
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	88 e8       	ldi	r24, 0x88	; 136
     d98:	90 e4       	ldi	r25, 0x40	; 64
     d9a:	0e 94 19 26 	call	0x4c32	; 0x4c32 <__divsf3>
     d9e:	69 83       	std	Y+1, r22	; 0x01
     da0:	7a 83       	std	Y+2, r23	; 0x02
     da2:	8b 83       	std	Y+3, r24	; 0x03
     da4:	9c 83       	std	Y+4, r25	; 0x04

    // Calculate the remaining time for charging
    float timeRemaining = -resistance * capacitorValue * log(1.0 - (targetVoltage / MAX_VOLTAGE));
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	ab 81       	ldd	r26, Y+3	; 0x03
     dac:	bc 81       	ldd	r27, Y+4	; 0x04
     dae:	b0 58       	subi	r27, 0x80	; 128
     db0:	89 8f       	std	Y+25, r24	; 0x19
     db2:	9a 8f       	std	Y+26, r25	; 0x1a
     db4:	ab 8f       	std	Y+27, r26	; 0x1b
     db6:	bc 8f       	std	Y+28, r27	; 0x1c
     db8:	29 a5       	ldd	r18, Y+41	; 0x29
     dba:	3a a5       	ldd	r19, Y+42	; 0x2a
     dbc:	4b a5       	ldd	r20, Y+43	; 0x2b
     dbe:	5c a5       	ldd	r21, Y+44	; 0x2c
     dc0:	69 8d       	ldd	r22, Y+25	; 0x19
     dc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc8:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__mulsf3>
     dcc:	6d 8b       	std	Y+21, r22	; 0x15
     dce:	7e 8b       	std	Y+22, r23	; 0x16
     dd0:	8f 8b       	std	Y+23, r24	; 0x17
     dd2:	98 8f       	std	Y+24, r25	; 0x18
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	48 e8       	ldi	r20, 0x88	; 136
     dda:	50 e4       	ldi	r21, 0x40	; 64
     ddc:	69 a1       	ldd	r22, Y+33	; 0x21
     dde:	7a a1       	ldd	r23, Y+34	; 0x22
     de0:	8b a1       	ldd	r24, Y+35	; 0x23
     de2:	9c a1       	ldd	r25, Y+36	; 0x24
     de4:	0e 94 19 26 	call	0x4c32	; 0x4c32 <__divsf3>
     de8:	69 8b       	std	Y+17, r22	; 0x11
     dea:	7a 8b       	std	Y+18, r23	; 0x12
     dec:	8b 8b       	std	Y+19, r24	; 0x13
     dee:	9c 8b       	std	Y+20, r25	; 0x14
     df0:	29 89       	ldd	r18, Y+17	; 0x11
     df2:	3a 89       	ldd	r19, Y+18	; 0x12
     df4:	4b 89       	ldd	r20, Y+19	; 0x13
     df6:	5c 89       	ldd	r21, Y+20	; 0x14
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e8       	ldi	r24, 0x80	; 128
     dfe:	9f e3       	ldi	r25, 0x3F	; 63
     e00:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <__subsf3>
     e04:	6d 87       	std	Y+13, r22	; 0x0d
     e06:	7e 87       	std	Y+14, r23	; 0x0e
     e08:	8f 87       	std	Y+15, r24	; 0x0f
     e0a:	98 8b       	std	Y+16, r25	; 0x10
     e0c:	6d 85       	ldd	r22, Y+13	; 0x0d
     e0e:	7e 85       	ldd	r23, Y+14	; 0x0e
     e10:	8f 85       	ldd	r24, Y+15	; 0x0f
     e12:	98 89       	ldd	r25, Y+16	; 0x10
     e14:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <log>
     e18:	69 87       	std	Y+9, r22	; 0x09
     e1a:	7a 87       	std	Y+10, r23	; 0x0a
     e1c:	8b 87       	std	Y+11, r24	; 0x0b
     e1e:	9c 87       	std	Y+12, r25	; 0x0c
     e20:	29 85       	ldd	r18, Y+9	; 0x09
     e22:	3a 85       	ldd	r19, Y+10	; 0x0a
     e24:	4b 85       	ldd	r20, Y+11	; 0x0b
     e26:	5c 85       	ldd	r21, Y+12	; 0x0c
     e28:	6d 89       	ldd	r22, Y+21	; 0x15
     e2a:	7e 89       	ldd	r23, Y+22	; 0x16
     e2c:	8f 89       	ldd	r24, Y+23	; 0x17
     e2e:	98 8d       	ldd	r25, Y+24	; 0x18
     e30:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__mulsf3>
     e34:	6d 83       	std	Y+5, r22	; 0x05
     e36:	7e 83       	std	Y+6, r23	; 0x06
     e38:	8f 83       	std	Y+7, r24	; 0x07
     e3a:	98 87       	std	Y+8, r25	; 0x08
     e3c:	6d 81       	ldd	r22, Y+5	; 0x05
     e3e:	7e 81       	ldd	r23, Y+6	; 0x06
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	98 85       	ldd	r25, Y+8	; 0x08

    return timeRemaining; // Time in seconds
}
     e44:	ac 96       	adiw	r28, 0x2c	; 44
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	bf 90       	pop	r11
     e62:	af 90       	pop	r10
     e64:	08 95       	ret
 * @param capacitorValue The capacitance value of the capacitor (in farads).
 * @return Time remaining for charging (in seconds).
 */
float calculateTimeRemaining(float currentVoltage, float targetVoltage, float chargingCurrent, float capacitorValue) {
    if (currentVoltage >= targetVoltage || chargingCurrent <= 0 || capacitorValue <= 0) {
        return 0.0; // No time remaining if already charged or invalid input
     e66:	1d 82       	std	Y+5, r1	; 0x05
     e68:	1e 82       	std	Y+6, r1	; 0x06
     e6a:	1f 82       	std	Y+7, r1	; 0x07
     e6c:	18 86       	std	Y+8, r1	; 0x08
     e6e:	e6 cf       	rjmp	.-52     	; 0xe3c <calculateTimeRemaining+0x13e>

00000e70 <LCD_Command>:

// Pin definitions
#define RS 0  // RS pin connected to Pin 0 of lcdControlProxy
#define EN 1  // EN pin connected to Pin 1 of lcdControlProxy

void LCD_Command(unsigned char cmnd) {
     e70:	cf 93       	push	r28
     e72:	c8 2f       	mov	r28, r24
    // Send upper nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (cmnd & 0xF0));
     e74:	86 e8       	ldi	r24, 0x86	; 134
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 b7 03 	call	0x76e	; 0x76e <Proxy_ReadPort>
     e7c:	8f 70       	andi	r24, 0x0F	; 15
     e7e:	6c 2f       	mov	r22, r28
     e80:	60 7f       	andi	r22, 0xF0	; 240
     e82:	68 2b       	or	r22, r24
     e84:	86 e8       	ldi	r24, 0x86	; 134
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 b1 03 	call	0x762	; 0x762 <Proxy_WritePort>
    Proxy_ClearPin(&lcdControlProxy, RS); // RS=0, command register
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	82 e8       	ldi	r24, 0x82	; 130
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 cb 03 	call	0x796	; 0x796 <Proxy_ClearPin>
    Proxy_SetPin(&lcdControlProxy, EN);  // Enable pulse
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	82 e8       	ldi	r24, 0x82	; 130
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 bd 03 	call	0x77a	; 0x77a <Proxy_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ea0:	8f ec       	ldi	r24, 0xCF	; 207
     ea2:	97 e0       	ldi	r25, 0x07	; 7
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <LCD_Command+0x34>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <LCD_Command+0x3a>
     eaa:	00 00       	nop
    _delay_ms(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	82 e8       	ldi	r24, 0x82	; 130
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 cb 03 	call	0x796	; 0x796 <Proxy_ClearPin>
//    _delay_us(200);

    // Send lower nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (cmnd << 4));
     eb6:	86 e8       	ldi	r24, 0x86	; 134
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 b7 03 	call	0x76e	; 0x76e <Proxy_ReadPort>
     ebe:	8f 70       	andi	r24, 0x0F	; 15
     ec0:	90 e1       	ldi	r25, 0x10	; 16
     ec2:	c9 9f       	mul	r28, r25
     ec4:	b0 01       	movw	r22, r0
     ec6:	11 24       	eor	r1, r1
     ec8:	68 2b       	or	r22, r24
     eca:	86 e8       	ldi	r24, 0x86	; 134
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 b1 03 	call	0x762	; 0x762 <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, EN);
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	82 e8       	ldi	r24, 0x82	; 130
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 bd 03 	call	0x77a	; 0x77a <Proxy_SetPin>
     edc:	8f ec       	ldi	r24, 0xCF	; 207
     ede:	97 e0       	ldi	r25, 0x07	; 7
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <LCD_Command+0x70>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <LCD_Command+0x76>
     ee6:	00 00       	nop
    _delay_ms(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	82 e8       	ldi	r24, 0x82	; 130
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 cb 03 	call	0x796	; 0x796 <Proxy_ClearPin>
     ef2:	8f e9       	ldi	r24, 0x9F	; 159
     ef4:	9f e0       	ldi	r25, 0x0F	; 15
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <LCD_Command+0x86>
     efa:	00 c0       	rjmp	.+0      	; 0xefc <LCD_Command+0x8c>
     efc:	00 00       	nop
    _delay_ms(2);
}
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <LCD_Char>:

void LCD_Char(unsigned char data) {
     f02:	cf 93       	push	r28
     f04:	c8 2f       	mov	r28, r24
    // Send upper nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (data & 0xF0));
     f06:	86 e8       	ldi	r24, 0x86	; 134
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 b7 03 	call	0x76e	; 0x76e <Proxy_ReadPort>
     f0e:	8f 70       	andi	r24, 0x0F	; 15
     f10:	6c 2f       	mov	r22, r28
     f12:	60 7f       	andi	r22, 0xF0	; 240
     f14:	68 2b       	or	r22, r24
     f16:	86 e8       	ldi	r24, 0x86	; 134
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 b1 03 	call	0x762	; 0x762 <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, RS);  // RS=1, data register
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	82 e8       	ldi	r24, 0x82	; 130
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 bd 03 	call	0x77a	; 0x77a <Proxy_SetPin>
    Proxy_SetPin(&lcdControlProxy, EN); // Enable pulse
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	82 e8       	ldi	r24, 0x82	; 130
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 bd 03 	call	0x77a	; 0x77a <Proxy_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	8a 95       	dec	r24
     f36:	f1 f7       	brne	.-4      	; 0xf34 <LCD_Char+0x32>
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <LCD_Char+0x38>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	82 e8       	ldi	r24, 0x82	; 130
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 cb 03 	call	0x796	; 0x796 <Proxy_ClearPin>
//    _delay_us(200);

    // Send lower nibble
    Proxy_WritePort(&lcdDataProxy, (Proxy_ReadPort(&lcdDataProxy) & 0x0F) | (data << 4));
     f44:	86 e8       	ldi	r24, 0x86	; 134
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 b7 03 	call	0x76e	; 0x76e <Proxy_ReadPort>
     f4c:	8f 70       	andi	r24, 0x0F	; 15
     f4e:	90 e1       	ldi	r25, 0x10	; 16
     f50:	c9 9f       	mul	r28, r25
     f52:	b0 01       	movw	r22, r0
     f54:	11 24       	eor	r1, r1
     f56:	68 2b       	or	r22, r24
     f58:	86 e8       	ldi	r24, 0x86	; 134
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 b1 03 	call	0x762	; 0x762 <Proxy_WritePort>
    Proxy_SetPin(&lcdControlProxy, EN);
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	82 e8       	ldi	r24, 0x82	; 130
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 bd 03 	call	0x77a	; 0x77a <Proxy_SetPin>
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	8a 95       	dec	r24
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <LCD_Char+0x6a>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <LCD_Char+0x70>
    _delay_us(1);
    Proxy_ClearPin(&lcdControlProxy, EN);
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	82 e8       	ldi	r24, 0x82	; 130
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 cb 03 	call	0x796	; 0x796 <Proxy_ClearPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f7c:	8f e9       	ldi	r24, 0x9F	; 159
     f7e:	9f e0       	ldi	r25, 0x0F	; 15
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <LCD_Char+0x7e>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <LCD_Char+0x84>
     f86:	00 00       	nop
    _delay_ms(2);
}
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <LCD_Init>:

void LCD_Init(void) {
    // Set LCD port direction (D4-D7 as output, RS and EN as output)
    Proxy_SetPortDirection(&lcdDataProxy, 0xF0); // Data pins D4-D7 (upper nibble)
     f8c:	60 ef       	ldi	r22, 0xF0	; 240
     f8e:	86 e8       	ldi	r24, 0x86	; 134
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 ac 03 	call	0x758	; 0x758 <Proxy_SetPortDirection>
    Proxy_SetPortDirection(&lcdControlProxy, (1 << RS) | (1 << EN)); // RS and EN pins
     f96:	63 e0       	ldi	r22, 0x03	; 3
     f98:	82 e8       	ldi	r24, 0x82	; 130
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 ac 03 	call	0x758	; 0x758 <Proxy_SetPortDirection>
     fa0:	8f e3       	ldi	r24, 0x3F	; 63
     fa2:	9c e9       	ldi	r25, 0x9C	; 156
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <LCD_Init+0x18>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <LCD_Init+0x1e>
     faa:	00 00       	nop

    _delay_ms(20); // LCD Power ON delay always >15ms

    LCD_Command(0x02); // Initialize LCD in 4-bit mode
     fac:	82 e0       	ldi	r24, 0x02	; 2
     fae:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
    LCD_Command(0x28); // 2 lines, 5x7 matrix in 4-bit mode
     fb2:	88 e2       	ldi	r24, 0x28	; 40
     fb4:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
    LCD_Command(0x0C); // Display ON, cursor OFF
     fb8:	8c e0       	ldi	r24, 0x0C	; 12
     fba:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
    LCD_Command(0x06); // Increment cursor (shift cursor to right)
     fbe:	86 e0       	ldi	r24, 0x06	; 6
     fc0:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
    LCD_Command(0x01); // Clear display
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
     fca:	8f e9       	ldi	r24, 0x9F	; 159
     fcc:	9f e0       	ldi	r25, 0x0F	; 15
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <LCD_Init+0x42>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <LCD_Init+0x48>
     fd4:	00 00       	nop
    _delay_ms(2);
}
     fd6:	08 95       	ret

00000fd8 <LCD_String>:

void LCD_String(char *str) {
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
    while (*str) {
     fde:	89 91       	ld	r24, Y+
     fe0:	81 11       	cpse	r24, r1
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <LCD_String+0x12>
        LCD_Char(*str++);
    }
}
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret
    _delay_ms(2);
}

void LCD_String(char *str) {
    while (*str) {
        LCD_Char(*str++);
     fea:	0e 94 81 07 	call	0xf02	; 0xf02 <LCD_Char>
     fee:	f7 cf       	rjmp	.-18     	; 0xfde <LCD_String+0x6>

00000ff0 <LCD_String_xy>:
    }
}

void LCD_String_xy(char row, char pos, char *str) {
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	ea 01       	movw	r28, r20
    if (row == 0 && pos < 16)
     ff6:	81 11       	cpse	r24, r1
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <LCD_String_xy+0x1c>
        LCD_Command((pos & 0x0F) | 0x80); // First row position
     ffa:	86 2f       	mov	r24, r22
     ffc:	80 68       	ori	r24, 0x80	; 128
        LCD_Char(*str++);
    }
}

void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
     ffe:	60 31       	cpi	r22, 0x10	; 16
    1000:	58 f0       	brcs	.+22     	; 0x1018 <LCD_String_xy+0x28>
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    LCD_String(str);
    1002:	ce 01       	movw	r24, r28
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    LCD_String(str);
    1008:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <LCD_String>
}

void LCD_String_xy(char row, char pos, char *str) {
    if (row == 0 && pos < 16)
        LCD_Command((pos & 0x0F) | 0x80); // First row position
    else if (row == 1 && pos < 16)
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	c9 f7       	brne	.-14     	; 0x1002 <LCD_String_xy+0x12>
    1010:	60 31       	cpi	r22, 0x10	; 16
    1012:	b8 f7       	brcc	.-18     	; 0x1002 <LCD_String_xy+0x12>
        LCD_Command((pos & 0x0F) | 0xC0); // Second row position
    1014:	86 2f       	mov	r24, r22
    1016:	80 6c       	ori	r24, 0xC0	; 192
    1018:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
    101c:	f2 cf       	rjmp	.-28     	; 0x1002 <LCD_String_xy+0x12>

0000101e <LCD_Clear>:
    LCD_String(str);
}

void LCD_Clear(void) {
    LCD_Command(0x01); // Clear display
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	0e 94 38 07 	call	0xe70	; 0xe70 <LCD_Command>
    1024:	8f e9       	ldi	r24, 0x9F	; 159
    1026:	9f e0       	ldi	r25, 0x0F	; 15
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <LCD_Clear+0xa>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <LCD_Clear+0x10>
    102e:	00 00       	nop
    _delay_ms(2);
    LCD_Command(0x80); // Cursor at home position
    1030:	80 e8       	ldi	r24, 0x80	; 128
    1032:	0c 94 38 07 	jmp	0xe70	; 0xe70 <LCD_Command>

00001036 <LCD_Float>:
}

void LCD_Float(float value) {
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	2e 97       	sbiw	r28, 0x0e	; 14
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	6b 87       	std	Y+11, r22	; 0x0b
    1050:	7c 87       	std	Y+12, r23	; 0x0c
    1052:	8d 87       	std	Y+13, r24	; 0x0d
    1054:	9e 87       	std	Y+14, r25	; 0x0e
	char buffer[10];
	dtostrf(value, 4, 2, buffer);  // Convert float to string with 2 decimal places
    1056:	6b 85       	ldd	r22, Y+11	; 0x0b
    1058:	7c 85       	ldd	r23, Y+12	; 0x0c
    105a:	8d 85       	ldd	r24, Y+13	; 0x0d
    105c:	9e 85       	ldd	r25, Y+14	; 0x0e
    105e:	8e 01       	movw	r16, r28
    1060:	0f 5f       	subi	r16, 0xFF	; 255
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	22 e0       	ldi	r18, 0x02	; 2
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	44 e0       	ldi	r20, 0x04	; 4
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <dtostrf>
	LCD_String(buffer);  // Display the string on the LCD
    1070:	c8 01       	movw	r24, r16
    1072:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <LCD_String>
}
    1076:	2e 96       	adiw	r28, 0x0e	; 14
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <UART_Init>:
#include "avr/io.h"
#include <stdio.h>

#define F_CPU 8000000 
void UART_Init(unsigned int baud) {
	unsigned int ubrr = (F_CPU / 16 / baud) - 1;
    108c:	9c 01       	movw	r18, r24
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	40 e0       	ldi	r20, 0x00	; 0
    1092:	60 e2       	ldi	r22, 0x20	; 32
    1094:	71 ea       	ldi	r23, 0xA1	; 161
    1096:	87 e0       	ldi	r24, 0x07	; 7
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 56 28 	call	0x50ac	; 0x50ac <__divmodsi4>
    109e:	21 50       	subi	r18, 0x01	; 1
    10a0:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(ubrr >> 8);  // Set high byte of baud rate
    10a2:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)ubrr;        // Set low byte of baud rate
    10a4:	29 b9       	out	0x09, r18	; 9
	UCSRB = (1 << TXEN);                // Enable transmitter
    10a6:	88 e0       	ldi	r24, 0x08	; 8
    10a8:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0); // 8-bit data, 1 stop bit
    10aa:	86 e8       	ldi	r24, 0x86	; 134
    10ac:	80 bd       	out	0x20, r24	; 32
}
    10ae:	08 95       	ret

000010b0 <UART_Transmit>:

// Function to send a character via UART
void UART_Transmit(char data) {
	while (!(UCSRA & (1 << UDRE)));  // Wait for the buffer to be empty
    10b0:	5d 9b       	sbis	0x0b, 5	; 11
    10b2:	fe cf       	rjmp	.-4      	; 0x10b0 <UART_Transmit>
	UDR = data;                     // Send the character
    10b4:	8c b9       	out	0x0c, r24	; 12
}
    10b6:	08 95       	ret

000010b8 <UART_Print>:



void UART_Print(const char *str) {
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	ec 01       	movw	r28, r24
    while (*str) {
    10be:	89 91       	ld	r24, Y+
    10c0:	81 11       	cpse	r24, r1
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <UART_Print+0x12>
        UART_Transmit(*str++);
    }
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret



void UART_Print(const char *str) {
    while (*str) {
        UART_Transmit(*str++);
    10ca:	0e 94 58 08 	call	0x10b0	; 0x10b0 <UART_Transmit>
    10ce:	f7 cf       	rjmp	.-18     	; 0x10be <UART_Print+0x6>

000010d0 <UART_PrintFloat>:
    }
}


// UART Print Float Using dtostrf
void UART_PrintFloat(float value) {
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	64 97       	sbiw	r28, 0x14	; 20
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	69 8b       	std	Y+17, r22	; 0x11
    10ea:	7a 8b       	std	Y+18, r23	; 0x12
    10ec:	8b 8b       	std	Y+19, r24	; 0x13
    10ee:	9c 8b       	std	Y+20, r25	; 0x14
    char buffer[16];
    dtostrf(value, 6, 2, buffer); // Convert float to string (width: 6, precision: 2)
    10f0:	69 89       	ldd	r22, Y+17	; 0x11
    10f2:	7a 89       	ldd	r23, Y+18	; 0x12
    10f4:	8b 89       	ldd	r24, Y+19	; 0x13
    10f6:	9c 89       	ldd	r25, Y+20	; 0x14
    10f8:	8e 01       	movw	r16, r28
    10fa:	0f 5f       	subi	r16, 0xFF	; 255
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	22 e0       	ldi	r18, 0x02	; 2
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	46 e0       	ldi	r20, 0x06	; 6
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <dtostrf>
    UART_Print(buffer);
    110a:	c8 01       	movw	r24, r16
    110c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <UART_Print>
}
    1110:	64 96       	adiw	r28, 0x14	; 20
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	08 95       	ret

00001126 <xCoRoutineCreate>:
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode,
                                 UBaseType_t uxPriority,
                                 UBaseType_t uxIndex )
    {
    1126:	cf 92       	push	r12
    1128:	df 92       	push	r13
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	6c 01       	movw	r12, r24
    1136:	16 2f       	mov	r17, r22
    1138:	f4 2e       	mov	r15, r20

        /* Allocate the memory that will store the co-routine control block. */
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
    113a:	8a e1       	ldi	r24, 0x1A	; 26
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <pvPortMalloc>
    1142:	ec 01       	movw	r28, r24

            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1144:	8f ef       	ldi	r24, 0xFF	; 255
        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );

        if( pxCoRoutine )
    1146:	20 97       	sbiw	r28, 0x00	; 0
    1148:	09 f4       	brne	.+2      	; 0x114c <xCoRoutineCreate+0x26>
    114a:	56 c0       	rjmp	.+172    	; 0x11f8 <xCoRoutineCreate+0xd2>
        {
            /* If pxCurrentCoRoutine is NULL then this is the first co-routine to
            * be created and the co-routine data structures need initialising. */
            if( pxCurrentCoRoutine == NULL )
    114c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    1150:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    1154:	89 2b       	or	r24, r25
    1156:	21 f5       	brne	.+72     	; 0x11a0 <xCoRoutineCreate+0x7a>
            {
                pxCurrentCoRoutine = pxCoRoutine;
    1158:	d0 93 6a 01 	sts	0x016A, r29	; 0x80016a <pxCurrentCoRoutine+0x1>
    115c:	c0 93 69 01 	sts	0x0169, r28	; 0x800169 <pxCurrentCoRoutine>
    {
        UBaseType_t uxPriority;

        for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
        {
            vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    1160:	8a e8       	ldi	r24, 0x8A	; 138
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    1168:	83 e9       	ldi	r24, 0x93	; 147
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
        }

        vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
    1170:	81 e8       	ldi	r24, 0x81	; 129
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
        vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    1178:	88 e7       	ldi	r24, 0x78	; 120
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
        vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    1180:	8b e6       	ldi	r24, 0x6B	; 107
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>

        /* Start with pxDelayedCoRoutineList using list1 and the
         * pxOverflowDelayedCoRoutineList using list2. */
        pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1188:	81 e8       	ldi	r24, 0x81	; 129
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <pxDelayedCoRoutineList+0x1>
    1190:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1194:	88 e7       	ldi	r24, 0x78	; 120
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
    119c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <pxOverflowDelayedCoRoutineList>
    11a0:	11 11       	cpse	r17, r1
    11a2:	11 e0       	ldi	r17, 0x01	; 1
            {
                uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
            }

            /* Fill out the co-routine control block from the function parameters. */
            pxCoRoutine->uxState = corINITIAL_STATE;
    11a4:	19 8e       	std	Y+25, r1	; 0x19
    11a6:	18 8e       	std	Y+24, r1	; 0x18
            pxCoRoutine->uxPriority = uxPriority;
    11a8:	1e 8b       	std	Y+22, r17	; 0x16
            pxCoRoutine->uxIndex = uxIndex;
    11aa:	ff 8a       	std	Y+23, r15	; 0x17
            pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    11ac:	fe 01       	movw	r30, r28
    11ae:	c1 92       	st	Z+, r12
    11b0:	d1 92       	st	Z+, r13
    11b2:	7f 01       	movw	r14, r30

            /* Initialise all the other co-routine control block parameters. */
            vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    11b4:	cf 01       	movw	r24, r30
    11b6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
            vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    11ba:	ce 01       	movw	r24, r28
    11bc:	0c 96       	adiw	r24, 0x0c	; 12
    11be:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>

            /* Set the co-routine control block as a link back from the ListItem_t.
             * This is so we can get back to the containing CRCB from a generic item
             * in a list. */
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    11c2:	d9 87       	std	Y+9, r29	; 0x09
    11c4:	c8 87       	std	Y+8, r28	; 0x08
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    11c6:	db 8b       	std	Y+19, r29	; 0x13
    11c8:	ca 8b       	std	Y+18, r28	; 0x12

            /* Event lists are always in priority order. */
            listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	81 1b       	sub	r24, r17
    11d0:	91 09       	sbc	r25, r1
    11d2:	9d 87       	std	Y+13, r25	; 0x0d
    11d4:	8c 87       	std	Y+12, r24	; 0x0c

            /* Now the co-routine has been initialised it can be added to the ready
             * list at the correct priority. */
            prvAddCoRoutineToReadyQueue( pxCoRoutine );
    11d6:	8e 89       	ldd	r24, Y+22	; 0x16
    11d8:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <uxTopCoRoutineReadyPriority>
    11dc:	98 17       	cp	r25, r24
    11de:	10 f4       	brcc	.+4      	; 0x11e4 <xCoRoutineCreate+0xbe>
    11e0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
    11e4:	f9 e0       	ldi	r31, 0x09	; 9
    11e6:	8f 9f       	mul	r24, r31
    11e8:	c0 01       	movw	r24, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	b7 01       	movw	r22, r14
    11ee:	86 57       	subi	r24, 0x76	; 118
    11f0:	9e 4f       	sbci	r25, 0xFE	; 254
    11f2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>

            xReturn = pdPASS;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xCoRoutineCreate( xReturn );

        return xReturn;
    }
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	08 95       	ret

00001208 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

    void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay,
                                     List_t * pxEventList )
    {
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	8b 01       	movw	r16, r22

        traceENTER_vCoRoutineAddToDelayedList( xTicksToDelay, pxEventList );

        /* Calculate the time to wake - this may overflow but this is
         * not a problem. */
        xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    1212:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <xCoRoutineTickCount>
    1216:	d0 91 67 01 	lds	r29, 0x0167	; 0x800167 <xCoRoutineTickCount+0x1>
    121a:	c8 0f       	add	r28, r24
    121c:	d9 1f       	adc	r29, r25

        /* We must remove ourselves from the ready list before adding
         * ourselves to the blocked list as the same list item is used for
         * both lists. */
        ( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    121e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    1222:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    1226:	02 96       	adiw	r24, 0x02	; 2
    1228:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    122c:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    1230:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    1234:	fb 01       	movw	r30, r22
    1236:	d3 83       	std	Z+3, r29	; 0x03
    1238:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xCoRoutineTickCount )
    123a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <xCoRoutineTickCount>
    123e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <xCoRoutineTickCount+0x1>
    1242:	6e 5f       	subi	r22, 0xFE	; 254
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	c8 17       	cp	r28, r24
    1248:	d9 07       	cpc	r29, r25
    124a:	b0 f4       	brcc	.+44     	; 0x1278 <vCoRoutineAddToDelayedList+0x70>
        {
            /* Wake time has overflowed.  Place this item in the
             * overflow list. */
            vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    124c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <pxOverflowDelayedCoRoutineList>
    1250:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1254:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <vListInsert>
        }

        if( pxEventList )
    1258:	01 15       	cp	r16, r1
    125a:	11 05       	cpc	r17, r1
    125c:	91 f0       	breq	.+36     	; 0x1282 <vCoRoutineAddToDelayedList+0x7a>
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    125e:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    1262:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    1266:	64 5f       	subi	r22, 0xF4	; 244
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	c8 01       	movw	r24, r16
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16

        if( pxEventList )
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    1274:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <vListInsert>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1278:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <pxDelayedCoRoutineList>
    127c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <pxDelayedCoRoutineList+0x1>
    1280:	e9 cf       	rjmp	.-46     	; 0x1254 <vCoRoutineAddToDelayedList+0x4c>
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
        }

        traceRETURN_vCoRoutineAddToDelayedList();
    }
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	08 95       	ret

0000128c <vCoRoutineSchedule>:
        xLastTickCount = xCoRoutineTickCount;
    }
/*-----------------------------------------------------------*/

    void vCoRoutineSchedule( void )
    {
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
        traceENTER_vCoRoutineSchedule();

        /* Only run a co-routine after prvInitialiseCoRoutineLists() has been
         * called.  prvInitialiseCoRoutineLists() is called automatically when a
         * co-routine is created. */
        if( pxDelayedCoRoutineList != NULL )
    1296:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <pxDelayedCoRoutineList>
    129a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <pxDelayedCoRoutineList+0x1>
    129e:	89 2b       	or	r24, r25
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <vCoRoutineSchedule+0x18>
    12a2:	44 c0       	rjmp	.+136    	; 0x132c <vCoRoutineSchedule+0xa0>
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
            }
            portENABLE_INTERRUPTS();

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    12a4:	99 e0       	ldi	r25, 0x09	; 9
    12a6:	f9 2e       	mov	r15, r25
    static void prvCheckPendingReadyList( void )
    {
        /* Are there any co-routines waiting to get moved to the ready list?  These
         * are co-routines that have been readied by an ISR.  The ISR cannot access
         * the ready lists itself. */
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    12a8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <xPendingReadyCoRoutineList>
    12ac:	81 11       	cpse	r24, r1
    12ae:	44 c0       	rjmp	.+136    	; 0x1338 <vCoRoutineSchedule+0xac>

    static void prvCheckDelayedList( void )
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    12b0:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <xTaskGetTickCount>
    12b4:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <xLastTickCount>
    12b8:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <xLastTickCount+0x1>
    12bc:	82 1b       	sub	r24, r18
    12be:	93 0b       	sbc	r25, r19
    12c0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <xPassedTicks+0x1>
    12c4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <xPassedTicks>
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
                    }
                }
                portENABLE_INTERRUPTS();

                prvAddCoRoutineToReadyQueue( pxCRCB );
    12c8:	89 e0       	ldi	r24, 0x09	; 9
    12ca:	f8 2e       	mov	r15, r24
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
    12cc:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <xPassedTicks>
    12d0:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <xPassedTicks+0x1>
    12d4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <xCoRoutineTickCount>
    12d8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <xCoRoutineTickCount+0x1>
    12dc:	21 15       	cp	r18, r1
    12de:	31 05       	cpc	r19, r1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <vCoRoutineSchedule+0x58>
    12e2:	4c c0       	rjmp	.+152    	; 0x137c <vCoRoutineSchedule+0xf0>

                prvAddCoRoutineToReadyQueue( pxCRCB );
            }
        }

        xLastTickCount = xCoRoutineTickCount;
    12e4:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <xLastTickCount+0x1>
    12e8:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <xLastTickCount>
    12ec:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <uxTopCoRoutineReadyPriority>

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	99 e0       	ldi	r25, 0x09	; 9
    12f6:	92 9f       	mul	r25, r18
    12f8:	f0 01       	movw	r30, r0
    12fa:	93 9f       	mul	r25, r19
    12fc:	f0 0d       	add	r31, r0
    12fe:	11 24       	eor	r1, r1
    1300:	e6 57       	subi	r30, 0x76	; 118
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	40 81       	ld	r20, Z
    1306:	41 11       	cpse	r20, r1
    1308:	8d c0       	rjmp	.+282    	; 0x1424 <vCoRoutineSchedule+0x198>
            {
                if( uxTopCoRoutineReadyPriority == 0 )
    130a:	88 23       	and	r24, r24
    130c:	69 f0       	breq	.+26     	; 0x1328 <vCoRoutineSchedule+0x9c>
                {
                    /* No more co-routines to check. */
                    return;
                }

                --uxTopCoRoutineReadyPriority;
    130e:	81 50       	subi	r24, 0x01	; 1

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	92 9f       	mul	r25, r18
    1316:	f0 01       	movw	r30, r0
    1318:	93 9f       	mul	r25, r19
    131a:	f0 0d       	add	r31, r0
    131c:	11 24       	eor	r1, r1
    131e:	e6 57       	subi	r30, 0x76	; 118
    1320:	fe 4f       	sbci	r31, 0xFE	; 254
    1322:	90 81       	ld	r25, Z
    1324:	91 11       	cpse	r25, r1
    1326:	7e c0       	rjmp	.+252    	; 0x1424 <vCoRoutineSchedule+0x198>
    1328:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
        }

        traceRETURN_vCoRoutineSchedule();
    }
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	08 95       	ret
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
        {
            CRCB_t * pxUnblockedCRCB;

            /* The pending ready list can be accessed by an ISR. */
            portDISABLE_INTERRUPTS();
    1338:	f8 94       	cli
            {
                pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyCoRoutineList ) );
    133a:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <xPendingReadyCoRoutineList+0x5>
    133e:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <xPendingReadyCoRoutineList+0x6>
    1342:	c6 81       	ldd	r28, Z+6	; 0x06
    1344:	d7 81       	ldd	r29, Z+7	; 0x07
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1346:	ce 01       	movw	r24, r28
    1348:	0c 96       	adiw	r24, 0x0c	; 12
    134a:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>
            }
            portENABLE_INTERRUPTS();
    134e:	78 94       	sei

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1350:	8e 01       	movw	r16, r28
    1352:	0e 5f       	subi	r16, 0xFE	; 254
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	c8 01       	movw	r24, r16
    1358:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    135c:	8e 89       	ldd	r24, Y+22	; 0x16
    135e:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <uxTopCoRoutineReadyPriority>
    1362:	98 17       	cp	r25, r24
    1364:	10 f4       	brcc	.+4      	; 0x136a <vCoRoutineSchedule+0xde>
    1366:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
    136a:	8f 9d       	mul	r24, r15
    136c:	c0 01       	movw	r24, r0
    136e:	11 24       	eor	r1, r1
    1370:	b8 01       	movw	r22, r16
    1372:	86 57       	subi	r24, 0x76	; 118
    1374:	9e 4f       	sbci	r25, 0xFE	; 254
    1376:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    137a:	96 cf       	rjmp	.-212    	; 0x12a8 <vCoRoutineSchedule+0x1c>

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
        {
            xCoRoutineTickCount++;
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <xCoRoutineTickCount+0x1>
    1382:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <xCoRoutineTickCount>
            xPassedTicks--;
    1386:	21 50       	subi	r18, 0x01	; 1
    1388:	31 09       	sbc	r19, r1
    138a:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <xPassedTicks+0x1>
    138e:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <xPassedTicks>

            /* If the tick count has overflowed we need to swap the ready lists. */
            if( xCoRoutineTickCount == 0 )
    1392:	89 2b       	or	r24, r25
    1394:	81 f4       	brne	.+32     	; 0x13b6 <vCoRoutineSchedule+0x12a>
    1396:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <pxDelayedCoRoutineList>
    139a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <pxDelayedCoRoutineList+0x1>
                List_t * pxTemp;

                /* Tick count has overflowed so we need to swap the delay lists.  If there are
                 * any items in pxDelayedCoRoutineList here then there is an error! */
                pxTemp = pxDelayedCoRoutineList;
                pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    139e:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <pxOverflowDelayedCoRoutineList>
    13a2:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
    13a6:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <pxDelayedCoRoutineList+0x1>
    13aa:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <pxDelayedCoRoutineList>
                pxOverflowDelayedCoRoutineList = pxTemp;
    13ae:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
    13b2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <pxOverflowDelayedCoRoutineList>
            }

            /* See if this tick has made a timeout expire. */
            while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    13b6:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <pxDelayedCoRoutineList>
    13ba:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <pxDelayedCoRoutineList+0x1>
    13be:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <xCoRoutineTickCount>
    13c2:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <xCoRoutineTickCount+0x1>
    13c6:	80 81       	ld	r24, Z
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <vCoRoutineSchedule+0x142>
    13cc:	7f cf       	rjmp	.-258    	; 0x12cc <vCoRoutineSchedule+0x40>
            {
                pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    13ce:	05 80       	ldd	r0, Z+5	; 0x05
    13d0:	f6 81       	ldd	r31, Z+6	; 0x06
    13d2:	e0 2d       	mov	r30, r0
    13d4:	c6 81       	ldd	r28, Z+6	; 0x06
    13d6:	d7 81       	ldd	r29, Z+7	; 0x07

                if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	9b 81       	ldd	r25, Y+3	; 0x03
    13dc:	28 17       	cp	r18, r24
    13de:	39 07       	cpc	r19, r25
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <vCoRoutineSchedule+0x158>
    13e2:	74 cf       	rjmp	.-280    	; 0x12cc <vCoRoutineSchedule+0x40>
                {
                    /* Timeout not yet expired. */
                    break;
                }

                portDISABLE_INTERRUPTS();
    13e4:	f8 94       	cli
                    /* The event could have occurred just before this critical
                     *  section.  If this is the case then the generic list item will
                     *  have been moved to the pending ready list and the following
                     *  line is still valid.  Also the pvContainer parameter will have
                     *  been set to NULL so the following lines are also valid. */
                    ( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    13e6:	8e 01       	movw	r16, r28
    13e8:	0e 5f       	subi	r16, 0xFE	; 254
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	c8 01       	movw	r24, r16
    13ee:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>

                    /* Is the co-routine waiting on an event also? */
                    if( pxCRCB->xEventListItem.pxContainer )
    13f2:	8c 89       	ldd	r24, Y+20	; 0x14
    13f4:	9d 89       	ldd	r25, Y+21	; 0x15
    13f6:	89 2b       	or	r24, r25
    13f8:	21 f0       	breq	.+8      	; 0x1402 <vCoRoutineSchedule+0x176>
                    {
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    13fa:	ce 01       	movw	r24, r28
    13fc:	0c 96       	adiw	r24, 0x0c	; 12
    13fe:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>
                    }
                }
                portENABLE_INTERRUPTS();
    1402:	78 94       	sei

                prvAddCoRoutineToReadyQueue( pxCRCB );
    1404:	8e 89       	ldd	r24, Y+22	; 0x16
    1406:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <uxTopCoRoutineReadyPriority>
    140a:	98 17       	cp	r25, r24
    140c:	10 f4       	brcc	.+4      	; 0x1412 <vCoRoutineSchedule+0x186>
    140e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
    1412:	8f 9d       	mul	r24, r15
    1414:	c0 01       	movw	r24, r0
    1416:	11 24       	eor	r1, r1
    1418:	b8 01       	movw	r22, r16
    141a:	86 57       	subi	r24, 0x76	; 118
    141c:	9e 4f       	sbci	r25, 0xFE	; 254
    141e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    1422:	c9 cf       	rjmp	.-110    	; 0x13b6 <vCoRoutineSchedule+0x12a>
    1424:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <uxTopCoRoutineReadyPriority>
                --uxTopCoRoutineReadyPriority;
            }

            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    1428:	49 e0       	ldi	r20, 0x09	; 9
    142a:	42 9f       	mul	r20, r18
    142c:	c0 01       	movw	r24, r0
    142e:	43 9f       	mul	r20, r19
    1430:	90 0d       	add	r25, r0
    1432:	11 24       	eor	r1, r1
    1434:	fc 01       	movw	r30, r24
    1436:	e6 57       	subi	r30, 0x76	; 118
    1438:	fe 4f       	sbci	r31, 0xFE	; 254
    143a:	a1 81       	ldd	r26, Z+1	; 0x01
    143c:	b2 81       	ldd	r27, Z+2	; 0x02
    143e:	12 96       	adiw	r26, 0x02	; 2
    1440:	4d 91       	ld	r20, X+
    1442:	5c 91       	ld	r21, X
    1444:	52 83       	std	Z+2, r21	; 0x02
    1446:	41 83       	std	Z+1, r20	; 0x01
    1448:	83 57       	subi	r24, 0x73	; 115
    144a:	9e 4f       	sbci	r25, 0xFE	; 254
    144c:	48 17       	cp	r20, r24
    144e:	59 07       	cpc	r21, r25
    1450:	21 f4       	brne	.+8      	; 0x145a <vCoRoutineSchedule+0x1ce>
    1452:	85 81       	ldd	r24, Z+5	; 0x05
    1454:	96 81       	ldd	r25, Z+6	; 0x06
    1456:	92 83       	std	Z+2, r25	; 0x02
    1458:	81 83       	std	Z+1, r24	; 0x01
    145a:	89 e0       	ldi	r24, 0x09	; 9
    145c:	82 9f       	mul	r24, r18
    145e:	f0 01       	movw	r30, r0
    1460:	83 9f       	mul	r24, r19
    1462:	f0 0d       	add	r31, r0
    1464:	11 24       	eor	r1, r1
    1466:	e6 57       	subi	r30, 0x76	; 118
    1468:	fe 4f       	sbci	r31, 0xFE	; 254
    146a:	01 80       	ldd	r0, Z+1	; 0x01
    146c:	f2 81       	ldd	r31, Z+2	; 0x02
    146e:	e0 2d       	mov	r30, r0
    1470:	86 81       	ldd	r24, Z+6	; 0x06
    1472:	97 81       	ldd	r25, Z+7	; 0x07
    1474:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <pxCurrentCoRoutine+0x1>
    1478:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <pxCurrentCoRoutine>

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    147c:	dc 01       	movw	r26, r24
    147e:	ed 91       	ld	r30, X+
    1480:	fc 91       	ld	r31, X
    1482:	11 97       	sbiw	r26, 0x01	; 1
    1484:	57 96       	adiw	r26, 0x17	; 23
    1486:	6c 91       	ld	r22, X
        }

        traceRETURN_vCoRoutineSchedule();
    }
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    1492:	09 94       	ijmp

00001494 <xCoRoutineRemoveFromEventList>:
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    }
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineRemoveFromEventList( const List_t * pxEventList )
    {
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
        traceENTER_xCoRoutineRemoveFromEventList( pxEventList );

        /* This function is called from within an interrupt.  It can only access
         * event lists and the pending ready list.  This function assumes that a
         * check has already been made to ensure pxEventList is not empty. */
        pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    149c:	dc 01       	movw	r26, r24
    149e:	15 96       	adiw	r26, 0x05	; 5
    14a0:	ed 91       	ld	r30, X+
    14a2:	fc 91       	ld	r31, X
    14a4:	c6 81       	ldd	r28, Z+6	; 0x06
    14a6:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    14a8:	8e 01       	movw	r16, r28
    14aa:	04 5f       	subi	r16, 0xF4	; 244
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	c8 01       	movw	r24, r16
    14b0:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>
        vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    14b4:	b8 01       	movw	r22, r16
    14b6:	8b e6       	ldi	r24, 0x6B	; 107
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>

        if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    14be:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <pxCurrentCoRoutine>
    14c2:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <pxCurrentCoRoutine+0x1>
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	2e 89       	ldd	r18, Y+22	; 0x16
    14ca:	96 89       	ldd	r25, Z+22	; 0x16
    14cc:	29 17       	cp	r18, r25
    14ce:	08 f4       	brcc	.+2      	; 0x14d2 <xCoRoutineRemoveFromEventList+0x3e>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xCoRoutineRemoveFromEventList( xReturn );

        return xReturn;
    }
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <vCoRoutineResetState>:
 * scheduler.
 */
    void vCoRoutineResetState( void )
    {
        /* Lists for ready and blocked co-routines. */
        pxDelayedCoRoutineList = NULL;
    14dc:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <pxDelayedCoRoutineList+0x1>
    14e0:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <pxDelayedCoRoutineList>
        pxOverflowDelayedCoRoutineList = NULL;
    14e4:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <pxOverflowDelayedCoRoutineList+0x1>
    14e8:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <pxOverflowDelayedCoRoutineList>

        /* Other file private variables. */
        pxCurrentCoRoutine = NULL;
    14ec:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <pxCurrentCoRoutine+0x1>
    14f0:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <pxCurrentCoRoutine>
        uxTopCoRoutineReadyPriority = ( UBaseType_t ) 0U;
    14f4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <uxTopCoRoutineReadyPriority>
        xCoRoutineTickCount = ( TickType_t ) 0U;
    14f8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <xCoRoutineTickCount+0x1>
    14fc:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <xCoRoutineTickCount>
        xLastTickCount = ( TickType_t ) 0U;
    1500:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <xLastTickCount+0x1>
    1504:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <xLastTickCount>
        xPassedTicks = ( TickType_t ) 0U;
    1508:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <xPassedTicks+0x1>
    150c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <xPassedTicks>
    }
    1510:	08 95       	ret

00001512 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    1516:	8b e0       	ldi	r24, 0x0B	; 11
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <pvPortMalloc>
    151e:	ec 01       	movw	r28, r24

            if( pxEventBits != NULL )
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	31 f0       	breq	.+12     	; 0x1530 <xEventGroupCreate+0x1e>
            {
                pxEventBits->uxEventBits = 0;
    1524:	fc 01       	movw	r30, r24
    1526:	11 92       	st	Z+, r1
    1528:	11 92       	st	Z+, r1
    152a:	cf 01       	movw	r24, r30
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    152c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
        }
    1530:	ce 01       	movw	r24, r28
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
    1538:	af 92       	push	r10
    153a:	bf 92       	push	r11
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	6c 01       	movw	r12, r24
    154e:	7b 01       	movw	r14, r22
    1550:	b4 2e       	mov	r11, r20
    1552:	a2 2e       	mov	r10, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
    1554:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    1558:	f6 01       	movw	r30, r12
    155a:	c0 81       	ld	r28, Z
    155c:	d1 81       	ldd	r29, Z+1	; 0x01
    155e:	ce 01       	movw	r24, r28
    1560:	8e 21       	and	r24, r14
    1562:	9f 21       	and	r25, r15
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
    1564:	a1 10       	cpse	r10, r1
    1566:	40 c0       	rjmp	.+128    	; 0x15e8 <xEventGroupWaitBits+0xb0>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1568:	89 2b       	or	r24, r25
    156a:	09 f0       	breq	.+2      	; 0x156e <xEventGroupWaitBits+0x36>
    156c:	41 c0       	rjmp	.+130    	; 0x15f0 <xEventGroupWaitBits+0xb8>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
    156e:	01 15       	cp	r16, r1
    1570:	11 05       	cpc	r17, r1
    1572:	89 f0       	breq	.+34     	; 0x1596 <xEventGroupWaitBits+0x5e>
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
        EventGroup_t * pxEventBits = xEventGroup;
        EventBits_t uxReturn, uxControlBits = 0;
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	60 e0       	ldi	r22, 0x00	; 0
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
    1578:	bb 20       	and	r11, r11
    157a:	11 f0       	breq	.+4      	; 0x1580 <xEventGroupWaitBits+0x48>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	71 e0       	ldi	r23, 0x01	; 1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
    1580:	a1 10       	cpse	r10, r1
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
    1582:	74 60       	ori	r23, 0x04	; 4
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1584:	6e 29       	or	r22, r14
    1586:	7f 29       	or	r23, r15
    1588:	a8 01       	movw	r20, r16
    158a:	c6 01       	movw	r24, r12
    158c:	02 96       	adiw	r24, 0x02	; 2
    158e:	0e 94 90 1c 	call	0x3920	; 0x3920 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
    1592:	d0 e0       	ldi	r29, 0x00	; 0
    1594:	c0 e0       	ldi	r28, 0x00	; 0

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    1596:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
    159a:	01 2b       	or	r16, r17
    159c:	c9 f0       	breq	.+50     	; 0x15d0 <xEventGroupWaitBits+0x98>
        {
            if( xAlreadyYielded == pdFALSE )
    159e:	81 11       	cpse	r24, r1
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <xEventGroupWaitBits+0x6e>
            {
                taskYIELD_WITHIN_API();
    15a2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
    15a6:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    15aa:	91 fd       	sbrc	r25, 1
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <xEventGroupWaitBits+0x94>
            {
                taskENTER_CRITICAL();
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	0f 92       	push	r0
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
    15b4:	f6 01       	movw	r30, r12
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	97 01       	movw	r18, r14
    15bc:	28 23       	and	r18, r24
    15be:	39 23       	and	r19, r25
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
        BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
    15c0:	a1 10       	cpse	r10, r1
    15c2:	23 c0       	rjmp	.+70     	; 0x160a <xEventGroupWaitBits+0xd2>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    15c4:	23 2b       	or	r18, r19
    15c6:	21 f5       	brne	.+72     	; 0x1610 <xEventGroupWaitBits+0xd8>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
                }
                taskEXIT_CRITICAL();
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    15cc:	ec 01       	movw	r28, r24
    15ce:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
    }
    15d0:	ce 01       	movw	r24, r28
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	bf 90       	pop	r11
    15e4:	af 90       	pop	r10
    15e6:	08 95       	ret
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    15e8:	e8 16       	cp	r14, r24
    15ea:	f9 06       	cpc	r15, r25
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <xEventGroupWaitBits+0xb8>
    15ee:	bf cf       	rjmp	.-130    	; 0x156e <xEventGroupWaitBits+0x36>
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
    15f0:	bb 20       	and	r11, r11
    15f2:	41 f0       	breq	.+16     	; 0x1604 <xEventGroupWaitBits+0xcc>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    15f4:	c7 01       	movw	r24, r14
    15f6:	80 95       	com	r24
    15f8:	90 95       	com	r25
    15fa:	8c 23       	and	r24, r28
    15fc:	9d 23       	and	r25, r29
    15fe:	f6 01       	movw	r30, r12
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	80 83       	st	Z, r24
            if( xWaitConditionMet != pdFALSE )
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
                xTicksToWait = ( TickType_t ) 0;
    1604:	10 e0       	ldi	r17, 0x00	; 0
    1606:	00 e0       	ldi	r16, 0x00	; 0
    1608:	c6 cf       	rjmp	.-116    	; 0x1596 <xEventGroupWaitBits+0x5e>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    160a:	e2 16       	cp	r14, r18
    160c:	f3 06       	cpc	r15, r19
    160e:	e1 f6       	brne	.-72     	; 0x15c8 <xEventGroupWaitBits+0x90>

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
                    {
                        if( xClearOnExit != pdFALSE )
    1610:	bb 20       	and	r11, r11
    1612:	d1 f2       	breq	.-76     	; 0x15c8 <xEventGroupWaitBits+0x90>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1614:	e0 94       	com	r14
    1616:	f0 94       	com	r15
    1618:	e8 22       	and	r14, r24
    161a:	f9 22       	and	r15, r25
    161c:	f6 01       	movw	r30, r12
    161e:	f1 82       	std	Z+1, r15	; 0x01
    1620:	e0 82       	st	Z, r14
    1622:	d2 cf       	rjmp	.-92     	; 0x15c8 <xEventGroupWaitBits+0x90>

00001624 <xEventGroupClearBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
    1624:	fc 01       	movw	r30, r24
        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        taskENTER_CRITICAL();
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	0f 92       	push	r0
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
    1630:	60 95       	com	r22
    1632:	70 95       	com	r23
    1634:	68 23       	and	r22, r24
    1636:	79 23       	and	r23, r25
    1638:	71 83       	std	Z+1, r23	; 0x01
    163a:	60 83       	st	Z, r22
        }
        taskEXIT_CRITICAL();
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
    }
    1640:	08 95       	ret

00001642 <xEventGroupGetBitsFromISR>:
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xEventGroupGetBitsFromISR( uxReturn );

        return uxReturn;
    }
    1642:	fc 01       	movw	r30, r24
    1644:	80 81       	ld	r24, Z
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	08 95       	ret

0000164a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	ec 01       	movw	r28, r24
    165c:	8b 01       	movw	r16, r22
         * itself. */
        configASSERT( xEventGroup );
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

        pxList = &( pxEventBits->xTasksWaitingForBits );
        pxListEnd = listGET_END_MARKER( pxList );
    165e:	7c 01       	movw	r14, r24
    1660:	85 e0       	ldi	r24, 0x05	; 5
    1662:	e8 0e       	add	r14, r24
    1664:	f1 1c       	adc	r15, r1
        vTaskSuspendAll();
    1666:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
    166a:	ef 81       	ldd	r30, Y+7	; 0x07
    166c:	f8 85       	ldd	r31, Y+8	; 0x08

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
    166e:	68 81       	ld	r22, Y
    1670:	79 81       	ldd	r23, Y+1	; 0x01
    1672:	60 2b       	or	r22, r16
    1674:	71 2b       	or	r23, r17
    1676:	79 83       	std	Y+1, r23	; 0x01
    1678:	68 83       	st	Y, r22
    {
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    167a:	10 e0       	ldi	r17, 0x00	; 0
    167c:	00 e0       	ldi	r16, 0x00	; 0
    167e:	68 81       	ld	r22, Y
    1680:	79 81       	ldd	r23, Y+1	; 0x01

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
    1682:	ee 15       	cp	r30, r14
    1684:	ff 05       	cpc	r31, r15
    1686:	99 f4       	brne	.+38     	; 0x16ae <xEventGroupSetBits+0x64>
                pxListItem = pxNext;
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
    1688:	00 95       	com	r16
    168a:	10 95       	com	r17
    168c:	06 23       	and	r16, r22
    168e:	17 23       	and	r17, r23
    1690:	19 83       	std	Y+1, r17	; 0x01
    1692:	08 83       	st	Y, r16
        }
        ( void ) xTaskResumeAll();
    1694:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
    }
    1698:	88 81       	ld	r24, Y
    169a:	99 81       	ldd	r25, Y+1	; 0x01
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	08 95       	ret
            pxEventBits->uxEventBits |= uxBitsToSet;

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
            {
                pxNext = listGET_NEXT( pxListItem );
    16ae:	c2 80       	ldd	r12, Z+2	; 0x02
    16b0:	d3 80       	ldd	r13, Z+3	; 0x03
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    16b2:	20 81       	ld	r18, Z
    16b4:	31 81       	ldd	r19, Z+1	; 0x01
                xMatchFound = pdFALSE;

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    16b6:	c9 01       	movw	r24, r18
    16b8:	99 27       	eor	r25, r25
    16ba:	ac 01       	movw	r20, r24
    16bc:	46 23       	and	r20, r22
    16be:	57 23       	and	r21, r23

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    16c0:	32 fd       	sbrc	r19, 2
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <xEventGroupSetBits+0x82>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    16c4:	45 2b       	or	r20, r21
    16c6:	29 f4       	brne	.+10     	; 0x16d2 <xEventGroupSetBits+0x88>
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
    16c8:	f6 01       	movw	r30, r12
    16ca:	d9 cf       	rjmp	.-78     	; 0x167e <xEventGroupSetBits+0x34>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    16cc:	84 17       	cp	r24, r20
    16ce:	95 07       	cpc	r25, r21
    16d0:	d9 f7       	brne	.-10     	; 0x16c8 <xEventGroupSetBits+0x7e>
                }

                if( xMatchFound != pdFALSE )
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    16d2:	30 ff       	sbrs	r19, 0
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <xEventGroupSetBits+0x90>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
    16d6:	08 2b       	or	r16, r24
    16d8:	19 2b       	or	r17, r25
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    16da:	72 60       	ori	r23, 0x02	; 2
    16dc:	cf 01       	movw	r24, r30
    16de:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <vTaskRemoveFromUnorderedEventList>
    16e2:	f2 cf       	rjmp	.-28     	; 0x16c8 <xEventGroupSetBits+0x7e>

000016e4 <xEventGroupSync>:

    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait )
    {
    16e4:	af 92       	push	r10
    16e6:	bf 92       	push	r11
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	7c 01       	movw	r14, r24
    16fa:	eb 01       	movw	r28, r22
    16fc:	8a 01       	movw	r16, r20
    16fe:	69 01       	movw	r12, r18
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
        }
        #endif

        vTaskSuspendAll();
    1700:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        {
            uxOriginalBitValue = pxEventBits->uxEventBits;
    1704:	f7 01       	movw	r30, r14
    1706:	a0 80       	ld	r10, Z
    1708:	b1 80       	ldd	r11, Z+1	; 0x01

            ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    170a:	be 01       	movw	r22, r28
    170c:	c7 01       	movw	r24, r14
    170e:	0e 94 25 0b 	call	0x164a	; 0x164a <xEventGroupSetBits>

            if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1712:	ca 29       	or	r28, r10
    1714:	db 29       	or	r29, r11
    1716:	ce 01       	movw	r24, r28
    1718:	80 23       	and	r24, r16
    171a:	91 23       	and	r25, r17
    171c:	80 17       	cp	r24, r16
    171e:	91 07       	cpc	r25, r17
    1720:	09 f0       	breq	.+2      	; 0x1724 <xEventGroupSync+0x40>
    1722:	3b c0       	rjmp	.+118    	; 0x179a <xEventGroupSync+0xb6>
                /* All the rendezvous bits are now set - no need to block. */
                uxReturn = ( uxOriginalBitValue | uxBitsToSet );

                /* Rendezvous always clear the bits.  They will have been cleared
                 * already unless this is the only task in the rendezvous. */
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1724:	f7 01       	movw	r30, r14
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	98 01       	movw	r18, r16
    172c:	20 95       	com	r18
    172e:	30 95       	com	r19
    1730:	82 23       	and	r24, r18
    1732:	93 23       	and	r25, r19
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24

                xTicksToWait = 0;
    1738:	d1 2c       	mov	r13, r1
    173a:	c1 2c       	mov	r12, r1
                    uxReturn = pxEventBits->uxEventBits;
                    xTimeoutOccurred = pdTRUE;
                }
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    173c:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

        if( xTicksToWait != ( TickType_t ) 0 )
    1740:	cd 28       	or	r12, r13
    1742:	f9 f0       	breq	.+62     	; 0x1782 <xEventGroupSync+0x9e>
        {
            if( xAlreadyYielded == pdFALSE )
    1744:	81 11       	cpse	r24, r1
    1746:	02 c0       	rjmp	.+4      	; 0x174c <xEventGroupSync+0x68>
            {
                taskYIELD_WITHIN_API();
    1748:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
    174c:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <uxTaskResetEventItemValue>

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    1750:	91 fd       	sbrc	r25, 1
    1752:	15 c0       	rjmp	.+42     	; 0x177e <xEventGroupSync+0x9a>
            {
                /* The task timed out, just return the current event bit value. */
                taskENTER_CRITICAL();
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	0f 92       	push	r0
                {
                    uxReturn = pxEventBits->uxEventBits;
    175a:	f7 01       	movw	r30, r14
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01

                    /* Although the task got here because it timed out before the
                     * bits it was waiting for were set, it is possible that since it
                     * unblocked another task has set the bits.  If this is the case
                     * then it needs to clear the bits before exiting. */
                    if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1760:	98 01       	movw	r18, r16
    1762:	28 23       	and	r18, r24
    1764:	39 23       	and	r19, r25
    1766:	20 17       	cp	r18, r16
    1768:	31 07       	cpc	r19, r17
    176a:	39 f4       	brne	.+14     	; 0x177a <xEventGroupSync+0x96>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    176c:	a8 01       	movw	r20, r16
    176e:	40 95       	com	r20
    1770:	50 95       	com	r21
    1772:	48 23       	and	r20, r24
    1774:	59 23       	and	r21, r25
    1776:	51 83       	std	Z+1, r21	; 0x01
    1778:	40 83       	st	Z, r20
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
    177a:	0f 90       	pop	r0
    177c:	0f be       	out	0x3f, r0	; 63
                /* The task unblocked because the bits were set. */
            }

            /* Control bits might be set as the task had blocked should not be
             * returned. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    177e:	ec 01       	movw	r28, r24
    1780:	dd 27       	eor	r29, r29
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupSync( uxReturn );

        return uxReturn;
    }
    1782:	ce 01       	movw	r24, r28
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	cf 90       	pop	r12
    1794:	bf 90       	pop	r11
    1796:	af 90       	pop	r10
    1798:	08 95       	ret

                xTicksToWait = 0;
            }
            else
            {
                if( xTicksToWait != ( TickType_t ) 0 )
    179a:	c1 14       	cp	r12, r1
    179c:	d1 04       	cpc	r13, r1
    179e:	51 f0       	breq	.+20     	; 0x17b4 <xEventGroupSync+0xd0>
                    traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

                    /* Store the bits that the calling task is waiting for in the
                     * task's event list item so the kernel knows when a match is
                     * found.  Then enter the blocked state. */
                    vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    17a0:	a6 01       	movw	r20, r12
    17a2:	b8 01       	movw	r22, r16
    17a4:	75 60       	ori	r23, 0x05	; 5
    17a6:	c7 01       	movw	r24, r14
    17a8:	02 96       	adiw	r24, 0x02	; 2
    17aa:	0e 94 90 1c 	call	0x3920	; 0x3920 <vTaskPlaceOnUnorderedEventList>

                    /* This assignment is obsolete as uxReturn will get set after
                     * the task unblocks, but some compilers mistakenly generate a
                     * warning about uxReturn being returned without being set if the
                     * assignment is omitted. */
                    uxReturn = 0;
    17ae:	d0 e0       	ldi	r29, 0x00	; 0
    17b0:	c0 e0       	ldi	r28, 0x00	; 0
    17b2:	c4 cf       	rjmp	.-120    	; 0x173c <xEventGroupSync+0x58>
                }
                else
                {
                    /* The rendezvous bits were not set, but no block time was
                     * specified - just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
    17b4:	f7 01       	movw	r30, r14
    17b6:	c0 81       	ld	r28, Z
    17b8:	d1 81       	ldd	r29, Z+1	; 0x01
    17ba:	c0 cf       	rjmp	.-128    	; 0x173c <xEventGroupSync+0x58>

000017bc <vEventGroupDelete>:
        return pxEventBits->uxEventBits;
    }
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	ec 01       	movw	r28, r24

        configASSERT( pxEventBits );

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

        vTaskSuspendAll();
    17c2:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	81 11       	cpse	r24, r1
    17ca:	07 c0       	rjmp	.+14     	; 0x17da <vEventGroupDelete+0x1e>
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
            }
        }
        ( void ) xTaskResumeAll();
    17cc:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
    17d0:	ce 01       	movw	r24, r28
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
    17d6:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <vPortFree>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	72 e0       	ldi	r23, 0x02	; 2
    17de:	8f 81       	ldd	r24, Y+7	; 0x07
    17e0:	98 85       	ldd	r25, Y+8	; 0x08
    17e2:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <vTaskRemoveFromUnorderedEventList>
    17e6:	ef cf       	rjmp	.-34     	; 0x17c6 <vEventGroupDelete+0xa>

000017e8 <vEventGroupSetBitsCallback>:
        traceENTER_vEventGroupSetBitsCallback( pvEventGroup, ulBitsToSet );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    17e8:	ba 01       	movw	r22, r20
    17ea:	0c 94 25 0b 	jmp	0x164a	; 0x164a <xEventGroupSetBits>

000017ee <vEventGroupClearBitsCallback>:
        traceENTER_vEventGroupClearBitsCallback( pvEventGroup, ulBitsToClear );

        /* MISRA Ref 11.5.4 [Callback function parameter] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    17ee:	ba 01       	movw	r22, r20
    17f0:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <xEventGroupClearBits>

000017f4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	8c 01       	movw	r16, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
    17fe:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
    1802:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <pucAlignedHeap.1975>
    1806:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <pucAlignedHeap.1975+0x1>
    180a:	89 2b       	or	r24, r25
    180c:	31 f4       	brne	.+12     	; 0x181a <pvPortMalloc+0x26>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    180e:	80 ea       	ldi	r24, 0xA0	; 160
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <pucAlignedHeap.1975+0x1>
    1816:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <pucAlignedHeap.1975>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    181a:	01 15       	cp	r16, r1
    181c:	11 05       	cpc	r17, r1
    181e:	f9 f0       	breq	.+62     	; 0x185e <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1820:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <xNextFreeByte>
    1824:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <xNextFreeByte+0x1>
    1828:	02 0f       	add	r16, r18
    182a:	13 1f       	adc	r17, r19
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
    182c:	0b 3d       	cpi	r16, 0xDB	; 219
    182e:	85 e0       	ldi	r24, 0x05	; 5
    1830:	18 07       	cpc	r17, r24
    1832:	a8 f4       	brcc	.+42     	; 0x185e <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1834:	20 17       	cp	r18, r16
    1836:	31 07       	cpc	r19, r17
    1838:	90 f4       	brcc	.+36     	; 0x185e <pvPortMalloc+0x6a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
    183a:	c0 91 9c 01 	lds	r28, 0x019C	; 0x80019c <pucAlignedHeap.1975>
    183e:	d0 91 9d 01 	lds	r29, 0x019D	; 0x80019d <pucAlignedHeap.1975+0x1>
    1842:	c2 0f       	add	r28, r18
    1844:	d3 1f       	adc	r29, r19
            xNextFreeByte += xWantedSize;
    1846:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <xNextFreeByte+0x1>
    184a:	00 93 9e 01 	sts	0x019E, r16	; 0x80019e <xNextFreeByte>
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    184e:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
    1852:	ce 01       	movw	r24, r28
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	08 95       	ret

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
    185e:	d0 e0       	ldi	r29, 0x00	; 0
    1860:	c0 e0       	ldi	r28, 0x00	; 0
    1862:	f5 cf       	rjmp	.-22     	; 0x184e <pvPortMalloc+0x5a>

00001864 <vPortFree>:
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
    1864:	08 95       	ret

00001866 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* Only required when static memory is not cleared. */
    xNextFreeByte = ( size_t ) 0;
    1866:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <xNextFreeByte+0x1>
    186a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <xNextFreeByte>
}
    186e:	08 95       	ret

00001870 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    1870:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <xNextFreeByte>
    1874:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <xNextFreeByte+0x1>
}
    1878:	8b ed       	ldi	r24, 0xDB	; 219
    187a:	95 e0       	ldi	r25, 0x05	; 5
    187c:	82 1b       	sub	r24, r18
    187e:	93 0b       	sbc	r25, r19
    1880:	08 95       	ret

00001882 <vPortHeapResetState>:
    1882:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <xNextFreeByte+0x1>
    1886:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <xNextFreeByte>
    188a:	08 95       	ret

0000188c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    188c:	fc 01       	movw	r30, r24
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
    188e:	03 96       	adiw	r24, 0x03	; 3
    1890:	92 83       	std	Z+2, r25	; 0x02
    1892:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1894:	2f ef       	ldi	r18, 0xFF	; 255
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	34 83       	std	Z+4, r19	; 0x04
    189a:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
    189c:	96 83       	std	Z+6, r25	; 0x06
    189e:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
    18a0:	90 87       	std	Z+8, r25	; 0x08
    18a2:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    18a4:	10 82       	st	Z, r1
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
    18a6:	08 95       	ret

000018a8 <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    18a8:	fc 01       	movw	r30, r24
    18aa:	11 86       	std	Z+9, r1	; 0x09
    18ac:	10 86       	std	Z+8, r1	; 0x08
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
    18ae:	08 95       	ret

000018b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	9c 01       	movw	r18, r24
    18b6:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
    18b8:	dc 01       	movw	r26, r24
    18ba:	11 96       	adiw	r26, 0x01	; 1
    18bc:	cd 91       	ld	r28, X+
    18be:	dc 91       	ld	r29, X
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    18c0:	d3 83       	std	Z+3, r29	; 0x03
    18c2:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	95 83       	std	Z+5, r25	; 0x05
    18ca:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	dc 01       	movw	r26, r24
    18d2:	13 96       	adiw	r26, 0x03	; 3
    18d4:	7c 93       	st	X, r23
    18d6:	6e 93       	st	-X, r22
    18d8:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    18da:	7d 83       	std	Y+5, r23	; 0x05
    18dc:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    18de:	31 87       	std	Z+9, r19	; 0x09
    18e0:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
    18e2:	f9 01       	movw	r30, r18
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 5f       	subi	r24, 0xFF	; 255
    18e8:	80 83       	st	Z, r24

    traceRETURN_vListInsertEnd();
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	8c 01       	movw	r16, r24
    18fa:	fb 01       	movw	r30, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1900:	d8 01       	movw	r26, r16
    1902:	13 96       	adiw	r26, 0x03	; 3
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1904:	8f 3f       	cpi	r24, 0xFF	; 255
    1906:	98 07       	cpc	r25, r24
    1908:	f1 f4       	brne	.+60     	; 0x1946 <vListInsert+0x56>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    190a:	e8 01       	movw	r28, r16
    190c:	af 81       	ldd	r26, Y+7	; 0x07
    190e:	b8 85       	ldd	r27, Y+8	; 0x08
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1910:	12 96       	adiw	r26, 0x02	; 2
    1912:	8d 91       	ld	r24, X+
    1914:	9c 91       	ld	r25, X
    1916:	13 97       	sbiw	r26, 0x03	; 3
    1918:	93 83       	std	Z+3, r25	; 0x03
    191a:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    191c:	ec 01       	movw	r28, r24
    191e:	fd 83       	std	Y+5, r31	; 0x05
    1920:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1922:	b5 83       	std	Z+5, r27	; 0x05
    1924:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    1926:	13 96       	adiw	r26, 0x03	; 3
    1928:	fc 93       	st	X, r31
    192a:	ee 93       	st	-X, r30
    192c:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    192e:	11 87       	std	Z+9, r17	; 0x09
    1930:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
    1932:	f8 01       	movw	r30, r16
    1934:	80 81       	ld	r24, Z
    1936:	8f 5f       	subi	r24, 0xFF	; 255
    1938:	80 83       	st	Z, r24

    traceRETURN_vListInsert();
}
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	08 95       	ret
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1944:	d9 01       	movw	r26, r18
    1946:	12 96       	adiw	r26, 0x02	; 2
    1948:	2d 91       	ld	r18, X+
    194a:	3c 91       	ld	r19, X
    194c:	13 97       	sbiw	r26, 0x03	; 3
    194e:	e9 01       	movw	r28, r18
    1950:	48 81       	ld	r20, Y
    1952:	59 81       	ldd	r21, Y+1	; 0x01
    1954:	84 17       	cp	r24, r20
    1956:	95 07       	cpc	r25, r21
    1958:	a8 f7       	brcc	.-22     	; 0x1944 <vListInsert+0x54>
    195a:	da cf       	rjmp	.-76     	; 0x1910 <vListInsert+0x20>

0000195c <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	fc 01       	movw	r30, r24
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1962:	a0 85       	ldd	r26, Z+8	; 0x08
    1964:	b1 85       	ldd	r27, Z+9	; 0x09

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	24 81       	ldd	r18, Z+4	; 0x04
    196c:	35 81       	ldd	r19, Z+5	; 0x05
    196e:	ec 01       	movw	r28, r24
    1970:	3d 83       	std	Y+5, r19	; 0x05
    1972:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1974:	c4 81       	ldd	r28, Z+4	; 0x04
    1976:	d5 81       	ldd	r29, Z+5	; 0x05
    1978:	9b 83       	std	Y+3, r25	; 0x03
    197a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    197c:	11 96       	adiw	r26, 0x01	; 1
    197e:	8d 91       	ld	r24, X+
    1980:	9c 91       	ld	r25, X
    1982:	12 97       	sbiw	r26, 0x02	; 2
    1984:	8e 17       	cp	r24, r30
    1986:	9f 07       	cpc	r25, r31
    1988:	21 f4       	brne	.+8      	; 0x1992 <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    198a:	12 96       	adiw	r26, 0x02	; 2
    198c:	dc 93       	st	X, r29
    198e:	ce 93       	st	-X, r28
    1990:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1992:	11 86       	std	Z+9, r1	; 0x09
    1994:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
    1996:	8c 91       	ld	r24, X
    1998:	81 50       	subi	r24, 0x01	; 1
    199a:	8c 93       	st	X, r24

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <pxPortInitialiseStack>:
    uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
     * This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    19a2:	31 e1       	ldi	r19, 0x11	; 17
    19a4:	fc 01       	movw	r30, r24
    19a6:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    19a8:	31 97       	sbiw	r30, 0x01	; 1
    19aa:	22 e2       	ldi	r18, 0x22	; 34
    19ac:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    19ae:	31 97       	sbiw	r30, 0x01	; 1
    19b0:	a3 e3       	ldi	r26, 0x33	; 51
    19b2:	a0 83       	st	Z, r26
    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
     * it on first. */
    usAddress = ( uint16_t ) pxCode;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    19b4:	31 97       	sbiw	r30, 0x01	; 1
    19b6:	60 83       	st	Z, r22
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    19b8:	31 97       	sbiw	r30, 0x01	; 1
    19ba:	70 83       	st	Z, r23

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
     *  portSAVE_CONTEXT places the flags on the stack immediately after r0
     *  to ensure the interrupts get disabled as soon as possible, and so ensuring
     *  the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R0 */
    19bc:	31 97       	sbiw	r30, 0x01	; 1
    19be:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    19c0:	31 97       	sbiw	r30, 0x01	; 1
    19c2:	60 e8       	ldi	r22, 0x80	; 128
    19c4:	60 83       	st	Z, r22
    pxTopOfStack--;


    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00; /* R1 */
    19c6:	31 97       	sbiw	r30, 0x01	; 1
    19c8:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02; /* R2 */
    19ca:	31 97       	sbiw	r30, 0x01	; 1
    19cc:	62 e0       	ldi	r22, 0x02	; 2
    19ce:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03; /* R3 */
    19d0:	31 97       	sbiw	r30, 0x01	; 1
    19d2:	63 e0       	ldi	r22, 0x03	; 3
    19d4:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04; /* R4 */
    19d6:	31 97       	sbiw	r30, 0x01	; 1
    19d8:	64 e0       	ldi	r22, 0x04	; 4
    19da:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05; /* R5 */
    19dc:	31 97       	sbiw	r30, 0x01	; 1
    19de:	65 e0       	ldi	r22, 0x05	; 5
    19e0:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06; /* R6 */
    19e2:	31 97       	sbiw	r30, 0x01	; 1
    19e4:	66 e0       	ldi	r22, 0x06	; 6
    19e6:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07; /* R7 */
    19e8:	31 97       	sbiw	r30, 0x01	; 1
    19ea:	67 e0       	ldi	r22, 0x07	; 7
    19ec:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08; /* R8 */
    19ee:	31 97       	sbiw	r30, 0x01	; 1
    19f0:	68 e0       	ldi	r22, 0x08	; 8
    19f2:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09; /* R9 */
    19f4:	31 97       	sbiw	r30, 0x01	; 1
    19f6:	69 e0       	ldi	r22, 0x09	; 9
    19f8:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10; /* R10 */
    19fa:	31 97       	sbiw	r30, 0x01	; 1
    19fc:	60 e1       	ldi	r22, 0x10	; 16
    19fe:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11; /* R11 */
    1a00:	31 97       	sbiw	r30, 0x01	; 1
    1a02:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12; /* R12 */
    1a04:	31 97       	sbiw	r30, 0x01	; 1
    1a06:	32 e1       	ldi	r19, 0x12	; 18
    1a08:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13; /* R13 */
    1a0a:	31 97       	sbiw	r30, 0x01	; 1
    1a0c:	33 e1       	ldi	r19, 0x13	; 19
    1a0e:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14; /* R14 */
    1a10:	31 97       	sbiw	r30, 0x01	; 1
    1a12:	34 e1       	ldi	r19, 0x14	; 20
    1a14:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15; /* R15 */
    1a16:	31 97       	sbiw	r30, 0x01	; 1
    1a18:	35 e1       	ldi	r19, 0x15	; 21
    1a1a:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16; /* R16 */
    1a1c:	31 97       	sbiw	r30, 0x01	; 1
    1a1e:	36 e1       	ldi	r19, 0x16	; 22
    1a20:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17; /* R17 */
    1a22:	31 97       	sbiw	r30, 0x01	; 1
    1a24:	37 e1       	ldi	r19, 0x17	; 23
    1a26:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18; /* R18 */
    1a28:	31 97       	sbiw	r30, 0x01	; 1
    1a2a:	38 e1       	ldi	r19, 0x18	; 24
    1a2c:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19; /* R19 */
    1a2e:	31 97       	sbiw	r30, 0x01	; 1
    1a30:	39 e1       	ldi	r19, 0x19	; 25
    1a32:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20; /* R20 */
    1a34:	31 97       	sbiw	r30, 0x01	; 1
    1a36:	30 e2       	ldi	r19, 0x20	; 32
    1a38:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21; /* R21 */
    1a3a:	31 97       	sbiw	r30, 0x01	; 1
    1a3c:	31 e2       	ldi	r19, 0x21	; 33
    1a3e:	30 83       	st	Z, r19
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22; /* R22 */
    1a40:	31 97       	sbiw	r30, 0x01	; 1
    1a42:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23; /* R23 */
    1a44:	31 97       	sbiw	r30, 0x01	; 1
    1a46:	23 e2       	ldi	r18, 0x23	; 35
    1a48:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1a4a:	31 97       	sbiw	r30, 0x01	; 1
    1a4c:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1a4e:	31 97       	sbiw	r30, 0x01	; 1
    1a50:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;  /* R26 X */
    1a52:	31 97       	sbiw	r30, 0x01	; 1
    1a54:	26 e2       	ldi	r18, 0x26	; 38
    1a56:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;  /* R27 */
    1a58:	31 97       	sbiw	r30, 0x01	; 1
    1a5a:	27 e2       	ldi	r18, 0x27	; 39
    1a5c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;  /* R28 Y */
    1a5e:	31 97       	sbiw	r30, 0x01	; 1
    1a60:	28 e2       	ldi	r18, 0x28	; 40
    1a62:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;  /* R29 */
    1a64:	31 97       	sbiw	r30, 0x01	; 1
    1a66:	29 e2       	ldi	r18, 0x29	; 41
    1a68:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;  /* R30 Z */
    1a6a:	31 97       	sbiw	r30, 0x01	; 1
    1a6c:	20 e3       	ldi	r18, 0x30	; 48
    1a6e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x031; /* R31 */
    1a70:	31 97       	sbiw	r30, 0x01	; 1
    1a72:	21 e3       	ldi	r18, 0x31	; 49
    1a74:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    1a76:	86 97       	sbiw	r24, 0x26	; 38
    1a78:	08 95       	ret

00001a7a <xPortStartScheduler>:
    /* Setup compare match value for compare match A.  Interrupts are disabled
     * before this is called so we need not worry here. */
    ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    ulCompareMatch >>= 8;
    ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    OCR1AH = ucHighByte;
    1a7a:	1b bc       	out	0x2b, r1	; 43
    OCR1AL = ucLowByte;
    1a7c:	8c e7       	ldi	r24, 0x7C	; 124
    1a7e:	8a bd       	out	0x2a, r24	; 42

    /* Setup clock source and compare match behaviour. */
    ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    TCCR1B = ucLowByte;
    1a80:	8b e0       	ldi	r24, 0x0B	; 11
    1a82:	8e bd       	out	0x2e, r24	; 46

    /* Enable the interrupt - this is okay as interrupt are currently globally
     * disabled. */
    ucLowByte = TIMSK;
    1a84:	89 b7       	in	r24, 0x39	; 57
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1a86:	80 61       	ori	r24, 0x10	; 16
    TIMSK = ucLowByte;
    1a88:	89 bf       	out	0x39, r24	; 57
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    1a8a:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1a8e:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1a92:	cd 91       	ld	r28, X+
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	dd 91       	ld	r29, X+
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	ff 91       	pop	r31
    1a9c:	ef 91       	pop	r30
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	bf 91       	pop	r27
    1aa4:	af 91       	pop	r26
    1aa6:	9f 91       	pop	r25
    1aa8:	8f 91       	pop	r24
    1aaa:	7f 91       	pop	r23
    1aac:	6f 91       	pop	r22
    1aae:	5f 91       	pop	r21
    1ab0:	4f 91       	pop	r20
    1ab2:	3f 91       	pop	r19
    1ab4:	2f 91       	pop	r18
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	bf 90       	pop	r11
    1ac4:	af 90       	pop	r10
    1ac6:	9f 90       	pop	r9
    1ac8:	8f 90       	pop	r8
    1aca:	7f 90       	pop	r7
    1acc:	6f 90       	pop	r6
    1ace:	5f 90       	pop	r5
    1ad0:	4f 90       	pop	r4
    1ad2:	3f 90       	pop	r3
    1ad4:	2f 90       	pop	r2
    1ad6:	1f 90       	pop	r1
    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
     * jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    1ade:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	08 95       	ret

00001ae4 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
     * disable the tick interrupt here. */
}
    1ae4:	08 95       	ret

00001ae6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1ae6:	0f 92       	push	r0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	0f 92       	push	r0
    1aee:	1f 92       	push	r1
    1af0:	11 24       	eor	r1, r1
    1af2:	2f 92       	push	r2
    1af4:	3f 92       	push	r3
    1af6:	4f 92       	push	r4
    1af8:	5f 92       	push	r5
    1afa:	6f 92       	push	r6
    1afc:	7f 92       	push	r7
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	2f 93       	push	r18
    1b14:	3f 93       	push	r19
    1b16:	4f 93       	push	r20
    1b18:	5f 93       	push	r21
    1b1a:	6f 93       	push	r22
    1b1c:	7f 93       	push	r23
    1b1e:	8f 93       	push	r24
    1b20:	9f 93       	push	r25
    1b22:	af 93       	push	r26
    1b24:	bf 93       	push	r27
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	ef 93       	push	r30
    1b2c:	ff 93       	push	r31
    1b2e:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1b32:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1b36:	0d b6       	in	r0, 0x3d	; 61
    1b38:	0d 92       	st	X+, r0
    1b3a:	0e b6       	in	r0, 0x3e	; 62
    1b3c:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1b3e:	0e 94 3a 1c 	call	0x3874	; 0x3874 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1b42:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1b46:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1b4a:	cd 91       	ld	r28, X+
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	dd 91       	ld	r29, X+
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	ff 91       	pop	r31
    1b54:	ef 91       	pop	r30
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	bf 91       	pop	r27
    1b5c:	af 91       	pop	r26
    1b5e:	9f 91       	pop	r25
    1b60:	8f 91       	pop	r24
    1b62:	7f 91       	pop	r23
    1b64:	6f 91       	pop	r22
    1b66:	5f 91       	pop	r21
    1b68:	4f 91       	pop	r20
    1b6a:	3f 91       	pop	r19
    1b6c:	2f 91       	pop	r18
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	bf 90       	pop	r11
    1b7c:	af 90       	pop	r10
    1b7e:	9f 90       	pop	r9
    1b80:	8f 90       	pop	r8
    1b82:	7f 90       	pop	r7
    1b84:	6f 90       	pop	r6
    1b86:	5f 90       	pop	r5
    1b88:	4f 90       	pop	r4
    1b8a:	3f 90       	pop	r3
    1b8c:	2f 90       	pop	r2
    1b8e:	1f 90       	pop	r1
    1b90:	0f 90       	pop	r0
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1b96:	08 95       	ret

00001b98 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__( ( naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	0f 92       	push	r0
    1ba0:	1f 92       	push	r1
    1ba2:	11 24       	eor	r1, r1
    1ba4:	2f 92       	push	r2
    1ba6:	3f 92       	push	r3
    1ba8:	4f 92       	push	r4
    1baa:	5f 92       	push	r5
    1bac:	6f 92       	push	r6
    1bae:	7f 92       	push	r7
    1bb0:	8f 92       	push	r8
    1bb2:	9f 92       	push	r9
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	2f 93       	push	r18
    1bc6:	3f 93       	push	r19
    1bc8:	4f 93       	push	r20
    1bca:	5f 93       	push	r21
    1bcc:	6f 93       	push	r22
    1bce:	7f 93       	push	r23
    1bd0:	8f 93       	push	r24
    1bd2:	9f 93       	push	r25
    1bd4:	af 93       	push	r26
    1bd6:	bf 93       	push	r27
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	ef 93       	push	r30
    1bde:	ff 93       	push	r31
    1be0:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1be4:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1be8:	0d b6       	in	r0, 0x3d	; 61
    1bea:	0d 92       	st	X+, r0
    1bec:	0e b6       	in	r0, 0x3e	; 62
    1bee:	0d 92       	st	X+, r0

    if( xTaskIncrementTick() != pdFALSE )
    1bf0:	0e 94 13 1a 	call	0x3426	; 0x3426 <xTaskIncrementTick>
    1bf4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1bf6:	0e 94 3a 1c 	call	0x3874	; 0x3874 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1bfa:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1bfe:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1c02:	cd 91       	ld	r28, X+
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	dd 91       	ld	r29, X+
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	bf 91       	pop	r27
    1c14:	af 91       	pop	r26
    1c16:	9f 91       	pop	r25
    1c18:	8f 91       	pop	r24
    1c1a:	7f 91       	pop	r23
    1c1c:	6f 91       	pop	r22
    1c1e:	5f 91       	pop	r21
    1c20:	4f 91       	pop	r20
    1c22:	3f 91       	pop	r19
    1c24:	2f 91       	pop	r18
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	7f 90       	pop	r7
    1c3c:	6f 90       	pop	r6
    1c3e:	5f 90       	pop	r5
    1c40:	4f 90       	pop	r4
    1c42:	3f 90       	pop	r3
    1c44:	2f 90       	pop	r2
    1c46:	1f 90       	pop	r1
    1c48:	0f 90       	pop	r0
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1c4e:	08 95       	ret

00001c50 <__vector_7>:
 * count is incremented after the context is saved.
 */
    void TIMER1_COMPA_vect( void ) __attribute__( ( signal, naked ) );
    void TIMER1_COMPA_vect( void )
    {
        vPortYieldFromTick();
    1c50:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vPortYieldFromTick>
        asm volatile ( "reti" );
    1c54:	18 95       	reti

00001c56 <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	91 11       	cpse	r25, r1
    1c68:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    taskEXIT_CRITICAL();

    return xReturn;
}
    1c6a:	08 95       	ret

00001c6c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	ec 01       	movw	r28, r24
    1c76:	04 2f       	mov	r16, r20
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1c78:	1a 8d       	ldd	r17, Y+26	; 0x1a

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1c7a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1c7c:	44 23       	and	r20, r20
    1c7e:	c1 f0       	breq	.+48     	; 0x1cb0 <prvCopyDataToQueue+0x44>
    1c80:	50 e0       	ldi	r21, 0x00	; 0
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
    1c82:	01 11       	cpse	r16, r1
    1c84:	1d c0       	rjmp	.+58     	; 0x1cc0 <prvCopyDataToQueue+0x54>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8a:	0e 94 99 28 	call	0x5132	; 0x5132 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1c8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c90:	2a 81       	ldd	r18, Y+2	; 0x02
    1c92:	3b 81       	ldd	r19, Y+3	; 0x03
    1c94:	82 0f       	add	r24, r18
    1c96:	93 2f       	mov	r25, r19
    1c98:	91 1d       	adc	r25, r1
    1c9a:	9b 83       	std	Y+3, r25	; 0x03
    1c9c:	8a 83       	std	Y+2, r24	; 0x02

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
    1c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	82 17       	cp	r24, r18
    1ca4:	93 07       	cpc	r25, r19
    1ca6:	20 f0       	brcs	.+8      	; 0x1cb0 <prvCopyDataToQueue+0x44>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
    1ca8:	88 81       	ld	r24, Y
    1caa:	99 81       	ldd	r25, Y+1	; 0x01
    1cac:	9b 83       	std	Y+3, r25	; 0x03
    1cae:	8a 83       	std	Y+2, r24	; 0x02
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    1cb0:	1f 5f       	subi	r17, 0xFF	; 255
    1cb2:	1a 8f       	std	Y+26, r17	; 0x1a

    return xReturn;
}
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	08 95       	ret
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc4:	0e 94 99 28 	call	0x5132	; 0x5132 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    1cc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	91 95       	neg	r25
    1cce:	81 95       	neg	r24
    1cd0:	91 09       	sbc	r25, r1
    1cd2:	2e 81       	ldd	r18, Y+6	; 0x06
    1cd4:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd6:	28 0f       	add	r18, r24
    1cd8:	39 1f       	adc	r19, r25
    1cda:	3f 83       	std	Y+7, r19	; 0x07
    1cdc:	2e 83       	std	Y+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
    1cde:	48 81       	ld	r20, Y
    1ce0:	59 81       	ldd	r21, Y+1	; 0x01
    1ce2:	24 17       	cp	r18, r20
    1ce4:	35 07       	cpc	r19, r21
    1ce6:	30 f4       	brcc	.+12     	; 0x1cf4 <prvCopyDataToQueue+0x88>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    1ce8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cea:	3d 81       	ldd	r19, Y+5	; 0x05
    1cec:	82 0f       	add	r24, r18
    1cee:	93 1f       	adc	r25, r19
    1cf0:	9f 83       	std	Y+7, r25	; 0x07
    1cf2:	8e 83       	std	Y+6, r24	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
    1cf4:	02 30       	cpi	r16, 0x02	; 2
    1cf6:	e1 f6       	brne	.-72     	; 0x1cb0 <prvCopyDataToQueue+0x44>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1cf8:	11 23       	and	r17, r17
    1cfa:	d1 f2       	breq	.-76     	; 0x1cb0 <prvCopyDataToQueue+0x44>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
    1cfc:	11 50       	subi	r17, 0x01	; 1
    1cfe:	d8 cf       	rjmp	.-80     	; 0x1cb0 <prvCopyDataToQueue+0x44>

00001d00 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    1d00:	fc 01       	movw	r30, r24
    1d02:	cb 01       	movw	r24, r22
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1d04:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d06:	44 23       	and	r20, r20
    1d08:	a1 f0       	breq	.+40     	; 0x1d32 <prvCopyDataFromQueue+0x32>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	26 81       	ldd	r18, Z+6	; 0x06
    1d0e:	37 81       	ldd	r19, Z+7	; 0x07
    1d10:	24 0f       	add	r18, r20
    1d12:	35 1f       	adc	r19, r21
    1d14:	37 83       	std	Z+7, r19	; 0x07
    1d16:	26 83       	std	Z+6, r18	; 0x06

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    1d18:	64 81       	ldd	r22, Z+4	; 0x04
    1d1a:	75 81       	ldd	r23, Z+5	; 0x05
    1d1c:	26 17       	cp	r18, r22
    1d1e:	37 07       	cpc	r19, r23
    1d20:	20 f0       	brcs	.+8      	; 0x1d2a <prvCopyDataFromQueue+0x2a>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    1d22:	20 81       	ld	r18, Z
    1d24:	31 81       	ldd	r19, Z+1	; 0x01
    1d26:	37 83       	std	Z+7, r19	; 0x07
    1d28:	26 83       	std	Z+6, r18	; 0x06
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
    1d2a:	66 81       	ldd	r22, Z+6	; 0x06
    1d2c:	77 81       	ldd	r23, Z+7	; 0x07
    1d2e:	0c 94 99 28 	jmp	0x5132	; 0x5132 <memcpy>
    }
}
    1d32:	08 95       	ret

00001d34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	ec 01       	movw	r28, r24

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	0f 92       	push	r0
    {
        int8_t cTxLock = pxQueue->cTxLock;
    1d46:	1e 8d       	ldd	r17, Y+30	; 0x1e
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d48:	7c 01       	movw	r14, r24
    1d4a:	81 e1       	ldi	r24, 0x11	; 17
    1d4c:	e8 0e       	add	r14, r24
    1d4e:	f1 1c       	adc	r15, r1
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
    1d50:	11 16       	cp	r1, r17
    1d52:	c4 f0       	brlt	.+48     	; 0x1d84 <prvUnlockQueue+0x50>
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
        }

        pxQueue->cTxLock = queueUNLOCKED;
    1d54:	8f ef       	ldi	r24, 0xFF	; 255
    1d56:	8e 8f       	std	Y+30, r24	; 0x1e
    }
    taskEXIT_CRITICAL();
    1d58:	0f 90       	pop	r0
    1d5a:	0f be       	out	0x3f, r0	; 63

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	0f 92       	push	r0
    {
        int8_t cRxLock = pxQueue->cRxLock;
    1d62:	1d 8d       	ldd	r17, Y+29	; 0x1d

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1d64:	7e 01       	movw	r14, r28
    1d66:	88 e0       	ldi	r24, 0x08	; 8
    1d68:	e8 0e       	add	r14, r24
    1d6a:	f1 1c       	adc	r15, r1
    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
    1d6c:	11 16       	cp	r1, r17
    1d6e:	ac f0       	brlt	.+42     	; 0x1d9a <prvUnlockQueue+0x66>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	8d 8f       	std	Y+29, r24	; 0x1d
    }
    taskEXIT_CRITICAL();
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
}
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	08 95       	ret
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1d84:	89 89       	ldd	r24, Y+17	; 0x11
    1d86:	88 23       	and	r24, r24
    1d88:	29 f3       	breq	.-54     	; 0x1d54 <prvUnlockQueue+0x20>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d8a:	c7 01       	movw	r24, r14
    1d8c:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    1d90:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
    1d92:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <vTaskMissedYield>
    1d96:	11 50       	subi	r17, 0x01	; 1
    1d98:	db cf       	rjmp	.-74     	; 0x1d50 <prvUnlockQueue+0x1c>
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1d9a:	88 85       	ldd	r24, Y+8	; 0x08
    1d9c:	88 23       	and	r24, r24
    1d9e:	41 f3       	breq	.-48     	; 0x1d70 <prvUnlockQueue+0x3c>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1da0:	c7 01       	movw	r24, r14
    1da2:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    1da6:	81 11       	cpse	r24, r1
                {
                    vTaskMissedYield();
    1da8:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <vTaskMissedYield>
    1dac:	11 50       	subi	r17, 0x01	; 1
    1dae:	de cf       	rjmp	.-68     	; 0x1d6c <prvUnlockQueue+0x38>

00001db0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	09 f4       	brne	.+2      	; 0x1dba <xQueueGenericReset+0xa>
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <xQueueGenericReset+0x88>
        ( pxQueue->uxLength >= 1U ) &&
    1dba:	fc 01       	movw	r30, r24
    1dbc:	23 8d       	ldd	r18, Z+27	; 0x1b

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
    1dbe:	22 23       	and	r18, r18
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <xQueueGenericReset+0x14>
    1dc2:	3a c0       	rjmp	.+116    	; 0x1e38 <xQueueGenericReset+0x88>
    1dc4:	ec 01       	movw	r28, r24
        ( pxQueue->uxLength >= 1U ) &&
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    1dc6:	44 8d       	ldd	r20, Z+28	; 0x1c
    {
        taskENTER_CRITICAL();
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	0f 92       	push	r0
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	24 9f       	mul	r18, r20
    1dd6:	e0 0d       	add	r30, r0
    1dd8:	f1 1d       	adc	r31, r1
    1dda:	11 24       	eor	r1, r1
    1ddc:	fd 83       	std	Y+5, r31	; 0x05
    1dde:	ec 83       	std	Y+4, r30	; 0x04
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1de0:	1a 8e       	std	Y+26, r1	; 0x1a
            pxQueue->pcWriteTo = pxQueue->pcHead;
    1de2:	9b 83       	std	Y+3, r25	; 0x03
    1de4:	8a 83       	std	Y+2, r24	; 0x02
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
    1de6:	21 50       	subi	r18, 0x01	; 1
    1de8:	33 0b       	sbc	r19, r19
    1dea:	42 9f       	mul	r20, r18
    1dec:	f0 01       	movw	r30, r0
    1dee:	43 9f       	mul	r20, r19
    1df0:	f0 0d       	add	r31, r0
    1df2:	11 24       	eor	r1, r1
    1df4:	8e 0f       	add	r24, r30
    1df6:	9f 1f       	adc	r25, r31
    1df8:	9f 83       	std	Y+7, r25	; 0x07
    1dfa:	8e 83       	std	Y+6, r24	; 0x06
            pxQueue->cRxLock = queueUNLOCKED;
    1dfc:	8f ef       	ldi	r24, 0xFF	; 255
    1dfe:	8d 8f       	std	Y+29, r24	; 0x1d
            pxQueue->cTxLock = queueUNLOCKED;
    1e00:	8e 8f       	std	Y+30, r24	; 0x1e

            if( xNewQueue == pdFALSE )
    1e02:	61 11       	cpse	r22, r1
    1e04:	10 c0       	rjmp	.+32     	; 0x1e26 <xQueueGenericReset+0x76>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1e06:	88 85       	ldd	r24, Y+8	; 0x08
    1e08:	88 23       	and	r24, r24
    1e0a:	39 f0       	breq	.+14     	; 0x1e1a <xQueueGenericReset+0x6a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	08 96       	adiw	r24, 0x08	; 8
    1e10:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    1e14:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1e16:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
            }
        }
        taskEXIT_CRITICAL();
    1e1a:	0f 90       	pop	r0
    1e1c:	0f be       	out	0x3f, r0	; 63
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    BaseType_t xReturn = pdPASS;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
}
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	08 95       	ret
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1e26:	ce 01       	movw	r24, r28
    1e28:	08 96       	adiw	r24, 0x08	; 8
    1e2a:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1e2e:	ce 01       	movw	r24, r28
    1e30:	41 96       	adiw	r24, 0x11	; 17
    1e32:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    1e36:	f1 cf       	rjmp	.-30     	; 0x1e1a <xQueueGenericReset+0x6a>
        }
        taskEXIT_CRITICAL();
    }
    else
    {
        xReturn = pdFAIL;
    1e38:	80 e0       	ldi	r24, 0x00	; 0

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
    1e3a:	f2 cf       	rjmp	.-28     	; 0x1e20 <xQueueGenericReset+0x70>

00001e3c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    1e44:	81 11       	cpse	r24, r1
    1e46:	08 c0       	rjmp	.+16     	; 0x1e58 <xQueueGenericCreate+0x1c>

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
        Queue_t * pxNewQueue = NULL;
    1e48:	d0 e0       	ldi	r29, 0x00	; 0
    1e4a:	c0 e0       	ldi	r28, 0x00	; 0
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    }
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
    1e58:	86 9f       	mul	r24, r22
    1e5a:	90 01       	movw	r18, r0
    1e5c:	11 24       	eor	r1, r1

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    1e5e:	21 3e       	cpi	r18, 0xE1	; 225
    1e60:	31 05       	cpc	r19, r1
    1e62:	94 f7       	brge	.-28     	; 0x1e48 <xQueueGenericCreate+0xc>
    1e64:	16 2f       	mov	r17, r22
    1e66:	08 2f       	mov	r16, r24
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1e68:	c9 01       	movw	r24, r18
    1e6a:	4f 96       	adiw	r24, 0x1f	; 31
    1e6c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <pvPortMalloc>
    1e70:	ec 01       	movw	r28, r24

            if( pxNewQueue != NULL )
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	49 f3       	breq	.-46     	; 0x1e48 <xQueueGenericCreate+0xc>
{
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
    1e76:	11 11       	cpse	r17, r1
    1e78:	09 c0       	rjmp	.+18     	; 0x1e8c <xQueueGenericCreate+0x50>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1e7a:	99 83       	std	Y+1, r25	; 0x01
    1e7c:	88 83       	st	Y, r24
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
    1e7e:	0b 8f       	std	Y+27, r16	; 0x1b
    pxNewQueue->uxItemSize = uxItemSize;
    1e80:	1c 8f       	std	Y+28, r17	; 0x1c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	ce 01       	movw	r24, r28
    1e86:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <xQueueGenericReset>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
    1e8a:	e0 cf       	rjmp	.-64     	; 0x1e4c <xQueueGenericCreate+0x10>
            if( pxNewQueue != NULL )
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
                pucQueueStorage += sizeof( Queue_t );
    1e8c:	4f 96       	adiw	r24, 0x1f	; 31
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1e8e:	99 83       	std	Y+1, r25	; 0x01
    1e90:	88 83       	st	Y, r24
    1e92:	f5 cf       	rjmp	.-22     	; 0x1e7e <xQueueGenericCreate+0x42>

00001e94 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
    1e94:	af 92       	push	r10
    1e96:	bf 92       	push	r11
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ff 92       	push	r15
    1e9e:	0f 93       	push	r16
    1ea0:	1f 93       	push	r17
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <xQueueGenericSend+0x14>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <xQueueGenericSend+0x16>
    1eaa:	1f 92       	push	r1
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	8c 01       	movw	r16, r24
    1eb2:	6b 01       	movw	r12, r22
    1eb4:	5d 83       	std	Y+5, r21	; 0x05
    1eb6:	4c 83       	std	Y+4, r20	; 0x04
    1eb8:	f2 2e       	mov	r15, r18
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1eba:	80 e0       	ldi	r24, 0x00	; 0
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1ebc:	58 01       	movw	r10, r16
    1ebe:	98 e0       	ldi	r25, 0x08	; 8
    1ec0:	a9 0e       	add	r10, r25
    1ec2:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	0f 92       	push	r0
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1eca:	f8 01       	movw	r30, r16
    1ecc:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ece:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ed0:	29 17       	cp	r18, r25
    1ed2:	18 f0       	brcs	.+6      	; 0x1eda <xQueueGenericSend+0x46>
    1ed4:	f2 e0       	ldi	r31, 0x02	; 2
    1ed6:	ff 12       	cpse	r15, r31
    1ed8:	22 c0       	rjmp	.+68     	; 0x1f1e <xQueueGenericSend+0x8a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1eda:	4f 2d       	mov	r20, r15
    1edc:	b6 01       	movw	r22, r12
    1ede:	c8 01       	movw	r24, r16
    1ee0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <prvCopyDataToQueue>

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	91 89       	ldd	r25, Z+17	; 0x11
    1ee8:	99 23       	and	r25, r25
    1eea:	21 f0       	breq	.+8      	; 0x1ef4 <xQueueGenericSend+0x60>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1eec:	c8 01       	movw	r24, r16
    1eee:	41 96       	adiw	r24, 0x11	; 17
    1ef0:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    1ef4:	81 11       	cpse	r24, r1
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
    1ef6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    1efa:	0f 90       	pop	r0
    1efc:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
        }
    }
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	ff 90       	pop	r15
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	23 2b       	or	r18, r19
    1f24:	21 f4       	brne	.+8      	; 0x1f2e <xQueueGenericSend+0x9a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
            ( void ) xTaskResumeAll();

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	e9 cf       	rjmp	.-46     	; 0x1f00 <xQueueGenericSend+0x6c>
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
                }
                else if( xEntryTimeSet == pdFALSE )
    1f2e:	81 11       	cpse	r24, r1
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <xQueueGenericSend+0xa6>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1f32:	ce 01       	movw	r24, r28
    1f34:	01 96       	adiw	r24, 0x01	; 1
    1f36:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1f3a:	0f 90       	pop	r0
    1f3c:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1f3e:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	0f 92       	push	r0
    1f48:	f8 01       	movw	r30, r16
    1f4a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <xQueueGenericSend+0xbe>
    1f50:	15 8e       	std	Z+29, r1	; 0x1d
    1f52:	f8 01       	movw	r30, r16
    1f54:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f56:	8f 3f       	cpi	r24, 0xFF	; 255
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <xQueueGenericSend+0xc8>
    1f5a:	16 8e       	std	Z+30, r1	; 0x1e
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1f60:	be 01       	movw	r22, r28
    1f62:	6c 5f       	subi	r22, 0xFC	; 252
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255
    1f66:	ce 01       	movw	r24, r28
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <xTaskCheckForTimeOut>
    1f6e:	81 11       	cpse	r24, r1
    1f70:	20 c0       	rjmp	.+64     	; 0x1fb2 <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1f78:	f8 01       	movw	r30, r16
    1f7a:	92 8d       	ldd	r25, Z+26	; 0x1a
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
        prvLockQueue( pxQueue );

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1f80:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f82:	98 13       	cpse	r25, r24
    1f84:	10 c0       	rjmp	.+32     	; 0x1fa6 <xQueueGenericSend+0x112>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1f86:	6c 81       	ldd	r22, Y+4	; 0x04
    1f88:	7d 81       	ldd	r23, Y+5	; 0x05
    1f8a:	c5 01       	movw	r24, r10
    1f8c:	0e 94 80 1c 	call	0x3900	; 0x3900 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    1f90:	c8 01       	movw	r24, r16
    1f92:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    1f96:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <xQueueGenericSend+0x10e>
                {
                    taskYIELD_WITHIN_API();
    1f9e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	8f cf       	rjmp	.-226    	; 0x1ec4 <xQueueGenericSend+0x30>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    1fa6:	c8 01       	movw	r24, r16
    1fa8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1fac:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    1fb0:	f8 cf       	rjmp	.-16     	; 0x1fa2 <xQueueGenericSend+0x10e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    1fb8:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    1fbc:	b6 cf       	rjmp	.-148    	; 0x1f2a <xQueueGenericSend+0x96>

00001fbe <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
    1fbe:	ef 92       	push	r14
    1fc0:	ff 92       	push	r15
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1fca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fce:	98 17       	cp	r25, r24
    1fd0:	18 f0       	brcs	.+6      	; 0x1fd8 <xQueueGenericSendFromISR+0x1a>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1fd4:	22 30       	cpi	r18, 0x02	; 2
    1fd6:	d1 f4       	brne	.+52     	; 0x200c <xQueueGenericSendFromISR+0x4e>
    1fd8:	7a 01       	movw	r14, r20
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    1fda:	1e 8d       	ldd	r17, Y+30	; 0x1e
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    1fdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1fde:	42 2f       	mov	r20, r18
    1fe0:	ce 01       	movw	r24, r28
    1fe2:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    1fe6:	1f 3f       	cpi	r17, 0xFF	; 255
    1fe8:	b9 f4       	brne	.+46     	; 0x2018 <xQueueGenericSendFromISR+0x5a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1fea:	89 89       	ldd	r24, Y+17	; 0x11
    1fec:	81 11       	cpse	r24, r1
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <xQueueGenericSendFromISR+0x36>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	0c c0       	rjmp	.+24     	; 0x200c <xQueueGenericSendFromISR+0x4e>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	41 96       	adiw	r24, 0x11	; 17
    1ff8:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    1ffc:	88 23       	and	r24, r24
    1ffe:	c1 f3       	breq	.-16     	; 0x1ff0 <xQueueGenericSendFromISR+0x32>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    2000:	e1 14       	cp	r14, r1
    2002:	f1 04       	cpc	r15, r1
    2004:	a9 f3       	breq	.-22     	; 0x1ff0 <xQueueGenericSendFromISR+0x32>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	f7 01       	movw	r30, r14
    200a:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
}
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	ff 90       	pop	r15
    2014:	ef 90       	pop	r14
    2016:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    2018:	0e 94 08 1a 	call	0x3410	; 0x3410 <uxTaskGetNumberOfTasks>
    201c:	18 17       	cp	r17, r24
    201e:	40 f7       	brcc	.-48     	; 0x1ff0 <xQueueGenericSendFromISR+0x32>
    2020:	1f 5f       	subi	r17, 0xFF	; 255
    2022:	1e 8f       	std	Y+30, r17	; 0x1e
    2024:	e5 cf       	rjmp	.-54     	; 0x1ff0 <xQueueGenericSendFromISR+0x32>

00002026 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
    2026:	ef 92       	push	r14
    2028:	ff 92       	push	r15
    202a:	1f 93       	push	r17
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	ec 01       	movw	r28, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2032:	8a 8d       	ldd	r24, Y+26	; 0x1a

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
    2034:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2036:	89 17       	cp	r24, r25
    2038:	20 f5       	brcc	.+72     	; 0x2082 <xQueueGiveFromISR+0x5c>
    203a:	7b 01       	movw	r14, r22
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    203c:	1e 8d       	ldd	r17, Y+30	; 0x1e
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
    203e:	8f 5f       	subi	r24, 0xFF	; 255
    2040:	8a 8f       	std	Y+26, r24	; 0x1a

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    2042:	1f 3f       	cpi	r17, 0xFF	; 255
    2044:	b9 f4       	brne	.+46     	; 0x2074 <xQueueGiveFromISR+0x4e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2046:	89 89       	ldd	r24, Y+17	; 0x11
    2048:	81 11       	cpse	r24, r1
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <xQueueGiveFromISR+0x2a>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
            }

            xReturn = pdPASS;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	0c c0       	rjmp	.+24     	; 0x2068 <xQueueGiveFromISR+0x42>
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2050:	ce 01       	movw	r24, r28
    2052:	41 96       	adiw	r24, 0x11	; 17
    2054:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    2058:	88 23       	and	r24, r24
    205a:	c1 f3       	breq	.-16     	; 0x204c <xQueueGiveFromISR+0x26>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    205c:	e1 14       	cp	r14, r1
    205e:	f1 04       	cpc	r15, r1
    2060:	a9 f3       	breq	.-22     	; 0x204c <xQueueGiveFromISR+0x26>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	f7 01       	movw	r30, r14
    2066:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
}
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	ff 90       	pop	r15
    2070:	ef 90       	pop	r14
    2072:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    2074:	0e 94 08 1a 	call	0x3410	; 0x3410 <uxTaskGetNumberOfTasks>
    2078:	18 17       	cp	r17, r24
    207a:	40 f7       	brcc	.-48     	; 0x204c <xQueueGiveFromISR+0x26>
    207c:	1f 5f       	subi	r17, 0xFF	; 255
    207e:	1e 8f       	std	Y+30, r17	; 0x1e
    2080:	e5 cf       	rjmp	.-54     	; 0x204c <xQueueGiveFromISR+0x26>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    2082:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
    2084:	f1 cf       	rjmp	.-30     	; 0x2068 <xQueueGiveFromISR+0x42>

00002086 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
    2086:	af 92       	push	r10
    2088:	bf 92       	push	r11
    208a:	cf 92       	push	r12
    208c:	df 92       	push	r13
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	00 d0       	rcall	.+0      	; 0x209a <xQueueReceive+0x14>
    209a:	00 d0       	rcall	.+0      	; 0x209c <xQueueReceive+0x16>
    209c:	1f 92       	push	r1
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	8c 01       	movw	r16, r24
    20a4:	6b 01       	movw	r12, r22
    20a6:	5d 83       	std	Y+5, r21	; 0x05
    20a8:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    20aa:	80 e0       	ldi	r24, 0x00	; 0
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    20ac:	58 01       	movw	r10, r16
    20ae:	91 e1       	ldi	r25, 0x11	; 17
    20b0:	a9 0e       	add	r10, r25
    20b2:	b1 1c       	adc	r11, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    20ba:	f8 01       	movw	r30, r16
    20bc:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    20be:	ff 20       	and	r15, r15
    20c0:	19 f1       	breq	.+70     	; 0x2108 <xQueueReceive+0x82>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
    20c2:	b6 01       	movw	r22, r12
    20c4:	c8 01       	movw	r24, r16
    20c6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    20ca:	fa 94       	dec	r15
    20cc:	f8 01       	movw	r30, r16
    20ce:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    20d0:	80 85       	ldd	r24, Z+8	; 0x08
    20d2:	88 23       	and	r24, r24
    20d4:	39 f0       	breq	.+14     	; 0x20e4 <xQueueReceive+0x5e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    20d6:	c8 01       	movw	r24, r16
    20d8:	08 96       	adiw	r24, 0x08	; 8
    20da:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    20de:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    20e0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    20e4:	0f 90       	pop	r0
    20e6:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	df 90       	pop	r13
    2100:	cf 90       	pop	r12
    2102:	bf 90       	pop	r11
    2104:	af 90       	pop	r10
    2106:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    2108:	2c 81       	ldd	r18, Y+4	; 0x04
    210a:	3d 81       	ldd	r19, Y+5	; 0x05
    210c:	23 2b       	or	r18, r19
    210e:	21 f4       	brne	.+8      	; 0x2118 <xQueueReceive+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    2110:	0f 90       	pop	r0
    2112:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	e9 cf       	rjmp	.-46     	; 0x20ea <xQueueReceive+0x64>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    2118:	81 11       	cpse	r24, r1
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <xQueueReceive+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    211c:	ce 01       	movw	r24, r28
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    2124:	0f 90       	pop	r0
    2126:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    2128:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	0f 92       	push	r0
    2132:	f8 01       	movw	r30, r16
    2134:	85 8d       	ldd	r24, Z+29	; 0x1d
    2136:	8f 3f       	cpi	r24, 0xFF	; 255
    2138:	09 f4       	brne	.+2      	; 0x213c <xQueueReceive+0xb6>
    213a:	15 8e       	std	Z+29, r1	; 0x1d
    213c:	f8 01       	movw	r30, r16
    213e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2140:	8f 3f       	cpi	r24, 0xFF	; 255
    2142:	09 f4       	brne	.+2      	; 0x2146 <xQueueReceive+0xc0>
    2144:	16 8e       	std	Z+30, r1	; 0x1e
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    214a:	be 01       	movw	r22, r28
    214c:	6c 5f       	subi	r22, 0xFC	; 252
    214e:	7f 4f       	sbci	r23, 0xFF	; 255
    2150:	ce 01       	movw	r24, r28
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <xTaskCheckForTimeOut>
    2158:	81 11       	cpse	r24, r1
    215a:	1b c0       	rjmp	.+54     	; 0x2192 <xQueueReceive+0x10c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    215c:	c8 01       	movw	r24, r16
    215e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <prvIsQueueEmpty>
    2162:	88 23       	and	r24, r24
    2164:	81 f0       	breq	.+32     	; 0x2186 <xQueueReceive+0x100>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2166:	6c 81       	ldd	r22, Y+4	; 0x04
    2168:	7d 81       	ldd	r23, Y+5	; 0x05
    216a:	c5 01       	movw	r24, r10
    216c:	0e 94 80 1c 	call	0x3900	; 0x3900 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    2170:	c8 01       	movw	r24, r16
    2172:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    2176:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    217a:	81 11       	cpse	r24, r1
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <xQueueReceive+0xfc>
                {
                    taskYIELD_WITHIN_API();
    217e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	97 cf       	rjmp	.-210    	; 0x20b4 <xQueueReceive+0x2e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
    2186:	c8 01       	movw	r24, r16
    2188:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    218c:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    2190:	f8 cf       	rjmp	.-16     	; 0x2182 <xQueueReceive+0xfc>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
    2192:	c8 01       	movw	r24, r16
    2194:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    2198:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    219c:	c8 01       	movw	r24, r16
    219e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <prvIsQueueEmpty>
    21a2:	88 23       	and	r24, r24
    21a4:	71 f3       	breq	.-36     	; 0x2182 <xQueueReceive+0xfc>
    21a6:	b6 cf       	rjmp	.-148    	; 0x2114 <xQueueReceive+0x8e>

000021a8 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <xQueueSemaphoreTake+0xe>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <xQueueSemaphoreTake+0x10>
    21b8:	1f 92       	push	r1
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	8c 01       	movw	r16, r24
    21c0:	7d 83       	std	Y+5, r23	; 0x05
    21c2:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    21c4:	90 e0       	ldi	r25, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    21c6:	78 01       	movw	r14, r16
    21c8:	81 e1       	ldi	r24, 0x11	; 17
    21ca:	e8 0e       	add	r14, r24
    21cc:	f1 1c       	adc	r15, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    21d4:	f8 01       	movw	r30, r16
    21d6:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    21d8:	88 23       	and	r24, r24
    21da:	d9 f0       	breq	.+54     	; 0x2212 <xQueueSemaphoreTake+0x6a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
    21dc:	81 50       	subi	r24, 0x01	; 1
    21de:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    21e0:	80 85       	ldd	r24, Z+8	; 0x08
    21e2:	88 23       	and	r24, r24
    21e4:	39 f0       	breq	.+14     	; 0x21f4 <xQueueSemaphoreTake+0x4c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    21e6:	c8 01       	movw	r24, r16
    21e8:	08 96       	adiw	r24, 0x08	; 8
    21ea:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    21ee:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    21f0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    21f4:	0f 90       	pop	r0
    21f6:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	ff 90       	pop	r15
    220e:	ef 90       	pop	r14
    2210:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    2212:	2c 81       	ldd	r18, Y+4	; 0x04
    2214:	3d 81       	ldd	r19, Y+5	; 0x05
    2216:	23 2b       	or	r18, r19
    2218:	21 f4       	brne	.+8      	; 0x2222 <xQueueSemaphoreTake+0x7a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    221a:	0f 90       	pop	r0
    221c:	0f be       	out	0x3f, r0	; 63
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	ec cf       	rjmp	.-40     	; 0x21fa <xQueueSemaphoreTake+0x52>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    2222:	91 11       	cpse	r25, r1
    2224:	04 c0       	rjmp	.+8      	; 0x222e <xQueueSemaphoreTake+0x86>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    2226:	ce 01       	movw	r24, r28
    2228:	01 96       	adiw	r24, 0x01	; 1
    222a:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    222e:	0f 90       	pop	r0
    2230:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    2232:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	0f 92       	push	r0
    223c:	f8 01       	movw	r30, r16
    223e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2240:	8f 3f       	cpi	r24, 0xFF	; 255
    2242:	09 f4       	brne	.+2      	; 0x2246 <xQueueSemaphoreTake+0x9e>
    2244:	15 8e       	std	Z+29, r1	; 0x1d
    2246:	f8 01       	movw	r30, r16
    2248:	86 8d       	ldd	r24, Z+30	; 0x1e
    224a:	8f 3f       	cpi	r24, 0xFF	; 255
    224c:	09 f4       	brne	.+2      	; 0x2250 <xQueueSemaphoreTake+0xa8>
    224e:	16 8e       	std	Z+30, r1	; 0x1e
    2250:	0f 90       	pop	r0
    2252:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2254:	be 01       	movw	r22, r28
    2256:	6c 5f       	subi	r22, 0xFC	; 252
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	ce 01       	movw	r24, r28
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <xTaskCheckForTimeOut>
    2262:	81 11       	cpse	r24, r1
    2264:	1b c0       	rjmp	.+54     	; 0x229c <xQueueSemaphoreTake+0xf4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2266:	c8 01       	movw	r24, r16
    2268:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <prvIsQueueEmpty>
    226c:	88 23       	and	r24, r24
    226e:	81 f0       	breq	.+32     	; 0x2290 <xQueueSemaphoreTake+0xe8>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2270:	6c 81       	ldd	r22, Y+4	; 0x04
    2272:	7d 81       	ldd	r23, Y+5	; 0x05
    2274:	c7 01       	movw	r24, r14
    2276:	0e 94 80 1c 	call	0x3900	; 0x3900 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    227a:	c8 01       	movw	r24, r16
    227c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    2280:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    2284:	81 11       	cpse	r24, r1
    2286:	02 c0       	rjmp	.+4      	; 0x228c <xQueueSemaphoreTake+0xe4>
                {
                    taskYIELD_WITHIN_API();
    2288:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	9f cf       	rjmp	.-194    	; 0x21ce <xQueueSemaphoreTake+0x26>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    2290:	c8 01       	movw	r24, r16
    2292:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    2296:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    229a:	f8 cf       	rjmp	.-16     	; 0x228c <xQueueSemaphoreTake+0xe4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    229c:	c8 01       	movw	r24, r16
    229e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    22a2:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    22a6:	c8 01       	movw	r24, r16
    22a8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <prvIsQueueEmpty>
    22ac:	88 23       	and	r24, r24
    22ae:	71 f3       	breq	.-36     	; 0x228c <xQueueSemaphoreTake+0xe4>
    22b0:	b6 cf       	rjmp	.-148    	; 0x221e <xQueueSemaphoreTake+0x76>

000022b2 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <xQueuePeek+0x12>
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <xQueuePeek+0x14>
    22c6:	1f 92       	push	r1
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	8c 01       	movw	r16, r24
    22ce:	7b 01       	movw	r14, r22
    22d0:	5d 83       	std	Y+5, r21	; 0x05
    22d2:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    22d4:	80 e0       	ldi	r24, 0x00	; 0
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    22d6:	68 01       	movw	r12, r16
    22d8:	91 e1       	ldi	r25, 0x11	; 17
    22da:	c9 0e       	add	r12, r25
    22dc:	d1 1c       	adc	r13, r1
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    22e4:	f8 01       	movw	r30, r16
    22e6:	92 8d       	ldd	r25, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    22e8:	99 23       	and	r25, r25
    22ea:	21 f1       	breq	.+72     	; 0x2334 <xQueuePeek+0x82>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    22ec:	c6 80       	ldd	r12, Z+6	; 0x06
    22ee:	d7 80       	ldd	r13, Z+7	; 0x07

                prvCopyDataFromQueue( pxQueue, pvBuffer );
    22f0:	b7 01       	movw	r22, r14
    22f2:	c8 01       	movw	r24, r16
    22f4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    22f8:	f8 01       	movw	r30, r16
    22fa:	d7 82       	std	Z+7, r13	; 0x07
    22fc:	c6 82       	std	Z+6, r12	; 0x06

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    22fe:	81 89       	ldd	r24, Z+17	; 0x11
    2300:	88 23       	and	r24, r24
    2302:	39 f0       	breq	.+14     	; 0x2312 <xQueuePeek+0x60>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2304:	c8 01       	movw	r24, r16
    2306:	41 96       	adiw	r24, 0x11	; 17
    2308:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    230c:	81 11       	cpse	r24, r1
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
    230e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
    2316:	81 e0       	ldi	r24, 0x01	; 1
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	08 95       	ret

                return pdPASS;
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    2334:	2c 81       	ldd	r18, Y+4	; 0x04
    2336:	3d 81       	ldd	r19, Y+5	; 0x05
    2338:	23 2b       	or	r18, r19
    233a:	21 f4       	brne	.+8      	; 0x2344 <xQueuePeek+0x92>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    233c:	0f 90       	pop	r0
    233e:	0f be       	out	0x3f, r0	; 63
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	ea cf       	rjmp	.-44     	; 0x2318 <xQueuePeek+0x66>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
                }
                else if( xEntryTimeSet == pdFALSE )
    2344:	81 11       	cpse	r24, r1
    2346:	04 c0       	rjmp	.+8      	; 0x2350 <xQueuePeek+0x9e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    2348:	ce 01       	movw	r24, r28
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <vTaskInternalSetTimeOutState>
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
    2354:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	0f 92       	push	r0
    235e:	f8 01       	movw	r30, r16
    2360:	85 8d       	ldd	r24, Z+29	; 0x1d
    2362:	8f 3f       	cpi	r24, 0xFF	; 255
    2364:	09 f4       	brne	.+2      	; 0x2368 <xQueuePeek+0xb6>
    2366:	15 8e       	std	Z+29, r1	; 0x1d
    2368:	f8 01       	movw	r30, r16
    236a:	86 8d       	ldd	r24, Z+30	; 0x1e
    236c:	8f 3f       	cpi	r24, 0xFF	; 255
    236e:	09 f4       	brne	.+2      	; 0x2372 <xQueuePeek+0xc0>
    2370:	16 8e       	std	Z+30, r1	; 0x1e
    2372:	0f 90       	pop	r0
    2374:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2376:	be 01       	movw	r22, r28
    2378:	6c 5f       	subi	r22, 0xFC	; 252
    237a:	7f 4f       	sbci	r23, 0xFF	; 255
    237c:	ce 01       	movw	r24, r28
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <xTaskCheckForTimeOut>
    2384:	81 11       	cpse	r24, r1
    2386:	1b c0       	rjmp	.+54     	; 0x23be <xQueuePeek+0x10c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2388:	c8 01       	movw	r24, r16
    238a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <prvIsQueueEmpty>
    238e:	88 23       	and	r24, r24
    2390:	81 f0       	breq	.+32     	; 0x23b2 <xQueuePeek+0x100>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2392:	6c 81       	ldd	r22, Y+4	; 0x04
    2394:	7d 81       	ldd	r23, Y+5	; 0x05
    2396:	c6 01       	movw	r24, r12
    2398:	0e 94 80 1c 	call	0x3900	; 0x3900 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    239c:	c8 01       	movw	r24, r16
    239e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    23a2:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    23a6:	81 11       	cpse	r24, r1
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <xQueuePeek+0xfc>
                {
                    taskYIELD_WITHIN_API();
    23aa:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	96 cf       	rjmp	.-212    	; 0x22de <xQueuePeek+0x2c>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
    23b2:	c8 01       	movw	r24, r16
    23b4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    23b8:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    23bc:	f8 cf       	rjmp	.-16     	; 0x23ae <xQueuePeek+0xfc>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
    23be:	c8 01       	movw	r24, r16
    23c0:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    23c4:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    23c8:	c8 01       	movw	r24, r16
    23ca:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <prvIsQueueEmpty>
    23ce:	88 23       	and	r24, r24
    23d0:	71 f3       	breq	.-36     	; 0x23ae <xQueuePeek+0xfc>
    23d2:	b6 cf       	rjmp	.-148    	; 0x2340 <xQueuePeek+0x8e>

000023d4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    23d4:	ef 92       	push	r14
    23d6:	ff 92       	push	r15
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    23e0:	fc 01       	movw	r30, r24
    23e2:	02 8d       	ldd	r16, Z+26	; 0x1a

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    23e4:	00 23       	and	r16, r16
    23e6:	41 f1       	breq	.+80     	; 0x2438 <xQueueReceiveFromISR+0x64>
    23e8:	7a 01       	movw	r14, r20
    23ea:	ec 01       	movw	r28, r24
        {
            const int8_t cRxLock = pxQueue->cRxLock;
    23ec:	15 8d       	ldd	r17, Z+29	; 0x1d

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
    23ee:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
    23f2:	01 50       	subi	r16, 0x01	; 1
    23f4:	0a 8f       	std	Y+26, r16	; 0x1a

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
    23f6:	1f 3f       	cpi	r17, 0xFF	; 255
    23f8:	c1 f4       	brne	.+48     	; 0x242a <xQueueReceiveFromISR+0x56>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    23fa:	88 85       	ldd	r24, Y+8	; 0x08
    23fc:	81 11       	cpse	r24, r1
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <xQueueReceiveFromISR+0x30>
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
            }

            xReturn = pdPASS;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	0c c0       	rjmp	.+24     	; 0x241c <xQueueReceiveFromISR+0x48>
             * locked. */
            if( cRxLock == queueUNLOCKED )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2404:	ce 01       	movw	r24, r28
    2406:	08 96       	adiw	r24, 0x08	; 8
    2408:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <xTaskRemoveFromEventList>
    240c:	88 23       	and	r24, r24
    240e:	c1 f3       	breq	.-16     	; 0x2400 <xQueueReceiveFromISR+0x2c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
    2410:	e1 14       	cp	r14, r1
    2412:	f1 04       	cpc	r15, r1
    2414:	a9 f3       	breq	.-22     	; 0x2400 <xQueueReceiveFromISR+0x2c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	f7 01       	movw	r30, r14
    241a:	80 83       	st	Z, r24
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
}
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	08 95       	ret
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
    242a:	0e 94 08 1a 	call	0x3410	; 0x3410 <uxTaskGetNumberOfTasks>
    242e:	18 17       	cp	r17, r24
    2430:	38 f7       	brcc	.-50     	; 0x2400 <xQueueReceiveFromISR+0x2c>
    2432:	1f 5f       	subi	r17, 0xFF	; 255
    2434:	1d 8f       	std	Y+29, r17	; 0x1d
    2436:	e4 cf       	rjmp	.-56     	; 0x2400 <xQueueReceiveFromISR+0x2c>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    2438:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
    243a:	f0 cf       	rjmp	.-32     	; 0x241c <xQueueReceiveFromISR+0x48>

0000243c <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
    243c:	0f 93       	push	r16
    243e:	1f 93       	push	r17
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2444:	fc 01       	movw	r30, r24
    2446:	22 8d       	ldd	r18, Z+26	; 0x1a
    2448:	22 23       	and	r18, r18
    244a:	69 f0       	breq	.+26     	; 0x2466 <xQueuePeekFromISR+0x2a>
    244c:	ec 01       	movw	r28, r24
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    244e:	06 81       	ldd	r16, Z+6	; 0x06
    2450:	17 81       	ldd	r17, Z+7	; 0x07
            prvCopyDataFromQueue( pxQueue, pvBuffer );
    2452:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    2456:	1f 83       	std	Y+7, r17	; 0x07
    2458:	0e 83       	std	Y+6, r16	; 0x06

            xReturn = pdPASS;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
}
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	08 95       	ret

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    2466:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
    2468:	f9 cf       	rjmp	.-14     	; 0x245c <xQueuePeekFromISR+0x20>

0000246a <uxQueueMessagesWaiting>:

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );

    taskENTER_CRITICAL();
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	0f 92       	push	r0
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2470:	fc 01       	movw	r30, r24
    2472:	82 8d       	ldd	r24, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    2474:	0f 90       	pop	r0
    2476:	0f be       	out	0x3f, r0	; 63

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
}
    2478:	08 95       	ret

0000247a <uxQueueSpacesAvailable>:

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	0f 92       	push	r0
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    2480:	fc 01       	movw	r30, r24
    2482:	22 8d       	ldd	r18, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
    2484:	0f 90       	pop	r0
    2486:	0f be       	out	0x3f, r0	; 63

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
    2488:	83 8d       	ldd	r24, Z+27	; 0x1b
    taskEXIT_CRITICAL();

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
}
    248a:	82 1b       	sub	r24, r18
    248c:	08 95       	ret

0000248e <uxQueueMessagesWaitingFromISR>:
    Queue_t * const pxQueue = xQueue;

    traceENTER_uxQueueMessagesWaitingFromISR( xQueue );

    configASSERT( pxQueue );
    uxReturn = pxQueue->uxMessagesWaiting;
    248e:	fc 01       	movw	r30, r24
    2490:	82 8d       	ldd	r24, Z+26	; 0x1a

    traceRETURN_uxQueueMessagesWaitingFromISR( uxReturn );

    return uxReturn;
}
    2492:	08 95       	ret

00002494 <vQueueDelete>:

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
    2494:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <vPortFree>

00002498 <uxQueueGetQueueItemSize>:
    traceENTER_uxQueueGetQueueItemSize( xQueue );

    traceRETURN_uxQueueGetQueueItemSize( ( ( Queue_t * ) xQueue )->uxItemSize );

    return ( ( Queue_t * ) xQueue )->uxItemSize;
}
    2498:	fc 01       	movw	r30, r24
    249a:	84 8d       	ldd	r24, Z+28	; 0x1c
    249c:	08 95       	ret

0000249e <uxQueueGetQueueLength>:
    traceENTER_uxQueueGetQueueLength( xQueue );

    traceRETURN_uxQueueGetQueueLength( ( ( Queue_t * ) xQueue )->uxLength );

    return ( ( Queue_t * ) xQueue )->uxLength;
}
    249e:	fc 01       	movw	r30, r24
    24a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    24a2:	08 95       	ret

000024a4 <xQueueIsQueueEmptyFromISR>:

    traceENTER_xQueueIsQueueEmptyFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    24a4:	fc 01       	movw	r30, r24
    24a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	91 11       	cpse	r25, r1
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueEmptyFromISR( xReturn );

    return xReturn;
}
    24ae:	08 95       	ret

000024b0 <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    24b0:	fc 01       	movw	r30, r24

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    24b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	23 8d       	ldd	r18, Z+27	; 0x1b
    24b8:	29 13       	cpse	r18, r25
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
}
    24bc:	08 95       	ret

000024be <xQueueCRSend>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSend( QueueHandle_t xQueue,
                             const void * pvItemToQueue,
                             TickType_t xTicksToWait )
    {
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	ec 01       	movw	r28, r24
        traceENTER_xQueueCRSend( xQueue, pvItemToQueue, xTicksToWait );

        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    24c4:	f8 94       	cli

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	0f 92       	push	r0
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    24cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
    24d0:	0f 90       	pop	r0
    24d2:	0f be       	out	0x3f, r0	; 63
        /* If the queue is already full we may have to block.  A critical section
         * is required to prevent an interrupt removing something from the queue
         * between the check to see if the queue is full and blocking on the queue. */
        portDISABLE_INTERRUPTS();
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    24d4:	89 13       	cpse	r24, r25
    24d6:	11 c0       	rjmp	.+34     	; 0x24fa <xQueueCRSend+0x3c>
            {
                /* The queue is full - do we want to block or just leave without
                 * posting? */
                if( xTicksToWait > ( TickType_t ) 0 )
    24d8:	41 15       	cp	r20, r1
    24da:	51 05       	cpc	r21, r1
    24dc:	59 f0       	breq	.+22     	; 0x24f4 <xQueueCRSend+0x36>
                {
                    /* As this is called from a coroutine we cannot block directly, but
                     * return indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    24de:	be 01       	movw	r22, r28
    24e0:	68 5f       	subi	r22, 0xF8	; 248
    24e2:	7f 4f       	sbci	r23, 0xFF	; 255
    24e4:	ca 01       	movw	r24, r20
    24e6:	0e 94 04 09 	call	0x1208	; 0x1208 <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    24ea:	78 94       	sei
                    return errQUEUE_BLOCKED;
    24ec:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    }
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    24f4:	78 94       	sei
                    return errQUEUE_FULL;
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	fa cf       	rjmp	.-12     	; 0x24ee <xQueueCRSend+0x30>
                }
            }
        }
        portENABLE_INTERRUPTS();
    24fa:	78 94       	sei

        portDISABLE_INTERRUPTS();
    24fc:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    24fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2500:	89 17       	cp	r24, r25
    2502:	90 f4       	brcc	.+36     	; 0x2528 <xQueueCRSend+0x6a>
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	ce 01       	movw	r24, r28
    2508:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <prvCopyDataToQueue>
                xReturn = pdPASS;

                /* Were any co-routines waiting for data to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    250c:	89 89       	ldd	r24, Y+17	; 0x11
    250e:	81 11       	cpse	r24, r1
    2510:	03 c0       	rjmp	.+6      	; 0x2518 <xQueueCRSend+0x5a>
        {
            if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
            {
                /* There is room in the queue, copy the data into the queue. */
                prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
                xReturn = pdPASS;
    2512:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = errQUEUE_FULL;
            }
        }
        portENABLE_INTERRUPTS();
    2514:	78 94       	sei

        traceRETURN_xQueueCRSend( xReturn );

        return xReturn;
    2516:	eb cf       	rjmp	.-42     	; 0x24ee <xQueueCRSend+0x30>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2518:	ce 01       	movw	r24, r28
    251a:	41 96       	adiw	r24, 0x11	; 17
    251c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <xCoRoutineRemoveFromEventList>
    2520:	88 23       	and	r24, r24
    2522:	b9 f3       	breq	.-18     	; 0x2512 <xQueueCRSend+0x54>
                    {
                        /* The co-routine waiting has a higher priority so record
                         * that a yield might be appropriate. */
                        xReturn = errQUEUE_YIELD;
    2524:	8b ef       	ldi	r24, 0xFB	; 251
    2526:	f6 cf       	rjmp	.-20     	; 0x2514 <xQueueCRSend+0x56>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = errQUEUE_FULL;
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	f4 cf       	rjmp	.-24     	; 0x2514 <xQueueCRSend+0x56>

0000252c <xQueueCRReceive>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
                                void * pvBuffer,
                                TickType_t xTicksToWait )
    {
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	ec 01       	movw	r28, r24
    2532:	fb 01       	movw	r30, r22
        traceENTER_xQueueCRReceive( xQueue, pvBuffer, xTicksToWait );

        /* If the queue is already empty we may have to block.  A critical section
         * is required to prevent an interrupt adding something to the queue
         * between the check to see if the queue is empty and blocking on the queue. */
        portDISABLE_INTERRUPTS();
    2534:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2536:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2538:	81 11       	cpse	r24, r1
    253a:	11 c0       	rjmp	.+34     	; 0x255e <xQueueCRReceive+0x32>
            {
                /* There are no messages in the queue, do we want to block or just
                 * leave with nothing? */
                if( xTicksToWait > ( TickType_t ) 0 )
    253c:	41 15       	cp	r20, r1
    253e:	51 05       	cpc	r21, r1
    2540:	59 f0       	breq	.+22     	; 0x2558 <xQueueCRReceive+0x2c>
                {
                    /* As this is a co-routine we cannot block directly, but return
                     * indicating that we need to block. */
                    vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    2542:	be 01       	movw	r22, r28
    2544:	6f 5e       	subi	r22, 0xEF	; 239
    2546:	7f 4f       	sbci	r23, 0xFF	; 255
    2548:	ca 01       	movw	r24, r20
    254a:	0e 94 04 09 	call	0x1208	; 0x1208 <vCoRoutineAddToDelayedList>
                    portENABLE_INTERRUPTS();
    254e:	78 94       	sei
                    return errQUEUE_BLOCKED;
    2550:	8c ef       	ldi	r24, 0xFC	; 252
        portENABLE_INTERRUPTS();

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    }
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	08 95       	ret
                    portENABLE_INTERRUPTS();
                    return errQUEUE_BLOCKED;
                }
                else
                {
                    portENABLE_INTERRUPTS();
    2558:	78 94       	sei
                    return errQUEUE_FULL;
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	fa cf       	rjmp	.-12     	; 0x2552 <xQueueCRReceive+0x26>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portENABLE_INTERRUPTS();
    255e:	78 94       	sei

        portDISABLE_INTERRUPTS();
    2560:	f8 94       	cli
        {
            if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2562:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2564:	88 23       	and	r24, r24
    2566:	39 f1       	breq	.+78     	; 0x25b6 <xQueueCRReceive+0x8a>
            {
                /* Data is available from the queue. */
                pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    2568:	4c 8d       	ldd	r20, Y+28	; 0x1c
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	2e 81       	ldd	r18, Y+6	; 0x06
    256e:	3f 81       	ldd	r19, Y+7	; 0x07
    2570:	24 0f       	add	r18, r20
    2572:	35 1f       	adc	r19, r21
    2574:	3f 83       	std	Y+7, r19	; 0x07
    2576:	2e 83       	std	Y+6, r18	; 0x06

                if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    2578:	8c 81       	ldd	r24, Y+4	; 0x04
    257a:	9d 81       	ldd	r25, Y+5	; 0x05
    257c:	28 17       	cp	r18, r24
    257e:	39 07       	cpc	r19, r25
    2580:	20 f0       	brcs	.+8      	; 0x258a <xQueueCRReceive+0x5e>
                {
                    pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    2582:	88 81       	ld	r24, Y
    2584:	99 81       	ldd	r25, Y+1	; 0x01
    2586:	9f 83       	std	Y+7, r25	; 0x07
    2588:	8e 83       	std	Y+6, r24	; 0x06
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --( pxQueue->uxMessagesWaiting );
    258a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    258c:	91 50       	subi	r25, 0x01	; 1
    258e:	9a 8f       	std	Y+26, r25	; 0x1a
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2590:	6e 81       	ldd	r22, Y+6	; 0x06
    2592:	7f 81       	ldd	r23, Y+7	; 0x07
    2594:	cf 01       	movw	r24, r30
    2596:	0e 94 99 28 	call	0x5132	; 0x5132 <memcpy>

                xReturn = pdPASS;

                /* Were any co-routines waiting for space to become available? */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    259a:	88 85       	ldd	r24, Y+8	; 0x08
    259c:	81 11       	cpse	r24, r1
    259e:	03 c0       	rjmp	.+6      	; 0x25a6 <xQueueCRReceive+0x7a>
                }

                --( pxQueue->uxMessagesWaiting );
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

                xReturn = pdPASS;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        portENABLE_INTERRUPTS();
    25a2:	78 94       	sei

        traceRETURN_xQueueCRReceive( xReturn );

        return xReturn;
    25a4:	d6 cf       	rjmp	.-84     	; 0x2552 <xQueueCRReceive+0x26>
                {
                    /* In this instance the co-routine could be placed directly
                     * into the ready list as we are within a critical section.
                     * Instead the same pending ready list mechanism is used as if
                     * the event were caused from within an interrupt. */
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    25a6:	ce 01       	movw	r24, r28
    25a8:	08 96       	adiw	r24, 0x08	; 8
    25aa:	0e 94 4a 0a 	call	0x1494	; 0x1494 <xCoRoutineRemoveFromEventList>
    25ae:	88 23       	and	r24, r24
    25b0:	b9 f3       	breq	.-18     	; 0x25a0 <xQueueCRReceive+0x74>
                    {
                        xReturn = errQUEUE_YIELD;
    25b2:	8b ef       	ldi	r24, 0xFB	; 251
    25b4:	f6 cf       	rjmp	.-20     	; 0x25a2 <xQueueCRReceive+0x76>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xReturn = pdFAIL;
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	f4 cf       	rjmp	.-24     	; 0x25a2 <xQueueCRReceive+0x76>

000025ba <xQueueCRSendFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
                                    const void * pvItemToQueue,
                                    BaseType_t xCoRoutinePreviouslyWoken )
    {
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	ec 01       	movw	r28, r24
    25c2:	14 2f       	mov	r17, r20

        traceENTER_xQueueCRSendFromISR( xQueue, pvItemToQueue, xCoRoutinePreviouslyWoken );

        /* Cannot block within an ISR so if there is no space on the queue then
         * exit without doing anything. */
        if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    25c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c8:	98 17       	cp	r25, r24
    25ca:	88 f4       	brcc	.+34     	; 0x25ee <xQueueCRSendFromISR+0x34>
        {
            prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	ce 01       	movw	r24, r28
    25d0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <prvCopyDataToQueue>

            /* We only want to wake one co-routine per ISR, so check that a
             * co-routine has not already been woken. */
            if( xCoRoutinePreviouslyWoken == pdFALSE )
    25d4:	11 11       	cpse	r17, r1
    25d6:	0b c0       	rjmp	.+22     	; 0x25ee <xQueueCRSendFromISR+0x34>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    25d8:	89 89       	ldd	r24, Y+17	; 0x11
    25da:	88 23       	and	r24, r24
    25dc:	41 f0       	breq	.+16     	; 0x25ee <xQueueCRSendFromISR+0x34>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    25de:	ce 01       	movw	r24, r28
    25e0:	41 96       	adiw	r24, 0x11	; 17
    25e2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <xCoRoutineRemoveFromEventList>
    25e6:	11 e0       	ldi	r17, 0x01	; 1
    25e8:	81 11       	cpse	r24, r1
    25ea:	01 c0       	rjmp	.+2      	; 0x25ee <xQueueCRSendFromISR+0x34>
    25ec:	10 e0       	ldi	r17, 0x00	; 0
        }

        traceRETURN_xQueueCRSendFromISR( xCoRoutinePreviouslyWoken );

        return xCoRoutinePreviouslyWoken;
    }
    25ee:	81 2f       	mov	r24, r17
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	1f 91       	pop	r17
    25f6:	08 95       	ret

000025f8 <xQueueCRReceiveFromISR>:
#if ( configUSE_CO_ROUTINES == 1 )

    BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
                                       void * pvBuffer,
                                       BaseType_t * pxCoRoutineWoken )
    {
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	ec 01       	movw	r28, r24

        traceENTER_xQueueCRReceiveFromISR( xQueue, pvBuffer, pxCoRoutineWoken );

        /* We cannot block from an ISR, so check there is data available. If
         * not then just leave without doing anything. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2602:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2604:	88 23       	and	r24, r24
    2606:	91 f1       	breq	.+100    	; 0x266c <xQueueCRReceiveFromISR+0x74>
        {
            /* Copy the data from the queue. */
            pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
    2608:	2c 8d       	ldd	r18, Y+28	; 0x1c
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	ae 81       	ldd	r26, Y+6	; 0x06
    260e:	bf 81       	ldd	r27, Y+7	; 0x07
    2610:	a2 0f       	add	r26, r18
    2612:	b3 1f       	adc	r27, r19
    2614:	bf 83       	std	Y+7, r27	; 0x07
    2616:	ae 83       	std	Y+6, r26	; 0x06

            if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	9d 81       	ldd	r25, Y+5	; 0x05
    261c:	a8 17       	cp	r26, r24
    261e:	b9 07       	cpc	r27, r25
    2620:	20 f0       	brcs	.+8      	; 0x262a <xQueueCRReceiveFromISR+0x32>
            {
                pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    2622:	88 81       	ld	r24, Y
    2624:	99 81       	ldd	r25, Y+1	; 0x01
    2626:	9f 83       	std	Y+7, r25	; 0x07
    2628:	8e 83       	std	Y+6, r24	; 0x06
    262a:	8a 01       	movw	r16, r20
    262c:	cb 01       	movw	r24, r22
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            --( pxQueue->uxMessagesWaiting );
    262e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2630:	41 50       	subi	r20, 0x01	; 1
    2632:	4a 8f       	std	Y+26, r20	; 0x1a
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2634:	6e 81       	ldd	r22, Y+6	; 0x06
    2636:	7f 81       	ldd	r23, Y+7	; 0x07
    2638:	a9 01       	movw	r20, r18
    263a:	0e 94 99 28 	call	0x5132	; 0x5132 <memcpy>

            if( ( *pxCoRoutineWoken ) == pdFALSE )
    263e:	f8 01       	movw	r30, r16
    2640:	80 81       	ld	r24, Z
    2642:	88 23       	and	r24, r24
    2644:	31 f0       	breq	.+12     	; 0x2652 <xQueueCRReceiveFromISR+0x5a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
    2646:	81 e0       	ldi	r24, 0x01	; 1
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    }
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	08 95       	ret
            --( pxQueue->uxMessagesWaiting );
            ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

            if( ( *pxCoRoutineWoken ) == pdFALSE )
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2652:	88 85       	ldd	r24, Y+8	; 0x08
    2654:	88 23       	and	r24, r24
    2656:	b9 f3       	breq	.-18     	; 0x2646 <xQueueCRReceiveFromISR+0x4e>
                {
                    if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2658:	ce 01       	movw	r24, r28
    265a:	08 96       	adiw	r24, 0x08	; 8
    265c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <xCoRoutineRemoveFromEventList>
    2660:	88 23       	and	r24, r24
    2662:	89 f3       	breq	.-30     	; 0x2646 <xQueueCRReceiveFromISR+0x4e>
                    {
                        *pxCoRoutineWoken = pdTRUE;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	f8 01       	movw	r30, r16
    2668:	80 83       	st	Z, r24
    266a:	ee cf       	rjmp	.-36     	; 0x2648 <xQueueCRReceiveFromISR+0x50>

            xReturn = pdPASS;
        }
        else
        {
            xReturn = pdFAIL;
    266c:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xQueueCRReceiveFromISR( xReturn );

        return xReturn;
    266e:	ec cf       	rjmp	.-40     	; 0x2648 <xQueueCRReceiveFromISR+0x50>

00002670 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	0f 92       	push	r0
    267c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    267e:	8f 3f       	cpi	r24, 0xFF	; 255
    2680:	09 f4       	brne	.+2      	; 0x2684 <vQueueWaitForMessageRestricted+0x14>
    2682:	1d 8e       	std	Y+29, r1	; 0x1d
    2684:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2686:	8f 3f       	cpi	r24, 0xFF	; 255
    2688:	09 f4       	brne	.+2      	; 0x268c <vQueueWaitForMessageRestricted+0x1c>
    268a:	1e 8e       	std	Y+30, r1	; 0x1e
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2690:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2692:	81 11       	cpse	r24, r1
    2694:	04 c0       	rjmp	.+8      	; 0x269e <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2696:	ce 01       	movw	r24, r28
    2698:	41 96       	adiw	r24, 0x11	; 17
    269a:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    269e:	ce 01       	movw	r24, r28

        traceRETURN_vQueueWaitForMessageRestricted();
    }
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    26a4:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <prvUnlockQueue>

000026a8 <prvBytesInBuffer>:
    return xTail;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    26a8:	fc 01       	movw	r30, r24
    /* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    26aa:	44 81       	ldd	r20, Z+4	; 0x04
    26ac:	55 81       	ldd	r21, Z+5	; 0x05
    26ae:	22 81       	ldd	r18, Z+2	; 0x02
    26b0:	33 81       	ldd	r19, Z+3	; 0x03
    26b2:	24 0f       	add	r18, r20
    26b4:	35 1f       	adc	r19, r21
    xCount -= pxStreamBuffer->xTail;
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	b9 01       	movw	r22, r18
    26bc:	68 1b       	sub	r22, r24
    26be:	79 0b       	sbc	r23, r25
    26c0:	cb 01       	movw	r24, r22

    if( xCount >= pxStreamBuffer->xLength )
    26c2:	64 17       	cp	r22, r20
    26c4:	75 07       	cpc	r23, r21
    26c6:	10 f0       	brcs	.+4      	; 0x26cc <prvBytesInBuffer+0x24>
    {
        xCount -= pxStreamBuffer->xLength;
    26c8:	84 1b       	sub	r24, r20
    26ca:	95 0b       	sbc	r25, r21
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
}
    26cc:	08 95       	ret

000026ce <prvWriteBytesToBuffer>:

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount,
                                     size_t xHead )
{
    26ce:	af 92       	push	r10
    26d0:	bf 92       	push	r11
    26d2:	cf 92       	push	r12
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	6c 01       	movw	r12, r24
    26e4:	5b 01       	movw	r10, r22
    26e6:	7a 01       	movw	r14, r20
    26e8:	e9 01       	movw	r28, r18
    configASSERT( xCount > ( size_t ) 0 );

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
    26ea:	fc 01       	movw	r30, r24
    26ec:	04 81       	ldd	r16, Z+4	; 0x04
    26ee:	15 81       	ldd	r17, Z+5	; 0x05
    26f0:	02 1b       	sub	r16, r18
    26f2:	13 0b       	sbc	r17, r19
    26f4:	40 17       	cp	r20, r16
    26f6:	51 07       	cpc	r21, r17
    26f8:	08 f4       	brcc	.+2      	; 0x26fc <prvWriteBytesToBuffer+0x2e>
    26fa:	8a 01       	movw	r16, r20

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength );
    26fc:	f6 01       	movw	r30, r12
    26fe:	84 85       	ldd	r24, Z+12	; 0x0c
    2700:	95 85       	ldd	r25, Z+13	; 0x0d
    2702:	a8 01       	movw	r20, r16
    2704:	b5 01       	movw	r22, r10
    2706:	8c 0f       	add	r24, r28
    2708:	9d 1f       	adc	r25, r29
    270a:	0e 94 99 28 	call	0x5132	; 0x5132 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    270e:	0e 15       	cp	r16, r14
    2710:	1f 05       	cpc	r17, r15
    2712:	58 f4       	brcc	.+22     	; 0x272a <prvWriteBytesToBuffer+0x5c>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength );
    2714:	a7 01       	movw	r20, r14
    2716:	40 1b       	sub	r20, r16
    2718:	51 0b       	sbc	r21, r17
    271a:	b5 01       	movw	r22, r10
    271c:	60 0f       	add	r22, r16
    271e:	71 1f       	adc	r23, r17
    2720:	f6 01       	movw	r30, r12
    2722:	84 85       	ldd	r24, Z+12	; 0x0c
    2724:	95 85       	ldd	r25, Z+13	; 0x0d
    2726:	0e 94 99 28 	call	0x5132	; 0x5132 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xHead += xCount;
    272a:	ce 01       	movw	r24, r28
    272c:	8e 0d       	add	r24, r14
    272e:	9f 1d       	adc	r25, r15

    if( xHead >= pxStreamBuffer->xLength )
    2730:	f6 01       	movw	r30, r12
    2732:	24 81       	ldd	r18, Z+4	; 0x04
    2734:	35 81       	ldd	r19, Z+5	; 0x05
    2736:	82 17       	cp	r24, r18
    2738:	93 07       	cpc	r25, r19
    273a:	10 f0       	brcs	.+4      	; 0x2740 <prvWriteBytesToBuffer+0x72>
    {
        xHead -= pxStreamBuffer->xLength;
    273c:	82 1b       	sub	r24, r18
    273e:	93 0b       	sbc	r25, r19
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xHead;
}
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	0f 91       	pop	r16
    2748:	ff 90       	pop	r15
    274a:	ef 90       	pop	r14
    274c:	df 90       	pop	r13
    274e:	cf 90       	pop	r12
    2750:	bf 90       	pop	r11
    2752:	af 90       	pop	r10
    2754:	08 95       	ret

00002756 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
    2756:	af 92       	push	r10
    2758:	bf 92       	push	r11
    275a:	cf 92       	push	r12
    275c:	df 92       	push	r13
    275e:	ef 92       	push	r14
    2760:	ff 92       	push	r15
    2762:	0f 93       	push	r16
    2764:	1f 93       	push	r17
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	00 d0       	rcall	.+0      	; 0x276c <prvWriteMessageToBuffer+0x16>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	6c 01       	movw	r12, r24
    2772:	5b 01       	movw	r10, r22
    2774:	7a 01       	movw	r14, r20
    size_t xNextHead = pxStreamBuffer->xHead;
    2776:	fc 01       	movw	r30, r24
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    configMESSAGE_BUFFER_LENGTH_TYPE xMessageLength;

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    277c:	46 85       	ldd	r20, Z+14	; 0x0e
    277e:	40 ff       	sbrs	r20, 0
    2780:	28 c0       	rjmp	.+80     	; 0x27d2 <prvWriteMessageToBuffer+0x7c>
    {
        /* This is a message buffer, as opposed to a stream buffer. */

        /* Convert xDataLengthBytes to the message length type. */
        xMessageLength = ( configMESSAGE_BUFFER_LENGTH_TYPE ) xDataLengthBytes;
    2782:	fa 82       	std	Y+2, r15	; 0x02
    2784:	e9 82       	std	Y+1, r14	; 0x01

        /* Ensure the data length given fits within configMESSAGE_BUFFER_LENGTH_TYPE. */
        configASSERT( ( size_t ) xMessageLength == xDataLengthBytes );

        if( xSpace >= xRequiredSpace )
    2786:	20 17       	cp	r18, r16
    2788:	31 07       	cpc	r19, r17
    278a:	40 f1       	brcs	.+80     	; 0x27dc <prvWriteMessageToBuffer+0x86>
        {
            /* There is enough space to write both the message length and the message
             * itself into the buffer.  Start by writing the length of the data, the data
             * itself will be written later in this function. */
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
    278c:	9c 01       	movw	r18, r24
    278e:	42 e0       	ldi	r20, 0x02	; 2
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	be 01       	movw	r22, r28
    2794:	6f 5f       	subi	r22, 0xFF	; 255
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	c6 01       	movw	r24, r12
    279a:	0e 94 67 13 	call	0x26ce	; 0x26ce <prvWriteBytesToBuffer>
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    }

    if( xDataLengthBytes != ( size_t ) 0 )
    279e:	e1 14       	cp	r14, r1
    27a0:	f1 04       	cpc	r15, r1
    27a2:	49 f0       	breq	.+18     	; 0x27b6 <prvWriteMessageToBuffer+0x60>
    {
        /* Write the data to the buffer. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead );
    27a4:	9c 01       	movw	r18, r24
    27a6:	a7 01       	movw	r20, r14
    27a8:	b5 01       	movw	r22, r10
    27aa:	c6 01       	movw	r24, r12
    27ac:	0e 94 67 13 	call	0x26ce	; 0x26ce <prvWriteBytesToBuffer>
    27b0:	f6 01       	movw	r30, r12
    27b2:	93 83       	std	Z+3, r25	; 0x03
    27b4:	82 83       	std	Z+2, r24	; 0x02
    }

    return xDataLengthBytes;
}
    27b6:	c7 01       	movw	r24, r14
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	1f 91       	pop	r17
    27c2:	0f 91       	pop	r16
    27c4:	ff 90       	pop	r15
    27c6:	ef 90       	pop	r14
    27c8:	df 90       	pop	r13
    27ca:	cf 90       	pop	r12
    27cc:	bf 90       	pop	r11
    27ce:	af 90       	pop	r10
    27d0:	08 95       	ret
    else
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    27d2:	2e 15       	cp	r18, r14
    27d4:	3f 05       	cpc	r19, r15
    27d6:	18 f7       	brcc	.-58     	; 0x279e <prvWriteMessageToBuffer+0x48>
    27d8:	79 01       	movw	r14, r18
    27da:	e1 cf       	rjmp	.-62     	; 0x279e <prvWriteMessageToBuffer+0x48>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
        }
        else
        {
            /* Not enough space, so do not write data to the buffer. */
            xDataLengthBytes = 0;
    27dc:	f1 2c       	mov	r15, r1
    27de:	e1 2c       	mov	r14, r1
    27e0:	ea cf       	rjmp	.-44     	; 0x27b6 <prvWriteMessageToBuffer+0x60>

000027e2 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xCount,
                                      size_t xTail )
{
    27e2:	af 92       	push	r10
    27e4:	bf 92       	push	r11
    27e6:	cf 92       	push	r12
    27e8:	df 92       	push	r13
    27ea:	ef 92       	push	r14
    27ec:	ff 92       	push	r15
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
    27f6:	6c 01       	movw	r12, r24
    27f8:	5b 01       	movw	r10, r22
    27fa:	7a 01       	movw	r14, r20
    27fc:	e9 01       	movw	r28, r18
    configASSERT( xCount != ( size_t ) 0 );

    /* Calculate the number of bytes that can be read - which may be
     * less than the number wanted if the data wraps around to the start of
     * the buffer. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
    27fe:	fc 01       	movw	r30, r24
    2800:	04 81       	ldd	r16, Z+4	; 0x04
    2802:	15 81       	ldd	r17, Z+5	; 0x05
    2804:	02 1b       	sub	r16, r18
    2806:	13 0b       	sbc	r17, r19
    2808:	40 17       	cp	r20, r16
    280a:	51 07       	cpc	r21, r17
    280c:	08 f4       	brcc	.+2      	; 0x2810 <prvReadBytesFromBuffer+0x2e>
    280e:	8a 01       	movw	r16, r20

    /* Obtain the number of bytes it is possible to obtain in the first
     * read.  Asserts check bounds of read and write. */
    configASSERT( xFirstLength <= xCount );
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength );
    2810:	f6 01       	movw	r30, r12
    2812:	64 85       	ldd	r22, Z+12	; 0x0c
    2814:	75 85       	ldd	r23, Z+13	; 0x0d
    2816:	6c 0f       	add	r22, r28
    2818:	7d 1f       	adc	r23, r29
    281a:	a8 01       	movw	r20, r16
    281c:	c5 01       	movw	r24, r10
    281e:	0e 94 99 28 	call	0x5132	; 0x5132 <memcpy>

    /* If the total number of wanted bytes is greater than the number
     * that could be read in the first read... */
    if( xCount > xFirstLength )
    2822:	0e 15       	cp	r16, r14
    2824:	1f 05       	cpc	r17, r15
    2826:	58 f4       	brcc	.+22     	; 0x283e <prvReadBytesFromBuffer+0x5c>
    {
        /* ...then read the remaining bytes from the start of the buffer. */
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength );
    2828:	a7 01       	movw	r20, r14
    282a:	40 1b       	sub	r20, r16
    282c:	51 0b       	sbc	r21, r17
    282e:	f6 01       	movw	r30, r12
    2830:	64 85       	ldd	r22, Z+12	; 0x0c
    2832:	75 85       	ldd	r23, Z+13	; 0x0d
    2834:	c5 01       	movw	r24, r10
    2836:	80 0f       	add	r24, r16
    2838:	91 1f       	adc	r25, r17
    283a:	0e 94 99 28 	call	0x5132	; 0x5132 <memcpy>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Move the tail pointer to effectively remove the data read from the buffer. */
    xTail += xCount;
    283e:	ce 01       	movw	r24, r28
    2840:	8e 0d       	add	r24, r14
    2842:	9f 1d       	adc	r25, r15

    if( xTail >= pxStreamBuffer->xLength )
    2844:	f6 01       	movw	r30, r12
    2846:	24 81       	ldd	r18, Z+4	; 0x04
    2848:	35 81       	ldd	r19, Z+5	; 0x05
    284a:	82 17       	cp	r24, r18
    284c:	93 07       	cpc	r25, r19
    284e:	10 f0       	brcs	.+4      	; 0x2854 <prvReadBytesFromBuffer+0x72>
    {
        xTail -= pxStreamBuffer->xLength;
    2850:	82 1b       	sub	r24, r18
    2852:	93 0b       	sbc	r25, r19
    }

    return xTail;
}
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	ff 90       	pop	r15
    285e:	ef 90       	pop	r14
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
    2864:	bf 90       	pop	r11
    2866:	af 90       	pop	r10
    2868:	08 95       	ret

0000286a <prvReadMessageFromBuffer>:

static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable )
{
    286a:	af 92       	push	r10
    286c:	bf 92       	push	r11
    286e:	cf 92       	push	r12
    2870:	df 92       	push	r13
    2872:	ef 92       	push	r14
    2874:	ff 92       	push	r15
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	00 d0       	rcall	.+0      	; 0x2880 <prvReadMessageFromBuffer+0x16>
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	7c 01       	movw	r14, r24
    2886:	5b 01       	movw	r10, r22
    2888:	6a 01       	movw	r12, r20
    288a:	89 01       	movw	r16, r18
    size_t xCount, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
    size_t xNextTail = pxStreamBuffer->xTail;
    288c:	fc 01       	movw	r30, r24
    288e:	20 81       	ld	r18, Z
    2890:	31 81       	ldd	r19, Z+1	; 0x01

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2892:	86 85       	ldd	r24, Z+14	; 0x0e
    2894:	80 ff       	sbrs	r24, 0
    2896:	12 c0       	rjmp	.+36     	; 0x28bc <prvReadMessageFromBuffer+0x52>
    {
        /* A discrete message is being received.  First receive the length
         * of the message. */
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
    2898:	42 e0       	ldi	r20, 0x02	; 2
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	be 01       	movw	r22, r28
    289e:	6f 5f       	subi	r22, 0xFF	; 255
    28a0:	7f 4f       	sbci	r23, 0xFF	; 255
    28a2:	c7 01       	movw	r24, r14
    28a4:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <prvReadBytesFromBuffer>
    28a8:	9c 01       	movw	r18, r24
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
    28ae:	02 50       	subi	r16, 0x02	; 2
    28b0:	11 09       	sbc	r17, r1

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    28b2:	c8 16       	cp	r12, r24
    28b4:	d9 06       	cpc	r13, r25
    28b6:	f8 f4       	brcc	.+62     	; 0x28f6 <prvReadMessageFromBuffer+0x8c>
        {
            /* The user has provided insufficient space to read the message. */
            xNextMessageLength = 0;
    28b8:	d1 2c       	mov	r13, r1
    28ba:	c1 2c       	mov	r12, r1
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
    28bc:	c0 16       	cp	r12, r16
    28be:	d1 06       	cpc	r13, r17
    28c0:	08 f4       	brcc	.+2      	; 0x28c4 <prvReadMessageFromBuffer+0x5a>
    28c2:	86 01       	movw	r16, r12

    if( xCount != ( size_t ) 0 )
    28c4:	01 15       	cp	r16, r1
    28c6:	11 05       	cpc	r17, r1
    28c8:	41 f0       	breq	.+16     	; 0x28da <prvReadMessageFromBuffer+0x70>
    {
        /* Read the actual data and update the tail to mark the data as officially consumed. */
        /* MISRA Ref 11.5.5 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail );
    28ca:	a8 01       	movw	r20, r16
    28cc:	b5 01       	movw	r22, r10
    28ce:	c7 01       	movw	r24, r14
    28d0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <prvReadBytesFromBuffer>
    28d4:	f7 01       	movw	r30, r14
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	80 83       	st	Z, r24
    }

    return xCount;
}
    28da:	c8 01       	movw	r24, r16
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	df 90       	pop	r13
    28ee:	cf 90       	pop	r12
    28f0:	bf 90       	pop	r11
    28f2:	af 90       	pop	r10
    28f4:	08 95       	ret
    28f6:	6c 01       	movw	r12, r24
    28f8:	e1 cf       	rjmp	.-62     	; 0x28bc <prvReadMessageFromBuffer+0x52>

000028fa <xStreamBufferGenericCreate>:
    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xStreamBufferType,
                                                     StreamBufferCallbackFunction_t pxSendCompletedCallback,
                                                     StreamBufferCallbackFunction_t pxReceiveCompletedCallback )
    {
    28fa:	ef 92       	push	r14
    28fc:	ff 92       	push	r15
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	ec 01       	movw	r28, r24
    2906:	7b 01       	movw	r14, r22
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    2908:	11 e0       	ldi	r17, 0x01	; 1

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xStreamBufferType == sbTYPE_MESSAGE_BUFFER )
    290a:	41 30       	cpi	r20, 0x01	; 1
    290c:	21 f0       	breq	.+8      	; 0x2916 <xStreamBufferGenericCreate+0x1c>
            configASSERT( xBufferSizeBytes > 0 );
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
    290e:	10 e0       	ldi	r17, 0x00	; 0
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
        }
        else if( xStreamBufferType == sbTYPE_STREAM_BATCHING_BUFFER )
    2910:	42 30       	cpi	r20, 0x02	; 2
    2912:	09 f4       	brne	.+2      	; 0x2916 <xStreamBufferGenericCreate+0x1c>
        {
            /* Is a batching buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_BATCHING_BUFFER;
    2914:	14 e0       	ldi	r17, 0x04	; 4

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
    2916:	e1 14       	cp	r14, r1
    2918:	f1 04       	cpc	r15, r1
    291a:	19 f4       	brne	.+6      	; 0x2922 <xStreamBufferGenericCreate+0x28>
        {
            xTriggerLevelBytes = ( size_t ) 1;
    291c:	ee 24       	eor	r14, r14
    291e:	e3 94       	inc	r14
    2920:	f1 2c       	mov	r15, r1
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
        }
        else
        {
            pvAllocatedMemory = NULL;
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	e0 e0       	ldi	r30, 0x00	; 0
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
    2926:	cf 3e       	cpi	r28, 0xEF	; 239
    2928:	8f ef       	ldi	r24, 0xFF	; 255
    292a:	d8 07       	cpc	r29, r24
    292c:	b8 f4       	brcc	.+46     	; 0x295c <xStreamBufferGenericCreate+0x62>
        {
            xBufferSizeBytes++;
            pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
    292e:	ce 01       	movw	r24, r28
    2930:	41 96       	adiw	r24, 0x11	; 17
    2932:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <pvPortMalloc>
    2936:	fc 01       	movw	r30, r24
        else
        {
            pvAllocatedMemory = NULL;
        }

        if( pvAllocatedMemory != NULL )
    2938:	89 2b       	or	r24, r25
    293a:	81 f0       	breq	.+32     	; 0x295c <xStreamBufferGenericCreate+0x62>
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    293c:	8c e0       	ldi	r24, 0x0C	; 12
    293e:	df 01       	movw	r26, r30
    2940:	1d 92       	st	X+, r1
    2942:	8a 95       	dec	r24
    2944:	e9 f7       	brne	.-6      	; 0x2940 <xStreamBufferGenericCreate+0x46>
        if( pvAllocatedMemory != NULL )
        {
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */
    2946:	cf 01       	movw	r24, r30
    2948:	40 96       	adiw	r24, 0x10	; 16
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    294a:	95 87       	std	Z+13, r25	; 0x0d
    294c:	84 87       	std	Z+12, r24	; 0x0c
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1U + sizeof( StreamBuffer_t ) ) )
        {
            xBufferSizeBytes++;
    294e:	21 96       	adiw	r28, 0x01	; 1
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    2950:	d5 83       	std	Z+5, r29	; 0x05
    2952:	c4 83       	std	Z+4, r28	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2954:	f7 82       	std	Z+7, r15	; 0x07
    2956:	e6 82       	std	Z+6, r14	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    2958:	16 87       	std	Z+14, r17	; 0x0e
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    295a:	17 86       	std	Z+15, r1	; 0x0f

        /* MISRA Ref 11.5.1 [Malloc memory assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        return ( StreamBufferHandle_t ) pvAllocatedMemory;
    }
    295c:	cf 01       	movw	r24, r30
    295e:	df 91       	pop	r29
    2960:	cf 91       	pop	r28
    2962:	1f 91       	pop	r17
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	08 95       	ret

0000296a <vStreamBufferDelete>:

    configASSERT( pxStreamBuffer );

    traceSTREAM_BUFFER_DELETE( xStreamBuffer );

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    296a:	fc 01       	movw	r30, r24
    296c:	26 85       	ldd	r18, Z+14	; 0x0e
    296e:	21 ff       	sbrs	r18, 1
    {
        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
        {
            /* Both the structure and the buffer were allocated using a single call
            * to pvPortMalloc(), hence only one call to vPortFree() is required. */
            vPortFree( ( void * ) pxStreamBuffer );
    2970:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <vPortFree>
    }
    else
    {
        /* The structure and buffer were not allocated dynamically and cannot be
         * freed - just scrub the structure so future use will assert. */
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    2974:	20 e1       	ldi	r18, 0x10	; 16
    2976:	11 92       	st	Z+, r1
    2978:	2a 95       	dec	r18
    297a:	e9 f7       	brne	.-6      	; 0x2976 <vStreamBufferDelete+0xc>
    }

    traceRETURN_vStreamBufferDelete();
}
    297c:	08 95       	ret

0000297e <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    297e:	fc 01       	movw	r30, r24
        uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
    }
    #endif

    /* Can only reset a message buffer if there are no tasks blocked on it. */
    taskENTER_CRITICAL();
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	0f 92       	push	r0
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    2986:	80 85       	ldd	r24, Z+8	; 0x08
    2988:	91 85       	ldd	r25, Z+9	; 0x09
    298a:	89 2b       	or	r24, r25
    298c:	b1 f4       	brne	.+44     	; 0x29ba <xStreamBufferReset+0x3c>
    298e:	82 85       	ldd	r24, Z+10	; 0x0a
    2990:	93 85       	ldd	r25, Z+11	; 0x0b
    2992:	89 2b       	or	r24, r25
    2994:	91 f4       	brne	.+36     	; 0x29ba <xStreamBufferReset+0x3c>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    2996:	86 81       	ldd	r24, Z+6	; 0x06
    2998:	97 81       	ldd	r25, Z+7	; 0x07
    299a:	24 81       	ldd	r18, Z+4	; 0x04
    299c:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    299e:	4c e0       	ldi	r20, 0x0C	; 12
    29a0:	df 01       	movw	r26, r30
    29a2:	1d 92       	st	X+, r1
    29a4:	4a 95       	dec	r20
    29a6:	e9 f7       	brne	.-6      	; 0x29a2 <xStreamBufferReset+0x24>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    29a8:	35 83       	std	Z+5, r19	; 0x05
    29aa:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    29ac:	97 83       	std	Z+7, r25	; 0x07
    29ae:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    29b0:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET( xStreamBuffer );

            xReturn = pdPASS;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    29b4:	0f 90       	pop	r0
    29b6:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xStreamBufferReset( xReturn );

    return xReturn;
}
    29b8:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	fb cf       	rjmp	.-10     	; 0x29b4 <xStreamBufferReset+0x36>

000029be <xStreamBufferResetFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    29be:	fc 01       	movw	r30, r24
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
    29c0:	80 85       	ldd	r24, Z+8	; 0x08
    29c2:	91 85       	ldd	r25, Z+9	; 0x09
    29c4:	89 2b       	or	r24, r25
    29c6:	a1 f4       	brne	.+40     	; 0x29f0 <xStreamBufferResetFromISR+0x32>
    29c8:	82 85       	ldd	r24, Z+10	; 0x0a
    29ca:	93 85       	ldd	r25, Z+11	; 0x0b
    29cc:	89 2b       	or	r24, r25
    29ce:	81 f4       	brne	.+32     	; 0x29f0 <xStreamBufferResetFromISR+0x32>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
    29d0:	86 81       	ldd	r24, Z+6	; 0x06
    29d2:	97 81       	ldd	r25, Z+7	; 0x07
    29d4:	24 81       	ldd	r18, Z+4	; 0x04
    29d6:	35 81       	ldd	r19, Z+5	; 0x05
        #define STREAM_BUFFER_BUFFER_WRITE_VALUE    ( 0x55 )
        configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
    }
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    29d8:	4c e0       	ldi	r20, 0x0C	; 12
    29da:	df 01       	movw	r26, r30
    29dc:	1d 92       	st	X+, r1
    29de:	4a 95       	dec	r20
    29e0:	e9 f7       	brne	.-6      	; 0x29dc <xStreamBufferResetFromISR+0x1e>
    pxStreamBuffer->pucBuffer = pucBuffer;
    pxStreamBuffer->xLength = xBufferSizeBytes;
    29e2:	35 83       	std	Z+5, r19	; 0x05
    29e4:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    29e6:	97 83       	std	Z+7, r25	; 0x07
    29e8:	86 83       	std	Z+6, r24	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    pxStreamBuffer->uxNotificationIndex = tskDEFAULT_INDEX_TO_NOTIFY;
    29ea:	17 86       	std	Z+15, r1	; 0x0f
            }
            #endif

            traceSTREAM_BUFFER_RESET_FROM_ISR( xStreamBuffer );

            xReturn = pdPASS;
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	08 95       	ret
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferResetFromISR( StreamBufferHandle_t xStreamBuffer )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    BaseType_t xReturn = pdFAIL;
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferResetFromISR( xReturn );

    return xReturn;
}
    29f2:	08 95       	ret

000029f4 <xStreamBufferSetTriggerLevel>:
    traceENTER_xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );

    configASSERT( pxStreamBuffer );

    /* It is not valid for the trigger level to be 0. */
    if( xTriggerLevel == ( size_t ) 0 )
    29f4:	61 15       	cp	r22, r1
    29f6:	71 05       	cpc	r23, r1
    29f8:	11 f4       	brne	.+4      	; 0x29fe <xStreamBufferSetTriggerLevel+0xa>
    {
        xTriggerLevel = ( size_t ) 1;
    29fa:	61 e0       	ldi	r22, 0x01	; 1
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    }

    /* The trigger level is the number of bytes that must be in the stream
     * buffer before a task that is waiting for data is unblocked. */
    if( xTriggerLevel < pxStreamBuffer->xLength )
    29fe:	fc 01       	movw	r30, r24
    2a00:	24 81       	ldd	r18, Z+4	; 0x04
    2a02:	35 81       	ldd	r19, Z+5	; 0x05
    2a04:	62 17       	cp	r22, r18
    2a06:	73 07       	cpc	r23, r19
    2a08:	20 f4       	brcc	.+8      	; 0x2a12 <xStreamBufferSetTriggerLevel+0x1e>
    {
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    2a0a:	77 83       	std	Z+7, r23	; 0x07
    2a0c:	66 83       	std	Z+6, r22	; 0x06
        xReturn = pdPASS;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	08 95       	ret
    }
    else
    {
        xReturn = pdFALSE;
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferSetTriggerLevel( xReturn );

    return xReturn;
}
    2a14:	08 95       	ret

00002a16 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    2a16:	fc 01       	movw	r30, r24
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    2a18:	24 81       	ldd	r18, Z+4	; 0x04
    2a1a:	35 81       	ldd	r19, Z+5	; 0x05
    /* The code below reads xTail and then xHead.  This is safe if the stream
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    2a20:	60 81       	ld	r22, Z
    2a22:	71 81       	ldd	r23, Z+1	; 0x01
        xSpace -= pxStreamBuffer->xHead;
    2a24:	42 81       	ldd	r20, Z+2	; 0x02
    2a26:	53 81       	ldd	r21, Z+3	; 0x03
    } while( xOriginalTail != pxStreamBuffer->xTail );
    2a28:	a0 81       	ld	r26, Z
    2a2a:	b1 81       	ldd	r27, Z+1	; 0x01
    2a2c:	a8 17       	cp	r26, r24
    2a2e:	b9 07       	cpc	r27, r25
    2a30:	a9 f7       	brne	.-22     	; 0x2a1c <xStreamBufferSpacesAvailable+0x6>

    xSpace -= ( size_t ) 1;
    2a32:	c9 01       	movw	r24, r18
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	86 0f       	add	r24, r22
    2a38:	97 1f       	adc	r25, r23
    2a3a:	84 1b       	sub	r24, r20
    2a3c:	95 0b       	sbc	r25, r21

    if( xSpace >= pxStreamBuffer->xLength )
    2a3e:	82 17       	cp	r24, r18
    2a40:	93 07       	cpc	r25, r19
    2a42:	10 f0       	brcs	.+4      	; 0x2a48 <xStreamBufferSpacesAvailable+0x32>
    {
        xSpace -= pxStreamBuffer->xLength;
    2a44:	82 1b       	sub	r24, r18
    2a46:	93 0b       	sbc	r25, r19
    }

    traceRETURN_xStreamBufferSpacesAvailable( xSpace );

    return xSpace;
}
    2a48:	08 95       	ret

00002a4a <xStreamBufferBytesAvailable>:

    traceENTER_xStreamBufferBytesAvailable( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    2a4a:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <prvBytesInBuffer>

00002a4e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    2a4e:	2f 92       	push	r2
    2a50:	3f 92       	push	r3
    2a52:	4f 92       	push	r4
    2a54:	5f 92       	push	r5
    2a56:	6f 92       	push	r6
    2a58:	7f 92       	push	r7
    2a5a:	8f 92       	push	r8
    2a5c:	9f 92       	push	r9
    2a5e:	af 92       	push	r10
    2a60:	bf 92       	push	r11
    2a62:	cf 92       	push	r12
    2a64:	df 92       	push	r13
    2a66:	ef 92       	push	r14
    2a68:	ff 92       	push	r15
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <xStreamBufferSend+0x26>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <xStreamBufferSend+0x28>
    2a76:	1f 92       	push	r1
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	5c 01       	movw	r10, r24
    2a7e:	1b 01       	movw	r2, r22
    2a80:	2a 01       	movw	r4, r20
    2a82:	3d 83       	std	Y+5, r19	; 0x05
    2a84:	2c 83       	std	Y+4, r18	; 0x04
    configASSERT( pvTxData );
    configASSERT( pxStreamBuffer );

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    2a86:	fc 01       	movw	r30, r24
    2a88:	84 81       	ldd	r24, Z+4	; 0x04
    2a8a:	95 81       	ldd	r25, Z+5	; 0x05
    2a8c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2a8e:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2a90:	4a 01       	movw	r8, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2a92:	20 ff       	sbrs	r18, 0
    2a94:	54 c0       	rjmp	.+168    	; 0x2b3e <xStreamBufferSend+0xf0>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2a96:	f2 e0       	ldi	r31, 0x02	; 2
    2a98:	8f 0e       	add	r8, r31
    2a9a:	91 1c       	adc	r9, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    2a9c:	88 15       	cp	r24, r8
    2a9e:	99 05       	cpc	r25, r9
    2aa0:	10 f4       	brcc	.+4      	; 0x2aa6 <xStreamBufferSend+0x58>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    2aa2:	1d 82       	std	Y+5, r1	; 0x05
    2aa4:	1c 82       	std	Y+4, r1	; 0x04
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    2aaa:	89 2b       	or	r24, r25
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <xStreamBufferSend+0x62>
    2aae:	4d c0       	rjmp	.+154    	; 0x2b4a <xStreamBufferSend+0xfc>
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2ab0:	c5 01       	movw	r24, r10
    2ab2:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <xStreamBufferSpacesAvailable>
    2ab6:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2ab8:	84 01       	movw	r16, r8
    2aba:	93 01       	movw	r18, r6
    2abc:	a2 01       	movw	r20, r4
    2abe:	b1 01       	movw	r22, r2
    2ac0:	c5 01       	movw	r24, r10
    2ac2:	0e 94 ab 13 	call	0x2756	; 0x2756 <prvWriteMessageToBuffer>
    2ac6:	4c 01       	movw	r8, r24

    if( xReturn > ( size_t ) 0 )
    2ac8:	89 2b       	or	r24, r25
    2aca:	01 f1       	breq	.+64     	; 0x2b0c <xStreamBufferSend+0xbe>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2acc:	c5 01       	movw	r24, r10
    2ace:	0e 94 54 13 	call	0x26a8	; 0x26a8 <prvBytesInBuffer>
    2ad2:	f5 01       	movw	r30, r10
    2ad4:	26 81       	ldd	r18, Z+6	; 0x06
    2ad6:	37 81       	ldd	r19, Z+7	; 0x07
    2ad8:	82 17       	cp	r24, r18
    2ada:	93 07       	cpc	r25, r19
    2adc:	b8 f0       	brcs	.+46     	; 0x2b0c <xStreamBufferSend+0xbe>
        {
            prvSEND_COMPLETED( pxStreamBuffer );
    2ade:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
    2ae2:	f5 01       	movw	r30, r10
    2ae4:	80 85       	ldd	r24, Z+8	; 0x08
    2ae6:	91 85       	ldd	r25, Z+9	; 0x09
    2ae8:	89 2b       	or	r24, r25
    2aea:	71 f0       	breq	.+28     	; 0x2b08 <xStreamBufferSend+0xba>
    2aec:	80 85       	ldd	r24, Z+8	; 0x08
    2aee:	91 85       	ldd	r25, Z+9	; 0x09
    2af0:	f1 2c       	mov	r15, r1
    2af2:	e1 2c       	mov	r14, r1
    2af4:	00 e0       	ldi	r16, 0x00	; 0
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	a9 01       	movw	r20, r18
    2afc:	67 85       	ldd	r22, Z+15	; 0x0f
    2afe:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <xTaskGenericNotify>
    2b02:	f5 01       	movw	r30, r10
    2b04:	11 86       	std	Z+9, r1	; 0x09
    2b06:	10 86       	std	Z+8, r1	; 0x08
    2b08:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    }

    traceRETURN_xStreamBufferSend( xReturn );

    return xReturn;
}
    2b0c:	c4 01       	movw	r24, r8
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	df 91       	pop	r29
    2b1a:	cf 91       	pop	r28
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	ff 90       	pop	r15
    2b22:	ef 90       	pop	r14
    2b24:	df 90       	pop	r13
    2b26:	cf 90       	pop	r12
    2b28:	bf 90       	pop	r11
    2b2a:	af 90       	pop	r10
    2b2c:	9f 90       	pop	r9
    2b2e:	8f 90       	pop	r8
    2b30:	7f 90       	pop	r7
    2b32:	6f 90       	pop	r6
    2b34:	5f 90       	pop	r5
    2b36:	4f 90       	pop	r4
    2b38:	3f 90       	pop	r3
    2b3a:	2f 90       	pop	r2
    2b3c:	08 95       	ret
    2b3e:	84 17       	cp	r24, r20
    2b40:	95 07       	cpc	r25, r21
    2b42:	08 f0       	brcs	.+2      	; 0x2b46 <xStreamBufferSend+0xf8>
    2b44:	b0 cf       	rjmp	.-160    	; 0x2aa6 <xStreamBufferSend+0x58>
    2b46:	4c 01       	movw	r8, r24
    2b48:	ae cf       	rjmp	.-164    	; 0x2aa6 <xStreamBufferSend+0x58>
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    {
        vTaskSetTimeOutState( &xTimeOut );
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	01 96       	adiw	r24, 0x01	; 1
    2b4e:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2b58:	c5 01       	movw	r24, r10
    2b5a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <xStreamBufferSpacesAvailable>
    2b5e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    2b60:	88 15       	cp	r24, r8
    2b62:	99 05       	cpc	r25, r9
    2b64:	58 f5       	brcc	.+86     	; 0x2bbc <xStreamBufferSend+0x16e>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    2b66:	f5 01       	movw	r30, r10
    2b68:	67 85       	ldd	r22, Z+15	; 0x0f
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	0e 94 89 22 	call	0x4512	; 0x4512 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2b72:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <xTaskGetCurrentTaskHandle>
    2b76:	f5 01       	movw	r30, r10
    2b78:	93 87       	std	Z+11, r25	; 0x0b
    2b7a:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    2b7c:	0f 90       	pop	r0
    2b7e:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2b80:	cc 80       	ldd	r12, Y+4	; 0x04
    2b82:	dd 80       	ldd	r13, Y+5	; 0x05
    2b84:	f1 2c       	mov	r15, r1
    2b86:	e1 2c       	mov	r14, r1
    2b88:	00 e0       	ldi	r16, 0x00	; 0
    2b8a:	10 e0       	ldi	r17, 0x00	; 0
    2b8c:	98 01       	movw	r18, r16
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	ba 01       	movw	r22, r20
    2b94:	87 85       	ldd	r24, Z+15	; 0x0f
    2b96:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    2b9a:	f5 01       	movw	r30, r10
    2b9c:	13 86       	std	Z+11, r1	; 0x0b
    2b9e:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2ba0:	be 01       	movw	r22, r28
    2ba2:	6c 5f       	subi	r22, 0xFC	; 252
    2ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	01 96       	adiw	r24, 0x01	; 1
    2baa:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <xTaskCheckForTimeOut>
    2bae:	88 23       	and	r24, r24
    2bb0:	81 f2       	breq	.-96     	; 0x2b52 <xStreamBufferSend+0x104>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    2bb2:	61 14       	cp	r6, r1
    2bb4:	71 04       	cpc	r7, r1
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <xStreamBufferSend+0x16c>
    2bb8:	7b cf       	rjmp	.-266    	; 0x2ab0 <xStreamBufferSend+0x62>
    2bba:	7e cf       	rjmp	.-260    	; 0x2ab8 <xStreamBufferSend+0x6a>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    2bbc:	0f 90       	pop	r0
    2bbe:	0f be       	out	0x3f, r0	; 63
                    break;
    2bc0:	f8 cf       	rjmp	.-16     	; 0x2bb2 <xStreamBufferSend+0x164>

00002bc2 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    2bc2:	af 92       	push	r10
    2bc4:	bf 92       	push	r11
    2bc6:	cf 92       	push	r12
    2bc8:	df 92       	push	r13
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	ec 01       	movw	r28, r24
    2bd8:	5b 01       	movw	r10, r22
    2bda:	7a 01       	movw	r14, r20
    2bdc:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2bde:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2be0:	8a 01       	movw	r16, r20

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2be2:	80 ff       	sbrs	r24, 0
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <xStreamBufferSendFromISR+0x28>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2be6:	0e 5f       	subi	r16, 0xFE	; 254
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    2bea:	ce 01       	movw	r24, r28
    2bec:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2bf0:	9c 01       	movw	r18, r24
    2bf2:	a7 01       	movw	r20, r14
    2bf4:	b5 01       	movw	r22, r10
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	0e 94 ab 13 	call	0x2756	; 0x2756 <prvWriteMessageToBuffer>
    2bfc:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    2bfe:	89 2b       	or	r24, r25
    2c00:	c9 f0       	breq	.+50     	; 0x2c34 <xStreamBufferSendFromISR+0x72>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2c02:	ce 01       	movw	r24, r28
    2c04:	0e 94 54 13 	call	0x26a8	; 0x26a8 <prvBytesInBuffer>
    2c08:	2e 81       	ldd	r18, Y+6	; 0x06
    2c0a:	3f 81       	ldd	r19, Y+7	; 0x07
    2c0c:	82 17       	cp	r24, r18
    2c0e:	93 07       	cpc	r25, r19
    2c10:	88 f0       	brcs	.+34     	; 0x2c34 <xStreamBufferSendFromISR+0x72>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2c12:	88 85       	ldd	r24, Y+8	; 0x08
    2c14:	99 85       	ldd	r25, Y+9	; 0x09
    2c16:	89 2b       	or	r24, r25
    2c18:	69 f0       	breq	.+26     	; 0x2c34 <xStreamBufferSendFromISR+0x72>
    2c1a:	88 85       	ldd	r24, Y+8	; 0x08
    2c1c:	99 85       	ldd	r25, Y+9	; 0x09
    2c1e:	f1 2c       	mov	r15, r1
    2c20:	e1 2c       	mov	r14, r1
    2c22:	00 e0       	ldi	r16, 0x00	; 0
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	a9 01       	movw	r20, r18
    2c2a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c2c:	0e 94 d5 20 	call	0x41aa	; 0x41aa <xTaskGenericNotifyFromISR>
    2c30:	19 86       	std	Y+9, r1	; 0x09
    2c32:	18 86       	std	Y+8, r1	; 0x08

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
    traceRETURN_xStreamBufferSendFromISR( xReturn );

    return xReturn;
}
    2c34:	c5 01       	movw	r24, r10
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	ff 90       	pop	r15
    2c40:	ef 90       	pop	r14
    2c42:	df 90       	pop	r13
    2c44:	cf 90       	pop	r12
    2c46:	bf 90       	pop	r11
    2c48:	af 90       	pop	r10
    2c4a:	08 95       	ret

00002c4c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    2c4c:	6f 92       	push	r6
    2c4e:	7f 92       	push	r7
    2c50:	8f 92       	push	r8
    2c52:	9f 92       	push	r9
    2c54:	af 92       	push	r10
    2c56:	bf 92       	push	r11
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	ec 01       	movw	r28, r24
    2c6a:	4b 01       	movw	r8, r22
    2c6c:	3a 01       	movw	r6, r20
    2c6e:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2c70:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c72:	80 fd       	sbrc	r24, 0
    2c74:	47 c0       	rjmp	.+142    	; 0x2d04 <xStreamBufferReceive+0xb8>
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2c76:	b1 2c       	mov	r11, r1
    2c78:	a1 2c       	mov	r10, r1
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_BATCHING_BUFFER ) != ( uint8_t ) 0 )
    2c7a:	82 ff       	sbrs	r24, 2
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <xStreamBufferReceive+0x36>
    {
        /* Force task to block if the batching buffer contains less bytes than
         * the trigger level. */
        xBytesToStoreMessageLength = pxStreamBuffer->xTriggerLevelBytes;
    2c7e:	ae 80       	ldd	r10, Y+6	; 0x06
    2c80:	bf 80       	ldd	r11, Y+7	; 0x07
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    2c82:	c1 14       	cp	r12, r1
    2c84:	d1 04       	cpc	r13, r1
    2c86:	29 f1       	breq	.+74     	; 0x2cd2 <xStreamBufferReceive+0x86>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2c8e:	ce 01       	movw	r24, r28
    2c90:	0e 94 54 13 	call	0x26a8	; 0x26a8 <prvBytesInBuffer>
    2c94:	8c 01       	movw	r16, r24
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. If this function was invoked by a stream batch buffer read
             * then xBytesToStoreMessageLength will be xTriggerLevelBytes value
             * for the buffer.*/
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    2c96:	a8 16       	cp	r10, r24
    2c98:	b9 06       	cpc	r11, r25
    2c9a:	48 f0       	brcs	.+18     	; 0x2cae <xStreamBufferReceive+0x62>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClearIndexed( NULL, pxStreamBuffer->uxNotificationIndex );
    2c9c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	0e 94 89 22 	call	0x4512	; 0x4512 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    2ca6:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <xTaskGetCurrentTaskHandle>
    2caa:	99 87       	std	Y+9, r25	; 0x09
    2cac:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2cae:	0f 90       	pop	r0
    2cb0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    2cb2:	a0 16       	cp	r10, r16
    2cb4:	b1 06       	cpc	r11, r17
    2cb6:	50 f1       	brcs	.+84     	; 0x2d0c <xStreamBufferReceive+0xc0>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWaitIndexed( pxStreamBuffer->uxNotificationIndex, ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    2cb8:	f1 2c       	mov	r15, r1
    2cba:	e1 2c       	mov	r14, r1
    2cbc:	00 e0       	ldi	r16, 0x00	; 0
    2cbe:	10 e0       	ldi	r17, 0x00	; 0
    2cc0:	98 01       	movw	r18, r16
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	ba 01       	movw	r22, r20
    2cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cca:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    2cce:	19 86       	std	Y+9, r1	; 0x09
    2cd0:	18 86       	std	Y+8, r1	; 0x08
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <prvBytesInBuffer>
    2cd8:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2cda:	a8 16       	cp	r10, r24
    2cdc:	b9 06       	cpc	r11, r25
    2cde:	b0 f0       	brcs	.+44     	; 0x2d0c <xStreamBufferReceive+0xc0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2ce0:	b1 2c       	mov	r11, r1
    2ce2:	a1 2c       	mov	r10, r1
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
}
    2ce4:	c5 01       	movw	r24, r10
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ff 90       	pop	r15
    2cf0:	ef 90       	pop	r14
    2cf2:	df 90       	pop	r13
    2cf4:	cf 90       	pop	r12
    2cf6:	bf 90       	pop	r11
    2cf8:	af 90       	pop	r10
    2cfa:	9f 90       	pop	r9
    2cfc:	8f 90       	pop	r8
    2cfe:	7f 90       	pop	r7
    2d00:	6f 90       	pop	r6
    2d02:	08 95       	ret
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2d04:	82 e0       	ldi	r24, 0x02	; 2
    2d06:	a8 2e       	mov	r10, r24
    2d08:	b1 2c       	mov	r11, r1
    2d0a:	bb cf       	rjmp	.-138    	; 0x2c82 <xStreamBufferReceive+0x36>
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    2d0c:	98 01       	movw	r18, r16
    2d0e:	a3 01       	movw	r20, r6
    2d10:	b4 01       	movw	r22, r8
    2d12:	ce 01       	movw	r24, r28
    2d14:	0e 94 35 14 	call	0x286a	; 0x286a <prvReadMessageFromBuffer>
    2d18:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2d1a:	89 2b       	or	r24, r25
    2d1c:	09 f3       	breq	.-62     	; 0x2ce0 <xStreamBufferReceive+0x94>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            prvRECEIVE_COMPLETED( xStreamBuffer );
    2d1e:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
    2d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d24:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d26:	89 2b       	or	r24, r25
    2d28:	69 f0       	breq	.+26     	; 0x2d44 <xStreamBufferReceive+0xf8>
    2d2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d2e:	f1 2c       	mov	r15, r1
    2d30:	e1 2c       	mov	r14, r1
    2d32:	00 e0       	ldi	r16, 0x00	; 0
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	a9 01       	movw	r20, r18
    2d3a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d3c:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <xTaskGenericNotify>
    2d40:	1b 86       	std	Y+11, r1	; 0x0b
    2d42:	1a 86       	std	Y+10, r1	; 0x0a
    2d44:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
    }

    traceRETURN_xStreamBufferReceive( xReceivedLength );

    return xReceivedLength;
    2d48:	cd cf       	rjmp	.-102    	; 0x2ce4 <xStreamBufferReceive+0x98>

00002d4a <xStreamBufferNextMessageLengthBytes>:
}
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <xStreamBufferNextMessageLengthBytes+0xa>
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    traceENTER_xStreamBufferNextMessageLengthBytes( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2d58:	fc 01       	movw	r30, r24
    2d5a:	26 85       	ldd	r18, Z+14	; 0x0e
    2d5c:	20 fd       	sbrc	r18, 0
    2d5e:	09 c0       	rjmp	.+18     	; 0x2d72 <xStreamBufferNextMessageLengthBytes+0x28>
            xReturn = 0;
        }
    }
    else
    {
        xReturn = 0;
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
}
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	08 95       	ret
    2d72:	8c 01       	movw	r16, r24
    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2d74:	0e 94 54 13 	call	0x26a8	; 0x26a8 <prvBytesInBuffer>

        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    2d78:	03 97       	sbiw	r24, 0x03	; 3
    2d7a:	90 f3       	brcs	.-28     	; 0x2d60 <xStreamBufferNextMessageLengthBytes+0x16>
        {
            /* The number of bytes available is greater than the number of bytes
             * required to hold the length of the next message, so another message
             * is available. */
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	20 81       	ld	r18, Z
    2d80:	31 81       	ldd	r19, Z+1	; 0x01
    2d82:	42 e0       	ldi	r20, 0x02	; 2
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	be 01       	movw	r22, r28
    2d88:	6f 5f       	subi	r22, 0xFF	; 255
    2d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8c:	c8 01       	movw	r24, r16
    2d8e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
        xReturn = 0;
    }

    traceRETURN_xStreamBufferNextMessageLengthBytes( xReturn );

    return xReturn;
    2d96:	e6 cf       	rjmp	.-52     	; 0x2d64 <xStreamBufferNextMessageLengthBytes+0x1a>

00002d98 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    2d98:	af 92       	push	r10
    2d9a:	bf 92       	push	r11
    2d9c:	cf 92       	push	r12
    2d9e:	df 92       	push	r13
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	ec 01       	movw	r28, r24
    2dae:	5b 01       	movw	r10, r22
    2db0:	7a 01       	movw	r14, r20
    2db2:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2db4:	8e 85       	ldd	r24, Y+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2db6:	10 e0       	ldi	r17, 0x00	; 0
    2db8:	00 e0       	ldi	r16, 0x00	; 0
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2dba:	80 ff       	sbrs	r24, 0
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <xStreamBufferReceiveFromISR+0x2a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2dbe:	02 e0       	ldi	r16, 0x02	; 2
    2dc0:	10 e0       	ldi	r17, 0x00	; 0
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <prvBytesInBuffer>
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    2dc8:	08 17       	cp	r16, r24
    2dca:	19 07       	cpc	r17, r25
    2dcc:	70 f0       	brcs	.+28     	; 0x2dea <xStreamBufferReceiveFromISR+0x52>
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    2dce:	b1 2c       	mov	r11, r1
    2dd0:	a1 2c       	mov	r10, r1

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
}
    2dd2:	c5 01       	movw	r24, r10
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	df 90       	pop	r13
    2de2:	cf 90       	pop	r12
    2de4:	bf 90       	pop	r11
    2de6:	af 90       	pop	r10
    2de8:	08 95       	ret
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
    2dea:	9c 01       	movw	r18, r24
    2dec:	a7 01       	movw	r20, r14
    2dee:	b5 01       	movw	r22, r10
    2df0:	ce 01       	movw	r24, r28
    2df2:	0e 94 35 14 	call	0x286a	; 0x286a <prvReadMessageFromBuffer>
    2df6:	5c 01       	movw	r10, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    2df8:	89 2b       	or	r24, r25
    2dfa:	49 f3       	breq	.-46     	; 0x2dce <xStreamBufferReceiveFromISR+0x36>
        {
            /* MISRA Ref 4.7.1 [Return value shall be checked] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
            /* coverity[misra_c_2012_directive_4_7_violation] */
            prvRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    2dfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e00:	89 2b       	or	r24, r25
    2e02:	39 f3       	breq	.-50     	; 0x2dd2 <xStreamBufferReceiveFromISR+0x3a>
    2e04:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e06:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e08:	f1 2c       	mov	r15, r1
    2e0a:	e1 2c       	mov	r14, r1
    2e0c:	00 e0       	ldi	r16, 0x00	; 0
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	a9 01       	movw	r20, r18
    2e14:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e16:	0e 94 d5 20 	call	0x41aa	; 0x41aa <xTaskGenericNotifyFromISR>
    2e1a:	1b 86       	std	Y+11, r1	; 0x0b
    2e1c:	1a 86       	std	Y+10, r1	; 0x0a
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
    traceRETURN_xStreamBufferReceiveFromISR( xReceivedLength );

    return xReceivedLength;
    2e1e:	d9 cf       	rjmp	.-78     	; 0x2dd2 <xStreamBufferReceiveFromISR+0x3a>

00002e20 <xStreamBufferIsEmpty>:
    traceENTER_xStreamBufferIsEmpty( xStreamBuffer );

    configASSERT( pxStreamBuffer );

    /* True if no bytes are available. */
    xTail = pxStreamBuffer->xTail;
    2e20:	fc 01       	movw	r30, r24
    2e22:	20 81       	ld	r18, Z
    2e24:	31 81       	ldd	r19, Z+1	; 0x01

    if( pxStreamBuffer->xHead == xTail )
    2e26:	42 81       	ldd	r20, Z+2	; 0x02
    2e28:	53 81       	ldd	r21, Z+3	; 0x03
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	42 17       	cp	r20, r18
    2e2e:	53 07       	cpc	r21, r19
    2e30:	09 f0       	breq	.+2      	; 0x2e34 <xStreamBufferIsEmpty+0x14>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsEmpty( xReturn );

    return xReturn;
}
    2e34:	08 95       	ret

00002e36 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	26 85       	ldd	r18, Z+14	; 0x0e
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    2e3e:	d0 e0       	ldi	r29, 0x00	; 0
    2e40:	c0 e0       	ldi	r28, 0x00	; 0

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2e42:	20 ff       	sbrs	r18, 0
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <xStreamBufferIsFull+0x14>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2e46:	c2 e0       	ldi	r28, 0x02	; 2
    2e48:	d0 e0       	ldi	r29, 0x00	; 0
    {
        xBytesToStoreMessageLength = 0;
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    2e4a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <xStreamBufferSpacesAvailable>
    2e4e:	21 e0       	ldi	r18, 0x01	; 1
    2e50:	c8 17       	cp	r28, r24
    2e52:	d9 07       	cpc	r29, r25
    2e54:	08 f4       	brcc	.+2      	; 0x2e58 <xStreamBufferIsFull+0x22>
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    }

    traceRETURN_xStreamBufferIsFull( xReturn );

    return xReturn;
}
    2e58:	82 2f       	mov	r24, r18
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	08 95       	ret

00002e60 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
    2e60:	cf 92       	push	r12
    2e62:	df 92       	push	r13
    2e64:	ef 92       	push	r14
    2e66:	ff 92       	push	r15
    2e68:	0f 93       	push	r16
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    2e6e:	fc 01       	movw	r30, r24
    2e70:	20 85       	ldd	r18, Z+8	; 0x08
    2e72:	31 85       	ldd	r19, Z+9	; 0x09
    2e74:	23 2b       	or	r18, r19
    2e76:	c1 f0       	breq	.+48     	; 0x2ea8 <xStreamBufferSendCompletedFromISR+0x48>
    2e78:	6b 01       	movw	r12, r22
    2e7a:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    2e7c:	80 85       	ldd	r24, Z+8	; 0x08
    2e7e:	91 85       	ldd	r25, Z+9	; 0x09
    2e80:	f1 2c       	mov	r15, r1
    2e82:	e1 2c       	mov	r14, r1
    2e84:	00 e0       	ldi	r16, 0x00	; 0
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	a9 01       	movw	r20, r18
    2e8c:	67 85       	ldd	r22, Z+15	; 0x0f
    2e8e:	0e 94 d5 20 	call	0x41aa	; 0x41aa <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    2e92:	19 86       	std	Y+9, r1	; 0x09
    2e94:	18 86       	std	Y+8, r1	; 0x08
            xReturn = pdTRUE;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
}
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	0f 91       	pop	r16
    2e9e:	ff 90       	pop	r15
    2ea0:	ef 90       	pop	r14
    2ea2:	df 90       	pop	r13
    2ea4:	cf 90       	pop	r12
    2ea6:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferSendCompletedFromISR( xReturn );

    return xReturn;
    2eaa:	f6 cf       	rjmp	.-20     	; 0x2e98 <xStreamBufferSendCompletedFromISR+0x38>

00002eac <xStreamBufferReceiveCompletedFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
    2eac:	cf 92       	push	r12
    2eae:	df 92       	push	r13
    2eb0:	ef 92       	push	r14
    2eb2:	ff 92       	push	r15
    2eb4:	0f 93       	push	r16
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    2eba:	fc 01       	movw	r30, r24
    2ebc:	22 85       	ldd	r18, Z+10	; 0x0a
    2ebe:	33 85       	ldd	r19, Z+11	; 0x0b
    2ec0:	23 2b       	or	r18, r19
    2ec2:	c1 f0       	breq	.+48     	; 0x2ef4 <xStreamBufferReceiveCompletedFromISR+0x48>
    2ec4:	6b 01       	movw	r12, r22
    2ec6:	ec 01       	movw	r28, r24
        {
            ( void ) xTaskNotifyIndexedFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    2ec8:	82 85       	ldd	r24, Z+10	; 0x0a
    2eca:	93 85       	ldd	r25, Z+11	; 0x0b
    2ecc:	f1 2c       	mov	r15, r1
    2ece:	e1 2c       	mov	r14, r1
    2ed0:	00 e0       	ldi	r16, 0x00	; 0
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	a9 01       	movw	r20, r18
    2ed8:	67 85       	ldd	r22, Z+15	; 0x0f
    2eda:	0e 94 d5 20 	call	0x41aa	; 0x41aa <xTaskGenericNotifyFromISR>
                                                ( pxStreamBuffer )->uxNotificationIndex,
                                                ( uint32_t ) 0,
                                                eNoAction,
                                                pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    2ede:	1b 86       	std	Y+11, r1	; 0x0b
    2ee0:	1a 86       	std	Y+10, r1	; 0x0a
            xReturn = pdTRUE;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
}
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	df 90       	pop	r13
    2ef0:	cf 90       	pop	r12
    2ef2:	08 95       	ret
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xStreamBufferReceiveCompletedFromISR( xReturn );

    return xReturn;
    2ef6:	f6 cf       	rjmp	.-20     	; 0x2ee4 <xStreamBufferReceiveCompletedFromISR+0x38>

00002ef8 <uxStreamBufferGetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer );

    traceRETURN_uxStreamBufferGetStreamBufferNotificationIndex( pxStreamBuffer->uxNotificationIndex );

    return pxStreamBuffer->uxNotificationIndex;
}
    2ef8:	fc 01       	movw	r30, r24
    2efa:	87 85       	ldd	r24, Z+15	; 0x0f
    2efc:	08 95       	ret

00002efe <vStreamBufferSetStreamBufferNotificationIndex>:
    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );

    /* Check that the task notification index is valid. */
    configASSERT( uxNotificationIndex < configTASK_NOTIFICATION_ARRAY_ENTRIES );

    pxStreamBuffer->uxNotificationIndex = uxNotificationIndex;
    2efe:	fc 01       	movw	r30, r24
    2f00:	67 87       	std	Z+15, r22	; 0x0f

    traceRETURN_vStreamBufferSetStreamBufferNotificationIndex();
}
    2f02:	08 95       	ret

00002f04 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2f04:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    2f08:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    2f0c:	80 81       	ld	r24, Z
    2f0e:	81 11       	cpse	r24, r1
    2f10:	07 c0       	rjmp	.+14     	; 0x2f20 <prvResetNextTaskUnblockTime+0x1c>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
    2f12:	8f ef       	ldi	r24, 0xFF	; 255
    2f14:	9f ef       	ldi	r25, 0xFF	; 255
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    2f16:	90 93 80 07 	sts	0x0780, r25	; 0x800780 <xNextTaskUnblockTime+0x1>
    2f1a:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <xNextTaskUnblockTime>
    }
}
    2f1e:	08 95       	ret
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    2f20:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    2f24:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    2f28:	05 80       	ldd	r0, Z+5	; 0x05
    2f2a:	f6 81       	ldd	r31, Z+6	; 0x06
    2f2c:	e0 2d       	mov	r30, r0
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	f1 cf       	rjmp	.-30     	; 0x2f16 <prvResetNextTaskUnblockTime+0x12>

00002f34 <prvAddCurrentTaskToDelayedList.isra.2>:
    }

#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
    2f34:	cf 92       	push	r12
    2f36:	df 92       	push	r13
    2f38:	ef 92       	push	r14
    2f3a:	ff 92       	push	r15
    2f3c:	0f 93       	push	r16
    2f3e:	1f 93       	push	r17
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	ec 01       	movw	r28, r24
                                            const BaseType_t xCanBlockIndefinitely )
{
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    2f46:	c0 90 88 07 	lds	r12, 0x0788	; 0x800788 <xTickCount>
    2f4a:	d0 90 89 07 	lds	r13, 0x0789	; 0x800789 <xTickCount+0x1>
    List_t * const pxDelayedList = pxDelayedTaskList;
    2f4e:	00 91 a0 07 	lds	r16, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    2f52:	10 91 a1 07 	lds	r17, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
    2f56:	e0 90 9e 07 	lds	r14, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    2f5a:	f0 90 9f 07 	lds	r15, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2f5e:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2f62:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2f66:	02 96       	adiw	r24, 0x02	; 2
    2f68:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
    2f6c:	cc 0d       	add	r28, r12
    2f6e:	dd 1d       	adc	r29, r13

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2f70:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2f74:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2f78:	d3 83       	std	Z+3, r29	; 0x03
    2f7a:	c2 83       	std	Z+2, r28	; 0x02

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2f7c:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2f80:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2f84:	6e 5f       	subi	r22, 0xFE	; 254
    2f86:	7f 4f       	sbci	r23, 0xFF	; 255
        xTimeToWake = xConstTickCount + xTicksToWait;

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );

        if( xTimeToWake < xConstTickCount )
    2f88:	cc 15       	cp	r28, r12
    2f8a:	dd 05       	cpc	r29, r13
    2f8c:	58 f4       	brcc	.+22     	; 0x2fa4 <prvAddCurrentTaskToDelayedList.isra.2+0x70>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2f8e:	c7 01       	movw	r24, r14

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	ff 90       	pop	r15
    2f9a:	ef 90       	pop	r14
    2f9c:	df 90       	pop	r13
    2f9e:	cf 90       	pop	r12

        if( xTimeToWake < xConstTickCount )
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2fa0:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <vListInsert>
        }
        else
        {
            traceMOVED_TASK_TO_DELAYED_LIST();
            /* The wake time has not overflowed, so the current block list is used. */
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
    2fa4:	c8 01       	movw	r24, r16
    2fa6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <vListInsert>

            /* If the task entering the blocked state was placed at the head of the
             * list of blocked tasks then xNextTaskUnblockTime needs to be updated
             * too. */
            if( xTimeToWake < xNextTaskUnblockTime )
    2faa:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <xNextTaskUnblockTime>
    2fae:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <xNextTaskUnblockTime+0x1>
    2fb2:	c8 17       	cp	r28, r24
    2fb4:	d9 07       	cpc	r29, r25
    2fb6:	20 f4       	brcc	.+8      	; 0x2fc0 <prvAddCurrentTaskToDelayedList.isra.2+0x8c>
            {
                xNextTaskUnblockTime = xTimeToWake;
    2fb8:	d0 93 80 07 	sts	0x0780, r29	; 0x800780 <xNextTaskUnblockTime+0x1>
    2fbc:	c0 93 7f 07 	sts	0x077F, r28	; 0x80077f <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	df 90       	pop	r13
    2fce:	cf 90       	pop	r12
    2fd0:	08 95       	ret

00002fd2 <prvCheckTasksWaitingTermination>:
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2fd6:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
    2fda:	81 11       	cpse	r24, r1
    2fdc:	03 c0       	rjmp	.+6      	; 0x2fe4 <prvCheckTasksWaitingTermination+0x12>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	08 95       	ret
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	0f 92       	push	r0
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2fea:	e0 91 91 07 	lds	r30, 0x0791	; 0x800791 <xTasksWaitingTermination+0x5>
    2fee:	f0 91 92 07 	lds	r31, 0x0792	; 0x800792 <xTasksWaitingTermination+0x6>
    2ff2:	c6 81       	ldd	r28, Z+6	; 0x06
    2ff4:	d7 81       	ldd	r29, Z+7	; 0x07
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	02 96       	adiw	r24, 0x02	; 2
    2ffa:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>
                        --uxCurrentNumberOfTasks;
    2ffe:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    3002:	81 50       	subi	r24, 0x01	; 1
    3004:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <uxCurrentNumberOfTasks>
                        --uxDeletedTasksWaitingCleanUp;
    3008:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
    300c:	81 50       	subi	r24, 0x01	; 1
    300e:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <uxDeletedTasksWaitingCleanUp>
                    }
                }
                taskEXIT_CRITICAL();
    3012:	0f 90       	pop	r0
    3014:	0f be       	out	0x3f, r0	; 63

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    3016:	8f 89       	ldd	r24, Y+23	; 0x17
    3018:	98 8d       	ldd	r25, Y+24	; 0x18
    301a:	0e 94 32 0c 	call	0x1864	; 0x1864 <vPortFree>
            vPortFree( pxTCB );
    301e:	ce 01       	movw	r24, r28
    3020:	0e 94 32 0c 	call	0x1864	; 0x1864 <vPortFree>
    3024:	d8 cf       	rjmp	.-80     	; 0x2fd6 <prvCheckTasksWaitingTermination+0x4>

00003026 <prvIdleTask>:

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
    3026:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
    302a:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <pxReadyTasksLists>
    302e:	82 30       	cpi	r24, 0x02	; 2
    3030:	d0 f3       	brcs	.-12     	; 0x3026 <prvIdleTask>
            {
                taskYIELD();
    3032:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
    3036:	f7 cf       	rjmp	.-18     	; 0x3026 <prvIdleTask>

00003038 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
    3038:	4f 92       	push	r4
    303a:	5f 92       	push	r5
    303c:	6f 92       	push	r6
    303e:	7f 92       	push	r7
    3040:	8f 92       	push	r8
    3042:	9f 92       	push	r9
    3044:	af 92       	push	r10
    3046:	bf 92       	push	r11
    3048:	cf 92       	push	r12
    304a:	df 92       	push	r13
    304c:	ef 92       	push	r14
    304e:	ff 92       	push	r15
    3050:	0f 93       	push	r16
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	4c 01       	movw	r8, r24
    3058:	5b 01       	movw	r10, r22
    305a:	29 01       	movw	r4, r18

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
    305c:	c4 2e       	mov	r12, r20
    305e:	d1 2c       	mov	r13, r1
    3060:	c6 01       	movw	r24, r12
    3062:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <pvPortMalloc>
    3066:	3c 01       	movw	r6, r24

            if( pxStack != NULL )
    3068:	89 2b       	or	r24, r25
    306a:	09 f4       	brne	.+2      	; 0x306e <xTaskCreate+0x36>
    306c:	c9 c0       	rjmp	.+402    	; 0x3200 <xTaskCreate+0x1c8>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    306e:	86 e2       	ldi	r24, 0x26	; 38
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <pvPortMalloc>
    3076:	ec 01       	movw	r28, r24

                if( pxNewTCB != NULL )
    3078:	89 2b       	or	r24, r25
    307a:	09 f4       	brne	.+2      	; 0x307e <xTaskCreate+0x46>
    307c:	be c0       	rjmp	.+380    	; 0x31fa <xTaskCreate+0x1c2>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
    307e:	86 e2       	ldi	r24, 0x26	; 38
    3080:	de 01       	movw	r26, r28
    3082:	1d 92       	st	X+, r1
    3084:	8a 95       	dec	r24
    3086:	e9 f7       	brne	.-6      	; 0x3082 <xTaskCreate+0x4a>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
    3088:	78 8e       	std	Y+24, r7	; 0x18
    308a:	6f 8a       	std	Y+23, r6	; 0x17
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
    308c:	b1 e0       	ldi	r27, 0x01	; 1
    308e:	cb 1a       	sub	r12, r27
    3090:	d1 08       	sbc	r13, r1
    3092:	c6 0c       	add	r12, r6
    3094:	d7 1c       	adc	r13, r7
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    3096:	a1 14       	cp	r10, r1
    3098:	b1 04       	cpc	r11, r1
    309a:	09 f0       	breq	.+2      	; 0x309e <xTaskCreate+0x66>
    309c:	c2 c0       	rjmp	.+388    	; 0x3222 <xTaskCreate+0x1ea>
    309e:	04 30       	cpi	r16, 0x04	; 4
    30a0:	08 f0       	brcs	.+2      	; 0x30a4 <xTaskCreate+0x6c>
    30a2:	03 e0       	ldi	r16, 0x03	; 3
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
    30a4:	0e 8b       	std	Y+22, r16	; 0x16
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    30a6:	5e 01       	movw	r10, r28
    30a8:	b2 e0       	ldi	r27, 0x02	; 2
    30aa:	ab 0e       	add	r10, r27
    30ac:	b1 1c       	adc	r11, r1
    30ae:	c5 01       	movw	r24, r10
    30b0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    30b4:	ce 01       	movw	r24, r28
    30b6:	0c 96       	adiw	r24, 0x0c	; 12
    30b8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    30bc:	d9 87       	std	Y+9, r29	; 0x09
    30be:	c8 87       	std	Y+8, r28	; 0x08

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
    30c0:	84 e0       	ldi	r24, 0x04	; 4
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	80 1b       	sub	r24, r16
    30c6:	91 09       	sbc	r25, r1
    30c8:	9d 87       	std	Y+13, r25	; 0x0d
    30ca:	8c 87       	std	Y+12, r24	; 0x0c
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    30cc:	db 8b       	std	Y+19, r29	; 0x13
    30ce:	ca 8b       	std	Y+18, r28	; 0x12
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    30d0:	a2 01       	movw	r20, r4
    30d2:	b4 01       	movw	r22, r8
    30d4:	c6 01       	movw	r24, r12
    30d6:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <pxPortInitialiseStack>
    30da:	99 83       	std	Y+1, r25	; 0x01
    30dc:	88 83       	st	Y, r24
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
    30de:	e1 14       	cp	r14, r1
    30e0:	f1 04       	cpc	r15, r1
    30e2:	19 f0       	breq	.+6      	; 0x30ea <xTaskCreate+0xb2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    30e4:	f7 01       	movw	r30, r14
    30e6:	d1 83       	std	Z+1, r29	; 0x01
    30e8:	c0 83       	st	Z, r28

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	0f 92       	push	r0
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
    30f0:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    30f4:	8f 5f       	subi	r24, 0xFF	; 255
    30f6:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <uxCurrentNumberOfTasks>

            if( pxCurrentTCB == NULL )
    30fa:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    30fe:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3102:	89 2b       	or	r24, r25
    3104:	09 f0       	breq	.+2      	; 0x3108 <xTaskCreate+0xd0>
    3106:	a3 c0       	rjmp	.+326    	; 0x324e <xTaskCreate+0x216>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
    3108:	d0 93 d9 07 	sts	0x07D9, r29	; 0x8007d9 <pxCurrentTCB+0x1>
    310c:	c0 93 d8 07 	sts	0x07D8, r28	; 0x8007d8 <pxCurrentTCB>

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3110:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    3114:	81 30       	cpi	r24, 0x01	; 1
    3116:	61 f5       	brne	.+88     	; 0x3170 <xTaskCreate+0x138>
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3118:	84 eb       	ldi	r24, 0xB4	; 180
    311a:	97 e0       	ldi	r25, 0x07	; 7
    311c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    3120:	8d eb       	ldi	r24, 0xBD	; 189
    3122:	97 e0       	ldi	r25, 0x07	; 7
    3124:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    3128:	86 ec       	ldi	r24, 0xC6	; 198
    312a:	97 e0       	ldi	r25, 0x07	; 7
    312c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    3130:	8f ec       	ldi	r24, 0xCF	; 207
    3132:	97 e0       	ldi	r25, 0x07	; 7
    3134:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    }

    vListInitialise( &xDelayedTaskList1 );
    3138:	8b ea       	ldi	r24, 0xAB	; 171
    313a:	97 e0       	ldi	r25, 0x07	; 7
    313c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
    3140:	82 ea       	ldi	r24, 0xA2	; 162
    3142:	97 e0       	ldi	r25, 0x07	; 7
    3144:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    vListInitialise( &xPendingReadyList );
    3148:	85 e9       	ldi	r24, 0x95	; 149
    314a:	97 e0       	ldi	r25, 0x07	; 7
    314c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
    3150:	8c e8       	ldi	r24, 0x8C	; 140
    3152:	97 e0       	ldi	r25, 0x07	; 7
    3154:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
    3158:	8b ea       	ldi	r24, 0xAB	; 171
    315a:	97 e0       	ldi	r25, 0x07	; 7
    315c:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <pxDelayedTaskList+0x1>
    3160:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <pxDelayedTaskList>
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3164:	82 ea       	ldi	r24, 0xA2	; 162
    3166:	97 e0       	ldi	r25, 0x07	; 7
    3168:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    316c:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
    3170:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxTaskNumber>
    3174:	8f 5f       	subi	r24, 0xFF	; 255
    3176:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <uxTaskNumber>
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
    317a:	ae 89       	ldd	r26, Y+22	; 0x16
    317c:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <uxTopReadyPriority>
    3180:	8a 17       	cp	r24, r26
    3182:	10 f4       	brcc	.+4      	; 0x3188 <xTaskCreate+0x150>
    3184:	a0 93 87 07 	sts	0x0787, r26	; 0x800787 <uxTopReadyPriority>
    3188:	29 e0       	ldi	r18, 0x09	; 9
    318a:	2a 9f       	mul	r18, r26
    318c:	d0 01       	movw	r26, r0
    318e:	11 24       	eor	r1, r1
    3190:	ac 54       	subi	r26, 0x4C	; 76
    3192:	b8 4f       	sbci	r27, 0xF8	; 248
    3194:	11 96       	adiw	r26, 0x01	; 1
    3196:	0d 90       	ld	r0, X+
    3198:	bc 91       	ld	r27, X
    319a:	a0 2d       	mov	r26, r0
    319c:	bd 83       	std	Y+5, r27	; 0x05
    319e:	ac 83       	std	Y+4, r26	; 0x04
    31a0:	14 96       	adiw	r26, 0x04	; 4
    31a2:	8d 91       	ld	r24, X+
    31a4:	9c 91       	ld	r25, X
    31a6:	15 97       	sbiw	r26, 0x05	; 5
    31a8:	9f 83       	std	Y+7, r25	; 0x07
    31aa:	8e 83       	std	Y+6, r24	; 0x06
    31ac:	14 96       	adiw	r26, 0x04	; 4
    31ae:	8d 91       	ld	r24, X+
    31b0:	9c 91       	ld	r25, X
    31b2:	15 97       	sbiw	r26, 0x05	; 5
    31b4:	fc 01       	movw	r30, r24
    31b6:	b3 82       	std	Z+3, r11	; 0x03
    31b8:	a2 82       	std	Z+2, r10	; 0x02
    31ba:	15 96       	adiw	r26, 0x05	; 5
    31bc:	bc 92       	st	X, r11
    31be:	ae 92       	st	-X, r10
    31c0:	14 97       	sbiw	r26, 0x04	; 4
    31c2:	9e 89       	ldd	r25, Y+22	; 0x16
    31c4:	92 9f       	mul	r25, r18
    31c6:	f0 01       	movw	r30, r0
    31c8:	11 24       	eor	r1, r1
    31ca:	ec 54       	subi	r30, 0x4C	; 76
    31cc:	f8 4f       	sbci	r31, 0xF8	; 248
    31ce:	fb 87       	std	Y+11, r31	; 0x0b
    31d0:	ea 87       	std	Y+10, r30	; 0x0a
    31d2:	80 81       	ld	r24, Z
    31d4:	8f 5f       	subi	r24, 0xFF	; 255
    31d6:	80 83       	st	Z, r24

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
    31d8:	0f 90       	pop	r0
    31da:	0f be       	out	0x3f, r0	; 63

        if( xSchedulerRunning != pdFALSE )
    31dc:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xSchedulerRunning>
    31e0:	88 23       	and	r24, r24
    31e2:	49 f0       	breq	.+18     	; 0x31f6 <xTaskCreate+0x1be>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
    31e4:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    31e8:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    31ec:	86 89       	ldd	r24, Z+22	; 0x16
    31ee:	89 17       	cp	r24, r25
    31f0:	10 f4       	brcc	.+4      	; 0x31f6 <xTaskCreate+0x1be>
    31f2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    31f8:	04 c0       	rjmp	.+8      	; 0x3202 <xTaskCreate+0x1ca>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
    31fa:	c3 01       	movw	r24, r6
    31fc:	0e 94 32 0c 	call	0x1864	; 0x1864 <vPortFree>
            prvAddNewTaskToReadyList( pxNewTCB );
            xReturn = pdPASS;
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3200:	8f ef       	ldi	r24, 0xFF	; 255
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
    }
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	0f 91       	pop	r16
    3208:	ff 90       	pop	r15
    320a:	ef 90       	pop	r14
    320c:	df 90       	pop	r13
    320e:	cf 90       	pop	r12
    3210:	bf 90       	pop	r11
    3212:	af 90       	pop	r10
    3214:	9f 90       	pop	r9
    3216:	8f 90       	pop	r8
    3218:	7f 90       	pop	r7
    321a:	6f 90       	pop	r6
    321c:	5f 90       	pop	r5
    321e:	4f 90       	pop	r4
    3220:	08 95       	ret
    3222:	f5 01       	movw	r30, r10
    3224:	ae 01       	movw	r20, r28
    3226:	47 5e       	subi	r20, 0xE7	; 231
    3228:	5f 4f       	sbci	r21, 0xFF	; 255
    322a:	c5 01       	movw	r24, r10
    322c:	08 96       	adiw	r24, 0x08	; 8
    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    322e:	21 91       	ld	r18, Z+
    3230:	da 01       	movw	r26, r20
    3232:	2d 93       	st	X+, r18
    3234:	ad 01       	movw	r20, r26

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
    3236:	9f 01       	movw	r18, r30
    3238:	21 50       	subi	r18, 0x01	; 1
    323a:	31 09       	sbc	r19, r1
    323c:	d9 01       	movw	r26, r18
    323e:	2c 91       	ld	r18, X
    3240:	22 23       	and	r18, r18
    3242:	19 f0       	breq	.+6      	; 0x324a <xTaskCreate+0x212>
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3244:	e8 17       	cp	r30, r24
    3246:	f9 07       	cpc	r31, r25
    3248:	91 f7       	brne	.-28     	; 0x322e <xTaskCreate+0x1f6>
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
    324a:	18 a2       	std	Y+32, r1	; 0x20
    324c:	28 cf       	rjmp	.-432    	; 0x309e <xTaskCreate+0x66>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
    324e:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xSchedulerRunning>
    3252:	81 11       	cpse	r24, r1
    3254:	8d cf       	rjmp	.-230    	; 0x3170 <xTaskCreate+0x138>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3256:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    325a:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    325e:	9e 89       	ldd	r25, Y+22	; 0x16
    3260:	86 89       	ldd	r24, Z+22	; 0x16
    3262:	98 17       	cp	r25, r24
    3264:	08 f4       	brcc	.+2      	; 0x3268 <xTaskCreate+0x230>
    3266:	84 cf       	rjmp	.-248    	; 0x3170 <xTaskCreate+0x138>
                    {
                        pxCurrentTCB = pxNewTCB;
    3268:	d0 93 d9 07 	sts	0x07D9, r29	; 0x8007d9 <pxCurrentTCB+0x1>
    326c:	c0 93 d8 07 	sts	0x07D8, r28	; 0x8007d8 <pxCurrentTCB>
    3270:	7f cf       	rjmp	.-258    	; 0x3170 <xTaskCreate+0x138>

00003272 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	ec 01       	movw	r28, r24
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	0f 92       	push	r0
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    3282:	89 2b       	or	r24, r25
    3284:	21 f4       	brne	.+8      	; 0x328e <vTaskDelete+0x1c>
    3286:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    328a:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    328e:	8e 01       	movw	r16, r28
    3290:	0e 5f       	subi	r16, 0xFE	; 254
    3292:	1f 4f       	sbci	r17, 0xFF	; 255
    3294:	c8 01       	movw	r24, r16
    3296:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    329a:	8c 89       	ldd	r24, Y+20	; 0x14
    329c:	9d 89       	ldd	r25, Y+21	; 0x15
    329e:	89 2b       	or	r24, r25
    32a0:	21 f0       	breq	.+8      	; 0x32aa <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    32a2:	ce 01       	movw	r24, r28
    32a4:	0c 96       	adiw	r24, 0x0c	; 12
    32a6:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
    32aa:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxTaskNumber>
    32ae:	8f 5f       	subi	r24, 0xFF	; 255
    32b0:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <uxTaskNumber>

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
    32b4:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    32b8:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
    32bc:	20 91 86 07 	lds	r18, 0x0786	; 0x800786 <xSchedulerRunning>
    32c0:	22 23       	and	r18, r18
    32c2:	59 f1       	breq	.+86     	; 0x331a <vTaskDelete+0xa8>
    32c4:	8c 17       	cp	r24, r28
    32c6:	9d 07       	cpc	r25, r29
    32c8:	41 f5       	brne	.+80     	; 0x331a <vTaskDelete+0xa8>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    32ca:	b8 01       	movw	r22, r16
    32cc:	8c e8       	ldi	r24, 0x8C	; 140
    32ce:	97 e0       	ldi	r25, 0x07	; 7
    32d0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
    32d4:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
    32d8:	8f 5f       	subi	r24, 0xFF	; 255
    32da:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <uxDeletedTasksWaitingCleanUp>
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
    32de:	81 e0       	ldi	r24, 0x01	; 1
                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
            }
        }
        taskEXIT_CRITICAL();
    32e0:	0f 90       	pop	r0
    32e2:	0f be       	out	0x3f, r0	; 63

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
    32e4:	81 30       	cpi	r24, 0x01	; 1
    32e6:	39 f0       	breq	.+14     	; 0x32f6 <vTaskDelete+0x84>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    32e8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ea:	98 8d       	ldd	r25, Y+24	; 0x18
    32ec:	0e 94 32 0c 	call	0x1864	; 0x1864 <vPortFree>
            vPortFree( pxTCB );
    32f0:	ce 01       	movw	r24, r28
    32f2:	0e 94 32 0c 	call	0x1864	; 0x1864 <vPortFree>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
    32f6:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xSchedulerRunning>
    32fa:	88 23       	and	r24, r24
    32fc:	49 f0       	breq	.+18     	; 0x3310 <vTaskDelete+0x9e>
            {
                if( pxTCB == pxCurrentTCB )
    32fe:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3302:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3306:	8c 17       	cp	r24, r28
    3308:	9d 07       	cpc	r25, r29
    330a:	11 f4       	brne	.+4      	; 0x3310 <vTaskDelete+0x9e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
                    taskYIELD_WITHIN_API();
    330c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	08 95       	ret
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
    331a:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    331e:	81 50       	subi	r24, 0x01	; 1
    3320:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <uxCurrentNumberOfTasks>
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
    3324:	0e 94 82 17 	call	0x2f04	; 0x2f04 <prvResetNextTaskUnblockTime>
#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	da cf       	rjmp	.-76     	; 0x32e0 <vTaskDelete+0x6e>

0000332c <vTaskStartScheduler>:
}

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    332c:	ef 92       	push	r14
    332e:	ff 92       	push	r15
    3330:	0f 93       	push	r16
    3332:	cf 93       	push	r28
    3334:	df 93       	push	r29
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	28 97       	sbiw	r28, 0x08	; 8
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
    3346:	a2 e9       	ldi	r26, 0x92	; 146
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	fe 01       	movw	r30, r28
    334c:	31 96       	adiw	r30, 0x01	; 1
    334e:	2a e9       	ldi	r18, 0x9A	; 154
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	bf 01       	movw	r22, r30
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
    3354:	8d 91       	ld	r24, X+
    3356:	81 93       	st	Z+, r24

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
    3358:	88 23       	and	r24, r24
    335a:	19 f0       	breq	.+6      	; 0x3362 <vTaskStartScheduler+0x36>
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
    335c:	2a 17       	cp	r18, r26
    335e:	3b 07       	cpc	r19, r27
    3360:	c9 f7       	brne	.-14     	; 0x3354 <vTaskStartScheduler+0x28>
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
    3362:	8d e7       	ldi	r24, 0x7D	; 125
    3364:	e8 2e       	mov	r14, r24
    3366:	87 e0       	ldi	r24, 0x07	; 7
    3368:	f8 2e       	mov	r15, r24
    336a:	00 e0       	ldi	r16, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	45 e5       	ldi	r20, 0x55	; 85
    3372:	83 e1       	ldi	r24, 0x13	; 19
    3374:	98 e1       	ldi	r25, 0x18	; 24
    3376:	0e 94 1c 18 	call	0x3038	; 0x3038 <xTaskCreate>
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
    337a:	88 23       	and	r24, r24
    337c:	a9 f0       	breq	.+42     	; 0x33a8 <vTaskStartScheduler+0x7c>

    xReturn = prvCreateIdleTasks();

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
    337e:	81 30       	cpi	r24, 0x01	; 1
    3380:	99 f4       	brne	.+38     	; 0x33a8 <vTaskStartScheduler+0x7c>
        {
            xReturn = xTimerCreateTimerTask();
    3382:	0e 94 93 24 	call	0x4926	; 0x4926 <xTimerCreateTimerTask>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
    3386:	81 30       	cpi	r24, 0x01	; 1
    3388:	79 f4       	brne	.+30     	; 0x33a8 <vTaskStartScheduler+0x7c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
    338a:	f8 94       	cli
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
    338c:	2f ef       	ldi	r18, 0xFF	; 255
    338e:	3f ef       	ldi	r19, 0xFF	; 255
    3390:	30 93 80 07 	sts	0x0780, r19	; 0x800780 <xNextTaskUnblockTime+0x1>
    3394:	20 93 7f 07 	sts	0x077F, r18	; 0x80077f <xNextTaskUnblockTime>
        xSchedulerRunning = pdTRUE;
    3398:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <xSchedulerRunning>
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    339c:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <xTickCount+0x1>
    33a0:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <xTickCount>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
    33a4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
    33a8:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <uxTopUsedPriority>

    traceRETURN_vTaskStartScheduler();
}
    33ac:	28 96       	adiw	r28, 0x08	; 8
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	df 91       	pop	r29
    33ba:	cf 91       	pop	r28
    33bc:	0f 91       	pop	r16
    33be:	ff 90       	pop	r15
    33c0:	ef 90       	pop	r14
    33c2:	08 95       	ret

000033c4 <vTaskEndScheduler>:
        BaseType_t xCoreID;

        #if ( configUSE_TIMERS == 1 )
        {
            /* Delete the timer task created by the kernel. */
            vTaskDelete( xTimerGetTimerDaemonTaskHandle() );
    33c4:	0e 94 43 25 	call	0x4a86	; 0x4a86 <xTimerGetTimerDaemonTaskHandle>
    33c8:	0e 94 39 19 	call	0x3272	; 0x3272 <vTaskDelete>
        #endif /* #if ( configUSE_TIMERS == 1 ) */

        /* Delete Idle tasks created by the kernel.*/
        for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
        {
            vTaskDelete( xIdleTaskHandles[ xCoreID ] );
    33cc:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <xIdleTaskHandles>
    33d0:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <xIdleTaskHandles+0x1>
    33d4:	0e 94 39 19 	call	0x3272	; 0x3272 <vTaskDelete>

        /* Idle task is responsible for reclaiming the resources of the tasks in
         * xTasksWaitingTermination list. Since the idle task is now deleted and
         * no longer going to run, we need to reclaim resources of all the tasks
         * in the xTasksWaitingTermination list. */
        prvCheckTasksWaitingTermination();
    33d8:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <prvCheckTasksWaitingTermination>
    #endif /* #if ( INCLUDE_vTaskDelete == 1 ) */

    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    33dc:	f8 94       	cli
    xSchedulerRunning = pdFALSE;
    33de:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <xSchedulerRunning>

    /* This function must be called from a task and the application is
     * responsible for deleting that task after the scheduler is stopped. */
    vPortEndScheduler();
    33e2:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <vPortEndScheduler>

000033e6 <vTaskSuspendAll>:
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
    33e6:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    33ea:	8f 5f       	subi	r24, 0xFF	; 255
    33ec:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <uxSchedulerSuspended>
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
    33f0:	08 95       	ret

000033f2 <xTaskGetTickCount>:
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	0f 92       	push	r0
    {
        xTicks = xTickCount;
    33f8:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <xTickCount>
    33fc:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <xTickCount+0x1>
    }
    portTICK_TYPE_EXIT_CRITICAL();
    3400:	0f 90       	pop	r0
    3402:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
}
    3404:	08 95       	ret

00003406 <xTaskGetTickCountFromISR>:
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    {
        xReturn = xTickCount;
    3406:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <xTickCount>
    340a:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <xTickCount+0x1>
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
}
    340e:	08 95       	ret

00003410 <uxTaskGetNumberOfTasks>:

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
    3410:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
}
    3414:	08 95       	ret

00003416 <pcTaskGetName>:

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	21 f4       	brne	.+8      	; 0x3422 <pcTaskGetName+0xc>
    341a:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    341e:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    configASSERT( pxTCB );

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
}
    3422:	49 96       	adiw	r24, 0x19	; 25
    3424:	08 95       	ret

00003426 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3426:	cf 92       	push	r12
    3428:	df 92       	push	r13
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3436:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    343a:	81 11       	cpse	r24, r1
    343c:	e5 c0       	rjmp	.+458    	; 0x3608 <xTaskIncrementTick+0x1e2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    343e:	c0 91 88 07 	lds	r28, 0x0788	; 0x800788 <xTickCount>
    3442:	d0 91 89 07 	lds	r29, 0x0789	; 0x800789 <xTickCount+0x1>
    3446:	6e 01       	movw	r12, r28
    3448:	8f ef       	ldi	r24, 0xFF	; 255
    344a:	c8 1a       	sub	r12, r24
    344c:	d8 0a       	sbc	r13, r24

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
    344e:	d0 92 89 07 	sts	0x0789, r13	; 0x800789 <xTickCount+0x1>
    3452:	c0 92 88 07 	sts	0x0788, r12	; 0x800788 <xTickCount>

        if( xConstTickCount == ( TickType_t ) 0U )
    3456:	c1 14       	cp	r12, r1
    3458:	d1 04       	cpc	r13, r1
    345a:	b9 f4       	brne	.+46     	; 0x348a <xTaskIncrementTick+0x64>
        {
            taskSWITCH_DELAYED_LISTS();
    345c:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    3460:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    3464:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    3468:	30 91 9f 07 	lds	r19, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    346c:	30 93 a1 07 	sts	0x07A1, r19	; 0x8007a1 <pxDelayedTaskList+0x1>
    3470:	20 93 a0 07 	sts	0x07A0, r18	; 0x8007a0 <pxDelayedTaskList>
    3474:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    3478:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
    347c:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <xNumOfOverflows>
    3480:	8f 5f       	subi	r24, 0xFF	; 255
    3482:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <xNumOfOverflows>
    3486:	0e 94 82 17 	call	0x2f04	; 0x2f04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
    348a:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <xNextTaskUnblockTime>
    348e:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <xNextTaskUnblockTime+0x1>
    3492:	c8 16       	cp	r12, r24
    3494:	d9 06       	cpc	r13, r25
    3496:	e8 f4       	brcc	.+58     	; 0x34d2 <xTaskIncrementTick+0xac>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    3498:	80 e0       	ldi	r24, 0x00	; 0
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
    349a:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    349e:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    34a2:	e6 89       	ldd	r30, Z+22	; 0x16
    34a4:	d9 e0       	ldi	r29, 0x09	; 9
    34a6:	ed 9f       	mul	r30, r29
    34a8:	f0 01       	movw	r30, r0
    34aa:	11 24       	eor	r1, r1
    34ac:	ec 54       	subi	r30, 0x4C	; 76
    34ae:	f8 4f       	sbci	r31, 0xF8	; 248
    34b0:	90 81       	ld	r25, Z
    34b2:	92 30       	cpi	r25, 0x02	; 2
    34b4:	08 f0       	brcs	.+2      	; 0x34b8 <xTaskIncrementTick+0x92>
                {
                    xSwitchRequired = pdTRUE;
    34b6:	81 e0       	ldi	r24, 0x01	; 1
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
    34b8:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <xYieldPendings>
    34bc:	91 11       	cpse	r25, r1
                {
                    xSwitchRequired = pdTRUE;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
}
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	1f 91       	pop	r17
    34c6:	0f 91       	pop	r16
    34c8:	ff 90       	pop	r15
    34ca:	ef 90       	pop	r14
    34cc:	df 90       	pop	r13
    34ce:	cf 90       	pop	r12
    34d0:	08 95       	ret

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    34d2:	80 e0       	ldi	r24, 0x00	; 0
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    34d4:	69 e0       	ldi	r22, 0x09	; 9
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    34d6:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    34da:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    34de:	90 81       	ld	r25, Z
    34e0:	91 11       	cpse	r25, r1
    34e2:	07 c0       	rjmp	.+14     	; 0x34f2 <xTaskIncrementTick+0xcc>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
    34e4:	2f ef       	ldi	r18, 0xFF	; 255
    34e6:	3f ef       	ldi	r19, 0xFF	; 255
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
    34e8:	30 93 80 07 	sts	0x0780, r19	; 0x800780 <xNextTaskUnblockTime+0x1>
    34ec:	20 93 7f 07 	sts	0x077F, r18	; 0x80077f <xNextTaskUnblockTime>
    34f0:	d4 cf       	rjmp	.-88     	; 0x349a <xTaskIncrementTick+0x74>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    34f2:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    34f6:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    34fa:	05 80       	ldd	r0, Z+5	; 0x05
    34fc:	f6 81       	ldd	r31, Z+6	; 0x06
    34fe:	e0 2d       	mov	r30, r0
    3500:	06 80       	ldd	r0, Z+6	; 0x06
    3502:	f7 81       	ldd	r31, Z+7	; 0x07
    3504:	e0 2d       	mov	r30, r0
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    3506:	22 81       	ldd	r18, Z+2	; 0x02
    3508:	33 81       	ldd	r19, Z+3	; 0x03

                    if( xConstTickCount < xItemValue )
    350a:	c2 16       	cp	r12, r18
    350c:	d3 06       	cpc	r13, r19
    350e:	60 f3       	brcs	.-40     	; 0x34e8 <xTaskIncrementTick+0xc2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    3510:	c2 85       	ldd	r28, Z+10	; 0x0a
    3512:	d3 85       	ldd	r29, Z+11	; 0x0b
    3514:	24 81       	ldd	r18, Z+4	; 0x04
    3516:	35 81       	ldd	r19, Z+5	; 0x05
    3518:	46 81       	ldd	r20, Z+6	; 0x06
    351a:	57 81       	ldd	r21, Z+7	; 0x07
    351c:	d9 01       	movw	r26, r18
    351e:	15 96       	adiw	r26, 0x05	; 5
    3520:	5c 93       	st	X, r21
    3522:	4e 93       	st	-X, r20
    3524:	14 97       	sbiw	r26, 0x04	; 4
    3526:	46 81       	ldd	r20, Z+6	; 0x06
    3528:	57 81       	ldd	r21, Z+7	; 0x07
    352a:	da 01       	movw	r26, r20
    352c:	13 96       	adiw	r26, 0x03	; 3
    352e:	3c 93       	st	X, r19
    3530:	2e 93       	st	-X, r18
    3532:	12 97       	sbiw	r26, 0x02	; 2
    3534:	9f 01       	movw	r18, r30
    3536:	2e 5f       	subi	r18, 0xFE	; 254
    3538:	3f 4f       	sbci	r19, 0xFF	; 255
    353a:	09 81       	ldd	r16, Y+1	; 0x01
    353c:	1a 81       	ldd	r17, Y+2	; 0x02
    353e:	02 17       	cp	r16, r18
    3540:	13 07       	cpc	r17, r19
    3542:	11 f4       	brne	.+4      	; 0x3548 <xTaskIncrementTick+0x122>
    3544:	5a 83       	std	Y+2, r21	; 0x02
    3546:	49 83       	std	Y+1, r20	; 0x01
    3548:	13 86       	std	Z+11, r1	; 0x0b
    354a:	12 86       	std	Z+10, r1	; 0x0a
    354c:	98 81       	ld	r25, Y
    354e:	91 50       	subi	r25, 0x01	; 1
    3550:	98 83       	st	Y, r25

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3552:	a4 89       	ldd	r26, Z+20	; 0x14
    3554:	b5 89       	ldd	r27, Z+21	; 0x15
    3556:	10 97       	sbiw	r26, 0x00	; 0
    3558:	f9 f0       	breq	.+62     	; 0x3598 <xTaskIncrementTick+0x172>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    355a:	46 85       	ldd	r20, Z+14	; 0x0e
    355c:	57 85       	ldd	r21, Z+15	; 0x0f
    355e:	00 89       	ldd	r16, Z+16	; 0x10
    3560:	11 89       	ldd	r17, Z+17	; 0x11
    3562:	ea 01       	movw	r28, r20
    3564:	1d 83       	std	Y+5, r17	; 0x05
    3566:	0c 83       	std	Y+4, r16	; 0x04
    3568:	00 89       	ldd	r16, Z+16	; 0x10
    356a:	11 89       	ldd	r17, Z+17	; 0x11
    356c:	e8 01       	movw	r28, r16
    356e:	5b 83       	std	Y+3, r21	; 0x03
    3570:	4a 83       	std	Y+2, r20	; 0x02
    3572:	11 96       	adiw	r26, 0x01	; 1
    3574:	ed 90       	ld	r14, X+
    3576:	fc 90       	ld	r15, X
    3578:	12 97       	sbiw	r26, 0x02	; 2
    357a:	af 01       	movw	r20, r30
    357c:	44 5f       	subi	r20, 0xF4	; 244
    357e:	5f 4f       	sbci	r21, 0xFF	; 255
    3580:	e4 16       	cp	r14, r20
    3582:	f5 06       	cpc	r15, r21
    3584:	21 f4       	brne	.+8      	; 0x358e <xTaskIncrementTick+0x168>
    3586:	12 96       	adiw	r26, 0x02	; 2
    3588:	1c 93       	st	X, r17
    358a:	0e 93       	st	-X, r16
    358c:	11 97       	sbiw	r26, 0x01	; 1
    358e:	15 8a       	std	Z+21, r1	; 0x15
    3590:	14 8a       	std	Z+20, r1	; 0x14
    3592:	9c 91       	ld	r25, X
    3594:	91 50       	subi	r25, 0x01	; 1
    3596:	9c 93       	st	X, r25
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    3598:	a6 89       	ldd	r26, Z+22	; 0x16
    359a:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <uxTopReadyPriority>
    359e:	9a 17       	cp	r25, r26
    35a0:	10 f4       	brcc	.+4      	; 0x35a6 <xTaskIncrementTick+0x180>
    35a2:	a0 93 87 07 	sts	0x0787, r26	; 0x800787 <uxTopReadyPriority>
    35a6:	6a 9f       	mul	r22, r26
    35a8:	d0 01       	movw	r26, r0
    35aa:	11 24       	eor	r1, r1
    35ac:	ac 54       	subi	r26, 0x4C	; 76
    35ae:	b8 4f       	sbci	r27, 0xF8	; 248
    35b0:	11 96       	adiw	r26, 0x01	; 1
    35b2:	0d 90       	ld	r0, X+
    35b4:	bc 91       	ld	r27, X
    35b6:	a0 2d       	mov	r26, r0
    35b8:	b5 83       	std	Z+5, r27	; 0x05
    35ba:	a4 83       	std	Z+4, r26	; 0x04
    35bc:	14 96       	adiw	r26, 0x04	; 4
    35be:	4d 91       	ld	r20, X+
    35c0:	5c 91       	ld	r21, X
    35c2:	15 97       	sbiw	r26, 0x05	; 5
    35c4:	57 83       	std	Z+7, r21	; 0x07
    35c6:	46 83       	std	Z+6, r20	; 0x06
    35c8:	14 96       	adiw	r26, 0x04	; 4
    35ca:	4d 91       	ld	r20, X+
    35cc:	5c 91       	ld	r21, X
    35ce:	15 97       	sbiw	r26, 0x05	; 5
    35d0:	ea 01       	movw	r28, r20
    35d2:	3b 83       	std	Y+3, r19	; 0x03
    35d4:	2a 83       	std	Y+2, r18	; 0x02
    35d6:	15 96       	adiw	r26, 0x05	; 5
    35d8:	3c 93       	st	X, r19
    35da:	2e 93       	st	-X, r18
    35dc:	14 97       	sbiw	r26, 0x04	; 4
    35de:	26 89       	ldd	r18, Z+22	; 0x16
    35e0:	26 9f       	mul	r18, r22
    35e2:	d0 01       	movw	r26, r0
    35e4:	11 24       	eor	r1, r1
    35e6:	ac 54       	subi	r26, 0x4C	; 76
    35e8:	b8 4f       	sbci	r27, 0xF8	; 248
    35ea:	b3 87       	std	Z+11, r27	; 0x0b
    35ec:	a2 87       	std	Z+10, r26	; 0x0a
    35ee:	9c 91       	ld	r25, X
    35f0:	9f 5f       	subi	r25, 0xFF	; 255
    35f2:	9c 93       	st	X, r25
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    35f4:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    35f8:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    35fc:	96 89       	ldd	r25, Z+22	; 0x16
    35fe:	92 17       	cp	r25, r18
    3600:	08 f0       	brcs	.+2      	; 0x3604 <xTaskIncrementTick+0x1de>
    3602:	69 cf       	rjmp	.-302    	; 0x34d6 <xTaskIncrementTick+0xb0>
                            {
                                xSwitchRequired = pdTRUE;
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	67 cf       	rjmp	.-306    	; 0x34d6 <xTaskIncrementTick+0xb0>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
    3608:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <xPendedTicks>
    360c:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <xPendedTicks+0x1>
    3610:	01 96       	adiw	r24, 0x01	; 1
    3612:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <xPendedTicks+0x1>
    3616:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <xPendedTicks>

BaseType_t xTaskIncrementTick( void )
{
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    361a:	80 e0       	ldi	r24, 0x00	; 0
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
    361c:	51 cf       	rjmp	.-350    	; 0x34c0 <xTaskIncrementTick+0x9a>

0000361e <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    361e:	ef 92       	push	r14
    3620:	ff 92       	push	r15
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	0f 92       	push	r0

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
    3630:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    3634:	81 50       	subi	r24, 0x01	; 1
    3636:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <uxSchedulerSuspended>
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    363a:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    363e:	88 23       	and	r24, r24
    3640:	51 f0       	breq	.+20     	; 0x3656 <xTaskResumeAll+0x38>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    BaseType_t xAlreadyYielded = pdFALSE;
    3642:	80 e0       	ldi	r24, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    3644:	0f 90       	pop	r0
    3646:	0f be       	out	0x3f, r0	; 63
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
}
    3648:	df 91       	pop	r29
    364a:	cf 91       	pop	r28
    364c:	1f 91       	pop	r17
    364e:	0f 91       	pop	r16
    3650:	ff 90       	pop	r15
    3652:	ef 90       	pop	r14
    3654:	08 95       	ret
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3656:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <uxCurrentNumberOfTasks>
    365a:	88 23       	and	r24, r24
    365c:	91 f3       	breq	.-28     	; 0x3642 <xTaskResumeAll+0x24>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    365e:	e0 90 9a 07 	lds	r14, 0x079A	; 0x80079a <xPendingReadyList+0x5>
    3662:	f0 90 9b 07 	lds	r15, 0x079B	; 0x80079b <xPendingReadyList+0x6>
#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    TCB_t * pxTCB = NULL;
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	e0 e0       	ldi	r30, 0x00	; 0
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
                        prvAddTaskToReadyList( pxTCB );
    366a:	39 e0       	ldi	r19, 0x09	; 9
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    366c:	41 e0       	ldi	r20, 0x01	; 1
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    366e:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <xPendingReadyList>
    3672:	81 11       	cpse	r24, r1
    3674:	22 c0       	rjmp	.+68     	; 0x36ba <xTaskResumeAll+0x9c>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
    3676:	ef 2b       	or	r30, r31
    3678:	11 f0       	breq	.+4      	; 0x367e <xTaskResumeAll+0x60>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
    367a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    367e:	c0 91 84 07 	lds	r28, 0x0784	; 0x800784 <xPendedTicks>
    3682:	d0 91 85 07 	lds	r29, 0x0785	; 0x800785 <xPendedTicks+0x1>

                        if( xPendedCounts > ( TickType_t ) 0U )
    3686:	20 97       	sbiw	r28, 0x00	; 0
    3688:	61 f0       	breq	.+24     	; 0x36a2 <xTaskResumeAll+0x84>
                            {
                                if( xTaskIncrementTick() != pdFALSE )
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    368a:	11 e0       	ldi	r17, 0x01	; 1

                        if( xPendedCounts > ( TickType_t ) 0U )
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
    368c:	0e 94 13 1a 	call	0x3426	; 0x3426 <xTaskIncrementTick>
    3690:	81 11       	cpse	r24, r1
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
    3692:	10 93 83 07 	sts	0x0783, r17	; 0x800783 <xYieldPendings>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
    3696:	21 97       	sbiw	r28, 0x01	; 1
                            } while( xPendedCounts > ( TickType_t ) 0U );
    3698:	c9 f7       	brne	.-14     	; 0x368c <xTaskResumeAll+0x6e>

                            xPendedTicks = 0;
    369a:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <xPendedTicks+0x1>
    369e:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <xPendedTicks>
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
    36a2:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <xYieldPendings>
    36a6:	88 23       	and	r24, r24
    36a8:	61 f2       	breq	.-104    	; 0x3642 <xTaskResumeAll+0x24>
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
    36aa:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    36ae:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    36b2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	c5 cf       	rjmp	.-118    	; 0x3644 <xTaskResumeAll+0x26>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    36ba:	d7 01       	movw	r26, r14
    36bc:	16 96       	adiw	r26, 0x06	; 6
    36be:	ed 91       	ld	r30, X+
    36c0:	fc 91       	ld	r31, X
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    36c2:	a4 89       	ldd	r26, Z+20	; 0x14
    36c4:	b5 89       	ldd	r27, Z+21	; 0x15
    36c6:	66 85       	ldd	r22, Z+14	; 0x0e
    36c8:	77 85       	ldd	r23, Z+15	; 0x0f
    36ca:	80 89       	ldd	r24, Z+16	; 0x10
    36cc:	91 89       	ldd	r25, Z+17	; 0x11
    36ce:	eb 01       	movw	r28, r22
    36d0:	9d 83       	std	Y+5, r25	; 0x05
    36d2:	8c 83       	std	Y+4, r24	; 0x04
    36d4:	80 89       	ldd	r24, Z+16	; 0x10
    36d6:	91 89       	ldd	r25, Z+17	; 0x11
    36d8:	ec 01       	movw	r28, r24
    36da:	7b 83       	std	Y+3, r23	; 0x03
    36dc:	6a 83       	std	Y+2, r22	; 0x02
    36de:	bf 01       	movw	r22, r30
    36e0:	64 5f       	subi	r22, 0xF4	; 244
    36e2:	7f 4f       	sbci	r23, 0xFF	; 255
    36e4:	11 96       	adiw	r26, 0x01	; 1
    36e6:	0d 91       	ld	r16, X+
    36e8:	1c 91       	ld	r17, X
    36ea:	12 97       	sbiw	r26, 0x02	; 2
    36ec:	06 17       	cp	r16, r22
    36ee:	17 07       	cpc	r17, r23
    36f0:	21 f4       	brne	.+8      	; 0x36fa <xTaskResumeAll+0xdc>
    36f2:	12 96       	adiw	r26, 0x02	; 2
    36f4:	9c 93       	st	X, r25
    36f6:	8e 93       	st	-X, r24
    36f8:	11 97       	sbiw	r26, 0x01	; 1
    36fa:	15 8a       	std	Z+21, r1	; 0x15
    36fc:	14 8a       	std	Z+20, r1	; 0x14
    36fe:	8c 91       	ld	r24, X
    3700:	81 50       	subi	r24, 0x01	; 1
    3702:	8c 93       	st	X, r24
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    3704:	a2 85       	ldd	r26, Z+10	; 0x0a
    3706:	b3 85       	ldd	r27, Z+11	; 0x0b
    3708:	84 81       	ldd	r24, Z+4	; 0x04
    370a:	95 81       	ldd	r25, Z+5	; 0x05
    370c:	66 81       	ldd	r22, Z+6	; 0x06
    370e:	77 81       	ldd	r23, Z+7	; 0x07
    3710:	ec 01       	movw	r28, r24
    3712:	7d 83       	std	Y+5, r23	; 0x05
    3714:	6c 83       	std	Y+4, r22	; 0x04
    3716:	66 81       	ldd	r22, Z+6	; 0x06
    3718:	77 81       	ldd	r23, Z+7	; 0x07
    371a:	eb 01       	movw	r28, r22
    371c:	9b 83       	std	Y+3, r25	; 0x03
    371e:	8a 83       	std	Y+2, r24	; 0x02
    3720:	cf 01       	movw	r24, r30
    3722:	02 96       	adiw	r24, 0x02	; 2
    3724:	11 96       	adiw	r26, 0x01	; 1
    3726:	0d 91       	ld	r16, X+
    3728:	1c 91       	ld	r17, X
    372a:	12 97       	sbiw	r26, 0x02	; 2
    372c:	08 17       	cp	r16, r24
    372e:	19 07       	cpc	r17, r25
    3730:	21 f4       	brne	.+8      	; 0x373a <xTaskResumeAll+0x11c>
    3732:	12 96       	adiw	r26, 0x02	; 2
    3734:	7c 93       	st	X, r23
    3736:	6e 93       	st	-X, r22
    3738:	11 97       	sbiw	r26, 0x01	; 1
    373a:	13 86       	std	Z+11, r1	; 0x0b
    373c:	12 86       	std	Z+10, r1	; 0x0a
    373e:	2c 91       	ld	r18, X
    3740:	21 50       	subi	r18, 0x01	; 1
    3742:	2c 93       	st	X, r18
                        prvAddTaskToReadyList( pxTCB );
    3744:	a6 89       	ldd	r26, Z+22	; 0x16
    3746:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    374a:	2a 17       	cp	r18, r26
    374c:	10 f4       	brcc	.+4      	; 0x3752 <xTaskResumeAll+0x134>
    374e:	a0 93 87 07 	sts	0x0787, r26	; 0x800787 <uxTopReadyPriority>
    3752:	3a 9f       	mul	r19, r26
    3754:	d0 01       	movw	r26, r0
    3756:	11 24       	eor	r1, r1
    3758:	ac 54       	subi	r26, 0x4C	; 76
    375a:	b8 4f       	sbci	r27, 0xF8	; 248
    375c:	11 96       	adiw	r26, 0x01	; 1
    375e:	0d 90       	ld	r0, X+
    3760:	bc 91       	ld	r27, X
    3762:	a0 2d       	mov	r26, r0
    3764:	b5 83       	std	Z+5, r27	; 0x05
    3766:	a4 83       	std	Z+4, r26	; 0x04
    3768:	14 96       	adiw	r26, 0x04	; 4
    376a:	6d 91       	ld	r22, X+
    376c:	7c 91       	ld	r23, X
    376e:	15 97       	sbiw	r26, 0x05	; 5
    3770:	77 83       	std	Z+7, r23	; 0x07
    3772:	66 83       	std	Z+6, r22	; 0x06
    3774:	14 96       	adiw	r26, 0x04	; 4
    3776:	6d 91       	ld	r22, X+
    3778:	7c 91       	ld	r23, X
    377a:	15 97       	sbiw	r26, 0x05	; 5
    377c:	eb 01       	movw	r28, r22
    377e:	9b 83       	std	Y+3, r25	; 0x03
    3780:	8a 83       	std	Y+2, r24	; 0x02
    3782:	15 96       	adiw	r26, 0x05	; 5
    3784:	9c 93       	st	X, r25
    3786:	8e 93       	st	-X, r24
    3788:	14 97       	sbiw	r26, 0x04	; 4
    378a:	96 89       	ldd	r25, Z+22	; 0x16
    378c:	93 9f       	mul	r25, r19
    378e:	d0 01       	movw	r26, r0
    3790:	11 24       	eor	r1, r1
    3792:	ac 54       	subi	r26, 0x4C	; 76
    3794:	b8 4f       	sbci	r27, 0xF8	; 248
    3796:	b3 87       	std	Z+11, r27	; 0x0b
    3798:	a2 87       	std	Z+10, r26	; 0x0a
    379a:	8c 91       	ld	r24, X
    379c:	8f 5f       	subi	r24, 0xFF	; 255
    379e:	8c 93       	st	X, r24

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    37a0:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    37a4:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    37a8:	56 96       	adiw	r26, 0x16	; 22
    37aa:	8c 91       	ld	r24, X
    37ac:	89 17       	cp	r24, r25
    37ae:	08 f0       	brcs	.+2      	; 0x37b2 <xTaskResumeAll+0x194>
    37b0:	5e cf       	rjmp	.-324    	; 0x366e <xTaskResumeAll+0x50>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
    37b2:	40 93 83 07 	sts	0x0783, r20	; 0x800783 <xYieldPendings>
    37b6:	5b cf       	rjmp	.-330    	; 0x366e <xTaskResumeAll+0x50>

000037b8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	ec 01       	movw	r28, r24
    37c2:	8b 01       	movw	r16, r22
        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
        configASSERT( ( xTimeIncrement > 0U ) );

        vTaskSuspendAll();
    37c4:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
    37c8:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <xTickCount>
    37cc:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <xTickCount+0x1>

            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    37d0:	48 81       	ld	r20, Y
    37d2:	59 81       	ldd	r21, Y+1	; 0x01
    37d4:	ca 01       	movw	r24, r20
    37d6:	80 0f       	add	r24, r16
    37d8:	91 1f       	adc	r25, r17
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
    37da:	99 83       	std	Y+1, r25	; 0x01
    37dc:	88 83       	st	Y, r24
            configASSERT( uxSchedulerSuspended == 1U );

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

            if( xConstTickCount < *pxPreviousWakeTime )
    37de:	24 17       	cp	r18, r20
    37e0:	35 07       	cpc	r19, r21
    37e2:	80 f4       	brcc	.+32     	; 0x3804 <xTaskDelayUntil+0x4c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    37e4:	84 17       	cp	r24, r20
    37e6:	95 07       	cpc	r25, r21
    37e8:	80 f0       	brcs	.+32     	; 0x380a <xTaskDelayUntil+0x52>

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    37ea:	c0 e0       	ldi	r28, 0x00	; 0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    37ec:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    37f0:	81 11       	cpse	r24, r1
    37f2:	02 c0       	rjmp	.+4      	; 0x37f8 <xTaskDelayUntil+0x40>
        {
            taskYIELD_WITHIN_API();
    37f4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );

        return xShouldDelay;
    }
    37f8:	8c 2f       	mov	r24, r28
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	08 95       	ret
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    3804:	84 17       	cp	r24, r20
    3806:	95 07       	cpc	r25, r21
    3808:	18 f0       	brcs	.+6      	; 0x3810 <xTaskDelayUntil+0x58>
    380a:	28 17       	cp	r18, r24
    380c:	39 07       	cpc	r19, r25
    380e:	68 f7       	brcc	.-38     	; 0x37ea <xTaskDelayUntil+0x32>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    3810:	82 1b       	sub	r24, r18
    3812:	93 0b       	sbc	r25, r19
    3814:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <prvAddCurrentTaskToDelayedList.isra.2>
    3818:	c1 e0       	ldi	r28, 0x01	; 1
    381a:	e8 cf       	rjmp	.-48     	; 0x37ec <xTaskDelayUntil+0x34>

0000381c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	ec 01       	movw	r28, r24
        BaseType_t xAlreadyYielded = pdFALSE;

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
    3822:	89 2b       	or	r24, r25
    3824:	29 f4       	brne	.+10     	; 0x3830 <vTaskDelay+0x14>

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
        {
            taskYIELD_WITHIN_API();
    3826:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
    382a:	df 91       	pop	r29
    382c:	cf 91       	pop	r28
    382e:	08 95       	ret
        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
        {
            vTaskSuspendAll();
    3830:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3834:	ce 01       	movw	r24, r28
    3836:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <prvAddCurrentTaskToDelayedList.isra.2>
            }
            xAlreadyYielded = xTaskResumeAll();
    383a:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
    383e:	88 23       	and	r24, r24
    3840:	91 f3       	breq	.-28     	; 0x3826 <vTaskDelay+0xa>
    3842:	f3 cf       	rjmp	.-26     	; 0x382a <vTaskDelay+0xe>

00003844 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	ec 01       	movw	r28, r24
     * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
    configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );

    /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
    vTaskSuspendAll();
    384a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>

    /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
    taskENTER_CRITICAL();
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	0f 92       	push	r0
    {
        xPendedTicks += xTicksToCatchUp;
    3854:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <xPendedTicks>
    3858:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <xPendedTicks+0x1>
    385c:	8c 0f       	add	r24, r28
    385e:	9d 1f       	adc	r25, r29
    3860:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <xPendedTicks+0x1>
    3864:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <xPendedTicks>
    }
    taskEXIT_CRITICAL();
    3868:	0f 90       	pop	r0
    386a:	0f be       	out	0x3f, r0	; 63
    xYieldOccurred = xTaskResumeAll();

    traceRETURN_xTaskCatchUpTicks( xYieldOccurred );

    return xYieldOccurred;
}
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    taskENTER_CRITICAL();
    {
        xPendedTicks += xTicksToCatchUp;
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();
    3870:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <xTaskResumeAll>

00003874 <vTaskSwitchContext>:
#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
    3874:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    3878:	88 23       	and	r24, r24
    387a:	21 f0       	breq	.+8      	; 0x3884 <vTaskSwitchContext+0x10>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
    3882:	08 95       	ret
        }
        else
        {
            xYieldPendings[ 0 ] = pdFALSE;
    3884:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <xYieldPendings>
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    3888:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    388c:	89 e0       	ldi	r24, 0x09	; 9
    388e:	42 2f       	mov	r20, r18
    3890:	50 e0       	ldi	r21, 0x00	; 0
    3892:	84 9f       	mul	r24, r20
    3894:	f0 01       	movw	r30, r0
    3896:	85 9f       	mul	r24, r21
    3898:	f0 0d       	add	r31, r0
    389a:	11 24       	eor	r1, r1
    389c:	ec 54       	subi	r30, 0x4C	; 76
    389e:	f8 4f       	sbci	r31, 0xF8	; 248
    38a0:	90 81       	ld	r25, Z
    38a2:	99 23       	and	r25, r25
    38a4:	59 f1       	breq	.+86     	; 0x38fc <vTaskSwitchContext+0x88>
    38a6:	a1 81       	ldd	r26, Z+1	; 0x01
    38a8:	b2 81       	ldd	r27, Z+2	; 0x02
    38aa:	12 96       	adiw	r26, 0x02	; 2
    38ac:	6d 91       	ld	r22, X+
    38ae:	7c 91       	ld	r23, X
    38b0:	72 83       	std	Z+2, r23	; 0x02
    38b2:	61 83       	std	Z+1, r22	; 0x01
    38b4:	28 9f       	mul	r18, r24
    38b6:	c0 01       	movw	r24, r0
    38b8:	11 24       	eor	r1, r1
    38ba:	89 54       	subi	r24, 0x49	; 73
    38bc:	98 4f       	sbci	r25, 0xF8	; 248
    38be:	68 17       	cp	r22, r24
    38c0:	79 07       	cpc	r23, r25
    38c2:	21 f4       	brne	.+8      	; 0x38cc <vTaskSwitchContext+0x58>
    38c4:	85 81       	ldd	r24, Z+5	; 0x05
    38c6:	96 81       	ldd	r25, Z+6	; 0x06
    38c8:	92 83       	std	Z+2, r25	; 0x02
    38ca:	81 83       	std	Z+1, r24	; 0x01
    38cc:	89 e0       	ldi	r24, 0x09	; 9
    38ce:	84 9f       	mul	r24, r20
    38d0:	f0 01       	movw	r30, r0
    38d2:	85 9f       	mul	r24, r21
    38d4:	f0 0d       	add	r31, r0
    38d6:	11 24       	eor	r1, r1
    38d8:	ec 54       	subi	r30, 0x4C	; 76
    38da:	f8 4f       	sbci	r31, 0xF8	; 248
    38dc:	01 80       	ldd	r0, Z+1	; 0x01
    38de:	f2 81       	ldd	r31, Z+2	; 0x02
    38e0:	e0 2d       	mov	r30, r0
    38e2:	86 81       	ldd	r24, Z+6	; 0x06
    38e4:	97 81       	ldd	r25, Z+7	; 0x07
    38e6:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <pxCurrentTCB+0x1>
    38ea:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <pxCurrentTCB>
    38ee:	20 93 87 07 	sts	0x0787, r18	; 0x800787 <uxTopReadyPriority>
            traceTASK_SWITCHED_IN();

            /* Macro to inject port specific behaviour immediately after
             * switching tasks, such as setting an end of stack watchpoint
             * or reconfiguring the MPU. */
            portTASK_SWITCH_HOOK( pxCurrentTCB );
    38f2:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    38f6:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
    38fa:	08 95       	ret
            /* Select a new task to run using either the generic C or port
             * optimised asm code. */
            /* MISRA Ref 11.5.3 [Void pointer assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            taskSELECT_HIGHEST_PRIORITY_TASK();
    38fc:	21 50       	subi	r18, 0x01	; 1
    38fe:	c7 cf       	rjmp	.-114    	; 0x388e <vTaskSwitchContext+0x1a>

00003900 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
    3900:	cf 93       	push	r28
    3902:	df 93       	push	r29
    3904:	eb 01       	movw	r28, r22
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3906:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    390a:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    390e:	64 5f       	subi	r22, 0xF4	; 244
    3910:	7f 4f       	sbci	r23, 0xFF	; 255
    3912:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3916:	ce 01       	movw	r24, r28

    traceRETURN_vTaskPlaceOnEventList();
}
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    391c:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <prvAddCurrentTaskToDelayedList.isra.2>

00003920 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
    3920:	cf 93       	push	r28
    3922:	df 93       	push	r29
    3924:	fc 01       	movw	r30, r24
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3926:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    392a:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    392e:	70 68       	ori	r23, 0x80	; 128
    3930:	1d 96       	adiw	r26, 0x0d	; 13
    3932:	7c 93       	st	X, r23
    3934:	6e 93       	st	-X, r22
    3936:	1c 97       	sbiw	r26, 0x0c	; 12
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3938:	a1 81       	ldd	r26, Z+1	; 0x01
    393a:	b2 81       	ldd	r27, Z+2	; 0x02
    393c:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3940:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3944:	bf 87       	std	Y+15, r27	; 0x0f
    3946:	ae 87       	std	Y+14, r26	; 0x0e
    3948:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    394c:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3950:	14 96       	adiw	r26, 0x04	; 4
    3952:	8d 91       	ld	r24, X+
    3954:	9c 91       	ld	r25, X
    3956:	15 97       	sbiw	r26, 0x05	; 5
    3958:	99 8b       	std	Y+17, r25	; 0x11
    395a:	88 8b       	std	Y+16, r24	; 0x10
    395c:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3960:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3964:	14 96       	adiw	r26, 0x04	; 4
    3966:	cd 91       	ld	r28, X+
    3968:	dc 91       	ld	r29, X
    396a:	15 97       	sbiw	r26, 0x05	; 5
    396c:	24 5f       	subi	r18, 0xF4	; 244
    396e:	3f 4f       	sbci	r19, 0xFF	; 255
    3970:	3b 83       	std	Y+3, r19	; 0x03
    3972:	2a 83       	std	Y+2, r18	; 0x02
    3974:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3978:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    397c:	24 5f       	subi	r18, 0xF4	; 244
    397e:	3f 4f       	sbci	r19, 0xFF	; 255
    3980:	15 96       	adiw	r26, 0x05	; 5
    3982:	3c 93       	st	X, r19
    3984:	2e 93       	st	-X, r18
    3986:	14 97       	sbiw	r26, 0x04	; 4
    3988:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    398c:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3990:	55 96       	adiw	r26, 0x15	; 21
    3992:	fc 93       	st	X, r31
    3994:	ee 93       	st	-X, r30
    3996:	54 97       	sbiw	r26, 0x14	; 20
    3998:	90 81       	ld	r25, Z
    399a:	9f 5f       	subi	r25, 0xFF	; 255
    399c:	90 83       	st	Z, r25

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    399e:	ca 01       	movw	r24, r20

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    39a4:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <prvAddCurrentTaskToDelayedList.isra.2>

000039a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
    39a8:	cf 93       	push	r28
    39aa:	df 93       	push	r29
    39ac:	fc 01       	movw	r30, r24

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    39ae:	a1 81       	ldd	r26, Z+1	; 0x01
    39b0:	b2 81       	ldd	r27, Z+2	; 0x02
    39b2:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    39b6:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    39ba:	bf 87       	std	Y+15, r27	; 0x0f
    39bc:	ae 87       	std	Y+14, r26	; 0x0e
    39be:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    39c2:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    39c6:	14 96       	adiw	r26, 0x04	; 4
    39c8:	8d 91       	ld	r24, X+
    39ca:	9c 91       	ld	r25, X
    39cc:	15 97       	sbiw	r26, 0x05	; 5
    39ce:	99 8b       	std	Y+17, r25	; 0x11
    39d0:	88 8b       	std	Y+16, r24	; 0x10
    39d2:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    39d6:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    39da:	14 96       	adiw	r26, 0x04	; 4
    39dc:	cd 91       	ld	r28, X+
    39de:	dc 91       	ld	r29, X
    39e0:	15 97       	sbiw	r26, 0x05	; 5
    39e2:	24 5f       	subi	r18, 0xF4	; 244
    39e4:	3f 4f       	sbci	r19, 0xFF	; 255
    39e6:	3b 83       	std	Y+3, r19	; 0x03
    39e8:	2a 83       	std	Y+2, r18	; 0x02
    39ea:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    39ee:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    39f2:	24 5f       	subi	r18, 0xF4	; 244
    39f4:	3f 4f       	sbci	r19, 0xFF	; 255
    39f6:	15 96       	adiw	r26, 0x05	; 5
    39f8:	3c 93       	st	X, r19
    39fa:	2e 93       	st	-X, r18
    39fc:	14 97       	sbiw	r26, 0x04	; 4
    39fe:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3a02:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3a06:	55 96       	adiw	r26, 0x15	; 21
    3a08:	fc 93       	st	X, r31
    3a0a:	ee 93       	st	-X, r30
    3a0c:	54 97       	sbiw	r26, 0x14	; 20
    3a0e:	90 81       	ld	r25, Z
    3a10:	9f 5f       	subi	r25, 0xFF	; 255
    3a12:	90 83       	st	Z, r25

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
    3a14:	44 23       	and	r20, r20
    3a16:	11 f0       	breq	.+4      	; 0x3a1c <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
    3a18:	6f ef       	ldi	r22, 0xFF	; 255
    3a1a:	7f ef       	ldi	r23, 0xFF	; 255
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3a1c:	cb 01       	movw	r24, r22

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28
        {
            xTicksToWait = portMAX_DELAY;
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3a22:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <prvAddCurrentTaskToDelayedList.isra.2>

00003a26 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	15 96       	adiw	r26, 0x05	; 5
    3a2e:	ed 91       	ld	r30, X+
    3a30:	fc 91       	ld	r31, X
    3a32:	06 80       	ldd	r0, Z+6	; 0x06
    3a34:	f7 81       	ldd	r31, Z+7	; 0x07
    3a36:	e0 2d       	mov	r30, r0
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    3a38:	a4 89       	ldd	r26, Z+20	; 0x14
    3a3a:	b5 89       	ldd	r27, Z+21	; 0x15
    3a3c:	86 85       	ldd	r24, Z+14	; 0x0e
    3a3e:	97 85       	ldd	r25, Z+15	; 0x0f
    3a40:	20 89       	ldd	r18, Z+16	; 0x10
    3a42:	31 89       	ldd	r19, Z+17	; 0x11
    3a44:	ec 01       	movw	r28, r24
    3a46:	3d 83       	std	Y+5, r19	; 0x05
    3a48:	2c 83       	std	Y+4, r18	; 0x04
    3a4a:	c0 89       	ldd	r28, Z+16	; 0x10
    3a4c:	d1 89       	ldd	r29, Z+17	; 0x11
    3a4e:	9b 83       	std	Y+3, r25	; 0x03
    3a50:	8a 83       	std	Y+2, r24	; 0x02
    3a52:	cf 01       	movw	r24, r30
    3a54:	0c 96       	adiw	r24, 0x0c	; 12
    3a56:	11 96       	adiw	r26, 0x01	; 1
    3a58:	2d 91       	ld	r18, X+
    3a5a:	3c 91       	ld	r19, X
    3a5c:	12 97       	sbiw	r26, 0x02	; 2
    3a5e:	28 17       	cp	r18, r24
    3a60:	39 07       	cpc	r19, r25
    3a62:	21 f4       	brne	.+8      	; 0x3a6c <xTaskRemoveFromEventList+0x46>
    3a64:	12 96       	adiw	r26, 0x02	; 2
    3a66:	dc 93       	st	X, r29
    3a68:	ce 93       	st	-X, r28
    3a6a:	11 97       	sbiw	r26, 0x01	; 1
    3a6c:	15 8a       	std	Z+21, r1	; 0x15
    3a6e:	14 8a       	std	Z+20, r1	; 0x14
    3a70:	2c 91       	ld	r18, X
    3a72:	21 50       	subi	r18, 0x01	; 1
    3a74:	2c 93       	st	X, r18

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3a76:	20 91 7c 07 	lds	r18, 0x077C	; 0x80077c <uxSchedulerSuspended>
    3a7a:	21 11       	cpse	r18, r1
    3a7c:	57 c0       	rjmp	.+174    	; 0x3b2c <xTaskRemoveFromEventList+0x106>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    3a7e:	a2 85       	ldd	r26, Z+10	; 0x0a
    3a80:	b3 85       	ldd	r27, Z+11	; 0x0b
    3a82:	84 81       	ldd	r24, Z+4	; 0x04
    3a84:	95 81       	ldd	r25, Z+5	; 0x05
    3a86:	26 81       	ldd	r18, Z+6	; 0x06
    3a88:	37 81       	ldd	r19, Z+7	; 0x07
    3a8a:	ec 01       	movw	r28, r24
    3a8c:	3d 83       	std	Y+5, r19	; 0x05
    3a8e:	2c 83       	std	Y+4, r18	; 0x04
    3a90:	c6 81       	ldd	r28, Z+6	; 0x06
    3a92:	d7 81       	ldd	r29, Z+7	; 0x07
    3a94:	9b 83       	std	Y+3, r25	; 0x03
    3a96:	8a 83       	std	Y+2, r24	; 0x02
    3a98:	cf 01       	movw	r24, r30
    3a9a:	02 96       	adiw	r24, 0x02	; 2
    3a9c:	11 96       	adiw	r26, 0x01	; 1
    3a9e:	2d 91       	ld	r18, X+
    3aa0:	3c 91       	ld	r19, X
    3aa2:	12 97       	sbiw	r26, 0x02	; 2
    3aa4:	28 17       	cp	r18, r24
    3aa6:	39 07       	cpc	r19, r25
    3aa8:	21 f4       	brne	.+8      	; 0x3ab2 <xTaskRemoveFromEventList+0x8c>
    3aaa:	12 96       	adiw	r26, 0x02	; 2
    3aac:	dc 93       	st	X, r29
    3aae:	ce 93       	st	-X, r28
    3ab0:	11 97       	sbiw	r26, 0x01	; 1
    3ab2:	13 86       	std	Z+11, r1	; 0x0b
    3ab4:	12 86       	std	Z+10, r1	; 0x0a
    3ab6:	2c 91       	ld	r18, X
    3ab8:	21 50       	subi	r18, 0x01	; 1
    3aba:	2c 93       	st	X, r18
        prvAddTaskToReadyList( pxUnblockedTCB );
    3abc:	c6 89       	ldd	r28, Z+22	; 0x16
    3abe:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    3ac2:	2c 17       	cp	r18, r28
    3ac4:	10 f4       	brcc	.+4      	; 0x3aca <xTaskRemoveFromEventList+0xa4>
    3ac6:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    3aca:	29 e0       	ldi	r18, 0x09	; 9
    3acc:	2c 9f       	mul	r18, r28
    3ace:	e0 01       	movw	r28, r0
    3ad0:	11 24       	eor	r1, r1
    3ad2:	cc 54       	subi	r28, 0x4C	; 76
    3ad4:	d8 4f       	sbci	r29, 0xF8	; 248
    3ad6:	09 80       	ldd	r0, Y+1	; 0x01
    3ad8:	da 81       	ldd	r29, Y+2	; 0x02
    3ada:	c0 2d       	mov	r28, r0
    3adc:	d5 83       	std	Z+5, r29	; 0x05
    3ade:	c4 83       	std	Z+4, r28	; 0x04
    3ae0:	4c 81       	ldd	r20, Y+4	; 0x04
    3ae2:	5d 81       	ldd	r21, Y+5	; 0x05
    3ae4:	57 83       	std	Z+7, r21	; 0x07
    3ae6:	46 83       	std	Z+6, r20	; 0x06
    3ae8:	ac 81       	ldd	r26, Y+4	; 0x04
    3aea:	bd 81       	ldd	r27, Y+5	; 0x05
    3aec:	13 96       	adiw	r26, 0x03	; 3
    3aee:	9c 93       	st	X, r25
    3af0:	8e 93       	st	-X, r24
    3af2:	12 97       	sbiw	r26, 0x02	; 2
    3af4:	9d 83       	std	Y+5, r25	; 0x05
    3af6:	8c 83       	std	Y+4, r24	; 0x04
    3af8:	a6 89       	ldd	r26, Z+22	; 0x16
    3afa:	a2 9f       	mul	r26, r18
    3afc:	d0 01       	movw	r26, r0
    3afe:	11 24       	eor	r1, r1
    3b00:	ac 54       	subi	r26, 0x4C	; 76
    3b02:	b8 4f       	sbci	r27, 0xF8	; 248
    3b04:	b3 87       	std	Z+11, r27	; 0x0b
    3b06:	a2 87       	std	Z+10, r26	; 0x0a
    3b08:	8c 91       	ld	r24, X
    3b0a:	8f 5f       	subi	r24, 0xFF	; 255
    3b0c:	8c 93       	st	X, r24
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3b0e:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3b12:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3b16:	96 89       	ldd	r25, Z+22	; 0x16
    3b18:	56 96       	adiw	r26, 0x16	; 22
    3b1a:	8c 91       	ld	r24, X
    3b1c:	89 17       	cp	r24, r25
    3b1e:	30 f5       	brcc	.+76     	; 0x3b6c <xTaskRemoveFromEventList+0x146>
             * it should force a context switch now. */
            xReturn = pdTRUE;

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
}
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	08 95       	ret
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3b2c:	a0 91 96 07 	lds	r26, 0x0796	; 0x800796 <xPendingReadyList+0x1>
    3b30:	b0 91 97 07 	lds	r27, 0x0797	; 0x800797 <xPendingReadyList+0x2>
    3b34:	b7 87       	std	Z+15, r27	; 0x0f
    3b36:	a6 87       	std	Z+14, r26	; 0x0e
    3b38:	14 96       	adiw	r26, 0x04	; 4
    3b3a:	2d 91       	ld	r18, X+
    3b3c:	3c 91       	ld	r19, X
    3b3e:	15 97       	sbiw	r26, 0x05	; 5
    3b40:	31 8b       	std	Z+17, r19	; 0x11
    3b42:	20 8b       	std	Z+16, r18	; 0x10
    3b44:	14 96       	adiw	r26, 0x04	; 4
    3b46:	cd 91       	ld	r28, X+
    3b48:	dc 91       	ld	r29, X
    3b4a:	15 97       	sbiw	r26, 0x05	; 5
    3b4c:	9b 83       	std	Y+3, r25	; 0x03
    3b4e:	8a 83       	std	Y+2, r24	; 0x02
    3b50:	15 96       	adiw	r26, 0x05	; 5
    3b52:	9c 93       	st	X, r25
    3b54:	8e 93       	st	-X, r24
    3b56:	14 97       	sbiw	r26, 0x04	; 4
    3b58:	85 e9       	ldi	r24, 0x95	; 149
    3b5a:	97 e0       	ldi	r25, 0x07	; 7
    3b5c:	95 8b       	std	Z+21, r25	; 0x15
    3b5e:	84 8b       	std	Z+20, r24	; 0x14
    3b60:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <xPendingReadyList>
    3b64:	8f 5f       	subi	r24, 0xFF	; 255
    3b66:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <xPendingReadyList>
    3b6a:	d1 cf       	rjmp	.-94     	; 0x3b0e <xTaskRemoveFromEventList+0xe8>
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
    3b6e:	db cf       	rjmp	.-74     	; 0x3b26 <xTaskRemoveFromEventList+0x100>

00003b70 <vTaskRemoveFromUnorderedEventList>:
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	dc 01       	movw	r26, r24
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3b76:	70 68       	ori	r23, 0x80	; 128
    3b78:	11 96       	adiw	r26, 0x01	; 1
    3b7a:	7c 93       	st	X, r23
    3b7c:	6e 93       	st	-X, r22
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
    3b7e:	16 96       	adiw	r26, 0x06	; 6
    3b80:	ed 91       	ld	r30, X+
    3b82:	fc 91       	ld	r31, X
    3b84:	17 97       	sbiw	r26, 0x07	; 7
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( pxEventListItem );
    3b86:	18 96       	adiw	r26, 0x08	; 8
    3b88:	4d 91       	ld	r20, X+
    3b8a:	5c 91       	ld	r21, X
    3b8c:	19 97       	sbiw	r26, 0x09	; 9
    3b8e:	12 96       	adiw	r26, 0x02	; 2
    3b90:	2d 91       	ld	r18, X+
    3b92:	3c 91       	ld	r19, X
    3b94:	13 97       	sbiw	r26, 0x03	; 3
    3b96:	14 96       	adiw	r26, 0x04	; 4
    3b98:	8d 91       	ld	r24, X+
    3b9a:	9c 91       	ld	r25, X
    3b9c:	15 97       	sbiw	r26, 0x05	; 5
    3b9e:	e9 01       	movw	r28, r18
    3ba0:	9d 83       	std	Y+5, r25	; 0x05
    3ba2:	8c 83       	std	Y+4, r24	; 0x04
    3ba4:	14 96       	adiw	r26, 0x04	; 4
    3ba6:	8d 91       	ld	r24, X+
    3ba8:	9c 91       	ld	r25, X
    3baa:	15 97       	sbiw	r26, 0x05	; 5
    3bac:	ec 01       	movw	r28, r24
    3bae:	3b 83       	std	Y+3, r19	; 0x03
    3bb0:	2a 83       	std	Y+2, r18	; 0x02
    3bb2:	ea 01       	movw	r28, r20
    3bb4:	29 81       	ldd	r18, Y+1	; 0x01
    3bb6:	3a 81       	ldd	r19, Y+2	; 0x02
    3bb8:	2a 17       	cp	r18, r26
    3bba:	3b 07       	cpc	r19, r27
    3bbc:	11 f4       	brne	.+4      	; 0x3bc2 <vTaskRemoveFromUnorderedEventList+0x52>
    3bbe:	9a 83       	std	Y+2, r25	; 0x02
    3bc0:	89 83       	std	Y+1, r24	; 0x01
    3bc2:	19 96       	adiw	r26, 0x09	; 9
    3bc4:	1c 92       	st	X, r1
    3bc6:	1e 92       	st	-X, r1
    3bc8:	18 97       	sbiw	r26, 0x08	; 8
    3bca:	da 01       	movw	r26, r20
    3bcc:	8c 91       	ld	r24, X
    3bce:	81 50       	subi	r24, 0x01	; 1
    3bd0:	8c 93       	st	X, r24
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    3bd2:	a2 85       	ldd	r26, Z+10	; 0x0a
    3bd4:	b3 85       	ldd	r27, Z+11	; 0x0b
    3bd6:	84 81       	ldd	r24, Z+4	; 0x04
    3bd8:	95 81       	ldd	r25, Z+5	; 0x05
    3bda:	26 81       	ldd	r18, Z+6	; 0x06
    3bdc:	37 81       	ldd	r19, Z+7	; 0x07
    3bde:	ec 01       	movw	r28, r24
    3be0:	3d 83       	std	Y+5, r19	; 0x05
    3be2:	2c 83       	std	Y+4, r18	; 0x04
    3be4:	c6 81       	ldd	r28, Z+6	; 0x06
    3be6:	d7 81       	ldd	r29, Z+7	; 0x07
    3be8:	9b 83       	std	Y+3, r25	; 0x03
    3bea:	8a 83       	std	Y+2, r24	; 0x02
    3bec:	cf 01       	movw	r24, r30
    3bee:	02 96       	adiw	r24, 0x02	; 2
    3bf0:	11 96       	adiw	r26, 0x01	; 1
    3bf2:	2d 91       	ld	r18, X+
    3bf4:	3c 91       	ld	r19, X
    3bf6:	12 97       	sbiw	r26, 0x02	; 2
    3bf8:	28 17       	cp	r18, r24
    3bfa:	39 07       	cpc	r19, r25
    3bfc:	21 f4       	brne	.+8      	; 0x3c06 <vTaskRemoveFromUnorderedEventList+0x96>
    3bfe:	12 96       	adiw	r26, 0x02	; 2
    3c00:	dc 93       	st	X, r29
    3c02:	ce 93       	st	-X, r28
    3c04:	11 97       	sbiw	r26, 0x01	; 1
    3c06:	13 86       	std	Z+11, r1	; 0x0b
    3c08:	12 86       	std	Z+10, r1	; 0x0a
    3c0a:	2c 91       	ld	r18, X
    3c0c:	21 50       	subi	r18, 0x01	; 1
    3c0e:	2c 93       	st	X, r18
    prvAddTaskToReadyList( pxUnblockedTCB );
    3c10:	c6 89       	ldd	r28, Z+22	; 0x16
    3c12:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    3c16:	2c 17       	cp	r18, r28
    3c18:	10 f4       	brcc	.+4      	; 0x3c1e <vTaskRemoveFromUnorderedEventList+0xae>
    3c1a:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    3c1e:	49 e0       	ldi	r20, 0x09	; 9
    3c20:	4c 9f       	mul	r20, r28
    3c22:	e0 01       	movw	r28, r0
    3c24:	11 24       	eor	r1, r1
    3c26:	cc 54       	subi	r28, 0x4C	; 76
    3c28:	d8 4f       	sbci	r29, 0xF8	; 248
    3c2a:	09 80       	ldd	r0, Y+1	; 0x01
    3c2c:	da 81       	ldd	r29, Y+2	; 0x02
    3c2e:	c0 2d       	mov	r28, r0
    3c30:	d5 83       	std	Z+5, r29	; 0x05
    3c32:	c4 83       	std	Z+4, r28	; 0x04
    3c34:	2c 81       	ldd	r18, Y+4	; 0x04
    3c36:	3d 81       	ldd	r19, Y+5	; 0x05
    3c38:	37 83       	std	Z+7, r19	; 0x07
    3c3a:	26 83       	std	Z+6, r18	; 0x06
    3c3c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c3e:	3d 81       	ldd	r19, Y+5	; 0x05
    3c40:	d9 01       	movw	r26, r18
    3c42:	13 96       	adiw	r26, 0x03	; 3
    3c44:	9c 93       	st	X, r25
    3c46:	8e 93       	st	-X, r24
    3c48:	12 97       	sbiw	r26, 0x02	; 2
    3c4a:	9d 83       	std	Y+5, r25	; 0x05
    3c4c:	8c 83       	std	Y+4, r24	; 0x04
    3c4e:	96 89       	ldd	r25, Z+22	; 0x16
    3c50:	94 9f       	mul	r25, r20
    3c52:	d0 01       	movw	r26, r0
    3c54:	11 24       	eor	r1, r1
    3c56:	ac 54       	subi	r26, 0x4C	; 76
    3c58:	b8 4f       	sbci	r27, 0xF8	; 248
    3c5a:	b3 87       	std	Z+11, r27	; 0x0b
    3c5c:	a2 87       	std	Z+10, r26	; 0x0a
    3c5e:	8c 91       	ld	r24, X
    3c60:	8f 5f       	subi	r24, 0xFF	; 255
    3c62:	8c 93       	st	X, r24

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3c64:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3c68:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3c6c:	86 89       	ldd	r24, Z+22	; 0x16
    3c6e:	89 17       	cp	r24, r25
    3c70:	18 f4       	brcc	.+6      	; 0x3c78 <vTaskRemoveFromUnorderedEventList+0x108>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
    3c78:	df 91       	pop	r29
    3c7a:	cf 91       	pop	r28
    3c7c:	08 95       	ret

00003c7e <vTaskSetTimeOutState>:
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
    taskENTER_CRITICAL();
    3c7e:	0f b6       	in	r0, 0x3f	; 63
    3c80:	f8 94       	cli
    3c82:	0f 92       	push	r0
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
    3c84:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <xNumOfOverflows>
    3c88:	fc 01       	movw	r30, r24
    3c8a:	20 83       	st	Z, r18
        pxTimeOut->xTimeOnEntering = xTickCount;
    3c8c:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <xTickCount>
    3c90:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <xTickCount+0x1>
    3c94:	32 83       	std	Z+2, r19	; 0x02
    3c96:	21 83       	std	Z+1, r18	; 0x01
    }
    taskEXIT_CRITICAL();
    3c98:	0f 90       	pop	r0
    3c9a:	0f be       	out	0x3f, r0	; 63

    traceRETURN_vTaskSetTimeOutState();
}
    3c9c:	08 95       	ret

00003c9e <vTaskInternalSetTimeOutState>:
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    3c9e:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <xNumOfOverflows>
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    3ca6:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <xTickCount>
    3caa:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <xTickCount+0x1>
    3cae:	32 83       	std	Z+2, r19	; 0x02
    3cb0:	21 83       	std	Z+1, r18	; 0x01

    traceRETURN_vTaskInternalSetTimeOutState();
}
    3cb2:	08 95       	ret

00003cb4 <xTaskCheckForTimeOut>:
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	f8 94       	cli
    3cb8:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    3cba:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <xTickCount>
    3cbe:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	11 96       	adiw	r26, 0x01	; 1
    3cc6:	4d 91       	ld	r20, X+
    3cc8:	5c 91       	ld	r21, X
    3cca:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
    3ccc:	e0 91 82 07 	lds	r30, 0x0782	; 0x800782 <xNumOfOverflows>
    3cd0:	fc 91       	ld	r31, X
    3cd2:	fe 17       	cp	r31, r30
    3cd4:	51 f0       	breq	.+20     	; 0x3cea <xTaskCheckForTimeOut+0x36>
    3cd6:	24 17       	cp	r18, r20
    3cd8:	35 07       	cpc	r19, r21
    3cda:	38 f0       	brcs	.+14     	; 0x3cea <xTaskCheckForTimeOut+0x36>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    3cdc:	fb 01       	movw	r30, r22
    3cde:	11 82       	std	Z+1, r1	; 0x01
    3ce0:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    3ce4:	0f 90       	pop	r0
    3ce6:	0f be       	out	0x3f, r0	; 63

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
}
    3ce8:	08 95       	ret

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3cea:	24 1b       	sub	r18, r20
    3cec:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait )
    3cee:	db 01       	movw	r26, r22
    3cf0:	4d 91       	ld	r20, X+
    3cf2:	5c 91       	ld	r21, X
    3cf4:	24 17       	cp	r18, r20
    3cf6:	35 07       	cpc	r19, r21
    3cf8:	88 f7       	brcc	.-30     	; 0x3cdc <xTaskCheckForTimeOut+0x28>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    3cfa:	42 1b       	sub	r20, r18
    3cfc:	53 0b       	sbc	r21, r19
    3cfe:	fb 01       	movw	r30, r22
    3d00:	51 83       	std	Z+1, r21	; 0x01
    3d02:	40 83       	st	Z, r20
            vTaskInternalSetTimeOutState( pxTimeOut );
    3d04:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	ec cf       	rjmp	.-40     	; 0x3ce4 <xTaskCheckForTimeOut+0x30>

00003d0c <vTaskMissedYield>:
void vTaskMissedYield( void )
{
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>

    traceRETURN_vTaskMissedYield();
}
    3d12:	08 95       	ret

00003d14 <xTaskGetCurrentTaskHandle>:
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
    3d14:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3d18:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
        }
    3d1c:	08 95       	ret

00003d1e <xTaskGetCurrentTaskHandleForCore>:
    {
        TaskHandle_t xReturn = NULL;

        traceENTER_xTaskGetCurrentTaskHandleForCore( xCoreID );

        if( taskVALID_CORE_ID( xCoreID ) != pdFALSE )
    3d1e:	81 11       	cpse	r24, r1
    3d20:	05 c0       	rjmp	.+10     	; 0x3d2c <xTaskGetCurrentTaskHandleForCore+0xe>
        {
            #if ( configNUMBER_OF_CORES == 1 )
                xReturn = pxCurrentTCB;
    3d22:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3d26:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3d2a:	08 95       	ret
        }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    TaskHandle_t xTaskGetCurrentTaskHandleForCore( BaseType_t xCoreID )
    {
        TaskHandle_t xReturn = NULL;
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTaskGetCurrentTaskHandleForCore( xReturn );

        return xReturn;
    }
    3d30:	08 95       	ret

00003d32 <xTaskGetSchedulerState>:
    {
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
    3d32:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xSchedulerRunning>
    3d36:	88 23       	and	r24, r24
    3d38:	31 f0       	breq	.+12     	; 0x3d46 <xTaskGetSchedulerState+0x14>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    3d3a:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    3d3e:	88 23       	and	r24, r24
    3d40:	21 f0       	breq	.+8      	; 0x3d4a <xTaskGetSchedulerState+0x18>
                {
                    xReturn = taskSCHEDULER_RUNNING;
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	08 95       	ret

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	08 95       	ret
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
                {
                    xReturn = taskSCHEDULER_RUNNING;
    3d4a:	82 e0       	ldi	r24, 0x02	; 2
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
    }
    3d4c:	08 95       	ret

00003d4e <uxTaskResetEventItemValue>:
{
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    3d4e:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3d52:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3d56:	84 85       	ldd	r24, Z+12	; 0x0c
    3d58:	95 85       	ldd	r25, Z+13	; 0x0d

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
    3d5a:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3d5e:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3d62:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3d66:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3d6a:	56 96       	adiw	r26, 0x16	; 22
    3d6c:	4c 91       	ld	r20, X
    3d6e:	24 e0       	ldi	r18, 0x04	; 4
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	24 1b       	sub	r18, r20
    3d74:	31 09       	sbc	r19, r1
    3d76:	35 87       	std	Z+13, r19	; 0x0d
    3d78:	24 87       	std	Z+12, r18	; 0x0c

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
}
    3d7a:	08 95       	ret

00003d7c <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
    3d7c:	cf 92       	push	r12
    3d7e:	df 92       	push	r13
    3d80:	ef 92       	push	r14
    3d82:	ff 92       	push	r15
    3d84:	0f 93       	push	r16
    3d86:	1f 93       	push	r17
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	c8 2f       	mov	r28, r24
    3d8e:	e6 2e       	mov	r14, r22
    3d90:	6a 01       	movw	r12, r20

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    3d92:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
    3d96:	0f b6       	in	r0, 0x3f	; 63
    3d98:	f8 94       	cli
    3d9a:	0f 92       	push	r0
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
    3d9c:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3da0:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3da4:	d0 e0       	ldi	r29, 0x00	; 0
    3da6:	8e 01       	movw	r16, r28
    3da8:	00 0f       	add	r16, r16
    3daa:	11 1f       	adc	r17, r17
    3dac:	00 0f       	add	r16, r16
    3dae:	11 1f       	adc	r17, r17
    3db0:	e0 0f       	add	r30, r16
    3db2:	f1 1f       	adc	r31, r17
    3db4:	81 a1       	ldd	r24, Z+33	; 0x21
    3db6:	92 a1       	ldd	r25, Z+34	; 0x22
    3db8:	a3 a1       	ldd	r26, Z+35	; 0x23
    3dba:	b4 a1       	ldd	r27, Z+36	; 0x24
    3dbc:	89 2b       	or	r24, r25
    3dbe:	8a 2b       	or	r24, r26
    3dc0:	8b 2b       	or	r24, r27
    3dc2:	69 f4       	brne	.+26     	; 0x3dde <ulTaskGenericNotifyTake+0x62>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    3dc4:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3dc8:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3dcc:	ec 0f       	add	r30, r28
    3dce:	fd 1f       	adc	r31, r29
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    3dd4:	ff 24       	eor	r15, r15
    3dd6:	f3 94       	inc	r15
    3dd8:	c1 14       	cp	r12, r1
    3dda:	d1 04       	cpc	r13, r1
    3ddc:	09 f4       	brne	.+2      	; 0x3de0 <ulTaskGenericNotifyTake+0x64>
    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
    3dde:	f1 2c       	mov	r15, r1
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3de0:	0f 90       	pop	r0
    3de2:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    3de4:	21 e0       	ldi	r18, 0x01	; 1
    3de6:	f2 12       	cpse	r15, r18
    3de8:	03 c0       	rjmp	.+6      	; 0x3df0 <ulTaskGenericNotifyTake+0x74>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3dea:	c6 01       	movw	r24, r12
    3dec:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3df0:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    3df4:	91 e0       	ldi	r25, 0x01	; 1
    3df6:	f9 12       	cpse	r15, r25
    3df8:	04 c0       	rjmp	.+8      	; 0x3e02 <ulTaskGenericNotifyTake+0x86>
    3dfa:	81 11       	cpse	r24, r1
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
    3dfe:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	f8 94       	cli
    3e06:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    3e08:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3e0c:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3e10:	e0 0f       	add	r30, r16
    3e12:	f1 1f       	adc	r31, r17
    3e14:	61 a1       	ldd	r22, Z+33	; 0x21
    3e16:	72 a1       	ldd	r23, Z+34	; 0x22
    3e18:	83 a1       	ldd	r24, Z+35	; 0x23
    3e1a:	94 a1       	ldd	r25, Z+36	; 0x24

            if( ulReturn != 0U )
    3e1c:	61 15       	cp	r22, r1
    3e1e:	71 05       	cpc	r23, r1
    3e20:	81 05       	cpc	r24, r1
    3e22:	91 05       	cpc	r25, r1
    3e24:	69 f0       	breq	.+26     	; 0x3e40 <ulTaskGenericNotifyTake+0xc4>
            {
                if( xClearCountOnExit != pdFALSE )
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3e26:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3e2a:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3e2e:	02 0f       	add	r16, r18
    3e30:	13 1f       	adc	r17, r19
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];

            if( ulReturn != 0U )
            {
                if( xClearCountOnExit != pdFALSE )
    3e32:	ee 20       	and	r14, r14
    3e34:	b9 f0       	breq	.+46     	; 0x3e64 <ulTaskGenericNotifyTake+0xe8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
    3e36:	f8 01       	movw	r30, r16
    3e38:	11 a2       	std	Z+33, r1	; 0x21
    3e3a:	12 a2       	std	Z+34, r1	; 0x22
    3e3c:	13 a2       	std	Z+35, r1	; 0x23
    3e3e:	14 a2       	std	Z+36, r1	; 0x24
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    3e40:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3e44:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3e48:	c2 0f       	add	r28, r18
    3e4a:	d3 1f       	adc	r29, r19
    3e4c:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    3e4e:	0f 90       	pop	r0
    3e50:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
    }
    3e52:	df 91       	pop	r29
    3e54:	cf 91       	pop	r28
    3e56:	1f 91       	pop	r17
    3e58:	0f 91       	pop	r16
    3e5a:	ff 90       	pop	r15
    3e5c:	ef 90       	pop	r14
    3e5e:	df 90       	pop	r13
    3e60:	cf 90       	pop	r12
    3e62:	08 95       	ret
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
    3e64:	6b 01       	movw	r12, r22
    3e66:	7c 01       	movw	r14, r24
    3e68:	f1 e0       	ldi	r31, 0x01	; 1
    3e6a:	cf 1a       	sub	r12, r31
    3e6c:	d1 08       	sbc	r13, r1
    3e6e:	e1 08       	sbc	r14, r1
    3e70:	f1 08       	sbc	r15, r1
    3e72:	f8 01       	movw	r30, r16
    3e74:	c1 a2       	std	Z+33, r12	; 0x21
    3e76:	d2 a2       	std	Z+34, r13	; 0x22
    3e78:	e3 a2       	std	Z+35, r14	; 0x23
    3e7a:	f4 a2       	std	Z+36, r15	; 0x24
    3e7c:	e1 cf       	rjmp	.-62     	; 0x3e40 <ulTaskGenericNotifyTake+0xc4>

00003e7e <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
    3e7e:	4f 92       	push	r4
    3e80:	5f 92       	push	r5
    3e82:	6f 92       	push	r6
    3e84:	7f 92       	push	r7
    3e86:	8f 92       	push	r8
    3e88:	9f 92       	push	r9
    3e8a:	af 92       	push	r10
    3e8c:	bf 92       	push	r11
    3e8e:	cf 92       	push	r12
    3e90:	df 92       	push	r13
    3e92:	ef 92       	push	r14
    3e94:	ff 92       	push	r15
    3e96:	0f 93       	push	r16
    3e98:	1f 93       	push	r17
    3e9a:	cf 93       	push	r28
    3e9c:	df 93       	push	r29
    3e9e:	c8 2f       	mov	r28, r24
    3ea0:	2a 01       	movw	r4, r20
    3ea2:	3b 01       	movw	r6, r22
    3ea4:	48 01       	movw	r8, r16
    3ea6:	59 01       	movw	r10, r18

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
    3ea8:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	f8 94       	cli
    3eb0:	0f 92       	push	r0
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    3eb2:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3eb6:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3eba:	d0 e0       	ldi	r29, 0x00	; 0
    3ebc:	ec 0f       	add	r30, r28
    3ebe:	fd 1f       	adc	r31, r29
    3ec0:	85 a1       	ldd	r24, Z+37	; 0x25
    3ec2:	82 30       	cpi	r24, 0x02	; 2
    3ec4:	39 f1       	breq	.+78     	; 0x3f14 <xTaskGenericNotifyWait+0x96>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
    3ec6:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3eca:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3ece:	ce 01       	movw	r24, r28
    3ed0:	88 0f       	add	r24, r24
    3ed2:	99 1f       	adc	r25, r25
    3ed4:	88 0f       	add	r24, r24
    3ed6:	99 1f       	adc	r25, r25
    3ed8:	e8 0f       	add	r30, r24
    3eda:	f9 1f       	adc	r31, r25
    3edc:	81 a1       	ldd	r24, Z+33	; 0x21
    3ede:	92 a1       	ldd	r25, Z+34	; 0x22
    3ee0:	a3 a1       	ldd	r26, Z+35	; 0x23
    3ee2:	b4 a1       	ldd	r27, Z+36	; 0x24
    3ee4:	40 94       	com	r4
    3ee6:	50 94       	com	r5
    3ee8:	60 94       	com	r6
    3eea:	70 94       	com	r7
    3eec:	84 21       	and	r24, r4
    3eee:	95 21       	and	r25, r5
    3ef0:	a6 21       	and	r26, r6
    3ef2:	b7 21       	and	r27, r7
    3ef4:	81 a3       	std	Z+33, r24	; 0x21
    3ef6:	92 a3       	std	Z+34, r25	; 0x22
    3ef8:	a3 a3       	std	Z+35, r26	; 0x23
    3efa:	b4 a3       	std	Z+36, r27	; 0x24

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
    3efc:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3f00:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3f04:	ec 0f       	add	r30, r28
    3f06:	fd 1f       	adc	r31, r29
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	85 a3       	std	Z+37, r24	; 0x25

                    if( xTicksToWait > ( TickType_t ) 0 )
    3f0c:	11 e0       	ldi	r17, 0x01	; 1
    3f0e:	c1 14       	cp	r12, r1
    3f10:	d1 04       	cpc	r13, r1
    3f12:	09 f4       	brne	.+2      	; 0x3f16 <xTaskGenericNotifyWait+0x98>
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
    3f14:	10 e0       	ldi	r17, 0x00	; 0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    3f16:	0f 90       	pop	r0
    3f18:	0f be       	out	0x3f, r0	; 63

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
    3f1a:	11 30       	cpi	r17, 0x01	; 1
    3f1c:	19 f4       	brne	.+6      	; 0x3f24 <xTaskGenericNotifyWait+0xa6>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3f1e:	c6 01       	movw	r24, r12
    3f20:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <prvAddCurrentTaskToDelayedList.isra.2>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
    3f24:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
    3f28:	11 30       	cpi	r17, 0x01	; 1
    3f2a:	21 f4       	brne	.+8      	; 0x3f34 <xTaskGenericNotifyWait+0xb6>
    3f2c:	81 11       	cpse	r24, r1
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <xTaskGenericNotifyWait+0xb6>
        {
            taskYIELD_WITHIN_API();
    3f30:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
    3f3a:	e1 14       	cp	r14, r1
    3f3c:	f1 04       	cpc	r15, r1
    3f3e:	a1 f0       	breq	.+40     	; 0x3f68 <xTaskGenericNotifyWait+0xea>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
    3f40:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3f44:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3f48:	ce 01       	movw	r24, r28
    3f4a:	88 0f       	add	r24, r24
    3f4c:	99 1f       	adc	r25, r25
    3f4e:	88 0f       	add	r24, r24
    3f50:	99 1f       	adc	r25, r25
    3f52:	e8 0f       	add	r30, r24
    3f54:	f9 1f       	adc	r31, r25
    3f56:	81 a1       	ldd	r24, Z+33	; 0x21
    3f58:	92 a1       	ldd	r25, Z+34	; 0x22
    3f5a:	a3 a1       	ldd	r26, Z+35	; 0x23
    3f5c:	b4 a1       	ldd	r27, Z+36	; 0x24
    3f5e:	f7 01       	movw	r30, r14
    3f60:	80 83       	st	Z, r24
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	a2 83       	std	Z+2, r26	; 0x02
    3f66:	b3 83       	std	Z+3, r27	; 0x03

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
    3f68:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3f6c:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3f70:	ec 0f       	add	r30, r28
    3f72:	fd 1f       	adc	r31, r29
    3f74:	85 a1       	ldd	r24, Z+37	; 0x25
    3f76:	82 30       	cpi	r24, 0x02	; 2
    3f78:	b1 f5       	brne	.+108    	; 0x3fe6 <xTaskGenericNotifyWait+0x168>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
    3f7a:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3f7e:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3f82:	ce 01       	movw	r24, r28
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	e8 0f       	add	r30, r24
    3f8e:	f9 1f       	adc	r31, r25
    3f90:	81 a1       	ldd	r24, Z+33	; 0x21
    3f92:	92 a1       	ldd	r25, Z+34	; 0x22
    3f94:	a3 a1       	ldd	r26, Z+35	; 0x23
    3f96:	b4 a1       	ldd	r27, Z+36	; 0x24
    3f98:	80 94       	com	r8
    3f9a:	90 94       	com	r9
    3f9c:	a0 94       	com	r10
    3f9e:	b0 94       	com	r11
    3fa0:	88 21       	and	r24, r8
    3fa2:	99 21       	and	r25, r9
    3fa4:	aa 21       	and	r26, r10
    3fa6:	bb 21       	and	r27, r11
    3fa8:	81 a3       	std	Z+33, r24	; 0x21
    3faa:	92 a3       	std	Z+34, r25	; 0x22
    3fac:	a3 a3       	std	Z+35, r26	; 0x23
    3fae:	b4 a3       	std	Z+36, r27	; 0x24
                xReturn = pdTRUE;
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
    3fb2:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    3fb6:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    3fba:	c2 0f       	add	r28, r18
    3fbc:	d3 1f       	adc	r29, r19
    3fbe:	1d a2       	std	Y+37, r1	; 0x25
        }
        taskEXIT_CRITICAL();
    3fc0:	0f 90       	pop	r0
    3fc2:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
    }
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	df 90       	pop	r13
    3fd2:	cf 90       	pop	r12
    3fd4:	bf 90       	pop	r11
    3fd6:	af 90       	pop	r10
    3fd8:	9f 90       	pop	r9
    3fda:	8f 90       	pop	r8
    3fdc:	7f 90       	pop	r7
    3fde:	6f 90       	pop	r6
    3fe0:	5f 90       	pop	r5
    3fe2:	4f 90       	pop	r4
    3fe4:	08 95       	ret
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	e4 cf       	rjmp	.-56     	; 0x3fb2 <xTaskGenericNotifyWait+0x134>

00003fea <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
    3fea:	8f 92       	push	r8
    3fec:	9f 92       	push	r9
    3fee:	af 92       	push	r10
    3ff0:	bf 92       	push	r11
    3ff2:	cf 92       	push	r12
    3ff4:	df 92       	push	r13
    3ff6:	ef 92       	push	r14
    3ff8:	ff 92       	push	r15
    3ffa:	0f 93       	push	r16
    3ffc:	cf 93       	push	r28
    3ffe:	df 93       	push	r29
    4000:	dc 01       	movw	r26, r24

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;

        taskENTER_CRITICAL();
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	0f 92       	push	r0
    4008:	70 e0       	ldi	r23, 0x00	; 0
        {
            if( pulPreviousNotificationValue != NULL )
    400a:	e1 14       	cp	r14, r1
    400c:	f1 04       	cpc	r15, r1
    400e:	81 f0       	breq	.+32     	; 0x4030 <xTaskGenericNotify+0x46>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    4010:	fb 01       	movw	r30, r22
    4012:	ee 0f       	add	r30, r30
    4014:	ff 1f       	adc	r31, r31
    4016:	ee 0f       	add	r30, r30
    4018:	ff 1f       	adc	r31, r31
    401a:	e8 0f       	add	r30, r24
    401c:	f9 1f       	adc	r31, r25
    401e:	81 a0       	ldd	r8, Z+33	; 0x21
    4020:	92 a0       	ldd	r9, Z+34	; 0x22
    4022:	a3 a0       	ldd	r10, Z+35	; 0x23
    4024:	b4 a0       	ldd	r11, Z+36	; 0x24
    4026:	e7 01       	movw	r28, r14
    4028:	88 82       	st	Y, r8
    402a:	99 82       	std	Y+1, r9	; 0x01
    402c:	aa 82       	std	Y+2, r10	; 0x02
    402e:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    4030:	fd 01       	movw	r30, r26
    4032:	e6 0f       	add	r30, r22
    4034:	f7 1f       	adc	r31, r23
    4036:	85 a1       	ldd	r24, Z+37	; 0x25

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    4038:	92 e0       	ldi	r25, 0x02	; 2
    403a:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    403c:	02 30       	cpi	r16, 0x02	; 2
    403e:	e1 f1       	breq	.+120    	; 0x40b8 <xTaskGenericNotify+0xce>
    4040:	a0 f4       	brcc	.+40     	; 0x406a <xTaskGenericNotify+0x80>
    4042:	01 30       	cpi	r16, 0x01	; 1
    4044:	29 f1       	breq	.+74     	; 0x4090 <xTaskGenericNotify+0xa6>

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4046:	81 30       	cpi	r24, 0x01	; 1
    4048:	09 f4       	brne	.+2      	; 0x404c <xTaskGenericNotify+0x62>
    404a:	4a c0       	rjmp	.+148    	; 0x40e0 <xTaskGenericNotify+0xf6>
    404c:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    404e:	0f 90       	pop	r0
    4050:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
    }
    4052:	df 91       	pop	r29
    4054:	cf 91       	pop	r28
    4056:	0f 91       	pop	r16
    4058:	ff 90       	pop	r15
    405a:	ef 90       	pop	r14
    405c:	df 90       	pop	r13
    405e:	cf 90       	pop	r12
    4060:	bf 90       	pop	r11
    4062:	af 90       	pop	r10
    4064:	9f 90       	pop	r9
    4066:	8f 90       	pop	r8
    4068:	08 95       	ret

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    406a:	03 30       	cpi	r16, 0x03	; 3
    406c:	29 f0       	breq	.+10     	; 0x4078 <xTaskGenericNotify+0x8e>
    406e:	04 30       	cpi	r16, 0x04	; 4
    4070:	51 f7       	brne	.-44     	; 0x4046 <xTaskGenericNotify+0x5c>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4072:	82 30       	cpi	r24, 0x02	; 2
    4074:	09 f4       	brne	.+2      	; 0x4078 <xTaskGenericNotify+0x8e>
    4076:	97 c0       	rjmp	.+302    	; 0x41a6 <xTaskGenericNotify+0x1bc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    4078:	66 0f       	add	r22, r22
    407a:	77 1f       	adc	r23, r23
    407c:	66 0f       	add	r22, r22
    407e:	77 1f       	adc	r23, r23
    4080:	fd 01       	movw	r30, r26
    4082:	e6 0f       	add	r30, r22
    4084:	f7 1f       	adc	r31, r23
    4086:	21 a3       	std	Z+33, r18	; 0x21
    4088:	32 a3       	std	Z+34, r19	; 0x22
    408a:	43 a3       	std	Z+35, r20	; 0x23
    408c:	54 a3       	std	Z+36, r21	; 0x24
    408e:	db cf       	rjmp	.-74     	; 0x4046 <xTaskGenericNotify+0x5c>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    4090:	66 0f       	add	r22, r22
    4092:	77 1f       	adc	r23, r23
    4094:	66 0f       	add	r22, r22
    4096:	77 1f       	adc	r23, r23
    4098:	fd 01       	movw	r30, r26
    409a:	e6 0f       	add	r30, r22
    409c:	f7 1f       	adc	r31, r23
    409e:	c1 a0       	ldd	r12, Z+33	; 0x21
    40a0:	d2 a0       	ldd	r13, Z+34	; 0x22
    40a2:	e3 a0       	ldd	r14, Z+35	; 0x23
    40a4:	f4 a0       	ldd	r15, Z+36	; 0x24
    40a6:	c2 2a       	or	r12, r18
    40a8:	d3 2a       	or	r13, r19
    40aa:	e4 2a       	or	r14, r20
    40ac:	f5 2a       	or	r15, r21
    40ae:	c1 a2       	std	Z+33, r12	; 0x21
    40b0:	d2 a2       	std	Z+34, r13	; 0x22
    40b2:	e3 a2       	std	Z+35, r14	; 0x23
    40b4:	f4 a2       	std	Z+36, r15	; 0x24
                    break;
    40b6:	c7 cf       	rjmp	.-114    	; 0x4046 <xTaskGenericNotify+0x5c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    40b8:	66 0f       	add	r22, r22
    40ba:	77 1f       	adc	r23, r23
    40bc:	66 0f       	add	r22, r22
    40be:	77 1f       	adc	r23, r23
    40c0:	fd 01       	movw	r30, r26
    40c2:	e6 0f       	add	r30, r22
    40c4:	f7 1f       	adc	r31, r23
    40c6:	41 a1       	ldd	r20, Z+33	; 0x21
    40c8:	52 a1       	ldd	r21, Z+34	; 0x22
    40ca:	63 a1       	ldd	r22, Z+35	; 0x23
    40cc:	74 a1       	ldd	r23, Z+36	; 0x24
    40ce:	4f 5f       	subi	r20, 0xFF	; 255
    40d0:	5f 4f       	sbci	r21, 0xFF	; 255
    40d2:	6f 4f       	sbci	r22, 0xFF	; 255
    40d4:	7f 4f       	sbci	r23, 0xFF	; 255
    40d6:	41 a3       	std	Z+33, r20	; 0x21
    40d8:	52 a3       	std	Z+34, r21	; 0x22
    40da:	63 a3       	std	Z+35, r22	; 0x23
    40dc:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    40de:	b3 cf       	rjmp	.-154    	; 0x4046 <xTaskGenericNotify+0x5c>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    40e0:	1a 96       	adiw	r26, 0x0a	; 10
    40e2:	ed 91       	ld	r30, X+
    40e4:	fc 91       	ld	r31, X
    40e6:	1b 97       	sbiw	r26, 0x0b	; 11
    40e8:	14 96       	adiw	r26, 0x04	; 4
    40ea:	8d 91       	ld	r24, X+
    40ec:	9c 91       	ld	r25, X
    40ee:	15 97       	sbiw	r26, 0x05	; 5
    40f0:	16 96       	adiw	r26, 0x06	; 6
    40f2:	2d 91       	ld	r18, X+
    40f4:	3c 91       	ld	r19, X
    40f6:	17 97       	sbiw	r26, 0x07	; 7
    40f8:	ec 01       	movw	r28, r24
    40fa:	3d 83       	std	Y+5, r19	; 0x05
    40fc:	2c 83       	std	Y+4, r18	; 0x04
    40fe:	16 96       	adiw	r26, 0x06	; 6
    4100:	cd 91       	ld	r28, X+
    4102:	dc 91       	ld	r29, X
    4104:	17 97       	sbiw	r26, 0x07	; 7
    4106:	9b 83       	std	Y+3, r25	; 0x03
    4108:	8a 83       	std	Y+2, r24	; 0x02
    410a:	9d 01       	movw	r18, r26
    410c:	2e 5f       	subi	r18, 0xFE	; 254
    410e:	3f 4f       	sbci	r19, 0xFF	; 255
    4110:	81 81       	ldd	r24, Z+1	; 0x01
    4112:	92 81       	ldd	r25, Z+2	; 0x02
    4114:	82 17       	cp	r24, r18
    4116:	93 07       	cpc	r25, r19
    4118:	11 f4       	brne	.+4      	; 0x411e <xTaskGenericNotify+0x134>
    411a:	d2 83       	std	Z+2, r29	; 0x02
    411c:	c1 83       	std	Z+1, r28	; 0x01
    411e:	1b 96       	adiw	r26, 0x0b	; 11
    4120:	1c 92       	st	X, r1
    4122:	1e 92       	st	-X, r1
    4124:	1a 97       	sbiw	r26, 0x0a	; 10
    4126:	80 81       	ld	r24, Z
    4128:	81 50       	subi	r24, 0x01	; 1
    412a:	80 83       	st	Z, r24
                prvAddTaskToReadyList( pxTCB );
    412c:	56 96       	adiw	r26, 0x16	; 22
    412e:	cc 91       	ld	r28, X
    4130:	56 97       	sbiw	r26, 0x16	; 22
    4132:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <uxTopReadyPriority>
    4136:	8c 17       	cp	r24, r28
    4138:	10 f4       	brcc	.+4      	; 0x413e <xTaskGenericNotify+0x154>
    413a:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    413e:	49 e0       	ldi	r20, 0x09	; 9
    4140:	4c 9f       	mul	r20, r28
    4142:	e0 01       	movw	r28, r0
    4144:	11 24       	eor	r1, r1
    4146:	cc 54       	subi	r28, 0x4C	; 76
    4148:	d8 4f       	sbci	r29, 0xF8	; 248
    414a:	09 80       	ldd	r0, Y+1	; 0x01
    414c:	da 81       	ldd	r29, Y+2	; 0x02
    414e:	c0 2d       	mov	r28, r0
    4150:	15 96       	adiw	r26, 0x05	; 5
    4152:	dc 93       	st	X, r29
    4154:	ce 93       	st	-X, r28
    4156:	14 97       	sbiw	r26, 0x04	; 4
    4158:	8c 81       	ldd	r24, Y+4	; 0x04
    415a:	9d 81       	ldd	r25, Y+5	; 0x05
    415c:	17 96       	adiw	r26, 0x07	; 7
    415e:	9c 93       	st	X, r25
    4160:	8e 93       	st	-X, r24
    4162:	16 97       	sbiw	r26, 0x06	; 6
    4164:	8c 81       	ldd	r24, Y+4	; 0x04
    4166:	9d 81       	ldd	r25, Y+5	; 0x05
    4168:	fc 01       	movw	r30, r24
    416a:	33 83       	std	Z+3, r19	; 0x03
    416c:	22 83       	std	Z+2, r18	; 0x02
    416e:	3d 83       	std	Y+5, r19	; 0x05
    4170:	2c 83       	std	Y+4, r18	; 0x04
    4172:	56 96       	adiw	r26, 0x16	; 22
    4174:	9c 91       	ld	r25, X
    4176:	56 97       	sbiw	r26, 0x16	; 22
    4178:	94 9f       	mul	r25, r20
    417a:	f0 01       	movw	r30, r0
    417c:	11 24       	eor	r1, r1
    417e:	ec 54       	subi	r30, 0x4C	; 76
    4180:	f8 4f       	sbci	r31, 0xF8	; 248
    4182:	1b 96       	adiw	r26, 0x0b	; 11
    4184:	fc 93       	st	X, r31
    4186:	ee 93       	st	-X, r30
    4188:	1a 97       	sbiw	r26, 0x0a	; 10
    418a:	80 81       	ld	r24, Z
    418c:	8f 5f       	subi	r24, 0xFF	; 255
    418e:	80 83       	st	Z, r24
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
    4190:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    4194:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    4198:	86 89       	ldd	r24, Z+22	; 0x16
    419a:	89 17       	cp	r24, r25
    419c:	08 f0       	brcs	.+2      	; 0x41a0 <xTaskGenericNotify+0x1b6>
    419e:	56 cf       	rjmp	.-340    	; 0x404c <xTaskGenericNotify+0x62>
    41a0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
    41a4:	53 cf       	rjmp	.-346    	; 0x404c <xTaskGenericNotify+0x62>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	52 cf       	rjmp	.-348    	; 0x404e <xTaskGenericNotify+0x64>

000041aa <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    41aa:	8f 92       	push	r8
    41ac:	9f 92       	push	r9
    41ae:	af 92       	push	r10
    41b0:	bf 92       	push	r11
    41b2:	cf 92       	push	r12
    41b4:	df 92       	push	r13
    41b6:	ef 92       	push	r14
    41b8:	ff 92       	push	r15
    41ba:	0f 93       	push	r16
    41bc:	cf 93       	push	r28
    41be:	df 93       	push	r29
    41c0:	dc 01       	movw	r26, r24
    41c2:	70 e0       	ldi	r23, 0x00	; 0
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            if( pulPreviousNotificationValue != NULL )
    41c4:	e1 14       	cp	r14, r1
    41c6:	f1 04       	cpc	r15, r1
    41c8:	81 f0       	breq	.+32     	; 0x41ea <xTaskGenericNotifyFromISR+0x40>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    41ca:	fb 01       	movw	r30, r22
    41cc:	ee 0f       	add	r30, r30
    41ce:	ff 1f       	adc	r31, r31
    41d0:	ee 0f       	add	r30, r30
    41d2:	ff 1f       	adc	r31, r31
    41d4:	e8 0f       	add	r30, r24
    41d6:	f9 1f       	adc	r31, r25
    41d8:	81 a0       	ldd	r8, Z+33	; 0x21
    41da:	92 a0       	ldd	r9, Z+34	; 0x22
    41dc:	a3 a0       	ldd	r10, Z+35	; 0x23
    41de:	b4 a0       	ldd	r11, Z+36	; 0x24
    41e0:	e7 01       	movw	r28, r14
    41e2:	88 82       	st	Y, r8
    41e4:	99 82       	std	Y+1, r9	; 0x01
    41e6:	aa 82       	std	Y+2, r10	; 0x02
    41e8:	bb 82       	std	Y+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    41ea:	fd 01       	movw	r30, r26
    41ec:	e6 0f       	add	r30, r22
    41ee:	f7 1f       	adc	r31, r23
    41f0:	85 a1       	ldd	r24, Z+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    41f2:	92 e0       	ldi	r25, 0x02	; 2
    41f4:	95 a3       	std	Z+37, r25	; 0x25

            switch( eAction )
    41f6:	02 30       	cpi	r16, 0x02	; 2
    41f8:	d1 f1       	breq	.+116    	; 0x426e <xTaskGenericNotifyFromISR+0xc4>
    41fa:	90 f4       	brcc	.+36     	; 0x4220 <xTaskGenericNotifyFromISR+0x76>
    41fc:	01 30       	cpi	r16, 0x01	; 1
    41fe:	19 f1       	breq	.+70     	; 0x4246 <xTaskGenericNotifyFromISR+0x9c>

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4200:	81 30       	cpi	r24, 0x01	; 1
    4202:	09 f4       	brne	.+2      	; 0x4206 <xTaskGenericNotifyFromISR+0x5c>
    4204:	48 c0       	rjmp	.+144    	; 0x4296 <xTaskGenericNotifyFromISR+0xec>
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    4206:	81 e0       	ldi	r24, 0x01	; 1
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    }
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	0f 91       	pop	r16
    420e:	ff 90       	pop	r15
    4210:	ef 90       	pop	r14
    4212:	df 90       	pop	r13
    4214:	cf 90       	pop	r12
    4216:	bf 90       	pop	r11
    4218:	af 90       	pop	r10
    421a:	9f 90       	pop	r9
    421c:	8f 90       	pop	r8
    421e:	08 95       	ret
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
    4220:	03 30       	cpi	r16, 0x03	; 3
    4222:	29 f0       	breq	.+10     	; 0x422e <xTaskGenericNotifyFromISR+0x84>
    4224:	04 30       	cpi	r16, 0x04	; 4
    4226:	61 f7       	brne	.-40     	; 0x4200 <xTaskGenericNotifyFromISR+0x56>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4228:	82 30       	cpi	r24, 0x02	; 2
    422a:	09 f4       	brne	.+2      	; 0x422e <xTaskGenericNotifyFromISR+0x84>
    422c:	c5 c0       	rjmp	.+394    	; 0x43b8 <xTaskGenericNotifyFromISR+0x20e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    422e:	66 0f       	add	r22, r22
    4230:	77 1f       	adc	r23, r23
    4232:	66 0f       	add	r22, r22
    4234:	77 1f       	adc	r23, r23
    4236:	fd 01       	movw	r30, r26
    4238:	e6 0f       	add	r30, r22
    423a:	f7 1f       	adc	r31, r23
    423c:	21 a3       	std	Z+33, r18	; 0x21
    423e:	32 a3       	std	Z+34, r19	; 0x22
    4240:	43 a3       	std	Z+35, r20	; 0x23
    4242:	54 a3       	std	Z+36, r21	; 0x24
    4244:	dd cf       	rjmp	.-70     	; 0x4200 <xTaskGenericNotifyFromISR+0x56>
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    4246:	66 0f       	add	r22, r22
    4248:	77 1f       	adc	r23, r23
    424a:	66 0f       	add	r22, r22
    424c:	77 1f       	adc	r23, r23
    424e:	fd 01       	movw	r30, r26
    4250:	e6 0f       	add	r30, r22
    4252:	f7 1f       	adc	r31, r23
    4254:	81 a0       	ldd	r8, Z+33	; 0x21
    4256:	92 a0       	ldd	r9, Z+34	; 0x22
    4258:	a3 a0       	ldd	r10, Z+35	; 0x23
    425a:	b4 a0       	ldd	r11, Z+36	; 0x24
    425c:	82 2a       	or	r8, r18
    425e:	93 2a       	or	r9, r19
    4260:	a4 2a       	or	r10, r20
    4262:	b5 2a       	or	r11, r21
    4264:	81 a2       	std	Z+33, r8	; 0x21
    4266:	92 a2       	std	Z+34, r9	; 0x22
    4268:	a3 a2       	std	Z+35, r10	; 0x23
    426a:	b4 a2       	std	Z+36, r11	; 0x24
                    break;
    426c:	c9 cf       	rjmp	.-110    	; 0x4200 <xTaskGenericNotifyFromISR+0x56>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    426e:	66 0f       	add	r22, r22
    4270:	77 1f       	adc	r23, r23
    4272:	66 0f       	add	r22, r22
    4274:	77 1f       	adc	r23, r23
    4276:	fd 01       	movw	r30, r26
    4278:	e6 0f       	add	r30, r22
    427a:	f7 1f       	adc	r31, r23
    427c:	41 a1       	ldd	r20, Z+33	; 0x21
    427e:	52 a1       	ldd	r21, Z+34	; 0x22
    4280:	63 a1       	ldd	r22, Z+35	; 0x23
    4282:	74 a1       	ldd	r23, Z+36	; 0x24
    4284:	4f 5f       	subi	r20, 0xFF	; 255
    4286:	5f 4f       	sbci	r21, 0xFF	; 255
    4288:	6f 4f       	sbci	r22, 0xFF	; 255
    428a:	7f 4f       	sbci	r23, 0xFF	; 255
    428c:	41 a3       	std	Z+33, r20	; 0x21
    428e:	52 a3       	std	Z+34, r21	; 0x22
    4290:	63 a3       	std	Z+35, r22	; 0x23
    4292:	74 a3       	std	Z+36, r23	; 0x24
                    break;
    4294:	b5 cf       	rjmp	.-150    	; 0x4200 <xTaskGenericNotifyFromISR+0x56>
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    4296:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    429a:	81 11       	cpse	r24, r1
    429c:	6b c0       	rjmp	.+214    	; 0x4374 <xTaskGenericNotifyFromISR+0x1ca>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    429e:	1a 96       	adiw	r26, 0x0a	; 10
    42a0:	ed 91       	ld	r30, X+
    42a2:	fc 91       	ld	r31, X
    42a4:	1b 97       	sbiw	r26, 0x0b	; 11
    42a6:	14 96       	adiw	r26, 0x04	; 4
    42a8:	8d 91       	ld	r24, X+
    42aa:	9c 91       	ld	r25, X
    42ac:	15 97       	sbiw	r26, 0x05	; 5
    42ae:	16 96       	adiw	r26, 0x06	; 6
    42b0:	2d 91       	ld	r18, X+
    42b2:	3c 91       	ld	r19, X
    42b4:	17 97       	sbiw	r26, 0x07	; 7
    42b6:	ec 01       	movw	r28, r24
    42b8:	3d 83       	std	Y+5, r19	; 0x05
    42ba:	2c 83       	std	Y+4, r18	; 0x04
    42bc:	16 96       	adiw	r26, 0x06	; 6
    42be:	cd 91       	ld	r28, X+
    42c0:	dc 91       	ld	r29, X
    42c2:	17 97       	sbiw	r26, 0x07	; 7
    42c4:	9b 83       	std	Y+3, r25	; 0x03
    42c6:	8a 83       	std	Y+2, r24	; 0x02
    42c8:	9d 01       	movw	r18, r26
    42ca:	2e 5f       	subi	r18, 0xFE	; 254
    42cc:	3f 4f       	sbci	r19, 0xFF	; 255
    42ce:	81 81       	ldd	r24, Z+1	; 0x01
    42d0:	92 81       	ldd	r25, Z+2	; 0x02
    42d2:	82 17       	cp	r24, r18
    42d4:	93 07       	cpc	r25, r19
    42d6:	11 f4       	brne	.+4      	; 0x42dc <xTaskGenericNotifyFromISR+0x132>
    42d8:	d2 83       	std	Z+2, r29	; 0x02
    42da:	c1 83       	std	Z+1, r28	; 0x01
    42dc:	1b 96       	adiw	r26, 0x0b	; 11
    42de:	1c 92       	st	X, r1
    42e0:	1e 92       	st	-X, r1
    42e2:	1a 97       	sbiw	r26, 0x0a	; 10
    42e4:	80 81       	ld	r24, Z
    42e6:	81 50       	subi	r24, 0x01	; 1
    42e8:	80 83       	st	Z, r24
                    prvAddTaskToReadyList( pxTCB );
    42ea:	56 96       	adiw	r26, 0x16	; 22
    42ec:	cc 91       	ld	r28, X
    42ee:	56 97       	sbiw	r26, 0x16	; 22
    42f0:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <uxTopReadyPriority>
    42f4:	8c 17       	cp	r24, r28
    42f6:	10 f4       	brcc	.+4      	; 0x42fc <xTaskGenericNotifyFromISR+0x152>
    42f8:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    42fc:	89 e0       	ldi	r24, 0x09	; 9
    42fe:	8c 9f       	mul	r24, r28
    4300:	e0 01       	movw	r28, r0
    4302:	11 24       	eor	r1, r1
    4304:	cc 54       	subi	r28, 0x4C	; 76
    4306:	d8 4f       	sbci	r29, 0xF8	; 248
    4308:	09 80       	ldd	r0, Y+1	; 0x01
    430a:	da 81       	ldd	r29, Y+2	; 0x02
    430c:	c0 2d       	mov	r28, r0
    430e:	15 96       	adiw	r26, 0x05	; 5
    4310:	dc 93       	st	X, r29
    4312:	ce 93       	st	-X, r28
    4314:	14 97       	sbiw	r26, 0x04	; 4
    4316:	4c 81       	ldd	r20, Y+4	; 0x04
    4318:	5d 81       	ldd	r21, Y+5	; 0x05
    431a:	17 96       	adiw	r26, 0x07	; 7
    431c:	5c 93       	st	X, r21
    431e:	4e 93       	st	-X, r20
    4320:	16 97       	sbiw	r26, 0x06	; 6
    4322:	ec 81       	ldd	r30, Y+4	; 0x04
    4324:	fd 81       	ldd	r31, Y+5	; 0x05
    4326:	33 83       	std	Z+3, r19	; 0x03
    4328:	22 83       	std	Z+2, r18	; 0x02
    432a:	3d 83       	std	Y+5, r19	; 0x05
    432c:	2c 83       	std	Y+4, r18	; 0x04
    432e:	56 96       	adiw	r26, 0x16	; 22
    4330:	ec 91       	ld	r30, X
    4332:	56 97       	sbiw	r26, 0x16	; 22
    4334:	e8 9f       	mul	r30, r24
    4336:	f0 01       	movw	r30, r0
    4338:	11 24       	eor	r1, r1
    433a:	ec 54       	subi	r30, 0x4C	; 76
    433c:	f8 4f       	sbci	r31, 0xF8	; 248
    433e:	1b 96       	adiw	r26, 0x0b	; 11
    4340:	fc 93       	st	X, r31
    4342:	ee 93       	st	-X, r30
    4344:	1a 97       	sbiw	r26, 0x0a	; 10
    4346:	80 81       	ld	r24, Z
    4348:	8f 5f       	subi	r24, 0xFF	; 255
    434a:	80 83       	st	Z, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    434c:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    4350:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    4354:	56 96       	adiw	r26, 0x16	; 22
    4356:	9c 91       	ld	r25, X
    4358:	86 89       	ldd	r24, Z+22	; 0x16
    435a:	89 17       	cp	r24, r25
    435c:	08 f0       	brcs	.+2      	; 0x4360 <xTaskGenericNotifyFromISR+0x1b6>
    435e:	53 cf       	rjmp	.-346    	; 0x4206 <xTaskGenericNotifyFromISR+0x5c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    4360:	c1 14       	cp	r12, r1
    4362:	d1 04       	cpc	r13, r1
    4364:	19 f0       	breq	.+6      	; 0x436c <xTaskGenericNotifyFromISR+0x1c2>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	f6 01       	movw	r30, r12
    436a:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
    4372:	4a cf       	rjmp	.-364    	; 0x4208 <xTaskGenericNotifyFromISR+0x5e>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4374:	e0 91 96 07 	lds	r30, 0x0796	; 0x800796 <xPendingReadyList+0x1>
    4378:	f0 91 97 07 	lds	r31, 0x0797	; 0x800797 <xPendingReadyList+0x2>
    437c:	1f 96       	adiw	r26, 0x0f	; 15
    437e:	fc 93       	st	X, r31
    4380:	ee 93       	st	-X, r30
    4382:	1e 97       	sbiw	r26, 0x0e	; 14
    4384:	84 81       	ldd	r24, Z+4	; 0x04
    4386:	95 81       	ldd	r25, Z+5	; 0x05
    4388:	51 96       	adiw	r26, 0x11	; 17
    438a:	9c 93       	st	X, r25
    438c:	8e 93       	st	-X, r24
    438e:	50 97       	sbiw	r26, 0x10	; 16
    4390:	c4 81       	ldd	r28, Z+4	; 0x04
    4392:	d5 81       	ldd	r29, Z+5	; 0x05
    4394:	cd 01       	movw	r24, r26
    4396:	0c 96       	adiw	r24, 0x0c	; 12
    4398:	9b 83       	std	Y+3, r25	; 0x03
    439a:	8a 83       	std	Y+2, r24	; 0x02
    439c:	95 83       	std	Z+5, r25	; 0x05
    439e:	84 83       	std	Z+4, r24	; 0x04
    43a0:	85 e9       	ldi	r24, 0x95	; 149
    43a2:	97 e0       	ldi	r25, 0x07	; 7
    43a4:	55 96       	adiw	r26, 0x15	; 21
    43a6:	9c 93       	st	X, r25
    43a8:	8e 93       	st	-X, r24
    43aa:	54 97       	sbiw	r26, 0x14	; 20
    43ac:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <xPendingReadyList>
    43b0:	8f 5f       	subi	r24, 0xFF	; 255
    43b2:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <xPendingReadyList>
    43b6:	ca cf       	rjmp	.-108    	; 0x434c <xTaskGenericNotifyFromISR+0x1a2>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    43b8:	80 e0       	ldi	r24, 0x00	; 0
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
    43ba:	26 cf       	rjmp	.-436    	; 0x4208 <xTaskGenericNotifyFromISR+0x5e>

000043bc <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
    43bc:	0f 93       	push	r16
    43be:	1f 93       	push	r17
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	fc 01       	movw	r30, r24
        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    43c6:	a6 2f       	mov	r26, r22
    43c8:	b0 e0       	ldi	r27, 0x00	; 0
    43ca:	ec 01       	movw	r28, r24
    43cc:	ca 0f       	add	r28, r26
    43ce:	db 1f       	adc	r29, r27
    43d0:	8d a1       	ldd	r24, Y+37	; 0x25
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    43d2:	92 e0       	ldi	r25, 0x02	; 2
    43d4:	9d a3       	std	Y+37, r25	; 0x25

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    43d6:	aa 0f       	add	r26, r26
    43d8:	bb 1f       	adc	r27, r27
    43da:	aa 0f       	add	r26, r26
    43dc:	bb 1f       	adc	r27, r27
    43de:	ae 0f       	add	r26, r30
    43e0:	bf 1f       	adc	r27, r31
    43e2:	91 96       	adiw	r26, 0x21	; 33
    43e4:	0d 91       	ld	r16, X+
    43e6:	1d 91       	ld	r17, X+
    43e8:	2d 91       	ld	r18, X+
    43ea:	3c 91       	ld	r19, X
    43ec:	94 97       	sbiw	r26, 0x24	; 36
    43ee:	0f 5f       	subi	r16, 0xFF	; 255
    43f0:	1f 4f       	sbci	r17, 0xFF	; 255
    43f2:	2f 4f       	sbci	r18, 0xFF	; 255
    43f4:	3f 4f       	sbci	r19, 0xFF	; 255
    43f6:	91 96       	adiw	r26, 0x21	; 33
    43f8:	0d 93       	st	X+, r16
    43fa:	1d 93       	st	X+, r17
    43fc:	2d 93       	st	X+, r18
    43fe:	3c 93       	st	X, r19
    4400:	94 97       	sbiw	r26, 0x24	; 36

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4402:	81 30       	cpi	r24, 0x01	; 1
    4404:	09 f0       	breq	.+2      	; 0x4408 <vTaskGenericNotifyGiveFromISR+0x4c>
    4406:	5e c0       	rjmp	.+188    	; 0x44c4 <vTaskGenericNotifyGiveFromISR+0x108>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
    4408:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxSchedulerSuspended>
    440c:	81 11       	cpse	r24, r1
    440e:	5f c0       	rjmp	.+190    	; 0x44ce <vTaskGenericNotifyGiveFromISR+0x112>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    4410:	a2 85       	ldd	r26, Z+10	; 0x0a
    4412:	b3 85       	ldd	r27, Z+11	; 0x0b
    4414:	84 81       	ldd	r24, Z+4	; 0x04
    4416:	95 81       	ldd	r25, Z+5	; 0x05
    4418:	26 81       	ldd	r18, Z+6	; 0x06
    441a:	37 81       	ldd	r19, Z+7	; 0x07
    441c:	ec 01       	movw	r28, r24
    441e:	3d 83       	std	Y+5, r19	; 0x05
    4420:	2c 83       	std	Y+4, r18	; 0x04
    4422:	c6 81       	ldd	r28, Z+6	; 0x06
    4424:	d7 81       	ldd	r29, Z+7	; 0x07
    4426:	9b 83       	std	Y+3, r25	; 0x03
    4428:	8a 83       	std	Y+2, r24	; 0x02
    442a:	cf 01       	movw	r24, r30
    442c:	02 96       	adiw	r24, 0x02	; 2
    442e:	11 96       	adiw	r26, 0x01	; 1
    4430:	2d 91       	ld	r18, X+
    4432:	3c 91       	ld	r19, X
    4434:	12 97       	sbiw	r26, 0x02	; 2
    4436:	28 17       	cp	r18, r24
    4438:	39 07       	cpc	r19, r25
    443a:	21 f4       	brne	.+8      	; 0x4444 <vTaskGenericNotifyGiveFromISR+0x88>
    443c:	12 96       	adiw	r26, 0x02	; 2
    443e:	dc 93       	st	X, r29
    4440:	ce 93       	st	-X, r28
    4442:	11 97       	sbiw	r26, 0x01	; 1
    4444:	13 86       	std	Z+11, r1	; 0x0b
    4446:	12 86       	std	Z+10, r1	; 0x0a
    4448:	2c 91       	ld	r18, X
    444a:	21 50       	subi	r18, 0x01	; 1
    444c:	2c 93       	st	X, r18
                    prvAddTaskToReadyList( pxTCB );
    444e:	c6 89       	ldd	r28, Z+22	; 0x16
    4450:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <uxTopReadyPriority>
    4454:	2c 17       	cp	r18, r28
    4456:	10 f4       	brcc	.+4      	; 0x445c <vTaskGenericNotifyGiveFromISR+0xa0>
    4458:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <uxTopReadyPriority>
    445c:	29 e0       	ldi	r18, 0x09	; 9
    445e:	2c 9f       	mul	r18, r28
    4460:	e0 01       	movw	r28, r0
    4462:	11 24       	eor	r1, r1
    4464:	cc 54       	subi	r28, 0x4C	; 76
    4466:	d8 4f       	sbci	r29, 0xF8	; 248
    4468:	09 80       	ldd	r0, Y+1	; 0x01
    446a:	da 81       	ldd	r29, Y+2	; 0x02
    446c:	c0 2d       	mov	r28, r0
    446e:	d5 83       	std	Z+5, r29	; 0x05
    4470:	c4 83       	std	Z+4, r28	; 0x04
    4472:	6c 81       	ldd	r22, Y+4	; 0x04
    4474:	7d 81       	ldd	r23, Y+5	; 0x05
    4476:	77 83       	std	Z+7, r23	; 0x07
    4478:	66 83       	std	Z+6, r22	; 0x06
    447a:	ac 81       	ldd	r26, Y+4	; 0x04
    447c:	bd 81       	ldd	r27, Y+5	; 0x05
    447e:	13 96       	adiw	r26, 0x03	; 3
    4480:	9c 93       	st	X, r25
    4482:	8e 93       	st	-X, r24
    4484:	12 97       	sbiw	r26, 0x02	; 2
    4486:	9d 83       	std	Y+5, r25	; 0x05
    4488:	8c 83       	std	Y+4, r24	; 0x04
    448a:	a6 89       	ldd	r26, Z+22	; 0x16
    448c:	a2 9f       	mul	r26, r18
    448e:	d0 01       	movw	r26, r0
    4490:	11 24       	eor	r1, r1
    4492:	ac 54       	subi	r26, 0x4C	; 76
    4494:	b8 4f       	sbci	r27, 0xF8	; 248
    4496:	b3 87       	std	Z+11, r27	; 0x0b
    4498:	a2 87       	std	Z+10, r26	; 0x0a
    449a:	8c 91       	ld	r24, X
    449c:	8f 5f       	subi	r24, 0xFF	; 255
    449e:	8c 93       	st	X, r24
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    44a0:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    44a4:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    44a8:	96 89       	ldd	r25, Z+22	; 0x16
    44aa:	56 96       	adiw	r26, 0x16	; 22
    44ac:	8c 91       	ld	r24, X
    44ae:	89 17       	cp	r24, r25
    44b0:	48 f4       	brcc	.+18     	; 0x44c4 <vTaskGenericNotifyGiveFromISR+0x108>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
    44b2:	41 15       	cp	r20, r1
    44b4:	51 05       	cpc	r21, r1
    44b6:	19 f0       	breq	.+6      	; 0x44be <vTaskGenericNotifyGiveFromISR+0x102>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	fa 01       	movw	r30, r20
    44bc:	80 83       	st	Z, r24
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <xYieldPendings>
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
    44c4:	df 91       	pop	r29
    44c6:	cf 91       	pop	r28
    44c8:	1f 91       	pop	r17
    44ca:	0f 91       	pop	r16
    44cc:	08 95       	ret
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    44ce:	a0 91 96 07 	lds	r26, 0x0796	; 0x800796 <xPendingReadyList+0x1>
    44d2:	b0 91 97 07 	lds	r27, 0x0797	; 0x800797 <xPendingReadyList+0x2>
    44d6:	b7 87       	std	Z+15, r27	; 0x0f
    44d8:	a6 87       	std	Z+14, r26	; 0x0e
    44da:	14 96       	adiw	r26, 0x04	; 4
    44dc:	8d 91       	ld	r24, X+
    44de:	9c 91       	ld	r25, X
    44e0:	15 97       	sbiw	r26, 0x05	; 5
    44e2:	91 8b       	std	Z+17, r25	; 0x11
    44e4:	80 8b       	std	Z+16, r24	; 0x10
    44e6:	14 96       	adiw	r26, 0x04	; 4
    44e8:	cd 91       	ld	r28, X+
    44ea:	dc 91       	ld	r29, X
    44ec:	15 97       	sbiw	r26, 0x05	; 5
    44ee:	cf 01       	movw	r24, r30
    44f0:	0c 96       	adiw	r24, 0x0c	; 12
    44f2:	9b 83       	std	Y+3, r25	; 0x03
    44f4:	8a 83       	std	Y+2, r24	; 0x02
    44f6:	15 96       	adiw	r26, 0x05	; 5
    44f8:	9c 93       	st	X, r25
    44fa:	8e 93       	st	-X, r24
    44fc:	14 97       	sbiw	r26, 0x04	; 4
    44fe:	85 e9       	ldi	r24, 0x95	; 149
    4500:	97 e0       	ldi	r25, 0x07	; 7
    4502:	95 8b       	std	Z+21, r25	; 0x15
    4504:	84 8b       	std	Z+20, r24	; 0x14
    4506:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <xPendingReadyList>
    450a:	8f 5f       	subi	r24, 0xFF	; 255
    450c:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <xPendingReadyList>
    4510:	c7 cf       	rjmp	.-114    	; 0x44a0 <vTaskGenericNotifyGiveFromISR+0xe4>

00004512 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    4512:	00 97       	sbiw	r24, 0x00	; 0
    4514:	21 f4       	brne	.+8      	; 0x451e <xTaskGenericNotifyStateClear+0xc>
    4516:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    451a:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    451e:	0f b6       	in	r0, 0x3f	; 63
    4520:	f8 94       	cli
    4522:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    4524:	fc 01       	movw	r30, r24
    4526:	e6 0f       	add	r30, r22
    4528:	f1 1d       	adc	r31, r1
    452a:	85 a1       	ldd	r24, Z+37	; 0x25
    452c:	82 30       	cpi	r24, 0x02	; 2
    452e:	29 f4       	brne	.+10     	; 0x453a <xTaskGenericNotifyStateClear+0x28>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    4530:	15 a2       	std	Z+37, r1	; 0x25
                xReturn = pdPASS;
    4532:	81 e0       	ldi	r24, 0x01	; 1
            else
            {
                xReturn = pdFAIL;
            }
        }
        taskEXIT_CRITICAL();
    4534:	0f 90       	pop	r0
    4536:	0f be       	out	0x3f, r0	; 63

        traceRETURN_xTaskGenericNotifyStateClear( xReturn );

        return xReturn;
    }
    4538:	08 95       	ret
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
                xReturn = pdPASS;
            }
            else
            {
                xReturn = pdFAIL;
    453a:	80 e0       	ldi	r24, 0x00	; 0
    453c:	fb cf       	rjmp	.-10     	; 0x4534 <xTaskGenericNotifyStateClear+0x22>

0000453e <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
    453e:	cf 92       	push	r12
    4540:	df 92       	push	r13
    4542:	ef 92       	push	r14
    4544:	ff 92       	push	r15

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    4546:	00 97       	sbiw	r24, 0x00	; 0
    4548:	21 f4       	brne	.+8      	; 0x4552 <ulTaskGenericNotifyValueClear+0x14>
    454a:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    454e:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    4552:	0f b6       	in	r0, 0x3f	; 63
    4554:	f8 94       	cli
    4556:	0f 92       	push	r0
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
    4558:	74 e0       	ldi	r23, 0x04	; 4
    455a:	67 9f       	mul	r22, r23
    455c:	f0 01       	movw	r30, r0
    455e:	11 24       	eor	r1, r1
    4560:	e8 0f       	add	r30, r24
    4562:	f9 1f       	adc	r31, r25
    4564:	61 a1       	ldd	r22, Z+33	; 0x21
    4566:	72 a1       	ldd	r23, Z+34	; 0x22
    4568:	83 a1       	ldd	r24, Z+35	; 0x23
    456a:	94 a1       	ldd	r25, Z+36	; 0x24
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
    456c:	c1 a0       	ldd	r12, Z+33	; 0x21
    456e:	d2 a0       	ldd	r13, Z+34	; 0x22
    4570:	e3 a0       	ldd	r14, Z+35	; 0x23
    4572:	f4 a0       	ldd	r15, Z+36	; 0x24
    4574:	20 95       	com	r18
    4576:	30 95       	com	r19
    4578:	40 95       	com	r20
    457a:	50 95       	com	r21
    457c:	c2 22       	and	r12, r18
    457e:	d3 22       	and	r13, r19
    4580:	e4 22       	and	r14, r20
    4582:	f5 22       	and	r15, r21
    4584:	c1 a2       	std	Z+33, r12	; 0x21
    4586:	d2 a2       	std	Z+34, r13	; 0x22
    4588:	e3 a2       	std	Z+35, r14	; 0x23
    458a:	f4 a2       	std	Z+36, r15	; 0x24
        }
        taskEXIT_CRITICAL();
    458c:	0f 90       	pop	r0
    458e:	0f be       	out	0x3f, r0	; 63

        traceRETURN_ulTaskGenericNotifyValueClear( ulReturn );

        return ulReturn;
    }
    4590:	ff 90       	pop	r15
    4592:	ef 90       	pop	r14
    4594:	df 90       	pop	r13
    4596:	cf 90       	pop	r12
    4598:	08 95       	ret

0000459a <vTaskResetState>:
    BaseType_t xCoreID;

    /* Task control block. */
    #if ( configNUMBER_OF_CORES == 1 )
    {
        pxCurrentTCB = NULL;
    459a:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <pxCurrentTCB+0x1>
    459e:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <pxCurrentTCB>
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
    45a2:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <uxDeletedTasksWaitingCleanUp>
        FreeRTOS_errno = 0;
    }
    #endif /* #if ( configUSE_POSIX_ERRNO == 1 ) */

    /* Other file private variables. */
    uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
    45a6:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <uxCurrentNumberOfTasks>
    xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    45aa:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <xTickCount+0x1>
    45ae:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <xTickCount>
    uxTopReadyPriority = tskIDLE_PRIORITY;
    45b2:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <uxTopReadyPriority>
    xSchedulerRunning = pdFALSE;
    45b6:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <xSchedulerRunning>
    xPendedTicks = ( TickType_t ) 0U;
    45ba:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <xPendedTicks+0x1>
    45be:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <xPendedTicks>

    for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
    {
        xYieldPendings[ xCoreID ] = pdFALSE;
    45c2:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <xYieldPendings>
    }

    xNumOfOverflows = ( BaseType_t ) 0;
    45c6:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <xNumOfOverflows>
    uxTaskNumber = ( UBaseType_t ) 0U;
    45ca:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <uxTaskNumber>
    xNextTaskUnblockTime = ( TickType_t ) 0U;
    45ce:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <xNextTaskUnblockTime+0x1>
    45d2:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <xNextTaskUnblockTime>

    uxSchedulerSuspended = ( UBaseType_t ) 0U;
    45d6:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <uxSchedulerSuspended>
            ulTaskSwitchedInTime[ xCoreID ] = 0U;
            ulTotalRunTime[ xCoreID ] = 0U;
        }
    }
    #endif /* #if ( configGENERATE_RUN_TIME_STATS == 1 ) */
}
    45da:	08 95       	ret

000045dc <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    45dc:	0f b6       	in	r0, 0x3f	; 63
    45de:	f8 94       	cli
    45e0:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    45e2:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    45e6:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    45ea:	89 2b       	or	r24, r25
    45ec:	e9 f4       	brne	.+58     	; 0x4628 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    45ee:	8d ee       	ldi	r24, 0xED	; 237
    45f0:	97 e0       	ldi	r25, 0x07	; 7
    45f2:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    45f6:	84 ee       	ldi	r24, 0xE4	; 228
    45f8:	97 e0       	ldi	r25, 0x07	; 7
    45fa:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    45fe:	8d ee       	ldi	r24, 0xED	; 237
    4600:	97 e0       	ldi	r25, 0x07	; 7
    4602:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <pxCurrentTimerList+0x1>
    4606:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    460a:	84 ee       	ldi	r24, 0xE4	; 228
    460c:	97 e0       	ldi	r25, 0x07	; 7
    460e:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <pxOverflowTimerList+0x1>
    4612:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <pxOverflowTimerList>

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
    4616:	40 e0       	ldi	r20, 0x00	; 0
    4618:	65 e0       	ldi	r22, 0x05	; 5
    461a:	8a e0       	ldi	r24, 0x0A	; 10
    461c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xQueueGenericCreate>
    4620:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <xTimerQueue+0x1>
    4624:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    4628:	0f 90       	pop	r0
    462a:	0f be       	out	0x3f, r0	; 63
    }
    462c:	08 95       	ret

0000462e <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    462e:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4630:	73 83       	std	Z+3, r23	; 0x03
    4632:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4634:	91 87       	std	Z+9, r25	; 0x09
    4636:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    4638:	46 17       	cp	r20, r22
    463a:	57 07       	cpc	r21, r23
    463c:	90 f0       	brcs	.+36     	; 0x4662 <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    463e:	42 1b       	sub	r20, r18
    4640:	53 0b       	sbc	r21, r19
    4642:	84 85       	ldd	r24, Z+12	; 0x0c
    4644:	95 85       	ldd	r25, Z+13	; 0x0d
    4646:	48 17       	cp	r20, r24
    4648:	59 07       	cpc	r21, r25
    464a:	c8 f4       	brcc	.+50     	; 0x467e <prvInsertTimerInActiveList+0x50>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    464c:	bf 01       	movw	r22, r30
    464e:	6e 5f       	subi	r22, 0xFE	; 254
    4650:	7f 4f       	sbci	r23, 0xFF	; 255
    4652:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxOverflowTimerList>
    4656:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxOverflowTimerList+0x1>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    465a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4662:	42 17       	cp	r20, r18
    4664:	53 07       	cpc	r21, r19
    4666:	18 f4       	brcc	.+6      	; 0x466e <prvInsertTimerInActiveList+0x40>
    4668:	62 17       	cp	r22, r18
    466a:	73 07       	cpc	r23, r19
    466c:	40 f4       	brcc	.+16     	; 0x467e <prvInsertTimerInActiveList+0x50>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    466e:	bf 01       	movw	r22, r30
    4670:	6e 5f       	subi	r22, 0xFE	; 254
    4672:	7f 4f       	sbci	r23, 0xFF	; 255
    4674:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    4678:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    467c:	ee cf       	rjmp	.-36     	; 0x465a <prvInsertTimerInActiveList+0x2c>
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    467e:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    4680:	08 95       	ret

00004682 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    4682:	ef 92       	push	r14
    4684:	ff 92       	push	r15
    4686:	0f 93       	push	r16
    4688:	1f 93       	push	r17
    468a:	cf 93       	push	r28
    468c:	df 93       	push	r29
    468e:	ec 01       	movw	r28, r24
    4690:	8b 01       	movw	r16, r22
    4692:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    4694:	6c 85       	ldd	r22, Y+12	; 0x0c
    4696:	7d 85       	ldd	r23, Y+13	; 0x0d
    4698:	60 0f       	add	r22, r16
    469a:	71 1f       	adc	r23, r17
    469c:	98 01       	movw	r18, r16
    469e:	a7 01       	movw	r20, r14
    46a0:	ce 01       	movw	r24, r28
    46a2:	0e 94 17 23 	call	0x462e	; 0x462e <prvInsertTimerInActiveList>
    46a6:	81 11       	cpse	r24, r1
    46a8:	07 c0       	rjmp	.+14     	; 0x46b8 <prvReloadTimer+0x36>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    46aa:	df 91       	pop	r29
    46ac:	cf 91       	pop	r28
    46ae:	1f 91       	pop	r17
    46b0:	0f 91       	pop	r16
    46b2:	ff 90       	pop	r15
    46b4:	ef 90       	pop	r14
    46b6:	08 95       	ret
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    46b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    46ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    46bc:	08 0f       	add	r16, r24
    46be:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    46c0:	e8 89       	ldd	r30, Y+16	; 0x10
    46c2:	f9 89       	ldd	r31, Y+17	; 0x11
    46c4:	ce 01       	movw	r24, r28
    46c6:	09 95       	icall
    46c8:	e5 cf       	rjmp	.-54     	; 0x4694 <prvReloadTimer+0x12>

000046ca <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    46ca:	ef 92       	push	r14
    46cc:	ff 92       	push	r15
    46ce:	0f 93       	push	r16
    46d0:	1f 93       	push	r17
    46d2:	cf 93       	push	r28
    46d4:	df 93       	push	r29
    46d6:	8c 01       	movw	r16, r24
    46d8:	7b 01       	movw	r14, r22
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    46da:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    46de:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    46e2:	05 80       	ldd	r0, Z+5	; 0x05
    46e4:	f6 81       	ldd	r31, Z+6	; 0x06
    46e6:	e0 2d       	mov	r30, r0
    46e8:	c6 81       	ldd	r28, Z+6	; 0x06
    46ea:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    46ec:	ce 01       	movw	r24, r28
    46ee:	02 96       	adiw	r24, 0x02	; 2
    46f0:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    46f4:	8a 89       	ldd	r24, Y+18	; 0x12
    46f6:	82 ff       	sbrs	r24, 2
    46f8:	0f c0       	rjmp	.+30     	; 0x4718 <prvProcessExpiredTimer+0x4e>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    46fa:	a7 01       	movw	r20, r14
    46fc:	b8 01       	movw	r22, r16
    46fe:	ce 01       	movw	r24, r28
    4700:	0e 94 41 23 	call	0x4682	; 0x4682 <prvReloadTimer>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4704:	e8 89       	ldd	r30, Y+16	; 0x10
    4706:	f9 89       	ldd	r31, Y+17	; 0x11
    4708:	ce 01       	movw	r24, r28
    }
    470a:	df 91       	pop	r29
    470c:	cf 91       	pop	r28
    470e:	1f 91       	pop	r17
    4710:	0f 91       	pop	r16
    4712:	ff 90       	pop	r15
    4714:	ef 90       	pop	r14
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4716:	09 94       	ijmp
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    4718:	8e 7f       	andi	r24, 0xFE	; 254
    471a:	8a 8b       	std	Y+18, r24	; 0x12
    471c:	f3 cf       	rjmp	.-26     	; 0x4704 <prvProcessExpiredTimer+0x3a>

0000471e <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    471e:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    4722:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    4726:	80 81       	ld	r24, Z
    4728:	81 11       	cpse	r24, r1
    472a:	0d c0       	rjmp	.+26     	; 0x4746 <prvSwitchTimerLists+0x28>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    472c:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxOverflowTimerList>
    4730:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxOverflowTimerList+0x1>
    4734:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <pxCurrentTimerList+0x1>
    4738:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    473c:	f0 93 e1 07 	sts	0x07E1, r31	; 0x8007e1 <pxOverflowTimerList+0x1>
    4740:	e0 93 e0 07 	sts	0x07E0, r30	; 0x8007e0 <pxOverflowTimerList>
    }
    4744:	08 95       	ret
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4746:	05 80       	ldd	r0, Z+5	; 0x05
    4748:	f6 81       	ldd	r31, Z+6	; 0x06
    474a:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    474c:	6f ef       	ldi	r22, 0xFF	; 255
    474e:	7f ef       	ldi	r23, 0xFF	; 255
    4750:	80 81       	ld	r24, Z
    4752:	91 81       	ldd	r25, Z+1	; 0x01
    4754:	0e 94 65 23 	call	0x46ca	; 0x46ca <prvProcessExpiredTimer>
    4758:	e2 cf       	rjmp	.-60     	; 0x471e <prvSwitchTimerLists>

0000475a <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    475a:	cf 93       	push	r28
    475c:	df 93       	push	r29
    475e:	00 d0       	rcall	.+0      	; 0x4760 <prvTimerTask+0x6>
    4760:	00 d0       	rcall	.+0      	; 0x4762 <prvTimerTask+0x8>
    4762:	1f 92       	push	r1
    4764:	cd b7       	in	r28, 0x3d	; 61
    4766:	de b7       	in	r29, 0x3e	; 62
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
    4768:	85 e0       	ldi	r24, 0x05	; 5
    476a:	b8 2e       	mov	r11, r24
    476c:	ce 01       	movw	r24, r28
    476e:	01 96       	adiw	r24, 0x01	; 1
    4770:	7c 01       	movw	r14, r24
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4772:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    4776:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    477a:	a0 80       	ld	r10, Z
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    477c:	10 e0       	ldi	r17, 0x00	; 0
    477e:	00 e0       	ldi	r16, 0x00	; 0
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );

        if( *pxListWasEmpty == pdFALSE )
    4780:	aa 20       	and	r10, r10
    4782:	29 f0       	breq	.+10     	; 0x478e <prvTimerTask+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4784:	05 80       	ldd	r0, Z+5	; 0x05
    4786:	f6 81       	ldd	r31, Z+6	; 0x06
    4788:	e0 2d       	mov	r30, r0
    478a:	00 81       	ld	r16, Z
    478c:	11 81       	ldd	r17, Z+1	; 0x01
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    478e:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
    4792:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <xTaskGetTickCount>
    4796:	6c 01       	movw	r12, r24

        if( xTimeNow < xLastTime )
    4798:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <xLastTime.2269>
    479c:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <xLastTime.2269+0x1>
    47a0:	c8 16       	cp	r12, r24
    47a2:	d9 06       	cpc	r13, r25
    47a4:	08 f0       	brcs	.+2      	; 0x47a8 <prvTimerTask+0x4e>
    47a6:	4f c0       	rjmp	.+158    	; 0x4846 <prvTimerTask+0xec>
        {
            prvSwitchTimerLists();
    47a8:	0e 94 8f 23 	call	0x471e	; 0x471e <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    47ac:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <xLastTime.2269+0x1>
    47b0:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <xLastTime.2269>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    47b4:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
    47b8:	d7 01       	movw	r26, r14
    47ba:	eb 2d       	mov	r30, r11
    47bc:	1d 92       	st	X+, r1
    47be:	ea 95       	dec	r30
    47c0:	e9 f7       	brne	.-6      	; 0x47bc <prvTimerTask+0x62>
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    47c2:	50 e0       	ldi	r21, 0x00	; 0
    47c4:	40 e0       	ldi	r20, 0x00	; 0
    47c6:	b7 01       	movw	r22, r14
    47c8:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    47cc:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    47d0:	0e 94 43 10 	call	0x2086	; 0x2086 <xQueueReceive>
    47d4:	88 23       	and	r24, r24
    47d6:	69 f2       	breq	.-102    	; 0x4772 <prvTimerTask+0x18>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    47d8:	89 81       	ldd	r24, Y+1	; 0x01
    47da:	87 fd       	sbrc	r24, 7
    47dc:	f2 cf       	rjmp	.-28     	; 0x47c2 <prvTimerTask+0x68>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    47de:	0c 81       	ldd	r16, Y+4	; 0x04
    47e0:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    47e2:	d8 01       	movw	r26, r16
    47e4:	1a 96       	adiw	r26, 0x0a	; 10
    47e6:	8d 91       	ld	r24, X+
    47e8:	9c 91       	ld	r25, X
    47ea:	89 2b       	or	r24, r25
    47ec:	21 f0       	breq	.+8      	; 0x47f6 <prvTimerTask+0x9c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    47ee:	c8 01       	movw	r24, r16
    47f0:	02 96       	adiw	r24, 0x02	; 2
    47f2:	0e 94 ae 0c 	call	0x195c	; 0x195c <uxListRemove>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
    47f6:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <xTaskGetTickCount>
    47fa:	6c 01       	movw	r12, r24

        if( xTimeNow < xLastTime )
    47fc:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <xLastTime.2269>
    4800:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <xLastTime.2269+0x1>
    4804:	c8 16       	cp	r12, r24
    4806:	d9 06       	cpc	r13, r25
    4808:	10 f4       	brcc	.+4      	; 0x480e <prvTimerTask+0xb4>
        {
            prvSwitchTimerLists();
    480a:	0e 94 8f 23 	call	0x471e	; 0x471e <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    480e:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <xLastTime.2269+0x1>
    4812:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <xLastTime.2269>
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
    4816:	e9 81       	ldd	r30, Y+1	; 0x01
    4818:	e1 50       	subi	r30, 0x01	; 1
    481a:	e9 30       	cpi	r30, 0x09	; 9
    481c:	90 f6       	brcc	.-92     	; 0x47c2 <prvTimerTask+0x68>
    481e:	0e 2e       	mov	r0, r30
    4820:	00 0c       	add	r0, r0
    4822:	ff 0b       	sbc	r31, r31
    4824:	e6 5e       	subi	r30, 0xE6	; 230
    4826:	fb 4d       	sbci	r31, 0xDB	; 219
    4828:	d8 01       	movw	r26, r16
    482a:	52 96       	adiw	r26, 0x12	; 18
    482c:	8c 91       	ld	r24, X
    482e:	52 97       	sbiw	r26, 0x12	; 18
    4830:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <__tablejump2__>
    4834:	4b 24       	eor	r4, r11
    4836:	4b 24       	eor	r4, r11
    4838:	8f 24       	eor	r8, r15
    483a:	77 24       	eor	r7, r7
    483c:	89 24       	eor	r8, r9
    483e:	4b 24       	eor	r4, r11
    4840:	4b 24       	eor	r4, r11
    4842:	8f 24       	eor	r8, r15
    4844:	77 24       	eor	r7, r7
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    4846:	d0 92 db 07 	sts	0x07DB, r13	; 0x8007db <xLastTime.2269+0x1>
    484a:	c0 92 da 07 	sts	0x07DA, r12	; 0x8007da <xLastTime.2269>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    484e:	aa 20       	and	r10, r10
    4850:	51 f0       	breq	.+20     	; 0x4866 <prvTimerTask+0x10c>
    4852:	c0 16       	cp	r12, r16
    4854:	d1 06       	cpc	r13, r17
    4856:	70 f0       	brcs	.+28     	; 0x4874 <prvTimerTask+0x11a>
                {
                    ( void ) xTaskResumeAll();
    4858:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    485c:	b6 01       	movw	r22, r12
    485e:	c8 01       	movw	r24, r16
    4860:	0e 94 65 23 	call	0x46ca	; 0x46ca <prvProcessExpiredTimer>
    4864:	a9 cf       	rjmp	.-174    	; 0x47b8 <prvTimerTask+0x5e>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4866:	e0 91 e0 07 	lds	r30, 0x07E0	; 0x8007e0 <pxOverflowTimerList>
    486a:	f0 91 e1 07 	lds	r31, 0x07E1	; 0x8007e1 <pxOverflowTimerList+0x1>
    486e:	41 e0       	ldi	r20, 0x01	; 1
    4870:	80 81       	ld	r24, Z
    4872:	81 11       	cpse	r24, r1
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4874:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4876:	b8 01       	movw	r22, r16
    4878:	6c 19       	sub	r22, r12
    487a:	7d 09       	sbc	r23, r13
    487c:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    4880:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    4884:	0e 94 38 13 	call	0x2670	; 0x2670 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    4888:	0e 94 0f 1b 	call	0x361e	; 0x361e <xTaskResumeAll>
    488c:	81 11       	cpse	r24, r1
    488e:	94 cf       	rjmp	.-216    	; 0x47b8 <prvTimerTask+0x5e>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        taskYIELD_WITHIN_API();
    4890:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vPortYield>
    4894:	91 cf       	rjmp	.-222    	; 0x47b8 <prvTimerTask+0x5e>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    4896:	81 60       	ori	r24, 0x01	; 1
    4898:	f8 01       	movw	r30, r16
    489a:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    489c:	2a 81       	ldd	r18, Y+2	; 0x02
    489e:	3b 81       	ldd	r19, Y+3	; 0x03
    48a0:	64 85       	ldd	r22, Z+12	; 0x0c
    48a2:	75 85       	ldd	r23, Z+13	; 0x0d
    48a4:	62 0f       	add	r22, r18
    48a6:	73 1f       	adc	r23, r19
    48a8:	a6 01       	movw	r20, r12
    48aa:	c8 01       	movw	r24, r16
    48ac:	0e 94 17 23 	call	0x462e	; 0x462e <prvInsertTimerInActiveList>
    48b0:	88 23       	and	r24, r24
    48b2:	09 f4       	brne	.+2      	; 0x48b6 <prvTimerTask+0x15c>
    48b4:	86 cf       	rjmp	.-244    	; 0x47c2 <prvTimerTask+0x68>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
    48b6:	d8 01       	movw	r26, r16
    48b8:	52 96       	adiw	r26, 0x12	; 18
    48ba:	8c 91       	ld	r24, X
    48bc:	52 97       	sbiw	r26, 0x12	; 18
    48be:	82 ff       	sbrs	r24, 2
    48c0:	12 c0       	rjmp	.+36     	; 0x48e6 <prvTimerTask+0x18c>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    48c2:	6a 81       	ldd	r22, Y+2	; 0x02
    48c4:	7b 81       	ldd	r23, Y+3	; 0x03
    48c6:	1c 96       	adiw	r26, 0x0c	; 12
    48c8:	8d 91       	ld	r24, X+
    48ca:	9c 91       	ld	r25, X
    48cc:	68 0f       	add	r22, r24
    48ce:	79 1f       	adc	r23, r25
    48d0:	a6 01       	movw	r20, r12
    48d2:	c8 01       	movw	r24, r16
    48d4:	0e 94 41 23 	call	0x4682	; 0x4682 <prvReloadTimer>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    48d8:	d8 01       	movw	r26, r16
    48da:	50 96       	adiw	r26, 0x10	; 16
    48dc:	ed 91       	ld	r30, X+
    48de:	fc 91       	ld	r31, X
    48e0:	c8 01       	movw	r24, r16
    48e2:	09 95       	icall
    48e4:	6e cf       	rjmp	.-292    	; 0x47c2 <prvTimerTask+0x68>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    48e6:	8e 7f       	andi	r24, 0xFE	; 254
    48e8:	f8 01       	movw	r30, r16
    48ea:	82 8b       	std	Z+18, r24	; 0x12
    48ec:	f5 cf       	rjmp	.-22     	; 0x48d8 <prvTimerTask+0x17e>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
    48ee:	81 60       	ori	r24, 0x01	; 1
    48f0:	52 96       	adiw	r26, 0x12	; 18
    48f2:	8c 93       	st	X, r24
    48f4:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    48f6:	6a 81       	ldd	r22, Y+2	; 0x02
    48f8:	7b 81       	ldd	r23, Y+3	; 0x03
    48fa:	1d 96       	adiw	r26, 0x0d	; 13
    48fc:	7c 93       	st	X, r23
    48fe:	6e 93       	st	-X, r22
    4900:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4902:	6c 0d       	add	r22, r12
    4904:	7d 1d       	adc	r23, r13
    4906:	96 01       	movw	r18, r12
    4908:	a6 01       	movw	r20, r12
    490a:	c8 01       	movw	r24, r16
    490c:	0e 94 17 23 	call	0x462e	; 0x462e <prvInsertTimerInActiveList>
    4910:	58 cf       	rjmp	.-336    	; 0x47c2 <prvTimerTask+0x68>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    4912:	81 fd       	sbrc	r24, 1
    4914:	04 c0       	rjmp	.+8      	; 0x491e <prvTimerTask+0x1c4>
                            {
                                vPortFree( pxTimer );
    4916:	c8 01       	movw	r24, r16
    4918:	0e 94 32 0c 	call	0x1864	; 0x1864 <vPortFree>
    491c:	52 cf       	rjmp	.-348    	; 0x47c2 <prvTimerTask+0x68>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    491e:	8e 7f       	andi	r24, 0xFE	; 254
    4920:	f8 01       	movw	r30, r16
    4922:	82 8b       	std	Z+18, r24	; 0x12
    4924:	4e cf       	rjmp	.-356    	; 0x47c2 <prvTimerTask+0x68>

00004926 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    4926:	ef 92       	push	r14
    4928:	ff 92       	push	r15
    492a:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    492c:	0e 94 ee 22 	call	0x45dc	; 0x45dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    4930:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    4934:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    4938:	89 2b       	or	r24, r25
    493a:	91 f0       	breq	.+36     	; 0x4960 <xTimerCreateTimerTask+0x3a>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    493c:	8c ed       	ldi	r24, 0xDC	; 220
    493e:	e8 2e       	mov	r14, r24
    4940:	87 e0       	ldi	r24, 0x07	; 7
    4942:	f8 2e       	mov	r15, r24
    4944:	02 e0       	ldi	r16, 0x02	; 2
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	40 e8       	ldi	r20, 0x80	; 128
    494c:	6c e3       	ldi	r22, 0x3C	; 60
    494e:	71 e0       	ldi	r23, 0x01	; 1
    4950:	8d ea       	ldi	r24, 0xAD	; 173
    4952:	93 e2       	ldi	r25, 0x23	; 35
    4954:	0e 94 1c 18 	call	0x3038	; 0x3038 <xTaskCreate>
        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
    }
    4958:	0f 91       	pop	r16
    495a:	ff 90       	pop	r15
    495c:	ef 90       	pop	r14
    495e:	08 95       	ret
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    4960:	80 e0       	ldi	r24, 0x00	; 0

        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
    4962:	fa cf       	rjmp	.-12     	; 0x4958 <xTimerCreateTimerTask+0x32>

00004964 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    4964:	8f 92       	push	r8
    4966:	9f 92       	push	r9
    4968:	af 92       	push	r10
    496a:	bf 92       	push	r11
    496c:	cf 92       	push	r12
    496e:	df 92       	push	r13
    4970:	ff 92       	push	r15
    4972:	0f 93       	push	r16
    4974:	1f 93       	push	r17
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	4c 01       	movw	r8, r24
    497c:	5b 01       	movw	r10, r22
    497e:	f4 2e       	mov	r15, r20
    4980:	69 01       	movw	r12, r18
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    4982:	83 e1       	ldi	r24, 0x13	; 19
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <pvPortMalloc>
    498a:	ec 01       	movw	r28, r24

            if( pxNewTimer != NULL )
    498c:	89 2b       	or	r24, r25
    498e:	a1 f0       	breq	.+40     	; 0x49b8 <xTimerCreate+0x54>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    4990:	1a 8a       	std	Y+18, r1	; 0x12
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    4992:	0e 94 ee 22 	call	0x45dc	; 0x45dc <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    4996:	99 82       	std	Y+1, r9	; 0x01
    4998:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    499a:	bd 86       	std	Y+13, r11	; 0x0d
    499c:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    499e:	df 86       	std	Y+15, r13	; 0x0f
    49a0:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    49a2:	19 8b       	std	Y+17, r17	; 0x11
    49a4:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    49a6:	ce 01       	movw	r24, r28
    49a8:	02 96       	adiw	r24, 0x02	; 2
    49aa:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    49ae:	ff 20       	and	r15, r15
    49b0:	19 f0       	breq	.+6      	; 0x49b8 <xTimerCreate+0x54>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
    49b2:	8a 89       	ldd	r24, Y+18	; 0x12
    49b4:	84 60       	ori	r24, 0x04	; 4
    49b6:	8a 8b       	std	Y+18, r24	; 0x12
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
        }
    49b8:	ce 01       	movw	r24, r28
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	1f 91       	pop	r17
    49c0:	0f 91       	pop	r16
    49c2:	ff 90       	pop	r15
    49c4:	df 90       	pop	r13
    49c6:	cf 90       	pop	r12
    49c8:	bf 90       	pop	r11
    49ca:	af 90       	pop	r10
    49cc:	9f 90       	pop	r9
    49ce:	8f 90       	pop	r8
    49d0:	08 95       	ret

000049d2 <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
    49d2:	0f 93       	push	r16
    49d4:	1f 93       	push	r17
    49d6:	cf 93       	push	r28
    49d8:	df 93       	push	r29
    49da:	00 d0       	rcall	.+0      	; 0x49dc <xTimerGenericCommandFromTask+0xa>
    49dc:	00 d0       	rcall	.+0      	; 0x49de <xTimerGenericCommandFromTask+0xc>
    49de:	1f 92       	push	r1
    49e0:	cd b7       	in	r28, 0x3d	; 61
    49e2:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    49e4:	20 91 de 07 	lds	r18, 0x07DE	; 0x8007de <xTimerQueue>
    49e8:	30 91 df 07 	lds	r19, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    49ec:	23 2b       	or	r18, r19
    49ee:	59 f4       	brne	.+22     	; 0x4a06 <xTimerGenericCommandFromTask+0x34>
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    49f0:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
    }
    49f2:	0f 90       	pop	r0
    49f4:	0f 90       	pop	r0
    49f6:	0f 90       	pop	r0
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	1f 91       	pop	r17
    4a02:	0f 91       	pop	r16
    4a04:	08 95       	ret
        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    4a06:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4a08:	5b 83       	std	Y+3, r21	; 0x03
    4a0a:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    4a0c:	9d 83       	std	Y+5, r25	; 0x05
    4a0e:	8c 83       	std	Y+4, r24	; 0x04

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4a10:	66 30       	cpi	r22, 0x06	; 6
    4a12:	74 f7       	brge	.-36     	; 0x49f0 <xTimerGenericCommandFromTask+0x1e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4a14:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <xTaskGetSchedulerState>
    4a18:	e0 91 de 07 	lds	r30, 0x07DE	; 0x8007de <xTimerQueue>
    4a1c:	f0 91 df 07 	lds	r31, 0x07DF	; 0x8007df <xTimerQueue+0x1>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	a8 01       	movw	r20, r16

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4a24:	82 30       	cpi	r24, 0x02	; 2
    4a26:	11 f0       	breq	.+4      	; 0x4a2c <xTimerGenericCommandFromTask+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    4a28:	50 e0       	ldi	r21, 0x00	; 0
    4a2a:	40 e0       	ldi	r20, 0x00	; 0
    4a2c:	be 01       	movw	r22, r28
    4a2e:	6f 5f       	subi	r22, 0xFF	; 255
    4a30:	7f 4f       	sbci	r23, 0xFF	; 255
    4a32:	cf 01       	movw	r24, r30
    4a34:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericSend>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
    4a38:	dc cf       	rjmp	.-72     	; 0x49f2 <xTimerGenericCommandFromTask+0x20>

00004a3a <xTimerGenericCommandFromISR>:
    BaseType_t xTimerGenericCommandFromISR( TimerHandle_t xTimer,
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
    4a3a:	cf 93       	push	r28
    4a3c:	df 93       	push	r29
    4a3e:	00 d0       	rcall	.+0      	; 0x4a40 <xTimerGenericCommandFromISR+0x6>
    4a40:	00 d0       	rcall	.+0      	; 0x4a42 <xTimerGenericCommandFromISR+0x8>
    4a42:	1f 92       	push	r1
    4a44:	cd b7       	in	r28, 0x3d	; 61
    4a46:	de b7       	in	r29, 0x3e	; 62
    4a48:	fc 01       	movw	r30, r24

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    4a4a:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    4a4e:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    4a52:	00 97       	sbiw	r24, 0x00	; 0
    4a54:	49 f4       	brne	.+18     	; 0x4a68 <xTimerGenericCommandFromISR+0x2e>
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    4a56:	80 e0       	ldi	r24, 0x00	; 0
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
    }
    4a58:	0f 90       	pop	r0
    4a5a:	0f 90       	pop	r0
    4a5c:	0f 90       	pop	r0
    4a5e:	0f 90       	pop	r0
    4a60:	0f 90       	pop	r0
    4a62:	df 91       	pop	r29
    4a64:	cf 91       	pop	r28
    4a66:	08 95       	ret
        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    4a68:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4a6a:	5b 83       	std	Y+3, r21	; 0x03
    4a6c:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    4a6e:	fd 83       	std	Y+5, r31	; 0x05
    4a70:	ec 83       	std	Y+4, r30	; 0x04

            configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );

            if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
    4a72:	66 30       	cpi	r22, 0x06	; 6
    4a74:	84 f3       	brlt	.-32     	; 0x4a56 <xTimerGenericCommandFromISR+0x1c>
    4a76:	a9 01       	movw	r20, r18
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	be 01       	movw	r22, r28
    4a7c:	6f 5f       	subi	r22, 0xFF	; 255
    4a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a80:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <xQueueGenericSendFromISR>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
    4a84:	e9 cf       	rjmp	.-46     	; 0x4a58 <xTimerGenericCommandFromISR+0x1e>

00004a86 <xTimerGetTimerDaemonTaskHandle>:
        configASSERT( ( xTimerTaskHandle != NULL ) );

        traceRETURN_xTimerGetTimerDaemonTaskHandle( xTimerTaskHandle );

        return xTimerTaskHandle;
    }
    4a86:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <xTimerTaskHandle>
    4a8a:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <xTimerTaskHandle+0x1>
    4a8e:	08 95       	ret

00004a90 <xTimerGetPeriod>:
        configASSERT( xTimer );

        traceRETURN_xTimerGetPeriod( pxTimer->xTimerPeriodInTicks );

        return pxTimer->xTimerPeriodInTicks;
    }
    4a90:	fc 01       	movw	r30, r24
    4a92:	84 85       	ldd	r24, Z+12	; 0x0c
    4a94:	95 85       	ldd	r25, Z+13	; 0x0d
    4a96:	08 95       	ret

00004a98 <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

    void vTimerSetReloadMode( TimerHandle_t xTimer,
                              const BaseType_t xAutoReload )
    {
    4a98:	fc 01       	movw	r30, r24
        Timer_t * pxTimer = xTimer;

        traceENTER_vTimerSetReloadMode( xTimer, xAutoReload );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
    4a9a:	0f b6       	in	r0, 0x3f	; 63
    4a9c:	f8 94       	cli
    4a9e:	0f 92       	push	r0
    4aa0:	92 89       	ldd	r25, Z+18	; 0x12
        {
            if( xAutoReload != pdFALSE )
    4aa2:	66 23       	and	r22, r22
    4aa4:	29 f0       	breq	.+10     	; 0x4ab0 <vTimerSetReloadMode+0x18>
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
    4aa6:	94 60       	ori	r25, 0x04	; 4
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
    4aa8:	92 8b       	std	Z+18, r25	; 0x12
            }
        }
        taskEXIT_CRITICAL();
    4aaa:	0f 90       	pop	r0
    4aac:	0f be       	out	0x3f, r0	; 63

        traceRETURN_vTimerSetReloadMode();
    }
    4aae:	08 95       	ret
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
    4ab0:	9b 7f       	andi	r25, 0xFB	; 251
    4ab2:	fa cf       	rjmp	.-12     	; 0x4aa8 <vTimerSetReloadMode+0x10>

00004ab4 <xTimerGetReloadMode>:
        BaseType_t xReturn;

        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
    4ab4:	0f b6       	in	r0, 0x3f	; 63
    4ab6:	f8 94       	cli
    4ab8:	0f 92       	push	r0
            {
                /* Is an auto-reload timer. */
                xReturn = pdTRUE;
            }
        }
        taskEXIT_CRITICAL();
    4aba:	0f 90       	pop	r0
    4abc:	0f be       	out	0x3f, r0	; 63
        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
        taskENTER_CRITICAL();
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0U )
    4abe:	fc 01       	movw	r30, r24
    4ac0:	82 89       	ldd	r24, Z+18	; 0x12
        taskEXIT_CRITICAL();

        traceRETURN_xTimerGetReloadMode( xReturn );

        return xReturn;
    }
    4ac2:	82 fb       	bst	r24, 2
    4ac4:	88 27       	eor	r24, r24
    4ac6:	80 f9       	bld	r24, 0
    4ac8:	08 95       	ret

00004aca <uxTimerGetReloadMode>:
    {
        UBaseType_t uxReturn;

        traceENTER_uxTimerGetReloadMode( xTimer );

        uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
    4aca:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <xTimerGetReloadMode>

00004ace <xTimerGetExpiryTime>:
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );

        traceRETURN_xTimerGetExpiryTime( xReturn );

        return xReturn;
    }
    4ace:	fc 01       	movw	r30, r24
    4ad0:	82 81       	ldd	r24, Z+2	; 0x02
    4ad2:	93 81       	ldd	r25, Z+3	; 0x03
    4ad4:	08 95       	ret

00004ad6 <pcTimerGetName>:
        configASSERT( xTimer );

        traceRETURN_pcTimerGetName( pxTimer->pcTimerName );

        return pxTimer->pcTimerName;
    }
    4ad6:	fc 01       	movw	r30, r24
    4ad8:	80 81       	ld	r24, Z
    4ada:	91 81       	ldd	r25, Z+1	; 0x01
    4adc:	08 95       	ret

00004ade <xTimerIsTimerActive>:
        traceENTER_xTimerIsTimerActive( xTimer );

        configASSERT( xTimer );

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
    4ade:	0f b6       	in	r0, 0x3f	; 63
    4ae0:	f8 94       	cli
    4ae2:	0f 92       	push	r0
            else
            {
                xReturn = pdTRUE;
            }
        }
        taskEXIT_CRITICAL();
    4ae4:	0f 90       	pop	r0
    4ae6:	0f be       	out	0x3f, r0	; 63
        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0U )
            {
                xReturn = pdFALSE;
    4ae8:	fc 01       	movw	r30, r24
    4aea:	82 89       	ldd	r24, Z+18	; 0x12
        taskEXIT_CRITICAL();

        traceRETURN_xTimerIsTimerActive( xReturn );

        return xReturn;
    }
    4aec:	81 70       	andi	r24, 0x01	; 1
    4aee:	08 95       	ret

00004af0 <pvTimerGetTimerID>:

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    4af0:	0f b6       	in	r0, 0x3f	; 63
    4af2:	f8 94       	cli
    4af4:	0f 92       	push	r0
        {
            pvReturn = pxTimer->pvTimerID;
        }
        taskEXIT_CRITICAL();
    4af6:	0f 90       	pop	r0
    4af8:	0f be       	out	0x3f, r0	; 63

        traceRETURN_pvTimerGetTimerID( pvReturn );

        return pvReturn;
    }
    4afa:	fc 01       	movw	r30, r24
    4afc:	86 85       	ldd	r24, Z+14	; 0x0e
    4afe:	97 85       	ldd	r25, Z+15	; 0x0f
    4b00:	08 95       	ret

00004b02 <vTimerSetTimerID>:

        traceENTER_vTimerSetTimerID( xTimer, pvNewID );

        configASSERT( xTimer );

        taskENTER_CRITICAL();
    4b02:	0f b6       	in	r0, 0x3f	; 63
    4b04:	f8 94       	cli
    4b06:	0f 92       	push	r0
        {
            pxTimer->pvTimerID = pvNewID;
    4b08:	fc 01       	movw	r30, r24
    4b0a:	77 87       	std	Z+15, r23	; 0x0f
    4b0c:	66 87       	std	Z+14, r22	; 0x0e
        }
        taskEXIT_CRITICAL();
    4b0e:	0f 90       	pop	r0
    4b10:	0f be       	out	0x3f, r0	; 63

        traceRETURN_vTimerSetTimerID();
    }
    4b12:	08 95       	ret

00004b14 <vTimerResetState>:
 * This function must be called by the application before restarting the
 * scheduler.
 */
    void vTimerResetState( void )
    {
        xTimerQueue = NULL;
    4b14:	10 92 df 07 	sts	0x07DF, r1	; 0x8007df <xTimerQueue+0x1>
    4b18:	10 92 de 07 	sts	0x07DE, r1	; 0x8007de <xTimerQueue>
        xTimerTaskHandle = NULL;
    4b1c:	10 92 dd 07 	sts	0x07DD, r1	; 0x8007dd <xTimerTaskHandle+0x1>
    4b20:	10 92 dc 07 	sts	0x07DC, r1	; 0x8007dc <xTimerTaskHandle>
    }
    4b24:	08 95       	ret

00004b26 <main>:


int main(void) {

	// Initialize buttons for interrupts
		Button_Init();
    4b26:	0e 94 03 06 	call	0xc06	; 0xc06 <Button_Init>
//		LCD_Init();

		DDRD |= (1 << PD6);
    4b2a:	8e 9a       	sbi	0x11, 6	; 17

		ADC_INIT(128, AREF);
    4b2c:	60 e0       	ldi	r22, 0x00	; 0
    4b2e:	80 e8       	ldi	r24, 0x80	; 128
    4b30:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <ADC_INIT>

		poller_Init();
    4b34:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <poller_Init>

		poller_SetPollTime(50);
    4b38:	62 e3       	ldi	r22, 0x32	; 50
    4b3a:	70 e0       	ldi	r23, 0x00	; 0
    4b3c:	80 e0       	ldi	r24, 0x00	; 0
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	0e 94 ee 05 	call	0xbdc	; 0xbdc <poller_SetPollTime>
		Poller__StartPolling();
    4b44:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Poller__StartPolling>

		

		Os_Init();
    4b48:	0e 94 f6 02 	call	0x5ec	; 0x5ec <Os_Init>
    4b4c:	ff cf       	rjmp	.-2      	; 0x4b4c <main+0x26>

00004b4e <__subsf3>:
    4b4e:	50 58       	subi	r21, 0x80	; 128

00004b50 <__addsf3>:
    4b50:	bb 27       	eor	r27, r27
    4b52:	aa 27       	eor	r26, r26
    4b54:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__addsf3x>
    4b58:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__fp_round>
    4b5c:	0e 94 f5 26 	call	0x4dea	; 0x4dea <__fp_pscA>
    4b60:	38 f0       	brcs	.+14     	; 0x4b70 <__addsf3+0x20>
    4b62:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__fp_pscB>
    4b66:	20 f0       	brcs	.+8      	; 0x4b70 <__addsf3+0x20>
    4b68:	39 f4       	brne	.+14     	; 0x4b78 <__addsf3+0x28>
    4b6a:	9f 3f       	cpi	r25, 0xFF	; 255
    4b6c:	19 f4       	brne	.+6      	; 0x4b74 <__addsf3+0x24>
    4b6e:	26 f4       	brtc	.+8      	; 0x4b78 <__addsf3+0x28>
    4b70:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__fp_nan>
    4b74:	0e f4       	brtc	.+2      	; 0x4b78 <__addsf3+0x28>
    4b76:	e0 95       	com	r30
    4b78:	e7 fb       	bst	r30, 7
    4b7a:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__fp_inf>

00004b7e <__addsf3x>:
    4b7e:	e9 2f       	mov	r30, r25
    4b80:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__fp_split3>
    4b84:	58 f3       	brcs	.-42     	; 0x4b5c <__addsf3+0xc>
    4b86:	ba 17       	cp	r27, r26
    4b88:	62 07       	cpc	r22, r18
    4b8a:	73 07       	cpc	r23, r19
    4b8c:	84 07       	cpc	r24, r20
    4b8e:	95 07       	cpc	r25, r21
    4b90:	20 f0       	brcs	.+8      	; 0x4b9a <__addsf3x+0x1c>
    4b92:	79 f4       	brne	.+30     	; 0x4bb2 <__addsf3x+0x34>
    4b94:	a6 f5       	brtc	.+104    	; 0x4bfe <__addsf3x+0x80>
    4b96:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <__fp_zero>
    4b9a:	0e f4       	brtc	.+2      	; 0x4b9e <__addsf3x+0x20>
    4b9c:	e0 95       	com	r30
    4b9e:	0b 2e       	mov	r0, r27
    4ba0:	ba 2f       	mov	r27, r26
    4ba2:	a0 2d       	mov	r26, r0
    4ba4:	0b 01       	movw	r0, r22
    4ba6:	b9 01       	movw	r22, r18
    4ba8:	90 01       	movw	r18, r0
    4baa:	0c 01       	movw	r0, r24
    4bac:	ca 01       	movw	r24, r20
    4bae:	a0 01       	movw	r20, r0
    4bb0:	11 24       	eor	r1, r1
    4bb2:	ff 27       	eor	r31, r31
    4bb4:	59 1b       	sub	r21, r25
    4bb6:	99 f0       	breq	.+38     	; 0x4bde <__addsf3x+0x60>
    4bb8:	59 3f       	cpi	r21, 0xF9	; 249
    4bba:	50 f4       	brcc	.+20     	; 0x4bd0 <__addsf3x+0x52>
    4bbc:	50 3e       	cpi	r21, 0xE0	; 224
    4bbe:	68 f1       	brcs	.+90     	; 0x4c1a <__addsf3x+0x9c>
    4bc0:	1a 16       	cp	r1, r26
    4bc2:	f0 40       	sbci	r31, 0x00	; 0
    4bc4:	a2 2f       	mov	r26, r18
    4bc6:	23 2f       	mov	r18, r19
    4bc8:	34 2f       	mov	r19, r20
    4bca:	44 27       	eor	r20, r20
    4bcc:	58 5f       	subi	r21, 0xF8	; 248
    4bce:	f3 cf       	rjmp	.-26     	; 0x4bb6 <__addsf3x+0x38>
    4bd0:	46 95       	lsr	r20
    4bd2:	37 95       	ror	r19
    4bd4:	27 95       	ror	r18
    4bd6:	a7 95       	ror	r26
    4bd8:	f0 40       	sbci	r31, 0x00	; 0
    4bda:	53 95       	inc	r21
    4bdc:	c9 f7       	brne	.-14     	; 0x4bd0 <__addsf3x+0x52>
    4bde:	7e f4       	brtc	.+30     	; 0x4bfe <__addsf3x+0x80>
    4be0:	1f 16       	cp	r1, r31
    4be2:	ba 0b       	sbc	r27, r26
    4be4:	62 0b       	sbc	r22, r18
    4be6:	73 0b       	sbc	r23, r19
    4be8:	84 0b       	sbc	r24, r20
    4bea:	ba f0       	brmi	.+46     	; 0x4c1a <__addsf3x+0x9c>
    4bec:	91 50       	subi	r25, 0x01	; 1
    4bee:	a1 f0       	breq	.+40     	; 0x4c18 <__addsf3x+0x9a>
    4bf0:	ff 0f       	add	r31, r31
    4bf2:	bb 1f       	adc	r27, r27
    4bf4:	66 1f       	adc	r22, r22
    4bf6:	77 1f       	adc	r23, r23
    4bf8:	88 1f       	adc	r24, r24
    4bfa:	c2 f7       	brpl	.-16     	; 0x4bec <__addsf3x+0x6e>
    4bfc:	0e c0       	rjmp	.+28     	; 0x4c1a <__addsf3x+0x9c>
    4bfe:	ba 0f       	add	r27, r26
    4c00:	62 1f       	adc	r22, r18
    4c02:	73 1f       	adc	r23, r19
    4c04:	84 1f       	adc	r24, r20
    4c06:	48 f4       	brcc	.+18     	; 0x4c1a <__addsf3x+0x9c>
    4c08:	87 95       	ror	r24
    4c0a:	77 95       	ror	r23
    4c0c:	67 95       	ror	r22
    4c0e:	b7 95       	ror	r27
    4c10:	f7 95       	ror	r31
    4c12:	9e 3f       	cpi	r25, 0xFE	; 254
    4c14:	08 f0       	brcs	.+2      	; 0x4c18 <__addsf3x+0x9a>
    4c16:	b0 cf       	rjmp	.-160    	; 0x4b78 <__addsf3+0x28>
    4c18:	93 95       	inc	r25
    4c1a:	88 0f       	add	r24, r24
    4c1c:	08 f0       	brcs	.+2      	; 0x4c20 <__addsf3x+0xa2>
    4c1e:	99 27       	eor	r25, r25
    4c20:	ee 0f       	add	r30, r30
    4c22:	97 95       	ror	r25
    4c24:	87 95       	ror	r24
    4c26:	08 95       	ret

00004c28 <__cmpsf2>:
    4c28:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__fp_cmp>
    4c2c:	08 f4       	brcc	.+2      	; 0x4c30 <__cmpsf2+0x8>
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	08 95       	ret

00004c32 <__divsf3>:
    4c32:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__divsf3x>
    4c36:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__fp_round>
    4c3a:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__fp_pscB>
    4c3e:	58 f0       	brcs	.+22     	; 0x4c56 <__divsf3+0x24>
    4c40:	0e 94 f5 26 	call	0x4dea	; 0x4dea <__fp_pscA>
    4c44:	40 f0       	brcs	.+16     	; 0x4c56 <__divsf3+0x24>
    4c46:	29 f4       	brne	.+10     	; 0x4c52 <__divsf3+0x20>
    4c48:	5f 3f       	cpi	r21, 0xFF	; 255
    4c4a:	29 f0       	breq	.+10     	; 0x4c56 <__divsf3+0x24>
    4c4c:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__fp_inf>
    4c50:	51 11       	cpse	r21, r1
    4c52:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <__fp_szero>
    4c56:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__fp_nan>

00004c5a <__divsf3x>:
    4c5a:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__fp_split3>
    4c5e:	68 f3       	brcs	.-38     	; 0x4c3a <__divsf3+0x8>

00004c60 <__divsf3_pse>:
    4c60:	99 23       	and	r25, r25
    4c62:	b1 f3       	breq	.-20     	; 0x4c50 <__divsf3+0x1e>
    4c64:	55 23       	and	r21, r21
    4c66:	91 f3       	breq	.-28     	; 0x4c4c <__divsf3+0x1a>
    4c68:	95 1b       	sub	r25, r21
    4c6a:	55 0b       	sbc	r21, r21
    4c6c:	bb 27       	eor	r27, r27
    4c6e:	aa 27       	eor	r26, r26
    4c70:	62 17       	cp	r22, r18
    4c72:	73 07       	cpc	r23, r19
    4c74:	84 07       	cpc	r24, r20
    4c76:	38 f0       	brcs	.+14     	; 0x4c86 <__divsf3_pse+0x26>
    4c78:	9f 5f       	subi	r25, 0xFF	; 255
    4c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c7c:	22 0f       	add	r18, r18
    4c7e:	33 1f       	adc	r19, r19
    4c80:	44 1f       	adc	r20, r20
    4c82:	aa 1f       	adc	r26, r26
    4c84:	a9 f3       	breq	.-22     	; 0x4c70 <__divsf3_pse+0x10>
    4c86:	35 d0       	rcall	.+106    	; 0x4cf2 <__divsf3_pse+0x92>
    4c88:	0e 2e       	mov	r0, r30
    4c8a:	3a f0       	brmi	.+14     	; 0x4c9a <__divsf3_pse+0x3a>
    4c8c:	e0 e8       	ldi	r30, 0x80	; 128
    4c8e:	32 d0       	rcall	.+100    	; 0x4cf4 <__divsf3_pse+0x94>
    4c90:	91 50       	subi	r25, 0x01	; 1
    4c92:	50 40       	sbci	r21, 0x00	; 0
    4c94:	e6 95       	lsr	r30
    4c96:	00 1c       	adc	r0, r0
    4c98:	ca f7       	brpl	.-14     	; 0x4c8c <__divsf3_pse+0x2c>
    4c9a:	2b d0       	rcall	.+86     	; 0x4cf2 <__divsf3_pse+0x92>
    4c9c:	fe 2f       	mov	r31, r30
    4c9e:	29 d0       	rcall	.+82     	; 0x4cf2 <__divsf3_pse+0x92>
    4ca0:	66 0f       	add	r22, r22
    4ca2:	77 1f       	adc	r23, r23
    4ca4:	88 1f       	adc	r24, r24
    4ca6:	bb 1f       	adc	r27, r27
    4ca8:	26 17       	cp	r18, r22
    4caa:	37 07       	cpc	r19, r23
    4cac:	48 07       	cpc	r20, r24
    4cae:	ab 07       	cpc	r26, r27
    4cb0:	b0 e8       	ldi	r27, 0x80	; 128
    4cb2:	09 f0       	breq	.+2      	; 0x4cb6 <__divsf3_pse+0x56>
    4cb4:	bb 0b       	sbc	r27, r27
    4cb6:	80 2d       	mov	r24, r0
    4cb8:	bf 01       	movw	r22, r30
    4cba:	ff 27       	eor	r31, r31
    4cbc:	93 58       	subi	r25, 0x83	; 131
    4cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    4cc0:	3a f0       	brmi	.+14     	; 0x4cd0 <__divsf3_pse+0x70>
    4cc2:	9e 3f       	cpi	r25, 0xFE	; 254
    4cc4:	51 05       	cpc	r21, r1
    4cc6:	78 f0       	brcs	.+30     	; 0x4ce6 <__divsf3_pse+0x86>
    4cc8:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__fp_inf>
    4ccc:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <__fp_szero>
    4cd0:	5f 3f       	cpi	r21, 0xFF	; 255
    4cd2:	e4 f3       	brlt	.-8      	; 0x4ccc <__divsf3_pse+0x6c>
    4cd4:	98 3e       	cpi	r25, 0xE8	; 232
    4cd6:	d4 f3       	brlt	.-12     	; 0x4ccc <__divsf3_pse+0x6c>
    4cd8:	86 95       	lsr	r24
    4cda:	77 95       	ror	r23
    4cdc:	67 95       	ror	r22
    4cde:	b7 95       	ror	r27
    4ce0:	f7 95       	ror	r31
    4ce2:	9f 5f       	subi	r25, 0xFF	; 255
    4ce4:	c9 f7       	brne	.-14     	; 0x4cd8 <__divsf3_pse+0x78>
    4ce6:	88 0f       	add	r24, r24
    4ce8:	91 1d       	adc	r25, r1
    4cea:	96 95       	lsr	r25
    4cec:	87 95       	ror	r24
    4cee:	97 f9       	bld	r25, 7
    4cf0:	08 95       	ret
    4cf2:	e1 e0       	ldi	r30, 0x01	; 1
    4cf4:	66 0f       	add	r22, r22
    4cf6:	77 1f       	adc	r23, r23
    4cf8:	88 1f       	adc	r24, r24
    4cfa:	bb 1f       	adc	r27, r27
    4cfc:	62 17       	cp	r22, r18
    4cfe:	73 07       	cpc	r23, r19
    4d00:	84 07       	cpc	r24, r20
    4d02:	ba 07       	cpc	r27, r26
    4d04:	20 f0       	brcs	.+8      	; 0x4d0e <__divsf3_pse+0xae>
    4d06:	62 1b       	sub	r22, r18
    4d08:	73 0b       	sbc	r23, r19
    4d0a:	84 0b       	sbc	r24, r20
    4d0c:	ba 0b       	sbc	r27, r26
    4d0e:	ee 1f       	adc	r30, r30
    4d10:	88 f7       	brcc	.-30     	; 0x4cf4 <__divsf3_pse+0x94>
    4d12:	e0 95       	com	r30
    4d14:	08 95       	ret

00004d16 <__floatunsisf>:
    4d16:	e8 94       	clt
    4d18:	09 c0       	rjmp	.+18     	; 0x4d2c <__floatsisf+0x12>

00004d1a <__floatsisf>:
    4d1a:	97 fb       	bst	r25, 7
    4d1c:	3e f4       	brtc	.+14     	; 0x4d2c <__floatsisf+0x12>
    4d1e:	90 95       	com	r25
    4d20:	80 95       	com	r24
    4d22:	70 95       	com	r23
    4d24:	61 95       	neg	r22
    4d26:	7f 4f       	sbci	r23, 0xFF	; 255
    4d28:	8f 4f       	sbci	r24, 0xFF	; 255
    4d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d2c:	99 23       	and	r25, r25
    4d2e:	a9 f0       	breq	.+42     	; 0x4d5a <__floatsisf+0x40>
    4d30:	f9 2f       	mov	r31, r25
    4d32:	96 e9       	ldi	r25, 0x96	; 150
    4d34:	bb 27       	eor	r27, r27
    4d36:	93 95       	inc	r25
    4d38:	f6 95       	lsr	r31
    4d3a:	87 95       	ror	r24
    4d3c:	77 95       	ror	r23
    4d3e:	67 95       	ror	r22
    4d40:	b7 95       	ror	r27
    4d42:	f1 11       	cpse	r31, r1
    4d44:	f8 cf       	rjmp	.-16     	; 0x4d36 <__floatsisf+0x1c>
    4d46:	fa f4       	brpl	.+62     	; 0x4d86 <__floatsisf+0x6c>
    4d48:	bb 0f       	add	r27, r27
    4d4a:	11 f4       	brne	.+4      	; 0x4d50 <__floatsisf+0x36>
    4d4c:	60 ff       	sbrs	r22, 0
    4d4e:	1b c0       	rjmp	.+54     	; 0x4d86 <__floatsisf+0x6c>
    4d50:	6f 5f       	subi	r22, 0xFF	; 255
    4d52:	7f 4f       	sbci	r23, 0xFF	; 255
    4d54:	8f 4f       	sbci	r24, 0xFF	; 255
    4d56:	9f 4f       	sbci	r25, 0xFF	; 255
    4d58:	16 c0       	rjmp	.+44     	; 0x4d86 <__floatsisf+0x6c>
    4d5a:	88 23       	and	r24, r24
    4d5c:	11 f0       	breq	.+4      	; 0x4d62 <__floatsisf+0x48>
    4d5e:	96 e9       	ldi	r25, 0x96	; 150
    4d60:	11 c0       	rjmp	.+34     	; 0x4d84 <__floatsisf+0x6a>
    4d62:	77 23       	and	r23, r23
    4d64:	21 f0       	breq	.+8      	; 0x4d6e <__floatsisf+0x54>
    4d66:	9e e8       	ldi	r25, 0x8E	; 142
    4d68:	87 2f       	mov	r24, r23
    4d6a:	76 2f       	mov	r23, r22
    4d6c:	05 c0       	rjmp	.+10     	; 0x4d78 <__floatsisf+0x5e>
    4d6e:	66 23       	and	r22, r22
    4d70:	71 f0       	breq	.+28     	; 0x4d8e <__floatsisf+0x74>
    4d72:	96 e8       	ldi	r25, 0x86	; 134
    4d74:	86 2f       	mov	r24, r22
    4d76:	70 e0       	ldi	r23, 0x00	; 0
    4d78:	60 e0       	ldi	r22, 0x00	; 0
    4d7a:	2a f0       	brmi	.+10     	; 0x4d86 <__floatsisf+0x6c>
    4d7c:	9a 95       	dec	r25
    4d7e:	66 0f       	add	r22, r22
    4d80:	77 1f       	adc	r23, r23
    4d82:	88 1f       	adc	r24, r24
    4d84:	da f7       	brpl	.-10     	; 0x4d7c <__floatsisf+0x62>
    4d86:	88 0f       	add	r24, r24
    4d88:	96 95       	lsr	r25
    4d8a:	87 95       	ror	r24
    4d8c:	97 f9       	bld	r25, 7
    4d8e:	08 95       	ret

00004d90 <__fp_cmp>:
    4d90:	99 0f       	add	r25, r25
    4d92:	00 08       	sbc	r0, r0
    4d94:	55 0f       	add	r21, r21
    4d96:	aa 0b       	sbc	r26, r26
    4d98:	e0 e8       	ldi	r30, 0x80	; 128
    4d9a:	fe ef       	ldi	r31, 0xFE	; 254
    4d9c:	16 16       	cp	r1, r22
    4d9e:	17 06       	cpc	r1, r23
    4da0:	e8 07       	cpc	r30, r24
    4da2:	f9 07       	cpc	r31, r25
    4da4:	c0 f0       	brcs	.+48     	; 0x4dd6 <__fp_cmp+0x46>
    4da6:	12 16       	cp	r1, r18
    4da8:	13 06       	cpc	r1, r19
    4daa:	e4 07       	cpc	r30, r20
    4dac:	f5 07       	cpc	r31, r21
    4dae:	98 f0       	brcs	.+38     	; 0x4dd6 <__fp_cmp+0x46>
    4db0:	62 1b       	sub	r22, r18
    4db2:	73 0b       	sbc	r23, r19
    4db4:	84 0b       	sbc	r24, r20
    4db6:	95 0b       	sbc	r25, r21
    4db8:	39 f4       	brne	.+14     	; 0x4dc8 <__fp_cmp+0x38>
    4dba:	0a 26       	eor	r0, r26
    4dbc:	61 f0       	breq	.+24     	; 0x4dd6 <__fp_cmp+0x46>
    4dbe:	23 2b       	or	r18, r19
    4dc0:	24 2b       	or	r18, r20
    4dc2:	25 2b       	or	r18, r21
    4dc4:	21 f4       	brne	.+8      	; 0x4dce <__fp_cmp+0x3e>
    4dc6:	08 95       	ret
    4dc8:	0a 26       	eor	r0, r26
    4dca:	09 f4       	brne	.+2      	; 0x4dce <__fp_cmp+0x3e>
    4dcc:	a1 40       	sbci	r26, 0x01	; 1
    4dce:	a6 95       	lsr	r26
    4dd0:	8f ef       	ldi	r24, 0xFF	; 255
    4dd2:	81 1d       	adc	r24, r1
    4dd4:	81 1d       	adc	r24, r1
    4dd6:	08 95       	ret

00004dd8 <__fp_inf>:
    4dd8:	97 f9       	bld	r25, 7
    4dda:	9f 67       	ori	r25, 0x7F	; 127
    4ddc:	80 e8       	ldi	r24, 0x80	; 128
    4dde:	70 e0       	ldi	r23, 0x00	; 0
    4de0:	60 e0       	ldi	r22, 0x00	; 0
    4de2:	08 95       	ret

00004de4 <__fp_nan>:
    4de4:	9f ef       	ldi	r25, 0xFF	; 255
    4de6:	80 ec       	ldi	r24, 0xC0	; 192
    4de8:	08 95       	ret

00004dea <__fp_pscA>:
    4dea:	00 24       	eor	r0, r0
    4dec:	0a 94       	dec	r0
    4dee:	16 16       	cp	r1, r22
    4df0:	17 06       	cpc	r1, r23
    4df2:	18 06       	cpc	r1, r24
    4df4:	09 06       	cpc	r0, r25
    4df6:	08 95       	ret

00004df8 <__fp_pscB>:
    4df8:	00 24       	eor	r0, r0
    4dfa:	0a 94       	dec	r0
    4dfc:	12 16       	cp	r1, r18
    4dfe:	13 06       	cpc	r1, r19
    4e00:	14 06       	cpc	r1, r20
    4e02:	05 06       	cpc	r0, r21
    4e04:	08 95       	ret

00004e06 <__fp_round>:
    4e06:	09 2e       	mov	r0, r25
    4e08:	03 94       	inc	r0
    4e0a:	00 0c       	add	r0, r0
    4e0c:	11 f4       	brne	.+4      	; 0x4e12 <__fp_round+0xc>
    4e0e:	88 23       	and	r24, r24
    4e10:	52 f0       	brmi	.+20     	; 0x4e26 <__fp_round+0x20>
    4e12:	bb 0f       	add	r27, r27
    4e14:	40 f4       	brcc	.+16     	; 0x4e26 <__fp_round+0x20>
    4e16:	bf 2b       	or	r27, r31
    4e18:	11 f4       	brne	.+4      	; 0x4e1e <__fp_round+0x18>
    4e1a:	60 ff       	sbrs	r22, 0
    4e1c:	04 c0       	rjmp	.+8      	; 0x4e26 <__fp_round+0x20>
    4e1e:	6f 5f       	subi	r22, 0xFF	; 255
    4e20:	7f 4f       	sbci	r23, 0xFF	; 255
    4e22:	8f 4f       	sbci	r24, 0xFF	; 255
    4e24:	9f 4f       	sbci	r25, 0xFF	; 255
    4e26:	08 95       	ret

00004e28 <__fp_split3>:
    4e28:	57 fd       	sbrc	r21, 7
    4e2a:	90 58       	subi	r25, 0x80	; 128
    4e2c:	44 0f       	add	r20, r20
    4e2e:	55 1f       	adc	r21, r21
    4e30:	59 f0       	breq	.+22     	; 0x4e48 <__fp_splitA+0x10>
    4e32:	5f 3f       	cpi	r21, 0xFF	; 255
    4e34:	71 f0       	breq	.+28     	; 0x4e52 <__fp_splitA+0x1a>
    4e36:	47 95       	ror	r20

00004e38 <__fp_splitA>:
    4e38:	88 0f       	add	r24, r24
    4e3a:	97 fb       	bst	r25, 7
    4e3c:	99 1f       	adc	r25, r25
    4e3e:	61 f0       	breq	.+24     	; 0x4e58 <__fp_splitA+0x20>
    4e40:	9f 3f       	cpi	r25, 0xFF	; 255
    4e42:	79 f0       	breq	.+30     	; 0x4e62 <__fp_splitA+0x2a>
    4e44:	87 95       	ror	r24
    4e46:	08 95       	ret
    4e48:	12 16       	cp	r1, r18
    4e4a:	13 06       	cpc	r1, r19
    4e4c:	14 06       	cpc	r1, r20
    4e4e:	55 1f       	adc	r21, r21
    4e50:	f2 cf       	rjmp	.-28     	; 0x4e36 <__fp_split3+0xe>
    4e52:	46 95       	lsr	r20
    4e54:	f1 df       	rcall	.-30     	; 0x4e38 <__fp_splitA>
    4e56:	08 c0       	rjmp	.+16     	; 0x4e68 <__fp_splitA+0x30>
    4e58:	16 16       	cp	r1, r22
    4e5a:	17 06       	cpc	r1, r23
    4e5c:	18 06       	cpc	r1, r24
    4e5e:	99 1f       	adc	r25, r25
    4e60:	f1 cf       	rjmp	.-30     	; 0x4e44 <__fp_splitA+0xc>
    4e62:	86 95       	lsr	r24
    4e64:	71 05       	cpc	r23, r1
    4e66:	61 05       	cpc	r22, r1
    4e68:	08 94       	sec
    4e6a:	08 95       	ret

00004e6c <__fp_zero>:
    4e6c:	e8 94       	clt

00004e6e <__fp_szero>:
    4e6e:	bb 27       	eor	r27, r27
    4e70:	66 27       	eor	r22, r22
    4e72:	77 27       	eor	r23, r23
    4e74:	cb 01       	movw	r24, r22
    4e76:	97 f9       	bld	r25, 7
    4e78:	08 95       	ret

00004e7a <__gesf2>:
    4e7a:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__fp_cmp>
    4e7e:	08 f4       	brcc	.+2      	; 0x4e82 <__gesf2+0x8>
    4e80:	8f ef       	ldi	r24, 0xFF	; 255
    4e82:	08 95       	ret
    4e84:	16 f0       	brts	.+4      	; 0x4e8a <__gesf2+0x10>
    4e86:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__fp_mpack>
    4e8a:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__fp_nan>
    4e8e:	68 94       	set
    4e90:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__fp_inf>

00004e94 <log>:
    4e94:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <__fp_splitA>
    4e98:	a8 f3       	brcs	.-22     	; 0x4e84 <__gesf2+0xa>
    4e9a:	99 23       	and	r25, r25
    4e9c:	c1 f3       	breq	.-16     	; 0x4e8e <__gesf2+0x14>
    4e9e:	ae f3       	brts	.-22     	; 0x4e8a <__gesf2+0x10>
    4ea0:	df 93       	push	r29
    4ea2:	cf 93       	push	r28
    4ea4:	1f 93       	push	r17
    4ea6:	0f 93       	push	r16
    4ea8:	ff 92       	push	r15
    4eaa:	c9 2f       	mov	r28, r25
    4eac:	dd 27       	eor	r29, r29
    4eae:	88 23       	and	r24, r24
    4eb0:	2a f0       	brmi	.+10     	; 0x4ebc <log+0x28>
    4eb2:	21 97       	sbiw	r28, 0x01	; 1
    4eb4:	66 0f       	add	r22, r22
    4eb6:	77 1f       	adc	r23, r23
    4eb8:	88 1f       	adc	r24, r24
    4eba:	da f7       	brpl	.-10     	; 0x4eb2 <log+0x1e>
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	40 e8       	ldi	r20, 0x80	; 128
    4ec2:	5f eb       	ldi	r21, 0xBF	; 191
    4ec4:	9f e3       	ldi	r25, 0x3F	; 63
    4ec6:	88 39       	cpi	r24, 0x98	; 152
    4ec8:	20 f0       	brcs	.+8      	; 0x4ed2 <log+0x3e>
    4eca:	80 3e       	cpi	r24, 0xE0	; 224
    4ecc:	38 f0       	brcs	.+14     	; 0x4edc <log+0x48>
    4ece:	21 96       	adiw	r28, 0x01	; 1
    4ed0:	8f 77       	andi	r24, 0x7F	; 127
    4ed2:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__addsf3>
    4ed6:	e4 e5       	ldi	r30, 0x54	; 84
    4ed8:	f0 e0       	ldi	r31, 0x00	; 0
    4eda:	04 c0       	rjmp	.+8      	; 0x4ee4 <log+0x50>
    4edc:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__addsf3>
    4ee0:	e1 e8       	ldi	r30, 0x81	; 129
    4ee2:	f0 e0       	ldi	r31, 0x00	; 0
    4ee4:	0e 94 0d 28 	call	0x501a	; 0x501a <__fp_powser>
    4ee8:	8b 01       	movw	r16, r22
    4eea:	be 01       	movw	r22, r28
    4eec:	ec 01       	movw	r28, r24
    4eee:	fb 2e       	mov	r15, r27
    4ef0:	6f 57       	subi	r22, 0x7F	; 127
    4ef2:	71 09       	sbc	r23, r1
    4ef4:	75 95       	asr	r23
    4ef6:	77 1f       	adc	r23, r23
    4ef8:	88 0b       	sbc	r24, r24
    4efa:	99 0b       	sbc	r25, r25
    4efc:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__floatsisf>
    4f00:	28 e1       	ldi	r18, 0x18	; 24
    4f02:	32 e7       	ldi	r19, 0x72	; 114
    4f04:	41 e3       	ldi	r20, 0x31	; 49
    4f06:	5f e3       	ldi	r21, 0x3F	; 63
    4f08:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <__mulsf3x>
    4f0c:	af 2d       	mov	r26, r15
    4f0e:	98 01       	movw	r18, r16
    4f10:	ae 01       	movw	r20, r28
    4f12:	ff 90       	pop	r15
    4f14:	0f 91       	pop	r16
    4f16:	1f 91       	pop	r17
    4f18:	cf 91       	pop	r28
    4f1a:	df 91       	pop	r29
    4f1c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__addsf3x>
    4f20:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__fp_round>

00004f24 <__mulsf3>:
    4f24:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <__mulsf3x>
    4f28:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__fp_round>
    4f2c:	0e 94 f5 26 	call	0x4dea	; 0x4dea <__fp_pscA>
    4f30:	38 f0       	brcs	.+14     	; 0x4f40 <__mulsf3+0x1c>
    4f32:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__fp_pscB>
    4f36:	20 f0       	brcs	.+8      	; 0x4f40 <__mulsf3+0x1c>
    4f38:	95 23       	and	r25, r21
    4f3a:	11 f0       	breq	.+4      	; 0x4f40 <__mulsf3+0x1c>
    4f3c:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__fp_inf>
    4f40:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__fp_nan>
    4f44:	11 24       	eor	r1, r1
    4f46:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <__fp_szero>

00004f4a <__mulsf3x>:
    4f4a:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__fp_split3>
    4f4e:	70 f3       	brcs	.-36     	; 0x4f2c <__mulsf3+0x8>

00004f50 <__mulsf3_pse>:
    4f50:	95 9f       	mul	r25, r21
    4f52:	c1 f3       	breq	.-16     	; 0x4f44 <__mulsf3+0x20>
    4f54:	95 0f       	add	r25, r21
    4f56:	50 e0       	ldi	r21, 0x00	; 0
    4f58:	55 1f       	adc	r21, r21
    4f5a:	62 9f       	mul	r22, r18
    4f5c:	f0 01       	movw	r30, r0
    4f5e:	72 9f       	mul	r23, r18
    4f60:	bb 27       	eor	r27, r27
    4f62:	f0 0d       	add	r31, r0
    4f64:	b1 1d       	adc	r27, r1
    4f66:	63 9f       	mul	r22, r19
    4f68:	aa 27       	eor	r26, r26
    4f6a:	f0 0d       	add	r31, r0
    4f6c:	b1 1d       	adc	r27, r1
    4f6e:	aa 1f       	adc	r26, r26
    4f70:	64 9f       	mul	r22, r20
    4f72:	66 27       	eor	r22, r22
    4f74:	b0 0d       	add	r27, r0
    4f76:	a1 1d       	adc	r26, r1
    4f78:	66 1f       	adc	r22, r22
    4f7a:	82 9f       	mul	r24, r18
    4f7c:	22 27       	eor	r18, r18
    4f7e:	b0 0d       	add	r27, r0
    4f80:	a1 1d       	adc	r26, r1
    4f82:	62 1f       	adc	r22, r18
    4f84:	73 9f       	mul	r23, r19
    4f86:	b0 0d       	add	r27, r0
    4f88:	a1 1d       	adc	r26, r1
    4f8a:	62 1f       	adc	r22, r18
    4f8c:	83 9f       	mul	r24, r19
    4f8e:	a0 0d       	add	r26, r0
    4f90:	61 1d       	adc	r22, r1
    4f92:	22 1f       	adc	r18, r18
    4f94:	74 9f       	mul	r23, r20
    4f96:	33 27       	eor	r19, r19
    4f98:	a0 0d       	add	r26, r0
    4f9a:	61 1d       	adc	r22, r1
    4f9c:	23 1f       	adc	r18, r19
    4f9e:	84 9f       	mul	r24, r20
    4fa0:	60 0d       	add	r22, r0
    4fa2:	21 1d       	adc	r18, r1
    4fa4:	82 2f       	mov	r24, r18
    4fa6:	76 2f       	mov	r23, r22
    4fa8:	6a 2f       	mov	r22, r26
    4faa:	11 24       	eor	r1, r1
    4fac:	9f 57       	subi	r25, 0x7F	; 127
    4fae:	50 40       	sbci	r21, 0x00	; 0
    4fb0:	9a f0       	brmi	.+38     	; 0x4fd8 <__mulsf3_pse+0x88>
    4fb2:	f1 f0       	breq	.+60     	; 0x4ff0 <__mulsf3_pse+0xa0>
    4fb4:	88 23       	and	r24, r24
    4fb6:	4a f0       	brmi	.+18     	; 0x4fca <__mulsf3_pse+0x7a>
    4fb8:	ee 0f       	add	r30, r30
    4fba:	ff 1f       	adc	r31, r31
    4fbc:	bb 1f       	adc	r27, r27
    4fbe:	66 1f       	adc	r22, r22
    4fc0:	77 1f       	adc	r23, r23
    4fc2:	88 1f       	adc	r24, r24
    4fc4:	91 50       	subi	r25, 0x01	; 1
    4fc6:	50 40       	sbci	r21, 0x00	; 0
    4fc8:	a9 f7       	brne	.-22     	; 0x4fb4 <__mulsf3_pse+0x64>
    4fca:	9e 3f       	cpi	r25, 0xFE	; 254
    4fcc:	51 05       	cpc	r21, r1
    4fce:	80 f0       	brcs	.+32     	; 0x4ff0 <__mulsf3_pse+0xa0>
    4fd0:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__fp_inf>
    4fd4:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <__fp_szero>
    4fd8:	5f 3f       	cpi	r21, 0xFF	; 255
    4fda:	e4 f3       	brlt	.-8      	; 0x4fd4 <__mulsf3_pse+0x84>
    4fdc:	98 3e       	cpi	r25, 0xE8	; 232
    4fde:	d4 f3       	brlt	.-12     	; 0x4fd4 <__mulsf3_pse+0x84>
    4fe0:	86 95       	lsr	r24
    4fe2:	77 95       	ror	r23
    4fe4:	67 95       	ror	r22
    4fe6:	b7 95       	ror	r27
    4fe8:	f7 95       	ror	r31
    4fea:	e7 95       	ror	r30
    4fec:	9f 5f       	subi	r25, 0xFF	; 255
    4fee:	c1 f7       	brne	.-16     	; 0x4fe0 <__mulsf3_pse+0x90>
    4ff0:	fe 2b       	or	r31, r30
    4ff2:	88 0f       	add	r24, r24
    4ff4:	91 1d       	adc	r25, r1
    4ff6:	96 95       	lsr	r25
    4ff8:	87 95       	ror	r24
    4ffa:	97 f9       	bld	r25, 7
    4ffc:	08 95       	ret

00004ffe <__fp_mpack>:
    4ffe:	9f 3f       	cpi	r25, 0xFF	; 255
    5000:	31 f0       	breq	.+12     	; 0x500e <__fp_mpack_finite+0xc>

00005002 <__fp_mpack_finite>:
    5002:	91 50       	subi	r25, 0x01	; 1
    5004:	20 f4       	brcc	.+8      	; 0x500e <__fp_mpack_finite+0xc>
    5006:	87 95       	ror	r24
    5008:	77 95       	ror	r23
    500a:	67 95       	ror	r22
    500c:	b7 95       	ror	r27
    500e:	88 0f       	add	r24, r24
    5010:	91 1d       	adc	r25, r1
    5012:	96 95       	lsr	r25
    5014:	87 95       	ror	r24
    5016:	97 f9       	bld	r25, 7
    5018:	08 95       	ret

0000501a <__fp_powser>:
    501a:	df 93       	push	r29
    501c:	cf 93       	push	r28
    501e:	1f 93       	push	r17
    5020:	0f 93       	push	r16
    5022:	ff 92       	push	r15
    5024:	ef 92       	push	r14
    5026:	df 92       	push	r13
    5028:	7b 01       	movw	r14, r22
    502a:	8c 01       	movw	r16, r24
    502c:	68 94       	set
    502e:	06 c0       	rjmp	.+12     	; 0x503c <__fp_powser+0x22>
    5030:	da 2e       	mov	r13, r26
    5032:	ef 01       	movw	r28, r30
    5034:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <__mulsf3x>
    5038:	fe 01       	movw	r30, r28
    503a:	e8 94       	clt
    503c:	a5 91       	lpm	r26, Z+
    503e:	25 91       	lpm	r18, Z+
    5040:	35 91       	lpm	r19, Z+
    5042:	45 91       	lpm	r20, Z+
    5044:	55 91       	lpm	r21, Z+
    5046:	a6 f3       	brts	.-24     	; 0x5030 <__fp_powser+0x16>
    5048:	ef 01       	movw	r28, r30
    504a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__addsf3x>
    504e:	fe 01       	movw	r30, r28
    5050:	97 01       	movw	r18, r14
    5052:	a8 01       	movw	r20, r16
    5054:	da 94       	dec	r13
    5056:	69 f7       	brne	.-38     	; 0x5032 <__fp_powser+0x18>
    5058:	df 90       	pop	r13
    505a:	ef 90       	pop	r14
    505c:	ff 90       	pop	r15
    505e:	0f 91       	pop	r16
    5060:	1f 91       	pop	r17
    5062:	cf 91       	pop	r28
    5064:	df 91       	pop	r29
    5066:	08 95       	ret

00005068 <__udivmodsi4>:
    5068:	a1 e2       	ldi	r26, 0x21	; 33
    506a:	1a 2e       	mov	r1, r26
    506c:	aa 1b       	sub	r26, r26
    506e:	bb 1b       	sub	r27, r27
    5070:	fd 01       	movw	r30, r26
    5072:	0d c0       	rjmp	.+26     	; 0x508e <__udivmodsi4_ep>

00005074 <__udivmodsi4_loop>:
    5074:	aa 1f       	adc	r26, r26
    5076:	bb 1f       	adc	r27, r27
    5078:	ee 1f       	adc	r30, r30
    507a:	ff 1f       	adc	r31, r31
    507c:	a2 17       	cp	r26, r18
    507e:	b3 07       	cpc	r27, r19
    5080:	e4 07       	cpc	r30, r20
    5082:	f5 07       	cpc	r31, r21
    5084:	20 f0       	brcs	.+8      	; 0x508e <__udivmodsi4_ep>
    5086:	a2 1b       	sub	r26, r18
    5088:	b3 0b       	sbc	r27, r19
    508a:	e4 0b       	sbc	r30, r20
    508c:	f5 0b       	sbc	r31, r21

0000508e <__udivmodsi4_ep>:
    508e:	66 1f       	adc	r22, r22
    5090:	77 1f       	adc	r23, r23
    5092:	88 1f       	adc	r24, r24
    5094:	99 1f       	adc	r25, r25
    5096:	1a 94       	dec	r1
    5098:	69 f7       	brne	.-38     	; 0x5074 <__udivmodsi4_loop>
    509a:	60 95       	com	r22
    509c:	70 95       	com	r23
    509e:	80 95       	com	r24
    50a0:	90 95       	com	r25
    50a2:	9b 01       	movw	r18, r22
    50a4:	ac 01       	movw	r20, r24
    50a6:	bd 01       	movw	r22, r26
    50a8:	cf 01       	movw	r24, r30
    50aa:	08 95       	ret

000050ac <__divmodsi4>:
    50ac:	05 2e       	mov	r0, r21
    50ae:	97 fb       	bst	r25, 7
    50b0:	1e f4       	brtc	.+6      	; 0x50b8 <__divmodsi4+0xc>
    50b2:	00 94       	com	r0
    50b4:	0e 94 6d 28 	call	0x50da	; 0x50da <__negsi2>
    50b8:	57 fd       	sbrc	r21, 7
    50ba:	07 d0       	rcall	.+14     	; 0x50ca <__divmodsi4_neg2>
    50bc:	0e 94 34 28 	call	0x5068	; 0x5068 <__udivmodsi4>
    50c0:	07 fc       	sbrc	r0, 7
    50c2:	03 d0       	rcall	.+6      	; 0x50ca <__divmodsi4_neg2>
    50c4:	4e f4       	brtc	.+18     	; 0x50d8 <__divmodsi4_exit>
    50c6:	0c 94 6d 28 	jmp	0x50da	; 0x50da <__negsi2>

000050ca <__divmodsi4_neg2>:
    50ca:	50 95       	com	r21
    50cc:	40 95       	com	r20
    50ce:	30 95       	com	r19
    50d0:	21 95       	neg	r18
    50d2:	3f 4f       	sbci	r19, 0xFF	; 255
    50d4:	4f 4f       	sbci	r20, 0xFF	; 255
    50d6:	5f 4f       	sbci	r21, 0xFF	; 255

000050d8 <__divmodsi4_exit>:
    50d8:	08 95       	ret

000050da <__negsi2>:
    50da:	90 95       	com	r25
    50dc:	80 95       	com	r24
    50de:	70 95       	com	r23
    50e0:	61 95       	neg	r22
    50e2:	7f 4f       	sbci	r23, 0xFF	; 255
    50e4:	8f 4f       	sbci	r24, 0xFF	; 255
    50e6:	9f 4f       	sbci	r25, 0xFF	; 255
    50e8:	08 95       	ret

000050ea <__tablejump2__>:
    50ea:	ee 0f       	add	r30, r30
    50ec:	ff 1f       	adc	r31, r31
    50ee:	05 90       	lpm	r0, Z+
    50f0:	f4 91       	lpm	r31, Z
    50f2:	e0 2d       	mov	r30, r0
    50f4:	09 94       	ijmp

000050f6 <dtostrf>:
    50f6:	ef 92       	push	r14
    50f8:	0f 93       	push	r16
    50fa:	1f 93       	push	r17
    50fc:	cf 93       	push	r28
    50fe:	df 93       	push	r29
    5100:	e8 01       	movw	r28, r16
    5102:	34 e0       	ldi	r19, 0x04	; 4
    5104:	47 fd       	sbrc	r20, 7
    5106:	34 e1       	ldi	r19, 0x14	; 20
    5108:	04 2e       	mov	r0, r20
    510a:	00 0c       	add	r0, r0
    510c:	55 0b       	sbc	r21, r21
    510e:	57 ff       	sbrs	r21, 7
    5110:	03 c0       	rjmp	.+6      	; 0x5118 <dtostrf+0x22>
    5112:	51 95       	neg	r21
    5114:	41 95       	neg	r20
    5116:	51 09       	sbc	r21, r1
    5118:	e3 2e       	mov	r14, r19
    511a:	02 2f       	mov	r16, r18
    511c:	24 2f       	mov	r18, r20
    511e:	ae 01       	movw	r20, r28
    5120:	0e 94 a2 28 	call	0x5144	; 0x5144 <dtoa_prf>
    5124:	ce 01       	movw	r24, r28
    5126:	df 91       	pop	r29
    5128:	cf 91       	pop	r28
    512a:	1f 91       	pop	r17
    512c:	0f 91       	pop	r16
    512e:	ef 90       	pop	r14
    5130:	08 95       	ret

00005132 <memcpy>:
    5132:	fb 01       	movw	r30, r22
    5134:	dc 01       	movw	r26, r24
    5136:	02 c0       	rjmp	.+4      	; 0x513c <memcpy+0xa>
    5138:	01 90       	ld	r0, Z+
    513a:	0d 92       	st	X+, r0
    513c:	41 50       	subi	r20, 0x01	; 1
    513e:	50 40       	sbci	r21, 0x00	; 0
    5140:	d8 f7       	brcc	.-10     	; 0x5138 <memcpy+0x6>
    5142:	08 95       	ret

00005144 <dtoa_prf>:
    5144:	a9 e0       	ldi	r26, 0x09	; 9
    5146:	b0 e0       	ldi	r27, 0x00	; 0
    5148:	e8 ea       	ldi	r30, 0xA8	; 168
    514a:	f8 e2       	ldi	r31, 0x28	; 40
    514c:	0c 94 df 2a 	jmp	0x55be	; 0x55be <__prologue_saves__+0xc>
    5150:	6a 01       	movw	r12, r20
    5152:	f2 2e       	mov	r15, r18
    5154:	b0 2e       	mov	r11, r16
    5156:	10 2f       	mov	r17, r16
    5158:	fb e3       	ldi	r31, 0x3B	; 59
    515a:	af 2e       	mov	r10, r31
    515c:	a0 16       	cp	r10, r16
    515e:	08 f4       	brcc	.+2      	; 0x5162 <dtoa_prf+0x1e>
    5160:	1b e3       	ldi	r17, 0x3B	; 59
    5162:	1f 5f       	subi	r17, 0xFF	; 255
    5164:	01 2f       	mov	r16, r17
    5166:	27 e0       	ldi	r18, 0x07	; 7
    5168:	ae 01       	movw	r20, r28
    516a:	4f 5f       	subi	r20, 0xFF	; 255
    516c:	5f 4f       	sbci	r21, 0xFF	; 255
    516e:	0e 94 01 2a 	call	0x5402	; 0x5402 <__ftoa_engine>
    5172:	bc 01       	movw	r22, r24
    5174:	89 81       	ldd	r24, Y+1	; 0x01
    5176:	98 2f       	mov	r25, r24
    5178:	99 70       	andi	r25, 0x09	; 9
    517a:	91 30       	cpi	r25, 0x01	; 1
    517c:	09 f4       	brne	.+2      	; 0x5180 <dtoa_prf+0x3c>
    517e:	3f c0       	rjmp	.+126    	; 0x51fe <dtoa_prf+0xba>
    5180:	9b e2       	ldi	r25, 0x2B	; 43
    5182:	e1 fc       	sbrc	r14, 1
    5184:	04 c0       	rjmp	.+8      	; 0x518e <dtoa_prf+0x4a>
    5186:	9e 2d       	mov	r25, r14
    5188:	91 70       	andi	r25, 0x01	; 1
    518a:	e0 fc       	sbrc	r14, 0
    518c:	3a c0       	rjmp	.+116    	; 0x5202 <dtoa_prf+0xbe>
    518e:	5e 2d       	mov	r21, r14
    5190:	50 71       	andi	r21, 0x10	; 16
    5192:	e8 2f       	mov	r30, r24
    5194:	e8 70       	andi	r30, 0x08	; 8
    5196:	83 ff       	sbrs	r24, 3
    5198:	46 c0       	rjmp	.+140    	; 0x5226 <dtoa_prf+0xe2>
    519a:	84 e0       	ldi	r24, 0x04	; 4
    519c:	91 11       	cpse	r25, r1
    519e:	01 c0       	rjmp	.+2      	; 0x51a2 <dtoa_prf+0x5e>
    51a0:	83 e0       	ldi	r24, 0x03	; 3
    51a2:	ef 2d       	mov	r30, r15
    51a4:	e8 1b       	sub	r30, r24
    51a6:	8f 15       	cp	r24, r15
    51a8:	08 f0       	brcs	.+2      	; 0x51ac <dtoa_prf+0x68>
    51aa:	e0 e0       	ldi	r30, 0x00	; 0
    51ac:	d6 01       	movw	r26, r12
    51ae:	8e 2f       	mov	r24, r30
    51b0:	20 e2       	ldi	r18, 0x20	; 32
    51b2:	55 23       	and	r21, r21
    51b4:	51 f1       	breq	.+84     	; 0x520a <dtoa_prf+0xc6>
    51b6:	99 23       	and	r25, r25
    51b8:	29 f0       	breq	.+10     	; 0x51c4 <dtoa_prf+0x80>
    51ba:	d6 01       	movw	r26, r12
    51bc:	9c 93       	st	X, r25
    51be:	c6 01       	movw	r24, r12
    51c0:	01 96       	adiw	r24, 0x01	; 1
    51c2:	6c 01       	movw	r12, r24
    51c4:	96 01       	movw	r18, r12
    51c6:	2d 5f       	subi	r18, 0xFD	; 253
    51c8:	3f 4f       	sbci	r19, 0xFF	; 255
    51ca:	e2 fe       	sbrs	r14, 2
    51cc:	24 c0       	rjmp	.+72     	; 0x5216 <dtoa_prf+0xd2>
    51ce:	8e e4       	ldi	r24, 0x4E	; 78
    51d0:	d6 01       	movw	r26, r12
    51d2:	8c 93       	st	X, r24
    51d4:	91 e4       	ldi	r25, 0x41	; 65
    51d6:	11 96       	adiw	r26, 0x01	; 1
    51d8:	9c 93       	st	X, r25
    51da:	11 97       	sbiw	r26, 0x01	; 1
    51dc:	12 96       	adiw	r26, 0x02	; 2
    51de:	8c 93       	st	X, r24
    51e0:	d9 01       	movw	r26, r18
    51e2:	8e 2f       	mov	r24, r30
    51e4:	90 e2       	ldi	r25, 0x20	; 32
    51e6:	81 11       	cpse	r24, r1
    51e8:	1b c0       	rjmp	.+54     	; 0x5220 <dtoa_prf+0xdc>
    51ea:	e2 0f       	add	r30, r18
    51ec:	f3 2f       	mov	r31, r19
    51ee:	f1 1d       	adc	r31, r1
    51f0:	10 82       	st	Z, r1
    51f2:	8e ef       	ldi	r24, 0xFE	; 254
    51f4:	9f ef       	ldi	r25, 0xFF	; 255
    51f6:	29 96       	adiw	r28, 0x09	; 9
    51f8:	ec e0       	ldi	r30, 0x0C	; 12
    51fa:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <__epilogue_restores__+0xc>
    51fe:	9d e2       	ldi	r25, 0x2D	; 45
    5200:	c6 cf       	rjmp	.-116    	; 0x518e <dtoa_prf+0x4a>
    5202:	90 e2       	ldi	r25, 0x20	; 32
    5204:	c4 cf       	rjmp	.-120    	; 0x518e <dtoa_prf+0x4a>
    5206:	2d 93       	st	X+, r18
    5208:	81 50       	subi	r24, 0x01	; 1
    520a:	81 11       	cpse	r24, r1
    520c:	fc cf       	rjmp	.-8      	; 0x5206 <dtoa_prf+0xc2>
    520e:	ce 0e       	add	r12, r30
    5210:	d1 1c       	adc	r13, r1
    5212:	e0 e0       	ldi	r30, 0x00	; 0
    5214:	d0 cf       	rjmp	.-96     	; 0x51b6 <dtoa_prf+0x72>
    5216:	8e e6       	ldi	r24, 0x6E	; 110
    5218:	d6 01       	movw	r26, r12
    521a:	8c 93       	st	X, r24
    521c:	91 e6       	ldi	r25, 0x61	; 97
    521e:	db cf       	rjmp	.-74     	; 0x51d6 <dtoa_prf+0x92>
    5220:	9d 93       	st	X+, r25
    5222:	81 50       	subi	r24, 0x01	; 1
    5224:	e0 cf       	rjmp	.-64     	; 0x51e6 <dtoa_prf+0xa2>
    5226:	48 2f       	mov	r20, r24
    5228:	44 70       	andi	r20, 0x04	; 4
    522a:	82 ff       	sbrs	r24, 2
    522c:	3d c0       	rjmp	.+122    	; 0x52a8 <dtoa_prf+0x164>
    522e:	84 e0       	ldi	r24, 0x04	; 4
    5230:	91 11       	cpse	r25, r1
    5232:	01 c0       	rjmp	.+2      	; 0x5236 <dtoa_prf+0xf2>
    5234:	83 e0       	ldi	r24, 0x03	; 3
    5236:	8f 15       	cp	r24, r15
    5238:	10 f4       	brcc	.+4      	; 0x523e <dtoa_prf+0xfa>
    523a:	ef 2d       	mov	r30, r15
    523c:	e8 1b       	sub	r30, r24
    523e:	d6 01       	movw	r26, r12
    5240:	8e 2f       	mov	r24, r30
    5242:	20 e2       	ldi	r18, 0x20	; 32
    5244:	55 23       	and	r21, r21
    5246:	09 f1       	breq	.+66     	; 0x528a <dtoa_prf+0x146>
    5248:	99 23       	and	r25, r25
    524a:	29 f0       	breq	.+10     	; 0x5256 <dtoa_prf+0x112>
    524c:	d6 01       	movw	r26, r12
    524e:	9c 93       	st	X, r25
    5250:	c6 01       	movw	r24, r12
    5252:	01 96       	adiw	r24, 0x01	; 1
    5254:	6c 01       	movw	r12, r24
    5256:	96 01       	movw	r18, r12
    5258:	2d 5f       	subi	r18, 0xFD	; 253
    525a:	3f 4f       	sbci	r19, 0xFF	; 255
    525c:	e2 fe       	sbrs	r14, 2
    525e:	1b c0       	rjmp	.+54     	; 0x5296 <dtoa_prf+0x152>
    5260:	89 e4       	ldi	r24, 0x49	; 73
    5262:	d6 01       	movw	r26, r12
    5264:	8c 93       	st	X, r24
    5266:	8e e4       	ldi	r24, 0x4E	; 78
    5268:	11 96       	adiw	r26, 0x01	; 1
    526a:	8c 93       	st	X, r24
    526c:	11 97       	sbiw	r26, 0x01	; 1
    526e:	86 e4       	ldi	r24, 0x46	; 70
    5270:	12 96       	adiw	r26, 0x02	; 2
    5272:	8c 93       	st	X, r24
    5274:	d9 01       	movw	r26, r18
    5276:	8e 2f       	mov	r24, r30
    5278:	90 e2       	ldi	r25, 0x20	; 32
    527a:	88 23       	and	r24, r24
    527c:	09 f4       	brne	.+2      	; 0x5280 <dtoa_prf+0x13c>
    527e:	b5 cf       	rjmp	.-150    	; 0x51ea <dtoa_prf+0xa6>
    5280:	9d 93       	st	X+, r25
    5282:	81 50       	subi	r24, 0x01	; 1
    5284:	fa cf       	rjmp	.-12     	; 0x527a <dtoa_prf+0x136>
    5286:	2d 93       	st	X+, r18
    5288:	81 50       	subi	r24, 0x01	; 1
    528a:	81 11       	cpse	r24, r1
    528c:	fc cf       	rjmp	.-8      	; 0x5286 <dtoa_prf+0x142>
    528e:	ce 0e       	add	r12, r30
    5290:	d1 1c       	adc	r13, r1
    5292:	e0 e0       	ldi	r30, 0x00	; 0
    5294:	d9 cf       	rjmp	.-78     	; 0x5248 <dtoa_prf+0x104>
    5296:	89 e6       	ldi	r24, 0x69	; 105
    5298:	d6 01       	movw	r26, r12
    529a:	8c 93       	st	X, r24
    529c:	8e e6       	ldi	r24, 0x6E	; 110
    529e:	11 96       	adiw	r26, 0x01	; 1
    52a0:	8c 93       	st	X, r24
    52a2:	11 97       	sbiw	r26, 0x01	; 1
    52a4:	86 e6       	ldi	r24, 0x66	; 102
    52a6:	e4 cf       	rjmp	.-56     	; 0x5270 <dtoa_prf+0x12c>
    52a8:	9b 01       	movw	r18, r22
    52aa:	77 ff       	sbrs	r23, 7
    52ac:	02 c0       	rjmp	.+4      	; 0x52b2 <dtoa_prf+0x16e>
    52ae:	30 e0       	ldi	r19, 0x00	; 0
    52b0:	20 e0       	ldi	r18, 0x00	; 0
    52b2:	a1 e0       	ldi	r26, 0x01	; 1
    52b4:	b0 e0       	ldi	r27, 0x00	; 0
    52b6:	91 11       	cpse	r25, r1
    52b8:	02 c0       	rjmp	.+4      	; 0x52be <dtoa_prf+0x17a>
    52ba:	b0 e0       	ldi	r27, 0x00	; 0
    52bc:	a0 e0       	ldi	r26, 0x00	; 0
    52be:	f9 01       	movw	r30, r18
    52c0:	31 96       	adiw	r30, 0x01	; 1
    52c2:	ae 0f       	add	r26, r30
    52c4:	bf 1f       	adc	r27, r31
    52c6:	8b 2c       	mov	r8, r11
    52c8:	91 2c       	mov	r9, r1
    52ca:	bb 20       	and	r11, r11
    52cc:	09 f4       	brne	.+2      	; 0x52d0 <dtoa_prf+0x18c>
    52ce:	61 c0       	rjmp	.+194    	; 0x5392 <dtoa_prf+0x24e>
    52d0:	54 01       	movw	r10, r8
    52d2:	ef ef       	ldi	r30, 0xFF	; 255
    52d4:	ae 1a       	sub	r10, r30
    52d6:	be 0a       	sbc	r11, r30
    52d8:	aa 0d       	add	r26, r10
    52da:	bb 1d       	adc	r27, r11
    52dc:	fa 16       	cp	r15, r26
    52de:	1b 06       	cpc	r1, r27
    52e0:	19 f0       	breq	.+6      	; 0x52e8 <dtoa_prf+0x1a4>
    52e2:	14 f0       	brlt	.+4      	; 0x52e8 <dtoa_prf+0x1a4>
    52e4:	4f 2d       	mov	r20, r15
    52e6:	4a 1b       	sub	r20, r26
    52e8:	51 11       	cpse	r21, r1
    52ea:	88 c0       	rjmp	.+272    	; 0x53fc <dtoa_prf+0x2b8>
    52ec:	e3 fc       	sbrc	r14, 3
    52ee:	59 c0       	rjmp	.+178    	; 0x53a2 <dtoa_prf+0x25e>
    52f0:	76 01       	movw	r14, r12
    52f2:	a4 2f       	mov	r26, r20
    52f4:	b0 e2       	ldi	r27, 0x20	; 32
    52f6:	a1 11       	cpse	r26, r1
    52f8:	4f c0       	rjmp	.+158    	; 0x5398 <dtoa_prf+0x254>
    52fa:	c4 0e       	add	r12, r20
    52fc:	d1 1c       	adc	r13, r1
    52fe:	99 23       	and	r25, r25
    5300:	09 f4       	brne	.+2      	; 0x5304 <dtoa_prf+0x1c0>
    5302:	5b c0       	rjmp	.+182    	; 0x53ba <dtoa_prf+0x276>
    5304:	40 e0       	ldi	r20, 0x00	; 0
    5306:	d6 01       	movw	r26, r12
    5308:	11 96       	adiw	r26, 0x01	; 1
    530a:	f6 01       	movw	r30, r12
    530c:	90 83       	st	Z, r25
    530e:	6d 01       	movw	r12, r26
    5310:	55 23       	and	r21, r21
    5312:	09 f4       	brne	.+2      	; 0x5316 <dtoa_prf+0x1d2>
    5314:	48 c0       	rjmp	.+144    	; 0x53a6 <dtoa_prf+0x262>
    5316:	01 2f       	mov	r16, r17
    5318:	06 0f       	add	r16, r22
    531a:	9a 81       	ldd	r25, Y+2	; 0x02
    531c:	58 2f       	mov	r21, r24
    531e:	50 71       	andi	r21, 0x10	; 16
    5320:	84 ff       	sbrs	r24, 4
    5322:	03 c0       	rjmp	.+6      	; 0x532a <dtoa_prf+0x1e6>
    5324:	91 33       	cpi	r25, 0x31	; 49
    5326:	09 f4       	brne	.+2      	; 0x532a <dtoa_prf+0x1e6>
    5328:	01 50       	subi	r16, 0x01	; 1
    532a:	10 16       	cp	r1, r16
    532c:	0c f0       	brlt	.+2      	; 0x5330 <dtoa_prf+0x1ec>
    532e:	47 c0       	rjmp	.+142    	; 0x53be <dtoa_prf+0x27a>
    5330:	09 30       	cpi	r16, 0x09	; 9
    5332:	08 f0       	brcs	.+2      	; 0x5336 <dtoa_prf+0x1f2>
    5334:	08 e0       	ldi	r16, 0x08	; 8
    5336:	ee e2       	ldi	r30, 0x2E	; 46
    5338:	fe 2e       	mov	r15, r30
    533a:	5b 01       	movw	r10, r22
    533c:	a0 1a       	sub	r10, r16
    533e:	b1 08       	sbc	r11, r1
    5340:	85 01       	movw	r16, r10
    5342:	91 94       	neg	r9
    5344:	81 94       	neg	r8
    5346:	91 08       	sbc	r9, r1
    5348:	2f 3f       	cpi	r18, 0xFF	; 255
    534a:	32 07       	cpc	r19, r18
    534c:	29 f4       	brne	.+10     	; 0x5358 <dtoa_prf+0x214>
    534e:	d6 01       	movw	r26, r12
    5350:	fc 92       	st	X, r15
    5352:	f6 01       	movw	r30, r12
    5354:	31 96       	adiw	r30, 0x01	; 1
    5356:	6f 01       	movw	r12, r30
    5358:	62 17       	cp	r22, r18
    535a:	73 07       	cpc	r23, r19
    535c:	94 f1       	brlt	.+100    	; 0x53c2 <dtoa_prf+0x27e>
    535e:	02 17       	cp	r16, r18
    5360:	13 07       	cpc	r17, r19
    5362:	7c f5       	brge	.+94     	; 0x53c2 <dtoa_prf+0x27e>
    5364:	db 01       	movw	r26, r22
    5366:	a2 1b       	sub	r26, r18
    5368:	b3 0b       	sbc	r27, r19
    536a:	aa 24       	eor	r10, r10
    536c:	a3 94       	inc	r10
    536e:	b1 2c       	mov	r11, r1
    5370:	ac 0e       	add	r10, r28
    5372:	bd 1e       	adc	r11, r29
    5374:	aa 0d       	add	r26, r10
    5376:	bb 1d       	adc	r27, r11
    5378:	11 96       	adiw	r26, 0x01	; 1
    537a:	8c 91       	ld	r24, X
    537c:	21 50       	subi	r18, 0x01	; 1
    537e:	31 09       	sbc	r19, r1
    5380:	d6 01       	movw	r26, r12
    5382:	11 96       	adiw	r26, 0x01	; 1
    5384:	28 15       	cp	r18, r8
    5386:	39 05       	cpc	r19, r9
    5388:	f4 f0       	brlt	.+60     	; 0x53c6 <dtoa_prf+0x282>
    538a:	f6 01       	movw	r30, r12
    538c:	80 83       	st	Z, r24
    538e:	6d 01       	movw	r12, r26
    5390:	db cf       	rjmp	.-74     	; 0x5348 <dtoa_prf+0x204>
    5392:	b1 2c       	mov	r11, r1
    5394:	a1 2c       	mov	r10, r1
    5396:	a0 cf       	rjmp	.-192    	; 0x52d8 <dtoa_prf+0x194>
    5398:	f7 01       	movw	r30, r14
    539a:	b1 93       	st	Z+, r27
    539c:	7f 01       	movw	r14, r30
    539e:	a1 50       	subi	r26, 0x01	; 1
    53a0:	aa cf       	rjmp	.-172    	; 0x52f6 <dtoa_prf+0x1b2>
    53a2:	91 11       	cpse	r25, r1
    53a4:	b0 cf       	rjmp	.-160    	; 0x5306 <dtoa_prf+0x1c2>
    53a6:	d6 01       	movw	r26, r12
    53a8:	94 2f       	mov	r25, r20
    53aa:	50 e3       	ldi	r21, 0x30	; 48
    53ac:	02 c0       	rjmp	.+4      	; 0x53b2 <dtoa_prf+0x26e>
    53ae:	5d 93       	st	X+, r21
    53b0:	91 50       	subi	r25, 0x01	; 1
    53b2:	91 11       	cpse	r25, r1
    53b4:	fc cf       	rjmp	.-8      	; 0x53ae <dtoa_prf+0x26a>
    53b6:	c4 0e       	add	r12, r20
    53b8:	d1 1c       	adc	r13, r1
    53ba:	40 e0       	ldi	r20, 0x00	; 0
    53bc:	ac cf       	rjmp	.-168    	; 0x5316 <dtoa_prf+0x1d2>
    53be:	01 e0       	ldi	r16, 0x01	; 1
    53c0:	ba cf       	rjmp	.-140    	; 0x5336 <dtoa_prf+0x1f2>
    53c2:	80 e3       	ldi	r24, 0x30	; 48
    53c4:	db cf       	rjmp	.-74     	; 0x537c <dtoa_prf+0x238>
    53c6:	62 17       	cp	r22, r18
    53c8:	73 07       	cpc	r23, r19
    53ca:	31 f4       	brne	.+12     	; 0x53d8 <dtoa_prf+0x294>
    53cc:	96 33       	cpi	r25, 0x36	; 54
    53ce:	88 f4       	brcc	.+34     	; 0x53f2 <dtoa_prf+0x2ae>
    53d0:	95 33       	cpi	r25, 0x35	; 53
    53d2:	11 f4       	brne	.+4      	; 0x53d8 <dtoa_prf+0x294>
    53d4:	55 23       	and	r21, r21
    53d6:	69 f0       	breq	.+26     	; 0x53f2 <dtoa_prf+0x2ae>
    53d8:	f6 01       	movw	r30, r12
    53da:	80 83       	st	Z, r24
    53dc:	fd 01       	movw	r30, r26
    53de:	84 2f       	mov	r24, r20
    53e0:	90 e2       	ldi	r25, 0x20	; 32
    53e2:	81 11       	cpse	r24, r1
    53e4:	08 c0       	rjmp	.+16     	; 0x53f6 <dtoa_prf+0x2b2>
    53e6:	a4 0f       	add	r26, r20
    53e8:	b1 1d       	adc	r27, r1
    53ea:	1c 92       	st	X, r1
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	80 e0       	ldi	r24, 0x00	; 0
    53f0:	02 cf       	rjmp	.-508    	; 0x51f6 <dtoa_prf+0xb2>
    53f2:	81 e3       	ldi	r24, 0x31	; 49
    53f4:	f1 cf       	rjmp	.-30     	; 0x53d8 <dtoa_prf+0x294>
    53f6:	91 93       	st	Z+, r25
    53f8:	81 50       	subi	r24, 0x01	; 1
    53fa:	f3 cf       	rjmp	.-26     	; 0x53e2 <dtoa_prf+0x29e>
    53fc:	91 11       	cpse	r25, r1
    53fe:	83 cf       	rjmp	.-250    	; 0x5306 <dtoa_prf+0x1c2>
    5400:	8a cf       	rjmp	.-236    	; 0x5316 <dtoa_prf+0x1d2>

00005402 <__ftoa_engine>:
    5402:	28 30       	cpi	r18, 0x08	; 8
    5404:	08 f0       	brcs	.+2      	; 0x5408 <__ftoa_engine+0x6>
    5406:	27 e0       	ldi	r18, 0x07	; 7
    5408:	33 27       	eor	r19, r19
    540a:	da 01       	movw	r26, r20
    540c:	99 0f       	add	r25, r25
    540e:	31 1d       	adc	r19, r1
    5410:	87 fd       	sbrc	r24, 7
    5412:	91 60       	ori	r25, 0x01	; 1
    5414:	00 96       	adiw	r24, 0x00	; 0
    5416:	61 05       	cpc	r22, r1
    5418:	71 05       	cpc	r23, r1
    541a:	39 f4       	brne	.+14     	; 0x542a <__ftoa_engine+0x28>
    541c:	32 60       	ori	r19, 0x02	; 2
    541e:	2e 5f       	subi	r18, 0xFE	; 254
    5420:	3d 93       	st	X+, r19
    5422:	30 e3       	ldi	r19, 0x30	; 48
    5424:	2a 95       	dec	r18
    5426:	e1 f7       	brne	.-8      	; 0x5420 <__ftoa_engine+0x1e>
    5428:	08 95       	ret
    542a:	9f 3f       	cpi	r25, 0xFF	; 255
    542c:	30 f0       	brcs	.+12     	; 0x543a <__ftoa_engine+0x38>
    542e:	80 38       	cpi	r24, 0x80	; 128
    5430:	71 05       	cpc	r23, r1
    5432:	61 05       	cpc	r22, r1
    5434:	09 f0       	breq	.+2      	; 0x5438 <__ftoa_engine+0x36>
    5436:	3c 5f       	subi	r19, 0xFC	; 252
    5438:	3c 5f       	subi	r19, 0xFC	; 252
    543a:	3d 93       	st	X+, r19
    543c:	91 30       	cpi	r25, 0x01	; 1
    543e:	08 f0       	brcs	.+2      	; 0x5442 <__ftoa_engine+0x40>
    5440:	80 68       	ori	r24, 0x80	; 128
    5442:	91 1d       	adc	r25, r1
    5444:	df 93       	push	r29
    5446:	cf 93       	push	r28
    5448:	1f 93       	push	r17
    544a:	0f 93       	push	r16
    544c:	ff 92       	push	r15
    544e:	ef 92       	push	r14
    5450:	19 2f       	mov	r17, r25
    5452:	98 7f       	andi	r25, 0xF8	; 248
    5454:	96 95       	lsr	r25
    5456:	e9 2f       	mov	r30, r25
    5458:	96 95       	lsr	r25
    545a:	96 95       	lsr	r25
    545c:	e9 0f       	add	r30, r25
    545e:	ff 27       	eor	r31, r31
    5460:	e8 5f       	subi	r30, 0xF8	; 248
    5462:	fe 4f       	sbci	r31, 0xFE	; 254
    5464:	99 27       	eor	r25, r25
    5466:	33 27       	eor	r19, r19
    5468:	ee 24       	eor	r14, r14
    546a:	ff 24       	eor	r15, r15
    546c:	a7 01       	movw	r20, r14
    546e:	e7 01       	movw	r28, r14
    5470:	05 90       	lpm	r0, Z+
    5472:	08 94       	sec
    5474:	07 94       	ror	r0
    5476:	28 f4       	brcc	.+10     	; 0x5482 <__ftoa_engine+0x80>
    5478:	36 0f       	add	r19, r22
    547a:	e7 1e       	adc	r14, r23
    547c:	f8 1e       	adc	r15, r24
    547e:	49 1f       	adc	r20, r25
    5480:	51 1d       	adc	r21, r1
    5482:	66 0f       	add	r22, r22
    5484:	77 1f       	adc	r23, r23
    5486:	88 1f       	adc	r24, r24
    5488:	99 1f       	adc	r25, r25
    548a:	06 94       	lsr	r0
    548c:	a1 f7       	brne	.-24     	; 0x5476 <__ftoa_engine+0x74>
    548e:	05 90       	lpm	r0, Z+
    5490:	07 94       	ror	r0
    5492:	28 f4       	brcc	.+10     	; 0x549e <__ftoa_engine+0x9c>
    5494:	e7 0e       	add	r14, r23
    5496:	f8 1e       	adc	r15, r24
    5498:	49 1f       	adc	r20, r25
    549a:	56 1f       	adc	r21, r22
    549c:	c1 1d       	adc	r28, r1
    549e:	77 0f       	add	r23, r23
    54a0:	88 1f       	adc	r24, r24
    54a2:	99 1f       	adc	r25, r25
    54a4:	66 1f       	adc	r22, r22
    54a6:	06 94       	lsr	r0
    54a8:	a1 f7       	brne	.-24     	; 0x5492 <__ftoa_engine+0x90>
    54aa:	05 90       	lpm	r0, Z+
    54ac:	07 94       	ror	r0
    54ae:	28 f4       	brcc	.+10     	; 0x54ba <__ftoa_engine+0xb8>
    54b0:	f8 0e       	add	r15, r24
    54b2:	49 1f       	adc	r20, r25
    54b4:	56 1f       	adc	r21, r22
    54b6:	c7 1f       	adc	r28, r23
    54b8:	d1 1d       	adc	r29, r1
    54ba:	88 0f       	add	r24, r24
    54bc:	99 1f       	adc	r25, r25
    54be:	66 1f       	adc	r22, r22
    54c0:	77 1f       	adc	r23, r23
    54c2:	06 94       	lsr	r0
    54c4:	a1 f7       	brne	.-24     	; 0x54ae <__ftoa_engine+0xac>
    54c6:	05 90       	lpm	r0, Z+
    54c8:	07 94       	ror	r0
    54ca:	20 f4       	brcc	.+8      	; 0x54d4 <__ftoa_engine+0xd2>
    54cc:	49 0f       	add	r20, r25
    54ce:	56 1f       	adc	r21, r22
    54d0:	c7 1f       	adc	r28, r23
    54d2:	d8 1f       	adc	r29, r24
    54d4:	99 0f       	add	r25, r25
    54d6:	66 1f       	adc	r22, r22
    54d8:	77 1f       	adc	r23, r23
    54da:	88 1f       	adc	r24, r24
    54dc:	06 94       	lsr	r0
    54de:	a9 f7       	brne	.-22     	; 0x54ca <__ftoa_engine+0xc8>
    54e0:	84 91       	lpm	r24, Z
    54e2:	10 95       	com	r17
    54e4:	17 70       	andi	r17, 0x07	; 7
    54e6:	41 f0       	breq	.+16     	; 0x54f8 <__ftoa_engine+0xf6>
    54e8:	d6 95       	lsr	r29
    54ea:	c7 95       	ror	r28
    54ec:	57 95       	ror	r21
    54ee:	47 95       	ror	r20
    54f0:	f7 94       	ror	r15
    54f2:	e7 94       	ror	r14
    54f4:	1a 95       	dec	r17
    54f6:	c1 f7       	brne	.-16     	; 0x54e8 <__ftoa_engine+0xe6>
    54f8:	ee ea       	ldi	r30, 0xAE	; 174
    54fa:	f0 e0       	ldi	r31, 0x00	; 0
    54fc:	68 94       	set
    54fe:	15 90       	lpm	r1, Z+
    5500:	15 91       	lpm	r17, Z+
    5502:	35 91       	lpm	r19, Z+
    5504:	65 91       	lpm	r22, Z+
    5506:	95 91       	lpm	r25, Z+
    5508:	05 90       	lpm	r0, Z+
    550a:	7f e2       	ldi	r23, 0x2F	; 47
    550c:	73 95       	inc	r23
    550e:	e1 18       	sub	r14, r1
    5510:	f1 0a       	sbc	r15, r17
    5512:	43 0b       	sbc	r20, r19
    5514:	56 0b       	sbc	r21, r22
    5516:	c9 0b       	sbc	r28, r25
    5518:	d0 09       	sbc	r29, r0
    551a:	c0 f7       	brcc	.-16     	; 0x550c <__ftoa_engine+0x10a>
    551c:	e1 0c       	add	r14, r1
    551e:	f1 1e       	adc	r15, r17
    5520:	43 1f       	adc	r20, r19
    5522:	56 1f       	adc	r21, r22
    5524:	c9 1f       	adc	r28, r25
    5526:	d0 1d       	adc	r29, r0
    5528:	7e f4       	brtc	.+30     	; 0x5548 <__ftoa_engine+0x146>
    552a:	70 33       	cpi	r23, 0x30	; 48
    552c:	11 f4       	brne	.+4      	; 0x5532 <__ftoa_engine+0x130>
    552e:	8a 95       	dec	r24
    5530:	e6 cf       	rjmp	.-52     	; 0x54fe <__ftoa_engine+0xfc>
    5532:	e8 94       	clt
    5534:	01 50       	subi	r16, 0x01	; 1
    5536:	30 f0       	brcs	.+12     	; 0x5544 <__ftoa_engine+0x142>
    5538:	08 0f       	add	r16, r24
    553a:	0a f4       	brpl	.+2      	; 0x553e <__ftoa_engine+0x13c>
    553c:	00 27       	eor	r16, r16
    553e:	02 17       	cp	r16, r18
    5540:	08 f4       	brcc	.+2      	; 0x5544 <__ftoa_engine+0x142>
    5542:	20 2f       	mov	r18, r16
    5544:	23 95       	inc	r18
    5546:	02 2f       	mov	r16, r18
    5548:	7a 33       	cpi	r23, 0x3A	; 58
    554a:	28 f0       	brcs	.+10     	; 0x5556 <__ftoa_engine+0x154>
    554c:	79 e3       	ldi	r23, 0x39	; 57
    554e:	7d 93       	st	X+, r23
    5550:	2a 95       	dec	r18
    5552:	e9 f7       	brne	.-6      	; 0x554e <__ftoa_engine+0x14c>
    5554:	10 c0       	rjmp	.+32     	; 0x5576 <__ftoa_engine+0x174>
    5556:	7d 93       	st	X+, r23
    5558:	2a 95       	dec	r18
    555a:	89 f6       	brne	.-94     	; 0x54fe <__ftoa_engine+0xfc>
    555c:	06 94       	lsr	r0
    555e:	97 95       	ror	r25
    5560:	67 95       	ror	r22
    5562:	37 95       	ror	r19
    5564:	17 95       	ror	r17
    5566:	17 94       	ror	r1
    5568:	e1 18       	sub	r14, r1
    556a:	f1 0a       	sbc	r15, r17
    556c:	43 0b       	sbc	r20, r19
    556e:	56 0b       	sbc	r21, r22
    5570:	c9 0b       	sbc	r28, r25
    5572:	d0 09       	sbc	r29, r0
    5574:	98 f0       	brcs	.+38     	; 0x559c <__ftoa_engine+0x19a>
    5576:	23 95       	inc	r18
    5578:	7e 91       	ld	r23, -X
    557a:	73 95       	inc	r23
    557c:	7a 33       	cpi	r23, 0x3A	; 58
    557e:	08 f0       	brcs	.+2      	; 0x5582 <__ftoa_engine+0x180>
    5580:	70 e3       	ldi	r23, 0x30	; 48
    5582:	7c 93       	st	X, r23
    5584:	20 13       	cpse	r18, r16
    5586:	b8 f7       	brcc	.-18     	; 0x5576 <__ftoa_engine+0x174>
    5588:	7e 91       	ld	r23, -X
    558a:	70 61       	ori	r23, 0x10	; 16
    558c:	7d 93       	st	X+, r23
    558e:	30 f0       	brcs	.+12     	; 0x559c <__ftoa_engine+0x19a>
    5590:	83 95       	inc	r24
    5592:	71 e3       	ldi	r23, 0x31	; 49
    5594:	7d 93       	st	X+, r23
    5596:	70 e3       	ldi	r23, 0x30	; 48
    5598:	2a 95       	dec	r18
    559a:	e1 f7       	brne	.-8      	; 0x5594 <__ftoa_engine+0x192>
    559c:	11 24       	eor	r1, r1
    559e:	ef 90       	pop	r14
    55a0:	ff 90       	pop	r15
    55a2:	0f 91       	pop	r16
    55a4:	1f 91       	pop	r17
    55a6:	cf 91       	pop	r28
    55a8:	df 91       	pop	r29
    55aa:	99 27       	eor	r25, r25
    55ac:	87 fd       	sbrc	r24, 7
    55ae:	90 95       	com	r25
    55b0:	08 95       	ret

000055b2 <__prologue_saves__>:
    55b2:	2f 92       	push	r2
    55b4:	3f 92       	push	r3
    55b6:	4f 92       	push	r4
    55b8:	5f 92       	push	r5
    55ba:	6f 92       	push	r6
    55bc:	7f 92       	push	r7
    55be:	8f 92       	push	r8
    55c0:	9f 92       	push	r9
    55c2:	af 92       	push	r10
    55c4:	bf 92       	push	r11
    55c6:	cf 92       	push	r12
    55c8:	df 92       	push	r13
    55ca:	ef 92       	push	r14
    55cc:	ff 92       	push	r15
    55ce:	0f 93       	push	r16
    55d0:	1f 93       	push	r17
    55d2:	cf 93       	push	r28
    55d4:	df 93       	push	r29
    55d6:	cd b7       	in	r28, 0x3d	; 61
    55d8:	de b7       	in	r29, 0x3e	; 62
    55da:	ca 1b       	sub	r28, r26
    55dc:	db 0b       	sbc	r29, r27
    55de:	0f b6       	in	r0, 0x3f	; 63
    55e0:	f8 94       	cli
    55e2:	de bf       	out	0x3e, r29	; 62
    55e4:	0f be       	out	0x3f, r0	; 63
    55e6:	cd bf       	out	0x3d, r28	; 61
    55e8:	09 94       	ijmp

000055ea <__epilogue_restores__>:
    55ea:	2a 88       	ldd	r2, Y+18	; 0x12
    55ec:	39 88       	ldd	r3, Y+17	; 0x11
    55ee:	48 88       	ldd	r4, Y+16	; 0x10
    55f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    55f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    55f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    55f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    55f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    55fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    55fc:	b9 84       	ldd	r11, Y+9	; 0x09
    55fe:	c8 84       	ldd	r12, Y+8	; 0x08
    5600:	df 80       	ldd	r13, Y+7	; 0x07
    5602:	ee 80       	ldd	r14, Y+6	; 0x06
    5604:	fd 80       	ldd	r15, Y+5	; 0x05
    5606:	0c 81       	ldd	r16, Y+4	; 0x04
    5608:	1b 81       	ldd	r17, Y+3	; 0x03
    560a:	aa 81       	ldd	r26, Y+2	; 0x02
    560c:	b9 81       	ldd	r27, Y+1	; 0x01
    560e:	ce 0f       	add	r28, r30
    5610:	d1 1d       	adc	r29, r1
    5612:	0f b6       	in	r0, 0x3f	; 63
    5614:	f8 94       	cli
    5616:	de bf       	out	0x3e, r29	; 62
    5618:	0f be       	out	0x3f, r0	; 63
    561a:	cd bf       	out	0x3d, r28	; 61
    561c:	ed 01       	movw	r28, r26
    561e:	08 95       	ret

00005620 <_exit>:
    5620:	f8 94       	cli

00005622 <__stop_program>:
    5622:	ff cf       	rjmp	.-2      	; 0x5622 <__stop_program>
